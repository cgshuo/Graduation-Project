 Wright State University Wright State University Wright State University Wright State University that is formed by seamlessly integrating an n-gram model, a structured language model, and and long-span document semantic content. The composite language model has been trained by performing a convergent N-best list approximate EM algorithm and a follow-up EM algorithm to improve word prediction power on corpora with up to a billion tokens and stored on a from a state-of-the-art parsing-based machine translation system.
 1. Introduction
The Markov chain ( n -gram) source models, which predict each word on the basis of the previous n  X  1 words, have been the workhorses of state-of-the-art speech recognizers and machine translators that help to resolve acoustic or foreign language ambiguities by placing higher probability on more likely original underlying word strings. Although the Markov chains are efficient at encoding local word interactions, the n -gram model clearly ignores the rich syntactic and semantic structures that constrain natural lan-guages. Attempting to increase the order of an n -gram to capture longer range depen-dencies in natural language immediately runs into the curse of dimensionality (Bengio et al. 2003). The performance of conventional n -gram technology has essentially reached improve on n -grams (Jelinek 1991; Jelinek and Chelba 1999). Research groups (Och 2005;
Zhang, Hildebrand, and Vogel 2006; Brants et al. 2007; Emami, Papineni, and Sorensen 2007) have shown that using an immense distributed computing paradigm, up to 6-grams, can be trained on up to billions and trillions of tokens, yielding consistent sys-tem improvements because of excellent n -gram hit ratios on unseen test data, but Zhang (2008) did not observe much improvement beyond 6-grams. As the machine translation (MT) working groups stated in their final report (Lavie et al. 2006, page 3),  X  X hese approaches have resulted in small improvements in MT quality, but have not funda-mentally solved the problem. There is a dire need for developing novel approaches to language modeling. X  outperform n -grams; these are mainly the syntactic language models (Della Pietra et al. 1994; Chelba 2000; Chelba and Jelinek 2000; Charniak 2001; Roark 2001; Wang and
Harper 2002; Jelinek 2004; Bened  X   X andS  X  anchez 2005; Van Uytsel and Compernolle 2005) that effectively exploit sentence-level syntactic structure of natural language, and the topic language models (Saul and Pereira 1997; Gildea and Hofmann 1999; Bellegarda 2000; Wallach 2006) that exploit document-level semantic content. Unfortunately, each (Pereira 2000; Rosenfeld 2000a, 2000b); thus, each captures and exploits different aspects of natural language regularity. A natural question we should ask is whether/how we can construct more complex and powerful but computationally tractable language models by integrating many existing/emerging language model components, with each component focusing on specific linguistic phenomena like syntactic structure, semantic topic, morphology, and pragmatics in complementary, supplementary, and coherent ways (Bellegarda 2001, 2003).
 most commonly used method is linear interpolation (Chen and Goodman 1999; Jelinek and Mercer 1980; Goodman 2001), where each individual model is trained separately and then combined by a weighted linear combination. All of the syntactic structure-based models have used linear interpolation to combine trigrams to achieve further improvement over using their own models alone (Charniak 2001; Chelba and Jelinek 2000; Chelba 2000; Roark 2001). The weights in this case are trained using held-out data. Even though this technique is simple and easy to implement, it does not generally is a strong assumption in capturing subtleties in each of the component models (see more explanation and analysis in Section 6.2 and Appendix A). The second method is based on maximum entropy philosophy , which became very popular in machine learning and natural language processing communities due to the work in Berger, entropy is nothing but maximum likelihood estimation for undirected Markov random fields (MRFs) (Berger, Della Pietra, and Della Pietra 1996; Della Pietra, Della Pietra, and Lafferty 1997). As stated in Wang et al. (2005b), however, there are two weaknesses with maximum entropy approach. The first weakness is that this approach can only 632 information in natural language, such as syntactic structure and semantic topic. The second weakness is that if the statistical model is too complex it becomes intractable to estimate model parameters; computationally very expensive Markov chain Monte Carlo sampling methods (Mark, Miller, and Grenander 1996; Rosenfeld 2000b; Rosenfeld,
Chen, and Zhu 2001) would have to be used. One way to overcome the first hurdle is to use a preprocessing tool to extract hidden features (e.g., Rosenfeld [1996] used mutual information clustering method to find word pair triggers) then combine these triggers with trigrams through a maximum conditional entropy approach to allow the discourse topic to influence word prediction; Khudanpur and Wu (2000) used Chelba and Jelinek X  X  structured language model and a word clustering model to extract relevant grammatical and semantic features, then to again combine these features with trigrams through a maximum conditional entropy approach to form a syntactic, semantic, and lexical language model. Wang and colleagues (Wang et al. 2005a; Wang, Schuurmans, and Zhao 2012) have proposed the latent maximum entropy (LME) principle , which extends standard maximum entropy estimation by incorporating hidden dependency structure, but still the LME wouldn X  X  overcome the second hurdle. The third method is directed Markov random field (Wang et al. 2005b) that overcomes both weaknesses in the maximum entropy approach. Wang et al. used this approach to combine trigram, probabilistic context-free grammar (PCFG), and probabilistic latent semantic analysis (PLSA) models; a generalized inside X  X utside algorithm is derived that alters the well-known inside X  X utside algorithm for PCFG (Baker 1979; Lari and Young 1990) with modular modification to take into account the effect of n -gram and PLSA while remain-ing at the same cubic time complexity. When applying this to the Wall Street Journal corpus with 40 million tokens, they achieved moderate perplexity reduction. Because the probabilistic dependency structure in a structured language model (SLM) (Chelba 2000; Chelba and Jelinek 2000) is more complex and powerful than that in a PCFG,
Wang et al. (2006) studied the stochastic properties for the composite language model that integrates n -gram, SLM, and PLSA under the directed MRF framework (Wang et al. 2005b) and derived another generalized inside X  X utside algorithm to train a composite n -gram, SLM, and PLSA language model from a general expectation maximization (EM) (Dempster, Laird, and Rubin 1977) algorithm by following Jelinek X  X  ingenious definition of the inside and outside probabilities for SLM (Jelinek 2004). Again, the generalized inside X  X utside algorithm alters Jelinek X  X  inside X  X utside algorithm with modular modi-fication and has the same sixth order of sentence-length time complexity. Unfortunately, there are no experimental results reported.
 der the directed MRF framework as in Wang et al. (2006). The composite n -gram/ SLM/PLSA language model under the directed MRF paradigm is first introduced in algorithm proposed in Wang et al. (2006), we show how to train this composite model via an N -best list approximate EM algorithm that has linear time complexity and a follow-up EM algorithm to improve word prediction power. We prove the convergence of the N -best list approximate EM algorithm. To resolve the data sparseness problem, we generalize Jelinek and Mercer X  X  recursive mixing scheme for Markov source (Jelinek and Mercer 1980) to a mixture of Markov chains. To handle large-scale corpora up to a billion tokens, we demonstrate how to implement these algorithms under a distributed computing environment and how to store this language model on a supercomputer. In
Section 4, we describe how to use the model for testing. Related works are then summa-rized and compared in Section 5. Because language modeling is a data-rich and feature-rich density estimation problem, there is always a trade-off between approximate error and estimation error, thus in Section 6 we conduct comprehensive experiments on corpora with 44 million tokens, 230 million tokens, and 1.3 billion tokens, and compare perplexity results with n -grams ( n = 3, 4, 5 respectively) on these three corpora under various situations; drastic perplexity reductions are obtained. We explain why the com-posite language models lead to better predictive capacity than linear interpolation. The proposed composite language models are applied to the task of re-ranking the N -best list from Hiero (Chiang 2005, 2007), a state-of-the-art parsing-based machine translation system; we achieve significantly better translation quality measured by the Bleu score and  X  X eadability X  of translations. Finally, we draw our conclusions and propose future work in Section 7.
 or semantic fabric, which involves a fairly high degree of cognition. This is precisely the kind of knowledge that humans naturally and inherently use to process natural language, so it can be reasonably conjectured to represent a key ingredient for success X  (Bellegarda 2003, p. 105). In that light, the directed MRF framework,  X  X hose ultimate goal is to integrate all available knowledge sources, appears most likely to harbor a potential breakthrough. It is hoped that the on-going effort conducted in this work to leverage such latent synergies will lead, in the not-too-distant future, to more polyva-lent, multi-faceted, effective and tractable solutions for language modeling  X  this is only beginning to scratch the surface in developing systems capable of deep understanding of natural language X  (Bellegarda 2003, p. 105). 2. The Composite n -gram/SLM/PLSA Language Model random field to be a probability distribution P , which admits a recursive factorization if there exist non-negative functions,  X   X  (  X  ,  X  ),  X  graph, then we have a Bayesian network (Lauritzen 1996). Broadly speaking, however, the recursive factorization can refer to a representation more complicated than a graph with a fixed set of nodes and edges X  X or example, PCFG and SLM are examples of directed MRFs whose parse tree structure is a random object that can X  X  be described tween directed MRFs and undirected MRFs is that a directed MRF requires many local normalization constraints whereas an undirected MRF has a global normalization factor.

WORD-PREDICTOR, that is, given its entire document history, it predicts the next word w w  X  n + 2 ,  X  X  X  , w k and V denotes the vocabulary.
 tic information beyond the regular n -gram models to capture sentence-level long-range 634 dependencies. The SLM is based on statistical parsing techniques that allow syntactic analysis of sentences; it assigns a probability p ( W , T ) to every sentence W and every possible binary parse T . The terminals of T are the words of W with part of speech (POS) tags, and the nodes of T are annotated with phrase headwords and non-terminal labels. Let W be a sentence of length n words to which we have prepended the sentence beginning marker s and appended the sentence end marker / s so that w w n + 1 = / s .Let W k = w 0 , the beginning of the sentence up to the current position k )and W k -prefix. A word-parse k -prefix has a set of exposed heads h  X  head being a pair (headword, non-terminal label), H = V  X  O the set of non-terminal label (NTlabel), or in the case of a root-only tree (word, POS tag)
H = V  X  O where O denotes the set of POS tags. The exposed heads at a given position k in the input sentence are a function of the word-parse k -prefix.
 manner. At any given stage of the word generation by the SLM, the exposed headwords are those headwords of the current partial parse which are not yet part of a higher generate a sentence: about SLM in Chelba and Jelinek [1998, 2000]; Chelba [2000]; Jelinek [2004]). As an example taken from Jelinek (2004), Figure 1 shows a complete parse where SB/SE is a distinguished POS tag for s / / s respectively, ( s ,TOP) is the only allowed head, and ( / s ,TOP X ) is the head of any constituent that dominates / s but not s . In Figure 1, atthetimejustaftertheword as is generated, the exposed headwords are  X  s SB, show np, has vbz. X  The subsequent model actions are:  X  X OStag as, null, predict its,
POStag its, null, predict host, POStag host, adjoin-right-np, adjoin-left-pp, adjoin-left-pp, null, predict a,  X  X  X  . X  document co-occurrences using the bag-of-words assumption described as follows: of log-linear models with the expression p ( d , w ) = p ( d ) number of documents and the vocabulary size are much larger than the size of latent semantic class variables. Latent semantic class variables therefore function as bottleneck variables to constrain word occurrences in documents.
 generative language model under the directed MRF paradigm (Wang et al. 2005b, 2006), the composite language model is simply a complicated generative model that has four operators: WORD-PREDICTOR, TAGGER, CONSTRUCTOR, and SEMANTIZER.

The TAGGER and CONSTRUCTOR in SLM and the SEMANTIZER in PLSA remain unchanged; the WORD-PREDICTORs in n -gram, m -SLM, and PLSA, however, are combined to form a stronger WORD-PREDICTOR that generates the next word, w not only depending on the m most recently exposed headwords h k -prefix but also its n -gram history w k k  X  n + 2 and its semantic content g for WORD-PREDICTOR in the composite n -gram/ m -SLM/PLSA language model complex dependency structure but with more expressive power than the original
SLM. Figure 2 illustrates the structure of a composite n -gram/ m -SLM/PLSA language model.
 rather complex chain-tree-table directed MRF model (Wang et al. 2006) with local 636 normalization constraints for the parameters of each model component, WORD-
PREDICTOR, TAGGER, CONSTRUCTOR, and SEMANTIZER. That is, language model there exists a SEMANTIZER X  X  action to choose a topic g before any WORD-PREDICTOR X  X  action. Moreover, for m -SLM, its WORD-PREDICTOR predicts the next word, such as a , based on m most recently exposed headwords  X  s -SB, show-np, has-vp, X  but for the composite model, the WORD-PREDICTOR predicts the next word a based on m most recently exposed headwords  X  s -SB, show-np, has-vp, X  n -grams  X  X s its host, X  and a topic g . These are the only differences between SLM and our proposed composite language model. 3. Training Algorithm
For the composite n -gram/ m -SLM/PLSA language model under the directed MRF written as where ( W l , T l , G l | d ) denotes the joint sequence of the l th sentence W ture T l and semantic annotation string G l in document d . This sequence is produced by a unique sequence of model actions: WORD-PREDICTOR, TAGGER, CONSTRUCTOR,
SEMANTIZER moves; its probability is obtained by chaining the probabilities of these moves the l th sentence W l in document d ;#( w  X  1  X  n + 1 wh  X  its m most recently exposed headwords, and semantic content g in parse T annotation string G l of the l th sentence W l in document d ;#( twh count of tag t predicted by word w and the tags of m most recently exposed headwords in parse tree T l of the l th sentence W l in document d ; and finally #( ah count of constructor move a conditioning on m exposed headwords h of the l th sentence W l in document d .
 then independent of all other data-generating parameters, it is not critical to anything that follows; moreover, when a language model is used to find the most likely word se-quence in machine translation and speech recognition, this term is useless. Thus, similar to an n -gram language model, we will generally ignore this term and concentrate on optimizing Equation (8) in the subsequent development.

L ( 638 semantic content are hidden and the number of parse trees grows faster than expo-nentially with sentence length; Wang et al. (2006) have derived a generalized inside X  outside algorithm by applying the standard EM algorithm and considering the auxiliary function
The complexity of this algorithm is sixth order (sentence length), however; thus it is computationally too expensive to be practical for a large corpus even with the use of pruning on charts (Jelinek and Chelba 1999; Jelinek 2004). 3.1 N -best List Approximate EM
Similar to SLM (Chelba and Jelinek 1998, 2000; Chelba 2000), we adopt an N -best list approximate EM re-estimation with modular modifications to seamlessly incorporate the effect of n -gram and PLSA components. Instead of maximizing the likelihood
L (
D , p ), we maximize the N -best list likelihood, max where T l N is a set of N parse trees for sentence W l in document d , cardinality, and T N is a collection of T l N for sentences over entire corpus 1. N -best list search: For each sentence W in document d ,find N -best 2. EM update: Perform one iteration (or several iterations) of the EM Iterate steps (1) and (2) until the convergence of the N -best list likelihood. behavior of convergence of the N -best list approximate EM.

Amap M is from points of  X  to subsets of  X  is called a point-to-set map on  X  .It is said to be closed at  X  if  X  i  X   X  ,  X  i  X   X  and  X 
For a point-to-point map, continuity implies closedness. Then the global convergence theorem (Zangwill 1969) states the following.
 Theorem
Let M be a point-to-set map (an algorithm) that, given a point  X  sequence {  X   X  i = 0 } through the iteration  X  i + 1 = M (  X  of
M . Suppose (i) M is closed over the complement of  X  ; (ii) there is a continuous function  X  on  X  such that (a) if  X /  X   X  ,  X  (  X  ) &gt; X  (  X  ) for all  X   X  (  X  )  X   X  (  X  ) for all  X   X  M (  X  ).
 for some  X   X   X  .
 Proof
This theorem has been used by Wu (1983) to prove the convergence of a standard EM algorithm (Dempster, Laird, and Rubin 1977). We now use this theorem to show that the N -best list approximate EM algorithm globally converges to the stationary points of the N -best list likelihood. We encounter one difficulty at this point, however, due to the maximization operator in Equation (11); after each iteration the N -best list may have been changed, therefore the set of data presented for the estimation of model parameters may be different from the previous one. Nevertheless, we prove the convergence of the
N -best list approximate EM algorithm by checking whether it satisfies two conditions in Zangwill X  X  global convergence theorem. Because the composite model is essentially a mixture model of a curved exponential family through a complex hierarchy, there is a closed form solution for the  X  Q ( p , p , T N parse trees, so the N -best list approximate EM algorithm is a one-to-one map. Because  X  satisfied.
 of p satisfies the properties of  X  (  X  ) in condition (ii). Let 640 of N -best list parse trees for sentences over entire corpus  X  p and  X  p , respectively: and let  X  p be the closed form solution of maximizing  X 
Then The inequality in Equation (15) is strict unless  X  Using results proven by Wu (1983), we know that when  X  p is not a stationary point of the N -best list likelihood or  X  p /  X  M (  X  p ),  X   X  L ( thus the inequality in Equation (16) is strict. Finally, the inequality in Equation (17) is strict unless  X  p  X  M (  X  p ). Thus condition (ii) is satisfied.
 tonically increases the N -best list likelihood and converges in the sense of Zangwill X  X  global convergence.
 linear sentence length time complexity. 3.1.1 N -best List Search Strategy. For each sentence W in document d , instead of scanning all the hidden events (both allowed parse trees and semantic annotation strings) we document, a large number of topics should be pruned and only a small set of allowed topics should be kept due to the considerations of both computational time and resource demand, otherwise we have to use many more machines to store WORD-PREDICTOR X  X  parameters.
 each document simultaneously or separately. The latter is much preferred, because the first case is much more computationally expensive.
 corpus D , then keep the N most likely topics (denoted as p ( g | d ); the rest of the topics are purged.
 hypotheses (partial parses) that have been constructed by the same number of WORD-
PREDICTOR and the same number of CONSTRUCTOR operations. The hypotheses in each stack are ranked according to the log( P p ( W k , T where P p ( W k , T k | d ) = G of prefix W k = w 0 , w 1  X  X  X  , w k with its parse structure T
G unique sequence of model actions: WORD-PREDICTOR, TAGGER, CONSTRUCTOR, and SEMANTIZER moves. Its probability is obtained by chaining the probabilities of these moves. The value of P p ( W k , T k | d ) is computed recursively from P by the following formula: where W k  X  1 T k  X  1 is the word-parse ( k  X  1)-prefix; w
WORD-PREDICTOR; t k is the tag assigned to w k by the TAGGER; T mental parse structure that generates T k = T k  X  1 || is the parse structure built on top of T k  X  1 and the newly predicted word w notation stands for concatenation. Finally, p ( T k  X  1, k the probabilities of a series of CONSTRUCTOR moves in T k topics are pruned to G d , the probability of the SEMANTIZER is normalized to ensure a proper probability distribution. A stack vector consists of the ordered set of stacks con-taining partial parses with the same number of WORD-PREDICTOR operations but a different number of CONSTRUCTOR operations. In WORD-PREDICTOR and TAGGER operations, some hypotheses are discarded due to the maximum number of hypotheses that the stack can contain at any given time. In the CONSTRUCTOR operation, the resulting hypotheses are discarded due to either finite stack size or the log-probability threshold (the maximum tolerable difference between the log-probability score of the top-most hypothesis and the bottom-most hypothesis at any given state of the stack).
The synchronous, multi-stack search strategy is a greedy best-first search algorithm, to guide the search and thus does not guarantee that the N -best list parse trees are a global optimal solution (Russell and Norvig 2010). In practice, however, we find that the N -best list approximate EM algorithm does converge within several iterations. 3.1.2 EM Update. Once we have both the N -best parse trees for each sentence in docu-ment d and the N -best topics for document d , we derive the EM algorithm to estimate model parameters.
 composite model, which are nothing but the following normalized conditional expected counts: 642 model parameter over sentence W l in document d in the training corpus case where the number of parse trees grows faster than exponentially with sentence length, we use Jelinek-style recursive formulas in the generalized inside X  X utside algo-rithm (Jelinek 2004) to handle the tree structure and describe the weighted forest of possible derivations (Wang et al. 2006). In the N -best list case considered in this paper, however, we just enumerate each parse tree in the N -best list and compute the expected posterior count for each parse tree. For the WORD-PREDICTOR and the SEMANTIZER, we use Equations (19) and (22) and note that there is a sum over semantic annotation se-quence G l where the number of possible semantic annotation sequences is exponential.
We use forward X  X ackward recursive formulas reminiscent of those in hidden Markov models to compute the expected counts. To be more specific, for each parse T define the forward vector  X  l ( g | d )tobe where W l k is the word k -prefix for sentence W l ,and T using Equation (18) as
We define the backward vector  X  l ( g | d )tobe where W l k + 1,  X  = w l k + 2 ,  X  X  X  , / s is the subsequence after word w is the incremental parse structure after the parse structure T
W k + 1 that generates parse tree T  X  ( g | d ) can be recursively computed in a backward manner as
Then, the expected count of w  X  1  X  n + 1 wh  X  1  X  m g for the WORD-PREDICTOR on sentence W in document d is = = is recursively computed by Equation (18) through traversing the l th parse tree T of g for the SEMANTIZER on sentence W l in document d is expected count of each event of twh  X  1  X  m . tag and ah  X  document d is the real count appearing in parse tree T l of sentence W times the conditional distribution P p ( T l | W l , d ) = P is, P p ( T l | W l , d )#( twh  X  1  X  m . tag, W l , T l , d )and P
WORD-PREDICTOR, TAGGER, and CONSTRUCTOR, over parse T l of sentence W document d is the real count that appeared in parse T l of sentence W 644 and Chelba (2000).
 is used to obtain a smooth probability estimate for each model component (WORD-
PREDICTOR, TAGGER, and CONSTRUCTOR). The TAGGER and CONSTRUCTOR are conditional probabilistic models of the type p ( u | z 1 , a mixed set of words, POS tags, NTtags, and CONSTRUCTOR actions ( u only); and z ,  X  X  X  , z n form a linear Markov chain. The recursive mixing scheme is the standard one among relative frequency estimates of different orders k = 0, plained in Chelba and Jelinek (1998, 2000) and Chelba (2000). The WORD-PREDICTOR is, however, a conditional probabilistic model p ( w | w  X  has a combinatorial number of relative frequency estimates of different orders among three linear Markov chains. We generalize Jelinek and Mercer X  X  (1980) original recur-sive mixing scheme to handle the situation where the context is a mixture of Markov chains. The factored language (FL) model (Bilmes and Kirchhoff 2003) is close to the
Markov chains for word sequence and headword sequence because we believe natural language tightly follows these orders; moreover, where FL uses a backoff technique, we use linear interpolation.
 a lattice formed of all possible conditional probabilistic models and relative frequency estimates of different orders along each of the three linear Markov chains. Each vertex vertices having directed arcs pointing to this vertex and its relative frequency estimate; the linear interpolation coefficients are the weights of directed arcs. For example, the probabilistic models, p ( w | w  X  1 h  X  2 h  X  1 g ), p ( w their relative frequency estimate f ( w | w  X  2 w  X  1 h  X  negative context-dependent interpolation coefficients with a sum of less than 1; f ( w pus by the E-step of the N -best approximate EM algorithm, C ( w  X  equivalence classes (tied) based on the range into which the count falls; the count ranges for each equivalence class,  X  X uckets, X  are set such that a statistically sufficient number of events fall within that range. In our experiments, we set the count ranges to be the
These  X  X ied X  interpolation weights are determined by the maximum likelihood estimate from cross-validation data through the EM algorithm (Dempster, Laird, and Rubin 1977) where we use a public available parser in the openNLP software cross-validation data, and we run LSA to extract N most likely topics for each document in cross-validation data, then we gather joint counts for each model component, WORD-PREDICTOR, TAGGER, CONSTRUCTOR used to determine interpolation weights.
 values for each order are kept fixed to their initial values, the only parameters to be re-estimated using the EM algorithm are the maximal order counts for each model component. The interpolation scheme outlined here is then used to obtain a smooth probability estimate for each model component. 3.2 Follow-up EM
As explained in Chelba and Jelinek (2000) and Chelba (2000), for the SLM component a large fraction of the partial parse trees that can be used for assigning probability to the next word do not survive in the synchronous, multi-stack search strategy, thus they are not used in the N -best approximate EM algorithm for the estimation of WORD-
PREDICTOR to improve its predictive power. To remedy this weakness, we estimate a 646 separate WORD-PREDICTOR (and SEMANTIZER) model using the partial parse trees exploited by the synchronous, multi-stack search strategy.
 word at position k +1 in the input sentence of document d when the word-parse k -prefix
W k T k is available. From the causal relationship among the parameters of the composite n -gram/ m -SLM/PLSA, we have stage k during the synchronous multi-stack pruning strategy and it is a function of the word k -prefix W k = w 0 ,  X  X  X  , w k ; G k = g 1 ,  X  X  X  and its semantic string G k in a document d .
 signment that uses partial parse trees generated during the process of the synchronous, multi-stack search strategy can be written as where P p ( W l | d ) = k P p ( w ( l ) k + 1 | W l k , d )and W similar to Equation (8), we ignore the ancillary term p ( d ) in Equation (31). and p ( g k + 1 | d ) by maximizing Equation (31) to improve WORD-PREDICTOR X  X  predictive power. In this case, the estimation of the WORD-PREDICTOR is for
P model by accumulating each count at position k weighted by a posterior probability
P
The M-step uses the same count smoothing technique as that described in the N -best list approximate EM. 3.3 Distributed Architecture
When using very large corpora to train our composite language model, the data and the parameters cannot be stored together on a single machine, so we have to resort to dis-tributed computing. The topic of large-scale distributed language models is relatively new, and existing work is restricted to n -grams only (Zhang, Hildebrand, and Vogel 2006; Brants et al. 2007; Emami, Papineni, and Sorensen 2007). Although all existing research use distributed architectures that follow the client X  X erver paradigm, the real implementations are in fact different. Zhang et al. (2006) and Emami et al. (2007) store training corpora in suffix arrays such that one sub-corpus per server serves raw counts, and test sentences are loaded in a client. This implies that when computing the language model probability of a sentence in a client, all servers need to be contacted for each n -gram request. The approach by Brants et al. (2007) follows a standard MapReduce paradigm (Dean and Ghemawat 2004): The corpus is first divided and loaded into a number of clients, and n -gram counts are collected at each client, then the n -gram counts are mapped via hashing and are stored in a number of servers, resulting in exactly one server being contacted per n -gram when computing the language model probability of a sentence. We adopt a similar approach to Brants et al. (2007) and make it suitable to perform iterations of the N -best list approximate EM algorithm (see Figure 4). The corpus is divided and loaded into a number of clients. We use a publicly available parser to parse the sentences in each client to get the initial counts for w (WORD-PREDICTOR), twh  X  1  X  m . tag (TAGGER), and ah  X  1  X  the Map part, and then the counts for a particular w  X  1  X  summed up and stored in one of the servers by hashing through word w  X  , and its topic g . The counts for all twh  X  1  X  m summed up and stored in one of the servers, then we complete the Reduce part. This is the initialization of the N -best list approximate EM step. Each client then calls the servers for parameters to perform a synchronous multi-stack search for each sentence w servers by hashing through word w  X  1 , headword h  X  1 , and its topic g , and the counts the servers; thus we finish the Reduce part. The SEMANTIZER has document-specific 648 parameters, thus the EM iterative updates are performed at each of local clients. We repeat this procedure until convergence.

EM algorithm to re-estimate WORD-PREDICTOR. 4. Using the Model for Testing
When a language model is used in one-pass decoders of speech recognition and phrased-based MT systems to guide the search, the search space is organized as a prefix tree and operates left to right, thus we need to know the language model probability at the word level given by Equation (30) one word at a time. Because a document of the test data is not contained in the original training corpus, to compute the language model probability assignment for word w k + 1 we use a  X  X old-in X  heuristic approach similar to the one used in Hofmann (2001): The parameters corresponding to SEMANTIZER, p ( g | d ), are re-estimated by maximizing the probability of word subsequence seen so a document in test data X  X hile holding the other parameters fixed. Wang et al. (2005b) use on-line gradient ascent to re-estimate these parameters. We use three methods, one-step on-line EM , on-line EM with fixed learning rate ,and batch EM , to re-estimate these
Equation (32) with  X  set to 1 |  X  p ( g |  X  d k ) =  X  h
The batch EM is the standard EM algorithm where we repeat the iterative procedure until convergence. The initial values are set to d number of words in the entire training corpus).
 coming from previous words to generate a topic distribution, which then is used to predict the next word, so the sum over all next words is 1.
 values. For example, for batch EM, if we set initial values to be those obtained by using the pseudo-document up to the previous word  X  d k  X  1 = ( W
EM, we obtain worse perplexity results. Table 8 in Section 6.2 gives perplexity results that use these three methods to re-estimate the parameters of the SEMANTIZER, where the on-line EM with fixed learning rate not only has the cheapest computational cost but also leads to the highest perplexity reductions. 5. Related Work
Besides the work by Wang et al. (2005b, 2006) that was discussed in the Introduction, the closest work to ours is that by Khudanpur and Wu (2000) where the authors used
SLM and a word clustering model to extract relevant grammatical and semantic fea-tures, then integrated these features with n -grams by a maximum conditional entropy approach. Our composite language model is a generative model, all features play impor-tant roles in the EM iterations to allow maximal order events for WORD-PREDICTOR to appear; in Khudanpur and Wu (2000), however, the counts for all events are fixed after feature extraction from SLM and word clustering and no new maximal order events for WORD-PREDICTOR are possibly extracted, this potentially hinders the predictive power of WORD-PREDICTOR. Moreover, the training algorithm in Khudanpur and Wu is computationally expensive. Both methods use the first-stage N -best list approximate
EM to extract headwords, thus the complexity is at the same order at this stage; at second stage, however, where we use the follow-up EM, they use the maximum en-tropy approach. The maximum entropy approach is more expensive, mainly in feature expectation and normalization as well as optimization (such as iterative scaling or the quasi Newton method); ours is quite simple, which is expected relative to frequency estimates with proper smoothing.
 author examines the techniques of caching, clustering, higher-order n -grams, skipping models, and sentence-mixture models in various combinations (mainly linear interpola-
On a small training corpus with 100k tokens, a 50% perplexity reduction (1 bit improve-ment) is obtained. On a larger corpus with 284 million tokens without punctuation, the improvement declines to 38%; we assume that this improvement shrinks to 30% when compared with 4-gram as the baseline. 6. Experimental Results
In this section, we first explain the experimental set-up for our experiments, we then show comprehensive perplexity results in various situations, and we end by reporting the results when we apply the composite language model to the task of re-ranking the
N -best list from a state-of-the-art parsing-based machine translation system. 6.1 Experimental Set-up
In previous work (Gildea and Hofmann 1999; Bellegarda 2000; Chelba 2000; Chelba and Jelinek 2000; Charniak 2001; Roark 2001), all complex language models have been trained on relatively small data sets. There is the impression that complex language models only lead to better results than n -grams on small training corpora. For example,
Jurafsky and Martin (2008, page 482), state,  X  X e said earlier that statistical parsers can take advantage of longer-distance information than n -grams, which suggests that they might do a better job at language modeling/word prediction. It turns out that if we have a very large amount of training data, a 4-gram or 5-gram is nonetheless still the best way to do language modeling. X  To verify whether this is true, we have trained our language models using three different training sets: one has 44 million tokens, another has 230 million tokens, and the third has 1.3 billion tokens. An independent test set linear interpolation coefficients has 1.7 million tokens for the 44 million token training corpus, and 13.7 million tokens for both the 230 million and 1.3 billion token training corpora. All these data sets are taken from the LDC English Gigaword corpus with non-verbalized punctuation and we remove all punctuation. Table 1 provides the detailed in-formation on how these data sets were chosen from the LDC English Gigaword corpus. 650 training corpora is 0.6%, 0.9%, and 1.2%, respectively. The OOV rate on the 1.7 million and 13.7 million token check corpora is 0.6% and 1.3%, respectively. The OOV rate on the 354k token test corpus is 2.0%. Table 2 lists the statistics about the number of types of n -grams on these three corpora.
 goes headword percolation and binarization, each model component of WORD-
PREDICTOR, TAGGER, and CONSTRUCTOR is initialized from a set of parsed sentences. We use the openNLP software 2 to parse a large number of sentences in the
LDC English Gigaword corpus to generate an automatic treebank, which has a slightly different word-tokenization than that of the manual treebank such as the Penn Treebank used in Chelba and Jelinek (2000) and Chelba (2000). For the 44 and 230 million token corpora, all sentences are automatically parsed and used to initialize model parameters, whereas for the 1.3 billion token corpus, we parse the sentences from a portion of the corpus that contains 230 million tokens, then use them to initialize model parameters.
The parser at openNLP is trained on the Penn Treebank, which has only one million tokens, and there is a mismatch between the Penn Treebank and the LDC English
Gigaword corpus. Nevertheless, experimental results show that this approach is effec-tive to provide initial values of model parameters. 6.2 Perplexity Results
Table 3 gives the perplexity results (Bahl et al. 1977) of n -grams ( n =3,4,and5)using linear interpolation and Kneser-Ney (1995) smoothing when the training corpus has 44 million, 230 million, and 1.3 billion tokens, respectively. We have implemented a distributed n -gram with linear interpolation smoothing, but we don X  X  have distributed n -grams with Kneser-Ney smoothing implemented by us. Instead, we use the SRI
Language Modeling Toolkit to obtain perplexity results of n -grams with Kneser-Ney smoothing for the 44 million and 230 million token corpora using a single machine that has 20G memory at the Ohio Supercomputer center. We are not able to compute per-plexity results of n -grams with Kneser-Ney smoothing on the 1.3 billion token corpus, thus we leave these results blank in Table 3. From the results in Table 3, we decided to use a linearly smoothed trigram as the baseline model for the 44 million token corpus, a linearly smoothed 4-gram as the baseline model for the 230 million token corpus, and a linearly smoothed 5-gram as the baseline model for the 1.3 billion token corpus. the considerations of computational time and resource demand. Table 4 shows the perplexity results and computation time of composite n -gram/PLSA language models that are trained on the three corpora when the pre-defined number of total topics is 200, but different numbers of most-likely topics are kept for each document in PLSA; the 652 rest are pruned. For the composite 5-gram/PLSA model trained on the 1.3 billion token composite trigram/PLSA model trained on the 44M token corpus, the computation time increases drastically, with less than 5% percent perplexity improvement. In the following experiments, therefore, we keep the top five topics for each document from a total of 200 topics X  X ll other 195 topics are pruned.
 approximate EM algorithm until convergence, then the EM algorithm for a second stage of parameter re-estimation for WORD-PREDICTOR and SEMANTIZER until convergence. We fix the size of topics in the PLSA to be 200 and then prune to 5 in the experiments, where the unpruned 5 topics in general account for 70% probability models such as composite n -gram/ m -SLM, n -gram/PLSA, m -SLM/PLSA, their linear combinations, and so on, where we use on-line EM with a fixed learning rate to re-estimate the parameters of the SEMANTIZER of test document. The m -SLM performs lists the statistics about the number of types in the predictor of the m -SLMs on these three corpora, where for the 230 million token and 1.3 billion token corpora we cut off the fractional expected counts that are less than a predefined threshold of 0.005, to significantly reduce the number of the predictor X  X  types by 70%.
 trained on 44 million tokens and 230 million tokens, we cut off its fractional expected counts that are less than a threshold 0.005; this significantly reduces the number of the predictor X  X  types by 85%. When we train the composite language on the 1.3 billion token corpus, we have to both aggressively prune the parameters of WORD-PREDICTOR and shrink the order of n -gram and m -SLM in order to store them in a supercomputer having 1,000 cores. In particular, for the composite 5-gram/4-SLM model, its size is too big to store, thus we use its approximation, a linear combination of 5-gram/2-SLM and 2-gram/4-SLM. For the 5-gram/2-SLM or 2-gram/4-SLM, again we cut off its fractional expected counts that are less than a threshold 0.005, which significantly reduces the number of the predictor X  X  types by 85%. For the composite 4-SLM/PLSA model, we cut cantly reduces the number of predictor X  X  types by 85%. For the composite 4-SLM/PLSA model or its linear combination with models, we ignore all the tags and use only the words in the four headwords. We have checked that the conditional language model (Equation [30]) sums to 1 for large randomly selected conditional events. The compos-ite n -gram/ m -SLM/PLSA model gives significant perplexity reductions over baseline n -grams ( n = 3, 4, 5) and m -SLMs ( m = 2, 3, 4). The majority of gains comes from the
PLSA component, but when adding the SLM component into the n -gram/PLSA, there is a further 10% relative perplexity reduction.
 2-gram/4-SLM), and 4-SLM/PLSA models are when trained by the 1.3 billion token corpus after aggressive pruning. The total minimum number of servers used to store the parameters of the predictor for the composite 5-gram/PLSA, 5-gram/2-SLM (or 2-gram/4-SLM), and 4-SLM/PLSA models is, respectively, 400, 240, 400, and the num-three composite language models. There is no way to store the parameters of the linear combination of the composite 5-gram/PLSA, 5-gram/2-SLM (or 2-gram/4-SLM), and 4-SLM/PLSA models in our currently available supercomputer resources.
 5-gram/PLSA, and 5-gram/4-SLM+5-gram/PLSA models, respectively; these language models are trained using the 1.3 billion tokens corpus. The example demonstrates that our composite model is able to extract topic information and grammatical structure to improve word prediction for natural language.
 m -SLM/PLSA language models when three methods are used to re-estimate the pa-denote that during testing we used one step on-line EM, on-line EM with fixed learning best perplexity results as well as the least computation time. Again, when we train the composite language on the 1.3 billion token corpus, we have to shrink the order of the n -gram and m -SLM in order to store them in a supercomputer having 1,000 cores.
For the composite 4-SLM/PLSA model or its linear combination with models, we ignore all the tags and use only the words in the four headwords. For the composite 5-gram/ 4-SLM model or its linear combination with models, we in fact use its approximation, a linear combination of the 5-gram/2-SLM and 2-gram/4-SLM models.
 40 million token corpus in Table 5 on the vertices in Figure 3 to reveal many insights.
The baseline trigram result is given by the vertex p ( w | given by the vertex p ( w | h  X  2 h  X  1 ), the PLSA result is given by the vertex p ( w trigram/2-SLM result is given by the vertex p ( w | w  X  2 nation of vertices p ( w | w  X  2 w  X  1 )and p ( w | h  X  2 linear combination of vertices p ( w | w  X  2 w  X  1 )and p ( w result is given by a linear combination of vertices p ( w p ( w | g ). The trigram/PLSA+2-SLM/PLSA result is given by a linear combination of 2-SLM+2-SLM/PLSA result is given by a linear combination of vertices p ( w p ( w guage model is more powerful and expressive than the linear combination of tri-gram, 2-SLM, and PLSA for two reasons. First, valuable relative frequency estimates such as f ( w | w  X  2 w  X  1 h  X  2 h  X  1 g ), f ( w | w  X  2 composite language model, as seen from Figure 3. As long as there are events such 656 corpus, the composite trigram/2-SLM/PLSA will take them into account to improve the prediction power for test data, whereas a linear combination of trigram, 2-SLM, and PLSA just neglects a large amount of this valuable information. The second rea-son is that the weights used in a simple linear combination are context-independent, thus more restricted. Similarly, the composite trigram/2-SLM/PLSA language model is more powerful and expressive than a linear combination of pairwise composite language models (e.g., trigram/2-SLM, trigram/PLSA, and 2-SLM/PLSA), since the composite trigram/2-SLM/PLSA can take advantage of the relative frequency estimate f ( w this case shrinks, however, because pairwise composite language models use some valu-able lower order relative frequency estimates such as f ( w another way, each vertex of the lattice in Figure 3 is an expert of WORD-PREDICTOR predicts words based on the information provided by a committee consisting of experts from parent vertices as well as the relative frequency estimate it extracts. These experts are hierarchically organized, with the WORD-PREDICTOR of the composite trigram/ the most powerful prediction.
 and increased the complexity of our language models. Because available resources are limited, preventing us from considering complex language models that are trained on the 1.3 billion token corpus, we considered complex language models trained on the 44 million token corpus instead. Table 9 shows the perplexity results. We can see that as we increase the order for n -gram and m -SLM from n = 3and m = 2to n = 4and m = 3, the composite language models become better and have up to 5% perplexity reductions; when we increase the order for n -gram and m -SLM to n = 5and m = 4, however, the composite language models become worse and slightly overfit the data even if we use linear interpolation smoothing, and there are no further perplexity reductions. density estimation problem with Kullback-Leibler divergence as a cost function, and there is always a trade-off between approximation error and estimation error (Barron and Sheu 1991), reminiscent of the  X  X ias-variance X  trade-off for a regression problem with a quadratic cost function (Hastie, Tibshirani, and Friedman 2009). Figure 5 explains the perplexity results in Tables 3 and 5 from a model selection point of view. mation projection to n -grams is the minimum Kullback-Leibler divergence from  X  p to n -grams (Amari and Nagaoka 2000; Wang, Greiner, and Wang 2009) and is denoted as  X  p , n = 3, 4, 5, 6. Let  X  p denote the empirical distribution of natural language X  X n partic-ular,  X  p M denotes the empirical distribution for a million token corpus,  X  p empirical distribution for a billion token corpus, and  X  p bution for a trillion token corpus. The information projection of  X  p 4-gram is p 4 M , and to 5-gram is p 5 M . The distance between  X  p and  X  p can do when abundant data are available. The distance between  X  p Pythagorean theorem states that the distance between  X  p and  X  p of the approximation error and the estimation error (Barron and Sheu 1991; Amari and
Nagaoka 2000; Wang, Greiner, and Wang 2009). In language modeling research, because 658 similarly, the information projection of empirical distribution on an n -gram converges composite language models and the corresponding approximate error and estimation error, and so forth. In this case, the Pythagorean theorem breaks down due to the non-convexity of the set of composite language models. As noted by Dr. Ciprian Chelba in our private communication on March 20th, 2010,  X  X hen playing with large data, the model capacity is an important factor to language model performance: The supply of more data needs to be matched by demand on the model side. A simple way to achieve this in n -grams is to increase the order n as much as the data will allow. This of course implies that the computational aspects of storing and serving such models true for our composite language models as justified from the results in Tables 5 and 9: The composite n -gram/ m -SLM/PLSA language model has rich features, thus has smaller approximation error than the n -gram, m -SLM, PLSA, or any composite model of two, or their linear combinations. Table 5 shows that the information projection of the empirical distribution for the million and billion token corpora,  X  p composite n -gram/ m -SLM/PLSA language model, is closer to the true distribution  X  p .
This is reflected approximately by the perplexity results on test data. 6.3 Re-ranking Machine Translation Results
We have applied our composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA guage model that is trained by a 1.3 billion word corpus for the task of re-ranking the 660 by Zhang and colleagues (Zhang, Hildebrand, and Vogel 2006; Zhang 2008; Zhang the MT03 Chinese X  X nglish evaluation set, and the second was generated on 191 sen-tences of 20 documents from the MT04 Chinese X  X nglish evaluation set, both by Hiero (Chiang 2007), a state-of-the-art parsing-based translation model. Its decoder uses a trigram language model trained with modified Kneser-Ney smoothing (Jurafsky and language model is one of them. We substitute our language model and use MERT periments on these two data sets. In the first experiment, we partition the first data et al. 2002) by MERT (Och 2003), and the remaining single piece is used to re-rank combined) to produce a single estimation for Bleu score. The mean and variance of the Bleu score are calculated with each different LM. We assume that the score follows
Student X  X  t-distribution and we compute the 95% confidence interval according to mean and variance. Table 10 shows the Bleu scores through 10-fold cross-validation.
The composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA 1 language model gives 1.57 percentage point Bleu score improvement over the baseline and 0.79 percentage point Bleu score improvement over the 5-gram. We are not able to further improve
Bleu score when we use either the 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA or 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA 3 . This is because there is not much diversity on the 1,000-best list, and essentially only 20 1,000-best list.

Bleu score by MERT, then the second data set is used to re-rank the 1,000-best list and obtain the Bleu score. To obtain the confidence interval of the Bleu score, we resort to the bootstrap resampling described by Koehn (2004). We randomly select 10 re-ranked documents from the 20 re-ranked documents in the second data set with replacement.
We draw the translation results of the 10 documents and compute the Bleu score. We repeat this procedure 1,000 times. When we compute the 95% confidence interval, we drop the top 25 and bottom 25 Bleu scores, and only consider the range of 26th to 975th
Bleu scores. Table 11 shows the Bleu scores. These statistics are computed with different age point Bleu score improvement over the baseline. The composite 5-gram/2-SLM+ 2-gram/4-SLM+5-gram/PLSA 1 language model gives 1.19 percentage point Bleu score improvement over the baseline and 0.68 percentage point Bleu score improvement over the 5-gram.
 score is 33.31% when n -gram is used to re-rank the N -best list; the Bleu score becomes significantly higher (37.09%) when the n -gram is embedded directly into Hiero X  X  one pass decoder, however. This is because there is not much diversity in the N -best list. It is expected that putting our composite language into a one-pass decoder should result in much improved Bleu scores.
 similar to the study conducted by Charniak, Knight, and Yamada (2003). The trans-lations are sorted into four groups: good/bad syntax crossed with good/bad mean-ing by human judges (see Table 12). We find that many more sentences are perfect, many more are grammatically correct, and many more are semantically correct. The good grammar, but does not improve translations to preserve meaning. The composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA 1 language model improves both signif-icantly. Bear in mind that Charniak et al. (2003) integrated Charniak X  X  language model with the syntax-based translation model proposed by Yamada and Knight (2001) to for N -best list re-ranking. Also, the same study (Charniak et al. 2003) found that the outputs produced using the n -grams received higher scores from Bleu; ours did not. The difference between human judgments and Bleu scores indicates that closer agreement may be possible by incorporating syntactic structure and semantic information into the
Bleu score evaluation. For example, semantically similar words like insure and ensure as in Bleu paper (Papineni et al. 2002) should be substituted in the formula, and there is a weight to measure the goodness of syntactic structure. This modification will lead to a better metric and such information can be provided by our composite language models. 662 correct X  sentences, and  X  X nly grammatically correct X  sentences. 7. Conclusion and Future Work
We have built a powerful large-scale distributed composite language model which inte-grates well-known n -gram, SLM, and PLSA models under the directed MRF paradigm.
The composite language model has been trained by performing a convergent N -best list approximate EM algorithm and a follow-up EM algorithm to improve word prediction re-ranking the N -best list from a state-of-the-art parsing-based MT system. As far as we know, this is the first work building a complex large-scale distributed language model with a principled approach that simultaneously exploits syntactic, semantic, large corpus with up to a billion tokens. It is reasonable to conjecture that compos-ite language models can achieve drastic perplexity reduction and significantly better translation quality than n -gram when trained on Web-scale corpora that have trillions of tokens.
 almost a decade ago (Banko and Brill 2001), it has been widely observed that the effec-tiveness of statistical natural language processing (NLP) techniques is highly suscepti-ble to the data size used to develop them. As empirical studies have repeatedly shown that simple algorithms can often outperform their more complicated counterparts in wide varieties of NLP applications with large data sets, many have come to believe that tral role in modern NLP (Norvig 2008). X  It is true that  X  X he more the data, the better the result,  X  X  dictum recently reiterated in a somewhat stronger form in Halevy, Norvig, and Pereira (2009), but care needs to be taken here. As we explained in the last paragraph of
Section 6.2, after we increase the size of data, we should also increase the complexity to exploit latent semantic information and syntactic structure that constrain the gen-eration of natural language; this usually involves designing sophisticated algorithms.
Of course, this implies that it takes a huge amount of resources to perform the com-putation. As cloud computing becomes the dominant platform for data management and information processing as utility computing, this will become feasible, affordable, and cheap.
 its infancy; we are planning to deepen our research and push this research in its limit.
Specifically, we plan to integrate more advanced topic language models such as LDA (Blei, Ng, and Jordan 2003) and resort to a hierarchical non-parametric Bayesian model (Teh 2006; Teh and Jordan 2010) for smoothing fractional counts due to latent variables to handle the sparse data problem in Kneser-Ney X  X  sense in a principled manner, thus constructing a family of large-scale distributed composite lexical, syntactic, and semantic language models. Finally we will put this family of composite language models into a phrased-based machine translation decoder (Koehn, Och, and Marcu 2003) that produces a lattice of alternative translations/transcriptions or a syntax-based would, in the exact case, reside in an extremely difficult complexity class, probably
PSPACE-complete) to significantly improve the performance of the state-of-the-art machine translation systems.
 Appendix A: An Example of Sentence Probability sentence probability varies when computed by 5-gram, 5-gram/PLSA, and 5-gram/
PLSA+4-SLM/PLSA. The document tag is XIN ENG 20041126 0168.story .This document X  X  perplexity computed by 5-gram, 5-gram+PLSA, 5-gram+4-SLM+PLSA, 5-gram/PLSA, and 5-gram/PLSA+4-SLM/PLSA that are trained using 1.3 billion tokens corpus is 97, 93, 83, 71, and 64, respectively. We show the first four sentences below. s by zhao lei /s s beijing nov.  X  X mbr xinhua the communist party of china cpc has decided from wavering in their convictions /s s the decision aiming to keep the nature of the party this oct.  X  X mbr the cpc  X  X  top power organ /s  X  X  X  X  X  X  fourth sentence. The first line is the fourth sentence; the second line (a) denotes the computed by 5-gram; the third line (b) denotes the natural log value of the conditional word probabilities given its document history computed by 5-gram+PLSA; the fourth line (c) denotes the natural log value of the conditional word probabilities given its document history computed by 5-gram+PLSA+4-SLM; the fifth line (d) denotes the computed by 5-gram/PLSA; and the sixth line (e) denotes the natural log value of the conditional word probabilities given its document history computed by 5-gram/PLSA+ 4-SLM/PLSA. 664 history computed by 5-gram/PLSA or 5-gram/PLSA+4-SLM/PLSA is significantly boosted due to the appearance of semantic related words such as cpc and communist party in the previous sentences, this clearly shows that the composite language mod-els (5-gram/PLSA and 5-gram/PLSA+4-SLM/PLSA) trigger long-span document-level discourse topics to influence word prediction. In contrast, there is no effect when using linear combination models (i.e., 5-gram+PLSA and 5-gram+4-SLM+PLSA). Similarly, ment history computed by 5-gram/PLSA+4-SLM/PLSA is significantly boosted due the appearance of the grammatical headword decision (or keep ) in the same sentence, this clearly shows that the composite language model (5-gram/PLSA+4-SLM/PLSA) exploits sentence level syntactic structure to influence word prediction. In this case, the n -gram has to increase its order to 11 or 8. The linear combination model 5-gram+4-function words such as of the after the word(s) natural or political bureau . PREDICTOR in the most likely parse structure of each sentence in training corpora.
Whenever the n -grams are not the same as SLM X  X  WORD-PREDICTOR, the SLM com-ponent will be effective to furnish sentence-level long-range grammatical information. achieve a similar effect to. SLM and PLSA even using Web-scale data, and the directed
MRF paradigm effectively synergizes n -gram, m -SLM, and PLSA in a complementary, supplementary, and coherent way to form a powerful language model for word predic-tion of natural language.
 Appendix B: Examples of Translation Results rect X  sentences, and  X  X nly grammatically correct X  sentences, where the digit numbers are the sentence number in the N -best list from Hiero (a) denotes the reference sentence, (b) denotes the result provided by the composite language model, and (c) denotes the result provided by 5-gram.
 a. Sri Lanka X  X  Prime Minister Calls on the People to Work together for Permanent Peace b. Sri Lanka prime minister called on national common efforts to achieve lasting peace c. Sri Lanka prime minister called on the national common achieve lasting peace a. Wilner said the maximum penalty for securities fraud is 10 years imprisonment. However, the sentence is expected to be  X  X ignificantly shorter X  under the plea deal. to pleaded guilty mitigation, the sentence is  X  X horten X . pleaded guilty mitigation, the sentence is  X  X horten X . it may trigger a global disaster. X  trigger a world disaster X . trigger a world disaster X . a. Some Areas in Northwest Australia Face floods b. floods in some areas in the northwest australia c. australia northwest part of floods posite language model: is a fort. b. szudy about woven said that garden landscape could reduce the us embassy to a fortress. c. szudy over so that garden landscape can reduce the u.s. embassy to a fortress. 666 for 30 four percent of the kaneyuki business and become the major consumer of the industry. 4 percent of the business, has become the major consumption.
 language model: b. cologne, a famous historical city also escaped unscathed in the heavy rain. c. cologne, a famous historical city in heavy rain, escaped unscathed. months X  to try to disarm Ira qpeacefully and it would be military action thereafter. urge ira qto the peace disarm, then we will take military action. to the peace disarm, she went on to take military action. a. France circulated its proposals in the form of  X  X  non-paper. X  b. france is to distribute their proposals in the form of  X  X on -paper. X  c. france is the form of  X  X on -paper X  distribute their proposals.
Year by watching television. new year. Acknowledgments References 668 670
