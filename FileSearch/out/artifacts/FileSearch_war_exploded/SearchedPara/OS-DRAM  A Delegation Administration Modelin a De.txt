 In recent years, access control has been monitored as an important security area. The Role-Based Access Control (RBAC) model is well known among enterprise organizations because its main concept is based on an enterprise environment [1-3]. The RBAC model is guided by its central aim of preventing users from discretionally accessing the organization X  X  information. As such, access rights are associated with roles, and users a re assigned to appropriate roles.
In a large organization, security administration is a critical issue because a single security officer cannot manage the whole access control system. Therefore, the Administrative RBAC (ARBAC) model was proposed for a decentralized RBAC administration [4,6,7,9,10].

It is important for administrative RBAC to support the efficient execution of business activity such as the delegation of duties, which should be considered in access control. The basic idea behind delegation is that some active entities (users) in an organization can delegate authority to another active entity (user) to carry out some functions on behalf of the former [13]. Since delegation can cause unexpected information flow, delegation should be dealt with carefully.
In general, granting/revoking access rights is part of the security officer X  X  rights. In user-level delegation, however, an individual user grants (revokes) own access rights to (from) others. Fig. 1(a) shows this situation. Therefore, the abuse of delegation authority power leads to exclusion from the security officer X  X  authority range. Fig. 1(b) depicts a wrong delegation of authority. The objective of our work is to control user-level dele gation authority power within the security officer X  X  authority range as shown in Fig. 1(c).
 Our proposed delegation methodology is similar to that of the Permission-Based Delegation Model (PBDM) [13] which is built on the ARBAC model for managing administrative activities. However, the ARBAC model induces vari-ous administration problems by role hierarchy for basis of the security officer X  X  authority range. These problems affect the PBDM. We describe the detailed shortcomings of the ARBAC model and PBDM in Section 2. We also try to develop an effective and practical model for decentralized delegation adminis-tration. Delegation administration implies managing users X  delegation authority range, restricting delegation role creat ion, user-delegation role assignment, and permission-delegation role assignment, managing can-delegate constraints, and so on. We refer to the OS-RBAC model for the administrative RBAC model [10], which modifies the ARBAC model and adds new components in the orga-nizational structure.
 Our proposed model is called the  X  X rganizational Structure and Delegation Role Administration Model X  (OS-DRAM).

The rest of this paper is organized as follows: In Section 1, we briefly review the ARBAC model and related models, and describe their weaknesses. Then we explain the reason in choosing PBDM X  X  delegation methodology in Section 2. Section 3 introduces the motivation of this work and some problems involved in the PBDM which is built in the ARBAC97 model. In Section 4, we introduce an integrated management model, the OS-DRAM, which integrates delegation policy into the OS-RBAC model. In addition, we suggest integrity rules of del-egation for preventing security threats in this new model. Example scenarios are discussed in Section 5, followed by the conclusion which summarizes our contributions and discusses future research directions in Section 6. The ARBAC Model. In the ARBAC97 model [4] which is based on the RBAC model [3], administrative roles and administrative role hierarchy are added for RBAC administration. Security officers a re assigned to proper administrative roles. The ARBAC97 model has three components: (1) URA97 which is con-cerned with user-role assignment, (2) PR A97 with permission-role assignment, and (3) RRA97 with role-role assignment. The purpose of these components is to assign administrative authority to security officers and to prevent any illegal activity from them [4,5]. However, the ARBAC97 model has a lot of shortcom-ings [6,7]. Its main shortcoming is its authority range for security officers in the role hierarchy. As a result, unexpected outcomes may take place when a secu-rity officer modifies the role hierarchy. To prevent this, ARBAC97 puts strict integrity rules into RRA97, thereby restricting flexible administration.
The ARBAC02 model moves user/permission pool from role hierarchy to or-ganizational structure [7]. It adopts two separated organizational structures for user pool and permission pool. However, it does not solve the RRA97 prob-lem. Furthermore, there is no information on how to manage administrative role hierarchy.

The Administrative Organization-Based Access Control (AdOr-BAC) model [9] suggests using the organization for access control. The AdOr-BAC model adds administrative function to the Or-BAC model [8] which adopts contextual rules for access control. In spite of AdOr-BAC X  X  advantages, it does not fully use the ARBAC feature. Furthermore, there is no clear principle for making contextual rules and administrative functions in AdOr-BAC. If the chief security officer fails to make safe rules, there can be no safe access control.
 Delegation Methods on the RBAC Model. Barka and Sandhu [11] dis-cussed some advanced features of the Role-Based Delegation Model (RBDM). The delegation method used in RBDM is the URA method. Role Delegation Model 2000 (RDM2000) [12] proposed a rule-based framework and specification language for role-based delegation. The RDM2000 model also uses the URA method and additionally, the PRA method for partial delegation. To illustrate, Fig. 2(a) shows Bob assigning a role PL to Tom. This URA method results in two disadvantages. One is that Bob cannot delegate a piece of role. The other is that Tom can inherit the sub-role(s) of the role PL through the inheritance property of role hierarchy. Fig. 2(b) shows Bob partially assigning the  X  X on-firm program X  of role PL to role PE1 which is assigned to Tom. In this PRA method, another user U1 assigned to role PE1 can access the  X  X onfirm program X . Consequently, both URA and PRA methods result in the violation of the  X  X east privilege principle X .

The Permission-Based Delegation Model (PBDM) [13] solved these role-level delegation problems in a role-and permission-level delegation way through the creation of new delegation roles. However, the PBDM was built on the ARBAC97 model for delegation role administration in which delegation role(s) would be included in the role hierarchy. In this case, invalid permission inheritance and user-delegation role assignment may also happen. In Section 3, we will further elaborate on this problem.
 The OS-RBAC Model. The main issue in decentralized security adminis-tration is the determination of each security officer X  X  authority range. The OS-RBAC model is designed for decentralized security administration [10]. It follows the basic features of the RBAC model and the administrative role/hierarchy of ARBAC97. The main idea of OS-RBAC is injecting organizational structure to RBAC for security administration. An organizational structure is a hierarchy of organizational units. Meanwhile, an organizational unit pertains to a depart-ment such as the sales department, the accounting department, or a project team. Each organizational unit involves workers and authority to achieve its mission. In the OS-RBAC model, workers are identified as users and authority as permission.

The OS-RBAC model has two sub-models. The Organizational Structure Ad-ministration Model guides a company to build and modify its organizational structure. If a security officer SO1 belongs to an organizational unit OU1 , SO1 can create a new organizational unit OU2 under OU1 , and link OU1 to OU2 by adding an edge between them. Edge OU1  X  OU2 denotes that OU1 is a parent organizational unit of OU2 . SO1 can also move users/permissions from OU1 to OU2 (or from OU2 to OU1 ). Finally, SO1 can delete OU2 .Thismodel involves administration rules for the above administration activities. These rules are grouped into three X  X OA (user-organization assignment), POA (permission-organization assignment), and OOA (organization-organization assignment) as shown in Fig. 3.

Meanwhile, the Role Administration Model states that administration activ-ities such as creating/deleting a role, assigning users/permissions to the role, and composing a part of role hierarchy are related to the roles of each security officer. This model is also composed of ad ministration rules for these adminis-tration activities. These rules are categorized into three groups: URA (user-role assignment), PRA (permission-role assignment), and RRA (role-role assignment) asshowninFig.3. If the PBDM is supported in the ARBAC97 model, there are two resulting problems from the fact that a basic security officer X  X  authority range is a role hierarchy. One is the position problem of a delegation role in role hierarchy. The other is the invalid inheritance problem through role hierarchy, which results in a wrong delegation as shown in Fig. 1(b). We further discuss these problems in the following paragraphs. 3.1 Position Problem of a Delegation Role in Role Hierarchy The PBDM has three integrity rules which prevent users from discretionally accessing the organization X  X  information. One of them is as follows [13]: [Integrity rule of PBDM] For each delegation role, there is no senior regular role: { x  X  RR | x is a parent role of y  X  set of Delegation Role } =  X 
Since the PBDM is supported in the ARBAC97 model and since the base of the security officer X  X  authority range is a role hierarchy, delegation role(s) is included in the security officer X  X  authority range.

Fig. 4 shows three cases with respect to the position of a delegation role in role hierarchy. Fig. 4(b) shows that a delegation role DR1 is the parent role of a regu-lar role PL1. In this case, a delegatee assi gned to DR1 can get invalid permissions assigned to PL1 and sub-roles PE1 and QE1 by the inheritance property of role hierarchy. Thus, this approach is not reasonable. Fig. 4(c) shows DR1 as a child role of PL1. This case prevents DR1 from getting invalid permissions. However, this approach leads to an administrative problem. Others who are assigned to PL1 get the authority of DR1. Fig. 4(a) shows that DR1 is separated from the role hierarchy. This case does not lead to the invalid inheritance of Fig. 4(b) and the invalid user-delegation role assign ment of Fig. 4(c). However, the insertion of a delegation role which has no parent/child is not permitted in the RRA97 sub-model of the ARBAC97 model because this case makes the delegation role not to belong to any authority ranges. 3.2 Deviation of Delegation from the Authority Range The ARBAC97 and ARBAC02 models need administrative data. Data-based administration involves at least three problems. First, there may be integrity problems in the administrative data. If there are wrong administrative data stored, some security officers can do illegal administration. A more serious prob-lem is that there is no criterion to find wrong administrative data. Data in-tegrity is wholly the responsibility of the senior security officer. Second, there may be inconsistency among the administrative data. Third, there can be an illegal modification of the administrative data. In general, administrative data are separately stored from the access control module. A malicious security offi-cer may modify administrative data if the system is vulnerable. These problems directly affect the can-delegate constraint because this constraint is closely re-lated to can-assign and can-assignp administrative data. The PBDM defines the can-delegate constraint as follows: ( r1, cr, s, n )  X  can-delegate .
This means that a user assigned to a role r1 (or a role senior to the r1 ) can delegate a set of permissions (delegation range) s through the inheritance property of role hierarchy.

Users assigned to the role PE1 or a role senior to PE1 (e.g., PL1 and DIR) may be a delegator. Users assigned to the role ED or a role senior to ED (e.g., E1, PE1, QE1, PL1, E2, PE2, QE2, PL2, and DIR) may be a delegatee. Thus, this can-delegate constraint allows bottom-up and top-down delegations. However, bottom-up delegation leads to illegal information flow.

There exists another problem in the can-delegate constraint. For example, suppose that Tom delegates  X  X eq program X  to John who is assigned to a role PE2. This delegation is permitted because PE2 is senior to ED, and John is assigned to PE2. In this case, John may not properly use Tom X  X  authority because Tom X  X  administration role is PSO1, but John is beyond PSO1 X  X  authority range. The right side of Fig. 5 depicts this case. If the type of Tom X  X  delegation is  X  X ackup of role, X  it is not reasonable. However, if the type of Tom X  X  delegation is  X  X ollaboration of work X , it may be permitted. Therefore, different delegation policies are required for  X  X ackup of role X  delegation and  X  X ollaboration of work X  delegation.
 Our delegation policy is as follows: First, if a user who is not a security ad-ministrator wants to delegate his/her task, he/she can create a delegation role and specify the initial value of the  X  X R.org unit X  which is capable of including delegating permissions. Second, the user who created the delegation role in the previous step assigns his/her permissions to the delegation role. Finally, the user de-escalates the  X  X rg unit X  of the delegation role and the permissions in the del-egation role, and assigns the delegation role to other users. Fig. 6 shows the OS-DRAM to support this user-level delegation policy.
 Before we describe the delegation policy, we first define common terms in the OS-DRAM.  X  OT: set of organizational unit ot .  X  U: set of user u . -u.org unit : attribute that contains an organizational unit.  X  P: set of permission p . -p.org unit : attribute that contains an organizational unit. -p.type : attribute that contains one of the  X  X Ps X (general permissions or  X  R: set of role r . -r.org unit : attribute that contains an organizational unit. -r.type : attribute that contains one of the  X  X Rs X (general roles) or -r.group : attribute that contains one of the  X  X Rs X (department roles) or  X  DR: set of delegation role dr . -dr.org unit :attribute that contains a delegatee X  X  organizational unit. -dr.type : attribute that contains one of the  X  X Rs X (general roles) or -dr.creator : attribute that contains a tuple(user X  X  ID, regular role). -dr.d type : attribute that contains one of the delegation type  X  R = RR  X  DR : RR means regular roles in the OS-RBAC model.  X  RR  X  DR =  X  .  X  Permission(r) : R  X  2 P , a function mapping a role (regular role or  X  Set: U ( user data set ) , R ( role data set ) , P ( per m ission data set ) , URA  X   X  dr  X  DR, ( dr.creator =( du, rr ))  X  (( du, rr )  X  X RA )  X  Permissions ( dr )  X  -If a delegator du generates a delegation role dr , du can only delegate 4.1 Rules in Generating a Delegation Role [D-Rule 1] (Create a delegation role) A delegator DU who is a member of a regular role r can create a delegation role DR . DU should specify the values of DR.org unit , DR.type , DR.creator ,and DR.d type subject to: ( DU.org unit  X  DR.org unit )  X  ( DR.creator =( DU, r )) [D-Rule 2] (Delete a delegation role) The DU can delete the DR subject to: ( DR.creator =( DU, r ))  X  ( DU.org unit  X  DR.org unit ) 4.2 PDRA (Permission-Delegation Role Assignment) Rules [D-Rule 3] (Assign a delegating permission) A delegator DU can assign a permission p to DR subject to: ( DR.creator =( DU, r ))  X  (( DU, r )  X  X RA )  X  (( p, r )  X  X RA )  X  ( DU.org unit  X  DR.org unit )  X  ( DR.org unit  X  p.org unit )  X  ( DR.type = p.type ) [D-Rule 4] (Revoke a delegated permission) DU can revoke a permission p from DR subject to: ( DR.creator =( DU, r ))  X  ( DU.org unit  X  DR.org unit ) 4.3 UDRA (User-Delegation Role Assignment) Rules If a delegator wants to assign a delegat ee to a delegation role, He/she should de-escalate the initial organizational units of both the delegation role and the permissions in the delegation role. [D-Rule 5] (De-escalate a delegation role and permissions in the delegation role) A delegator DU can de-escalate an organizational unit of a delegation role DR and a permission p in DR in order to assign a delegatee DDU to DR subject to: ( DR.creator =( DU, r ))  X  ( DU.org unit  X  DR.org unit )  X  ( DDU.org unit  X  DR.org unit )  X  ( DU.org unit  X  p.org unit )  X  ( DDU.org unit  X  p.org unit ) [D-Rule 6] (Assign a delegatee) DU can assign DDU to DR subject to: ( DR.creator =( DU, r ))  X  ( DU.org unit  X  DDU.org unit )  X  ( DDU.org unit  X  DR.org unit ) [D-Rule 7] (Revoke a delegatee) DU can revoke DDU from DR subject to: ( DR.creator =( DU, r ))  X  ( DU.org unit  X  DDU.org unit )  X  ( DU.org unit  X  DR.org unit ) 4.4 Delegation Authorization and Additional Integrity Rule In delegation authorization, the goal of the can-delegate constraint is to restrict the range of delegation activity. In the OS-DRAM, a security officer should select who and what belongs to his/her own organizational unit or its child or-ganizational units. We call it the  X  integrity rule of generating can-delegate constraints  X .  X  Extension to the can-delegate constraint :( rr, pc, s, n )  X  can-delegate
A user assigned to a role rr (or a role senior to rr ) can delegate a set of permis-[D-Rule 8] (Generate the can-delegate constraint) ( SO.org unit  X  rr.org unit )  X  ( SO.org unit  X  m ax { pc.org unit } )  X  ((  X  u1 , u2  X  X  , ( u1, rr ) , ( u2, pc )  X  X RA X  ( u1.org unit  X  m ax { pc.org unit } ))  X  Permission ( rr ))
Another additional rule is a delegation type [13]. The  X  X ackup of role X  delega-tion type should be dealt with in a securi ty officer X  X  authority range. However, the  X  X ollaboration of work X  delegation type may be dealt with beyond a security officer X  X  authority range. A senior secu rity officer manages this delegation. [D-Rule 9] (Two types of delegation policy) If the delegation type is  X  X ackup of role X , the delegation is managed by a delegating user. If the delegation type is  X  X ollaboration of work X , the delegat ion is managed by a security officer who can be responsible for the delegation. In addition, [D-Rule 8] is disregarded. -( DR.d type = B )  X  ( DR.creator =( DU, r )) -( DR.d type = C )  X  ( DR.creator =( SO ( security officer ) ,ad m inistrativerole )  X  ([ D  X  Rule 8] isdisregarded ) The purpose of each delegation rule is to prevent individual users from per-forming unauthorized activities, and to keep the integrity of the can-delegate constraint. Fig. 7 shows an example of legal and illegal delegation. If a user U1 delegates parts of his/her own permissions to a user U2 ,andthe can-delegate constraint allows this delegation process, it is a legal delegation. If the delegation type is  X  X ollaboration of work X , U1 can delegate parts of his/her own permissions to a user U5 , within the organizational unit, DSO. However, the delegating entity is a security officer DSO and not U1 .

We assume that there exist URA and PRA as follows: ( U1, r1 ) , ( U7, r7 )  X  X RA , ( p1, r1 )  X  X RA .

Suppose that U1 tries to illegally delegate some tasks. There exist some ex-amples of illegal delegation as follows: 1) U1 tries to delegate his/her own permissi ons, which belong to SO1 X  X  author-2) U1 tries to delegate permissions, which do not belong to SO1 X  X  authority 3) U1 tries to delegate permissions, which do not belong to SO1 X  X  authority
The first case is prevented by U1.org unit  X  U2.org unit in [D-Rule 6], while the second case is prevented by U1.org unit  X  DR.org unit in [D-Rule 3]. The third case is also prevented by U1.org unit  X  DR.org unit in [D-Rule 1], DR.org unit  X  target permission.org unit in [D-Rule 3], and U1.org unit  X  U3.org unit in [D-Rule 1]. Similarly, we can detect the delegation activities which are able to get out of the security officer X  X  authority range from [D-Rule 1] to [D-Rule 7]. However, we cannot detect disallowed delegation activities in the same security officer X  X  authority range. N evertheless, these delegation activities are detected by the can-delegate constraints.

We assume that there exists a can-delegate constraint which is as follows: ( r1, r2, p1, 1 )  X  can-delegate .

Suppose that U1 tries to delegate parts of his/her own permissions, which belongs to SO1 X  X  authority range, to a user U7 who belongs to SO1 X  X  authority range. This delegation process is trivially illegal because this can-delegate con-straint explains that a delegatee should be assigned to a role r2 .Nowweobserve the integrity problem of generating the can-delegate constraint. 4) Security officer SO1 tries to add the c an-delegate constraint, ( r3, r1, p3, 1 ) 5) Security officer SO1 tries to add the can-delegate constraint, ( r1, r4, p1, 1 ) 6) Security officer SO1 tries to add the can-delegate constraint ( r1, r6, p4, 1 ) The fourth to sixth cases are prevented by [D-Rule 8], respectively. Case 4: SO1.org unit  X  r3.org unit ( r3 is not a regular role of SO1), Case 5: SO1.org unit  X  r4.org unit ( r4 is not included in SO1 X  X  authority Case 6: { p4 } X  X  p1 } ( p1 is a unique permission of the regular role r1 ).
However, if the type of delegation is  X  X ollaboration of work X  [13], the delegation can be performed not by U1 but by a responsible senior security officer, DSO. We can review other delegation administration rules in a similar way, but for brevity X  X  sake, we have omitted their reviews. In this paper, we presented a new integrated management model, the OS-DRAM which satisfies the needs of delegation role administration and delegation policy in large decentralized organizations or information systems. Although delega-tion raises the degree of availability of individual users X  access rights, it violates confidentiality and integrity in a distributed environment. Therefore, if the de-centralized administrative access control model has no suitable way to control delegation, it may excessively restrict availability, or infringe upon confidentiality and integrity.

The main reasons why the OS-DRAM can support efficient decentralized ac-cess control management and available delegation policy are the separation of authority range and role hierarchy. Organizational structure plays on the bound-ary of delegation activity.

As a result, the OS-DRAM supports a decentralized user-level delegation in which individual users can freely delegate their authorities to other users within a security officer X  X  authority range and without the security officer X  X  intervention. This paper followed the multi-step delegation method of the PBDM. However, multi-step delegation is very difficult to perform. We will probe further as to what constitutes a secure multi-step delegation. In addition, we will add the  X  X eparation of Duty X  constraint when a delegation role has two or more regular roles. This research was supported by the MIC(Ministry of Information and Com-munication), Korea, under the ITRC(Information Technology Research Center) support program supervised by the IITA(Institute of Information Technology Assessment).
