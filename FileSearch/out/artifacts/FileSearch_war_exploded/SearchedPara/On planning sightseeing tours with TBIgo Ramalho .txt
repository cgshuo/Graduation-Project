 1. Introduction
Tourists approaching their destination for the first time have to deal with the problem of planning a sightseeing itinerary a time-budgeted tour that maximizes user X  X  interests and takes into account both the time needed to enjoy the attractions and to move from one PoI to the next one. Moreover, the knowledge base feeding T entirely and automatically extracted from publicly available Web services, namely, Wikipedia, Flickr and Google maps.
We observe that an increasing number of tourists share on social networks their travel photos. Unofficial estimates state that Flickr, one of the most popular photo-sharing platforms, collected about 518 million of public photos in 2012. photo comes with very useful information such as: tags, comments and likes from Flickr social network, number of views,  X  information about the user, timestamp, GPS coordinates of the place where the photo was taken. This allows us to roughly reconstruct the movements of users and their interests by analyzing the time-ordered sequence of their photos. However, mation available may be sparse and characterized by a skewed distribution.

Fortunately, in Wikipedia, 3 we can find that most entities of interest for tourism are described in a dedicated page from this knowledge base the popularity of a PoI is estimated from the number of visitors that shot photos there, while from the this information at the level of itinerary to build a profile for each frequent visiting pattern. amount of time available for the visit, we formalize and address the seeing itinerary by means of a heuristic algorithm addressing the Trajectory Scheduling Problem (T instance of Traveling Salesman Problem (TSP). The formalization of Coverage (GMC) problem can be found in Brilhante, Macedo, Nardini, Perego, and Renso (2013) , while ( Brilhante, Macedo, Nardini, Perego, &amp; Renso, 2014 ) demos the capabilities of the T research with the following relevant and original contributions: we detail our unsupervised method for mining common patterns of movements of tourists in a given geographic area. To ing PoIs in the given city, (iii) Google maps to estimate the time needed to move from a PoI to the next one in the sight-seeing itinerary. The resulting knowledge base stores PoIs, their popularity, the time needed in average to visit them, the categories for which each PoI is relevant, and the patterns of movement of tourists that visited them in the past. In order to assess our system, we report about the building of a knowledge base covering three Italian cities, which are important for tourism and guarantee variety and diversity in terms of size and the richness of public user-generated content avail-able: Rome, Florence, and Pisa. The resulting knowledge base, available for download to favor the reproducibility of results, is analyzed and its characteristics are here discussed; we adopt the result discussed in Brilhante et al. (2013) where posed to compute the set of trajectories in the knowledge base that best fits user interests given a time budget. In this paper, we address the subsequent step that consists in processing this set of trajectories to build a schedule of the com-plete sightseeing itinerary over the tourist X  X  agenda. To this end, we define T at finding the shortest path crossing all the trajectories in the peculiarities, which are exploited to devise an efficient and effective heuristic algorithm; finally, we report on several new experiments to evaluate effectiveness and efficiency of all the components of our system and show that our solution outperforms competitive baselines. In particular, we assess T ing budgeted sightseeing itineraries made up of actual PoI patterns tailored to the specific preferences of the tourist. The paper is structured as follows: Section 2 introduces the builds the knowledge base, while Section 5 presents the experiments we perform to assess the effectiveness and the effi-ciency of our solution. Finally, Section 6 discusses related work and Section 7 draws the conclusions of the work. 2. The TripCover problem a radius specifying its spatial extent, and a relevance vector , ~ of categories C .

Symmetrically, let u be a user from the set U , and ~ v u in this paper we assume to know in advance the categories C , the relevance vectors ~ PoIs and users.

Definition 1 ( User-PoI Interest ). Given a PoI p , its relevance vector ~ define the User-PoI Interest function as a the following function C  X  p ; u  X  : erence and popularity of PoIs have to be taken into account.
 Definition 2 ( PoI History ). Given a user u and the PoIs points of interest visited by u . Each PoI p of H u is annotated with the two timestamps indicating the start time and the end time of the visit:
We can notice that having the start time and the end time we have an implicit representation of the time the user u has spent for her visit of p .

Definition 3 ( Trajectory ). Given a PoI History H u and a time threshold d , we define a trajectory T such that: the user PoI history where the time interval between the visit to two subsequent PoIs is greater than a given threshold d .
Example 1. Let John Smith be a tourist who visited the city of Rome for two-days. John Smith X  X  PoI history consists in the temporally ordered sequence of PoIs visited in the two days. As an example: H JohnSmith = h (Colusseum, Tue[09.00,10.30]), (Roman forum, Tue[11.00,12.00]), (Spagna square, Tue[14.30,17.30], (St. By using a threshold of 5 h as trajectory splitting criterium, from H
T JohnSmith = h (Colusseum,Tue[09.00,10.30]), (Roman forum, Tue[11.00,12.00]), (Spagna square, Tue[14.30,17.30] i
T JohnSmith = h (St. Peter X  X  Church, Wed[10.00 X 11.00]), (Vatican Museum, Wed[11.10,15.00]), (Trevi Fountain,
The time interval between the visits to Spagna square and St. Peters Church is in fact the only interval larger than the given threshold.
 By applying the same temporal splitting criterium to all the PoI histories of users relevant trajectories. Note that S results from a set-union operation disregarding timestamps. Finally, let q  X  p  X  : estimate of the time needed to visit p ; s  X  p i ; p j  X  : ~ z  X  X  z 1 ; ... ; z M  X  be the total traveling time associated with each of the M trajectories in preferences and her budget in term of available time to spend in the city.
 TripCover( B ): Given a tourist u , a set of PoIs P , a time budget B , a set of trajectories a cost function q  X  p  X  and a vector ~ z . Find a subset of trajectories where
Without loss of generality, we assume 8 S 0 2 S ; P p 2 S trajectories, these trajectories could be filtered out. The ized Maximum Coverage (GMC) problem that is proven to be NP-hard ( Cohen &amp; Katzir, 2008 ). The constraint (2) and (3) ensure the time budget is satisfied, and each selected PoI is associated with only one trajectory, respectively. Moreover, (4) guarantees a selected trajectory if a PoI is selected. In particular, given a tourist u , GMC formulation in the following way: (i) the bins in GMC represent the collection C  X  p ; u  X  and the cost function q  X  p  X  are bins-independent. They only depend on p and u . The hard. An efficient greedy approximation algorithm for solving the GMC problem that achieves an approximation ratio of e =  X  e 1  X  X  ; 8 &gt; 0 is proposed in Cohen and Katzir (2008) . We thus adapted this algorithm, whose source code has been kindly provided us by the authors, in order to take into account 3. The T RAJ SP problem Once the solution of a given TRIPCOVER instance is computed, the trajectories in
To this purpose, we model trajectory scheduling as a Traveling Salesman Problem (TSP) aimed at finding the shortest path points. Here, the task is different as it is defined over a set In the following, we formally define our trajectory scheduling problem (T the user agenda.
 Trajectory Scheduling Problem. Let S # S be a set of disjoint trajectories, matrix where e ij  X  1if i and j are endPoIs of the same trajectory of matrix where c ij is the time needed to move from endPoI i to endPoI j .T
T RAJ SP: Given the set of endPoIs P , the endPoIs matrix E , and the cost matrix C , find the tour where
In the above formulation, only the costs between different trajectories X  endPoIs have to be considered for minimizing cost (5) , while (6) and (7) impose constraints on the degree of each endPoI and on sub-tour elimination , respectively ( Rajesh never connected together in the solution.

Although the number of possible solutions for T RAJ SP is lower than whose of the corresponding TSP formulation, lions of possible solutions with only 12 trajectories). Hence, we address T from a (given or random) tour b P connecting all trajectories in 3-OPT strategies ( Rajesh Matai &amp; Mittal, 2010 ).

We now introduce an interesting property of the T RAJ SP problem that allows us to formalize how 2-OPT or 3-OPT strat-of another trajectory in S . Let denote with n  X  i  X  the connected endPoI d . Note that only the link between endPoIs i and n  X  i  X  can be modified, since the path between i and e  X  i  X  is fixed by definition.
 non-admissible solution for T RAJ SP, since we remove two links of the tour while we add only one. We thus need to perform some additional changes to reconnect the two endPoIs that remain disconnected. The result below formalizes how such number of endPoIs connections between i and k .
 even, then a 2-OPT strategy needs to be applied to produce a feasible tour, a 3-OPT strategy otherwise. at  X  k ; n  X  k  X  X  ( crossed line ) as shown in Fig. 1 (a).
 applying a 2-OPT strategy.
 Because we add three new links and remove three other ones, we applied a 3-OPT strategy.

Local search algorithm. From the above discussion, it is easy to devise a local search algorithm that iteratively optimizes a given tour by applying 2-OPT or 3-OPT strategies and stops after a fixed number of iterations or when it converges to a locally optimal solution.

Scheduling the tour on the user agenda. Given the sightseeing tour (e.g., days). The solution involves identifying a starting endPoI in the tour and assigning the successive PoIs in n(e(k)) ferent ways: either by removing the most  X  X  X xpensive X  X  connection (e.g., in terms of traveling time) between two endPoIs of the tour or by taking into account the closest endPoI to a given spatial position (e.g. user X  X  hotel). 4. Building the knowledge base data from Flickr, Wikipedia, and Google Maps. The second component called  X  X  X ata Processing X  X  extracts the knowledge used budget B , the third component  X  X  X overing X  X  deals with the exploitation of the models and the knowledge base to compute the budget that are finally scheduled on the user agenda by the fourth component  X  X  X cheduling X  X . of public user-generated content available for download: Rome, Florence, and Pisa. The generation of the knowledge base for each of the cities is a multi-steps process that we are going to detail in the following.

PoIs. The first step is to identify the set of PoIs in the target geographical region. Given the bounding box BB erenced Wikipedia named entity, whose geographical coordinates falls into BB common topic. They form a hierarchy, although sub-categories may be a member of more than one category. By considering a density-based clustering to group in a single PoI sightseeing entities which are very close one to each other.
DBScan ( Ester, Peter Kriegel, Sander, &amp; Xu, 1996 ). To build our dataset, we set 1 as the minimum number of points and the members of the clusters and by normalizing the resulting vector. At the end of this first step we have the set
P  X f p 1 ; ... ; p N g of PoIs and the relevance vector ~ v Wikipedia as an external source of knowledge.
 Users and PoI histories. As second step we need a method for collecting users photos taken in the given area BB city . The assumption we are making is that photo albums made by Flickr users implicitly ing the highest geo-referenced accuracy given by Flickr. 8 of trajectories crossing each PoI.

Fig. 3 (b) X (d) show three plots regarding the characteristics of the three datasets that have been made available for down-tained in the datasets only for their contribution to the measure of PoI popularity, but do not belong to the set
Fig. 3 (c) shows the distribution of PoI popularity in the three cities involved. Even in this case we can note strong sim-two datasets: while we have more users and photos for Rome than for Florence, the opposite holds for the number of PoIs reported in the X axis.
 power-law distribution with a few very popular categories and most categories associated with relatively few PoIs.
Wikipedia categories form in fact a (weak) hierarchy, and the most general topics are associated with many pages, while sub-categories are relevant only for precisely identified subsets of homogeneous PoIs.

Finally, Table 2 report the top-3 most popular PoIs and categories in Pisa, Florence and Rome. We also report three exam-entitled, in both cities, to Saint John the Baptist. 5. Experiments We now assess the effectiveness of T RIP B UILDER in: (i) selecting a set of trajectories of interest for a given user ( over, we present an evaluation of the efficiency of the T
We conduct our experiments on the three datasets of Pisa, Florence, and Rome by varying the time budget and the param-set of experiments that differ for the methodology used to choose the test users: Random selection. Here the set of users used to assess T RIP sider for all the three cases a set of 100 test users randomly selected among the visitors having a Poi history longer than to be able to vary in a significant range the time budgets. This is because it is not feasible to evaluate a personalized the above cutoff values, the users among which the 100 test users were chosen are 153 ; 679, and 930 in Pisa, Florence, and Rome, respectively.
 generate the personalized sightseeing tour in city B and vice versa. In this way we avoid any possible bias to the specific categories used in the Wikipedia pages of a given city.
 Effectiveness  X  TripCover. We compare the effectiveness of T est for a given user against the following baselines:
Trajectory Popularity (Tpop). This baseline builds the tour by taking into account the normalized popularity of the tra-jectories in S computed as the sum of the popularity of the constituent PoIs divided by the length of the trajectory. It greedily adds to the visiting plan the most popular trajectories until the time budget is reached. Trajectory Personalized Profit (Tppro). Given the preference vector of a tourist, this baseline sorts the trajectories in by decreasing normalized user/PoI similarity. Such trajectory score is computed as the sum of user/PoI similarities of all a time the trajectories having the highest profit for the specific tourist until the total time budget is reached.
Experiments are conducted by providing to T RIP B UILDER and the baseline algorithms the preference vector of each one of ods to predict PoIs and categories that match actual PoI histories of the users in the test set.
Random Selection. Tables 4 X 6 report the effectiveness measured for the recommended sightseeing tours on the basis of (Tppro) greedy strategies perform well, thus forming competitive baselines. In terms of Personal Profit Score ( S tion improves the baselines up to 86% in Pisa with an absolute improvement D S 178% in Florence with an improvement D S pro u of 0.203 (Tpop vs. T
D S u of 0.382 (Tpop vs. T RIP B UILDER , a  X  0 : 75). In terms of S is sensitive to the parameter a .

Results in Pisa (see Table 4 ) compared to Tppro demonstrate that our approach is better for 1 = 2-day budget with 6% of improvement, while Tppro is better for 1-day budget, but it improves only 1%. It is worth highlighting two situations: (1) when a  X  0, T RIP B UILDER works by considering only the popularity (as Tpop) showing a performance in terms of S similar to the Tpop baseline; (2) when a  X  1, T RIP B UILDER rable with Tppro. We conclude that a plays an important role in T est and PoI X  X  popularity. For instance, the highest S pro (i.e., 0.79). Moreover, T RIP B UILDER builds tours that increase the Visiting Time Score ( S ter match users X  preferences w.r.t the baselines. In addition, T uting to lower intra-PoI movement time in its solutions.
 is likely that she prefer to spend time visiting the PoIs than moving between them. As claim that T RIP B UILDER is able to build tours that globally maximize S T
B UILDER uses more appropriately the time budget. The difference in terms of S the three algorithms (i.e., Tpop, Tppro, T RIP B UILDER ) have quite similar S with a  X  0 : 75). In the case of larger cities, i.e., Florence and Rome, T rationale behind this result can be that in larger cities the intra-PoI traveling time tends to impact more the S In terms of Popularity Score ( S pop ), results achieved with a  X  0 confirm that T Moreover, figures for T RIP B UILDER decreases for increasing values of a as expected.
 In terms of PoIs and categories recall, all algorithms get at least 69% of the relevant PoIs and 81% of the categories for Pisa. Regarding categories recall in Pisa (see Table 4 ), T perform Tppro. Moreover, looking at PoIs recall, T RIP B UILDER compared with 89.4% of Tpop and 90.9% of Tppro for the 1-day time budget. Comparing the results for Florence and Rome, budgets are employed (2 and 4-days budget), it always outperforms the baselines independently from the value of a (see Tables 5 and 6 ). This behavior is due to the capability of T within the time budgets. Consequently, more PoIs relevant for the specific user are likely to be visited. Moreover, we values because trajectories crossing popular PoIs are preferred. When a increases, recall decreases because unexpected
PoIs in the selected trajectories fitting the user interests are suggested. We believe these trajectories may constitute a source of serendipitous recommendations. Finally, the low standard deviations associated with the results in Tables 4 X  6 prove that the performance of the three techniques are stable w.r.t. different users X  profiles.
Profile-based Selection. In these experiments we select test users who visited two different cities A and B .We employ their preferences in city A to build and evaluate tours in city B and vice versa. Due to a lack of space, we report only the results obtained by considering Rome as target city B and Florence as city A . However, the results obtained considering different pairs of cities are similar thus confirming the behavior identified. Among the 2224 users visiting both Florence and Rome, we randomly chose 100 users having PoI histories longer than the thresholds discussed above. It is worth noting that for these experiments we need to  X  X  X niform X  X  the categories of the PoIs in the three cities, since Wikipedia provides different categories for each city. Therefore, we exploit the general categorization used within the T Landmarks .
 with those obtained in the tests using random selection confirm that the performance of T egory level are remarkably higher that in the previous experiments. This is motivated by the lower number of categories pler. It is also worth noting that we do not report results of T analysis.
 Effectiveness  X  T RAJ SP. We now evaluate the effectiveness of T the user agenda. We evaluate effectiveness by considering the average path cost , the ratio between the cost of the T the ratio is, the better T RIP B UILDER employes the time by minimizing the connections when solving the T
Local Search algorithm is compared with two baselines: (i) Random , which builds the sightseeing tours by randomly connect-with the closest endPoI. The results reported are referred to the whole set of 100 users in the test set. However, since we are evaluating heuristic approaches that might be very sensitive to the starting conditions, we ran each experiment 5 times and averaged the results achieved. The stop condition for our T iterations or 100 iterations without improvement in the solution cost.
 Results show that the Random baseline immediately diverges from the other competitors getting the worst paths. Nearest
Trajectory performs better than Random and it is always able to provide an average connection cost lower than 0.3. On the other hand, our Local Search algorithm always outperforms both Random and Nearest Trajectories, with a notable than 0.2. In other words, T RIP B UILDER is able to address T time budget for inter-trajectory connections.
 Efficiency. We now report results of experiments conducted to evaluate the efficiency of T runtime of T RIP B UILDER along with standard deviation. Moreover, the plot highlights the contributions of bars) and of our T RAJ SP local search algorithm (upper bars) to the overall runtime. It is worth noting that T cess is feasible for online applications.
 Fig. 6 details the average runtime of the techniques employed to solve T averaging the runtime obtained in 5 runs for each one of the 100 users of the test set. The Random technique obviously has the best runtime performance even if it is not effective in providing solutions as good as the other approaches do. For this reason, we do not report its results in Fig. 6 . Results confirm that both the approaches for T tice. In general, Nearest Trajectory is always faster than Local Search. However, since the execution times are in any case limited, and Local Search remarkably outperforms Nearest Trajectory in effectiveness it has to be preferred. 6. Related work
Several works in the literature propose methods to recommend a list of PoIs based on the actual location of the user (loca- X  X  X ightseeing tours X  X  based on time-budgeted itineraries matching the user preferences. Even if T adapted to fit a location-based service (LBS) model, we enhance classical LBS services by precomputing itineraries new city has been investigated in the literature as we can see in the interesting survey on the topic presented in Vansteenwegen and Souffriau (2010) .
 An early work on recommending sightseeing itineraries is ( Godart, 1999 ). Here authors use the Traveling Salesman
Problem (TSP) as a core problem to plan trips. They automatically select PoIs and lodging trying to minimizing transport and accommodation costs while maximizing the attractiveness of the accommodation and the activities. Although interest-ing, this model is very complex and computationally expensive, making it very difficult to use in practice.
Shang et al. propose and investigate a problem called User Oriented Trajectory Search (UOTS) for trip recommendation type of queries can bring benefits to tourists in many popular applications such as trip planning and recommendation. However, this approach does not take into account the user X  X  time budget in order to optimize her trip.
An interesting approach to the trip recommendation problem is the one proposed by Vansteenwegen et al., where authors define the Tourist Trip Design Problems (TTDP) ( Souffriau, Vansteenwegen, Vertommen, Berghe, &amp; Van Oudheusden, 2008; time budget. They applied their algorithm, based on a guided local search, and a competitor, Dynamic Tour Guide, to a real 2011 ) a tourist expert system, called the  X  X  X ity Trip Planner X  X  for planning routes.

The orienteering problem is also employed in De Choudhury et al. (2010) . Here, De Choudhury et al. construct intra-city photo streams into a PoI graph. Itineraries are then automatically constructed from the graph based on the popularity of the PoIs and subject to the user X  X  time and destination constraints. However, the proposed orienteering problem does not a possible set of PoIs to not be visited.
 straint based on the user X  X  location. The authors evaluate Trip-Mine in terms of mining efficiency and memory storage and classical travel sequences. In this work, they propose a HITS-based inference model to mine interesting locations and classical travel sequences based on multiple users GPS trajectories in a given geospatial region. that solves the budgeted trip planning problem in a completely unsupervised way by exploiting user-generated content mined from Wikipedia and Flickr. Our principled modeling of the tour planning problem as a sequence of instances along with the algorithms we proposed to address these problem allowed us to build an efficient and robust sys-tem to efficiently compute personalized itineraries that fits precisely the user preferences. 7. Conclusions
In this paper, we comprehensively discussed T RIP B UILDER fits the user interests and respect the time constraint is chosen. This is done by solving the rithm addressing T RAJ SP, a particular instance of the Traveling Salesman Problem. T seeing tours by composing popular trajectories performed by real tourists as mined from Flickr Photo albums. Moreover, since both PoIs characteristics and user preferences are mapped into the same categorization automatically extracted from
Wikipedia, it is able to personalize the recommended itinerary and even consider the popularity of each PoIs as estimated from the number of photos available for it.
 content available for download. The process exploited to mine such content from Flickr, Wikipedia and Google Maps and to our framework by considering the performance of the algorithms proposed to address both the lems. The proposed solutions resulted to outperforms the baselines in terms of all the metrics adopted for assessment. Our consequently, lower intra-PoI movement time than the baselines. Furthermore, we assessed the performance of our TSP-firming that our approach can be fruitfully deployed in online applications.
 Acknowledgments This work was partially supported by EU FP7 Marie Curie project SEEK (No. 295179), PRIN 2011 project ARS TECNOMEDIA,
CNPQ Scholarship (No. 306806/2012-6), CNPQ Casadinho/PROCAD Project (No. 552578/2011-8), CNPQ-CNR Bilateral Project (No. 490459/2011-0), CNPQ Scholarship (No. 211836/2013-3), and by the Italian Ministry of Economic Development Project MOTUS (No. MS01 00015  X  Industria2015).
 References
