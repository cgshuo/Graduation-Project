 dvickrey@cs.stanford.edu Set expansion is a well-studied NLP problem where a machine-learning algorithm is given a fixed set of seed words and asked to find additional members of the implied set. For example, given the seed set {  X  X lephant, X   X  X orse, X   X  X at X  } , the al-gorithm is expected to return other mammals. Past work, e.g. (Roark &amp; Charniak, 1998; Ghahramani &amp; Heller, 2005; Wang &amp; Cohen, 2007; Pantel et al., 2009), generally focuses on semi-automatic acquisition of the remaining members of the set by mining large amounts of unlabeled data.

State-of-the-art set expansion systems work well for well-defined sets of nouns, e.g.  X  X S Pres-idents, X  particularly when given a large seed set. Set expansions is more difficult with fewer seed words and for other kinds of sets. The seed words may have multiple senses and the user may have in mind a variety of attributes that the answer must match. For example, suppose the seed word is  X  X aguar X . First, there is sense ambiguity; we could be referring to either a  X  X arge cat X  or a  X  X ar. X  Be-yond this, we might have in mind various more (or less) specific groups:  X  X exican animals, X   X  X reda-tors, X   X  X uxury cars, X   X  X ritish cars, X  etc.

We propose a system which addresses sev-eral shortcomings of many set expansion systems. First, these systems can be difficult to use. As ex-plored by Vyas et al. (2009), non-expert users produce seed sets that lead to poor quality expan-sions, for a variety of reasons including ambiguity and lack of coverage. Even for expert users, con-structing seed sets can be a laborious and time-consuming process. Second, most set expansion systems do not use negative examples, which can be very useful for weeding out other bad answers. Third, many set expansion systems concentrate on noun classes such as  X  X S Presidents X  and are not effective or do not apply to other kinds of sets.
Our system works as follows. The user initially thinks of at least one seed word belonging to the desired set. One at a time, the system presents can-didate words to the user and asks whether the can-didate fits the concept. The user X  X  answer is fed back into the system, which takes into account this new information and presents a new candidate to the user. This continues until the user is satisfied with the compiled list of  X  X es X  answers. Our sys-tem uses both positive and negative examples to guide the search, allowing it to recover from ini-tially poor seed words. By using multiple sources of similarity data, our system captures a variety of kinds of similarity. Our system replaces the poten-tially difficult problem of thinking of many seed words with the easier task of answering yes/no questions. The downside is a possibly increased amount of user interaction (although standard set expansion requires a non-trivial amount of user in-teraction to build the seed set).

There are many practical uses for such a sys-tem. Building a better, more comprehensive the-saurus/gazetteer is one obvious application. An-other application is in high-precision query expan-sion, where a human manually builds a list of ex-pansion terms. Suppose we are looking for pages discussing  X  X ublic safety. X  Then synonyms (or near-synonyms) of  X  X afety X  would be useful (e.g.  X  X ecurity X ) but also non-synonyms such as  X  X re-cautions X  or  X  X revention X  are also likely to return good results. In this case, the concept we are inter-ested in is  X  X ords which imply that safety is being discussed. X  Another interesting direction not pur-sued in this paper is using our system as part of a more-traditional set expansion system to build seed sets more quickly. As input, we are provided with a small set of seed words s . The desired output is a target set of words G , consisting of all words that fit the de-sired concept. A particular seed set s can belong to many possible goal sets G , so additional infor-mation may be required to do well.

Previous work tries to do as much as possible using only s . Typically s is assumed to contain at least 2 words and often many more. Pantel et al. (2009) discusses the issue of seed set size in detail, concluding that 5-20 seed words are often required for good performance.

There are several problems with the fixed seed set approach. It is not always easy to think of even a single additional seed word (e.g., the user is trying to find  X  X erman automakers X  and can only think of  X  X olkswagen X ). Even if the user can think of additional seed words, time and effort might be saved by using active learning to find good sug-gestions. Also, as Vyas et al. (2009) show, non-expert users often produce poor-quality seed sets. Any system for this task relies on information about similarity between words. Our system takes as input a rectangular matrix M . Each column corresponds to a particular word. Each row cor-responds to a unique dimension of similarity ; the j th entry in row i m ij is a number between 0 and 1 indicating the degree to which w j belongs to the i th similarity group. Possible similarity dimen-sions include  X  X ow similar is word w j to the verb jump? X   X  X s w j a type of cat? X  and  X  X re the words which appear in the context of w j similar to those that appear in the context of boat? X  Each row r i of M is labeled with a word l i . This may follow intuitively from the similarity axis (e.g.,  X  X ump, X   X  X at, X  and  X  X oat X , respectively), or it can be gen-erated automatically (e.g. the word w j with the highest membership m ij ).

Let  X  be a vector of weights, one per row, which correspond to how well each row aligns with the goal set G . Thus,  X  i should be large and positive if row i has large entries for positive but not negative examples; and it should be large and negative if row i has large entries for negative but not positive examples. Suppose that we have already chosen an appropriate weight vector  X  . We wish to rank all possible words (i.e., the columns of M ) so that the most promising word gets the highest score. A natural way to generate a score z j for column j is to take the dot product of  X  with column j , z j = P i  X  i m ij . This rewards word w j for having high membership in rows with positive  X  , and low membership in rows with negative  X  .

Our system uses a  X  X atch X  approach to active learning. At iteration i , it chooses a new  X  based on all data labeled so far (for the 1 st iteration, this data consists of the seed set s ). It then chooses the column (word) with the highest score (among words not yet labeled) as the candidate word w i . The user answers  X  X es X  or  X  X o, X  indicat-ing whether or not w i belongs to G . w i is added to the positive set p or the negative set n based on the user X  X  answer. Thus, we have a labeled data set that grows from iteration to iteration as the user labels each candidate word. Unlike set expansion, this procedure generates (and uses) both positive and negative examples.

We explore two options for choosing  X  . Recall that each row i is associated with a label l i . The first method is to set  X  i = 1 if l i  X  p (that is, the set of positively labeled words includes label l i ),  X  i =  X  1 if l i  X  n , and  X  i = 0 otherwise. We refer to this method as  X  X ntrained X , although it is still adaptive  X  it takes into account the labeled examples the user has provided so far.

The second method uses a standard machine learning algorithm, logistic regression. As be-fore, the final ranking over words is based on the score z j . However, z j is passed through the lo-gistic function to produce a score between 0 and as the probability that w j is a positive example, P ( Y | w j ) . This leads to the objective function L (  X  ) = log ( Y This objective is convex and can be optimized us-ing standard methods such as L-BFGS (Liu &amp; No-cedal, 1989). Following standard practice we add an L 2 regularization term  X   X  T  X  2  X  2 to the objective. This method does not use the row labels l i . We consider three similarity data sources: the Moby thesaurus 1 , WordNet (Fellbaum, 1998), and distributional similarity based on a large corpus of text (Lin, 1998). Table 1 shows similarity lists from each. These sources capture different kinds of similarity information, which increases the rep-resentational power of our system. For all sources, the similarity of a word with itself is set to 1 . 0 .
It is worth noting that our system is not strictly limited to choosing from pre-existing groups. For example, if we have a list of luxury items, and an-other list of cars, our system can learn weights so that it prefers items in the intersection, luxury cars.
Moby thesaurus consists of a list of word-based thesaurus entries. Each word w i has a list of similar words sim i j . Moby has a total of about 2.5 million related word pairs. Unlike some other the-sauri (such as WordNet and thesaurus.com), en-tries are not broken down by word sense.

In the raw format, the similarity relation is not symmetric; for example, there are many words that occur only in similarity lists but do not have their own entries. We augmented the thesaurus to make it symmetric: if  X  X og X  is in the similarity en-try for  X  X at, X  we add  X  X at X  to the similarity entry for  X  X og X  (creating an entry for  X  X og X  if it does not exist yet). We then have a row i for every similar-ity entry in the augmented thesaurus; m ij is 1 if w j appears in the similarity list of w i , and 0 other-wise. The label l i of row i is simply word w i . Un-like some other thesauri (including WordNet and thesaurus.com), the entries are not broken down by word sense or part of speech. For polysemic words, there will be a mix of the words similar to each sense and part of speech.

WordNet is a well-known dictionary/thesaurus/ ontology often used in NLP applications. It con-sists of a large number of synsets; a synset is a set of one or more similar word senses. The synsets are then connected with hypernym/hyponym links, which represent IS-A relationships. We focused on measuring similarity in WordNet using the hy-pernym hierarchy. 2 . There are many methods for converting this hierarchy into a similarity score; we chose to use the Jiang-Conrath distance (Jiang &amp; Conrath, 1997) because it tends to be more ro-bust to the exact structure of WordNet. The num-ber of types of similarity in WordNet tends to be less than that captured by Moby, because synsets in WordNet are (usually) only allowed to have a single parent. For example,  X  X urder X  is classified as a type of killing, but not as a type of crime.
The Jiang-Conrath distance gives scores for pairs of word senses, not pairs of words. We han-dle this by adding one row for every word sense with the right part of speech (rather than for ev-ery word); each row measures the similarity of ev-ery word to a particular word sense. The label of each row is the (undisambiguated) word; multiple rows can have the same label. For the columns, we do need to collapse the word senses into words; for each word, we take a maximum across all of its senses. For example, to determine how similar (the only sense of)  X  X actory X  is to the word  X  X lant, X  we compute the similarity of  X  X actory X  to the  X  X n-dustrial plant X  sense of  X  X lant X  and to the  X  X iving thing X  sense of  X  X lant X  and take the higher of the two (in this case, the former).

The Jiang-Conrath distance is a number be-tween  X  X  X  and 0. By examination, we determined that scores below  X  12 . 0 indicate virtually no sim-ilarity. We cut off scores below this point and linearly mapped each score x to the range 0 to 1 , yielding a final similarity of min (0 ,x +12) 12 . This greatly sparsified the similarity matrix M . Distributional similarity . We used Dekang Lin X  X  dependency-based thesaurus, available at This resource groups words based on the words they co-occur with in normal text. The words most similar to  X  X at X  are  X  X og, X   X  X nimal, X  and  X  X onkey, X  presumably because they all  X  X at, X   X  X alk, X  etc. Like Moby, similarity entries are not divided by word sense; usually, only the dominant sense of each word is represented. This type of similarity is considerably different from the other two types, tending to focus less on minor details and more on broad patterns.

Each similarity entry corresponds to a single word w i and is a list of scored similar words sim i j . The scores vary between 0 and 1, but usually the highest-scored word in a similarity list gets a score of no more than 0 . 3 . To calibrate these scores with the previous two types, we divided all scores by the score of the highest-scored word in that list. Since each row is normalized individually, the similarity matrix M is not symmetric. Also, there are separate similarity lists for each of nouns, verbs, and modifiers; we only used the lists match-ing the seed word X  X  part of speech. Given a seed set s and a complete target set G , it is easy to evaluate our system; we say  X  X es X  to any-thing in G ,  X  X o X  to everything else, and see how many of the candidate words are in G . However, building a complete gold-standard G is in practice prohibitively difficult; instead, we are only capa-ble of saying whether or not a word belongs to G when presented with that word.

To evaluate a particular active learning algo-rithm, we can just run the algorithm manually, and see how many candidate words we say  X  X es X  to (note that this will not give us an accurate estimate of the recall of our algorithm). Evaluating several different algorithms for the same s and G is more difficult. We could run each algorithm separately, but there are several problems with this approach. First, we might unconsciously (or consciously) bias the results in favor of our preferred algo-rithms. Second, it would be fairly difficult to be consistent across multiple runs. Third, it would be inefficient, since we would label the same words multiple times for different algorithms.

We solved this problem by building a labeling system which runs all algorithms that we wish to test in parallel. At each step, we pick a random al-gorithm and either present its current candidate to the user or, if that candidate has already been la-beled, we supply that algorithm with the given an-swer. We do NOT ever give an algorithm a labeled training example unless it actually asks for it  X  this guarantees that the combined system is equivalent to running each algorithm separately. This pro-cedure has the property that the user cannot tell which algorithms presented which words.

To evaluate the relative contribution of active learning, we consider a version of our system where active learning is disabled. Instead of re-training the system every iteration, we train it once on the seed set s and keep the weight vector  X  fixed from iteration to iteration.
 We evaluated our algorithms along three axes. First, the method for choosing  X  : Untrained and Logistic (U and L). Second, the data sources used: each source separately (M for Moby, W for Word-Net, D for distributional similarity), and all three in combination (MWD). Third, whether active learning is used (+/-). Thus, logistic regression us-ing Moby and no active learning is L(M,-). For lo-gistic regression, we set the regularization penalty  X  2 to 1, based on qualitative analysis during devel-opment (before seeing the test data).

We also compared the performance of our algorithms to the popular online thesaurus http://thesaurus.com . The entries in this thesaurus are similar to Moby, except that each word may have multiple sense-disambiguated en-tries. For each seed word w , we downloaded the page for w and extracted a set of synonyms en-tries for that word. To compare fairly with our al-gorithms, we propose a word-by-word method for exploring the thesaurus, intended to model a user scanning the thesaurus. This method checks the first 3 words from each entry; if none of these are labeled  X  X es, X  it moves on to the next entry. We omit details for lack of space. We designed a test set containing different types of similarity. Table 2 shows each category, with examples of specific similarity queries. For each type, we tested on five different queries. For each query, the first author built the seed set by writ-ing down the first three words that came to mind. For most queries this was easy. However, for the similarity type Hard Synonyms, coming up with more than one seed word was considerably more difficult. To build seed sets for these queries, we ran our evaluation system using a single seed word and took the first two positive candidates; this en-sured that we were not biasing our seed set in favor of a particular algorithm or data set.

For each query, we ran our evaluation system until each algorithm had suggested 25 candidate words, for a total of 625 labeled words per algo-rithm. We measured performance using mean av-erage precision (MAP), which corresponds to area under the precision-recall curve. It gives an over-all assessment across different stopping points.
Table 3 shows results for an informative sub-set of the tested algorithms. There are many con-clusions we can draw. Thesaurus.Com performs poorly overall; our best system, L(MWD,+), outscores it by 164%. The next group of al-Category Name Example Similarity Queries Simple Groups (SG) car brands, countries, mammals, crimes Complex Groups (CG) luxury car brands, sub-Saharan countries Synonyms (Syn) syn of { scandal, helicopter, arrogant, slay } Meronym/Material (M) parts of a car, things made of wood Thesaurus.Com .041 .060 .275 .173 .060 L(D,+) .377 .344 .211 .329 .177 L(M,-) .102 .118 .393 .279 .119 U(W,+) .097 .136 .296 .277 .165 U( MWD ,+) .194 .153 .438 .357 .213 L( MWD ,-) .344 .207 .360 .345 .173 L( MWD ,+) .366 .335 .379 .372 .158 gorithms, U(*,-), add together the similarity en-tries of the seed words for a particular similarity source. The best of these uses distributional simi-larity; L(MWD,+) outscores it by 53%. Combin-ing all similarity types, U(MWD,-) improves by 10% over U(D,-). L(MWD,+) improves over the best single-source, L(D,+), by a similar margin.
Using logistic regression instead of the un-trained weights significantly improves perfor-mance. For example, L(MWD,+) outscores U(MWD,+) by 19%. Using active learning also significantly improves performance: L(MWD,+) outscores L(MWD,-) by 13%. This shows that active learning is useful even when a reasonable amount of initial information is available (three seed words for each test case). The gains from logistic regression and active learning are cumula-tive; L(MWD,+) outscores U(MWD,-) by 38%.

Finally, our best system, L(MWD,+) improves over L(D,-), the best system using a single data source and no active learning, by 36%. We con-sider L(D,-) to be a strong baseline; this compari-son demonstrates the usefulness of the main con-tributions of this paper, the use of multiple data sources and active learning. L(D,-) is still fairly sophisticated, since it combines information from the similarity entries for different words.
Table 4 shows the breakdown of results by cat-egory. For this chart, we chose the best set-ting for each similarity type. Broadly speaking, the thesauri work reasonably well for synonyms, but poorly for groups. Meronyms were difficult across the board. Neither logistic regression nor active learning always improved performance, but L(MWD,+) performs near the top for every cate-gory. The complex groups category is particularly interesting, because achieving high performance on this category required using both logistic re-gression and active learning. This makes sense since negative evidence is particularly important for this category. The biggest difference between our system and previous work is the use of active learning, espe-cially in allowing the use of negative examples. Most previous set expansion systems use boot-strapping from a small set of positive examples. Recently, the use of negative examples for set ex-pansion was proposed by Vyas and Pantel (2009), although in a different way. First, set expansion is run as normal using a fixed seed set. Then, human annotators label a small number of negative exam-ples from the returned results, which are used to weed out other bad answers. Our method incorpo-rates negative examples at an earlier stage. Also, we use a logistic regression model to robustly in-corporate negative information, rather than deter-ministically ruling out words and features.
Our system is limited by our data sources. Sup-pose we want actors who appeared in Star Wars. If we only know that Harrison Ford and Mark Hamill are actors, we have little to go on. There has been a large amount of work on other sources of word-similarity. Hughes and Ramage (2007) use random walks over WordNet, incorporating infor-mation such as meronymy and dictionary glosses. Snow et al. (2006) extract hypernyms from free text. Wang and Cohen (2007) exploit web-page structure, while Pasca and Durme (2008) exam-ine query logs. We expect that adding these types of data would significantly improve our system. Fellbaum, C. (Ed.). (1998). Wordnet: An elec-tronic lexical database . MIT Press.
 Ghahramani, Z., &amp; Heller, K. (2005). Bayesian sets. Advances in Neural Information Process-ing Systems (NIPS) .
 Hughes, T., &amp; Ramage, D. (2007). Lexical se-mantic relatedness with random graph walks. EMNLP-CoNLL .
 Jiang, J., &amp; Conrath, D. (1997). Semantic similar-ity based on corpus statistics and lexical taxon-omy. Proceedings of International Conference on Research in Computational Linguistics .
 Lin, D. (1998). An information-theoretic defini-tion of similarity. Proceedings of ICML .
 Liu, D. C., &amp; Nocedal, J. (1989). On the lim-ited memory method for large scale optimiza-tion. Mathematical Programming B .
 Pantel, P., Crestan, E., Borkovsky, A., Popescu,
A., &amp; Vyas, V. (2009). Web-scale distributional similarity and entity set expansion. EMNLP . Pasca, M., &amp; Durme, B. V. (2008). Weakly-supervised acquisition of open-domain classes and class attributes from web documents and query logs. ACL .
 Roark, B., &amp; Charniak, E. (1998). Noun-phrase co-occurrence statistics for semiautomatic se-mantic lexicon construction. ACL-COLING .
 Snow, R., Jurafsky, D., &amp; Ng, A. (2006). Seman-tic taxonomy induction from heterogenous evi-dence. ACL .
 Vyas, V., &amp; Pantel, P. (2009). Semi-automatic en-tity set refinement. NAACL/HLT .
 Vyas, V., Pantel, P., &amp; Crestan, E. (2009). Helping editors choose better seed sets for entity expan-sion. CIKM .
 Wang, R., &amp; Cohen, W. (2007). Language-independent set expansion of named entities us-ing the web. Seventh IEEE International Con-ference on Data Mining .
