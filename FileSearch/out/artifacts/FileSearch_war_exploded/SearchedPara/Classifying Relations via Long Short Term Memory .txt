 Relation classification is an important NLP task. It plays a key role in various scenarios, e.g., in-formation extraction (Wu and Weld, 2010), ques-tion answering (Yao and Van Durme, 2014), med-ical informatics (Wang and Fan, 2014), ontol-ogy learning (Xu et al., 2014), etc. The aim of relation classification is to categorize into pre-defined classes the relations between pairs of marked entities in given texts. For instance, in the sentence  X  X  trillion gallons of [water] e been poured into an empty [region] e space, X  the entities water and region are of rela-tion Entity-Destination ( e 1 ,e 2 ) .

Traditional relation classification approaches rely largely on feature representation (Kambhatla, 2004), or kernel design (Zelenko et al., 2003; Bunescu and Mooney, 2005). The former method usually incorporates a large set of features; it is difficult to improve the model performance if the feature set is not very well chosen. The latter ap-proach, on the other hand, depends largely on the designed kernel, which summarizes all data infor-mation. Deep neural networks, emerging recently, provide a way of highly automatic feature learning (Bengio et al., 2013), and have exhibited consid-erable potential (Zeng et al., 2014; dos Santos et al., 2015). However, human engineering X  X hat is, incorporating human knowledge to the network X  X  architecture X  X s still important and beneficial. This paper proposes a new neural network, SDP-LSTM, for relation classification. Our model utilizes the shortest dependency path (SDP) be-tween two entities in a sentence; we also design a long short term memory (LSTM)-based recurrent neural network for information processing. The neural architecture is mainly inspired by the fol-lowing observations.  X  Shortest dependency paths are informative  X  Direction matters. Dependency trees are a  X  Linguistic information helps. For exam-
For effective information propagation and inte-gration, our model leverages LSTM units during recurrent propagation. We also customize a new dropout strategy for our SDP-LSTM network to alleviate the problem of overfitting. To the best of our knowledge, we are the first to use LSTM-based recurrent neural networks for the relation classification task.
 We evaluate our proposed method on the SemEval 2010 relation classification task, and achieve an F 1 -score of 83.7%, higher than com-peting methods in the literature.

In the rest of this paper, we review related work in Section 2. In Section 3, we describe our SDP-LSTM model in detail. Section 4 presents quan-titative experimental results. Finally, we have our conclusion in Section 5. Relation classification is a widely studied task in the NLP community. Various existing meth-fit from combining convolution kernel and syntac-tic features. Plank and Moschitti (2013) introduce semantic information into kernel methods in ad-dition to considering structural information only. One potential difficulty of kernel methods is that all data information is completely summarized by the kernel function (similarity measure), and thus designing an effective kernel becomes crucial.
Deep neural networks, emerging recently, can learn underlying features automatically, and have attracted growing interest in the literature. Socher et al. (2011) propose a recursive neural network (RNN) along sentences X  parse trees for sentiment analysis; such model can also be used to clas-sify relations (Socher et al., 2012). Hashimoto et al. (2013) explicitly weight phrases X  importance in RNNs to improve performance. Ebrahimi and Dou (2015) rebuild an RNN on the dependency path between two marked entities. Zeng et al. (2014) explore convolutional neural networks, by which they utilize sequential information of sen-tences. dos Santos et al. (2015) also use the convo-lutional network; besides, they propose a ranking loss function with data cleaning, and achieve the state-of-the-art result in SemEval-2010 Task 8.
In addition to the above studies, which mainly focus on relation classification approaches and models, other related research trends include in-formation extraction from Web documents in a semi-supervised manner (Bunescu and Mooney, 2007; Banko et al., 2007), dealing with small datasets without enough labels by distant super-vision techniques (Mintz et al., 2009), etc. In this section, we describe our SDP-LSTM model in detail. Subsection 3.1 delineates the overall ar-chitecture of our model. Subsection 3.2 presents the rationale of using SDPs. Four different infor-mation channels along the SDP are explained in Subsection 3.3. Subsection 3.4 introduces the re-current neural network with long short term mem-ory, which is built upon the dependency path. Sub-section 3.5 customizes a dropout strategy for our network to alleviate overfitting. We finally present our training objective in Subsection 3.6. 3.1 Overview Figure 2 depicts the overall architecture of our SDP-LSTM network.

First, a sentence is parsed to a dependency tree path (SDP) is extracted as the input of our net-work. Along the SDP, four different types of information X  X eferred to as channels  X  X re used, including the words, POS tags, grammatical rela-tions, and WordNet hypernyms. (See Figure 2a.) In each channel, discrete inputs, e.g., words, are mapped to real-valued vectors, called embeddings , which capture the underlying meanings of the in-puts.

Two recurrent neural networks (Figure 2b) pick up information along the left and right sub-paths of the SDP, respecitvely. (The path is separated by the common ancestor node of two entities.) Long short term memory (LSTM) units are used in the recurrent networks for effective information prop-agation. A max pooling layer thereafter gathers information from LSTM nodes in each path.

The pooling layers from different channels are concatenated, and then connected to a hidden layer. Finally, we have a softmax output layer for classification. (See again Figure 2a.) 3.2 The Shortest Dependency Path The dependency parse tree is naturally suitable for relation classification because it focuses on the ac-tion and agents in a sentence (Socher et al., 2014). Moreover, the shortest path between entities, as discussed in Section 1, condenses most illuminat-ing information for entities X  relation.

We also observe that the sub-paths, separated by the common ancestor node of two entities, provide strong hints for the relation X  X  directionality. Take Figure 1 as an example. Two entities water and region have their common ancestor node, poured , which separates the SDP into two parts: and The first sub-path captures information of e 1 , whereas the second sub-path is mainly about e . By examining the two sub-paths sepa-rately, we know e 1 and e 2 are of relation Entity-Destination ( e 1 ,e 2 ) , rather than Entity-Destination ( e 2 ,e 1 ) .

Following the above intuition, we design two recurrent neural networks, which propagate bottom-up from the entities to their common an-cestor. In this way, our model is direction-sensitive. 3.3 Channels We make use of four types of information along the SDP for relation classification. We call them channels as these information sources do not inter-act during recurrent propagation. Detailed channel descriptions are as follows.  X  Word representations . Each word in a given  X  Part-of-speech tags . Since word embed- X  Grammatical relations . The dependency  X  WordNet hypernyms . As illustrated in Sec-
As we can see, POS tags, grammatical rela-tions, and WordNet hypernyms are also discrete (like words per se ). However, no prevailing em-bedding learning method exists for POS tags, say. Hence, we randomly initialize their embeddings, and tune them in a supervised fashion during train-ing. We notice that these information sources con-tain much fewer symbols, 15, 19, and 41, than the vocabulary size (greater than 25,000). Hence, we believe our strategy of random initialization is fea-sible, because they can be adequately tuned during supervised training. 3.4 Recurrent Neural Network with Long The recurrent neural network is suitable for mod-eling sequential data by nature, as it keeps a hid-Figure 3: A long short term memory unit. h : hid-den unit. c : memory cell. i : input gate. f : for-get gate. o : output gate. g : candidate cell.  X  : element-wise multiplication.  X  : activation func-tion. den state vector h , which changes with input data at each step accordingly. We use the recurrent net-work to gather information along each sub-path in the SDP (Figure 2b).

The hidden state h t , for the t -th word in the sub-path, is a function of its previous state h t  X  1 and the current word x t . Traditional recurrent net-works have a basic interaction, that is, the input is linearly transformed by a weight matrix and non-linearly squashed by an activation function. For-mally, we have where W in and W rec are weight matrices for the input and recurrent connections, respectively. b h is a bias term for the hidden state vector, and f h a non-linear activation function (e.g., tanh ).
One problem of the above model is known as gradient vanishing or exploding . The train-ing of neural networks requires gradient back-propagation. If the propagation sequence (path) is too long, the gradient may probably either grow, or decay, exponentially, depending on the magnitude of W rec . This leads to the difficulty of training.
Long short term memory (LSTM) units are pro-posed in Hochreiter (1998) to overcome this prob-lem. The main idea is to introduce an adaptive gat-ing mechanism, which decides the degree to which LSTM units keep the previous state and memo-rize the extracted features of the current data in-put. Many LSTM variants have been proposed in the literature. We adopt in our method a variant introduced by Zaremba and Sutskever (2014), also used in Zhu et al. (2015).

Concretely, the LSTM-based recurrent neural network comprises four components: an input gate i , a forget gate f t , an output gate o t , and a mem-ory cell c t (depicted in Figure 3 and formalized through Equations 1 X 6 as bellow).

The three adaptive gates i t , f t , and o t depend on the previous state h t  X  1 and the current input x t (Equations 1 X 3). An extracted feature vector g t is also computed, by Equation 4, serving as the candidate memory cell.
The current memory cell c t is a combination of the previous cell content c t  X  1 and the candidate content g t , weighted by the input gate i t and forget gate f t , respectively. (See Equation 5 below.)
The output of LSTM units is the the recur-rent network X  X  hidden state, which is computed by Equation 6 as follows.
In the above equations,  X  denotes a sigmoid function;  X  denotes element-wise multiplication. 3.5 Dropout Strategies A good regularization approach is needed to al-leviate overfitting. Dropout, proposed recently by Hinton et al. (2012), has been very successful on feed-forward networks. By randomly omitting feature detectors from the network during train-ing, it can obtain less interdependent network units and achieve better performance. However, the conventional dropout does not work well with re-current neural networks with LSTM units, since dropout may hurt the valuable memorization abil-ity of memory units.

As there is no consensus on how to drop out LSTM units in the literature, we try several dropout strategies for our SDP-LSTM network:  X  Dropout embeddings;  X  Dropout inner cells in memory units, includ- X  Dropout the penultimate layer.
 As we shall see in Section 4.2, dropping out LSTM units turns out to be inimical to our model, whereas the other two strategies boost in perfor-mance.

The following equations formalize the dropout operations on the embedding layers, where D de-notes the dropout operator. Each dimension in the embedding vector, x t , is set to zero with a prede-fined dropout rate. i t =  X  ( W i  X  D ( x t ) + U i  X  h t  X  1 + b i ) (7) f t =  X  ( W f  X  D ( x t ) + U f  X  h t  X  1 + b f ) (8) o t =  X  ( W o  X  D ( x t ) + U o  X  h t  X  1 + b o ) (9) g t = tanh W g  X  D ( x t ) + U g  X  h t  X  1 + b g (10) 3.6 Training Objective The SDP-LSTM described above propagates in-formation along a sub-path from an entity to the common ancestor node (of the two entities). A max pooling layer packs, for each sub-path, the recurrent network X  X  states, h  X  X , to a fixed vector by taking the maximum value in each dimension.
Such architecture applies to all channels, namely, words, POS tags, grammatical relations, and WordNet hypernyms. The pooling vectors in these channels are concatenated, and fed to a fully connected hidden layer. Finally, we add a softmax output layer for classification. The training objec-tive is the penalized cross-entropy error, given by J =  X  where t  X  R n c is the one-hot represented ground truth and y  X  R n c is the estimated probability for each class by softmax . ( n c is the number of target classes.) k X k F denotes the Frobenius norm of a matrix;  X  and  X  are the numbers of weight matri-ces (for W  X  X  and U  X  X , respectively).  X  is a hyper-parameter that specifies the magnitude of penalty on weights. Note that we do not add ` 2 penalty to biase parameters.

We pretrained word embeddings by word2vec (Mikolov et al., 2013a) on the English Wikipedia corpus; other parameters are initialized randomly. We apply stochastic gradient descent (with mini-batch 10) for optimization; gradients are computed by standard back-propagation. Training details are further introduced in Section 4.2. In this section, we present our experiments in de-tail. Our implementation is built upon Mou et al. (2015). Section 4.1 introduces the dataset; Section 4.2 describes hyperparameter settings. In Section 4.3, we compare SDP-LSTM X  X  performance with other methods in the literature. We also analyze the effect of different channels in Section 4.4. 4.1 Dataset The SemEval-2010 Task 8 dataset is a widely used benchmark for relation classification (Hendrickx et al., 2009). The dataset contains 8,000 sentences for training, and 2,717 for testing. We split 1/10 samples out of the training set for validation.
The target contains 19 labels: 9 directed rela-tions, and an undirected Other class. The di-rected relations are list as below.  X  Cause-Effect  X  Component-Whole  X  Content-Container  X  Entity-Destination  X  Entity-Origin  X  Message-Topic  X  Member-Collection  X  Instrument-Agency  X  Product-Producer
In the following are illustrated two sample sen-tences with directed relations. The target labels are Entity-Destination ( e 1 ,e 2 ), and Cause-Effect ( e 1 ,e 2 ), respec-tively.

The dataset also contains an undirected Other class. Hence, there are 19 target labels in total. The undirected Other class takes in entities that do not fit into the above categories, illustrated by the following example.

We use the official macro-averaged F 1 -score to evaluate model performance. This official mea-surement excludes the Other relation. Nonethe-less, we have no special treatment of Other class in our experiments, which is typical in other stud-ies. dropped out by 0.5. 4.2 Hyperparameters and Training Details This subsection presents hyperparameter tuning for our model. We set word-embeddings to be 200-dimensional; POS, WordNet hyponymy, and grammatical relation embeddings are 50-dimensional. Each channel of the LSTM network contains the same number of units as its source embeddings (either 200 or 50). The penultimate hidden layer is 100-dimensional. As it is not fea-sible to perform full grid search for all hyperpa-rameters, the above values are chosen empirically.
We add ` 2 penalty for weights with coefficient
We thereafter validate the proposed dropout strategies in Section 3.5. Since network units in different channels do not interact with each other during information propagation, we herein take one channel of LSTM networks to assess the ef-ficacy. Taking the word channel as an example, we first drop out word embeddings. Then with a fixed dropout rate of word embeddings, we test the effect of dropping out LSTM inner cells and the penultimate units, respectively.

We find that, dropout of LSTM units hurts the model, even if the dropout rate is small, 0.1, say (Figure 4b). Dropout of embeddings im-proves model performance by 2.16% (Figure 4a); dropout of the penultimate layer further improves by 0.16% (Figure 4c). This analysis also provides, for other studies, some clues for dropout in LSTM networks. 4.3 Results Table 4 compares our SDT-LSTM with other state-of-the-art methods. The first entry in the ta-ble presents the highest performance achieved by traditional feature engineering. Hendrickx et al. (2009) leverage a variety of handcrafted features, and use SVM for classification; they achieve an F -score of 82.2%.
 Neural networks are first used in this task in Socher et al. (2012). They build a recursive neural network (RNN) along a constituency tree for re-lation classification. They extend the basic RNN with matrix-vector interaction and achieve an F 1 -score of 82.4%.

Zeng et al. (2014) treat a sentence as sequen-tial data and exploit the convolutional neural net-work (CNN); they also integrate word position information into their model. dos Santos et al. (2015) design a model called CR-CNN; they pro-pose a ranking-based cost function and elaborately diminish the impact of the Other class, which is not counted in the official F 1 -measure. In this way, they achieve the state-of-the-art result with the F 1 -score of 84.1%. Without such special treatment, their F 1 -score is 82.7%.

Yu et al. (2014) propose a Feature-rich Com-positional Embedding Model (FCM) for relation classification, which combines unlexicalized lin-guistic contexts and word embeddings. They achieve an F 1 -score of 83.0%.

Our proposed SDT-LSTM model yields an F 1 -score of 83.7%. It outperforms existing compet-ing approaches, in a fair condition of softmax with cross-entropy error.

It is worth to note that we have also conducted two controlled experiments: (1) Traditional RNN without LSTM units, achieving an F 1 -score of 82.8%; (2) LSTM network over the entire depen-dency path (instead of two sub-paths), achieving an F 1 -score of 82.2%. These results demonstrate the Other class. the effectiveness of LSTM and directionality in re-lation classification. 4.4 Effect of Different Channels This subsection analyzes how different channels affect our model. We first used word embeddings only as a baseline; then we added POS tags, gram-matical relations, and WordNet hypernyms, re-spectively; we also combined all these channels into our models. Note that we did not try the latter three channels alone, because each single of them (e.g., POS) does not carry much information.
We see from Table 2 that word embeddings alone in SDP-LSTM yield a remarkable perfor-mance of 82.35%, compared with CNNs 69.7%, RNNs 74.9 X 79.1%, and FCM 80.6%.
 Adding either grammatical relations or Word-Net hypernyms outperforms other existing meth-ods (data cleaning not considered here). POS tag-ging is comparatively less informative, but still boosts the F 1 -score by 0.63%.

We notice that, the boosts are not simply added when channels are combined. This suggests that these information sources are complementary to each other in some linguistic aspects. Nonethe-less, incorporating all four channels further pushes the F 1 -score to 83.70%.
 Channels F 1
Word embeddings 82.35 + POS embeddings (only) 82.98 + GR embeddings (only) 83.21 + WordNet embeddings (only) 83.03 + POS + GR + WordNet embeddings 83.70 In this paper, we propose a novel neural network model, named SDP-LSTM, for relation classifi-cation. It learns features for relation classifica-tion iteratively along the shortest dependency path. Several types of information (word themselves, POS tags, grammatical relations and WordNet hy-pernyms) along the path are used. Meanwhile, we leverage LSTM units for long-range infor-mation propagation and integration. We demon-strate the effectiveness of SDP-LSTM by evalu-ating the model on SemEval-2010 relation clas-sification task, outperforming existing state-of-art methods (in a fair condition without data clean-ing). Our result sheds some light in the relation classification task as follows.  X  The shortest dependency path can be a valu- X  Classifying relation is a challenging task due  X  Treating the shortest dependency path as two  X  LSTM units are effective in feature detec-This research is supported by the National Basic Research Program of China (the 973 Program) un-der Grant No. 2015CB352201 and the National Natural Science Foundation of China under Grant Nos. 61232015 and 91318301.

