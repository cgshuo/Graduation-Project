 In this de monstration, we will present a semantic environment called the K -Box. The K -Box supports the lightweight integration of knowledge tools, with a focus on semantic tools, but with the flexibility to integrate natural language and conventional tools. We discu ss the implementation of the framework, and two existing applications, including details of a new application for developers of semantic workflows. The demonstration will be of interest to developers and researchers of ontology-based knowledge management s ystems, and semantic desktops, and to analysts working with cross -media information.
 H.5.2 [ Information Systems ] User Interfaces Semantic knowledge management, Knowledge tool integration.
 Preview : http://bit.ly/mHAgko Metadata and semantic methods have potential to enhance a wide range of knowledge work tasks, including data analysis, information retrieval, and Personal Information Management (PIM). The potential of semantic desktops has been explored through several initiatives e.g., Nepomuk [1] and Haystack [2]. However, we have found that these systems do not address a practical problem: in many knowledge work tasks, legacy (often non -semantic) tools exist which have been implemented in a variety of ways. The knowledge worker will typically want to continue to use their trusted legacy tools alongside semantic tools. The K -Box was therefore designed as a work environment in which diverse tools could be brought together in a t ask -focused interface, with in -built semantic support, but without restricting the toolset or requiring costly reprogramming of pre -existing tools. As we will show in this demonstration, it provides a basis to support both analytical and knowledge generati on tasks. The K-Box provides a knowledge management (KM) environment that supports the sharing of knowledge objects and artefacts (e.g., documents, ontologies and workflows) between different specialist tools. These are s hared through a KM framework, referred to hereafter as the Kernel. The K -Box allows the user to access multiple KM tools from a single point, independent of the tools X  underlying design, architecture and internal mechanisms. In addition to in-built compone nts , such as the clipboard and ontology-based tagger (described below),  X  X xternal X  tools may be integrated into the K-Box , as plug -ins. The K-Box design removes the need for the user (whether this is a developer or an end user) to understand the internal workings of different tools. Essentially, the K-Box considers each independent tool integrated into the framework as a black box, requiring only that each tool provides, where necessary, wrappers for formatting output according to a common, agreed, standar d language (ideally based on a standard or domain ontology), and subscribes to the Kernel to post and listen to notifications for, among others, new data generated within or imported into the system.
 Figure 1. K -Box framework, illustrating inter -communic ation between tools and with a semantic repository , via the Kernel. The Kernel is an intermediary tool through which tools communicate and exchange data, using an event -based system to notify all tools within the K -Box whenever a task carried out by any one tool results in new output, or creates metadata that enriches existing data. For those tools that do not provide internal mechanisms for encoding output according to the specified encoding semantic representation (e.g., Resource Description Fra mework  X  RDF), the Kernel exposes methods which may be used to convert selected documents and encode tool output as required. Further, the Kernel interfaces with the semantic repositories into which the knowledge generated as a result of interaction with t he K -Box is stored. Within the K -Box, semantic data is also browsed and retrieved via the Kernel.
 The Semantic Clipboard is an always visible component built into the K -Box that provides visual pointers, encoded using thumbnails or icons , to  X  X ookmarked X  data and knowledge items  X  see bottom, Figures 2 and 3. The clipboard interfaces with the semantic repository (via the Kernel); each bookmark points to the URI used to retrieve the corresponding item from the semantic repository to which the K -Box is connected. A user may simply choose to view a bookmarked document, or use it as input to a new task, e.g., to trigger a search for similar information based on the metadata attached to the bookmarked item and/or its content. The in -built ontology browser is used for ontology -based data and knowledge tagging; a tag is attached to a knowledge artefact, e.g., a document, by selecting a concept of interest from the browser and dragging it onto its bookmark in the clipboard (s ee Figure 2). The tag may be refined by entering a keyword. The Kernel writes the metadata generated as a result to the semantic repository, where it is subsequently available to any tool (e.g., search tools). Information in different med ia often require s different methods for search, e.g., commonly available text -based search cannot handle information retrieval from image and numerical data. The K-Box provides support for integrating different types of search tools by using metadata captu red during user interaction to enrich user queries. This allows a query input into a specific tool to be propagated (transparently) to other search tools integrated into the K-Box , or a selected document or data item to be used to initiali ze a similarity s earch across all tools. For the na X ve end user in particular, this provides additional advantages ; by transparently reformulating queries for each search tool , the BOX removes this burden from the user. The K -Box makes use of RDF to e ncode data and capture metadata describing the data and its knowledge content, to support data exchange between different tools. Using the semantic data format provides the additional advantage of easing the use of powerful Semantic Web technology. However , a drawback is that RDF is not easily understood by people; the K -Box supports the use of presentation templates (e.g., stylesheets), to format the knowledge that results from interaction with the framework, to generate more human -readable output (e.g., a s PDF or HMTL documents with links to source data). This may be used to create snapshots of on -going analytical activity or report completed tasks at varying levels of detail. The K -Box has, so far, been successfully deployed to support three KM tasks with very different end user communities. These have proved its flexibility: a wide range of external tools have been integrated, including not only semantic web tools but also natural language tools, such as a Text Summarizer and Information Ext raction tools. Two of these applications are described here. The issue investigation scenario involves teams with varied expertise, working independently and collaboratively to identify the causes of mechanical issues. The K M framework for this scenario provided support for search, annotation and analysis over large scale repositories of text, image and numerical data. To support the realities of the task in engineering companies, this had to be conducted asynchronously by th e issue investigation team. Therefore users had to be able to clearly and quickly see what other team members had discovered in previous sessions. One view of the Issue Investigation Environment is illustrated in Figure 2 , and the application is described in more detail in [3]. The external tools this application contained include: a semantic search tool (K -Search [4]), a region -based, image similarity tool a document summarization tool (the CognitSummarizer ontology visualization tools including a pur pose built root cause analysis tool which allows users to attach items to candidate causes as evidence for or against [3; 5], and a report generator which could produce a human readable summary of progress.
 A similar approach has been used to evaluate supp ort for post -crisis management as part of the WeKnowIt project 3 support is provided for asynchronous, albeit collaborative, review of collective intelligence gathered during a crisis, in order to apply any lessons learnt to future emergency s ituations. The second application, and the main focus for this demonstrator, is a knowledge generation and editing environment for developers producing structured knowledge to support task executi on in distributed, ubiquitous environments such as kitchens, cars and factories . The SmartProducts project 4 is investigating the use of these kinds of structured knowledge to provide interoperability in open, sensor -rich environments (open meaning the configuration of devices is not known in advance). The purpose is to allow these devices to take a more pro active role in assisting the user, rather than simply being passive tools. A key knowledge artefact in these  X  X mart X  applications will be workflows annotated using ontologies of product ty pes, domain entities, activities etc. These workflows will guide user interaction with the smart environments, and instruct products in directly executing tasks. A number of developer tools have been created to ease the production of semantic workflows fro m instructional texts originally intended solely for human consumption. Examples include recipes, car manuals and manufacturing work orders . Tools that would be used together to process these texts include a natural language processing (NLP )-based Workflow Extrac tor, and a semantic Workflow Editor. The Workflow Extrac tor extract s an initial draft workflow, which the developer may annotate and edit using the editor. One view of this Developer Environment is presented in Figure 3. This shows the Workflow tab open.
 To further support our case that the K-Box environment is flexible in respect of the kinds of external tools it can integrate, we note that the Workflow Extractor is built from publically available NLP tools and in its native version runs from a co mmand line. The only mod ification required for incorporation in the K-Box was the addition of a minimal one pane GUI (graphical user interface) and a wrapper. The Workflow Editor , on the other hand , is a modification of the open source JaWE workflow editor [6 ]. This third party tool was also incorporated in the environment with relative ease. In the next two sections we describe these t ools in more detail.
 The Workflow Extractor is capable of extracting domain information (domain -specific actions and domain -specific entities, both actors and actees) and procedural information (transitions and conditions). Following a s imilar approach to [7], the method is based on the hypothesis that a task action is usually expressed as a verb phrase containing domain information, and it may occur with other contextual information such as conditions. The core of the extraction system i s a syntactic parser, which parses a sentence into its constituents and their relations.
 Using the parser we are able to extract verb phrases, constituents of verb phrases, and their contextual constituents. Next, each of the verb phrases with their contex tual constituents are split into candidate actions for further grammatical analysis, which applies a set of rules to the parsing result to determine whether the verb phrase is a domain specific action, and if so, to extract domain and procedural informatio n related to that action. The advantage of using a syntactic parser instead of WordNet is that the parser can take account of sentential contexts in the identification of verbs and nouns. The Workflow Editor is a tool that allows developers to create workflow process definitions, edit workflows generated by the Extractor and to annotate them using OWL (Web Ontology Language) individuals. The editor is based on JaWE [6], which provides functionality to allow users to create workflow process definitions that conform to version 1.0 of the XPDL (Extensible Process Definition Language) specification [8]. Due to the use of an open standard XML -based format for serialization of workflows, these process definitions can be executed in a variety of op en source and proprietary workflow engines. The editor outputs workflows in a variant of XPDL devised for use on the SmartProducts project [9]. This variant provides support for three predefined annotation types : METADATA, PRODUCT CLASS and ACTIVITY.
 Editi ng of process definitions is performed using the standard graphical representation of elements provided by JaWE. In addition to this, a number of ontology -related features were added. The user can load one or more OWL ontologies, which can be viewed in a h ierarchical tree form using an ontology browser panel set alongside the existing BPMN (Business Process Model and Notation) graph and XPDL source views. Concepts from the loaded ontologies may then be used as annotations that can be applied to appropriate XPDL elements.
 In order to make the process of annotation easier, XPDL activity nodes that have been annotated are highlighted in a different colour. The annotation process itself involves the selection of appropriate attribute names from a drop -down menu, and the assignment of OWL individuals to those attributes. The main benefit of the K-Box framework is it s flexible approach to integrating tools independent of their underlying design, architecture and internal mechanisms. This has all owed it to be used to build task -focused environments for quite different kinds of knowledge work, incorporating semantic, natural language and mainstream tools. We propose to test the framework further by developing an environment to support qualitative and quantitative work in the social science s, specifically the analysis of  X  X essages X  conveyed by the public media. A driver of this research direction is our ambition to incorporate novel analytical tools in the environment, building on the visualization and decision support tools already tested in the Issue Investigation Environment. [1] T. Groza, S. Han dschuh, K . Moeller, G. Grimnes, L. [2] K. Bakshi and D. Karger , End -User Application [3] A.-S. Dadzie, V. Uren, and F. Ciravegna, Ontology -Based [4] R. Bhagdev, A. Chakravarthy, S. Chapman, F. Ciravegna &amp; [5] A.-S. Dadzie, V . Lanfranchi, D. Petrelli. Seeing is [6] K. Trichkov and E. Trichkova. Modeling a nd execution of [7] M. Brasser and K. Linden. Automatically eliciting [8] Workflow Management Coalition. Workflow standard [9] P. Webster, V. Uren, and M. St  X nder, Shaken not stirred: 
