 Combinatory categorial grammar (CCG) is a vari-ant of categorial grammar which has attracted in-terest for both theoretical and practical reasons. On the theoretical side, we know that it is mildly context-sensitive (Vijay-Shanker and Weir, 1994) and that it can elegantly analyze a wide range of linguistic phenomena (Steedman, 2000). On the practical side, we have corpora with CCG deriva-tions for each sentence (Hockenmaier and Steed-man, 2007), a wide-coverage parser trained on that corpus (Clark and Curran, 2007) and a system for converting CCG derivations into semantic repre-sentations (Bos et al., 2004).

However, despite being treated as a single uni-fied grammar formalism, each of these authors use variations of CCG which differ primarily on which combinators are included in the grammar and the restrictions that are put on them. These differences are important because they affect whether the mild context-sensitivity proof of Vijay-Shanker and Weir (1994) applies. We will provide a gen-eralized framework for CCG within which the full variation of CCG seen in the literature can be de-fined. Then, we prove that for a wide range of CCGs there is a context-free grammar (CFG) that has exactly the same derivations. Included in this class of strongly context-free CCGs are a grammar including all the derivations in CCGbank and the grammar used in the Clark and Curran parser.
Due to this insight, we investigate the potential of using tools from the probabilistic CFG com-munity to improve CCG parsing results. The Petrov parser (Petrov and Klein, 2007) uses la-tent variables to refine the grammar extracted from a corpus to improve accuracy, originally used to improve parsing results on the Penn treebank (PTB). We train the Petrov parser on CCGbank and achieve the best results to date on sentences from section 23 in terms of supertagging accuracy, PARSEVAL measures and dependency accuracy.

These results should not be interpreted as proof that grammars extracted from the Penn treebank and from CCGbank are equivalent. Bos X  X  system for building semantic representations from CCG derivations is only possible due to the categorial nature of CCG. Furthermore, the long distance de-pendencies involved in extraction and coordina-tion phenomena have a more natural representa-tion in CCG. A categorial grammar is a grammatical system consisting of a finite set of words, a set of cate-gories, a finite set of sentential categories, a finite lexicon mapping words to categories and a rule system dictating how the categories can be com-bined. The set of categories are constructed from a finite set of atoms A (e.g. A = { S, N P, N, P P } ) and a finite set of binary connectives B (e.g. B = { /, \} ) to build an infinite set of categories C ( A, B ) (e.g. C ( A, B ) = { S, S \ N P, ( S \ N P ) / N P, . . . } ). For a category C , its size | C | is the number of atom occurrences it contains. When not specified, connectives are left associative.
According to the literature, combinatory cate-gorial grammar has been defined to have a vari-ety of rule systems. These rule systems vary from a small rule set, motivated theoretically (Vijay-Shanker and Weir, 1994), to a larger rule set, motivated linguistically, (Steedman, 2000) to a very large rule set, motivated by practical cover-age (Hockenmaier and Steedman, 2007; Clark and Curran, 2007). We provide a definition general enough to incorporate these four main variants of CCG, as well as others.

A combinatory categorial grammar (CCG) is a categorial grammar whose rule system consists of rule schemata where the left side is a sequence of categories and the right side is a single category where the categories may include variables over both categories and connectives. In addition, rule schemata may specify a sequence of categories and connectives using the . . . convention 1 . When . . . appears in a rule, it matches any sequence of categories and connectives according to the con-nectives adjacent to the . . . . For example, the rule schema for forward composition is: and the rule schema for generalized forward crossed composition is: where X , Y and Z over categories and | over connectives. Figure 1 shows a CCG deriva-tion from CCGbank.

A well-known categorial grammar which is not a CCG is Lambek categorial grammar (Lambek, 1958) whose introduction rules cannot be charac-terized as combinatory rules (Zielonka, 1981). 2.1 Classes for defining CCG We define a number of schema classes general enough that the important variants of CCG can be defined by selecting some subset of the classes. In addition to the schema classes, we also define two restriction classes which define ways in which the rule schemata from the schema classes can be re-stricted. We define the following schema classes: (1) Application (2) Composition (3) Crossed Composition (4) Generalized Composition (5) Generalized Crossed Composition (6) Reducing Generalized Crossed Composition (7) Substitution (9) Type-Raising (10) Finitely Restricted Type-Raising (11) Finite Unrestricted Variable-Free Rules N P S [ dcl ] \ N P N P
We define the following restriction classes: (A) Rule Restriction to a Finite Set
Vijay-Shanker and Weir (1994) define CCG to be schema class (4) with restriction class (B). Steedman (2000) defines CCG to be schema classes (1-5), (6), (10) with restriction class (B). 2.2 Strongly Context-Free CCGs Proposition 1. The set of atoms in any derivation of any CCG consisting of a subset of the schema classes (1-8) and (10-11) is finite.
 Proof. A finite lexicon can introduce only a finite number of atoms in lexical categories.

Any rule corresponding to a schema in the schema classes (1-8) has only those atoms on the right that occur somewhere on the left. Rules in classes (10-11) can each introduce a finite number of atoms, but there can be only a finite number of such rules, limiting the new atoms to a finite num-ber.
 Definition 1. The subcategories for a category c are c atomic. Its second subcategories are the subcate-gories of its subcategories.
 Proposition 2. Any CCG consisting of a subset of the rule schemata (1-3), (6-8) and (10-11) has derivations consisting of only a finite number of categories.
 Proof. We first prove the proposition excluding schema class (8). We will use structural induction on the derivations to prove that there is a bound on the size of the subcategories of any category in the derivation. The base case is the assignment of a lexical category to a word and the inductive step is the use of a rule from schema classes (1-4), (6-7) and (10-11).

Given that the lexicon is finite, there is a bound k on the size of the subcategories of lexical cate-gories. Furthermore, there is a bound l on the size of the subcategories of categories on the right side of any rule in (10) and (11). Let m = max ( k, l ) .
For rules from schema class (1), the category on the right is a subcategory of the first category on the left, so the subcategories on the right are bound by m . For rules from schema classes (2-3), the category on the right has subcategories X and Z each of which is bound in size by m since they occur as subcategories of categories on the left.
For rules from schema class (6), since reduc-ing generalized composition is a special case of re-ducing generalized crossing composition, we need only consider the latter. The category on the right has subcategories X | Z a subcategory of the second category on the left. Then, the size of Y | bound by m and since | X |  X  | Y | , the size of X | 1 Z 1 | 2 . . . | n  X  1 | Z n  X  1 must also be bound by
For rules from schema class (7), the category on the right has subcategories X and Z . The size of Z is bound by m because it is a subcategory of a category on the left. The size of X is bound by m because it is a second subcategory of a category on the left.

Finally, the use of rules in schema classes (10-11) have categories on the right that are bounded by l , which is, in turn, bounded by m . Then, by proposition 1, there must only be a finite number of categories in any derivation in a CCG consisting of a subset of rule schemata (1-3), (6-7) and (10-11).

The proof including schema class (8) is essen-tially identical except that k must be defined in terms of the size of the second subcategories. Definition 2. A grammar is strongly context-free if there exists a CFG such that the derivations of the two grammars are identical.
 Proposition 3. Any CCG consisting of a subset of the schema classes (1-3), (6-8) and (10-11) is strongly context-free.
 Proof. Since the CCG generates derivations whose categories are finite in number let C be that set of categories. Let S ( C, X ) be the subset of C matching category X (which may have variables). Then, for each rule schema C and (6-8), we construct a context-free rule C  X  Similarly, for each rule schema C we construct a context-free rule C  X  results in a finite number of such rules. Finally, for each rule schema ~ X  X  Z in (11) we construct a context-free rule Z  X  ~ X . Then, for each entry in the lexicon w  X  C , we construct a context-free rule C  X  w .

The constructed CFG has precisely the same rules as the CCG restricted to the categories in C except that the left and right sides have been re-versed. Thus, by proposition 2, the CFG has ex-actly the same derivations as the CCG.
 Proposition 4. Any CCG consisting of a subset of the schema classes (1-3), (6-8) and (10-11) along with restriction class (B) is strongly context-free. Proof. If a CCG is allowed to restrict the use of its rules to certain categories as in schema class (B), then when we construct the context-free rules by enumerating only those categories in the set C allowed by the restriction.
 Proposition 5. Any CCG that includes restriction class (A) is strongly context-free.
 Proof. We construct a context-free grammar with exactly those rules in the finite set of instantiations of the CCG rule schemata along with context-free rules corresponding to the lexicon. This CFG generates exactly the same derivations as the CCG.

We have thus proved that of a wide range of the rule schemata used to define CCGs are context-free. 2.3 Combinatory Categorial Grammars in CCGbank (Hockenmaier and Steedman, 2007) is a corpus of CCG derivations that was semi-automatically converted from the Wall Street Jour-nal section of the Penn treebank. Figure 2 shows a categorization of the rules used in CCGbank ac-cording to the schema classes defined in the pre-ceding section where a rule is placed into the least general class to which it belongs. In addition to having no generalized composition other than the reducing variant, it should also be noted that in all generalized composition rules, X = Y implying that the reducing class of generalized composition is a very natural schema class for CCGbank.
If we assume that type-raising is restricted to CCG consisting of schema classes (1-3), (6-7) and (10-11) can generate all the derivations in CCG-bank. By proposition 3, such a CCG is strongly context-free. One could also observe that since CCGbank is finite, its grammar is not only a context-free grammar but can produce only a finite number of derivations. However, our statement is much stronger because this CCG can generate all of the derivations in CCGbank given only the lex-icon, the finite set of unrestricted rules and the fi-nite number of type-raising rules. Schema Class Rules Instances Application 519 902176 Composition 102 7189 Crossed Composition 64 14114 Reducing Generalized 50 612 Crossed Composition Generalized Composition 0 0 Generalized Crossed 0 0 Composition Substitution 3 4 Type-Raising 27 3996 Unrestricted Rules 642 335011 Total 1407 1263102 Figure 2: The rules of CCGbank by schema class. The Clark and Curran CCG Parser (Clark and Curran, 2007) is a CCG parser which uses CCG-bank as a training corpus. Despite the fact that there is a strongly context-free CCG which gener-ates all of the derivations in CCGbank, it is still possible that the grammar learned by the Clark and Curran parser is not a context-free grammar. However, in addition to rule schemata (1-6) and (10-11) they also include restriction class (A) by restricting rules to only those found in the train-Curran parser is a context-free parser. The context-freeness of a number of CCGs should not be considered evidence that there is no ad-vantage to CCG as a grammar formalism. Unlike the context-free grammars extracted from the Penn treebank, these allow for the categorial semantics that accompanies any categorial parse and for a more elegant analysis of linguistic structures such as extraction and coordination. However, because we now know that the CCG defined by CCGbank is strongly context-free, we can use tools from the CFG parsing community to improve CCG parsing.
To illustrate this point, we train the Petrov parser (Petrov and Klein, 2007) on CCGbank. The Petrov parser uses latent variables to refine a coarse-grained grammar extracted from a train-ing corpus to a grammar which makes much more fine-grained syntactic distinctions. For example, in Petrov X  X  experiments on the Penn treebank, the syntactic category N P was refined to the more fine-grained N P 1 and N P 2 roughly correspond-ing to N P s in subject and object positions. Rather than requiring such distinctions to be made in the corpus, the Petrov parser hypothesizes these splits automatically.

The Petrov parser operates by performing a fixed number of iterations of splitting, merging and smoothing. The splitting process is done by performing Expectation-Maximization to de-termine a likely potential split for each syntactic category. Then, during the merging process some of the splits are undone to reduce grammar size and avoid overfitting according to the likelihood of the split against the training data.

The Petrov parser was chosen for our experi-ments because it refines the grammar in a mathe-matically principled way without altering the na-ture of the derivations that are output. This is important because the input to the semantic back-end and the system that converts CCG derivations to dependencies requires CCG derivations as they appear in CCGbank. 3.1 Experiments Our experiments use CCGbank as the corpus and we use sections 02-21 for training (39603 sen-tences), 00 for development (1913 sentences) and 23 for testing (2407 sentences).
 CCGbank, in addition to the basic atoms S , N , N P and P P , also differentiates both the S and N P atoms with features allowing more subtle dis-tinctions. For example, declarative sentences are S [ dcl ] , wh-questions are S [ wq ] and sentence frag-ments are S [ f rg ] (Hockenmaier and Steedman, 2007). These features allow finer control of the use of combinatory rules in the resulting grammars. However, this fine-grained control is exactly what the Petrov parser does automatically. Therefore, we trained the Petrov parser twice, once on the original version of CCGbank (denoted  X  X etrov X ) and once on a version of CCGbank without these features (denoted  X  X etrov no feats X ). Furthermore, we will evaluate the parsers obtained after 0 , 4 , 5 and 6 training iterations (denoted I-0, I-4, I-5 and I-6). When we evaluate on sets of sentences for which not all parsers return an analysis, we report the coverage (denoted  X  X over X ).

We use the evalb package for PARSEVAL evaluation and a modified version of Clark and C&amp;C Normal Form 92.92 93.38 Petrov no feats I-6 -93.74 Figure 3: Supertagging accuracy on the sentences in section 00 that receive derivations from the four parsers shown.
 Petrov no feats I-6 -93.62 Figure 4: Supertagging accuracy on the sentences in section 23 that receive derivations from the three parsers shown.
 Curran X  X  evaluate script for dependency eval-uation. To determine statistical significance, we obtain p-values from Bikel X  X  randomized parsing ging accuracy, F-score and dependency accuracy. 3.2 Supertag Evaluation Before evaluating the parse trees as a whole, we evaluate the categories assigned to words. In the supertagging literature, POS tagging and supertag-ging are distinguished  X  POS tags are the tradi-tional Penn treebank tags (e.g. NN, VBZ and DT) and supertags are CCG categories. However, be-cause the Petrov parser trained on CCGbank has no notion of Penn treebank POS tags, we can only evaluate the accuracy of the supertags.

The results are shown in figures 3 and 4 where the  X  X ccuracy X  column shows accuracy of the su-pertags against the CCGbank categories and the  X  X o feats X  column shows accuracy when features are ignored. Despite the lack of POS tags in the Petrov parser, we can see that it performs slightly better than the Clark and Curran parser. The dif-ference in accuracy is only statistically significant between Clark and Curran X  X  Normal Form model ignoring features and the Petrov parser trained on CCGbank without features (p-value = 0.013). 3.3 Constituent Evaluation In this section we evaluate the parsers using the traditional PARSEVAL measures which measure recall, precision and F-score on constituents in both labeled and unlabeled versions. In addition, we report a variant of the labeled PARSEVAL measures where we ignore the features on the cat-egories. For reasons of brevity, we report the PAR-SEVAL measures for all sentences in sections 00 and 23, rather than for sentences of length is less than 40 or less than 100. The results are essentially identical for those two sets of sentences.

Figure 5 gives the PARSEVAL measures on sec-tion 00 for Clark and Curran X  X  two best models and the Petrov parser trained on the original CCG-bank and the version without features after various numbers of training iterations. Figure 7 gives the accuracies on section 23.

In the case of Clark and Curran X  X  hybrid model, the poor accuracy relative to the Petrov parsers can be attributed to the fact that this model chooses derivations based on the associated dependencies at the expense of constituent accuracy (see section 3.4). In the case of Clark and Curran X  X  normal form model, the large difference between labeled and unlabeled accuracy is primarily due to the mis-labeling of a small number of features (specifi-cally, NP[nb] and NP[num]). The labeled accu-racies without features gives the results when fea-tures are disregarded.

Due to the similarity of the accuracies and the difference in the coverage between I-5 of the Petrov parser on CCGbank and I-6 of the Petrov parser on CCGbank without features, we reevalu-ate their results on only those sentences for which they both return derivations in figures 6 and 8. These results show that the features in CCGbank actually inhibit accuracy (to a statistically signifi-cant degree in the case of unlabeled accuracy on section 00) when used as training data for the Petrov parser.

Figure 9 gives a comparison between the Petrov parser trained on the Penn treebank and on CCG-bank. These numbers should not be directly com-pared, but the similarity of the unlabeled measures indicates that the difference between the structure 3.4 Dependency Evaluation The constituent-based PARSEVAL measures are simple to calculate from the output of the Petrov parser but the relationship of the PARSEVAL scores to the quality of a parse is not entirely clear. For this reason, the word to word dependencies of categorial grammar parsers are often evaluated. This evaluation is aided by the fact that in addition to the CCG derivation for each sentence, CCG-bank also includes a set of dependencies. Fur-thermore, extracting dependencies from a CCG derivation is well-established (Clark et al., 2002).
A CCG derivation can be converted into de-pendencies by, first, determining which arguments go with which functors as specified by the CCG derivation. This can be represented as in figure 10. Although this is not difficult, some care must be taken with respect to punctuation and the con-junction rules. Next, we reorient some of the edges according to information in the lexical cat-egories. A language for specifying these instruc-tions using variables and indices is given in Clark et al. (2002). This process is shown in figures 1, 10 and 11 with the directions of the dependencies reversed from Clark et al. (2002).

We used the CCG derivation to dependency converter generate included in the C&amp;C tools package to convert the output of the Petrov parser to dependencies. Other than a CCG derivation, their system requires only the lexicon of edge re-orientation instructions and methods for convert-ing the unrestricted rules of CCGbank into the argument-functor relations. Important for the pur-pose of comparison, this system does not depend on their parser.

An unlabeled dependency is correct if the or-dered pair of words is correct. A labeled depen-dency is correct if the ordered pair of words is cor-rect, the head word has the correct category and the position of the category that is the source of that edge is correct. Figure 12 shows accuracies from the Petrov parser trained on CCGbank along with accuracies for the Clark and Curran parser. We only show accuracies for the Petrov parser trained on the original version of CCGbank be-cause the dependency converter cannot currently generate dependencies for featureless derivations.
The relatively poor coverage of the Petrov parser is due to the failure of the dependency con-verter to output dependencies from valid CCG derivations. However, the coverage of the depen-dency converter is actually lower when run on the gold standard derivations indicating that this cov-erage problem is not indicative of inaccuracies in the Petrov parser. Due to the difference in cover-age, we again evaluate the top two parsers on only those sentences that they both generate dependen-cies for and report those results in figures 13 and 14. The Petrov parser has better results by a sta-tistically significant margin for both labeled and unlabeled recall and unlabeled F-score. 3.5 Time and Space Evaluation As a final evaluation, we compare the resources that are required to both train and parse with the Petrov parser on the Penn Treebank, the Petrov parser on the original version of CCGbank, the Petrov parser on CCGbank without features and the Clark and Curran parser using the two mod-els. All training and parsing was done on a 64-bit machine with 8 dual core 2.8 Ghz Opteron 8220 CPUs and 64GB of RAM. Our training times are much larger than those reported in Clark and Cur-ran (2007) because we report the cumulative time spent on all CPUs rather than the maximum time spent on a CPU. Figure 15 shows the results.
As can be seen, the Clark and Curran parser has similar training times, although signifi-cantly greater RAM requirements than the Petrov parsers. In contrast, the Clark and Curran parser is significantly faster than the Petrov parsers, which we hypothesize to be attributed to the degree to which Clark and Curran have optimized their code, their use of C++ as opposed to Java and their use of a supertagger to prune the lexicon. We have provided a number of theoretical results proving that CCGbank contains no non-context-free structure and that the Clark and Curran parser is actually a context-free parser. Based on these results, we trained the Petrov parser on CCGbank and achieved state of the art results in terms of supertagging accuracy, PARSEVAL measures and dependency accuracy.

This demonstrates the following. First, the abil-ity to extract semantic representations from CCG derivations is not dependent on the language class of a CCG. Second, using a dedicated supertagger, as opposed to simply using a general purpose tag-ger, is not necessary to accurately parse with CCG. We would like to thank Stephen Clark, James Cur-ran, Jackie C. K. Cheung and our three anonymous reviewers for their insightful comments.
