 It has long been a vision of science fiction writers and scientists to be able to universally communi-cate in all languages. In these visions, even previ-ously unknown languages can be learned automati-cally from analyzing foreign language input.
In this work, we attempt to learn statistical trans-lation models from only monolingual data in the source and target language. The reasoning behind this idea is that the elements of languages share sta-tistical similarities that can be automatically identi-fied and matched with other languages.

This work is a big step towards large-scale and large-vocabulary unsupervised training of statistical translation models. Previous approaches have faced constraints in vocabulary or data size. We show how to scale unsupervised training to real-life transla-tion tasks and how large-scale experiments can be done. Monolingual data is more readily available, if not abundant compared to true parallel or even just translated data. Learning from only monolin-gual data in real-life translation tasks could improve especially low resource language pairs where few or no parallel texts are available.

In addition to that, this approach offers the op-portunity to decipher new or unknown languages and derive translations based solely on the available monolingual data. While we do tackle the full unsu-pervised learning task for MT, we make some very basic assumptions about the languages we are deal-ing with: 1. We have large amounts of data available in 2. We can divide the given text in tokens and 3. The writing system is one-dimensional left-to-Previous approaches to unsupervised training for SMT prove feasible only for vocabulary sizes up to around 500 words (Ravi and Knight, 2011) and data sets of roughly 15,000 sentences containing only about 4 tokens per sentence on average. Real data as it occurs in texts such as web pages or news texts does not meet any of these characteristics.

In this work, we will develop, describe, and evaluate methods for large vocabulary unsupervised learning of machine translation models suitable for real-world tasks. The remainder of this paper is structured as follows: In Section 2, we will review the related work and describe how our approach ex-tends existing work. Section 3 describes the model and training criterion used in this work. The im-plementation and the training of this model is then described in Section 5 and experimentally evaluated in Section 6. Unsupervised training of statistical translations sys-tems without parallel data and related problems have been addressed before. In this section, we will re-view previous approaches and highlight similarities and differences to our work. Several steps have been made in this area, such as (Knight and Yamada, 1999), (Ravi and Knight, 2008), or (Snyder et al., 2010), to name just a few. The main difference of our work is, that it allows for much larger vocab-ulary sizes and more data to be used than previous work while at the same time not being dependent on seed lexica and/or any other knowledge of the lan-guages.
 Close to the methods described in this work, Ravi and Knight (2011) treat training and transla-tion without parallel data as a deciphering prob-lem. Their best performing approach uses an EM-Algorithm to train a generative word based trans-lation model. They perform experiments on a Spanish/English task with vocabulary sizes of about 500 words and achieve a performance of around 20 B LEU compared to 70 B LEU obtained by a sys-tem that was trained on parallel data. Our work uses the same training criterion and is based on the same generative story. However, we use a new training procedure whose critical parts have constant time and memory complexity with respect to the vocab-ulary size so that our methods can scale to much larger vocabulary sizes while also being faster.
In a different approach, Koehn and Knight (2002) induce a bilingual lexicon from only non-parallel data. To achieve this they use a seed lexicon which they systematically extend by using orthographic as well as distributional features such as context, and frequency. They perform their experiments on non-parallel German-English news texts, and test their mappings against a bilingual lexicon. We use a greedy method similar to (Koehn and Knight, 2002) for extending a given lexicon, and we implicitly also use the frequency as a feature. However, we perform fully unsupervised training and do not start with a seed lexicon or use linguistic features.

Similarly, Haghighi et al. (2008) induce a one-to-one translation lexicon only from non-parallel monolingual data. Also starting with a seed lexi-con, they use a generative model based on canoni-cal correlation analysis to systematically extend the lexicon using context as well as spelling features. They evaluate their method on a variety of tasks, ranging from inherently parallel data (E UROPARL ) to unrelated corpora ( 100 k sentences of the G IGA -WORD corpus). They report F-measure scores of the induced entries between 30 to 70 . As mentioned above, our work neither uses a seed lexicon nor or-thographic features. In this section, we describe the statistical training criterion and the translation model that is trained us-ing monolingual data. In addition to the mathemat-ical formulation of the model we describe approxi-mations used.

Throughout this work, we denote the source lan-guage words as f and target language words as e . The source vocabulary is V f and we write the size of this vocabulary as | V f | . The same notation holds for the target vocabulary with V e and | V e | .
As training criterion for the translation model X  X  parameters  X  , Ravi and Knight (2011) suggest We would like to obtain  X  from Equation 1 using the EM Algorithm (Dempster et al., 1977). This becomes increasingly difficult with more complex translation models. Therefore, we use a simplified translation model that still contains all basic phe-nomena of a generic translation process. We formu-late the translation process with the same generative story presented in (Ravi and Knight, 2011): 1. Stochastically generate the target sentence ac-2. Insert N ULL tokens between any two adjacent 3. For each target token e i (including N ULL ) 4. Locally reorder any two adjacent foreign words 5. Remove the remaining N ULL tokens.

In practice, however, it is not feasible to deal with the full parameter table P  X  ( f i | e i ) which models the lexicon. Instead we only allow translation models where for each source word f the number of words e with P ( f | e 0 ) 6 = 0 is below some fixed value. We will refer to this value as the maximum number of candidates of the translation model and denote it with N C . Note that for a given e this does not nec-essarily restrict the number of entries P ( f 0 | e ) 6 = 0 . Also note that with a fixed value of N C , time and memory complexity of the EM step is O (1) with re-spect to | V e | and | V f | .

In the following we divide the problem of maxi-mizing Equation 1 into two parts: 1. Determining a set of active lexicon entries. 2. Choosing the translation probabilities for the The second task can be achieved by running the EM algorithm on the restricted translation model. We deal with the first task in the following section. As described in Section 3 we need some mecha-nism to iteratively choose an active set of translation candidates. Based on the assumption that some of the active candidates and their respective probabili-ties are already correct, we induce new active candi-dates. In the context of information retrieval, Salton et al. (1975) introduce a document space where each document identified by one or more index terms is represented by a high dimensional vector of term weights. Given two vectors v 1 and v 2 of two doc-uments it is then possible to calculate a similarity coefficient between those given documents (which is usually denoted as s ( v 1 ,v 2 ) ). Similar to this we represent source and target words in a high dimen-sional vector space of target word weights which we call context vectors and use a similarity coefficient to find possible translation pairs. We first initialize these context vectors using the following procedure: 1. Using only the monolingual data for the target 2. Prepare context vectors v f Once we have set up the context vectors v e and v , we can retrieve translation candidates for some source word f by finding those words e 0 that maxi-mize the similarity coefficient s ( v e 0 ,v f ) , as well as candidates for a given target word e by finding those words f 0 that maximize s ( v e ,v f 0 ) . In our implemen-tation we use the Euclidean distance as distance measure. 2 The normalization of context vectors described above is motivated by the fact that the context vectors should be invariant with respect to the absolute number of occurrences of words. 3
Instead of just finding the best candidates for a given word, we are interested in an assignment that involves all source and target words, minimizing the sum of distances between the assigned words. In case of a one-to-one mapping the problem of assign-ing translation candidates such that the sum of dis-tances is minimal can be solved optimally in poly-nomial time using the hungarian algorithm (Kuhn, 1955). In our case we are dealing with a many-to-many assignment that needs to satisfy the max-imum number of candidates constraints. For this, we solve the problem in a greedy fashion by simply choosing the best pairs ( e,f ) first. As soon as a tar-get word e or source word f has reached the limit of maximum candidates, we skip all further candi-dates for that word e (or f respectively). This step involves calculating and sorting all | V e |  X  | V f | dis-tances which can be done in time O ( V 2  X  log( V )) , with V = max( | V e | , | V f | ) . A simplified example of this procedure is depicted in Figure 1. The example already shows that the assignment obtained by this algorithm is in general not optimal. Given the model presented in Section 3 and the methods illustrated in Section 4, we now describe how to train this model.

As described in Section 4, the overall procedure is divided into two alternating steps: After initializa-tion we first perform EM training of the translation model for 20 -30 iterations using a 2 -gram or 3 -gram language model in the target language. With the ob-tained best translations we induce new translation candidates using context similarity. This procedure is depicted in Figure 2. 5.1 Initialization Let N C be the maximum number of candidates per source word we allow, V e and V f be the target/source vocabulary and r ( e ) and r ( f ) the frequency rank of a source/target word. Each word f  X  V f with fre-quency rank r ( f ) is assigned to all words e  X  V e with frequency rank where
This defines a diagonal beam 4 when visualizing the lexicon entries in a matrix where both source and target words are sorted by their frequency rank. However, note that the result of sorting by frequency and thus the frequency ranks are not unique when there are words with the same frequency. In this case, we initially obtain some not further specified frequency ordering, which is then kept throughout the procedure.

This initialization proves useful as we show by taking an IBM1 lexicon P ( f | e ) extracted on the parallel V ERBMOBIL corpus (Wahlster, 2000): For each word e we calculate the weighted rank differ-ence and count how many of those weighted rank dif-ferences are smaller than a given value N C 2 . Here we see that for about 1% of the words the weighted rank difference lies within N C = 50 , and even about 3% for N C = 150 respectively. This shows that the initialization provides a first solid guess of possible translations. 5.2 EM Algorithm The generative story described in Section 3 is im-plemented as a cascade of a permutation, insertion, lexicon, deletion and language model finite state transducers using OpenFST (Allauzen et al., 2007). Our FST representation of the LM makes use of failure transitions as described in (Allauzen et al., 2003). We use the forward-backward algorithm on the composed transducers to efficiently train the lex-icon model using the EM algorithm. 5.3 Context Vector Step Given the trained parameters  X  from the previous run of the EM algorithm we set the context vectors v e and v f up as described in Section 4. We then calcu-late and sort all | V e | X | V f | distances which proves fea-sible in a few CPU hours even for vocabulary sizes of more than 50,000 words. This is achieved with the GNU SORT tool, which uses external sorting for sorting large amounts of data.

To set up the new lexicon we keep the b N C 2 c best translations for each source word with respect to P ( e | f ) , which we obtained in the previous EM run. Experiments showed that it is helpful to also limit the number of candidates per target words. We therefore prune the resulting lexicon using P ( f | e ) to a maximum of b N 0 C 2 c candidates per target word afterwards. Then we fill the lexicon with new can-didates using the previously sorted list of candidate pairs such that the final lexicon has at most N C candidates per source word and at most N 0 C can-didates per target word. We set N 0 C to some value N
C &gt; N C . All experiments in this work were run with N 0 C = 300 . Values of N 0 C  X  N C seem to pro-duce poorer results. Not limiting the number of can-didates per target word at all also typically results in weaker performance. After the lexicon is filled with candidates, we initialize the probabilities to be uni-form. With this new lexicon the process is iterated starting with the EM training. We evaluate our method on three different corpora.
At first we apply our method to non-parallel Span-ish/English data that is based on the O PUS corpus (Tiedemann, 2009) and that was also used in (Ravi and Knight, 2011). We show that our method per-forms better by 1 . 6 B LEU than the best performing method described in (Ravi and Knight, 2011) while being approximately 15 to 20 times faster than their n -gram based approach.

After that we apply our method to a non-parallel version of the German/English V ERBMOBIL corpus, which has a vocabulary size of 6,000 words on the German side, and 3,500 words on the target side and which thereby is approximately one order of magni-tude larger than the previous O PUS experiment.
We finally run our system on a subset of the non-parallel French/English G IGAWORD corpus, which has a vocabulary size of 60,000 words for both French and English. We show first interesting re-sults on such a big task.

In case of the O PUS and V ERBMOBIL corpus, we evaluate the results using B LEU (Papineni et al., 2002) and T ER (Snover et al., 2006) to reference translations. We report all scores in percent. For B
LEU higher values are better, for T ER lower val-ues are better. We also compare the results on these corpora to a system trained on parallel data.
In case of the G IGAWORD corpus we show lexi-con entries obtained during training. 6.1 O PUS Subtitle Corpus 6.1.1 Experimental Setup We apply our method to the corpus described in Table 6. This exact corpus was also used in (Ravi and Knight, 2011). The best performing methods in (Ravi and Knight, 2011) use the full 411  X  579 lexicon model and apply standard EM training. Us-ing a 2 -gram LM they obtain 15 . 3 B LEU and with a whole segment LM, they achieve 19 . 3 B LEU . In comparison to this baseline we run our algorithm with N C = 50 candidates per source word for both, a 2 -gram and a 3 -gram LM. We use 30 EM iterations between each context vector step. For both cases we run 7 EM+Context cycles. 6.1.2 Results
Figure 3 and Figure 4 show the evolution of B LEU and T ER scores for applying our method using a 2 -gram and a 3 -gram LM.

In case of the 2 -gram LM (Figure 3) the transla-tion quality increases until it reaches a plateau after 5 EM+Context cycles. In case of the 3 -gram LM (Figure 4) the statement only holds with respect to T
ER . It is notable that during the first iterations T ER only improves very little until a large chunk of the language unravels after the third iteration. This be-havior may be caused by the fact that the corpus only provides a relatively small amount of context infor-mation for each word, since sentence lengths are 3 -4 words on average.
Table 2 summarizes these results and compares them with (Ravi and Knight, 2011). Our 3 -gram based method performs by 1 . 6 B LEU better than their best system which is a statistically significant improvement at 95% confidence level. Furthermore, Table 2 compares the CPU time needed for training. Our 3 -gram based method is 15 -20 times faster than running the EM based training procedure presented in (Ravi and Knight, 2011) with a 3 -gram LM 5 .
To summarize: Our method is significantly faster than n -gram LM based approaches and obtains bet-ter results than any previously published method. 6.2 V ERBMOBIL Corpus 6.2.1 Experimental Setup
The V ERBMOBIL corpus is a German/English corpus dealing with short sentences for making ap-pointments. We prepared a non-parallel subset of the original V ERBMOBIL (Wahlster, 2000) by split-ting the corpus into two parts and then selecting only the German side from the first half, and the English side from the second half such that the target side is not the translation of the source side. The source and target vocabularies of the resulting non-parallel corpus are both more than 9 times bigger compared to the O PUS vocabularies. Also the total amount of word tokens is more than 5 times larger compared to the O PUS corpus. Table 6 shows the statistics of this corpus. We run our method for 5 EM+Context cycles (30 EM iterations each) using a 2 -gram LM. After that we run another five EM+Context cycles using a 3 -gram LM. 6.2.2 Results
Our results on the V ERBMOBIL corpus are sum-marized in Table 3. Even on this more complex task our method achieves encouraging results: The translation quality increases from iteration to itera-tion until the algorithm finally reaches 11 . 7 B LEU using only the 2 -gram LM. Running further five cycles using a 3 -gram LM achieves a final perfor-mance of 15 . 5 B LEU . Och (2002) reports results of 48 . 2 B LEU for a single-word based translation sys-tem and 56 . 1 B LEU using the alignment template approach, both trained on parallel data. However, it should be noted that our experiment only uses 50% of the original V ERBMOBIL training data to simulate a truly non-parallel setup. 6.3.1 Experimental Setup This setup is based on a subset of the monolingual G
IGAWORD corpus. We selected 100,000 French sentences from the news agency AFP and 100,000 sentences from the news agency Xinhua . To have a more reliable set of training instances, we selected only sentences with more than 7 tokens. Note that these corpora form true non-parallel data which, be-sides the length filtering, were not specifically pre-selected or pre-processed. More details on these non-parallel corpora are summarized in Table 6. The vocabularies have a size of approximately 60,000 words which is more than 100 times larger than the vocabularies of the O PUS corpus. Also it incor-porates more than 25 times as many tokens as the O PUS corpus.
 After initialization, we run our method with N
C = 150 candidates per source word for 20 EM iterations using a 2 -gram LM. After the first context vector step with N C = 50 we run another 4  X  20 iterations with N C = 50 with a 2 -gram LM. 6.3.2 Results
Table 4 shows example lexicon entries we ob-tained. Note that we obtained these results by us-ing purely non-parallel data, and that we neither used a seed lexicon, nor orthographic features to as-sign e.g. numbers or proper names: All results are obtained using 2 -gram statistics and the context of words only. We find the results encouraging and think that they show the potential of large-scale un-supervised techniques for MT in the future. We presented a method for learning statistical ma-chine translation models from non-parallel data. The key to our method lies in limiting the translation model to a limited set of translation candidates and then using the EM algorithm to learn the probabil-ities. Based on the translations obtained with this model we obtain new translation candidates using a context vector approach. This method increased the training speed by a factor of 10 -20 compared to methods known in literature and also resulted in a 1 . 6 B LEU point increase compared to previ-ous approaches. Due to this efficiency improvement we were able to tackle larger tasks, such as a non-parallel version of the V ERBMOBIL corpus having a nearly 10 times larger vocabulary. We also had a look at first results of our method on an even larger Task, incorporating a vocabulary of 60,000 words. We have shown that, using a limited set of trans-lation candidates, we can significantly reduce the computational complexity of the learning task. This work serves as a big step towards large-scale unsu-pervised training for statistical machine translation systems.
 This work was realized as part of the Quaero Pro-gramme, funded by OSEO, French State agency for innovation. The authors would like to thank Su-jith Ravi and Kevin Knight for providing us with the O
PUS subtitle corpus and David Rybach for kindly sharing his knowledge about the OpenFST library.
