 Mary Tin g 1 , Rabiah Abd u l Kadir 2 , Ten g k u Mohd Ten g k u Sembok 3 , Fatimah Ahmad 3 , Inference en g ine plays an important role in knowled g e-based system where it is u sed to access to the knowled g e encoded in the knowled g e base for reasonin g when q u eries sonin g on the existin g knowled g e base. The reasoner has the ability to derive new serted facts or axioms. For an example, an existin g fact in the knowled g e base stated that white-collar employee did not work on p u blic holiday. When "John is a white-collar employee" fact is asserted into the knowled g e base. A new proposition stated existin g facts. From the example, implicit information is ded u ced since the en g ine is not able to directly ret u rn the res u lt based on the existin g facts. 
The g rowth of the semantic web technolo g y has increased the need of a semantic reasoner. D u e to this, several forms of formalisms of knowled g e representation are u sed to store knowled g e. C u rrently, most of the u sers or developers are followin g the RDF/XML and OWL standard. Since the knowled g e is encoded in either RDF/XML or OWL, the need to a reasoner has become the key component in retrievin g relevant information from Ontolo g y. The en g ine is u sed to discover new relationships be-tween reso u rces accordin g to the vocab u lary or r u le set. Since most of the knowled g e stored in the ontolo g y mi g ht not be explicit, th u s q u eries m u st be passed to a reasoner in order to retrieve relevant information from an OWL Ontolo g y. The reasoner has the ability to ded u ce the implicit knowled g e from the existin g triples that are not ex-reasoner sho u ld have the abilities to check on consistency of the term u sed, comp u -tin g entailments, q u ery processin g , reasonin g with r u les and handlin g XML data types [2]. 
In order to derive relevant information from a repository s u ch as ontolo g y or knowled g e base, developer needs to choose one of the available reasoners in the mar-ket to meet the system req u irements. The research will st u dy six different reasoners that are commonly u sed in ontolo g y development. Many inference techniq u es have been introd u ced to perform reasonin g from available knowled g e. Generally, reasonin g can be cate g ories into ded u ctive reasonin g or ind u c-tive reasonin g . Majority of the systems has implemented ded u ctive reasonin g tech-niq u e in the inference en g ine, where the drawn concl u sion will be tr u e if the premises are tr u e. For example, premises state that  X  X f someone is a somethin g and this some-thin g is a s u b class of somethin g else, then someone is a somethin g else as well X . This forward reasonin g en g ine known as FreeEnCal, which has the ability to perform en g ine has been very u sef u l for those knowled g e-based systems, since it has the abili-ty to deal with creation, prediction and di scover. Table 1 in the below shows the ap-plication of ded u ctive reasonin g in different type of knowled g e representation. Same concl u sions are drawn when the same premises and reasonin g techniq u e are u sed even tho ug h it appears in different formalism. 
Basically, there are two principal ways of decidin g which r u le to exec u te when searchin g thro ug h the knowled g e base d u rin g the reasonin g process; forward chainin g and backward chainin g . The forward chainin g (data driven) involves in applyin g infe-rence r u les to the existin g facts in order to g enerate new facts. These r u les also can be co u ld be prod u ced. The strate g y can be seen in the Table 1, where the existin g infor-mation (two existin g premises) is u sed as a startin g point u sed before the new infor-mation can be derived. 
As for the backward chainin g ( g oal driven), it involves with by provin g the exist-in g facts or examine the r u les when q u eries are entered. It is also an iterative process, which will terminate when the all relevant r u les have been examined or no sol u tion hammad is a person" is checked and see if the premises for this concl u sion exist or a g reed. This inp u t can only be s u ccessf u lly asserted if the premises are tr u e. 
Most of the c u rrent inference en g ines implement both forward and backward chainin g strate g ies to g ether in order to handle all kind of sit u ation. The techniq u e is known as a hybrid strate g y where knowled g e en g ineer does not have to decide on which strate g ies is s u itable for the en g ine. Us u ally, the basic mechanism for the en-g ine is backward chainin g as the techniq u e is easier to implement than a p u re forward chainin g . The process can be done by re-writin g each backward chainin g r u le into a new form. For example, a backward r u le: isA(Someone, P ) :-isA(Someone, S), s u b-ClassOf(S, P ) will become r:-not(isA(Someone, P )), isA(Someone, S), s u bClas-sOf(S, P ), asserta(isA(Someone, P )). 2.1 Ontology Reasoning Web Ontolo g y Lan gu a g e (OWL) can be classified as OWL lite, OWL DL and OWL f u ll. OWL DL itself is rooted in description lo g ic (DL), which able to maximize the expressiveness while retainin g comp u tational completeness and decidability. [4] and individ u als. It also has been identified for decidable reasonin g . [5] The semantic of DL are defined by interpretin g concepts as a set of individ u al and roles as a set of order pairs of individ u al. 
A g eneral knowled g e base consists of two main components, TBox (terminolo g i-u sed to describe the facts. Both terms can also u se to describe two different types of statements in ontolo g y. In the ontolo g y, TBox describes the controlled vocab u laries s u ch as class, properties and constraint whereas ABox is u sed to describe the individ-u al properties or instances. A descriptive lo g ic (DL) knowled g e base can be defined represent ABox. Description lo g ic check a g ainst the consistency of ABox instances with TBox concepts to ens u re that ABox met all the restrictions. DL also checks the ABox instances to ens u re that the concepts have been defined by TBox. Other than that, DL also help to check whether a class is a s u bs u mes of another class [6]. 
Even tho ug h OWL is rooted in DL, first-order lo g ic terms u se for ontolo g y devel-place of an individ u al and property in place of a role. In the ontolo g y, the reasonin g can be performed by settin g the constraints of the class s u ch as restriction, Dis-jointClassess, someVal u eFrom and intersectionOf. [5] Other than settin g the con-tion can be considered as well. OWL DL implements monotonic lo g ic to perform reasonin g , where addition of new explicit statement into the ontolo g y may extend the inferred clos u re. Fi gu re 1 in the followin g shows some of the constraints u se to dec-lare the knowled g e with OWL DL. From the fi gu re, the first sample stated that s ug ar is different from salt, and pepper is different from salt and s ug ar. In the second sam-sample, it states a person can have pets, b u t one of the pets m u st be a cat. 
Non-monotonic reasonin g has been commonly applied in both ontolo g y-based and knowled g e-based systems. The techniq u e has s u ccessf u lly capt u red several forms of common sense and database reasonin g , where it has the ability to invalidate the exist-in g concl u sion when new information is added. When u pdatin g the knowled g e reside where the information at hand is complete, monotonic reasonin g is more appropriate since new information will not invalidate the existin g concl u sion. F-OWL imple-mented to handle frame lo g ic in the ontolo g y s u pports non-monotonic reasonin g [2]. 2.2 Reasoning Algorithm Many reasonin g al g orithms have been desi g n and deploy to cater the need of cond u ct-in g semantic reasonin g . These al g orithms play the major role in the inference en g ine by the u ser. One of the most famo u s al g orithms that have been implemented to work on Semantic Web is the description lo g ic, which inte g rates with the OWL or tablea u al g orithm. As for the reasonin g al g orithm implemented in the knowled g e-based sys-tem, RETE al g orithm that has been s u ccessf u lly implemented a n u mber of prod u ction [7,8] Tableau algorithm Tablea u al g orithm is desi g n to check the knowled g e consistency in a knowled g e base. The al g orithm is u sed to ens u re that at least one individ u al is an instance of that class thro ug h constr u ctin g a knowled g e base model. Model constr u cted are a seq u ence of ABoxes (A 0 ,A 1 ,.....A n ) to model the knowled g e base, K. Incorporated inference r u les will make implicit information in the axioms of R and explicit information in T. The al g orithm will search the model thro ug h a process of completion startin g with con-str u ctin g an initial completion g raph from the ABox.[9] The al g orithm will terminate when no more inference r u les are applicable or ther e is a contradiction amon g AB-lea u calc u li. RETE algorithm The RETE al g orithm has been desi g n to cater lar g e scales of r u les and facts with pat-defined. The al g orithm works very well in matchin g the fact and r u les, which work repetitively in matchin g the fact a g ainst each r u le in the r u leset. D u rin g each cycle, a list of fact will be modified either by retractin g or addin g to/from the list. The al g o-rithm will take a pool of the common components from those similar r u les, so that these common components will not be comp u ted a g ain. At the same time, it will red u ce or eliminate the red u ndancy of repeatin g the matchin g process a g ain. [7] 
Each cycle consists of three phrases; match, select and exec u te. D u rin g the match-in g phrase, the conditions of the r u les are matched a g ainst the facts in order to deter-mine which r u les are to be exec u ted. These r u les will be stored in a list called "A g en-da" for exec u tion. Amon g this list, one of the r u les will be tri gg ered or exec u ted ac-cordin g to the priority, recency of u sa g e and etc. When the r u le is exec u ted, new facts table en g ine [12]. A semantic reasoner is desi g n to infer lo g ical res u lts from a set of claim facts or inp u t q u ery. Vario u s n u mbers of semantic ontolo g y reasoners have been implemented to manip u late the ontolo g ies. Each of the reasoner applied different methods and strate-d u e to the complexity of the developed ontolo g y. Some of the widely u sed ontolo g y reasoners are Jena, P ellet, OWLIM , RACER, FaCT++ and HermiT. P rot X  g  X  able to s u pport all these reasoners except Jena which is a framework itself and OWLIM is inte g rated with Sesame en g ine. 3.1 JENA Jena is a Semantic Web framework that provides s u pport of OWL by providin g an A P I for RDF. The framework consists of vario u s internal reasoners s u ch as S P ARQL q u ery en g ine and r u le-based inference en g ine. The r u le base reasoner provides three reasonin g strate g ies; forward chainin g , backward chainin g and hybrid exec u tion model. The reasoner are made of two r u le en g ines; a forward chainin g RETE en g ine that implements the u se of RETE al g orithm and a tabled backward-chainin g that im-plements the tabled datalo g en g ine. The reasoner also has the ability to combine inferencin g for RDFS/OWL over its own Jena r u les. [13] The forward r u les are ex-consist of one or more backward chainin g r u les in the head of a forward chainin g r u le. Fi g . 3 shows the hybrid model allows the exec u tion of forward, backward and hybrid r u les [14]. 3.2 PELLET OWL DL reasonin g . The reasoner provides pro g rammatic access to the reasonin g P ellet consists of Datalo g r u les that are u sed to handle datatype reasonin g . The r u les are encoded in Semantic Web R u le Lan gu a g e (SWRL). The reasoner is inte g rated with tablea u x al g orithm to deal with expressiveness of the description lo g ic. [9] The al g orithm has the ability to perform the abilities of the description lo g ic f u nction s u ch as of consistency checkin g , concepts satisfiability, classification and realization. [15] The axioms abo u t the classes are p u t into the TBox component and assertions abo u t the individ u al are stored in the ABox component. TBox axioms will be fed into the tablea u x reasoner. 3.3 OWLIM OWLIM is a scalable semantic repository and reasoner which s u pport the semantic for RDFS, OWL Horst and OWL 2RL. It is a triple-based r u le reasoner that u ses Triple reasonin g and r u le entailment en g ine (TRREE) to perform reasonin g u sin g sonin g s u pport and performance. [16] research states that the reasonin g process and q u ery eval u ation are performed in the main memory. [17] works on the repository inte g rated with Stora g e and inference layer (SAIL) for Sesame RDF database. 3.4 RACER Renamed ABoxes and Concept Expression Reasoner (Racer) reasoner implements the description lo g ic SHIQ for TBox and ABox u sin g tablea u x al g orithm. It is one of the first OWL DL reasoner that able to s u pport r u les and partial Semantic Web R u le Lan-gu a g e (SWRL). The reasoner is able to s u pport new optimization techniq u es as well as the existin g FaCT optimization techniq u es when dealin g with the n u mber restric-tions and ABoxes [18]. [19] research workin g on u sin g the Racer reasoner to perform the ontolo g y. 3.5 FaCT++ Fast Classification of Terminolo g ies (FaCT) u ses a new ToDo list architect u re to control the r u le expansion. The reasoner is desi g ned as a platform to handle SHOIQ description lo g ic thro ug h incorporation of Tablea u x al g orithm decision proced u re and optimisation techniq u e. The platform is u sed to investi g ate new optimisation tech-niq u es and handle expressiveness of description lo g ic. The tablea u x al g orithm deci-sion proced u re implemented in the reasoner has the ability to handle TBoxes and incomplete s u pport for ABoxes.[20] The reasoner, extends the feat u res and optimisa-tion techniq u es of FaCT; therefore able to s u pport OWL DL and OWL 2 DL partially. Since it only s u pports OWL 2 DL partially, th u s it does not s u pport the keys and only work on certain datatype s u ch as literal, strin g , boolean, float and etc. [21] The rea-sonin g process in FaCT++ starts with several optimisation techniq u es. Once com-pleted the pre-processin g of the inp u t. The process will contin u e with classification by choosin g the concepts u sin g satisfiability checker. 3.6 HermiT HermiT reasoner is implemented based on hypertablea u calc u l u s al g orithm and incor-porates the "anywhere blockin g " strate g y to red u ce the n u mber of possible models, ability to handle DL SHIQ. The reasoner has the ability to check the ontolo g y consis-tency and also s u bs u mption relationships amon g concepts. Other than that, the reasoner also has the ability to handle class and property classification as well as a handle ontolo g y consistency. The reasonin g component will be u sed to arran g e class, u sed to comp u te the set of instances for each class and property d u rin g the realisation process [22]. r u le reasonin g except FaCT++, which does not work with r u les. Majority of the on-tolo g y reasoners applied tablea u al g orithm to handle the ontolo g y consistency. Each standard r u le lan gu a g e defined by semantic web, which is known as SWRL. Table 2 shows the comparison of these six different ontolo g y reasoners, which have been commonly deployed in ontolo g y development. 
Based on the experiments carried o u t in the researches done previo u sly by [8], [9], [11],[17],[16], [23] and [24]. D u e to different n u mber of TBoxes and ABoxes defined perform differently on each ontolo g y. One reasoner can perform exceedin g well in one ontolo g y b u t worst in another. Th u s different reasoner will perform differently in each ontolo g y based system. These reasoners have been tested a g ainst the ontolo g y consistency, ontolo g y classification, and s u bs u mption relationship amon g the con-cepts and also q u ery processin g time. 
HermiT reasoner g enerally performs better than other reasoners in the sit u ation P ellet reasoner performs better than FaCT++ and Racer d u rin g the consistency check-in g . Racer does not perform well in consistency checkin g beca u se the reasoner re-q u ires a hi g her initial preparation to b u ild index str u ct u re for performance of ens u rin g the ontolo g y consistency. As for the classification, HermiT will not be able to per-Normally, P ellet reasoner is more efficient than OWLIM, FaCT++ and Racer reason-ers. Racer will only be more efficient when it is u sed to handle TBox reasonin g . FaCT++ o u tperforms others in checkin g the s u bs u mption relationship amon g the concepts. P ellet reasoner comes u p in the second and follows by racer and hermit reasoners. And lastly, the OWLIM is the most efficient reasoner when dealin g with q u ery processin g . Jena is q u ite efficient when compare to P ellet reasoner. Different ontolo g y reasoner will yield different res u lts when it is applied on the same ontolo g y. This is d u e to different techniq u e and strate g y applied into it. Choosin g an appropriate reasoner to deploy will be dependin g on the ontolo g y desi g ned. HermiT reasoner will be a s u itable choice, if the ontolo g y implemented is simple and small in trieve the relevant information in the shortest time. Generally, P ellet reasoner has shown a g ood performance in ens u rin g the consistency, classification and s u bs u mp-tion while mana g in g the ontolo g y. Jena framework work very well witho u t the need ded u ce the res u lt when q u ery is inp u tted. Implementation of RETE al g orithm in Jena has increased the q u ery processin g speed thro ug h pattern matchin g . 
If the available reasoners do not meet the system req u irements, a new reasoner will be implemented accordin g ly. Reasonin g techniq u es or strate g y and any other al g o-rithm implemented will depend on the system criteria. Selectin g an appropriate tech-niq u e or al g orithm will g reatly improve the processin g performance and the acc u racy of the information retrieved. For example, forward chainin g will u se a lot of memory be advisable for lar g e knowled g e base. Backward chainin g will not be an appropriate strate g y, if the desi g n of the knowled g e base is complicated. Sometime it is u sef u l to implement a hybrid strate g y, since it combines both strate g ies to g ether. The strate g y able to perform basic inference u sin g backward chainin g and u sin g forward chainin g when establish a new fact. Acknowledgement. The work presented in this paper has been s u pported by the Lon g Term Research Grant Scheme (LRGS) project f u nded by the Ministry of Hi g her Ed u -cation (MoHE), Malaysia u nder Grants No. LRGS/TD/2011/UiTM/ICT/03. 
