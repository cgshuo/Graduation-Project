 Time expressions present a number of challenges for language understanding systems. They have rich, compositional structure (e.g.,  X 2nd Friday of July X ), can be easily confused with non-temporal phrases (e.g., the word  X  X ay X  can be a month name or a verb), and can vary in meaning in dif-ferent linguistic contexts (e.g., the word  X  X riday X  refers to different dates in the sentences  X  X e met on Friday  X  and  X  X e will meet on Friday  X ). Recov-ering the meaning of time expressions is therefore challenging, but provides opportunities to study context-dependent language use. In this paper, we present the first context-dependent semantic pars-ing approach for learning to identify and interpret time expressions, addressing all three challenges.
Existing state-of-the-art methods use hand-engineered rules for reasoning about time expres-sions (Str  X  otgen and Gertz, 2013). This includes both detection , identifying a phrase as a time ex-pression, and resolution , mapping such a phrase into a standardized time value. While rule-based approaches provide a natural way to express ex-pert knowledge, it is relatively difficult to en-code preferences between similar competing hy-potheses and provide prediction confidence. Re-cently, methods for learning probabilistic seman-tic parsers have been shown to address such limi-tations (Angeli et al., 2012; Angeli and Uszkoreit, 2013). However, these approaches do not account for any surrounding linguistic context and were mainly evaluated with gold standard mentions.
We propose to use a context-dependent se-mantic parser for both detection and resolution of time expressions. For both tasks, we make use of a hand-engineered Combinatory Catego-rial Grammar (CCG) to construct a set of mean-ing representations that identify the time being described. For example, this grammar maps the phrase  X 2nd Friday of July X  to the meaning repre-sentation intersect ( nth ( 2 , friday ) , july ) , which encodes the set of all such days. Detection is then performed with a binary classifier to prune the set of text spans that can be parsed with the gram-mar (e.g., to tell that  X  X orn in 2000  X  has a time expression but  X  X  2000 piece puzzle X  does not). For resolution, we consider mentions sequentially and use a log-linear model to select the most likely meaning for each. This choice depends on contex-tual cues such as previous time expressions and the tense of the governing verb (e.g., as required to correctly resolve cases like  X  X e should meet on the 2nd Friday of July  X ).

Such an approach provides a good balance be-tween hand engineering and learning. For the rel-atively closed-class time expressions, we demon-strate that it is possible to engineer a high quality CCG lexicon. We take a data-driven approach for grammar design, preferring a grammar with high coverage even if it results in parsing ambiguities. We then learn a model to accurately select between competing parses and incorporate signals from the surrounding context, both more difficult to model with deterministic rules.

For both problems, we learn from TimeML an-notations (Pustejovsky et al., 2005), which mark mentions and the specific times they reference. Training the detector is a supervised learning problem, but resolution is more challenging, re-quiring us to reason about latent parsing and context-dependent decisions.
 We evaluate performance in two domains: the TempEval-3 corpus of newswire text (Uzzaman et al., 2013) and the WikiWars corpus of Wikipedia history articles (Mazur and Dale, 2010). On these benchmark datasets, we present new state-of-the-art results, with error reductions of up to 28% for the detection task and 21% for the end-to-end task. Time Expressions We follow the TIMEX3 stan-dard (Pustejovsky et al., 2005) for defining time expressions within documents. Let a document D =  X  w 1 ,...,w n  X  be a sequence of n words w i and a mention m = ( i,j ) indicate start and end indices for a phrase  X  w i ,...,w j  X  in D . Define a time expression e = ( t,v ) to include both a temporal type t and value v . 1 The temporal type t  X  { Date, Time, Duration, Set } can take one of four possible values, indicating if the expression e is a date (e.g.,  X  X anuary 10, 2014 X ), time (e.g.,  X 11:59 pm X ), duration (e.g.,  X 6 months X ), or set (e.g.,  X  X very year X ). The value v is an extension of the ISO 8601 standard, which encodes the time that mention m refers to in the context provided by document D . For example, in a document written on Tuesday, January 7, 2014,  X  X riday, X   X  X hree days later, X  and  X  X anuary 10th X  would all resolve to the value 2014-01-10. The time values are similarly defined for a wide range of expressions, such as underspecified dates (e.g., XXXX-01-10 for  X  X a-nunary 10th X  when the year is not inferable from context) and durations (P2D for  X  X wo days X ). Tasks Our goal is to find all time expressions in an input document. We divide the problem into two parts: detection and resolution. The detection problem is to take an input document D and output a mention set M = { m i | i = 1 ...n } of phrases in D that describe time expressions. The resolu-tion problem (often also called normalization ) is, given a document D and a set of mentions M , to map each m  X  M to the referred time expression e . This paper addresses both of these tasks. Approach We learn separate, but related, mod-els for detection and resolution. For both tasks, we define the space of possible compositional mean-ing representations Z , where each z  X  Z defines a unique time expression e . We use a log-linear CCG (Steedman, 1996; Clark and Curran, 2007) to rank possible meanings z  X  Z for each men-tion m in a document D , as described in Sec-tion 4. Both detection (Section 5) and resolution (Section 6) rely on the semantic parser to identify likely mentions and resolve them within context. For learning we assume access to TimeML data containing documents labeled with time expres-sions. Each document D has a set { ( m i ,e i ) | i = 1 ...n } , where each mention m i marks a phrase that resolves to the time expression e i .
 Evaluation We evaluate performance (Sec-tion 8) for both newswire text and Wikipedia articles. We compare to the state-of-the-art systems for end-to-end resolution (Str  X  otgen and Gertz, 2013) and resolution given gold men-tions (Bethard, 2013b), both of which do not use any machine learning techniques. We use simply typed lambda calculus to represent time expressions. Our representation draws heav-ily from the representation proposed by Angeli et al. (2012), who introduced semantic parsing for this task. There are five primitive types: duration d , sequence s , range r , approximate reference a , and numeral n , as described below. Table 1 lists the available constants for each type.
 Duration A period of time. Each duration is a multiple of one of a closed set of possible base durations (e.g., hour , day , and quarter ), which we refer to as its granularity. Table 1 includes the complete set of base durations used.
 Range A specific interval of time, following an interval-based theory of time (Allen, 1981). The interval length is one of the base durations, which is the granularity of the range. Given two ranges R and R 0 , we say that R  X  R 0 if the endpoints of R lie on or within R 0 .
 Sequence A set of ranges with identical granu-larity. The granularity of the sequence is that of its members. For example, thursday , which has a day granularity, denotes the set of all day -granular ranges enclosing specific Thursdays. Given a range R and sequence S , we say that R  X  S if R is a member of S . Given two sequences S and S 0 we say that S  X  S 0 if R  X  S implies R  X  S 0 . Approximate Reference An approximate time relative to the reference time. For example, past and future . To handle mentions such as  X  X  while, X  we add the constant unknown .
 Numeral An integer, for example, 5 or 1990 . Numerals are used to denote specific ranges, such as the year 2001, or to modify a duration X  X  length. Functions We also allow for functional types, for example  X  s,r  X  is assigned to a function that maps from sequences to ranges. Table 2 lists all supported functions with example mentions.
 Context Dependent Constants To mark places where context-dependent choices will need to be made during resolution, we use two placeholder constants. First, ref time denotes the mention ref-erence time, which is later set to either the docu-ment time or a previously resolved mention. Sec-ond, temp d is used in the shift function to deter-mine its return granularity, as described in Table 2, and is later replaced with the granularity of either the first or second argument of the enclosing shift function. Section 4.3 describes how these deci-sions are made. We define a three-step derivation to resolve men-tions to their TIMEX3 value. First, we use a CCG to generate an initial logical form for the mention. Next, we apply a set of operations that modify the initial logical form, as appropriate for its context. Finally, the logical form is resolved to a TIMEX3 value using a deterministic process. 4.1 Combinatory Categorial Grammars CCG is a linguistically motivated categorial for-malism for modeling a wide range of language phenomena (Steedman, 1996; Steedman, 2000). A CCG is defined by a lexicon and a set of combina-tors. The lexicon pairs words with categories and the combinators define how to combine categories to create complete parse trees.

For example, Figure 1 shows a CCG parse tree for the phrase  X  X ne week ago. X  The parse tree is read top to bottom, starting from assigning cate-gories to words using the lexicon. The lexical en-try ago ` NP \ NP :  X x. shift ( ref time ,  X  1  X  x, temp d ) for the word  X  X go X  pairs it with a cate-gory that has syntactic type NP \ NP and seman-tics  X x. shift ( ref time ,  X  1  X  x, temp d ) . Each intermediate parse node is then constructed by ap-plying one of a small set of binary or unary opera-tions (Steedman, 1996; Steedman, 2000), which modify both the syntax and semantics. We use backward ( &lt; ) and forward ( &gt; ) application and several unary type-shifting rules to handle number combinations. For example, in Figure 1 the cate-gory of the span  X  X ne week X  is combined with the category of  X  X go X  using backward application ( &lt; ). Parsing concludes with a logical form representing the meaning of the complete mention.
 Hand Engineered Lexicon To parse time ex-pressions, we use a CCG lexicon that includes 287 manually designed entries, along with automati-cally generated entries such as numbers and com-mon formats of dates and times. Figure 2 shows example entries from our lexicon. 4.2 Context-dependent Operations To correctly resolve mentions to TIMEX3 val-ues, the system must account for contextual in-formation from various sources, including previ-ous mentions in the document, the document cre-ation time, and the sentence containing the men-tion. We consider three types of context opera-tions, each takes as input a logical form z 0 , mod-ifies it and returns a new logical form z . Each context-dependent parse y specifies one operator of each type, which are applied to the logical form constructed by the CCG grammar, to produce the final, context-dependent logical form LF ( y ) . Reference Time Resolution The logical con-stant ref time is replaced by either dct , repre-senting the document creation time, or last range , the last r -typed mention resolved in the document. For example, consider the mention  X  X he follow-ing year X , which is represented using the logical form next ( seq ( year ) , ref time ) . Within the sen-tence  X  1998 was colder than the following year  X , the resolution of  X  X he following year X  depends on the previous mention  X 1998 X . In contrast, in  X  The following year will be warmer X , its resolution de-pends on the document creation time. Directionality Resolution If z 0 is s -typed we modify it to nearest forward ( z 0 , ref time ) , nearest backward ( z 0 , ref time ) , or z 0 . For ex-ample, given the sentence  X . . . will be launched in april  X , the mention  X  X pril X , and its logi-cal form april , we would like to resolve it to the coming April, and therefore modify it to nearest forward ( april , ref time ) .
 Shifting Granularity Every occurrence of the logical constant temp d , which is used as an ar-gument to the function shift (see Table 2), is re-placed with the granularity of either the first argu-ment, the origin of the shift, or the second argu-ment, the delta of the shift. This determines the final granularity of the output. For example, if the reference time is 2002-01, the mention  X  X wo years earlier X  would resolve to either a month (since the reference time is of month granularity) or a year (since the delta is of year granularity). 4.3 Resolving Logical Forms For a context-dependent parse y , we compute the TIMEX3 value TM ( y ) from the logical form z = LF ( y ) with a deterministic step that performs a single traversal of z . Each primitive logical con-stant from Table 1 contributes to setting part of the TIMEX3 value (for example, specifying the day of the week) and the functional constants in Table 2 dictate transformations on the TIMEX3 values (for The detection problem is to take an input docu-ment D and output a mention set M = { m i | i = 1 ,...,n } , where each mention m i indexes a spe-cific phrase in D that delimits a time expression. Algorithm The detection algorithm considers all phrases that our CCG grammar  X  (Section 4) can parse, uses a learned classifier to further filter this set, and finally resolves conflicts between any overlapping predictions. We use a CKY algorithm to efficiently determine which phrases the CCG grammar can parse and only allow logical forms for which there exists some context in which they would produce a valid time expression, e.g. rul-ing out intersect ( monday , tuesday ) . Finally, we build the set M of non-overlapping mentions us-ing a step similar to non-maximum suppression: the mentions are sorted by length (longest first) and iteratively added to M , as long as they do not overlap with any mention already in M .
 Filtering Model Given a mention m , its docu-ment D , a feature function  X  , the CCG lexicon  X  , and feature weights  X  , we use a logistic regression model to define the probability distribution: where t indicates whether m is a time expression. Features We use three types of indicator fea-tures that test properties of the words in and around the potential mention m .
 Context tokens Indicate the presence of a set of manually specified tokens near the mention. These include quotations around the mention, the word  X  X ld X  after the mention, and prepositions of time (such as  X  X n X ,  X  X ntil X , and  X  X uring X ) before. Part of speech Indicators that pair each word with its part of speech, as assigned by the Stanford tagger (Toutanova et al., 2003).
 Lexical group Each lexical entry belongs to one of thirteen manually defined lexical groups which cluster entries that contribute to the final time ex-pression similarly. These groups include numbers, days of the week, months, seasons, etc. For each group, we include a feature indicating whether the parse includes a lexical entry from that group. Determiner dependency Indicates the presence of a determiner in the mention and whether its par-ent in the dependency tree (generated by the Stan-ford parser (de Marneffe et al., 2006)) also resides within the mention.
 Learning Finally, we construct the training data by considering all spans that (1) the CCG tempo-ral grammar can parse and (2) are not strict sub-spans of an annotated mention. All spans that ex-actly matched the gold labels are used as positive examples and all others are negatives. Given this relaxed data, we learn the feature weights  X  with L1-regularization. We set the probability thresh-old for detecting a time expression by optimizing the F1 score over the training data. The resolution problem is to, given a document D and a set of mentions M , map each m  X  M to the correct time expression e . Section 4 defined the space of possible time expression that can be constructed for an input mention m in the context of a document D . In general, there will be many different possible derivations, and we will learn a model for selecting the best one.
 Model Let y be a context-dependent CCG parse, which includes a parse tree TR ( y ) , a set of context operations CNTX ( y ) applied to the logical form at the root of the tree, a final context-dependent logical form LF ( y ) and a TIMEX3 value TM ( y ) . Define  X  ( m,D,y )  X  R d to be a d -dimensional feature X  X ector representation and  X   X  R d to be a parameter vector. The probability of a parse y for mention m and document D is: The inference problem at test time requires find-ing the best resolution by solving y  X  ( m,D ) = arg max y P ( y | m,D ;  X ,  X ) , where the final output TIMEX3 value is TM ( y  X  ( m,D )) .
 Inference We find the best context-dependent parse y by enumeration, as follows. We first parse the input mention m with a CKY-style algo-rithm, following previous work (Zettlemoyer and Collins, 2005). Due to the short length of time expressions and the manually constructed lexicon, we can perform exact inference. Given a parse, we then enumerate all possible outcomes for the context resolution operators. In practice, there are never more than one hundred possibilities.
 Features The resolution features test properties of the linguistic context surrounding the mention m , relative to the context-dependent CCG parse y . Governor verb We define the governor verb to be the nearest ancestor verb in the dependency parse of any token in m . We include features indicat-ing the concatenation of the part-of-speech of the governor verb, its auxiliary verb if present, and the selected direction resolution operator (see Sec-tion 4.2). This feature helps to distinguish  X  X hey met on Friday  X  from  X  X hey will meet on Friday . X  Temporal offset If the final logical form LF ( y ) is a range, we define t to be the time difference between TM ( y ) and the reference time. For ex-ample, if the reference time is 2000-01-10 and the mention resolves to 2000-01-01, then t is -9 days. This feature indicates one of eleven bucketed val-ues for t , including same day, less than a week, less than a month, etc. It allows the model to en-code the likely temporal progression of a narrative. This feature is ignored if the granularity of TM ( y ) or the reference time is greater than a year. Shift granularity The logical constant shift (Ta-ble 2) takes three arguments: the origin (range), the delta (duration), and the output granularity (duration). This indicator feature is the concate-nation of each argument X  X  granularity for every shift in LF ( y ) . It allows the model to determine whether  X  X  year ago X  refers to a year or a day. Reference type Let r denote whether the refer-ence time is the document creation time dct or the last range last range . Let g l and g r denote the granularities of LF ( y ) and the reference time, re-spectively. We include features indicating the con-catenations: r + g l , r + g r , and r + g l + g r . Addition-ally, we include features indicating the concatena-tion of r with each lexical entry used in the parse TR ( y ) . These features allow the model to encode preferences in selecting the correct reference time. Fine-grained type These features indicate the fine-grained type of TM ( y ) , such as day of the month or week of the year. We also include a fea-ture indicating the concatenation of each of these features with the direction resolution operator that was used. These features allow the model to repre-sent, for example, that minutes of the year are less likely than days of the month.
 Intersections These features indicate the concate-nation of the granularities of any two sequences that appear as arguments to an intersect constant. Learning To estimate the model parameters  X  we assume access to a set of training examples { ( m i ,d i ,e i ) : i = 1 ,...,n } , where each mention m i is paired with a document d i and a TIMEX3 value e i . We use the AdaGrad algorithm (Duchi et al., 2011) to optimize the conditional, marginal log-likelihood of the data. For each mention, we marginalize over all possible context-dependent parses, using the predictions from the model on the previous gold mentions to fill in missing context, where necessary. After parameter estimation, we set a probability threshold for retaining a resolved time expression by optimizing value F1 (see Sec-tion 8) over the training data. Semantic parsers map sentences to logical repre-sentations of their underlying meaning, e.g., Zelle and Mooney (1996), Zettlemoyer and Collins (2005), and Wong and Mooney (2007). Re-cently, research in this area has focused on learn-ing for various forms of relatively weak but eas-ily gathered supervision. This includes learn-ing from question-answer pairs (Clarke et al., 2010; Liang et al., 2011; Kwiatkowski et al., 2013), from conversational logs (Artzi and Zettle-moyer, 2011), with distant supervision (Krish-namurthy and Mitchell, 2012; Cai and Yates, 2013), and from sentences paired with system be-havior (Goldwasser and Roth, 2011; Chen and Mooney, 2011; Artzi and Zettlemoyer, 2013b). Recently, Angeli et al. introduced the idea of learning semantic parsers to resolve time expres-sions (Angeli et al., 2012) and showed that the ap-proach can generalize to multiple languages (An-geli and Uszkoreit, 2013). Similarly, Bethard demonstrated that a hand-engineered semantic parser is also effective (Bethard, 2013b). How-ever, these approaches did not use the semantic parser for detection and did not model linguistic context during resolution.

We build on a number of existing algorithmic ideas, including using CCGs to build meaning representations (Zettlemoyer and Collins, 2005; Zettlemoyer and Collins, 2007; Kwiatkowski et al., 2010; Kwiatkowski et al., 2011), building derivations to transform the output of the CCG parser based on context (Zettlemoyer and Collins, 2009), and using weakly supervised parameter up-dates (Artzi and Zettlemoyer, 2011; Artzi and Zettlemoyer, 2013b). However, we are the first to use a semantic parsing grammar within a mention detection algorithm, thereby avoiding the need to represent the meaning of complete sentences, and the first to develop a context-dependent model for semantic parsing of time expressions.

Time expressions have been extensively stud-ied as part of the TimeEx task, including 9 teams who competed in the 2013 TempEval-3 com-petition (Uzzaman et al., 2013). This line of work builds on ideas from TimeBank (Puste-jovsky et al., 2003) and a number of different formal models for temporal reasoning, e.g. Allen (1983), Moens and Steedman (1988). In 2013, HeidelTime (Str  X  otgen and Gertz, 2013) was the top performing system. It used deterministic rules defined over regular expressions to perform both detection and resolution, and will provide a com-parison system for our evaluation in Section 9. In general, many different rule-based systems, e.g. NavyTime (Chambers, 2013) and SUTime (Chang and Manning, 2012), and learning systems, e.g. ClearTK (Bethard, 2013a) and MANTime (Filan-nino et al., 2013), did well for detection. How-ever, rule-based approaches dominated in resolu-tion; none of the top performers attempted to learn to do resolution. Our approach is a hybrid of rule based and learning, by using latent-variable learn-ing techniques to estimate CCG parsing and con-text resolution models from the provided data. Data We evaluate performance on the TempEval-3 (Uzzaman et al., 2013) and Wiki-Wars (Mazur and Dale, 2010) datasets. Figure 3 shows summary statistics for both datasets. For the TempEval-3 corpus, we use the given training and testing set splits. Since the training set has lower inter-annotator agreement than the testing set (Uzzaman et al., 2013), we manually corrected all of the mistakes we found in the Dev* and the corrected Dev. We report (1) cross-validation development results on Dev*, (2) cross-validation development and ablation results for Dev, and (3) held-out test results after training with Dev. For WikiWars, we randomly assigned the data to include 17 training documents (2,228 time expressions) and 5 test documents (363 time expressions). We use cross-validation on the train-ing data for development. All cross-validation experiments used 10 folds.
 Implementation Our system was implemented using the open source University of Washington Semantic Parsing Framework (Artzi and Zettle-moyer, 2013a). We used LIBLINEAR (Fan et al., 2008) to learn the detection model.
 Parameter Settings We use the same set of pa-rameters for both datasets, chosen based on devel-opment experiments. For detection, we set the reg-ularization parameter to 10 with a stopping crite-rion of 0.01. For resolution, we set the learning rate to 0.25 and ran AdaGrad for 5 iterations. All features are initialized to have zero weights. Evaluation Metrics We use the official TempEval-3 scoring script and report the standard metrics. We report detection precision, recall and F1 with relaxed and strict metrics; a gold mention is considered detected for the relaxed metric if any of the output candidates overlap with it and is detected for the strict metric if the extent of any output candidates matches exactly. For resolution, we report value accuracy , measuring correctness of time expressions detected according to the relaxed metric. We also report value precision, recall, and F1 , which score an expression as correct if it is both correctly detected (relaxed) and resolved. For end-to-end performance, value F1 is the primary metric. Finally, we report accuracy and F1 for temporal types, as defined in Section 2, for the TempEval dataset (WikiWars does not include type labels).
 Comparison Systems We compare our system primarily to HeidelTime (Str  X  otgen and Gertz, 2013), which is state of the art in the end-to-end task. For the TempEval-3 dataset, we also compare to two other strong participants of the shared task. These include NavyTime (Chambers, 2013), which had the top relaxed detection score, and ClearTK (Bethard, 2013a), which had the top strict detection score and type F1 score. We also include a comparison with Bethard X  X  synchronous context free grammar (SCFG) (Bethard, 2013b), which is state-of-the-art in the task of resolution with gold mention boundaries. End-to-end results Figure 4 shows develop-ment and test results for TempEval-3. Figure 5 shows these numbers for WikiWars. In both datasets, we achieve state-of-the-art test scores. For detection, we show up to 3-point improve-ments in strict and relaxed F1 scores. These num-bers outperform all systems participating in the shared task, which used a variety of techniques in-cluding hand-engineered rules, CRF tagging mod-els, and SVMs. For resolution, we show up to 4-point improvements in the value F1 score, also outperforming participating systems, all of which used hand-engineered rules for resolution.
 Gold Mentions Figure 6 reports development outperforms the state of the art, SCFG (Bethard, 2013b), which also used a hand engineered gram-mar, but did not use machine learning techniques. Precision vs. Recall Our probabilistic model of time expression resolution allows us to eas-ily tradeoff precision and recall for end-to-end performance by varying the resolution probability threshold. Figure 7 shows the precision vs. recall of the resolved values from 10-fold cross valida-tion of TempEval-3 Dev and WikiWars Dev. We are able to achieve precision at or above 90% with reasonable recall, nearly 70% for WikiWars and over 85% for TempEval-3.
 Ablation Study Figures 4-5 also show compar-isons for our system with no context. We ablate the ability to refer to the context during resolution by removing contextual information from the res-olution features and only allowing the document creation time to be the reference time.

We see an interesting asymmetry in the effect of modeling context across the two domains. We find that context is much more important in WikiWars (19 point difference) than in TempEval (2 point difference). This result reaffirms the difference in domains that Str  X  otgen and Gertz (2012) noted dur-ing the development of HeidelTime: history arti-cles have narrative structure that moves back and forth through time while newspaper text typically describes events happening near the document cre-ation time. This difference helps us to understand why previous learning systems have been able to ignore context and perform well on newswire text. Error Analysis To investigate the source of er-ror, we compute oracle results for resolving gold mentions over the TempEval-3 Dev dataset. We found that our system produces a correct candidate derivation for 96% of the mentions.

We also manually categorized all resolution errors for end-to-end performance with 10-fold cross validation of the TempEval-3 Dev dataset, shown in Figure 8. The lexicon allows for effec-tive parsing, contributing to only 2% of the overall errors. However, context is more challenging. The three largest categories, responsible for 64.7% of the errors, were incorrect use of the context oper-ators. More expressive modeling will be required to fully capture the complex pragmatics involved in understanding time expressions. We presented the first context-dependent semantic parsing system to detect and resolve time expres-sions. Both models used a Combinatory Catego-rial Grammar (CCG) to construct a set of possible temporal meaning representations. This grammar defined the possible phrases for detection and the inputs to a context-dependent reasoning step that was used to construct the output time expression during resolution. Experiments demonstrated that our approach outperforms state-of-the-art systems.
In the future, we aim to develop joint models for reasoning about events and time expressions, including detection and resolution of temporal re-lations. We are also interested in testing coverage in new domains and investigating techniques for semi-supervised learning and learning with noisy data. We hypothesize that semantic parsing tech-niques could help in all of these settings, provid-ing a unified mechanism for compositional analy-sis within temporal understanding problems. The research was supported in part by DARPA under the DEFT program through the AFRL (FA8750-13-2-0019) and the CSSG (N11AP20020), and the NSF (IIS-1115966, IIS-1252835). The authors thank Nicholas FitzGerald, Tom Kwiatkowski, and Mark Yatskar for helpful discussions, and the anonymous reviewers for helpful comments.
