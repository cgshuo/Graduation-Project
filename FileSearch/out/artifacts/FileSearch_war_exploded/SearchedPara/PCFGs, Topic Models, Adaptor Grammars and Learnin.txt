 Over the last few years there has been consider-able interest in Bayesian inference for complex hi-erarchical models both in machine learning and in computational linguistics. This paper establishes a theoretical connection between two very differ-ent kinds of probabilistic models: Probabilistic Context-Free Grammars (PCFGs) and a class of models known as Latent Dirichlet Allocation (Blei et al., 2003; Griffiths and Steyvers, 2004) models that have been used for a variety of tasks in ma-chine learning. Specifically, we show that an LDA model can be expressed as a certain kind of PCFG, so Bayesian inference for PCFGs can be used to learn LDA topic models as well. The importance of this observation is primarily theoretical, as cur-rent Bayesian inference algorithms for PCFGs are less efficient than those for LDA inference. How-ever, once this link is established it suggests a vari-ety of extensions to the LDA topic models, two of which we explore in this paper. The first involves extending the LDA topic model so that it generates collocations (sequences of words) rather than indi-vidual words. The second applies this idea to the problem of automatically learning internal struc-ture of proper names (NPs), which is useful for definite NP coreference models and other applica-tions.
 The rest of this paper is structured as follows. The next section reviews Latent Dirichlet Alloca-tion (LDA) topic models, and the following sec-tion reviews Probabilistic Context-Free Grammars (PCFGs). Section 4 shows how an LDA topic model can be expressed as a PCFG, which pro-vides the fundamental connection between LDA and PCFGs that we exploit in the rest of the paper, and shows how it can be used to define a  X  X ticky topic X  version of LDA. The follow-ing section reviews Adaptor Grammars (AGs), a non-parametric extension of PCFGs introduced by Johnson et al. (2007b). Section 6 exploits the con-nection between LDA and PCFGs to propose an AG-based topic model that extends LDA by defin-ing distributions over collocations rather than indi-vidual words, and section 7 applies this extension to the problem of finding the structure of proper names. Latent Dirichlet Allocation (LDA) was introduced as an explicit probabilistic counterpart to La-tent Semantic Indexing (LSI) (Blei et al., 2003). Like LSI, LDA is intended to produce a low-dimensional characterisation or summary of a doc-Figure 1: A graphical model  X  X late X  representa-tion of an LDA topic model. Here ` is the number of topics, m is the number of documents and n is the number of words per document. ument in a collection of documents for informa-tion retrieval purposes. Both LSI and LDA do this by mapping documents to points in a rela-tively low-dimensional real-valued vector space; distance in this space is intended to correspond to document similarity.

An LDA model is an explicit generative proba-bilistic model of a collection of documents. We describe the  X  X moothed X  LDA model here (see page 1006 of Blei et al. (2003)) as it corresponds precisely to the Bayesian PCFGs described in sec-tion 4. It generates a collection of documents by first generating multinomials  X  i over the vocab-ulary V for each topic i  X  1 ,...,` , where ` is the number of topics and  X  i,w is the probability of generating word w in topic i . Then it gen-erates each document D j ,j = 1 ,...,m in turn by first generating a multinomial  X  j over topics, where  X  j,i is the probability of topic i appearing in document j . (  X  j serves as the low-dimensional representation of document D j ). Finally it gener-ates each of the n words of document D j by first selecting a topic z for the word according to  X  j , and then drawing a word from  X  z . Dirichlet priors with parameters  X  and  X  respectively are placed on the  X  i and the  X  j in order to avoid the zeros that can arise from maximum likelihood estima-tion (i.e., sparse data problems).

The LDA generative model can be compactly expressed as follows, where  X   X   X  should be read as  X  X s distributed according to X . z j,k  X   X  j j = 1 ,...,m ; k = 1 ,...,n In inference, the parameters  X  and  X  of the Dirichlet priors are either fixed (i.e., chosen by the model designer), or else themselves inferred, e.g., by Bayesian inference. (The adaptor gram-mar software we used in the experiments de-scribed below automatically does this kind of hyper-parameter inference).

The inference task is to find the topic probabil-ity vector  X  j of each document D j given the words w j,k of the documents; in general this also requires inferring the topic to word distributions  X  and the topic assigned to each word z j,k . Blei et al. (2003) describe a Variational Bayes inference algorithm for LDA models based on a mean-field approx-imation, while Griffiths and Steyvers (2004) de-scribe an Markov Chain Monte Carlo inference al-gorithm based on Gibbs sampling; both are quite effective in practice. Context-Free Grammars are a simple model of hi-erarchical structure often used to describe natu-ral language syntax. A Context-Free Grammar (CFG) is a quadruple ( N,W,R,S ) where N and W are disjoint finite sets of nonterminal and ter-minal symbols respectively, R is a finite set of pro-ductions or rules of the form A  X   X  where A  X  N and  X   X  ( N  X  W ) ? , and S  X  N is the start symbol . In what follows, it will be useful to interpret a CFG as generating sets of finite, labelled, ordered trees T A for each X  X  N  X  W . Informally, T X consists of all trees t rooted in X where for each local tree ( B, X  ) in t (i.e., where B is a parent X  X  label and  X  is the sequence of labels of its imme-diate children) there is a rule B  X   X   X  R .
Formally, the sets T X are the smallest sets of trees that satisfy the following equations.
If X  X  W (i.e., if X is a terminal) then T X = { X } , i.e., T X consists of a single tree, which in turn only consists of a single node labelled X . If X  X  N (i.e., if X is a nonterminal) then where R A = { A  X   X  : A  X   X   X  R } for each A  X  N , and That is, T REE X ( T B of trees with whose root node is labelled X and whose i th child is a member of T B
The set of trees generated by the CFG is T S , where S is the start symbol, and the set of strings generated by the CFG is the set of yields (i.e., ter-minal strings) of the trees in T S .

A Probabilistic Context-Free Grammar (PCFG) is a pair consisting of a CFG and set of multino-mial probability vectors  X  X indexed by nontermi-nals X  X  N , where  X  X is a distribution over the rules R X (i.e., the rules expanding X ). Informally,  X 
X  X   X  is the probability of X expanding to  X  using the rule X  X   X   X  R X . More formally, a PCFG associates each X  X  N  X  W with a distribution G X over the trees T X as follows.

If X  X  W (i.e., if X is a terminal) then G X is the distribution that puts probability 1 on the single-node tree labelled X .
 If X  X  N (i.e., if X is a nonterminal) then: where: TD A ( G 1 ,...,G n ) P P That is, TD A ( G 1 ,...,G n ) is a distribution over T
A where each subtree t i is generated indepen-dently from G i . These equations have solutions (i.e., the PCFG is said to be  X  X onsistent X ) when the rule probabilities  X  A obey certain conditions; see e.g., Wetherell (1980) for details.
 The PCFG generates the distribution over trees G
S , where S is the start symbol. The distribu-tion over the strings it generates is obtained by marginalising over the trees.
 In a Bayesian PCFG one puts Dirichlet priors Dir(  X  X ) on each of the multinomial rule proba-bility vectors  X  X for each nonterminal X  X  N . This means that there is one Dirichlet parameter  X  X  X   X  for each rule X  X   X   X  R in the CFG.
 In the  X  X nsupervised X  inference problem for a PCFG one is given a CFG, parameters  X  X for the Dirichlet priors over the rule probabilities, and a corpus of strings. The task is to infer the cor-responding posterior distribution over rule prob-abilities  X  X . Recently Bayesian inference algo-rithms for PCFGs have been described. Kurihara and Sato (2006) describe a Variational Bayes algo-rithm for inferring PCFGs using a mean-field ap-proximation, while Johnson et al. (2007a) describe a Markov Chain Monte Carlo algorithm based on Gibbs sampling. This section explains how to construct a PCFG that generates the same distribution over a collec-tion of documents as an LDA model, and where Bayesian inference for the PCFG X  X  rule proba-bilities yields the corresponding distributions as Bayesian inference of the corresponding LDA models. (There are several different ways of en-coding LDA models as PCFGs; the one presented here is not the most succinct  X  it is possible to collapse the Doc and Doc 0 nonterminals  X  but it has the advantage that the LDA distributions map straight-forwardly onto PCFG nonterminals).
The terminals W of the CFG consist of the vo-cabulary V of the LDA model plus a set of special  X  X ocument identifier X  terminals  X  j  X  for each doc-ument j  X  1 ,...,m , where m is the number of documents. In the PCFG encoding strings from document j are prefixed with  X  j  X ; this indicates to the grammar which document the string comes from. The nonterminals consist of the start symbol Sentence , Doc j and Doc 0 j for each j  X  1 ,...,m , and Topic i for each i  X  1 ,...,` , where ` is the number of topics in the LDA model.

The rules of the CFG are all instances of the following schemata: Sentence  X  Doc 0 j j  X  1 ,...,m Doc 0 j  X  j j  X  1 ,...,m Doc 0 j  X  Doc 0 j Doc j j  X  1 ,...,m Doc j  X  Topic i i  X  1 ,...,` ; j  X  1 ,...,m Topic i  X  w i  X  1 ,...,` ; w  X  V Figure 2 depicts a tree generated by such a CFG. The relationship between the LDA model and the PCFG can be understood by studying the trees generated by the CFG. In these trees the left-branching spine of nodes labelled Doc 0 j propagate the document identifier throughout the whole tree. The nodes labelled Topic i indicate the topics as-signed to particular words, and the local trees ex-panding Doc j to Topic i (one per word in the docu-ment) indicate the distribution of topics in the doc-ument.

The corresponding Bayesian PCFG associates probabilities with each of the rules in the CFG. The probabilities  X  Topic expanding the Topic i nonterminals indicate how words are distributed across topics; the  X  Topic probabilities correspond exactly to to the  X  i prob-abilities in the LDA model. The probabilities Figure 2: A tree generated by the CFG encoding an LDA topic model. The prefix  X  3  X  indicates that this string belongs to document 3. The tree also indicates the assignment of words to topics.  X 
Doc j associated with rules expanding Doc j spec-ify the distribution of topics in document j ; they correspond exactly to the probabilities  X  j of the LDA model. (The PCFG also specifies several other distributions that are suppressed in the LDA model. For example  X  Sentence specifies the distri-bution of documents in the corpus. However, it is easy to see that these distributions do not influence the topic distributions; indeed, the expansions of the Sentence nonterminal are completely deter-mined by the document distribution in the corpus, and are not affected by  X  Sentence ).
 A Bayesian PCFG places Dirichlet priors Dir(  X  A ) on the corresponding rule probabilities  X  A for each A  X  N . In the PCFG encoding an LDA model, the  X  Topic exactly to the  X  parameters of the LDA model, and eters of the LDA model.
 As suggested above, each document D j in the LDA model is mapped to a string in the corpus used to train the corresponding PCFG by prefix-ing it with a document identifier  X  j  X . Given this training data, the posterior distribution over rule probabilities  X  Doc terior distribution over topics given documents  X  j,i in the original LDA model.
 As we will see below, this connection between PCFGs and LDA topic models suggests a num-ber of interesting variants of both PCFGs and topic models. Note that we are not suggesting that Bayesian inference for PCFGs is necessar-ily a good way of estimating LDA topic models. Current Bayesian PCFG inference algorithms re-quire time proportional to the cube of the length of the longest string in the training corpus, and since these strings correspond to entire documents in our embedding, blindly applying a Bayesian PCFG in-ference algorithm is likely to be impractical.
A little reflection shows that the embedding still holds if the strings in the PCFG corpus correspond to sentences or even smaller units of the original document collection, so a single document would be mapped to multiple strings in the PCFG infer-ence task. In this way the cubic time complex-ity of PCFG inference can be mitigated. Also, the trees generated by these CFGs have a very spe-cialized left-branching structure, and it is straight-forward to modify the general-purpose CFG infer-ence procedures to avoid the cubic time complex-ity for such grammars: thus it may be practical to estimate topic models via grammatical inference.
However, we believe that the primary value of the embedding of LDA topic models into Bayesian PCFGs is theoretical: it suggests a number of novel extensions of both topic models and gram-mars that may be worth exploring. Our claim here is not that these models are the best algorithms for performing these tasks, but that the relationship we described between LDA models and PCFGs suggests a variety of interesting novel models.
We end this section with a simple example of such a modification to LDA. Inspired by the stan-dard embedding of HMMs into PCFGs, we pro-pose a  X  X ticky topic X  variant of LDA in which ad-jacent words are more likely to be assigned the same topic. Such an LDA extension is easy to describe as a PCFG (see Fox et al. (2008) for a similar model presented as an extended HMM). The nonterminals Sentence and Topic i for i = 1 ,...,` have the same interpretation as before, but we introduce new nonterminals Doc j,i that indi-cate we have just generated a nonterminal in doc-ument j belonging to topic i . Given a collection of m documents and ` topics, the rule schemata are as follows:
Sentence  X  Doc j,i i  X  1 ,...,` ; Doc j, 1  X  j j  X  1 ,...,m
Doc j,i  X  Doc j,i 0 Topic i i,i 0  X  1 ,...,` ; Topic i  X  w i  X  1 ,...,` ; w  X  V
A sample parse generated by a  X  X ticky topic X  Figure 3: A tree generated by the  X  X ticky topic X  CFG. Here a nonterminal Doc3 , 7 indicates we have just generated a word in document 3 belong-ing to topic 7.
 CFG is shown in Figure 3. The probabilities of the rules Doc j,i  X  Doc j,i 0 Topic i in this PCFG encode the probability of shifting from topic i to topic i 0 (this PCFG can be viewed as generating the string from right to left).

We can use non-uniform sparse Dirichlet pri-ors on the probabilities of these rules to encour-age  X  X opic stickiness X . Specifically, by setting the Dirichlet parameters for the  X  X opic shift X  rules Doc j,i 0  X  Doc j,i Topic i where i 0 6 = i much lower than the parameters for the  X  X opic preservation X  rules Doc j,i  X  Doc j,i Topic i , Bayesian inference will be biased to find distributions in which adja-cent words will tend to have the same topic. Non-parametric Bayesian inference, where the in-ference task involves learning not just the values of a finite vector of parameters but which parame-ters are relevant, has been the focus of intense re-search in machine learning recently. In the topic-modelling community this has lead to work on Dirichlet Processes and Chinese Restaurant Pro-cesses, which can be used to estimate the number of topics as well as their distribution across docu-ments (Teh et al., 2006).

There are two obvious non-parametric exten-sions to PCFGs. In the first we regard the set of nonterminals N as potentially unbounded, and try to learn the set of nonterminals required to de-scribe the training corpus. This approach goes un-der the name of the  X  X nfinite HMM X  or  X  X nfinite PCFG X  (Beal et al., 2002; Liang et al., 2007; Liang et al., 2009). Informally, we are given a set of  X  X a-sic categories X , say NP , VP , etc., and a set of rules that use these basic categories, say S  X  NP VP . The inference task is to learn a set of refined cate-gories and rules (e.g., S 7  X  NP 2 VP 5 ) as well as their probabilities; this approach can therefore be viewed as a Bayesian version of the  X  X plit-merge X  approach to grammar induction (Petrov and Klein, 2007).

In the second approach, which we adopt here, we regard the set of rules R as potentially un-bounded, and try to learn the rules required to describe a training corpus as well as their prob-abilities. Adaptor grammars are an example of this approach (Johnson et al., 2007b), where en-tire subtrees generated by a  X  X ase grammar X  can be viewed as distinct rules (in that we learn a sep-arate probability for each subtree). The inference task is non-parametric if there are an unbounded number of such subtrees.

We review the adaptor grammar generative pro-cess below; for an informal introduction see John-son (2008) and for details of the adaptor grammar inference procedure see Johnson and Goldwater (2009).

An adaptor grammar ( N,W,R,S, X ,A,C ) con-sists of a PCFG ( N,W,R,S, X  ) in which a sub-set A  X  N of the nonterminals are adapted , and where each adapted nonterminal X  X  A has an associated adaptor C X . An adaptor C X for X is a function that maps a distribution over trees T X to a distribution over distributions over T X (we give examples of adaptors below).

Just as for a PCFG, an adaptor grammar de-fines distributions G X over trees T X for each X  X  N  X  W . If X  X  W or X 6 X  A then G X is defined just as for a PCFG above, i.e., using (1). How-ever, if X  X  A then G X is defined in terms of an additional distribution H X as follows: G X  X  C X ( H X ) That is, the distribution G X associated with an adapted nonterminal X  X  A is a sample from adapting (i.e., applying C X to) its  X  X rdinary X  PCFG distribution H X . In general adaptors are chosen for the specific properties they have. For example, with the adaptors used here G X typically concentrates mass on a smaller subset of the trees T X than H X does.

Just as with the PCFG, an adaptor grammar gen-erates the distribution over trees G S , where S  X  N is the start symbol. However, while G S in a PCFG is a fixed distribution (given the rule probabili-ties  X  ), in an adaptor grammar the distribution G S is itself a random variable (because each G X for X  X  A is random), i.e., an adaptor grammar gen-erates a distribution over distributions over trees T
S . However, the posterior joint distribution Pr( t ) of a sequence t = ( t 1 ,...,t n ) of trees in T S is well-defined: where the integral is over all of the random distri-butions G X ,X  X  A . The adaptors we use in this paper are Dirichlet Processes or two-parameter Poisson-Dirichlet Processes, for which it is pos-sible to compute this integral. One way to do this uses the predictive distributions: Pr( t n +1 | t ,H X )  X  where t = ( t 1 ,...,t n ) and each t i  X  X  X . The pre-dictive distribution for the Dirichlet Process is the (labeled) Chinese Restaurant Process (CRP), and the predictive distribution for the two-parameter Poisson-Dirichlet process is the (labeled) Pitman-Yor Process (PYP).
 In the context of adaptor grammars, the CRP is: where n t ( t ) is the number of times t appears in t and  X  X &gt; 0 is a user-settable  X  X oncentration pa-rameter X . In order to generate the next tree t n +1 a CRP either reuses a tree t with probability pro-portional to number of times t has been previously generated, or else it  X  X acks off X  to the  X  X ase distri-bution X  H X and generates a fresh tree t with prob-ability proportional to  X  X H X ( t ) .
 The PYP is a generalization of the CRP: PYP( t | t ,a X ,b X ,H X )  X  max(0 ,n t ( t )  X  m t a X ) + ( ma X + b X ) H X ( t ) Here a X  X  [0 , 1] and b X &gt; 0 are user-settable parameters, and m t is the number of times the PYP has generated t in t from the base distribution H X , tree has been generated from H X . (In the Chinese Restaurant metaphor, m t is the number of tables labeled with t , and m is the number of occupied tables). If a X = 0 then the PYP is equivalent to a CRP with  X  X = b X , while if a X = 1 then the PYP generates samples from H X .

Informally, the CRP has a strong preference to regenerate trees that have been generated fre-quently before, leading to a  X  X ich-get-richer X  dy-namics. The PYP can mitigate this somewhat by reducing the effective count of previously gener-ated trees and redistributing that probability mass to new trees generated from H X . As Goldwa-ter et al. (2006) explain, Bayesian inference for H
X given samples from G X is effectively per-formed from types if a X = 0 and from tokens if a X = 1 , so varying a X smoothly interpolates between type-based and token-based inference.
Adaptor grammars have previously been used primarily to study grammatical inference in the context of language acquisition. The word seg-mentation task involves segmenting a corpus of unsegmented phonemic utterance representa-tions into words (Elman, 1990; Bernstein-Ratner, 1987). For example, the phoneme string corre-sponding to  X  X ou want to see the book X  (with its correct segmentation indicated) is as follows: We can represent any possible segmentation of any possible sentence as a tree generated by the fol-lowing unigram adaptor grammar .
 The trees generated by this adaptor grammar are the same as the trees generated by the CFG rules. For example, the following skeletal parse in which all but the Word nonterminals are suppressed (the others are deterministically inferrable) shows the parse that corresponds to the correct segmentation of the string above. Because the Word nonterminal is adapted (indi-cated here by underlining) the adaptor grammar learns the probability of the entire Word subtrees (e.g., the probability that b u k is a Word ); see Johnson (2008) for further details. Here we combine ideas from the unigram word segmentation adaptor grammar above and the PCFG encoding of LDA topic models to present a novel topic model that learns topical colloca-tions. (For a non-grammar-based approach to this problem see Wang et al. (2007)). Specifically, we take the PCFG encoding of the LDA topic model described above, but modify it so that the Topic i nodes generate sequences of words rather than sin-gle words. Then we adapt each of the Topic i non-terminals, which means that we learn the probabil-ity of each of the sequences of words it can expand to.

In order to demonstrate that this model works, we implemented this using the publically-available adaptor grammar inference software, 1 and ran it on the NIPS corpus (composed of pub-lished NIPS abstracts), which has previously been used for studying collocation-based topic models (Griffiths et al., 2007). Because there is no gen-erally accepted evaluation for collocation-finding, we merely present some of the sample analyses found by our adaptor grammar. We ran our adap-tor grammar with ` = 20 topics (i.e., 20 distinct Topic i nonterminals). Adaptor grammar inference on this corpus is actually relatively efficient be-cause the corpus provided by Griffiths et al. (2007) is already segmented by punctuation, so the termi-nal strings are generally rather short. Rather than set the Dirichlet parameters by hand, we placed vague priors on them and estimated them as de-scribed in Johnson and Goldwater (2009).

The following are some examples of colloca-tions found by our adaptor grammar:
The following are skeletal sample parses, where we have elided all but the adapted nonterminals (i.e., all we show are the Topic nonterminals, since the other structure can be inferred deterministi-cally). Note that because Griffiths et al. (2007) segmented the NIPS abstracts at punctuation sym-bols, the training corpus contains more than one string from each abstract. Grammars offer structural and positional sensitiv-ity that is not exploited in the basic LDA topic models. Here we explore the potential for us-ing Bayesian inference for learning linear order-ing constraints that hold between elements within proper names.

The Penn WSJ treebank is a widely used re-source within computational linguistics (Marcus et al., 1993), but one of its weaknesses is that it does not indicate any structure internal to base noun phrases (i.e., it presents  X  X lat X  analyses of the pre-head NP elements). For many applications it would be extremely useful to have a more elab-orated analysis of this kind of NP structure. For example, in an NP coreference application, if we could determine that Bill and Hillary are both first names then we could infer that Bill Clinton and Hillary Clinton are likely to refer to distinct in-dividuals. On the other hand, because Mr in Mr Clinton is not a first name, it is possible that Mr Clinton and Bill Clinton refer to the same individ-ual (Elsner et al., 2009).

Here we present an adaptor grammar based on the insights of the PCFG encoding of LDA topic models that learns some of the structure of proper names. The key idea is that elements in proper names typically appear in a fixed order; we expect honorifics to appear before first names, which ap-pear before middle names, which in turn appear before surnames, etc. Similarly, many company names end in fixed phrases such as Inc. Here we think of first names as a kind of topic, albeit one with a restricted positional location. One of the challenges is that some of these structural ele-ments can be filled by multiword expressions; e.g., de Groot can be a surname. We deal with this by permitting multi-word collocations to fill the cor-responding positions, and use the adaptor gram-mar machinery to learn these collocations.

Inspired by the grammar presented in Elsner et al. (2009), our adaptor grammar is as follows, where adapted nonterminals are indicated by un-derlining as before.

In this grammar parentheses indicate optional-ity, and the Kleene plus indicates iteration (these were manually expanded into ordinary CFG rules in our experiments). The grammar provides three different expansions for proper names. The first expansion says that a proper name can consist of some subset of the six different collocation classes A0 through A6 in that order, while the second ex-pansion says that a proper name can consist of some subset of the collocation classes B0 through B6 , again in that order. Finally, the third expan-sion says that a proper name can consist of an ar-bitrary sequence of  X  X nordered X  collocations (this is intended as a  X  X atch-all X  expansion to provide analyses for proper names that don X  X  fit either of the first two expansions).

We extracted all of the proper names (i.e., phrases of category NNP and NNPS) in the Penn WSJ treebank and used them as the training cor-pora for the adaptor grammar just described. The adaptor grammar inference procedure found skele-tal sample parses such as the following: While a full evaluation will have to await further study, in general it seems to distinguish person names from company names reasonably reliably, and it seems to have discovered that person names consist of a first name ( A0 ), a middle name or ini-tial ( A2 ), a surname ( A3 ) and an optional suffix ( A4 ). Similarly, it seems to have uncovered that company names typically end in a phrase such as inc , ltd or co . This paper establishes a connection between two very different kinds of probabilistic models; LDA models of the kind used for topic modelling, and PCFGs, which are a standard model of hierarchi-cal structure in language. The embedding we pre-sented shows how to express an LDA model as a PCFG, and has the property that Bayesian infer-ence of the parameters of that PCFG produces an equivalent model to that produced by Bayesian in-ference of the LDA model X  X  parameters.

The primary value of this embedding is theoret-ical rather than practical; we are not advocating the use of PCFG estimation procedures to infer LDA models. Instead, we claim that the embed-ding suggests novel extensions to both the LDA topic models and PCFG-style grammars. We jus-tified this claim by presenting several hybrid mod-els that combine aspects of both topic models and grammars. We don X  X  claim that these are neces-sarily the best models for performing any particu-lar tasks; rather, we present them as examples of models inspired by a combination of PCFGs and LDA topic models. We showed how the LDA to PCFG embedding suggested a  X  X ticky topic X  model extension to LDA. We then discussed adap-tor grammars, and inspired by the LDA topic mod-els, presented a novel topic model whose prim-itive elements are multi-word collocations rather than words. We concluded with an adaptor gram-mar that learns aspects of the internal structure of proper names.
 This research was funded by US NSF awards 0544127 and 0631667, as well as by a start-up award from Macquarie University. I X  X  like to thank the organisers and audience at the Topic Modeling workshop at NIPS 2009, my former col-leagues at Brown University (especially Eugene Charniak, Micha Elsner, Sharon Goldwater, Tom Griffiths and Erik Sudderth), my new colleagues at Macquarie University and the ACL reviewers for their excellent suggestions and comments on this work. Naturally all errors remain my own.
