 Transliteration mining is the extraction of translit-eration pairs from unlabelled data. Most transliter-ation mining systems are built using labelled train-ing data or using heuristics to extract transliteration pairs. These systems are language pair dependent or require labelled information for training. Our sys-tem extracts transliteration pairs in an unsupervised fashion. It is also able to utilize labelled information if available, obtaining improved performance.
We present a novel model of transliteration min-ing defined as a mixture of a transliteration model and a non-transliteration model. The transliteration model is a joint source channel model (Li et al., 2004). The non-transliteration model assumes no correlation between source and target word charac-ters, and independently generates a source and a tar-get word using two fixed unigram character models. We use Expectation Maximization (EM) to learn pa-rameters maximizing the likelihood of the interpola-tion of both sub-models. At test time, we label word pairs as transliterations if they have a higher proba-bility assigned by the transliteration sub-model than by the non-transliteration sub-model.

We extend the unsupervised system to a semi-supervised system by adding a new S-step to the EM algorithm. The S-step takes the probability es-timates from unlabelled data (computed in the M-step) and uses them as a backoff distribution to smooth probabilities which were estimated from la-belled data. The smoothed probabilities are then used in the next E-step. In this way, the parame-ters learned by EM are constrained to values which are close to those estimated from the labelled data.
We evaluate our unsupervised and semi-supervised transliteration mining system on the datasets available from the NEWS 2010 shared task on transliteration mining (Kumaran et al., 2010b). We call this task NEWS10 later on. Compared with a baseline unsupervised system our unsupervised system achieves up to 5% better F-measure. On the NEWS10 dataset, our unsupervised system achieves an F-measure of up to 95.7%, and on three language pairs, it performs better than all systems which participated in NEWS10. We also evaluate our semi-supervised system which additionally uses the NEWS10 labelled data for training. It achieves an improvement of up to 3.7% F-measure over our unsupervised system. Additional experiments on parallel corpora show that we are able to effectively mine transliteration pairs from very noisy data.
The paper is organized as follows. Section 2 de-scribes previous work. Sections 3 and 4 define our unsupervised and semi-supervised models. Section 5 presents the evaluation. Section 6 concludes. We first discuss the literature on semi-supervised and supervised techniques for transliteration min-ing and then describe a previously defined unsuper-vised system. Supervised and semi-supervised sys-tems use a manually labelled set of training data to learn character mappings between source and tar-get strings. The labelled training data either con-sists of a few hundred transliteration pairs or of just a few carefully selected transliteration pairs. The NEWS 2010 shared task on transliteration min-ing (NEWS10) (Kumaran et al., 2010b) is a semi-supervised task conducted on Wikipedia InterLan-guage Links (WIL) data. The NEWS10 dataset con-tains 1000 labelled examples (called the  X  X eed data X ) for initial training. All systems which participated in the NEWS10 shared task are either supervised or semi-supervised. They are described in (Kumaran et al., 2010a). Our transliteration mining model can mine transliterations without using any labelled data. However, if there is some labelled data avail-able, our system is able to use it effectively.
The transliteration mining systems evaluated on the NEWS10 dataset generally used heuristic meth-ods, discriminative models or generative models for transliteration mining (Kumaran et al., 2010a).
The heuristic-based system of Jiampojamarn et al. (2010) is based on the edit distance method which scores the similarity between source and tar-get words. They presented two discriminative meth-ods  X  an SVM-based classifier and alignment-based string similarity for transliteration mining. These methods model the conditional probability distribu-tion and require supervised/semi-supervised infor-mation for learning. We propose a flexible genera-tive model for transliteration mining usable for both unsupervised and semi-supervised learning.
 Previous work on generative approaches uses Hidden Markov Models (Nabende, 2010; Darwish, 2010; Jiampojamarn et al., 2010), Finite State Au-tomata (Noeman and Madkour, 2010) and Bayesian learning (Kahki et al., 2011) to learn transliteration pairs from labelled data. Our method is different from theirs as our generative story explains the un-labelled data using a combination of a transliteration and a non-transliteration sub-model. The translit-eration model jointly generates source and target strings, whereas the non-transliteration system gen-erates them independently of each other.

Sajjad et al. (2011) proposed a heuristic-based un-supervised transliteration mining system. We later call it Sajjad11 . It is the only unsupervised mining system that was evaluated on the NEWS10 dataset up until now, as far as we know. That system is com-putationally expensive. We show in Section 5 that its runtime is much higher than that of our system.
In this paper, we propose a novel model-based approach to transliteration mining. Our approach is language pair independent  X  at least for alpha-betic languages  X  and efficient. Unlike the pre-vious unsupervised system, and unlike the super-vised and semi-supervised systems we mentioned, our model can be used for both unsupervised and semi-supervised mining in a consistent way. A source word and its corresponding target word can be character-aligned in many ways. We refer to a possible alignment sequence which aligns a source word e and a target word f as  X  a  X  . The function Align ( e,f ) returns the set of all valid alignment se-quences a of a word pair ( e,f ) . The joint transliter-ation probability p 1 ( e,f ) of a word pair is the sum of the probabilities of all alignment sequences:
Transliteration systems are trained on a list of transliteration pairs. The alignment between the transliteration pairs is learned with Expectation Maximization (EM). We use a simple unigram model, so an alignment sequence from function Align ( e,f ) is a combination of 0 X 1, 1 X 1, and 1 X  0 character alignments between a source word e and its transliteration f . We refer to a character align-ment unit as  X  X ultigram X  later on and represent it by the symbol  X  q  X  . A sequence of multigrams forms an alignment of a source and target word. The prob-ability of a sequence of multigrams a is the product of the probabilities of the multigrams it contains.
While transliteration systems are trained on a clean list of transliteration pairs, our translitera-tion mining system has to learn from data con-taining both transliterations and non-transliterations. The transliteration model p 1 ( e,f ) handles only the transliteration pairs. We propose a second model p ( e,f ) to deal with non-transliteration pairs (the  X  X on-transliteration model X  ). Interpolation with the non-transliteration model allows the transliteration model to concentrate on modelling transliterations during EM training. After EM training, transliter-ation word pairs are assigned a high probability by the transliteration submodel and a low probability by the non-transliteration submodel, and vice versa for non-transliteration pairs. This property is exploited to identify transliterations.

In a non-transliteration word pair, the characters of the source and target words are unrelated. We model them as randomly seeing a source word and a target word together. The non-transliteration model uses random generation of characters from two uni-gram models. It is defined as follows: p
E ( e ) = Q
The transliteration mining model is an interpo-lation of the transliteration model p 1 ( e,f ) and the non-transliteration model p 2 ( e,f ) :  X  is the prior probability of non-transliteration. 3.1 Model Estimation In this section, we discuss the estimation of the pa-rameters of the transliteration model p 1 ( e,f ) and the non-transliteration model p 2 ( e,f ) .

The non-transliteration model consists of two un-igram character models. Their parameters are esti-mated from the source and target words of the train-ing data, respectively, and the parameters do not change during EM training.

For the transliteration model, we implement a simplified form of the grapheme-to-phoneme con-verter, g2p (Bisani and Ney, 2008). In the follow-ing, we use notations from Bisani and Ney (2008). g2p learns m-to-n character alignments between a source and a target word. We restrict ourselves to 0 X 1,1 X 1,1 X 0 character alignments and to a unigram model. 1 The Expectation Maximization (EM) algo-rithm is used to train the model. It maximizes the likelihood of the training data. In the E-step the EM algorithm computes expected counts for the multi-grams and in the M-step the multigram probabilities are reestimated from these counts. These two steps are iterated. For the first EM iteration, the multigram probabilities are initialized with a uniform distribu-tion and  X  is set to 0 . 5 .

The expected count of a multigram q (E-step) is computed by multiplying the posterior probability of each alignment a with the frequency of q in a and summing these weighted frequencies over all align-ments of all word pairs. c ( q ) = n q ( a ) is here the number of times the multigram q occurs in the sequence a and p ( e i ,f i ) is defined in Equation 4. The new estimate of the probability of a multigram is given by:
Likewise, we calculate the expected count of non-transliterations by summing the posterior probabili-ties of non-transliteration given each word pair:  X  is then reestimated by dividing the expected count of non-transliterations by N . 3.2 Implementation Details We use the Forward-Backward algorithm to estimate the counts of multigrams. The algorithm has a for-ward variable  X  and a backward variable  X  which are calculated in the standard way (Deligne and Bimbot, 1995). Consider a node r which is connected with a node s via an arc labelled with the multigram q . The expected count of a transition between r and s is calculated using the forward and backward prob-abilities as follows: where E is the final node of the graph.

We multiply the expected count of a transition by the posterior probability of transliteration (1  X  p ntr ( e,f )) which indicates how likely the string pair is to be a transliteration. The counts  X  rs are then summed for all multigram types q over all training pairs to obtain the frequencies c ( q ) which are used to reestimate the multigram probabilities according to Equation 5. Our unsupervised transliteration mining system can be applied to language pairs for which no labelled data is available. However, the unsupervised sys-tem is focused on high recall and also mines close transliterations (see Section 5 for details). In a task dependent scenario, it is difficult for the unsuper-vised system to mine transliteration pairs according to the details of a particular definition of what is con-sidered a transliteration (which may vary somewhat with the task). In this section, we propose an exten-sion of our unsupervised model which overcomes this shortcoming by using labelled data. The idea is to rely on probabilities from labelled data where they can be estimated reliably and to use probabili-ties from unlabelled data where the labelled data is sparse. This is achieved by smoothing the labelled data probabilities using the unlabelled data probabil-ities as a backoff. 4.1 Model Estimation We calculate the unlabelled data probabilities in the E-step using Equation 4. For labelled data (contain-ing only transliterations) we set  X  = 0 and get:
In every EM iteration, we smooth the probability distribution in such a way that the estimates of the multigrams of the unlabelled data that do not occur in the labelled data would be penalized. We obtain this effect by smoothing the probability distribution of unlabelled and labelled data using a technique similar to Witten-Bell smoothing (Witten and Bell, 1991), as we describe below.
 4.2 Implementation Details We divide the training process of semi-supervised mining in two steps as shown in Figure 1. The first step creates a reasonable alignment of the labelled data from which multigram counts can be obtained. The labelled data is a small list of transliteration pairs. Therefore we use the unlabelled data to help correctly align it and train our unsupervised min-ing system on the combined labelled and unlabelled training data. In the expectation step, the prior prob-ability of non-transliteration  X  is set to zero on the labelled data since it contains only transliterations. The first step passes the resulting multigram proba-bility distribution to the second step.

We start the second step with the probability es-timates from the first step and run the E-step sepa-rately on labelled and unlabelled data. The E-step on the labelled data is done using Equation 8, which forces the posterior probability of non-transliteration to zero, while the E-step on the unlabelled data uses Equation 4. After the two E-steps, we estimate a probability distribution from the counts obtained from the unlabelled data (M-step) and use it as a backoff distribution in computing smoothed proba-bilities from the labelled data counts (S-step).
The smoothed probability estimate  X  p ( q ) is: where c s ( q ) is the labelled data count of the multi-gram q , p ( q ) is the unlabelled data probability es-timate, and N s = P q c s ( q ) , and  X  s is the number of different multigram types observed in the Viterbi alignment of the labelled data. We evaluate our unsupervised system and semi-supervised system on two tasks, NEWS10 and paral-lel corpora. NEWS10 is a standard task on translit-eration mining from WIL. On NEWS10, we com-pare our results with the unsupervised mining sys-tem of Sajjad et al. (2011), the best supervised and semi-supervised systems presented at NEWS10 (Kumaran et al., 2010b) and the best supervised and semi-supervised results reported in the literature for the NEWS10 task. For the challenging task of min-ing from parallel corpora, we use the English/Hindi and English/Arabic gold standard provided by Saj-jad et al. (2011) to evaluate our results. 5.1 Experiments using the NEWS10 Dataset We conduct experiments on four language pairs: En-glish/Arabic, English/Hindi, English/Tamil and En-glish/Russian using data provided at NEWS10. Ev-ery dataset contains training data, seed data and ref-erence data. The NEWS10 data consists of pairs of titles of the same Wikipedia pages written in dif-ferent languages, which may be transliterations or translations. The seed data is a list of 1000 transliter-ation pairs provided to semi-supervised systems for initial training. We use the seed data only in our semi-supervised system, and not in the unsupervised system. The reference data is a small subset of the training data which is manually annotated with pos-itive and negative examples. 5.1.1 Training
We word-aligned the parallel phrases of the train-ing data using GIZA++ (Och and Ney, 2003), and symmetrized the alignments using the grow-diag-final-and heuristic (Koehn et al., 2003). We extract all word pairs which occur as 1-to-1 alignments (like Sajjad et al. (2011)) and later refer to them as the word-aligned list . We compared the word-aligned list with the NEWS10 reference data and found that the word-aligned list is missing some transliteration pairs because of word-alignment errors. We built an-other list by adding a word pair for every source word that cooccurs with a target word in a paral-lel phrase/sentence and call it the cross-product list later on. The cross-product list is noisier but con-tains almost all transliteration pairs in the corpus.
Table 1 shows the statistics of the word-aligned list and the cross-product list calculated using the NEWS10 reference data. 2 The word-aligned list cal-culated from the NEWS10 dataset is used to com-pare our unsupervised system with the unsupervised system of Sajjad et al. (2011) on the same training data. All the other experiments on NEWS10 use cross-product lists. We remove numbers from both lists as they are defined as non-transliterations (Ku-maran et al., 2010b). 5.1.2 Unsupervised Transliteration Mining
We run our unsupervised transliteration mining system on the word-aligned list and the cross-product list. The word pairs with a posterior prob-ability of transliteration 1  X  p ntr ( e,f ) = 1  X   X p 2 ( e i ,f i ) /p ( e i ,f i ) greater than 0 . 5 are selected as transliteration pairs.

We compare our unsupervised system with the unsupervised system of Sajjad11. Our unsupervised system trained on the word-aligned list shows F-measures of 91.7%, 95.5%, 92.9% and 77.7% which is 4.3%, 3.3%, 2.8% and 1.7% better than the sys-tem of Sajjad11 on English/Arabic, English/Hindi, English/Tamil and English/Russian respectively.
Sajjad11 is computationally expensive. For in-stance, a phrase-based statistical MT system is built once in every iteration of the heuristic proce-dure. We ran Sajjad11 on the English/Russian word-aligned list using a 2.4 GHz Dual-Core AMD ma-chine, which took almost 10 days. On the same ma-chine, our transliteration mining system only takes 1 . 5 hours to finish the same experiment.
Our unsupervised mining system built on the cross-product list consistently outperforms the one built on the word-aligned list. Later, we consider only the system built on the cross-product list. Ta-ble 2 shows the results of our unsupervised sys-tem O U in comparison with the unsupervised sys-tem of Sajjad11 (SJD), the best semi-supervised sys-tems presented at NEWS10 ( S BEST ) and the best semi-supervised results reported on the NEWS10 dataset ( GR , DBN ). On three language pairs, our unsupervised system performs better than all semi-supervised systems which participated in NEWS10. It has competitive results with the best supervised results reported on NEWS10 datasets. On En-glish/Hindi, our unsupervised system outperforms the state-of-the-art supervised and semi-supervised systems. Kahki et al. (2011) ( GR ) achieved the best results on English/Arabic, English/Tamil and English/Russian. For the English/Arabic task, they normalized the data using language dependent heuristics 3 and also used a non-standard evaluation method (discussed in Section 5.1.4).

On the English/Russian dataset, our unsupervised system faces the problem that it extracts cognates as transliterations. The same problem was reported in Sajjad et al. (2011). Cognates are close translit-erations which differ by only one or two characters from an exact transliteration pair. The unsupervised system learns to delete the additional one or two characters with a high probability and incorrectly mines such word pairs as transliterations. 5.1.3 Semi-supervised Transliteration Mining
Our semi-supervised system uses similar initial-ization of the parameters as used for unsupervised system. Table 2 shows on three language pairs, our semi-supervised system O S only achieves a small gain in F-measure over our unsupervised system O
U . This shows that the unlabelled training data is already providing most of the transliteration infor-mation. The seed data is used to help the translit-eration mining system to learn the right definition of transliteration. On the English/Russian dataset, our semi-supervised system achieves almost 7% in-crease in precision with a 2.2% drop in recall com-pared to our unsupervised system. This provides a 3.7% gain on F-measure. The increase in precision shows that the seed data is helping the system in dis-ambiguating transliteration pairs from cognates. 5.1.4 Discussion
The unsupervised system produces lists with high recall. The semi-supervised system tends to better balance out precision and recall. Table 3 compares the precision, recall and F-measure of our unsuper-vised and semi-supervised mining systems.

The errors made by our semi-supervised system can be classified into the following categories:
Pronunciation differences: English proper names may be pronounced differently in other lan-guages. Sometimes, English short vowels are con-verted to long vowels in Hindi such as the English word  X  X anthanum X  which is pronounced  X  X aan-thanum X  in Hindi. Our transliteration mining system wrongly extracts such pairs as transliterations.
In some cases, different vowels are used in two languages. The English word  X  X anuary X  is pro-nounced as  X  X anvary X  in Hindi. Such word pairs are non-transliterations according to the gold standard but our system extracts them as transliterations. Ta-ble 4 shows a few examples of such word pairs.
Inconsistencies in the gold standard: There are several inconsistencies in the gold standard where our transliteration system correctly identifies a word pair as a transliteration but it is marked as a non-transliteration or vice versa. Consider the example of the English word  X  X eorge X  which is pronounced as  X  X aarj X  in Hindi. Our semi-supervised system learns this as a non-transliteration but it is wrongly annotated as a transliteration in the gold standard.
Arabic nouns have an article  X  X l X  attached to them which is translated in English as  X  X he X . There are various cases in the training data where an English noun such as  X  X uran X  is matched with an Arabic noun  X  X lQuran X . Our mining system classifies such cases as non-transliterations, but 24 of them are in-correctly annotated as transliterations in the gold standard. We did not correct this, and are there-fore penalized. Kahki et al. (2011) preprocessed such Arabic words and separated  X  X l X  from the noun  X  X uran X  before mining. They report a match if the version of the Arabic word with  X  X l X  appears with the corresponding English word in the gold stan-dard. Table 5 shows examples of word pairs which are wrongly annotated as transliterations.

Cognates: Sometimes a word pair differs by only one or two ending characters from a true translit-eration. For example in the English/Russian train-ing data, the Russian nouns are marked with cases whereas their English counterparts do not mark the case or translate it as a separate word. Often the Russian word differs only by the last character from a correct transliteration of the English word. Due to the large amount of such word pairs in the En-glish/Russian data, our mining system learns to delete the final case marking characters from the Russian words. It assigns a high transliteration prob-ability to these word pairs and extracts them as transliterations. Table 6 shows some examples.
There are two English/Russian supervised sys-tems which are better than our semi-supervised sys-tem. The Kahki et al. (2011) system is built on seed data only. Jiampojamarn et al. (2010) X  X  best sys-tem on English/Russian is based on the edit distance method. Both of these systems are focused on high precision. Our semi-supervised system is focused on high recall at the cost of lower precision. 4 5.2 Transliteration Mining using Parallel The percentage of transliteration pairs in the NEWS10 datasets is high. We further check the ef-fectiveness of our unsupervised and semi-supervised mining systems by evaluating them on parallel cor-pora with as few as 2% transliteration pairs.
We conduct experiments using two language pairs, English/Hindi and English/Arabic. The En-glish/Hindi corpus is from the shared task on word alignment organized as part of the ACL 2005 Work-shop on Building and Using Parallel Texts (WA05) (Martin et al., 2005). For English/Arabic, we use 200,000 parallel sentences from the United Nations (UN) corpus (Eisele and Chen, 2010). The En-glish/Hindi and English/Arabic transliteration gold standards were provided by Sajjad et al. (2011). 5.2.1 Experiments
We follow the procedure for creating the training data described in Section 5.1.1 and build a word-aligned list and a cross-product list from the parallel corpus. We first train and test our unsupervised min-ing system on the word-aligned list and compare our results with Sajjad et al. Table 7 shows the results. Our unsupervised system achieves 0.6% and 1.8% higher F-measure than Sajjad et al. respectively.
The cross-product list is huge in comparison to the word-aligned list. It is noisier than the word-aligned list but has almost 100% recall of transliter-ation pairs. The English-Hindi cross-product list has almost 55% more transliteration pairs (412 types) than the word-aligned list (180 types). We can not report these numbers on the English/Arabic cross-product list since the English/Arabic gold standard is built on the word-aligned list.

In order to keep the experiment computationally inexpensive, we train our mining systems on the word-aligned list and test them on the cross-product list. 5 We also perform the first semi-supervised eval-uation on this task. For our semi-supervised sys-tem, we additionally use the English/Hindi and En-glish/Arabic seed data provided by NEWS10.

Table 8 shows the results of our unsupervised and semi-supervised systems on the English/Hindi and English/Arabic parallel corpora. Our unsu-pervised system achieves higher recall than our semi-supervised system but lower precision. The semi-supervised system shows an improvement in F-measure for both language pairs. We looked into the errors made by our systems. The mined transliteration pairs of our unsupervised system con-tains 65 and 111 close transliterations for the En-glish/Hindi and English/Arabic task respectively. The close transliterations only differ by one or two characters from correct transliterations. We think these pairs provide transliteration information to the systems and help them to avoid problems with data sparseness. Our semi-supervised system uses the seed data to identify close transliterations as non-transliterations and decreases the number of false positives. They are reduced to 35 and 89 for English/Hindi and English/Arabic respectively. The seed data and the training data used in the semi-supervised system are from different domains (Wikipedia and UN). Seed data extracted from the same domain is likely to work better, resulting in even higher scores than we have reported. We presented a novel model to automatically mine transliteration pairs. Our approach is ef-ficient and language pair independent (for alpha-betic languages). Both the unsupervised and semi-supervised systems achieve higher accuracy than the only unsupervised transliteration mining system we are aware of and are competitive with the state-of-the-art supervised and semi-supervised systems. Our semi-supervised system outperformed our un-supervised system, in particular in the presence of prevalent cognates in the Russian/English data.
In future work, we plan to adapt our approach to language pairs where one language is alphabetic and the other language is non-alphabetic such as En-glish/Japanese. These language pairs require one-to-many character mappings to learn transliteration units, while our current system only learns unigram character alignments.
 The authors wish to thank the anonymous review-ers. We would like to thank Syed Aoun Raza for discussions of implementation efficiency. Hassan Sajjad was funded by the Higher Education Com-mission of Pakistan. Alexander Fraser was funded by Deutsche Forschungsgemeinschaft grant Models of Morphosyntax for Statistical Machine Transla-tion. Helmut Schmid was supported by Deutsche Forschungsgemeinschaft grant SFB 732. This work was supported in part by the IST Programme of the European Community, under the PASCAL2 Net-work of Excellence, IST-2007-216886. This publi-cation only reflects the authors X  views.
