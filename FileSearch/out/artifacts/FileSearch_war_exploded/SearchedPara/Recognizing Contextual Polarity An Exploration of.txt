 University of Edinburgh University of Pittsburgh University of Pittsburgh
Many approaches to automatic sentiment analysis begin with a large lexicon of words marked with their prior polarity (also called semantic orientation). However, the contextual polarity of the phrase in which a particular instance of a word appears may be quite different from the word X  X  prior polarity. Positive words are used in phrases expressing negative sentiments, or vice versa. Also, quite often words that are positive or negative out of context are neutral in context, meaning they are not even being used to express a sentiment. The goal of this work is to automatically distinguish between prior and contextual polarity, with a focus on understanding which features are important for this task. Because an important aspect of the problem is identifying when polar terms are being used in neutral contexts, features for distinguishing between neutral and polar instances are evaluated, as well as features for distinguishing between positive and negative contextual polarity. The evaluation includes assessing the performance of features across multiple machine learning algorithms. For all learning algorithms except one, the combination of all features together gives the best performance. Another facet of the distinguishing between positive and negative polarity. These experiments show that the presence of neutral instances greatly degrades the performance of these features, and that perhaps the best way to improve performance across all polarity classes is to improve the system X  X  ability to identify when an instance is neutral. 1 .Introduction
Sentiment analysis is a type of subjectivity analysis (Wiebe 1994) that focuses on iden-tifying positive and negative opinions, emotions, and evaluations expressed in natural language. It has been a central component in applications ranging from recognizing inflammatory messages (Spertus 1997), to tracking sentiments over time in online discussions (Tong 2001), to classifying positive and negative reviews (Pang, Lee, and
Vaithyanathan 2002; Turney 2002). Although a great deal of work in sentiment analy-sis has targeted documents, applications such as opinion question answering (Yu and
Hatzivassiloglou 2003; Maybury 2004; Stoyanov, Cardie, and Wiebe 2005) and re-view mining to extract opinions about companies and products (Morinaga et al. 2002;
Nasukawa and Yi 2003) require sentence-level or even phrase-level analysis. For exam-ple, if a question answering system is to successfully answer questions about people X  X  opinions, it must be able not only to pinpoint expressions of positive and negative sentiments, such as we find in sentence (1), but also to determine when an opinion is not being expressed by a word or phrase that typically does evoke one, such as condemned in sentence (2). about which words and phrases are positive and which are negative. This lexicon may be manually compiled, as is the case with the General Inquirer (Stone et al. 1966), a resource often used in sentiment analysis. Alternatively, the information in the lexicon may be acquired automatically. Acquiring the polarity of words and phrases is itself an active line of research in the sentiment analysis community, pioneered by the work of Hatzivassiloglou and McKeown (1997) on predicting the polarity or semantic orientation of adjectives. Various techniques have been proposed for learning the polarity of words. They include corpus-based techniques, such as using constraints on the co-occurrence in conjunctions of words with similar or opposite polarity (Hatzivassiloglou and McKeown 1997) and statistical measures of word association (Turney and Littman 2003), as well as techniques that exploit information about lexical relationships (Kamps and Marx 2002; Kim and Hovy 2004) and glosses (Esuli and Sebastiani 2005; Andreevskaia and Bergler 2006) in resources such as WordNet. are still open research challenges, such as addressing the sentiments of different senses of words (Esuli and Sebastiani 2006b; Wiebe and Mihalcea 2006), and so on. However, what the polarity of a given word or phrase is when it is used in a particular context is another problem entirely. Consider, for example, the underlined positive and negative words in the following sentence.
The first underlined word is Trust . Although many senses of the word trust express a positive sentiment, in this case, the word is not being used to express a sentiment at all. It is simply part of an expression referring to an organization that has taken on the charge of caring for the environment. The adjective well is considered positive, and indeed it is positive in this context. However, the same is not true for the words reason 400 and reasonable. Out of context, we would consider both of these words to be positive.
In context, the word reason is being negated, changing its polarity from positive to negative. The phrase no reason at all to believe changes the polarity of the proposition that follows; because reasonable falls within this proposition, its polarity becomes negative.
The word polluters has a negative connotation, but here in the context of the discussion of the article and its position in the sentence, polluters is being used less to express a sentiment and more to objectively refer to companies that pollute. To clarify how the polarity of polluters is affected by its subject role, consider the purely negative sentiment that emerges when it is used as an object: They are polluters .
 polarity , and we call the polarity of the expression in which a word appears, con-sidering the context of the sentence and document, the word X  X  contextual polarity .
Although words often do have the same prior and contextual polarity, many times a word X  X  prior and contextual polarities differ. Words with a positive prior polarity may have a negative contextual polarity, or vice versa. Quite often words that are positive or negative out of context are neutral in context, meaning that they are not even being used to express a sentiment. Similarly, words that are neutral out of context, neither positive or negative, may combine to create a positive or negative expression in context.
 disambiguating the contextual polarity of words with positive or negative prior polar-ity. We begin by presenting an annotation scheme for marking sentiment expressions and their contextual polarity in the Multi-perspective Question Answering (MPQA) opinion corpus. We show that, given a set of subjective expressions (identified from the existing annotations in the MPQA corpus), contextual polarity can be annotated reliably.
 distinguishing between prior and contextual polarity. Beginning with a large lexicon of clues tagged with prior polarity, we identify the contextual polarity of the instances of those clues in the corpus. The process that we use has two steps, first classifying each clue as being in a neutral or polar phrase, and then disambiguating the contextual polarity of the clues marked as polar. For each step in the process, we experiment with a variety of features and evaluate the performance of the features using several different machine learning algorithms.
 rately identify neutral contextual polarity X  X hen a positive or negative clue is not being used to express a sentiment X  X s an important aspect of the problem. The importance of neutral examples has previously been noted for classifying the sentiment of documents (Koppel and Schler 2006), but ours is the first work to explore how neutral instances affect classifying the contextual polarity of words and phrases. In particular, we found that the performance of features for distinguishing between positive and negative po-larity greatly degrades when neutral instances are included in the experiments. larity requires a wide variety of features. This is particularly true for distinguishing between neutral and polar instances. Although some features help to increase polar or neutral recall or precision, it is only the combination of features together that achieves significant improvements in accuracy over the baselines. Our experiments show that for distinguishing between positive and negative instances, features capturing negation are clearly the most important. However, there is more to the story than simple negation.
Features that capture relationships between instances of clues also perform well, indi-cating that identifying features that represent more complex interdependencies between sentiment clues may be an important avenue for future research.
 of some of the things that can influence contextual polarity. In Section 3, we describe our corpus and present our annotation scheme and inter-annotator agreement study for marking contextual polarity. Sections 4 and 5 describe the lexicon used in our experiments and how the contextual polarity annotations are used to determine the gold-standard tags for instances from the lexicon. In Section 6, we consider what kind of performance can be expected from a simple, prior-polarity classifier. Section 7 describes the features that we use for recognizing contextual polarity, and our experiments and results are presented in Section 8. In Section 9we discuss related work, and we conclude in Section 10. 2 .Polarity Influencers
Phrase-level sentiment analysis is not a simple problem. Many things besides negation can influence contextual polarity, and even negation is not always straightforward.
Negation may be local (e.g., not good ), or involve longer-distance dependencies such as the negation of the proposition (e.g., does not look very good ) or the negation of the subject (e.g., no one thinks that it X  X  good ). In addition, certain phrases that contain negation words intensify rather than change polarity (e.g., not only good but amazing ). Contextual polarity may also be influenced by modality: whether the proposition is asserted to be real ( realis )
Environmental Trust vs. He has won the people X  X  trust ); the syntactic role of a word in the sentence: whether the word is the subject or object of a copular verb (consider polluters
Polanyi and Zaenen (2004) give a detailed discussion of many of these types of polarity influencers. Many of these contextual polarity influencers are represented as features in our experiments.
 the word cool is positive if used to describe a car, but it is negative if it is used to describe someone X  X  demeanor. Similarly, a word such as fever is unlikely to be expressing a sentiment when used in a medical context. We use one feature in our experiments to represent the topic of the document.
 who is expressing the sentiment. For example, consider the phrase failed to defeat in the sentence Israel failed to defeat Hezbollah . From the perspective of Israel, failed to defeat is negative. From the perspective of Hezbollah, failed to defeat is positive.
Therefore, the contextual polarity of this phrase ultimately depends on the perspec-tive of who is expressing the sentiment. Although automatically detecting this kind of pragmatic influence on polarity is beyond the scope of this work, this as well as the other types of polarity influencers all are considered when annotating contextual polarity. 402 3 .Data and Annotations
For the experiments in this work, we need a corpus that is annotated comprehensively for sentiment expressions and their contextual polarity. Rather than building a corpus from scratch, we chose to add contextual polarity annotations to the existing annota-tions in the Multi-perspective Question Answering (MPQA) opinion corpus Wilson, and Cardie 2005).
 from the world press. The documents contain detailed, expression-level annotations of attributions and private states (Quirk et al. 1985). Private states are mental and emotional states; they include beliefs, speculations, intentions, and sentiments, among others. Although sentiments are not distinguished from other types of private states in the existing annotations, they are a subset of what already is annotated. This makes the annotations in the MPQA corpus a good starting point for annotating sentiment expressions and their contextual polarity. 3.1 Annotation Scheme
When developing our annotation scheme for sentiment expressions and contextual polarity, there were three main questions to address. First, which of the existing annota-tions in the MPQA corpus have the possibility of being sentiment expressions? Second, which of the possible sentiment expressions actually are expressing sentiments? Third, what coding scheme should be used for marking contextual polarity? frames, two types of private state frames, and agent frames that are used for marking speakers of speech events and experiencers of private states. A full description of the MPQA annotation scheme and an agreement study evaluating key aspects of the scheme are found in Wiebe, Wilson, and Cardie (2005).
 jective element frames , are where we will find sentiment expressions. Direct subjective frames are used to mark direct references to private states as well as speech events in which private states are being expressed. For example, in the following sentences, fears, praised, and said are all marked as direct subjective annotations.
The word fears directly refers to a private state; praised refers to a speech event in which a private state is being expressed; and said is marked as direct subjective because a private state is being expressed within the speech event referred to by said. Expressive subjective elements indirectly express private states through the way something is described or through a particular wording. In example (6), the phrase full of absurdities is an expressive subjective element. Subjectivity (Banfield 1982; Wiebe 1994) refers to the linguistic expression of private states, hence the names for the two types of private state annotations.
 the possibility of being sentiment expressions, but the direct subjective frames to include in this set can be pared down further. Direct subjective frames have an attribute, expres-sion intensity , that captures the contribution of the annotated word or phrase to the overall intensity of the private state being expressed. Expression intensity ranges from neutral to high . In the given sentences, fears and praised have an expression intensity of medium, and said has an expression intensity of neutral. A neutral expression intensity indicates that the direct subjective phrase itself is not contributing to the expression of the private state. If this is the case, then the direct subjective phrase cannot be a sentiment expression. Thus, only direct subjective annotations with a non-neutral expression intensity are included in the set of annotations that have the possibility of being sentiment expressions. We call this set of annotations, the union of the expres-sive subjective elements and the direct subjective frames with a non-neutral intensity, the subjective expressions in the corpus; these are the annotations we will mark for contextual polarity.

Although many of the words and phrases express what we typically think of as sentiments, others do not, for example, believes, very definitely, and unconditionally and without delay.
 timent expressions, the next question is which of these annotated words and phrases are actually expressing sentiments. We define a sentiment as a positive or negative emotion, evaluation, or stance. On the left of Table 2 are examples of positive sentiments; examples of negative sentiments are on the right.
 404 polarity. The scheme we developed has four tags: positive , negative , both ,and neutral .
The positive tag is used to mark positive sentiments. The negative tagisusedtomark negative sentiments. The both tag is applied to expressions in which both a positive and negative sentiment are being expressed. Subjective expressions with positive , negative ,or both tags are our sentiment expressions. The neutral tag is used for all other subjective expressions, including emotions, evaluations, and stances that are neither positive or negative. Instructions for the contextual-polarity annotation scheme are available at http://www.cs.pitt.edu/mpqa/databaserelease/polarityCodingInstructions.txt.
 annotations. Each underlined word or phrase is a subjective expression that was marked in the original MPQA annotations. 3 In bold following each subjective expression is the contextual polarity with which it was annotated. textual polarity of the sentiment that is ultimately being conveyed by the subjective expression, that is, once the sentence has been fully interpreted. Thus, the subjective expression, they have not succeeded, and will never succeed, is marked as positive in the following sentence:
The reasoning is that breaking the will of a valiant people is negative, so to not succeed in breaking their will is positive. 3.2 Agreement Study
To measure the reliability of the polarity annotation scheme, we conducted an agree-ment study with two annotators 4 using 10 documents from the MPQA corpus. The 10 documents contain 447 subjective expressions. Table 3 shows the contingency table for the two annotators X  judgments. Overall agreement is 82%, with a kappa value of 0.72. are in their polarity tags. For 18% of the subjective expressions, at least one annotator used the uncertain tag when marking polarity. If we consider these cases to be borderline and exclude them from the study, percent agreement increases to 90% and kappa rises to 0.84. Table 4 shows the revised contingency table with the uncertain cases removed. This shows that annotator agreement is especially high when both annotators are certain, and that annotators are certain for over 80% of their tags.
 3.3 Contextual Polarity Annotations In total, all 19,962 subjective expressions in the 535 documents (11,112 sentences) of the
MPQA corpus were annotated with their contextual polarity as just described. annotators carried out the task: the two who participated in the annotation study and a third who was trained later. 6 Table 5 gives the distribution of the contextual polarity tags. Looking at this table, we see that a small majority of subjective expressions (54.6%) 406 are expressing a positive , negative ,or both (positive and negative) sentiment. We refer to these expressions as polar in context . Many of the subjective expressions are neutral and do not express a sentiment. This suggests that, although sentiment is a major type of subjectivity, distinguishing other prominent types of subjectivity will be important forfutureworkinsubjectivityanalysis.
 consider is the distribution of sentences with respect to the subjective expressions they contain. In the 11,112 sentences in the MPQA corpus, 28% contain no subjective expressions, 24% contain only one, and 48% contain two or more. Of the 5,304 sentences containing two or more subjective expressions, 17% contain mixtures of positive and negative expressions, and 61% contain mixtures of polar (positive/negative/both) and neutral subjective expressions. 4 .Prior-Polarity Subjectivity Lexicon For the experiments in this article, we use a lexicon of over 8,000 subjectivity clues .
Subjectivity clues are words and phrases that may be used to express private states. In other words, subjectivity clues have subjective usages, though they may have objective usages as well. For this work, only single-word clues are used.

Wiebe (2003), which includes the positive and negative adjectives from Hatzivassiloglou and McKeown (1997). The words in this list were grouped in previous work according to their reliability as subjectivity clues. Words that are subjective in most contexts are considered strong subjective clues , indicated by the strongsubj tag. Words that may only have certain subjective usages are considered weak subjective clues , indicated by the weaksubj tag.

General Inquirer positive and negative word lists (Stone et al. 1966) that we judged to be potentially subjective. 7 We also gave the new words strongsubj and weaksubj reliability tags. The final lexicon has a coverage of 67% of subjective expressions in the MPQA corpus, where coverage is the percentage of subjective expressions containing one or more instances of clues from the lexicon. The coverage of just sentiment expressions is even higher: 75%.
 negative, both, or neutral . A word in the lexicon is tagged as positive if out of context it seems to evoke something positive, and negative if it seems to evoke something negative. If a word has both positive and negative meanings, it is tagged with the polarity that seems the most common. A word is tagged as both if it is at the same time both positive and negative. For example, the word bittersweet evokes something both positive and negative. Words like brag are also tagged as both , because the one who is bragging is expressing something positive, yet at the same time describing someone as bragging is expressing a negative evaluation of that person. A word is tagged as neutral if it does not evoke anything positive or negative.
 Hatzivassiloglou and McKeown 1997), we largely retained their original polarity.
However, we did change the polarity of a word if we strongly disagreed with its original class. 8 For example, the word apocalypse is listed as positive in the General Inquirer; we changed its prior polarity to negative for our lexicon.
 positive (33.1%) or negative (59.7%) prior polarity. Only a small number of clues (0.3%) are marked as having both positive and negative polarity. We refer to the set of clues marked as positive , negative ,or both as sentiment clues . A total of 6.9% of the clues in the lexicon are marked as neutral . Examples of neutral clues are verbs such as feel , look , and think , and intensifiers such as deeply , entirely ,and practically . Although the neutral clues make up a small proportion of the total words in the lexicon, we retain them for our later experiments in recognizing contextual polarity because many of them are good look forward to ). Including them increases the coverage of the system.

MPQA corpus with respect to the subjective expressions they contain. It is interesting to compare that distribution with the distribution of sentences with respect to the instances they contain of clues from the lexicon. We find that there are more sentences with two or more clue instances (62%) than sentences with two or more subjective expressions (48%). More importantly, many more sentences have mixtures of positive and negative clue instances than actually have mixtures of positive and negative sub-jective expressions. Only 880 sentences have a mixture of both positive and negative subjective expressions, whereas 3,234 sentences have a mixture of positive and negative clue instances. Thus, a large number of positive and negative instances are either neutral in context, or they are combining to form more complex polarity expressions. Either way, this provides strong evidence of the need to be able to disambiguate the contextual polarity of subjectivity and sentiment clues. 5 .Definition of the Gold Standard
In the experiments described in the following sections, the goal is to classify the con-textual polarity of the expressions that contain instances of the subjectivity clues in our lexicon. However, determining which clue instances are part of the same expression and identifying expression boundaries are not the focus of this work. Thus, instead of trying to identify and label each expression, in the following experiments, each clue instance is labeled individually as to its contextual polarity.
 manual annotations (Section 3) as follows. If a clue instance is not in a subjective expression (and therefore not in a sentiment expression), its gold class is neutral .If a clue instance appears in just one subjective expression or in multiple subjective 408 expressions with the same contextual polarity, its gold class is the contextual polarity of the subjective expression(s). If a clue instance appears in a mixture of negative and neutral subjective expressions, its gold class is negative ;ifitisinamixtureofpositiveand neutral subjective expressions, its gold class is positive . Finally, if a clue instance appears in at least one positive and one negative subjective expression (or in a subjective ex-pression marked as both), then its gold class is both . A clue instance can appear in more than one subjective expression because in the MPQA annotation scheme, it is possible for direct subjective frames and expressive subjective elements frames to overlap. 6 .A Prior-Polarity Classifier
Before delving into the task of recognizing contextual polarity, an important question to address is how useful prior polarity alone is for identifying contextual polarity. To answer this question, we create a classifier that simply assumes the contextual polarity of a clue instance is the same as the clue X  X  prior polarity. We explore this classifier X  X  performance on a small amount of development data, which is not part of the data used in the subsequent experiments.

Table 6, we see that 76% of the errors result from words with non-neutral prior polarity appearing in phrases with neutral contextual polarity. Only 12% of the errors result from words with neutral prior polarity appearing in expressions with non-neutral contextual polarity, and only 11% of the errors come from words with a positive or negative prior polarity appearing in expressions with the opposite contextual polarity. Table 6 also shows that positive clues tend to be used in negative expressions far more often than negative clues tend to be used in positive expressions.
 negative ,or both prior polarity appearing in neutral contexts, we were motivated to try a two-step approach to the problem of sentiment classification. The first step, Neutral X 
Polar Classification , tries to determine if an instance is neutral or polar in context. The second step, Polarity Classification , takes all instances that step one classified as polar, and tries to disambiguate their contextual polarity. This two-step approach is illustrated in Figure 1. 7 .Features
The features used in our experiments were motivated both by the literature and by exploration of the contextual-polarity annotations in our development data. A number of features were inspired by the paper on contextual-polarity influencers by Polanyi and Zaenan (2004). Other features are those that have been found useful in the past for recognizing subjective sentences (Wiebe, Bruce, and O X  X ara 1999; Wiebe and Riloff 2005). 7.1 Features for Neutral X  X olar Classification For distinguishing between neutral and polar instances, we use the features listed in
Table 7. For ease of description, we group the features into six sets: word features, gen-eral modification features, polarity modification features, structure features, sentence features, and one document feature.
 classified), the word features include the parts of speech of the previous word, the word itself, and the next word. The prior polarity and reliability class features represent those pieces of information about the clue which are taken from the lexicon.
 types of relationships involving the clue instance.
 ter the clue instance. The preceded by adjective feature is true if the clue instance is a noun preceded by an adjective. The preceded by adverb feature is true if the preceding word is an adverb other than not .The preceded by intensifier feature is true if the preceding intensifier. A word is considered to be an intensifier if it appears in a list of intensifiers and if it precedes a word of the appropriate part of speech (e.g., an intensifier adjective must come before a noun). The list of intensifiers is a compilation of those listed in Quirk et al. (1985), intensifiers identified from existing entries in the subjectivity lexicon, and intensifiers identified during explorations of the development data.
 obtained by first parsing the sentence (Collins 1997) and then converting the tree into its dependency representation (Xia and Palmer 2001). In a dependency representation, every node in the tree structure is a surface word (i.e., there are no abstract nodes such as NP or VP). The parent word is called the head , and its children are its modifiers .The 410 edge between a parent and a child specifies the grammatical relationship between the two words. Figure 2 shows an example of a dependency parse tree. Instances of clues in the tree are marked with the clue X  X  prior polarity and reliability class from the lexicon. adj , mod ,or vmod relationships between the clue instance and any other instances from the lexicon. Specifically, the modifies strongsubj feature is true if the clue instance and its parent share an adj , mod ,or vmod relationship, and if its parent is an instance of a strongsubj clue from the lexicon. The modifies weaksubj feature is the same, except that it looks in the parent for an instance of a weaksubj clue. The modified by strongsubj feature is true for a clue instance if one of its children is an instance of a strongsubj clue, and if the clue instance and its child share an adj , mod ,or vmod relationship. The modified by weaksubj feature is the same, except that it looks for instances of weaksubj clues in the children. Although the adj and vmod relationships are typically local, the mod relationship involves longer-distance as well as local dependencies. Figure 2 helps to illustrate these features. The modifies weaksubj featureistruefor substantial, because substantial modifies challenge, which is an instance of a weaksubj clue. For rights, the modifies weaksubj feature is false, because rights modifies report, which is not an instance of a weaksubj clue. The modified by weaksubj feature is false for substantial, because it has no modifiers that are instances of weaksubj clues. For challenge, the modified by weaksubj feature is true because it is being modified by substantial, which is an instance of a weaksubj clue.
 polarity features capture specific relationships between the clue instance and other senti-ment clues it may be related to. If the clue instance and its parent in the dependency tree share an obj , adj , mod ,or vmod relationship, the modifies polarity feature is set to the prior polarity of the parent. If the parent is not in the prior-polarity lexicon, its prior polarity is considered neutral . If the clue instance is at the root of the tree and has no parent, the value of the feature is notmod .The modified by polarity feature is similar, looking for adj , mod ,and vmod relationships and other sentiment clues in the children of the clue instance. The conj polarity feature determines if the clue instance is in a conjunction. If so, 412 lexicon, its prior polarity is neutral . If the clue instance is not in a conjunction, the value for this feature is notmod . Figure 2 also helps to illustrate these modification features. The word substantial with positive prior polarity modifies the word challenge with negative prior polarity. Therefore the modifies polarity feature is negative for substantial ,andthe modified by polarity feature is positive for challenge . The words good and evil are in a con-junction together; thus the conj polarity feature is negative for good and positive for evil . the clue instance and climbing up the dependency parse tree toward the root, looking for particular relationships, words, or patterns. The in subject featureistrueifwefind a subj relationship on the path to the root. The in copular featureistrueif in subject is false and if a node along the path is both a main verb and a copular verb. The in passive feature is true if a passive verb pattern is found on the climb.
 tactic role of a word may influence whether a word is being used to express a sentiment.
For example, consider the word polluters in each of the following two sentences.
In the first sentence, polluters is simply being used as a referring expression. In the second sentence, polluters is clearly being used to express a negative evaluation of the farmers. The motivation for the in passive feature was previous work by Riloff and Wiebe (2003), who found that different words are more or less likely to be subjective depending on whether they are in the active or passive.
 sentence-level subjectivity classification (Wiebe, Bruce, and O X  X ara 1999; Wiebe and
Riloff 2005). They include counts of strongsubj and weaksubj clue instances in the cur-rent, previous and next sentences, counts of adjectives and adverbs other than not in the current sentence, and binary features to indicate whether the sentence contains a pronoun, a cardinal number, and a modal other than will .
 of the document. The motivation for this feature is that whether or not a word is expressing a sentiment or even a private state in general may depend on the subject of the discourse. For example, the words fever and sufferer may express a negative sentiment in certain contexts, but probably not in a health or medical context, as is the case in the following sentence. selected to be on one of the 10 topics listed in Table 8. The documents for each topic were identified by human searches and by an information retrieval system. The remaining documents were semi-randomly selected from a very large pool of documents from the world press. In the corpus, these documents are listed with the topic miscellaneous .
Rather than leaving these documents unlabeled, we chose to label them using the following general domain categories: economics, general politics, health, report events, and war and terrorism. 7.2 Features for Polarity Classification
Table 9lists the features that we use for step two, polarity classification. Word token, word prior polarity, and the polarity-modification features are the same as described for neutral X  X olar classification.
 is a binary feature that is used to capture more local negations: Its value is true if a negation word or phrase is found within the four words preceding the clue instance, and if the negation word is not also in a phrase that acts as an intensifier rather than a negator. Examples of phrases that intensify rather than negate are not only and nothing if not .The negated subject feature captures a longer-distance type of negation. This feature 414 is true if the subject of the clause containing the clue instance is negated. For example, the negated subject featureistruefor support in the following sentence. instance, searching for the presence of particular types of polarity influencers. Gen-eral polarity shifters reverse polarity (e.g., little truth, little threat). Negative polarity shifters typically make the polarity of an expression negative (e.g., lack of understand-ing). Positive polarity shifters typically make the polarity of an expression positive (e.g., abate the damage). The polarity influencers that we used were identified through explorations of the development data. 8 .Experiments in Recognizing Contextual Polarity We have two primary goals with our experiments in recognizing contextual polarity.
The first is to evaluate the features described in Section 7 as to their usefulness for this task. The second is to investigate the importance of recognizing neutral instances X  recognizing when a sentiment clue is not being used to express a sentiment X  X or classi-fying contextual polarity.
 arately, across several different learning algorithms. Varying the learning algorithm allows us to verify that the features are robust and that their performance is not the artifact of a particular algorithm. We experiment with four different types of machine learning: boosting, memory-based learning, rule learning, and support vector learning.
For boosting, we use BoosTexter (Schapire and Singer 2000) AdaBoost.MH. For rule learning, we use Ripper (Cohen 1996). For memory-based learning, we use TiMBL (Daelemans et al. 2003b) IB1 ( k -nearest neighbor). For support vector learning, we use SVM-light and SVM-multiclass (Joachims 1999). SVM-light is used for the experi-ments involving binary classification (neutral X  X olar classification), and SVM-multiclass is used for experiments with more than two classes. These machine learning algorithms were chosen because they have been used successfully for a number of natural language processing tasks, and they represent several different types of learning.
 stance are represented as they are presented in Section 7. For SVM, the representations for numeric and discrete-valued features are changed. Numeric features, such as the count of strongsubj clue instances in a sentence, are scaled to range between 0 and 1.
Discrete-valued features, such as the reliability class feature, are converted into multiple binary features. For example, the reliability class feature is represented by two binary features: one for whether the clue instance is a strongsubj clue and one for whether the clue instance is a weaksubj clue.
 of polarity classification (step two) experiments. First, we experiment with classifying the polarity of all gold-standard polar instances X  X he clue instances identified as polar in context by the manual polarity annotations. Second, we experiment with using the polar instances identified automatically by the neutral X  X olar classifiers. Because the second set of experiments includes the neutral instances misclassified in step one, we can compare results for the two sets of experiments to see how the noise of neutral instances affects the performance of the polarity features. 10,287 sentences from 494 MPQA corpus documents. We measure performance in terms of accuracy, recall, precision, and F-measure. Accuracy is simply the total number of instances correctly classified. Recall, precision, and F-measure for a given class C are defined as follows. Recall is the percentage of all instances of class C correctly identified. Precision is the percentage of instances classified as class C that are class C in truth. F-measure is the harmonic mean of recall and precision.

All results reported are averages over the 10 folds. 8.1 Neutral X  X olar Classification
In our two-step process for recognizing contextual polarity, the first step is neutral X  X olar classification, determining whether each instance of a clue from the lexicon is neutral or polar in context. In our test set, there are 26,72 9instances of clues from the lexicon. The features we use for this step were listed above in Table 7 and described in Section 7.1. the results of neutral X  X olar classification using all the neutral X  X olar features against two baselines. The first baseline uses just the word token feature. The second baseline (word+priorpol) uses the word token and prior polarity features. In the second set of experiments, we explore the performance of different sets of features for neutral X  X olar classification.
 vary widely depending on their parameter settings, and that the optimal parameter settings can also vary depending on the set of features being evaluated (Daelemans et al. 2003a; Hoste 2005). Although the goal of this work is not to identify the optimal configuration for each algorithm and each set of features, we still want to make a rea-sonable attempt to find a good configuration for each algorithm. To do this, we perform 10-fold cross validation of the more challenging baseline classifier (word+priorpol) on the development data, varying select parameter settings. The results from those experiments are then used to select the parameter settings for each algorithm. For
BoosTexter, we vary the number of rounds of boosting. For TiMBL, we vary the value for k (the number of neighbors) and the distance metric (overlap or modified value difference metric [MVDM]). For Ripper, we vary whether negative tests are disallowed for nominal (-!n) and set (-!s) valued attributes and how much to simplify the hypothesis (-S). For SVM, we experiment with linear, polynomial, and radial basis function kernels.
Table 10 gives the settings selected for the neutral X  X olar classification experiments for the different learning algorithms. 416 8.1.1 Classification Results. The results for the first set of experiments are given in
Table 11. For each algorithm, we give the results for the two baseline classifiers, followed by the results for the classifier trained using all the neutral X  X olar features. The results shown in bold are significantly better than both baselines (two-sided t-test, p the given algorithm.

TiMBL, and Ripper, the classifiers trained using all the features improve significantly over the two baselines in terms of accuracy, polar recall, polar F-measure, and neutral precision. Neutral F-measure is also higher, but not significantly so. These consistent results across three of the four algorithms show that the neutral X  X olar features are helpful for determining when a sentiment clue is actually being used to express a sentiment.
 formed better than the word+priorpol baseline. Nevertheless, the prior polarity feature is an important component in the performance of the Ripper classifier using all the features. Excluding prior polarity from this classifier results in a significant decrease in performance for every metric. Decreases range from 2.5% for neutral recall to 9.5% for polar recall.
 classifier does not perform much worse than the BoosTexter and TiMBL classifiers that use all the neutral X  X olar features: The SVM word+priorpol baseline classifier has an accuracy of 75.6%, and both the BoosTexter and TiMBL classifiers have an accuracy of 76.5%. However, the BoosTexter and TiMBL classifiers using all the features perform notably better in terms of polar recall and F-measure. The BoosTexter and TiMBL classifiers have polar recalls that are 7% and 9.2% higher than the SVM baseline. Polar
F-measures for BoosTexter and TiMBL are 3.9% and 4.5% higher. These increases are significant for p  X  0 . 01. 8.1.2 Feature Set Evaluation. To evaluate the contribution of the various features for neutral X  X olar classification, we perform a series of experiments in which different sets of neutral X  X olar features are added to the word+priorpol baseline and new clas-sifiers are trained. We then compare the performance of these new classifiers to the word+priorpol baseline, with the exception of the Ripper classifiers, which we compare to the higher word baseline. Table 12 lists the sets of features tested in these experiments.
The feature sets generally correspond to how the neutral X  X olar features are presented in Table 7, although some of the groups are broken down into more fine-grained sets that we believe capture meaningful distinctions.
 given metric as compared to the word+priorpol baseline (word baseline for Ripper) are indicated by + or  X , respectively. Where changes are significant at the p ++ or  X   X  are used, and where changes are significant at the p are used. An  X  X c X  indicates no change (a change of less than baseline.
 polar classification? Most noticeable is that no individual feature sets stand out as strong performers. The only significant improvements in accuracy come from the PARTS -perhaps not surprising given that the Ripper baseline was much lower to begin with.
Very few feature sets show any improvement for SVM. Again, this is not unexpected given that all the features together performed worse than the word+priorpol baseline 418 for SVM. The performance of the feature sets for BoosTexter and TiMBL are perhaps the most revealing. In the previous experiments using all the features together, these algorithms produced classifiers with the same high performance. In these experiments, six different feature sets for each algorithm show improvements in accuracy over the baseline, yet none of those improvements are significant. This suggests that achieving the highest performance for neutral X  X olar classification requires a wide variety of fea-tures working together in combination.
 produced either no change or a drop in accuracy from the respective all-feature classi-fiers. For example, we train a TiMBL neutral X  X olar classifier using all the features except feature sets, and then compare the performance of this new classifier to the TiMBL, all-feature classifier. Although removing the non-performing features has little effect for
BoosTexter, performance does drop for both TiMBL and Ripper. The primary source of this performance drop is a decrease in polar recall: 2% for TiMBL and 3.2% for Ripper. performance, there are some features that consistently improve performance across the different algorithms. The reliability class of the clue instance ( RELIABILITY -CLASS ) improves accuracy over the baseline for all four algorithms. It is the only feature that does so. The RELCLASS -MOD features give improvements for all metrics for BoosTexter, Ripper, and TiMBL, as well as improving polar F-measure for SVM. The PARTS -OF -except for SVM. There are also a couple of feature sets that consistently do not improve performance for any of the algorithms: the INTENSIFY and PRECEDED -POS features. 8.2 Polarity Classification
For the second step of recognizing contextual polarity, we classify the polarity of all clue instances identified as polar in step one. The features for polarity classification were listed in Table 9and described in Section 7.2.
 (1) perfect neutral X  X olar recognition and (2) automatic neutral X  X olar recognition. For condition 1, we identify the polar instances according to the gold-standard, manual contextual-polarity annotations. In the test data, 9,835 instances of the clues from the lexicon are polar in context according to the manual annotations. Experiments under condition 1 classify these instances as having positive, negative, or both (positive and negative) polarity. For condition 2, we take the best performing neutral X  X olar classifier for each algorithm and use the output from those algorithms to identify the polar instances. Because polar instances now are being identified automatically, there will be noise in the form of misclassified neutral instances. Therefore, for experiments under condition 2 we include the neutral class and perform four-way classification instead of three-way. Condition 1 allows us to investigate the performance of the different polarity features without the noise of misclassified neutral instances. Also, because the set of polar instances being classified is the same for all the algorithms, condition 1 allows us to compare the performance of the polarity features across the different algorithms.
However, condition 2 is the more natural one. It allows us to see how the noise of neutral instances affects the performance of the polarity features.
 performance of the polarity features used together for polarity classification under condition 1. As before, the word and word+priorpol classifiers provide our baselines. In the second set of experiments, we explore the performance of different sets of features for polarity classification, again assuming perfect recognition of the polar instances.
Finally, we experiment with polarity classification using all the polarity features under condition 2, automatic recognition of the polar instances.
 gorithm. The settings for polarity classification are given in Table 14. They were selected based on the performance of the word+priorpol baseline classifier under condition 2. 8.2.1 Classification Results: Condition 1. The results for polarity classification using all the polarity features, assuming perfect neutral X  X olar recognition for step one, are given in
Table 15. For each algorithm, we give the results for the two baseline classifiers, followed by the results for the classifier trained using all the polarity features. For the metrics where the polarity features perform statistically better than both baselines (two-sided t-test, p  X  0 . 05), the results are given in bold. 420 the polarity classifier using all the features significantly outperforms both baselines in terms of accuracy, positive F-measure, and negative F-measure. These consistent improvements in performance across all four algorithms show that these features are quite useful for polarity classification.
 more straightforward to recognize than positive polarity words, at least in this corpus.
For the negative class, precisions and recalls for the word+priorpol baseline range from 82.2 to 87.2. For the positive class, precisions and recalls for the word+priorpol baseline range from 63.7 to 76.7. However, it is with the positive class that polarity features seem to help the most. With the addition of the polarity features, positive F-measure improves by 5 points on average; improvements in negative F-measures average only 2.75 points. 8.2.2 Feature Set Evaluation. To evaluate the performance of the various features for polarity classification, we again perform a series of ablation experiments. As before, we start with the word+priorpol baseline classifier, add different sets of polarity features, train new classifiers, and compare the results of the new classifiers to the baseline.
Table 16 lists the sets of features tested in each experiment, and Table 17 shows the results of the experiments. Results are reported as they were previously in Section 8.1.2, with increases and decreases compared to the baseline for a given metric indicated by + or  X , respectively.
 performance as measured by accuracy and positive and negative F-measures. This is true for all the classification algorithms. As we might expect, including the negation features has the most marked effect on the performance of polarity classification, with statistically significant improvements for most metrics across all the algorithms. 422 polarity-modification features also seem to be important for polarity classification, in particular for disambiguating the positive instances. For all the algorithms except
TiMBL, including the polarity-modification features results in significant improvements for at least one of the positive metrics. The polarity shifters also help classification, but they seem to be the weakest of the features: Including them does not result in significant improvements for any algorithm.
 contributes to polarity classification, given all the other polarity features. Is it enough to know the prior polarity of a word, whether it is being negated, and how it is related to other polarity influencers? To answer this question, we train classifiers using all the polarity features except for word token . Table 18 gives the results for these classifiers; for comparison, the results for the all-feature polarity classifiers are also given. Inter-estingly, excluding the word token feature produces only small changes in the overall results. The results for BoosTexter and Ripper are slightly lower, and the results for
SVM are practically unchanged. TiMBL actually shows a slight improvement, with the exception of the both class. This provides further evidence of the strength of the polarity features. Also, a classifier not tied to actual word tokens may potentially be a more domain-independent classifier. 8.2.3 Classification Results: Condition 2. The experiments in Section 8.2.1 show that the polarity features perform well under the ideal condition of perfect recognition of polar instances. The next question to consider is how well the polarity features perform under the more natural but less-than-perfect condition of automatic recognition of polar instances. To investigate this, the polarity classifiers (including the baselines) for each algorithm in these experiments start with the polar instances identified by the best performing neutral X  X olar classifier for that algorithm (from Section 8.1.1). The results for these experiments are given in Table 19. As before, statistically significant improvements over both baselines are given in bold.
 sified neutral instances? Our first observation comes from comparing Table 15 with
Table 19: Polarity classification results are much lower for all classifiers with the noise of neutral instances. Yet in spite of this, the polarity features still produce classifiers that outperform the baselines. For three of the four algorithms, the classifier using all the polarity features has the highest accuracy. For BoosTexter and TiMBL, the improvements in accuracy over both baselines are significant. Also for all algorithms, using the polarity features gives the highest positive and negative F-measures.
 we cannot directly compare the results from one algorithm to the next. 8.3 Two-step versus One-step Recognition of Contextual Polarity
Although the two-step approach to recognizing contextual polarity allows us to focus our investigation on the performance of features for both neutral X  X olar classification and polarity classification, the question remains: How does the two-step approach compare to recognizing contextual polarity in a single classification step? The results shown in Table 20 help to answer this question. The first row in Table 20 for each algorithm shows the combined result for the two stages of classification. For BoosTexter,
TiMBL, and Ripper, this is the combination of results from using all the neutral X  X olar features for step one, together with the results from using all of the polarity features for step two. 10 For SVM, this is the combination of results from the word+priorpol baseline from step one, together with results for using all the polarity features for step two.
Recall that the word+priorpol classifier was the best neutral X  X olar classifier for SVM (see Table 11). The second rows for BoosTexter, TiMBL, and Ripper show the results of a single classifier trained to recognize contextual polarity using all the neutral X  X olar and polarity features together. For SVM, the second row shows the results of classifying the contextual polarity using just the word token feature. This classifier outperformed all others for SVM. In the table, the best result for each metric for each algorithm is highlighted in bold.
 tions, we see that the one-step approach performs about as well or better than the two-step approach for recognizing contextual polarity. For SVM, the improvement in accuracy achieved by the two-step approach is significant, but this is not true for the other algorithms. One fairly consistent difference between the two approaches is that the two-step approach scores slightly higher for neutral F-measure, and the one-step approach achieves higher F-measures for the polarity classes. The difference in negative F-measure is significant for BoosTexter, TiMBL, and Ripper. The exception to this is SVM. For SVM, the two-step approach achieves significantly higher positive and negative F-measures.
 to the performance of the one-step classifiers. The third line in Table 20 for BoosTexter,
TiMBL, and Ripper gives the results for a one-step classifier trained without the neutral X  polar features. Although the differences are not always large, excluding the neutral X  polar features consistently degrades performance in terms of accuracy and positive, negative, and neutral F-measures. The drop in negative F-measure is significant for all three algorithms, the drop in neutral F-measure is significant for BoosTexter and TiMBL, and the drop in accuracy is significant for TiMBL and Ripper (and for BoosTexter at the p  X  0 . 1 level). features in the one-step approach seems to suggest that discriminating between neutral and polar instances is helpful but not necessarily crucial. However, consider Figure 3.
In this figure, we show the F-measures for the positive , negative ,and both classes for the BoosTexter polarity classifier that uses the gold-standard neutral/polar instances (from Table 15) and for the BoosTexter one-step polarity classifier that uses all features (from Table 20). Plotting the same sets of results for the other three algorithms produces very similar figures. The difference when the classifiers have to contend with the noise from neutral instances is dramatic. Although Table 20 shows that there is room for improvement across all the contextual polarity classes, Figure 3 shows us that perhaps the best way to achieve these improvements is to improve the ability to discriminate the neutral class from the others.
 426 9 .Related Work 9.1 Phrase-Level Sentiment Analysis
Other researchers who have worked on classifying the contextual polarity of sentiment expressions are Yi et al. (2003), Popescu and Etzioni (2005), and Suzuki, Takamura, and
Okumura (2006). Yi et al. use a lexicon and manually developed patterns to classify contextual polarity. Their patterns are high-quality, yielding quite high precision over the set of expressions that they evaluate. Popescu and Etzioni use an unsupervised clas-sification technique called relaxation labeling (Hummel and Zucker 1983) to recognize the contextual polarity of words that are at the heads of select opinion phrases. They take an iterative approach, using relaxation labeling first to determine the contextual polarities of the words, then again to label the polarities of the words with respect to their targets. A third stage of relaxation labeling then is used to assign final polarities to the words, taking into consideration the presence of other polarity terms and negation.
As we do, Popescu and Etzioni use features that represent conjunctions and dependency relations between polarity words. Suzuki et al. use a bootstrapping approach to classify the polarity of tuples of adjectives and their target nouns in Japanese blogs. Included in the features that they use are the words that modify the adjectives and the word that the adjective modifies. They consider the effect of a single negation term, the Japanese equivalent of not .
 expression-level sentiment analysis in several ways. First, the set of expressions they evaluate is limited either to those that target specific items of interest, such as products and product features, or to tuples of adjectives and nouns. In contrast, we seek to classify the contextual polarity of all instances of words from a large lexicon of subjectivity clues that appear in the corpus. Included in the lexicon are not only adjectives, but nouns, verbs, adverbs, and even modals.
 other researchers do, we consider negation and the words that directly modify or are modified by the expression being classified. However, with negation, we have features for both local and longer-distance types of negation, and we take care to count negation terms only when they are actually being used to negate, excluding, for example, nega-tion terms when they are used in phrases that intensify (e.g., not only ). We also include contextual features to capture the presence of other clue instances in the surrounding sentences, and features that represent the reliability of clues from the lexicon. different features for recognizing contextual polarity. We first presented the features explored in this research in Wilson, Wiebe, and Hoffman (2005), but this work signif-icantly extends that initial evaluation. We explore the performance of features across different learning algorithms, and we evaluate not only features for discriminating between positive and negative polarity, but features for determining when a word is or is not expressing a sentiment in the first place ( neutral in context ). This is also the first work to evaluate the effect of neutral instances on the performance of features for discriminating between positive and negative contextual polarity. 9.2 Other Research in Sentiment Analysis
Recognizing contextual polarity is just one facet of the research in automatic senti-ment analysis. Research ranges from work on learning the prior polarity (semantic orientation) of words and phrases (e.g., Hatzivassiloglou and McKeown 1997; Kamps and Marx 2002; Turney and Littman 2003; Hu and Liu 2004; Kim and Hovy 2004; Esuli and Sebastiani 2005; Takamura, Inui, and Okumura 2005; Popescu and Etzioni 2005;
Andreevskaia and Bergler 2006; Esuli and Sebastiani 2006a; Kanayama and Nasukawa 2006) to characterizing the sentiment of documents, such as recognizing inflammatory messages (Spertus 1997), tracking sentiment over time in online discussions (Tong 2001), and classifying the sentiment of online messages (e.g., Das and Chen 2001;
Koppel and Schler 2006), customer feedback data (Gamon 2004), or product and movie reviews (e.g., Turney 2002; Pang, Lee, and Vaithyanathan 2002; Dave, Lawrence, and Pennock 2003; Beineke, Hastie, and Vaithyanathan 2004; Mullen and Collier 2004; Bai,
Padman, and Airoldi 2005; Whitelaw, Garg, and Argamon 2005; Kennedy and Inkpen 2006; Koppel and Schler 2006).
 although the two tasks are complementary. The goal of identifying prior polarity is to automatically acquire the polarity of words or phrases for listing in a lexicon. Our work on recognizing contextual polarity begins with a lexicon of words with established prior polarities and then disambiguates in the corpus the polarity being expressed by the phrases in which instances of those words appear. To make the relationship between that task and ours clearer, some word lists that are used to evaluate methods for recognizing prior polarity (positive and negative word lists from the General Inquirer [Stone et al. 1966] and lists of positive and negative adjectives created for evaluation by
Hatzivassiloglou and McKeown [1997]) are included in the prior-polarity lexicon used in our experiments.
 identify prior polarity with just a few exceptions. Using a feature to capture conjunc-tions between clue instances was motivated in part by the work of Hatzivassiloglou and
McKeown (1997). They use constraints on the co-occurrence in conjunctions of words with similar or opposite polarity to predict the prior polarity of adjectives. Esuli and
Sebastiani (2005) consider negation in some of their experiments involving WordNet glosses. Takamura et al. (2005) use negation words and phrases, including phrases such as lack of that are members in our lists of polarity shifters, and conjunctive expressions that they collect from corpora.
 include a neutral (objective) category and to consider a three-way classification between positive, negative, and neutral words. Although identifying prior polarity is a different task, they report a finding similar to ours, namely, that accuracy is lower when neutral words are included.
 et al. (2002), Yu and Hatzivassiloglou (2003), Kim and Hovy (2004), Hu and Liu (2004), and Grefenstette et al. (2004) 11 all begin by first creating prior-polarity lexicons. Yu and
Hatzivassiloglou then assign a sentiment to a sentence by averaging the prior semantic orientations of instances of lexicon words in the sentence. Thus, they do not identify the contextual polarity of individual phrases containing clue instances, which is the focus of this work. Morinaga et al. only consider the positive or negative clue instance in each sentence that is closest to some target reference; Kim and Hovy, Hu and Liu, and
Grefenstette et al. multiply or count the prior polarities of clue instances in the sentence. 428
These researchers also consider local negation to reverse polarity, with Morinaga et al. also taking into account the negating effect of words like insufficient . However, they do not use the other types of features that we consider in our experiments. Kaji and
Kitsuregawa (2006) take a different approach to recognizing positive and negative sentences. They bootstrap from information easily obtained in  X  X ro X  and  X  X on X 
HTML tables and lists, and from one high-precision linguistic pattern, to automatically construct a large corpus of positive and negative sentences. They then use this corpus to train a naive Bayes sentence classifier. In contrast to our work, sentiment classification in all of this research is restricted to identifying only positive and negative sentences (excluding our both and neutral categories). In addition, only one sentiment is assigned per sentence; our system assigns contextual polarity to individual expressions, which would allow for a sentence to be assigned to multiple sentiment categories. As we saw when exploring the contextual polarity annotations, it is not uncommon for sentences to contain more than one sentiment expression.
 the contextual polarity of words and phrases. However, some researchers have re-ported findings about document-level classification that are similar to our findings about phrase-level classification. Bai et al. (2005) argue that dependencies among key sentiment terms are important for classifying document sentiment. Similarly, we show that features for capturing when clue instances modify each other are important for phrase-level classification, in particular, for identifying positive expressions. Gamon (2004) achieves his best results for document classification using a wide variety of features, including rich linguistic features, such as features that capture constituent structure, features that combine part-of-speech and semantic relations (e.g., sentence subject or negated context), and features that capture tense information. We also achieve our best results for phrase-level classification using a wide variety of features, many of which are linguistically rich. Kennedy and Inkpen (2006) report consistently higher results for document sentiment classification when select polarity influencers, including negators and intensifiers, are included. 12 Koppel and Schler (2006) demonstrate the importance of neutral examples for document-level classification. In this work, we show that being able to correctly identify neutral instances is also very important for phrase-level sentiment analysis. 10 .Conclusions and Future Work
Being able to determine automatically the contextual polarity of words and phrases is an important problem in sentiment analysis. In the research presented in this article, we tackle this problem and show that it is much more complex than simply determining whether a word or phrase is positive or negative. In our analysis of a corpus with annotations of subjective expressions and their contextual polarity, we find that positive and negative words from a lexicon are used in neutral contexts much more often than they are used in expressions of the opposite polarity. The importance of identifying when contextual polarity is neutral is further revealed in our classification experiments:
When neutral instances are excluded, the performance of features for distinguishing between positive and negative polarity greatly improves.
 recognizing contextual polarity. We experiment with a wide variety of linguistically motivated features, and we evaluate the performance of these features using several different machine learning algorithms. Features for distinguishing between neutral and polar instances are evaluated, as well as features for distinguishing between positive and negative contextual polarity. For classifying neutral and polar instances, we find that, although some features produce significant improvements over the baseline in terms of polar or neutral recall or precision, it is the combination of features together that is needed to achieve significant improvements in accuracy. For classifying positive and negative contextual polarity, features for capturing negation prove to be the most important. However, we find that features that also perform well are those that cap-ture when a word is (or is not) modifying or being modified by other polarity terms.
This suggests that identifying features that represent more complex interdependencies between polarity clues will be an important avenue for future research.
 techniques for acquiring the prior polarity of words and phrases. It follows that a larger lexicon will have a greater coverage of sentiment expressions. However, expanding the lexicon with automatically acquired prior-polarity tags may result in an even greater proportion of neutral instances to contend with. Given the degradation in performance created by the neutral instances, whether expanding the lexicon automatically will result in improved performance for recognizing contextual polarity is an empirical question.
 higher-level NLP tasks, such as opinion question answering and summarization. Acknowledgments References 430 432
