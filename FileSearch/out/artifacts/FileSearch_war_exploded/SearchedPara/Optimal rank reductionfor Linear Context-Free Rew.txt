 Linear Context-Free Rewriting Systems ( LCFRS s) have been introduced by Vijay-Shanker et al. (1987) for modeling the syntax of natural language. The formalism extends the generative capacity of context-free grammars, still remaining far below the class of context-sensitive grammars. An important feature of LCFRS s is their ability to generate discontinuous phrases. This has been recently exploited for modeling phrase structure treebanks with discontinuous constituents (Maier and S X gaard, 2008), as well as non-projective dependency treebanks (Kuhlmann and Satta, 2009).

The maximum number f of tuple components that can be generated by an LCFRS G is called the fan-out of G , and the maximum number r of nonterminals in the right-hand side of a production is called the rank of G . As an example, context-free grammars are LCFRS s with f = 1 and r given by the maximum length of a production right-hand side. Tree adjoining grammars (Joshi and Levy, 1977) can also be viewed as a special kind of LCFRS with f = 2 , since each auxil-iary tree generates two strings, and with r given by the maximum number of adjunction and sub-stitution sites in an elementary tree. Beyond tree adjoining languages, LCFRS s with f = 2 can also generate languages in which pair of strings derived from different nonterminals appear in so-called crossing configurations. It has recently been observed that, in this way, LCFRS s with f = 2 can model the vast majority of data in discontinu-ous phrase structure treebanks and non-projective dependency treebanks (Maier and Lichte, 2009; Kuhlmann and Satta, 2009).

Under a theoretical perspective, the parsing problem for LCFRS s with f = 2 is NP-complete (Satta, 1992), and in known parsing algorithms the running time is exponentially affected by the rank r of the grammar. Nonetheless, in natu-ral language parsing applications, it is possible to achieve efficient, polynomial parsing if we suc-ceed in reducing the rank r (number of nontermi-nals in the right-hand side) of individual LCFRS s X  productions (Kuhlmann and Satta, 2009). This process is called production factorization . Pro-duction factorization is very similar to the reduc-tion of a context-free grammar production into Chomsky normal form. However, in the LCFRS case some productions might not be reducible to r = 2 , and the process stops at some larger value for r , which in the worst case might as well be the rank of the source production (Rambow and Satta, 1999).

Motivated by parsing efficiency, the factoriza-tion problem for LCFRS s with f = 2 has at-tracted the attention of many researchers in recent years. Most of the literature has been focusing on binarization algorithms, which attempt to find a re-duction to r = 2 and return a failure if this is not possible. G  X omez-Rodr  X  X guez et al. (2009) report a general binarization algorithm for LCFRS which, in the case of f = 2 , works in time O ( | p | 7 ) , where | p | is the size of the input production. A more ef-ficient binarization algorithm for the case f = 2 is presented in (G  X omez-Rodr  X  X guez and Satta, 2009), working in time O ( | p | ) .
In this paper we are interested in general factor-ization algorithms, i.e., algorithms that find factor-izations with the smallest possible rank (not nec-essarily r = 2 ). We present a novel technique that solves the general factorization problem in time O ( | p | 2 ) for LCFRS s with f = 2 .
 Strong generative equivalence results between LCFRS and other finite copying parallel rewrit-ing systems have been discussed in (Weir, 1992) and in (Rambow and Satta, 1999). Through these equivalence results, we can transfer the factoriza-tion techniques presented in this article to other finite copying parallel rewriting systems. In this section we introduce the basic notation for LCFRS and the notion of production factoriza-tion. 2.1 Definitions Let  X  As usual,  X   X  over  X  teger k  X  1 , (  X   X  we are interested in functions mapping several tu-ples of strings in  X   X  Let r and f be two integers, r  X  0 and f  X  1 . We say that a function g has rank r if there exist integers f on (  X   X  that g has fan-out f if the range of g is a subset of (  X   X  T ) f . Let y h , x ij , 1  X  h  X  f , 1  X  i  X  r and 1  X  j  X  f i , be string-valued variables. A func-tion g as above is said to be linear regular if it is defined by an equation of the form where h y f sequences of all and only the variables appear-ing in the left-hand side of (1) (without repeti-tions) along with some additional terminal sym-bols (with possible repetitions).

For a mathematical definition of LCFRS we re-fer the reader to (Weir, 1992, p. 137). Informally, in a LCFRS every nonterminal symbol A is asso-ciated with an integer  X  ( A )  X  1 , called its fan-out, and it generates tuples in (  X   X  in a LCFRS have the form where  X  ( p )  X  0 , A and B terminal symbols, and g is a linear regular func-tion having rank  X  ( p ) and fan-out  X  ( A ) , defined on (  X   X  ues in (  X   X  rewriting relation associated with LCFRS is that production p applies to any sequence of string tu-ples generated by the B string tuple in (  X   X  g . We say that  X  ( p ) =  X  ( A ) is the fan-out of p , and  X  ( p ) is the rank of p .
 Example 1 Let L be the language L = { a generating L is defined by means of the nonter-minals S ,  X  ( S ) = 1 , and A ,  X  ( A ) = 2 , and the productions in figure 1. Observe that nonterminal A generates all tuples of the form h a n b n , a n b n i .
Recognition and parsing for a given LCFRS can be carried out in polynomial time on the length of the input string. This is usually done by exploit-ing standard dynamic programming techniques; polynomial degree in the running time is a mono-tonically strictly increasing function that depends on both the rank and the fan-out of the productions in the grammar. To optimize running time, one can then recast the source grammar in such a way that the value of the above function is kept to a min-imum. One way to achieve this is by factorizing the productions of a LCFRS , as we now explain. 2.2 Factorization Consider a LCFRS production of the form p : A  X  g ( B 1 , B 2 , . . . , B  X  ( p ) ) , where g is specified as in (1). Let also C be a subset of { B 1 , B 2 , . . . , B  X  ( p ) } such that |C| 6 = 0 and  X  ( p ) . We let  X  C be the alphabet of all variables x that B 1  X  i  X  f , we rewrite each string y i in (1) in a form y such that the following conditions are all met:  X  each z ij , 1  X  j  X  d i , is a string with one or  X  each y  X  ij , 1  X  j  X  d i  X  1 , is a non-empty Let c = |C| and c =  X  ( p )  X  |C| . Assume that C = { B h nal C with  X  ( C ) = P f duction p in our grammar by means of the two new productions p p g g g Note that productions p smaller than the source production p . Further-more, if it is possible to choose set C in such a way that P f p
We can iterate the procedure above as many times as possible, under the condition that the fan-out of the productions does not increase.
 Example 2 Let us consider the following produc-tion with rank 4:
A  X  g S ( B, C, D, E ) , Applyng the above procedure twice, we obtain a factorization consisting of three productions with rank 2 (variables have been renamed to reflect our conventions):
The factorization procedure above should be ap-plied to all productions of a LCFRS with rank larger than two. This might result in an asymptotic improvement of the running time of existing dy-namic programming algorithms for parsing based on LCFRS .

The factorization technique we have discussed can also be viewed as a generalization of well-known techniques for casting context-free gram-mars into binary forms. These are forms where no more than two nonterminal symbols are found in the right-hand side of productions of the grammar; see for instance (Harrison, 1978). One important difference is that, while production factorization into binary form is always possible in the context-free case, for LCFRS there are worst case gram-mars in which rank reduction is not possible at all, as shown in (Rambow and Satta, 1999). Rather than factorizing LCFRS productions di-rectly, in this article we work with a more abstract representation of productions based on graphs. From now on we focus on LCFRS whose non-terminals and productions all have fan-out smaller than or equal to 2 . Consider then a production p : 2 , 1  X  i  X   X  ( p ) , and with g defined as In what follows, if  X  ( A ) = 1 then h y should be read as h y read as y other nonterminals and tuples.

We now introduce a special kind of undirected graph that is associated with a linear order defined over the set of its vertices. The p-graph associated with production p is a triple ( V  X  V p = { x ij | 1  X  i  X   X  ( p ) ,  X  ( B i ) = 2 , 1  X   X  for x, x  X   X  V p , x  X  p x  X  if x 6 = x  X  and the Note that in the above definition we are ignor-ing all string-valued variables x nonterminals B cause nonterminals with fan-out one can always be treated as in the context-free grammar case, as it will be explained later.
 Example 3 The p-graph associated with the LCFRS production in Example 2 is shown in Fig-ure 2. Circled sets of edges indicate the factoriza-tion in that example. Figure 2: The p-graph associated with the LCFRS production in Example 2.

We close this section by introducing some ad-ditional notation related to p-graphs that will be used throughout this paper. Let E  X  E set of edges. The cover set for E is defined as V ( E ) = { x | ( x, x  X  )  X  E } (recall that our edges are unordered pairs, so ( x, x  X  ) and ( x  X  , x ) denote the same edge). Conversely, let V  X  V set of vertices. The incident set for V is defined as E ( V ) = { ( x, x  X  ) | ( x, x  X  )  X  E p , x  X  V } .
Assume  X  ( p ) = 2 , and let x and x y , then we say that there is a gap between x x . If x and x { x 1 , x 2 }  X  { x | x  X  V p , x 1  X  p x  X  p x 2 } V range . Let r and r  X  be two ranges. The pair ( r, r  X  ) is called a tandem if the following conditions are both satisfied: (i) r  X  r  X  is not a range, and (ii) there exists some edge ( x, x  X  )  X  E x  X   X  r  X  . Note that the first condition means that r and r  X  are disjoint sets and, for any pair of vertices x  X  r and x  X   X  r  X  , either there is a gap between x and x  X  or else there exists some x x  X  p x g  X  p x  X  and x g 6 X  r  X  r  X  .

A set of edges E  X  E fan-out one if V ( E ) = [ x V , i.e., V ( E ) is a range. Set E is called a bundle with fan-out two if V ( E ) = [ x some x is a tandem. Note that if E is a bundle with fan-out two with V ( E ) = [ x out one, since there is at least one edge incident upon a vertex in [ x We also use the term bundle to denote a bundle with fan-out either one or two.
 Intuitively, in a p-graph associated with a LCFRS production p , a bundle E with fan-out f and with | E | &gt; 1 identifies a set of nonterminals C in the right-hand side of p that can be factorized into a new production. The nonterminals in C are then replaced in p by a fresh nonterminal C with fan-out f , as already explained. Our factorization algorithm is based on efficient methods for the de-tection of bundles with fan-out one and two. In this section we provide an efficient, recursive algorithm for the decomposition of a p-graph into bundles, which corresponds to factorizing the rep-resented LCFRS production. 4.1 Overview of the algorithm The basic idea underlying our graph-based algo-rithm can be described as follows. We want to compute an optimal hierarchical decomposition of an input bundle with fan-out 1 or 2. This decom-position can be represented by a tree, in which each node N corresponds to a bundle (the root node corresponds to the input bundle) and the daughters of N represent the bundles in which N is immediately decomposed. The decomposition is optimal in so far as the maximum arity of the decomposition tree is as small as possible. As already explained above, this decomposition rep-resents a factorization of some production p of a LCFRS , resulting in optimal rank reduction. All the internal nodes in the decomposition represent fresh nonterminals that will be created during the factorization process.

The construction of the decomposition tree is carried out recursively. For a given bundle with fan-out 1 or 2, we apply a procedure for decom-posing this bundle in its immediate sub-bundles with fan-out 1 or 2, in an optimal way. Then, we recursively apply our procedure to the obtained sub-bundles. Recursion stops when we reach bun-dles containing only one edge (which correspond to the nonterminals in the right-hand side of the input production). We shall prove that the result is an optimal decomposition.

The procedure for computing an optimal de-composition of a bundle F into its immediate sub-bundles, which we describe in the first part of this section, can be sketched as follows. First, we iden-tify and temporarily remove all maximal bundles with fan-out 1 (Section 4.3). The result is a new bundle F  X  which is a subset of the original bundle, and has the same fan-out. Next, we identify all sub-bundles with fan-out 2 in F  X  (Section 4.4). We compute the optimal decomposition of F  X  , rest-ing on the hypothesis that there are no sub-bundles with fan-out 1. Each resulting sub-bundle is later expanded with the maximal sub-bundles with fan-out 1 that have been previously removed. This re-sults in a  X  X irst level X  decomposition of the original bundle F . We then recursively decompose all in-dividual sub-bundles of F , including the bundles with fan-out 1 that have been later attached. 4.2 Backward and forward quantities For a set V  X  V (resp. min( V ) ) the maximum (resp. minimum) vertex in V w.r.t. the  X 
Let r = [ x x for r is defined as B E r , x  X  p r. left , x  X   X  r } ward edges for r is defined symmetrically as F { ( x, x  X  ) | ( x, x  X  )  X  E r , x  X  r, r. right  X  p x  X  } . For E  X  { B r , F r } we also define L ( E ) = { x | ( x, x  X  )  X  E, x  X  p x  X  } and R ( E ) = { x  X  | ( x, x  X  )  X  E, x  X  p x  X  } .

Let us assume B vertex of the p-graph that is located at the left of range r and that is connected to some ver-tex in r through some edge. Similarly, we write r. b . right = max( L ( B r )) . If B r =  X  , then we set r. b . right are called backward quantities.
We also introduce local backward quanti-ties, defined as follows. We write r. lb . left = vertex among all those vertices in r that are con-nected to some vertex to the left of r . Similarly, we write r. lb . right = max( R ( B then we set r. lb . left = r. lb . right =  X  .
We define forward and local forward quanti-ties in a symmetrical way.

The backward quantities r. b . left and r. b . right and the local backward quantities r. lb . left and r. lb . right for all ranges r in the p-graph can be computed efficiently as follows. We process ranges in increasing order of size, expanding each range r by one unit at a time by adding a new vertex at its right. Backward and local backward quantities for the expanded range can be expressed as a function of the same quantities for r . There-fore if we store our quantities for previously pro-cessed ranges, each new range can be annotated with the desired quantities in constant time. This algorithm runs in time O ( n 2 ) , where n is the num-ber of vertices in V since O ( n 2 ) is also the size of the output.
We compute in a similar way the forward quan-tities r. f . left and r. f . right and the local forward panding each range by one unit at its left. 4.3 Bundles with fan-out one The detection of bundles with fan-out 1 within the p-graph can be easily performed in O ( n 2 ) , where n is the number of its vertices. Indeed, the incident set E ( r ) of a range r is a bundle with fan-out one if and only if r. b . left = r. f . left =  X  . This imme-diately follows from the definitions given in Sec-tion 4.2. It is therefore possible to check all ranges the one after the other, once the backward and forward properties have been computed. These checks take constant time for each of the  X ( n 2 ) ranges, hence the quadratic complexity.

We now remove from F all bundles with fan-out 1 from the original bundle F . The result is the new bundle F  X  , that has no sub-bundles with fan-out 1. 4.4 Bundles with fan-out two Efficient detection of bundles with fan-out two in F  X  is considerably more challenging. A direct gen-eralization of the technique proposed for detecting bundles with fan-out 1 would use the following property, that is also a direct corollary of the def-initions in Section 4.2: the incident set E ( r  X  r  X  ) of a tandem ( r, r  X  ) is a bundle with fan-out two if and only if all of the following conditions hold: However, checking all O ( n 4 ) tandems the one af-ter the other would require time O ( n 4 ) . Therefore, preserving the quadratic complexity of the overall algorithm requires a more complex representation.
From now on, we assume that V { x 1 , . . . , x n } for the range [ x
First, we need to compute an additional data structure that will store local backward figures in a convenient way. Let us define the expansion ta-ble T as follows: for a given range r  X  = [ i  X  , j  X  ] , T ( r  X  ) is the set of all ranges r = [ i, j ] such that r.lb.lef t = i  X  and r.lb.right = j  X  , ordered by in-creasing left boundary i . It turns out that the con-struction of such a table can be achieved in time O ( n 2 ) . Moreover, it is possible to compute in O ( n 2 ) an auxiliary table T  X  that associates with r the first range r  X  X  in T ([ r.f.lef t, r.f.right ]) such anchors a valid bundle, or there is no bundle E such that the first component of V ( E ) is r .
We now have all the pieces to extract bundles with fan-out 2 in time O ( n 2 ) . We proceed as fol-lows. For each range r = [ i, j ] :  X  We first retrieve r  X  = [ r.f.lef t, r.f.right ] in  X  Then, we check in constant time whether  X  Finally, for each r  X  X  in the ordered set
This algorithm spends a constant time on each range plus a constant time on each bundle with fan-out 2. We shall prove in Section 5 that there are O ( n 2 ) bundles with fan-out 2. Therefore, this algorithm runs in time O ( n 2 ) .

Now that we have extracted all bundles, we need to extract an optimal decomposition of the in-put bundle F  X  , i.e., a minimal size partition of all n elements (edges) in the input bundle such that each of these partition is a bundle (with fan-out 2, since bundles with fan-out 1 are excluded, except for the input bundle). By definition, a partition has minimal size if there is no other partition it is a 4.5 Extracting an optimal decomposition We have constructed the set of all (fan-out 2) sub-bundles of F  X  . We now need to build one optimal decomposition of F  X  into sub-bundles. We need some more theoretical results on the properties of bundles.
 Lemma 1 Let E F  X  (with fan-out 2) that have non-empty intersec-tion, but that are not included the one in the other. Then E P
ROOF This lemma can be proved by considering all possible respective positions of the covers of E lead to the existence of a fan-out 1 sub-bundle. Theorem 1 For any bundle E , either it has at least one binary decomposition, or all its decom-positions are refinements of a unique optimal one. P
ROOF Let us suppose that E has no bi-nary decomposition. Its cover corresponds to us consider two different decompositions of E , that correspond respectively to decomposi-tions of the range r in two sets of sub-ranges of the form [ i, k the notations, we write k k dex p &gt; 0 such that for any l &lt; p , k k discrepancy between both decomposition. Since k q  X   X  m  X  such that q and q  X  are strictly greater than p and that are the minimal indexes such that k E tion with at least one bundle of the form E ( p  X  l  X  q  X  ). The reverse is true as well. Ap-plying Lemma 1, this shows that E ([ k a bundle with fan-out 2. Therefore, by replacing all ranges involved in this union in one decom-position or the other, we get a third decomposi-tion for which the two initial ones are strict refine-ments. This is a contradiction, which concludes the proof.
 Lemma 2 Let E = V ( r  X  r  X  ) be a bundle, with r = [ i, j ] . We suppose it has a unique (non-binary) optimal decomposition, which decomposes [ i, j ] into [ i, k no range r  X  X   X  r such that (i) E (ii)  X  l , 1  X  l  X  m such that [ k P
ROOF Let us consider a range r  X  X  that would con-tradict the lemma. The union of r  X  X  and of the ranges in the optimal decomposition that have a non-empty intersection with r  X  X  is a fan-out 2 bun-dle that includes at least two elements of the opti-mal decomposition, but that is strictly included in E because the decomposition is not binary. This is a contradiction.
 Lemma 3 Let E = V ( r, r  X  ) be a bundle, with r = [ i, j ] . We suppose it has a binary (optimal) decom-position (not necessarily unique). Let r  X  X  = [ i, k ] be the largest range starting in i such that k &lt; j and such that it anchors a bundle, namely E ( r  X  X  ) . Then E ( r  X  X  ) and E ([ k + 1 , j ]) form a binary de-composition of E .
 P
ROOF We need to prove that E ([ k + 1 , j ]) is a bundle. Each (optimal) binary decomposition of E decomposes r in 1, 2 or 3 sub-ranges. If no opti-mal decomposition decomposes r in at least 2 sub-ranges, then the proof given here can be adapted by reasoning on r  X  instead of r . We now sup-pose that at least one of them decomposes r in at least 2 sub-ranges. Therefore, it decomposes r in [ k 2 + 1 , j ] position by taking one such that k We shall now distinguish between two cases.

First, let us suppose that r is decomposed into two sub-ranges [ i, k the selected optimal decomposition. Obviously, component of its cover is is a sub-range of r  X  . Since r is decomposed in two sub-ranges, it is necessarily the same for r  X  . Therefore, E ([ i, k has a cover of the form [ i, k [ k 1 + 1 , j ] This means that r  X  is decomposed by E ( r  X  X  ) in only 2 ranges, namely the right component of E ( r  X  X  )  X  X  cover and another range, that we can call r  X  X  X  . Since r \ r  X  X  = [ k + 1 , j ] may not anchor a bundle with fan-out 1, it must contain at least one crossing edge. All such edges necessarily fall within r  X  X  X  . Conversely, any crossing edge that falls inside r  X  X  X  necessarily has its other end inside [ k + 1 , j ] . Which means that E ( r  X  X  ) and E ( r form a binary decomposition of E . Therefore, by definition of k
Second, let us suppose that r is decomposed into 3 sub-ranges by the selected original decom-position (therefore, r  X  is not decomposed by this decomposition). This means that this decompo-sition involves a bundle with a cover of the form of the form [ k E ( r  X  ) ). If k  X  k 2 , then the left range of both mem-bers of the original decomposition are included in r , which means that E ( r  X  X  ) = E , and therefore r  X  X  = r which is excluded. Note that k is at least as large as k ing in i such that k &lt; j and such that it anchors a bundle X ). Therefore, we have k Therefore, E ([ i, k all edges anchored inside [ k in
E ( r  X  X  ) . Hence, E ( r  X  X  ) can not be a crossing bun-dle without having a left component that is [ i, j ] , which is excluded (it would mean E ( r  X  X  ) = E ). This means that E ( r  X  X  ) is a bundle with a cover of the form [ i, k ]  X  [ k  X  + 1 , j ] . Which means that E ( r  X  ) is in fact the bundle whose cover is [ k + 1 , k  X  + 1]  X  r  X  . Hence, E ( r  X  X  ) and E ( r  X  ) a binary decomposition of E . Hence, by definition of k 1 , k = k 1 .

As an immediate consequence of Lemmas 2 and 3, our algorithm for extracting the optimal de-composition for F  X  consists in applying the fol-lowing procedure recursively, starting with F  X  , and repeating it on each constructed sub-bundle E , until sub-bundles with only one edge are reached. Let E = E ( r, r  X  ) be a bundle, with r = [ i, j ] . One optimal decomposition of E can be obtained as follows. One selects the bundle with a left com-ponent starting in i and with the maximum length, and iterating this selection process until r is cov-ered. The same is done with r  X  . We retain the opti-mal among both resulting decompositions (or one of them if they are both optimal). Note that this decomposition is unique if and only if it has four components or more; it can not be ternary; it may be binary, and in this case it may be non-unique.
This algorithm gives us a way to extract an op-timal decomposition of F  X  in linear time w.r.t. the number of sub-bundles in this optimal decomposi-tion. The only required data structure is, for each i (resp. k ), the list of bundles with a cover of the form [ i, j ]  X  [ k, l ] ordered by decreasing j (resp. l This can trivially be constructed in time O ( n 2 ) from the list of all bundles we built in time O ( n 2 ) in the previous section. Since the number of bun-dles is bounded by O ( n 2 ) (as mentioned above and proved in Section 5), this means we can ex-tract an optimal decomposition for F  X  in O ( n 2 ) .
Similar ideas apply to the simpler case of the decomposition of bundles with fan-out 1. 4.6 The main decomposition algorithm We now have to generalize our algorithm in or-der to handle the possible existence of fan-out 1 bundles. We achieve this by using the fan-out 2 algorithm recursively. First, we extract and re-move (maximal) bundles with fan-out 1 from F , and recursively apply to each of them the com-plete algorithm. What remains is F  X  , which is a set of bundles with no sub-bundles with fan-out 1. This means we can apply the algorithm presented above. Then, for each bundle with fan-out 1, we group it with a randomly chosen adjacent bundle with fan-out 2, which builds an expanded bundle with fan-out 2, which has a binary decomposition into the original bundle with fan-out 2 and the bun-dle with fan-out 1. In Section 4, we claimed that there are no more than O ( n 2 ) bundles. In this section we sketch the proof of this result, which will prove the quadratic time complexity of our algorithm.

Let us compute an upper bound on the num-ber of bundles with fan-out two that can be found within the p-graph processed in Section 4.5, i.e., a p-graph with no fan-out 1 sub-bundle.

Let E, E  X   X  E E  X  E  X  , then we say that E  X  expands E . E  X  is said to immediately expand E , written E  X  E  X  , if
E  X  expands E and there is no bundle E  X  X  such that E  X  X  expands E and E  X  expands E  X  X  .

Let us represent bundles and the associated im-mediate expansion relation by means of a graph. Let E denote the set of all bundles (with fan-out two) in our p-graph. The e-graph associated with our LCFRS production p is the directed graph with vertices E and edges defined by the relation  X  . For E  X  E , we let out ( E ) = { E  X  | E  X  E  X  } and in ( E ) = { E  X  | E  X   X  E } .

Lack of space prevents us from providing the proof of the following property. For any E  X  E that contains more than one edge, | out ( E ) |  X  2 and | in ( E ) |  X  2 . This allows us to prove our up-per bound on the size of E .
 Theorem 2 The e-graph associated with an LCFRS production p has at most n 2 vertices, where n is the rank of p .
 P
ROOF Consider the e-graph associated with pro-duction p , with set of vertices E . For a vertex E  X  E , we define the level of E as the number | E | of edges in the corresponding bundle from the p-graph associated with p . Let d be the maximum level of a vertex in E . We thus have 1  X  d  X  n . We now prove the following claim. For any inte-ger k with 1  X  k  X  d , the set of vertices in E with level k has no more than n elements.

For k = 1 , since there are no more than n edges in such a p-graph, the statement holds.

We can now consider all vertices in E with level tices in E with level smaller than or equal to k  X  1 , graph that are leaving from some vertex in E ( k  X  1) . | out ( E ) |  X  2 , we have | T ( k  X  1) |  X  2 |E ( k  X  1) than one is at least |E ( k  X  1) |  X  n . Since for each must end up at some vertex in E ( k ) . Let T be the 2( |E ( k  X  1) | X  n ) = 2 n . Since the vertices of level in
E must have incoming edges from set T , and be-cause each of them have at least 2 incoming edges, there cannot be more than n such vertices. This concludes the proof of our claim.

Since the the level of a vertex in E is necessarily lower than n , this completes the proof.

The overall complexity of the complete algo-rithm can be computed by induction. Our in-duction hypothesis is that for m &lt; n , the time complexity is in O ( m 2 ) . This is obviously true for n = 1 and n = 2 . Extracting the bundles with fan-out 1 costs O ( n 2 ) . These bundles are of length n 2 costs O (( n  X  n cursively the algorithm to bundles with fan-out 1 costs O ( n 2 plexity is in O ( n 2 )+ O (( n  X  n P i =1 O ( n i ) = O ( n We have introduced an efficient algorithm for opti-mal reduction of the rank of LCFRS s with fan-out at most 2 , that runs in quadratic time w.r.t. the rank of the input grammar. Given the fact that fan-out 1 bundles can be attached to any adjacent bundle in our factorization, we can show that our algorithm also optimizes time complexity for known tabular parsing algorithms for LCFRS s with fan-out 2 . As for general LCFRS , it has been shown by Gildea (2010) that rank optimization and time complexity optimization are not equivalent. Fur-thermore, all known algorithms for rank or time complexity optimization have an exponential time complexity (G  X omez-Rodr  X  X guez et al., 2009). Part of this work was done while the second author was a visiting scientist at Alpage (INRIA Paris-Rocquencourt and Universit  X e Paris 7), and was fi-nancially supported by the hosting institutions.
