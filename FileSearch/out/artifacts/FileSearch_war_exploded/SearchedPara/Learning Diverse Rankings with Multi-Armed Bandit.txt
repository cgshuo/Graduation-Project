 Filip Radlinski filip@cs.cornell.edu Robert Kleinberg rdk@cs.cornell.edu Thorsten Joachims tj@cs.cornell.edu Web search has become an essential component of the Internet infrastructure, and has hence attracted sig-nificant interest from the machine learning community (e.g. Herbrich et al., 2000; Burges et al., 2005; Radlin-ski &amp; Joachims, 2005; Chu &amp; Ghahramani, 2005; Met-zler &amp; Croft, 2005; Yue et al., 2007; Taylor et al., 2008). The conventional approach to this learning-to-rank problem has been to assume the availability of manually labeled training data. Usually, this data consists of a set of documents judged as relevant or not to specific queries, or of pairwise judgments compar-ing the relative relevance of pairs of documents. These judgments are used to optimize a ranking function off-line, to a standard information retrieval metric, then deploying the learned function in a live search engine. We propose a new learning to rank problem formu-lation that differs in three fundamental ways. First, unlike most previous methods, we learn from usage data rather than manually labeled relevance judg-ments. Usage data is available in much larger quan-tities and at much lower cost. Moreover, unlike man-ual judgments, which need to be constantly updated to stay relevant, usage data naturally reflects current users X  needs and the documents currently available. Although some researchers have transformed usage data into relevance judgments, or used it to generate features (e.g. Joachims, 2002; Radlinski &amp; Joachims, 2005; Agichtein et al., 2006), we go one step further by directly optimizing a usage-based metric.
 Second, we propose an online learning approach for learning from usage data. As training data is being collected, it immediately impacts the rankings shown. This means the learning problem we address is regret minimization, where the goal is to minimize the total number of poor rankings displayed over all time. In particular, in this setting there is a natural tradeoff be-tween exploration and exploitation: It may be valuable in the long run to present some rankings with unknown documents, to allow training data about these docu-ments to be collected. In contrast, in the short run exploitation is typically optimal. With only few ex-ceptions (e.g. Radlinski &amp; Joachims, 2007), previous work does not consider such an online approach. Third and most importantly, except for (Chen &amp; Karger, 2006), previous algorithms for learning to rank have considered the relevance of each document in-dependently of other documents. This is reflected in the performance measures typically optimized, such as Precision, Recall, Mean Average Precision (MAP) (Baeza-Yates &amp; Ribeiro-Neto, 1999) and Normalized Discounted Cumulative Gain (NDCG) (Burges et al., 2006). In fact, recent work has shown that these mea-sures do not necessarily correlate with user satisfaction (Turpin &amp; Scholer, 2006). Additionally, it intuitively stands to reason that presenting many slight varia-tions of the same relevant document in web search re-sults may increase the MAP or NDCG score, yet would be suboptimal for users. Moreover, web queries often have different meanings for different users (a canonical example is the query jaguar ) suggesting that a ranking with diverse documents may be preferable.
 We will show how clickthrough data can be used to learn rankings maximizing the probability that any new user will find at least one relevant document high in the ranking. The standard approach for learning to rank uses train-ing data, in the form of judgments assessing the rele-vance of individual documents to a query, to learn pa-rameters  X  for a scoring function f ( q,d i , X  ). Given a new query q , this function computes f ( q,d i , X  ) for each document d i independently and ranks documents by decreasing score (e.g. Herbrich et al., 2000; Joachims, 2002; Burges et al., 2005; Chu &amp; Ghahramani, 2005). This also applies to recent algorithms that learn  X  to maximize nonlinear performance measures such as MAP (Metzler &amp; Croft, 2005; Yue et al., 2007) and NDCG (Burges et al., 2006; Taylor et al., 2008). The theoretical model that justifies ranking docu-ments in this way is the probabilistic ranking principle (Robertson, 1977). It suggests that documents should be ranked by their probablility of relevance to the query. However, the optimality of such a ranking relies on the assumption that there are no statistical depen-dencies between the probabilities of relevance among documents  X  an assumption that is clearly violated in practice. For example, if one document about jaguar cars is not relevant to a user who issues the query jaguar , other car pages become less likely to be rele-vant. Furthermore, empirical studies have shown that given a fixed query, the same document can have dif-ferent relevance to different users (Teevan et al., 2007). This undermines the assumption that each document has a single relevance score that can be provided as training data to the learning algorithm. Finally, as users are usually satisfied with finding a small number of, or even just one, relevant document, the usefulness and relevance of a document does depend on other documents ranked higher.
 As a result, most search engines today attempt to elim-inate redundant results and produce diverse rankings that include documents that are potentially relevant to the query for different reasons. However, learning op-timally diverse rankings using expert judgments would require document relevance to be measured for differ-ent possible meanings of a query. While the TREC interactive track 1 provides some documents labeled in this way for a small number of queries, such document collections are even more difficult to create than stan-dard expert labeled collections. Several non-learning algorithms for obtaining a diverse ranking of documents from a non-diverse ranking have been proposed. One common one is Maximal Marginal Relevance (MMR) (Carbonell &amp; Goldstein, 1998). Given a similarity (relevance) measure between docu-ments and queries sim 1 ( d,q ) and a similarity measure between pairs of documents sim 2 ( d i ,d j ), MMR iter-atively selects documents by repeatedly finding d i = argmax d  X  X   X sim 1 ( d,q )  X  (1  X   X  ) max d j  X  S sim 2 ( d,d where S is the set of documents already selected and  X  is a tuning parameter. In this way MMR selects the most relevant documents that are also different from any documents already selected.
 Critically, MMR requires that the relevance function sim 1 ( d,q ), and the similarity function sim 2 ( d i ,d known. It is usual to obtain sim 1 and sim 2 using al-gorithms such as those discussed above. The goal of MMR is to rerank an already learned ranking (that of ranking documents by decreasing sim 1 score) to im-prove diversity. All previous approaches of which we are aware that optimize diversity similarly require a relevance function to be learned prior to performing a diversification step (Zhu et al., 2007; Zhang et al., 2005; Zhai et al., 2003), with the exception of Chen and Karger (2006). Rather, they require that a model for estimating the probability a document is relevant, given a query and other non-relevant documents, is available. In contrast, we directly learn a diverse rank-ing of documents using users X  clicking behavior. We address the problem of learning an optimally diver-sified ranking of documents D = { d 1 ,...,d n } for one fixed query. Suppose we have a population of users, where each user u i considers some subset of documents A i  X  X  as relevant to the query, and the remainder of the documents as non-relevant. Intuitively, users with different interpretations for the query would have dif-ferent relevant sets, while users with similar interpre-tations would have similar relevant sets.
 At time t , we interact with user u t with relevant set A t . We present an ordered set of k documents, B t = ( b 1 ( t ) ,...,b k ( t )) . The user considers the results in order, and clicks on up to one document. The prob-ability of user u t clicking on document d i (conditional on the user not clicking on a document presented ear-lier in the ranking) is assumed to be p ti  X  [0 , 1]. We refer to the vector of probabilities ( p ti ) i  X  X  as the type of user u t . In the simplest case, we could take p ti = 1 if d i  X  A t and 0 otherwise, in which case the user clicks on the first relevant document or does not click if no documents in B t are relevant. However, in reality clicks tend to be noisy although more relevant docu-Algorithm 1 Ranked Explore and Commit 1: input: Documents ( d 1 ,..,d n ), parameters , X ,k . 2: x  X  X  2 k 2 / 2 log(2 k/ X  ) e 3: ( b 1 ,...,b k )  X  k arbitrary documents. 5:  X  j. p j  X  0 8: b i  X  d j 9: display { b 1 ,...,b k } to user; record clicks 10: if user clicked on b i then p j  X  p j + 1 11: end for 12: end for 15: end for ments are more likely to be clicked on. In our analysis, we will take p ti  X  [0 , 1].
 We get payoff 1 if the user clicks, 0 if not. The goal is to maximize the total payoff, summing over all time. This payoff represents the number of users who clicked on any result, which can be interpreted as the user finding at least one potentially relevant document (so long as p ti is higher when d i  X  A t than when d i /  X  A The event that a user does not click is called aban-donment since the user abandoned the search results. Abandonment is an important measure of user satis-faction because it indicates that users were presented with search results of no potential interest. We now present two algorithms that directly mini-mize the abandonment rate. At a high level, both algorithms learn a marginal utility for each document at each rank, displaying documents to maximize the probability that a new user of the search system would find at least one relevant document within the top k positions. The algorithms differ in their assumptions. 4.1. Ranked Explore and Commit The first algorithm we present is a simple greedy strat-egy that assumes that user interests and documents do not change over time. As we will see, after T time steps this algorithm achieves a payoff of at least (1  X  1 /e  X  ) OPT  X  O ( k 3 n/ 2 ln( k/ X  )) with probability at least 1  X   X  . OPT denotes the maximal payoff that could be obtained if the click probabilities p ti were known ahead of time for all users and documents, and (1  X  1 /e ) OPT is the best obtainable polynomial time approximation, as will be explained in Section 5.1. As described in Algorithm 1, Ranked Explore and Algorithm 2 Ranked Bandits Algorithm 2: for t = 1 . . . T do 4:  X  b i ( t )  X  select-arm ( MAB i ) 6: b i ( t )  X  arbitrary unselected document 7: else 8: b i ( t )  X   X  b i ( t ) 9: end if 10: end for 11: display { b 1 ( t ) ,...,b k ( t ) } to user; record clicks 13: if user clicked b i ( t ) and  X  b i ( t ) = b i ( t ) then 14: f it = 1 15: else 16: f it = 0 17: end if 18: update ( MAB i ,arm =  X  b i ( t ) ,reward = f it ) 19: end for 20: end for Commit (REC) iteratively selects documents for each rank. At each rank position i , every document d j is presented a fixed number x times, and the number of clicks it receives during these presentations is recorded. After nx presentations, the algorithm permanently as-signs the document that received the most clicks to the current rank, and moves on to the next rank. 4.2. Ranked Bandits Algorithm Ranked Explore and Commit is purely greedy, mean-ing that after each document is selected, this deci-sion is never revisited. In particular, this means that if user interests or documents change, REC can per-form arbitrarily poorly. In contrast, the Ranked Ban-dits Algorithm (RBA) achieves a combined payoff of (1  X  1 /e ) OPT  X  O ( k if documents and user interests change over time. This algorithm leverages standard theoretical results for multi-armed bandits. Multi-armed bandits (MAB) are modeled on casino slot machines (sometimes called one-armed bandits). The goal of standard MAB algo-rithms is to select the optimal sequence of slot ma-chines to play to maximize the expected total reward collected. For further details, refer to (Auer et al., 2002a). The ranked bandits algorithm runs an MAB instance MAB i for each rank i . Each of the k copies of the multi-armed bandit algorithm maintains a value (or index) for every document. When selecting the ranking to display to users, the algorithm MAB 1 is responsible for choosing which document is shown at rank 1. Next, the algorithm MAB 2 determines which document is shown at rank 2, unless the same docu-ment was selected at the highest rank. In that case, the second document is picked arbitrarily. This pro-cess is repeated to select all top k documents. Next, after a user considers up to the top k documents in order and clicks on one or none, we need to update the indices. If the user clicks on a document actually selected by an MAB instance, the reward for the arm corresponding to that document for the multi-armed bandit at that rank is 1. The reward for the arms corresponding to all other selected documents is 0. In particular, note that the RBA treats the bandits corre-sponding to each rank independently. Precise pseudo-code for the algorithm is presented in Algorithm 2. A generalization of this algorithm, in an abstract set-ting without the application to Information Retrieval, was discovered independently by Streeter and Golovin (2007).
 The actual MAB algorithm used for each MAB i in-stance is not critical, and in fact any algorithm for the non-stochastic multi-armed bandit problem will suf-fice. Our theoretical analysis only requires that:  X  The algorithm has a set S of n strategies.  X  In each period t a payoff function f t : S  X  [0 , 1] is  X  In each period the algorithm chooses a (random)  X  The feedback revealed in period t is f t ( y t ).  X  The expected payoffs of the chosen strategies sat-We will also later see that although these conditions are needed to bound worst-case performance, better practical performance may be obtained at the expense of worst-case performance if they are relaxed. We now present a theoretical analysis of the algorithms presented in Section 4. First however, we discuss the offline version of this optimization problem. 5.1. The Offline Optimization Problem The problem of choosing the optimum set of k docu-ments for a given user population is NP-hard, even if all the information about the user population (i.e. the set of relevant documents for each user) is given offline and we restrict ourselves to p ij  X  { 0 , 1 } . This is be-cause selecting the optimal set of documents is equiva-lent to the maximum coverage problem: Given a posi-tive integer k and a collection of subsets S 1 ,S 2 ,...,S of an m -element set, find k of the subsets whose union has the largest possible cardinality.
 The standard greedy algorithm for the maximum cov-erage problem, translated to our setting, iteratively chooses the document that is relevant to the most users for whom a relevant document has not yet been se-lected. This algorithm is a (1  X  1 /e )-approximation algorithm for this maximization problem (Nemhauser et al., 1978). The (1  X  1 /e ) factor is optimal and no better worst-case approximation ratio is achievable in polynomial time unless NP  X  DTIME n log log n (Khuller et al., 1997). 5.2. Analysis of Ranked Bandits Algorithm We start by analyzing the Ranked Bandits Algorithm. This algorithm works by simulating the offline greedy algorithm, using a separate instance of the multi-armed bandit algorithm for each step of the greedy algorithm. Except for the sublinear regret term, the combined payoff is as high as possible without violat-ing the hardness-of-approximation result stated in the preceding paragraph.
 To analyze the RBA, we first restrict ourselves to users who click on any given document with probability ei-ther 0 or 1. We refer to this restricted type of user as a deterministic user ; we will relax the requirement later. Additionally, this analysis applies to a worst case (and hence fixed) sequence of users.
 Further, it is useful to introduce some notation. For a set A and a sequence B = ( b 1 ,b 2 ,...,b k ), let Recalling that A t is the set of documents relevant to user u t , we see that G k ( A t ,B ) is the payoff of present-ing B to the user u t . Let ments chosen by the algorithms MAB 1 ,..., MAB k at documents presented to the user. Define the feedback function f it for algorithm MAB i at time t , as follows: Note that the value of f it defined in the pseudocode for the Ranked Bandits Algorithms is equal to f it (  X  b i ( t )). Lemma 1. For all i , Proof. First, note that This is trivially true when f it (  X  b i ( t )) = 0. When f (  X  b i ( t )) = 1, G i  X  1 ( A t ,B t ) = 0 and  X  b i ( t )  X  A implies that b i ( t ) =  X  b i ( t ) and that g i ( A t ,B Now using the regret bound for MAB i we obtain
X To complete the proof of the lemma, we will prove that The lemma follows immediately by combining (1)-(3). Observe that the left side of (3) is a non-negative integer, while the right side takes one of the values { X  1 , 0 , 1 } . Thus, to prove (3) it suffices to show that the left side is greater than or equal to 1 whenever the right side is equal to 1. The right side equals 1 only when G i  X  1 ( A t ,B t ) = 0 and A t intersects B  X  . In this case it is clear that there exists at least one b  X  B such that f it ( b ) = 1, hence the left side is greater than or equal to 1.
 Theorem 1. The algorithm X  X  combined payoff after T rounds satisfies:
E Proof. We will prove, by induction on i , that OPT  X  E The theorem follows by taking i = k and using the inequality 1  X  1 k k &lt; 1 e .
 In the base case i = 0, inequality (5) is trivial. For the induction step, let We have and Lemma 1 says that Combining (6) with (7), we obtain Combining this with the induction hypothesis proves (5).
 The general case, in which user u i  X  X  type vector ( p ij ) j  X  X  is an arbitrary element of [0 , 1] D , can be re-duced via a simple transformation to the case of de-terministic users analyzed above. We replace user u i with a random deterministic user  X  u i whose type vector  X  p i  X  { 0 , 1 } D is sampled using the following rule: the random variable  X  p ij has distribution and these random variables are mutually independent. Note that the clicking behavior of user u i when pre-sented with a ranking B is identical to the clicking behavior observed when a random user type  X  u i is sam-pled from the above distribution, and the ranking B is presented to this random user. Thus, if we apply the specified transformation to users u 1 ,u 2 ,...,u obtaining a random sequence  X  u 1 ,  X  u 2 ,...,  X  u T of deter-ministic users, this transformation changes neither the algorithm X  X  expected payoff nor that of the optimum ranking B  X  . Thus, Theorem 1 for general users can be deduced by applying the same theorem to the ran-dom sequence  X  u 1 ,...,  X  u T and taking the expectation of the left and right sides of (4) over the random choices involved in sampling  X  u 1 ,...,  X  u T .
 Note also that B  X  is defined as the optimal subset of k documents, and OPT is the payoff of presenting B  X  , without specifying the order in which documents are presented. However, the Ranked Bandits Algorithm learns an order for the documents in addition to iden-tifying a set of documents. In particular, given k 0 &lt; k , RBA( k 0 ) would receive exactly the same feedback as the first k 0 instances of MAB i receive when running RBA( k ). Hence any k 0 sized prefix of the learned rank-ing also has the same performance bound with respect the appropriate smaller set B 0 X  .
 Finally, it is worth noting that this analysis cannot be trivially extended to non-binary payoffs, for exam-ple when learning a ranking of web advertisements. In particular, the greedy algorithm on which RBA is based in the non-binary payoff case can obtain a payoff that is a factor of k  X   X  below optimal, for any  X  &gt; 0. 5.3. Analysis of Ranked Explore and Commit The analysis of the Ranked Explore and Commit (REC) algorithm is analogous to that of the Ranked Bandits algorithm, except that the equivalents of Lemma 1 and Theorem 1 are only true with high prob-ability after t 0 = nxk time steps of exploration have occurred. Let B denote the ranking selected by REC. Lemma 2. Let x = 2 k 2 / 2 log(2 k/ X  ) . Assume A t is drawn i.i.d. from a fixed distribution of user types. For any i , with probability 1  X   X /k , Proof Outline. First note that in this setting, B  X  and OPT are defined in expectation over the A t drawn. For any document, by Hoeffding X  X  inequality, with probability 1  X   X / 2 k the true payoff of that document explored at rank i is within / 2 k of the observed mean payoff. Hence the document selected at rank i is within /k of the payoff of the best document available at rank i . Now, the same proof as for Lemma 1 applies, although with a different regret R ( T ).
 Theorem 2. With probability (1  X   X  ) , the algorithm X  X  combined payoff after T rounds satisfies:
E Proof Outline. Applying Lemma 2 for all i  X  X  1 ,..,k } , with probability (1  X  k X /k ) = (1  X   X  ) the conclusion of the Lemma holds for all i .
 Next, an analogous proof as for Theorem 1 applies, except replacing R ( T ) with k T and noting that the regret during the nkx exploration steps is at most 1 for every time step.
 It is interesting to note that, in contrast to the Ranked Bandits Algorithm, this algorithm can be adapted to the case where clicked documents provide real valued payoffs. The only modification necessary is that docu-ments should always be presented by decreasing payoff value. However, we do not address this extension fur-ther due to space constraints. In this section, we evaluate the Ranked Bandits and Ranked Explore and Commit algorithms, as well as two variants of RBA, with simulations using a user and document model.
 We chose a model that produces a user population and document distribution designed to be realistic yet al-low us to evaluate the performance of the presented algorithms under different levels of noise in user click-ing behavior. Our model first assigns each of 20 users to topics of interest using a Chinese Restaurant Pro-cess (Aldous, 1985) with parameter  X  = 3. This led to a mean of 6.5 unique topics, with topic popularity decaying according to a power law. Taking a collection of 50 documents, we then randomly assigned as many documents to each topic as there were users assigned to the topic, leading to topics with more users having more relevant documents. We set each document as-signed to a topic as relevant to all users assigned to that topic, and all other documents as non relevant. The probabilities of a user clicking on relevant and non-relevant documents were set to constants p R and p NR respectively.
 We tested by drawing one user uniformly from the user population at each time step, and presented this user with the ranking selected by each algorithm, using k = 5. We report the average number of time steps where the user clicked on a result, and the average number of time steps where at least one of the pre-sented documents was relevant to the user. All num-bers we report are averages over 1,000 algorithm runs. 6.1. Performance Without Click Noise We start by evaluating how well the REC and RBA algorithms maximize the clickthrough rate in the sim-plest case when p R = 1 and p NR = 0. We also compare their performance to the clickthrough rate that the same users would generate if presented with a static system that orders documents by decreasing true prob-ability of relevance to the users assuming document relevances are independent. Figure 1 shows that both REC and RBA perform well above the static baseline and well above the performance guarantee provided by the theoretical results. This is not surprising, as the (1  X  1 /e ) OPT bound is a worst-case bound. In fact, we see that REC with x = 1000 nearly matches the performance of the best possible ranking after finish-ing its initial exploration phase. We also see that the exploration parameter of REC plays a significant role in the performance, with lower exploration leading to faster convergence but slightly lower final performance. Note that despite REC performing best here, the rank-ing learned by REC is fixed after the exploration steps have been performed. If user interests and documents change over time, the performance of REC could fall arbitrarily. In contrast, RBA is guaranteed to remain near or above the (1  X  1 /e ) OPT bound. 6.2. Effect of Click Noise In Figure 1, the clickthrough rate and fraction of users who found a relevant document in the top k positions is identical (since users click if and only if they are presented with a relevant document). In contrast, Figure 2 shows how the fraction of users who find a relevant document decays as the probability of a user clicking becomes noisier. The figure presents the performance lines for REC and RBA across a range of click probabilities, from ( p R = 1 ,p NR = 0) to ( p
R = 0 . 7 ,p NR = 0 . 3). We see that both algorithms decay gracefully: as the clicks become noisier noisy, the fraction of users presented with a relevant docu-ments decays slowly. 6.3. Optimizing Practical Effectiveness Despite the theoretical results shown earlier, it would be surprising if an algorithm designed for the worst case had best average case performance. Figure 3 shows the clickthrough rate (which the algorithms op-timize), and fraction of users who find relevant doc-uments (which is of more interest to information re-trieval practitioners), for variants building on the in-sights of the ranked bandits idea. Specifically, two variants of RBA that have the best performance we could obtain in our simulation are shown. We found that using a UCB1-based multi-armed bandit algo-rithm (Auer et al., 2002a) in place of EXP3 improves the performance of RBA substantially when user inter-ests are static. Note however, that UCB1 does not sat-isfy the constraints presented in Section 4.2 because it assumes rewards are identically distributed over time, an assumption violated in our setting when changes in the documents presented above rank i alter the reward distribution at rank i . Nevertheless, we see that this modification substantially improves the performance of RBA. We expect such an algorithm to perform best when few documents are prone to radical shifts in pop-ularity. We have presented a new formulation of the learning to rank problem that explicitly takes into account the relevance of different documents being interdependent. We presented, analyzed and evaluated two algorithms and two variants for this learning setting. We have shown that the learning problem can be solved in a theoretically sound manner, and that our algorithms can be expected to perform reasonably in practice. We plan to extend this work by addressing the non-binary document relevance settings, and perform em-pirical evaluations using real users and real documents. Furthermore, we plan to investigate how prior knowl-edge can be incorporated into the algorithms to im-prove speed of convergence. Finally, we plan to inves-tigate if the bandits at different ranks can be coupled to improve the rate at which RBA converges.
 We would like to thank the reviewers for helpful com-ments. This work was supported by NSF Career Award CCF-0643934, NSF Award CCF-0729102, NSF Career Award 0237381 and a gift from Google. The first author was supported by a Microsoft Research Fellowship.

