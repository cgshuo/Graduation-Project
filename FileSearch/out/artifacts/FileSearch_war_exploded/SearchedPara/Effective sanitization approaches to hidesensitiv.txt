
Department of CSE, Kongu Engineering College, Erode, Tamil Nadu, India Department of ECE, Bannari Amma n Institute of Technology, Erode, Tamil Nadu, India 1. Introduction disclosing the sensitive patterns.
 changes to the legitimate itemsets and maintain good data quality. Finally, in Section 6 a summary of the work is consolidated. 2. Background and related work 2.1. Utility and frequent itemset mining
Let I = { i 1 ,i 2 ,...i  X  D = { T 1 ,T 2 ,...,T  X  o ( i  X  s ( i  X  u ( i  X  u ( X,T  X  u ( X ) represent the utility of an itemset X and is de fi ned as number in each transaction in Table 1(a) is the sales volume of each item.  X  = 100 , BDE is a high utility and frequent itemset whereas AB does not. 3. Related work not consider the distribution.
 D such as association rule mining is addressed by Atallah et al. [17]. only.
 rithms to hide utility and frequent itemsets. 4. Problem formulation threshold. The following property demonstrates this scenario. Property: Let X =( x 1 ,...,x the utility of the itemset X . Suppose an item x the itemset  X  Proof: Let T item x such that  X  It is known that u ( X ) &gt; X  the sanitization.
 limited side effects to the non-sensitive itemsets.
 and P is de fi ned as  X  P utility and frequent itemsets P frequent itemsets in P can still be mined from D while others will be hidden. 5. Sanitization approaches itemsets. A set of sensitive utility and frequent itemsets P process.

The sanitization approach involves the following steps: (1) Find the transactions supported by t he sensitive utility and frequent itemsets. (2) Select the list of transactions for sanitization non-sensitive itemsets.
 Algorithm: Minimum Support and Ma ximum Utility (MSMU) Input: Database D ,aset P  X  , minimum support threshold  X  .
 Output: Modi fi ed Database D begin 1. // Step 1: Extract the sensitive transactions 2. sort the sensitive itemsets P 3. fi nd the sensitive transactions TS supported by P 4. // Step 2: Select the list of transactions to be sanitized 5. for each sensitive itemset s 6. extract the sensitive transactions Ts 7. sort Ts 8. k  X  1 9. // Step 3: Identify the victim item and reduce the support 10. while (support ( s 12. fi nd the item i min  X  s 13. o ( i min ,t )  X  0 14. update support ( s 15. k  X  k +1 16. end while 17. if utility ( s 18. P 19. end for 20. // Step 4: Identify the victim item and decrease the utility 21. for each sensitive itemset s 22. extract the sensitive transactions Ts 23. sort Ts 24. k  X  1 25. while (utility ( s 27. fi nd the item i max  X  s 28. o ( i max ,t )  X  0 29. update support ( s 30. k  X  k +1 31. end while 32. P 33. end for 34. // Step 5: Rewrite the modi fi ed transactions 35. for each transaction t  X  D 36. if t is modi fi ed as t then 37. write t to D 38. else 39. write t to D 40. end for end to disk as per Step 5.
 is O ( n 1  X  n 2 ) ,where n 1 = | P s | and n 2 = | D | .
 that it uses con fl ict ratio to select the victim items for modi fi cation/deletion. Algorithm: Maximum Con fl ict Ratio for Suppor t and Utility (MCRSU) Input: Database D ,aset P Output: Modi fi ed Database D begin 1. // Extract the sensitive transactions 2. sort the sensitive itemsets P 3. fi nd the sensitive transactions TS supported by P 4. // Select the list of transactions to be sanitized 5. for each sensitive itemset s 6. extract the sensitive transactions Ts 7. sort Ts 8. k  X  1 9. // Identify the victim item and reduce the support 10. while (support ( s 12. for each item i  X  s 13. Compute r 14. end for 15. o ( i max ,t )  X  0 16. update support ( s 17. k  X  k +1 18. end while 19. if utility ( s 20. P 21. end for 22. // Identify the victim item and decrease the utility 23. for each sensitive itemset s 24. extract the sensitive transactions Ts 25. sort Ts 26. k  X  1 27. ds 28. while ( ds 30. for each item i  X  s 31. Compute r 32. end for 33. if ( u ( i max ,t ) &lt;ds 34. o ( i max ,t )  X  0 35. ds 36. else 37. o ( i max ,t )  X  o ( i max ,t )  X  ds j 38. ds 39. k  X  k +1 40. end while 41. P 42. end for 43. // Rewrite the modi fi ed transactions 44. for each transaction t  X  D 45. if t is modi fi ed as t then 46. write t to D 47. else 48. write t to D 49. end for end n 6. Experimental analysis the results of sanitization [30].
 where | P measure depicts the data quality at the item level.
 where | U range[1,...,10](internal)and[1,...,20](external).
 old  X  , the utility and frequent itemsets are generated using the following steps: 1. Generate the frequent itemsets using Apriori implementation [3]. 2. Generate the itemsets with high utility from these frequent itemsets. Table 3.

The following set up is used for selecting sensitive utility and frequent itemsets. 2. The sensitive itemsets are chosen randomly. transactions based on the minimu m support and minimu m utility threshold.
The following conditions have been used to perform the experiments: shown in Table 4.
 and the utility is reduced below  X  .
 con fl ict ratio, it leads to reduce MC in MCRSU which is better than MSMU. threshold, it has shown an improvement of 31%.
 in MCRSU.
  X  =0 . 064% , X  =0 . 18% and the number of sensitive itemsets | P MCRSU shows improved results for | P MCRSU performed far better than MSMU.

The results on the same database with  X  =0 . 064% , | P respectively.
 0 . databases since the database is sparse. When | P parison to MSMU. However, for 30 sensitive itemsets P victim items with the non-sensitive itemsets. Similarly with | P reason.
 |
P decrease. Again MCRSU behaves better than MSMU.
 in Fig. 7(b). Here MCRSU exhibits improved MC except for  X  = 15% . sanitized database. 7. Conclusion has a great impact on the effectiveness of sanitization. Acknowledgement References
