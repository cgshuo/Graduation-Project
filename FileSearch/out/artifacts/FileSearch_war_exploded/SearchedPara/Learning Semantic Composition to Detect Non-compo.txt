 Multiword Expressions (MWEs) are sequences of words that exhibit some kind of idiosyncrasy. This idiosyncrasy can be semantic, statistical, or syn-tactic 1 . Ivory tower , speed limit , and at large are examples of semantically, statistically and syn-tactically idiosyncratic MWEs respectively. Note that an MWE can be idiosyncratic at several lev-els. In general, semantically idiosyncratic MWEs are commonly referred to as non-compositional (Baldwin and Kim, 2010) and statistically idiosyn-cratic MWEs are commonly referred to as col-locations (Sag et al., 2002). Non-compositional MWEs are those whose meaning can not be read-ily inferred from the meaning of their constituents and collocations are those MWEs whose con-stituents co-occur more than expected by chance. Collocations constitute the largest subset of all kinds of MWEs, however, non-compositional ones cause more problems in various NLP tasks, for ex-ample word sense disambiguation (McCarthy et al., 2003) and machine translation (Lin, 1999). It may also be more challenging to model non-compositionality than collocational weight as the former has to do with modelling the semantics and the latter can to some extent be modeled by con-ventional statistical measures such as mutual in-formation. Detecting non-compositionality in an automatic fashion has been the aim of much pre-vious research.

In this paper, we capture non-compositionality assumption that the majority of the compounds are compositional, for which a composition func-tion can be learned. This implies that the com-pounds for which a composition function cannot be learned with a relatively low error are non-compositional.

In previous work on vector-space models of dis-tributional semantics, semantic composition has been commonly assumed to be a trivial predeter-mined function such as addition, multiplication, and their weighted variations (Mitchell and Lap-ata, 2008; Reddy et al., 2011; Salehi et al., 2015). Nevertheless there is some work that regards com-position as a more complex function. For in-stance Widdows (2008) who propose (but doesn X  X  empirically test) the use of Tensor and Convolu-tion products for modelling non-compositionality, Baroni and Zamparelli (2010) who regard adjec-tives in adjectival-noun compositions as matri-ces that can be learned by linear regression, and Socher et al. (2012) who present a model that learns phrase composition by means of a recursive neural network. The two latter works show that complex composition models significantly outper-form additive and multiplicative functions. In this work, we too assume that composition is ar-guably a complex function. We believe simpli-fied composition functions, such as additive and multiplicative functions and their weighted varia-tions, while having advantages such as being im-pervious to overfitting, can not completely cap-ture semantic composition. Nevertheless mod-elling composition by means of a powerful func-tion can be equally inadequate for our purposes. An overly powerful composition function mem-orizes all compositional and non-compositional compounds, resulting in overfitting and low learn-ing error that hinders discrimination between com-positional and non-compositional compounds. We examine various classes of composition functions, ranging from the least to the most powerful (in terms of learning capacity). We show that com-plex functions clearly do a better job in mod-elling semantic composition and in detecting non-compositionality compared to commonly used ad-ditive and multiplicative functions.

Compositional compounds are also decompos-able; intuitively, their semantics is the union of the semantics of their components. More for-mally, conditioned on the vector of the com-pound, vectors of the component words should be independently predictable. This principle, to-gether with the assumption that most of the com-pounds are compositional, leads to the conclusion that a model of composition should be able to be auto-reconstructive: the composition function that maps component-words X  vectors to their com-pound vector should have an associated decom-position function that independently predicts each of the component-words X  vectors from this com-pound vector. An auto-reconstructive model en-ables us to exploit more data in order to learn se-mantic composition and predict compositionality. We show that auto-reconstruction can improve the accuracy of composition functions and improve detecting non-compositionality.

To further improve non-compositionality de-tection, we propose an EM-like detection algo-rithm based on hidden compositionality annota-tions. The best composition is the one that is the best fit on all the data points except the non-compositional ones. Since we don X  X  use annotated data at training time, we assume annotations to be hidden variables and iteratively alternate between optimizing the composition function and optimiz-ing the hidden compositionality annotations. We show that this iterative algorithm increases the accuracy of non-compositionality detection com-pared to the case when training is done on all ex-amples.
 We run our experiments on the data set of Farahmand et al. (2015) who provide a set of English NCs which are annotated with non-compositionality judgments. We show that quadratic regression significantly outperforms ad-ditive and multiplicative baselines and all other models in modelling semantic composition and identifying the non-compositional NCs. In short, the contributions of our work are: to empirically evaluate various composition functions ranging from simple to overly complex in order to find the most accurate function; to propose, to the best of our knowledge for the first time, a method of iden-tifying non-compositional phrases as phrases for which a composition function cannot be readily learned; to propose learning decomposability as another criterion to detect non-compositionality; and to examine possible ways of improving the ac-curacy of the models by means of EM on hidden compositionality annotations. To the best of our knowledge, attempts to extract non-compositionality in computational linguistics go back to 1998. Tapanainen et al. (1998) pro-pose a method to identify non-compositional verb-object collocations based on the semantic asym-metry of verb-object relation. They assume that in a verb-object idiomatic expression, the object is a more interesting element in the sense that if the object appears with one (or only a few) verbs in a large corpus, it presumably has an id-iomatic nature. Lin (1999) argues that the mu-tual information between the constituents of a non-compositional phrase is significantly differ-ent from that of a phrase created by substitut-ing the constituents of that phrase with their sim-ilar words. Their evaluation reveals a low pre-cision ( 16  X  39% ) and recall ( 14  X  21% ). In any case this method is not able to discrimi-nate non-compositional MWEs from collocational MWEs as they share the same property of non-substitutability (their constituents cannot be re-placed with their synonyms). Baldwin et al. (2003) present a method that decides about the non-compositionality of English NCs and verb particle constructions by using latent semantic analysis to calculate the similarity between a MWE and its components. They argue that a higher similarity indicates a higher degree of com-positionality. McCarthy et al. (2003) devise a number of measures based on comparison of the neighbors of phrasal verbs and their correspond-ing simplex verbs. They evaluate these measures by calculating their correlation with human com-positionality judgments on a set of phrasal verbs. They show that some of the measures have signifi-cant correlations with human judgments. Venkata-pathy and Joshi (2005) present a supervised model that benefits from both collocational and con-textual information and ranks the MWE candi-dates based on their non-compositionality. Katz and Giesbrecht (2006) use distributional semantics and LSA as a model of context similarity to test whether the local context of a MWE can distin-guish its idiomatic use from literal use. They fur-ther compare the context of a MWE with the con-text of its components and show that this can be used to decide whether the expression is idiomatic or not. Cook et al. (2007) is a relatively differ-ent work where the authors propose a syntactic ap-proach to identify semantic non-compositionality of verb-noun MWEs. McCarthy et al. (2007) use various models of selectional preferences for de-tecting non-compositional verb-object pairs.
Reddy et al. (2011) employ the additive and multiplicative composition functions presented by ity based models to measure the compositionality of MWEs. Similarity based models measure the similarity of a MWE vector and sum/product of its constituents X  vectors. Their evaluation (which is carried out on a set of 90 annotated NCs) shows that there is a relatively high correlation (Spear-man  X  of between 0 . 51 and 0 . 71 ) between their models X  predictions and human judgments on non-compositionality of English NCs, with weighted additive function outperforming all the other mod-els. Kiela and Clark (2013) present a model of de-tecting non-compositionality based on the hypoth-esis that the average distance between a phrase vector and its substituted phrase vectors is related to its compositionality. In particular composi-tional phrases are less similar to their neighbors in semantic space. The distributional vectors repre-senting the semantics of words were created using the standard window method and 50,000 most fre-quent context words. They show that their model slightly ( +0 . 014 and +0 . 007 ) outperforms their baselines (Venkatapathy and Joshi, 2005; Mc-Carthy et al., 2007).

All of the models mentioned so far are based on sentation of the words. More recent works how-ever are based on representation learning of word embeddings. Baroni and Zamparelli (2010) regard adjective as matrices and nouns as real-valued vec-tors for Italian adjective noun composition. They learn the adjective matrices by linear regression. In this work, however, every adjective is presented by a new matrix which leads to a large number of parameters. Socher et al. (2012) suggest that composition function is a matrix that multiplies on the word vectors, and Mikolov et al. (2013b) present a model of learning non-compositional phrases by calculating a data-driven score for cer-tain frequent phrases (up to size two) and learn them as a whole. Salehi et al. (2015) borrow the word embeddings from (Mikolov et al., 2013a) to model the semantics of words and use sev-eral composition functions from (Mitchell and La-pata, 2008; Reddy et al., 2011) to predict the non-compositionality of MWEs. They compare the performance of word embeddings with con-ventional distributional vector representations and discover the superiority of word embeddings in predicting non-compositionality of MWEs. In order to represent words and compounds we use word embeddings, which are a form of vec-tor space models. Vector space models represent the semantics of words and phrases with real val-ued vectors. Word embeddings have proven to be effective models of semantic representation of words and outperform the count-based models in various NLP tasks (Baroni et al., 2014; Collobert et al., 2011; Collobert and Weston, 2008; Yaz-dani and Popescu-Belis, 2013; Huang et al., 2012; Mikolov et al., 2013c). They have been success-fully applied to semantic composition (Mikolov et al., 2013b) and outperformed the conventional count based contextual models in predicting non-compositionality of MWEs (Salehi et al., 2015). In this work we use word embeddings of Mikolov et al. (2013a) to represent the seman-tics of words and compounds. We chose an En-glish Wikipedia dump as our corpus. After fil-tering HTML tags and noise we POS-tagged the corpus and extracted  X  70 k compounds whose frequency of occurrence was above 50 . We learn the embeddings of these compounds as single to-also learn the embeddings of the compounds of the evaluation set, plus the embeddings of all the com-pounds X  component words. Compounds X  sizes are restricted to two (i.e. bigrams) for the sake of sim-plicity and to respect the evaluation set standards. The compounds and word embeddings are then used as supervised signals to learn a composition function. After the unsupervised learning of word embed-dings and candidate compound embeddings (see section 3), we use these embeddings as supervised signals in order to train our composition func-tions. The term supervised might be misleading as the models do not have any information about the compositionality of the compounds during the training phase, and in that respect it is unsuper-vised. To describe the models in a formal way, throughout the paper we use the following nota-tions: d represents the size of embeddings,  X  ( w i ) represents embedding of w i , and  X   X  ( w i  X  w j ) = f (  X  ( w i ) , X  ( w j )) represents the learned embed-ding of bigram w i  X  w j by the composition func-tion f . The training error of bigram w i  X  w j by f 2. The composition functions are described in the following sections.

Given unsupervised embeddings for both words and compounds, a composition model is trained to map the word embeddings to the compound embeddings, with norm 2 error e ij defined above. Then this same error for this same task (norm 2 between predicted and unsupervised compound embeddings) is used to measure non-compositionality. In other words, we learn a com-position function (with several models) and iden-tify non-compositional expressions as those for which the error of this composition function is high.

We explore various classes of composition functions of word embeddings, ranging from sim-ple to complex, to find the most effective one. We want a composition function that is pow-erful enough to learn composition for composi-tional compounds, but simple enough that it fails to learn composition for non-compositional com-pounds. To this end, we investigate linear pro-jections, polynomial projections, and neural net-works. We try these models with and without spar-sity regularisation, which reduces the number of non-zero parameters while otherwise keeping the complexity of the function that can be learned. 4.1 Linear Projection In this model we assume that the embedding of a bigram is a linear projection of its component words X  embeddings. To train this function we optimize the least square error, which gives us a multi-variant linear regres-sion.
As mentioned earlier, a composition function that doesn X  X  overfit the training data and induces a more meaningful error is more suitable for our purpose. One effective way of reducing overfitting and increasing generalization is by keeping only the important parameters of the model, which is done by enforcing sparsity on model parameters. In case of sparse linear projections, only a few el-ements of the projection matrix  X  are non-zero. This means that not all dimensions of the latent space has a role in all dimensions of the compound embedding.

To apply sparsity on  X  , we add a norm 1 penalty on it and add that to the least square optimization. This forms a multi-variant lasso regression (Tib-shirani, 2011).
Figure 1 shows the transformation matrices of linear projection and sparse linear projection. The two diagonals of the matrices correspond to the sum of the two embeddings, which we can see are the main component of the sparse function, and play an important role in the non-sparse one. We will see that despite being an important compo-nent of these functions, sum alone is not capable of accurately model semantic composition. 4.2 Polynomial Projection Polynomial projection is a non-linear projection that assumes the relation between compound em-bedding and the component words X  embeddings should be a polynomial of degree n . This can be viewed as a form of linear regression where first a polynomial transformation is applied to the in-put vector and then a linear projection is fitted. If  X  shows the polynomial transformation then we have:
We couldn X  X  successfully apply any polynomial beyond quadratic transformation without getting overfitting. The case of a quadratic  X  transforma-tion is:  X  ( x ) = x 2 1 ,  X  X  X  x 2 n
Similar to the linear case we can have sparse version of the polynomial regression in which we allow the presence of only a few non-zero ele-ments in the  X  matrix. The sparsity regularizer is more important in the case of polynomial re-gression as we have many more parameters. The quadratic model is similar to Recursive Neural Tensor compositionality model of Socher et al. (2013). But in our model the tensor is symmet-ric around the diagonal. Figure 2 shows the pure quadratic transformation matrices. 4.3 Neural Networks A feed forward neural network is a universal ap-proximator (Cybenko, 1989): feed-forward net-work with a single hidden layer can approximate any continuous function, provided it has enough hidden units. Therefore we use neural networks as a powerful class of learning models to learn se-mantic composition. The number of hidden units gives us a measure to control expressiveness of our model. f (  X  ( w i ) , X  ( w j )) =  X  ([  X  ( w i ) , X  ( w j )] W ih
Similar to the previous models, we optionally impose sparsity over weight matrices of the neu-ral network to be able to induce more meaningful learning errors. 4.4 Experimental Results We evaluated the above models on the data set of Farahmand et al. (2015). They provide a set of 1042 English NCs with four non-compositionality judgments. The judgments are binary decisions taken by four experts about whether or not a com-pound is non-compositional. We calculate a vote-based non-compositionality score for each of the data set compounds by summing over its non-compositionality judgments. The neural network models are trained using stochastic gradient de-scent. We use the additive and multiplicative mod-els of modelling composition and detecting non-compositionality presented by Salehi et al. (2015) and (Reddy et al., 2011) as state of the art base-lines.

The results are shown in Table 1. The sec-ond column shows the correlation between dif-ferent models X  predictions and the annotated data in terms of Spearman  X  . The last three columns show the performance of different mod-els in terms of Normalized Discounted Cumu-lative Gain (NDCG), F 1 score and and Preci-sion at 100 ( P @100 ). For these three scores we consider the problem of predicting non-compositional NCs a problem with a binary so-lution where we assume compounds (of the evalu-ation set) with at least two non-compositionality votes are non-compositional. NDCG assigns a higher score to a ranked list of compounds if the non-compositional ones are ranked higher in the list. F 1 column represents the maximum F 1 score on the top-n elements of the ranked list re-turned by the corresponding model for all n in Table 1: Results for each model X  X  ability to predict non-compositionality. [1  X  size-of-ranked-list ] . P @100 shows the pre-cision at the first 100 compounds ranked as non-compositional. The models are listed in the or-der of complexity of the composition function. The addition-based baseline which was explored in a variety of previous work does not seem to be as powerful as the other models. It is outper-formed by almost all learned models. In general, we can see that more complex functions tend to learn compositionality in a more effective way.
As mentioned earlier, overly powerful learners overfit and do not produce meaningful errors for the detection task. Sparsity seems to address this issue by reducing the number of non-zero param-eters while the function can still keep the complex terms if needed. In general sparse models show improvement over their non-sparse counterparts, specifically for more powerful models. In this section, we investigate the hypothesis that we can detect non-compositionality better by not only modelling a composition function, but also modelling a decomposition function. For com-positional compounds, given the meaning of the compound, the meaning of the two component words should be conditionally independent. We therefore assume that the decomposition function predicts the component words X  vectors indepen-dently. Let us illustrate this assumption by exam-ining the non-compositional compound flag stop . Given the semantics of this compound (a point at which a vehicle in public transportation stops only predict one of its component words without know-ing the other. Now consider the compositional compound hip injury . Given the semantics of this compound it is much easier to predict each of its component words independently.

In the previous section, the training signals came from the embeddings of the candidate com-pounds and their component words. In this section we extend our model such that it can benefit from more training signals. To this end, we formal-ize the assumption that a compositional compound is also decomposable as an auto-reconsructive model. We thus add this hypothesis to the learn-ing process: a good composition function not only builds the semantics of the compound from the semantics of its component words, but it also al-lows the independent prediction of the semantics of its component words from its compound seman-tics. In the following sections we add this assump-tion to both linear projection (which encompasses polynomial) and Neural Network models. 5.1 Auto-reconstructive Linear Models Let Y M  X  d be a matrix whose rows are the pre-computed compound embeddings, and X M  X  2 d be a matrix whose rows are the concatenation of the embeddings for the words of these compounds. Let A N  X  2 d be another matrix where every row contains the concatenation of the embeddings for the words of a compound, but this matrix in-cludes many compounds for which we did not pre-compute compound embeddings. We assume that the rows of matrix A include the rows of matrix X . In linear models the auto-reconstructive objective function is as follows: where  X  is a meta-parameter for the importance of the auto-reconstruction in the objective. A schematic of this model is shown in Figure 3a.
We can look at this problem as the following weighted least square problem: In the above matrix formula we transformed the auto-reconstruction part of the objective to a Figure 3: Auto-reconstructive linear and neural network models pseudo regressand of the least square. To solve this optimization we design an efficient alternat-ing least squares algorithm.

First we initialize  X  0 to be the answer of the original multi-variant linear regression,  X  0 = X \ Y of X . Let us assume W is the diagonal matrix with first M elements of the diagonal being 1 and the remaining N being  X  . We alternate between the following formulas until the algorithm con-verges. First we approximate the next  X  0 based on the current approximation of  X  , then we use this value of  X  0 to calculate the pseudo regressand part of the least square. In the final step we solve the weighted least square for this new regressand ma-trix and continue iterating these stages until the al-gorithm converges.
The above algorithm can also be used in the case of polynomial regression. The only thing that needs to be done is to replace X and A by their polynomial transformations. 5.2 Auto-reconstructive Neural Networks The auto-reconstructive neural network follows the same idea. The objective function changes to: Table 2: Results comparing the auto-reconstructive models X  ability to predict non-compositionality.
 Figure 3b shows the schematic of this model. We optimize this objective using stochastic gradi-ent descent with early stopping. The results are shown in Table 2. We choose the first 300 K fre-quent noun-noun compounds from the corpus in order to build matrix A . Each row of A cre-ated by concatenating the component words vec-tors. The results show that the auto-reconstructive models generally improve over their counterparts. As mentioned earlier, the improvement comes from two facts. On the one hand we increase the training signals by implementing the decom-posability hypothesis. On the other hand, the auto-reconstructive model enables us to exploit more data in addition to the candidate compounds. There is almost no improvement in the case of linear model because this model does not have enough learning capacity to benefit from a higher number of training signals. All the models discussed in this paper are unsu-pervised since they don X  X  have any access to la-bels specifying compositionality of compounds. The above models simply assume that most com-pounds are compositional, and therefore train their composition and decomposition functions on all compounds. In this section we incorporate in the models an intrinsic uncertainty about the compo-sitionality annotation of the training set.
The best (optimum) composition function is the one that fits well all the compositional com-pounds and does not fit the non-compositional ones. But we assume that we do not have train-ing labels indicating compositionality. To over-come this uncertainty and improve the learning process, we introduce latent compositionality la-bels to the model. We assume each candidate com-pound has a latent annotation, 1 or 0, showing Table 3: Results comparing the latent annotation models X  ability to predict non-compositionality. whether or not it is compositional. Let us assume a non-compositionality detection system that re-turns B non-compositional candidates that should have their own lexical unit and parameters. The objective of this composition function training is to minimize the error of compositional compounds and not the error of non-compositional ones. In order to implement this objective we use the fol-lowing loss function: where  X  ij represents the hidden compositionality annotation and e ij is again the learning error for the pair w i  X  w j . We want to find the B points such that annotating them as non-compositional results in the minimum error of this objective. The algo-rithm that alternates between optimizing the com-position learning and the hidden annotations even-tually converges to this solution.

If the errors are fixed, the B compounds with the biggest errors are the answers to the non-compositional annotation optimization of that it-eration. Therefore to solve this optimization we follow an EM-like algorithm: First we set all  X  ij to 1 and perform the optimization on the compo-sition function. Then we sort the compounds by their error and set the  X  ij of the biggest B el-ements to 0, and the rest to 1. In other words we assume the compounds with big error are pre-sumably non-compositional according to what we know until that iteration. We continue alternat-ing between training the composition function and annotating high error points until the algorithm reaches convergence. The results are shown in Ta-ble 3. Models that use latent annotations clearly outperform their counterparts, especially in terms of precision at 100. This is expected since at train-ing time we consider a model that returns B non-compositional compounds and therefore precision at 100 is optimized. The latent annotations do not improve the linear model since the model is simple and there is not much room to improve its learning. We proposed a framework to detect non-compositional compounds as the compounds that stand out as outliers in the process of learning compositionality of English noun compounds. We proposed and evaluated a range of functions with a variety of complexities that model semantic com-position. We showed that learners such as poly-nomial projection and neural networks which are distinctly more complex than commonly used ad-ditive and multiplicative functions can model se-mantic composition more effectively. We showed that a function as complex as quadratic projection is a better learner of compositionality than simpler models. We further showed that enforcing sparsity is an effective way of learning a complex compo-sition function while avoiding overfitting and pro-ducing meaningful learning errors. Furthermore, we improved our models by incorporating an auto-reconstructive loss function that enables us to ben-efit from more training signals and cover more data. Finally, we addressed the intrinsic label un-certainty in training data by considering latent an-notations, and showed that it can further improve the results.
 This research was partially funded by Hasler foun-dation project no. 15019,  X  X eep Neural Network Dependency Parser for Context-aware Represen-tation Learning X .

