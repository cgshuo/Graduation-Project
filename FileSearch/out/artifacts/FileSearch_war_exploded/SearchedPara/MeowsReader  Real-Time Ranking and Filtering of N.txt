 This demonstration presents MeowsReader , a real-time news rank-ing and filtering prototype. MeowsReader illustrates how a general class of continuous top-k queries offers a suitable abstraction for modeling and implementing real-time search services over highly dynamic information streams combining keyword search and real-time web signals about information items. Users express their inter-est by simple text queries and continuously receive the best match-ing results in an alert-like environment. The main innovative fea-ture are dynamic item scores which take account of information decay, real-time web attention and other online user feedback. Ad-ditionally, a trends detection mechanism automatically generates trending entities from the input streams, which can smoothly be added to user profiles in form of keyword queries.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information filtering, Selection process real-time ranking; social media attention; continuous top-k query processing; text streams
Web 2.0 technologies permeate more and more all facets of hu-man activity and users are striving for effective and efficient mon-itoring and filtering tools for a continuously growing number of information streams. News media like nytimes.com , lemonde.fr , and www.huffingtonpost.com , to name a few, daily produce many thousands of news articles for millions of users. To automatically receive the latest articles, users can subscribe to the RSS feeds pro-duced by these sites, follow associated social media channels, filter information according to their interests and, in turn, comment and share the received information in their preferred social network. For example, Twitter enables millions of users to publish short text messages ( tweets ) referencing news articles through links, thus ex-pressing a kind of indirect interest in its contents. This interest can be reinforced by other users through simple  X  X etweet X  and  X  X a-vorite X  feedback signals. Such kinds of social media attention [6] have been rapidly recognized as a valuable information for filtering and ranking news and social media contents [3, 1, 2].

Within this context, the implementation of real-time search ser-vices combining highly dynamic information with user feedback for millions of users has become a major challenge of modern Web 2.0 services and news recommendation websites. The main dif-ference between real-time search services and standard web search services, is to be able not only to efficiently compute ranked (par-tial) query results, but also to refresh these results for reflecting the arrival of new information items (item stream) and the influ-ence of new events (feedback, recommendation, etc.) on the score of existing items (event stream). Most of the existent real-time search solutions follow a standard information retrieval approach which consists in building efficient index structures for processing (periodic) snapshot queries combining temporal, similarity and so-cial ranking features. For instance in Twitter, the top-k result of a user query (Twitter page) is periodically updated every few sec-onds with new tweets that are ranked higher than previous ones. The main challenge is to enable low-latency, high-throughput query evaluation with high ingestion rate and immediate data availabil-ity. This is achieved in the real-time search engine EarlyBird [1] by implementing a new parallel and highly concurrent read/write index structure exploiting the dominance of the temporal signal for ranking. In order to deal with high tweet arrival rates, TI-index [2] applies a different indexing approach which separates incoming tweets into distinguished tweets (which are indexed in real-time) and noisy tweets (which are processed by a batch index-ing scheme). Both solutions are based on a pull-based client-server protocol where each user subscription generates a certain number of periodic snapshot queries. The alert functionality implemented in Google News for the ranked continuous filtering of news articles applies a similar periodic refresh strategy.

Our prototype MeowsReader demonstrates that such real-time search scenarios can be formally defined and efficiently imple-mented using an expressive framework supporting continuous top-k queries [4, 5] with generalized scoring functions . The key com-ponent that differentiates MeowsReader from the previous systems based on periodic query evaluation over efficient index structures, is a top-k filtering module which continuously processes the incom-ing stream of items and feedback signals for immediately identify-ing for each new item or signal the relevant top-k query results that have to be updated. Our goal is to practically demonstrate on a col-lection of more than 1 , 200 RSS item streams and feedback signals obtained through publicly available Twitter streams that continu-ous top-k queries represent an elegant unified paradigm for mod-eling Web 2.0 real-time filtering services combining static (content relevance, source importance) and dynamic (user feedback, media attention) ranking scores.
MeowsReader implements a continuous top-k query framework for real-time search over multiple Web 2.0 textual streams [4, 5]. The core component is illustrated in Figure 1 and we will describe in Section 3 how this component is implemented and integrated in the more general real-time news filtering and aggregation frame-work. The continuous Top-k filtering module takes as input a mod-ifiable set of queries ( Query index ), a stream of Items to be ranked and a stream of Events on these items. This dynamic information is assembled through a continuous scoring function that takes into account the item contents, as well as static and dynamic signals for deciding if an item is relevant to some query in the Query index . More formally, the total score S tot ( q,i ) of an item i over a query q linearly combines (1) a static query-dependent similarity score S qu ( q,i ) (cosine similarity), (2) a static query-independent item score S sta ( i ) (item X  X  source authority) and (3) a dynamic query-independent item score aggregating all event scores S ev ( i,e ) :
S tot ( q,i ) =  X   X S qu ( q,i ) +  X   X S sta ( i ) +  X   X  X where 0  X   X , X , X   X  1 are weighting parameters. The final scoring function (which is not shown here) also takes account of informa-tion freshness by applying a order-preserving decay function to the total scores. A more detailed discussion about other approaches us-ing count or time based sliding windows and about the advantages of using order-preserving forward/backward decay can be found in [5].

The main goal of the Top-k filtering module is to detect for each new incoming item or event the top-k query results to be updated. Figure 1 illustrates the general idea of the overall query processing model. The Item handler processes all incoming items i and imme-diately detects all queries q which have to be updated according to the static similarity and static item score (the dynamic item score is by definition equal to 0 at item arrival). The Event handler pro-cesses incoming event/item pairs ( e,i ) and continuously decides if a query result has to be updated because of the correspond item score change. The online decision algorithm is based on a set of active items ( Active item set ) that are likely to receive events, and for each such item, a set of candidate queries ( Query candidates ) that will be probably be updated by these events. The definition and maintenance of these two sets is an interesting optimization issue and MeowsReader currently implements a heuristics-based solution that will be described in Section 3.
In this section we describe the architecture and implementation of MeowsReader , a complete Web 2.0 news aggregation prototype featuring non-homogeneous scoring functions which can take ac-count of social media focus and user feedback streams for item filtering and ranking. We also illustrate how continuous top-k se-mantics open well-known opportunities for optimizing the filtering process [5].
 Architecture: The overall system architecture of MeowsReader relies on a publish/subscribe interaction scheme as presented in Figure 2. On the back-end, the system collects information items and feedback signals as described in Section 2. The Stream aggre-gation module crawls an extensible collection of RSS/Atom feeds published in online media sources and generates a unique stream of information items i . Feedback signals are collected by the Feed-back manager module from the real-time web (Twitter) and by cap-turing user clicks on MeowsReader interface. Among the collected tweets, we consider in particular those containing a link towards news items that are already registered in the system. These tweets represent feedback signals on these items and cause the dynamic item score to increase. The score change is a linear combination of the tweet related information (retweets, favorites) and author in-formation (number of followers) similar to [2]. The front-end is composed of a Web user interface and the Subscription manager . The Web user interface 1 enables users to express and register their interest on incoming information items through keyword queries . It also collects user click behavior for the Feedback manager . The Subscription manager module takes care of the interaction between the Top-k filtering module and the user interface.

New items are simultaneously processed by the Top-k filtering and the Trend detection module which extracts entities with bursty behavior from the contents of recent items. A certain number of such  X  X opular X  entities are transformed into trend queries q matically registered in the Query index (Figure 1) and proposed to users through the Web user interface (see below for more details). Top-k filtering: A major feature of our framework is the tight and efficient integration of a continuous top-k filtering technique with a real-time web based ranking approach (see Section 2). The im-plementation of this core component is an extension of the solution presented in [5] and available online 2 . Its main role is to match new items against queries which can be trends, user subscriptions http://gateway.lip6.fr:8080/meows http://code.google.com/p/continuous-top-k or both. The generated result is a stream of query-item pairs ( q,i ) where i is added to the top-k result of q . All subscriptions to a given query simultaneously generate the same stream which is pushed to the Subscription Manager module for user notification. All de-tected query-item pairs are maintained in a Top-k result cache for immediately generating a result for new subscriptions to existing user-defined or system generated trend queries. This architecture simplifies the whole process and in particular the query processing task which becomes independent of the number of user subscrip-tions.

In [5] we have proposed a number of algorithms and data struc-tures for the efficient evaluation of continuous top-k queries using score functions as defined in Equation 1. These algorithms only considered static scores which are not updated after the publica-tion of an item and are implemented in the Item handler module (Figure 1). MeowsReader extends this solution by an additional Event handler processing dynamic item scores generated by feed-back signals from the real-time web (Twitter). It is easy to see that these dynamic (real-time web) item scores can change very frequently. These score changes can affect any item and conse-quently any query result, which makes the detection of queries to be updated a highly cost-sensitive task. As described in Section 2 we try to solve this problem by maintaining a set of active items which receive events together with a set of query candidates for each item. The basic idea for generating these two sets consists in adding to the actual static item score of an item i an additional threshold score  X  i which reflects an estimated upper bound for the aggregated event score produced by future events. This extended score then allows the item handler not only to detect the queries that have to be updated, but also to compute all query candidates for i at some time instant. In the case when the total feedback score added to the item exceeds the  X  i constant, the item is re-evaluated through the original query index.
 Trend detection is an important feature of online Web 2.0 media applications. The goal of this module is to automatically gener-ate potential future subscriptions reflecting the contents of recently published information. The usage of trends is twofold. Trends in-dicate to users important news that might interest them and that they could potentially miss if they only observe a static set of sub-scriptions. What is more, once detected, trends are handled by the system as if they were user subscriptions and as such, matched item results are maintained in the top-k cache. Thus, trend queries al-ways generate non-empty results and simulate ad-hoc query be-havior (observe that any other new user-defined query starts from an initially empty stream of results). In MeowsReader we apply a straightforward trend detection mechanism based on named en-tity frequency statistics. MeowsReader uses the OpenCalais vice for extracting semantic entity phrases from incoming item con-tents. MeowsReader presents as trend queries those named entity phrases, that show the most bursty behavior . Bursty behavior is detected by comparing the relative difference between the total fre-quency observed so far and the recent frequency observed in a slid-ing window over the input item stream.
The demonstration includes two scenarios. The first scenario is based on a large collection of more than a thousand general and spe-cialized U.S. news media RSS feeds and from related feedback con-tinuously collected using Twitter Search and Stream APIs. Confer-ence participants will be able to interact with the online Meows-Reader application using the MeowsReader Web user interface on http://www.opencalais.com/ any Javascript enabled web browser client. They can immediately access and explore a representative collection of trends related to events taking place at the same time as the conference. In addition, users can subscribe to queries defined in an ad-hoc manner or by refining existing trend queries. User interaction with the platform will also be registered by the system to influence the dynamic item score values.

The second demonstration scenario aims at providing a deeper insight of the capabilities and potential applications of Meows-Reader . Users can directly interact with a sandbox version of the MeowsReader application for exploring different system configu-rations. In particular they can observe and compare the effects of changing the importance of registered sources for estimating the static item scores (for example, diversify the sources present in query results by promoting sources publishing less items), the de-cay function (linear/exponential, decay factor) and the linear com-bination constants  X  (high values reward content similarity),  X  (high values favor source importance) and  X  (high value promote social media attention). These different configuration scenarios are applied on an archive of more than 10 million news articles and over 40 million tweets, collected over a five month period in a "fast forward" setting. By observing trend queries over past important events (e.g.  X  X ootball World Cup X ) or any other subscription query, users will be able to compare through a charts dashboard the sys-tem performance (memory usage, processing time, filter selectiv-ity) under high item and event rates.

The demonstration is also publicly accessible http://gateway.lip6.fr:8080/meows. [1] M. Busch, K. Gade, B. Larson, P. Lok, S. Luckenbill, and [2] C. Chen, F. Li, B. C. Ooi, and S. Wu. Ti: An efficient indexing [3] G. De Francisci Morales, A. Gionis, and C. Lucchese. From [4] P. Haghani, S. Michel, and K. Aberer. The gist of everything [5] N. Vouzoukidou, B. Amann, and V. Christophides. Processing [6] C. Wang, M. Zhang, L. Ru, and S. Ma. Automatic online news
