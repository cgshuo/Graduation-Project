 In SaaS mode, by leasing the application and putting data onto the service providers, tenants can pay more attention to their business. However, the malicious insiders of Correctness implies that the results indeed come from the tenant's legitimate original data and have not been changed in anyway. Completeness means that all qualified results are included in the result set. 
Being a new software delivery mode, SaaS has many significantly differences compared with traditional software application in actual design and deployment. And those differences bring new challenges to multi-tenant data integrity protection. 
For example, in order to make full use of resources, most SaaS service providers adopt the single-instance multi-tenancy strategy[1] in which multiple tenants X  data are stored in one physical table such as universal table and data of different types may be stored into a flex column based on tenants X  customization [2].To the best of our knowledge, how to construct authenticated data structures for multi-tenants in a shared data table has not been considered in related works, as it is commonly assumed that each data table is hosted by a single user. Meanwhile, in order to speed up query process and ensure performance isolation in large multi-tenants database, adequate pivot tables [3] are established to store tenants' index data. So the integrity protection of those index data can not be ignored in SaaS. It is an important part of tenants X  data integrity protection consideration and has not been discussed in related work. 
Additionally, independent tenants may customize different integrity requirements based on their needs. Therefore, how to support customization and isolation characteristics among tenants is another challenge for SaaS. In this paper, we present a tenant oriented data authentication structure (MTAS). MTAS provides data integrity assurance for multi-tenant data in pivot table and universal table. By separating indexes with authentication structures, MTAS preserves tenants' isolation and customization characteristics. And we propose a new authentication structure PUA tree (Pivot and Universal table Authentication tree) which composite separate authentication trees built for pivot table and universal table can get the VO corresponding to queries data in pivot table and universal table in one PUA tree travel. PUA tree saves about 30% hash computing at VO verification. Also, PUA tree can handle dynamic structure adjustments for tenant data update operations, such as data insertion, deletion and modification. 
The rest of this paper is organized as follows. The next section covers related works. In Section 3 present the system model, storage model and attack model. Section 4 introduces MTAS for tenant data authentication and experiment is presented in Section 5. Section 6 gives the conclusion of this paper. Now, multi-tenant data integrity protection research is on the beginning. But in the relevant areas such as outsourced database, many techniques have been proposed to address data integrity issues. 
One relevant prior work researched integrity issues in outsourced databases and suggested solutions using authenticated data structures based on MHT [4]. MHT is a binary tree originally proposed for efficient authentication of equality queries in a database sorted on the query attribute. Re ference [5] incorporated MHT into a B+-tree [8] called MB tree to facilitate verification. The MB-Tree was basically a B+-Tree that hierarchically organized digests, in the same way as the MHT. In addition to the actual result, the VO transmitted to the clie nt contained two boundary records as well as a set of digests by which the client can reconstruct the digest of the root. Based on [5], Reference [6] promoted EMB --tree and EMB * -tree to reduce the VO size. Reference [7] focused on relational stream environments and provided CADS index scheme to minimize the processing and transmission overhead. Reference [9] presented index authentication scheme iBigTable that provides data integrity assurance for BigTable. Reference [10] aimed at aggregation queries and promoting index authentication structures on SUM queries. However, traditional index authentication structures lack the ability to discern the tenant and it is hard for them to guarantee performance isolation of different tenants. 
Reference [12] proposed a partially materialized digest scheme in which split the authentication structure from the data index to provide users with the option to receive a non-authenticated answer, without any pe rformance degradation due to verification structures. This structure is attractive for multi-tenant database. Because it is easier to guarantee performance isolation by constructing separate authentication structure for different tenants. But [12] did not consider how to deal with the situation that the data flex column. 
In addition to authenticated data structures, signature aggregation is another solution for data integrity protection. Reference [13] investigated the notion of signature aggregation which enables bandwidth efficient integrity verification of query replies. Base on this scheme, Reference [14] used signature aggregation and chaining to achieve correctness and completeness of query replies. Reference [11] discussed a signature aggregation protocol that provided freshness guarantees. integrity with access control policies. However, signature aggregation approach was inefficient compared with authenticated data structures because signature aggregation involves modular multiplication, signing and verification operations that were 100, 10,000 and 1,000 times slower than hashing[11]. 
Besides the above approaches, Reference [16, 17] inserted certain fake tuples into Reference [18] presented the dual encryption approach, where certain data are encrypted with different keys and query integrity could be checking by  X  X ross examination X . But they only provided probabilistic assurance for the owner data and were not suitable for multi-tenant data authentication. 
For multi-tenant data integrity protection, traditional index authentication structures could not guarantee the performance isolation of different tenants. While the aggregation approach was inefficient for its high resources consumption. In this paper, we introduce the general model of MTAS for multi-tenant data integrity. As in [12], MTAS separates authentication structure with index to ensure tenant's isolation and customization characteristic. And we propose composite data authentication efficiency of VO construction and verification. This section gives the over view of system model, storage model and attack model in SaaS. System model. The system model includes three entities: tenant, trusted third party and service provider[19]. 
Tenant T : T is a client that customizes and consumes SaaS applications. In SaaS mode, tenants rely on the service provider for data maintenance and computation. their secret key and integrity policy information management. TTP can prohibit unauthorized parties from getting tenant X  X  privacy information. 
Service provider(SP): Service provider is responsible for the operation of SaaS platform. SaaS platform is a mechanism that has significant computing resource and storage space to maintain the tenants' applications and data storage. 
Based on the research on trust platform[20, 21], we assume that the SaaS platform is trusted, and we explore an integrity protection module(IPM) in platform. IPM can assist tenants to customize their data integrity policies and verify the returned results. We assume that all communications go through a secure channel between the SP, TTP and tenants. Storage model. In this paper, we mainly discuss the scenario that multiple tenants index data. We mainly aim at the case that searching key has no duplicate. Here we introduce some basic definition of the Pivot-Universal storage model. identifier) column is the primary key of a universal table, TenantID is the identifier of a tenant, value i corresponding to A i in R . index, value j is the index data that tenants customized. Attack model. Based on the above assumptions, we concentrate on the analysis of attack behaviors form the SP malicious insiders. For example, insiders violate tenant records in pivot table or universal table or forging some non-existence records into tenants X  data. For data authentication in Pivot-Universal storage model, one way is to set up traditional authentication trees for pivot table and universal table according to all authentication structures for pivot table and universal table. For convenience, we call query attributes, we have to pre-compute and store m PA trees and m UA trees separately to prove integrity of query replies. This results in a higher storage overhead in the SP and much more complex VO construction and verification. Also storing multiple trees for the same universal table increases the cost of updates. MTAS with composite data authentication structure PUA tree for tenant data in pivot table and universal table. Then we give the VO construction and verification algorithms in PUA tree . Next we discuss the dynamic data operation in MTAS and the security and cost of MTAS. 4.1 Multi-tenant Data Authen tication Structure-MTAS Here we first introduce the general model of MTAS. As shown in Fig.2., MTAS contains two levers: the upper is a index built on TenantID&amp;PUATreeID , and the lower is a collect of composite data authentication structure PUA tree . Here, MTAS separates PUA tree with data index to ensure tenant's isolation and customization characteristic. In this way, query answering and VO generation can be executed paralleling. So the authenticated process of some tenants can not cause performance degradation to those tenants don't customize the integrity protection. Definition 3. Multi-tenant Data Authentication Structure(MTAS). MTAS =&lt; TenantID&amp;PUATreeID: {  X   X  X  X  X   X  X  X   X   X  X  X  X 1... X , &gt; . PUA tree is a composite tree that merge two DMH-Tree into a single tree based on index data element I . PUA tree=&lt;  X  X  X  X  X  X  X   X   X  ,  X  X  X  X  X  X  X   X   X  , Root-PUA&gt;, i=1..n,j=1..m, Universal table. (ii) Inode is internal nodes, Inode=&lt;k,h,H,p&gt; , where k is the search key of the first record in the subtree of Inode , p is a pointer to the corresponding child node. H is the level. For the adjacent upper level ( AUL ) of Lnode , h is a hash value on the computed on the concatenation of the hash values of the children entries pointed by p . (iii) Root-PUA is a value H root by hashing the concatenation of the hash values denotes string concatenation. Root-PUA is signed with the tenant X  X  private key. TenantID&amp;indexID can be treated as shared information and element I contains correspondence relationship between pivot table and universal table. Based on those the number of authentication structures. We can get the VO corresponding to queries in one PUA tree travel instead of double travels of PA tree and UA tree which greatly reduces the complexity of the VO construction. 
The query process with integrity assurance of MTAS model is :first tenant sends called set(QI) and Set(QS) along with corresponding VO in one PUA tree round-trip. When IPM receives result set, he runs verification algorithm to verify the integrity of application. 
Notice that the PUA tree is a composite tree with paratactic hashes on pivot table pivot table and universal table together to set up a DMH tree with Lnode=&lt;k, h&gt; and h is hash value of record concatenation of pivot table and universal table where pivot.GUID=universal.GUID . Because in some circumstance tenant' expected result maybe get in set(QI) , so the SP does not need to go in to the universal table, the PUA table. 4.2 VO Construction and Authentication The VO construction on PUA tree is similar to DMH. The main difference is we have q ], q L (q U ) is the lower(upper) bound of Q . The SP performs two top-down traversals boundary nodes are necessary to enforce completeness. The VO includes: (i) the node in the tree structure. 
Fig.3. shows an example of VO construction on PUA tree. Suppose tenant T 01 a query on A 1 as Q:[12,17] . According to the lower(upper) boundary 12(17), SP locates Lnode1 and Lnode3 for the expanded boundary 11,18 and get VO corresponding to nodes . The algorithm of VO construction is: 
The verification process at the IPM utilizes auxiliary information ( AI ) that indicate query result set(QI) and Set(QS) , IPM combines it with VO components (ii) and (iii), Then, she verifies with the owner X  X  public key whether the component (i) of the VO both complete and authentic. The verification algorithm is: 4.3 Dynamic Data Operation MTAS can support integrity protection adjustment for dynamic data operations such as insertion, modification and deletion. Due to the space limit, we focus on discussing how to insert a new record into the universal table. Before insertion, IPM determines PUA trees in MTAS that involved in this update and makes adjustment on those PUA trees . Here we mainly explain adjustment process of a single PUA tree . 
When tenant T 01 insert a new record in his logical view R , SP inserts corresponding physical record r' into universal table and updates pivot table with I' . 
In a PUA tree , IPM locates the Lnode N t hat element I' belongs, computes H' =h(r') and insert &lt;I',H' &gt; into node N . After insertion, if the number of keywords is no more than the PUA tree fanout f , IPM computes N' father node in AUL with contains (1)2 f +  X  X  X   X  X  keywords. Then PUA tree adjusts bottom-up recursively after insertion r' with searching k=25 . 
The data deletion operation is similar with data insertion. For data modification, there are two types of modification: one is occurring on the specified searching key, the other is not. The first category, we treat is as a deletion followed by an insertion as in[7]. For the second category, we only need to update the hash value of PUA tree on the corresponding node to the modified record. 4.4 Security Analysis The correctness of Set(QI) and Set(QS) can be guaranteed by PUA tree due to the security of collision-resistance hash functions and the public key digital signature for sorted leaves and the boundary leaves that enclose the select range. Then we will prove that PUA tree can guarantee the completeness of Set(QS) . Lemma 1. If the Set(QI) is correct and complete, any deletion on the universal table of Set(QS) can be checked by PUA tree . and universal table with join condition Pivottable.GUID= Universaltable.GUID in their respective attribute. And the GUID attribute is the globally unique identifier for record level locating, it is a one-to-one correspondence between Pivot table and Universal table. The verification process on PUA tree can be treated as comparing Set(QI) with Set(QS) on GUID , if {GUID| Set(QI)}={GUID| Set(QS)} ,we can say that Set(QS) is complete. So give the precondition that Set(QI) is correct and complete, we can check the completeness of Set(QS) . 4.5 Cost Analysis In this section, we compare our work with set up separate authentication trees approach (for simple we call it SA in the following) for pivot table and universal and |s| denote the size of the searching key, pointer, hash value and signature respectively. The signature and hash cost are C v and C h. Here we mainly compare the Storage cost, VO construction size and Verification cost. Storage Cost. The storage cost of SA can be treated as the sum up of PA tree and UA tree . The storage cost of MTAS is: above formula we can get the conclusion that storage cost of MTAS is less than SA Next we will discuss the VO construction cost on one searching attribute. VO Construction . In SA the VO involves digest path to q l -and q u+ of PA tree and UA and UA tree to facilitate proper verification at the IPM side. Similar to [6], we ignore this information in our analysis, as it is negligible compared to the size of the hashes in the VO. The max size of the SA is : CNfkhpfkhs  X  X  X  = X   X   X   X  X  X  + + +  X  X  X  + +  X  X  (4) Verification cost. Given the set(QI) and Set(QS) and the VO, the IPM has to compute the missing digests and combine them with the VO to retrieve the root of the PA tree , UA tree and PUA tree . Suppose d and d' is the height from root to the root of query results, d= (log log )
From above cost analysis, we can see SA makes the VO much complicated at construction and verification compared wi th MTAS. Because it needs to deal with two separate authentication trees, which obviously cause performance degradation at initial set up, VO construction and verification. We carry out a serious simulation experiments to demonstrate our analysis of the SA approach and MTAS. The development environment is Eclipse-SDK-4.3.1-win 32 Bit, operating system is Windows XP Professional Service Pack 3, CPU is Inter Core (TM)2 2,33GHz, and the memory is 2GB. We utilize RSA signatures that are typically 128 bytes in size and SHA1with20-byte outputs.
 increases the PUA tree height decreases but the VO size grows sharply, when f=2 the VO has the smallest VO size while remains the highest tree height, so in our following experiment we adopt the eclectic f=8 as PUA tree fanout so is PA tree and UA tree . We set up the initial construction of one tenants T 01 with data set cardinality of 100K, 200K, 300K, 400K and 500K records on the T 01 -A 1 . while PUA tree needs a little more. Because PUA tree needs to deal pivot table with universal table together. Fig.6 shows the total storage cost of SA and MTAS, and MTAS has a lower storage cost. Because SA has to store both the PA tree and the UA tree, so the overall storage cost is larger than MTAS .
 Verification Cost. To investigate the verification cost, we create workloads of random 100 range queries with selectivity  X  varying between 10% and 50% on data cardinality 300K on T 01-A1 . Fig.7 and Fig.8 shows the total hash operations VO verification times of SA and MTAS. From Fig.7 and Fig.8, we can see MTAS reduces about 30% hash computing compared with SA . The reason for this is SA has to deal performance is lower than MTAS . Update Cost. For the dynamic data operation, we experiment the time consumption on data insertions between SA and MTAS on an insertion parameter  X  varying between 10% and 50% of data cardinality 300K on T 01-A1 . The insertions are processed simultaneously, Fig.9 shows the overall update time. From the result we PUA tree. Query performances. In this experiment, we test the query performance influence of the index authentication scheme to multi tenant sharing database. We compare the pivot based index models with the case that builds MB trees on pivot table with range queries with selectivity  X  varying between 10% and 50%. The result shows that the query response of independent authentication model is about 3 times faster than index authentication scheme, shown in Fig. 10. So for the diversity of tenant requirement, it is inappropriate to apply generic index authentication scheme for tenants. In this paper, we propose a authentication structure MTAS that accommodate the multi-tenant properties perfectly by establishing composite authentication PUA trees for each tenant based on their integrity demands. Comparing with traditional approaches MTAS shows advantage at stor age cost, VO construction and verification. structure on different sharing storage modes like chunk table. Acknowledgement. National Natural Science Foundation of China under Grant No.61272241, No.61303085, No. 61303005; Natural Science Foundation of Shandong Province of China under Grant No.ZR2013 FQ014; Science and Technology Development Plan Project of Shandong Province No. 2012GGX10134; Independent Innovation Foundation of Shandong University under Grant No.2012TS075, No.2012TS074; Shandong Province Independent Innovation Major Special Project No.2013CXC30201; the Shandong Distinguished Middle-aged and Young Scientist Encouragement and Reward Foundation NO.BS2012DX015. 
