 Recommendation systems [1] are popularly used in helping online websites pro-vide personalized services to their custo mers, in order to promote sales and prof-its. Conventional recommendation method s [2 X 4,6] are mainly accuracy-oriented for pursuing good predication accuracy. H owever better accuracy can not guaran-tee user X  X  satisfaction, because recommended items often have similar contents. Such a list cannot reflect user X  X  full spectru m of interests, which results in heavy redundancy and partial interest presentation. This problem has been addressed recently [9,11 X 13] by stressing on another important measure-diversity. For ex-ample, [13] diversified the lists based on item taxonomy, [12] explored the adap-tive diversification level in different s ituations. They have studied the problem from different perspectives. Based on existing work, we suggest that good diver-sification method should satisfy four requirements together: efficiency, relevance, diversity and adaptability.

This paper proposes a novel probabilistic framework for diversifying the base-line recommendation lists, in order to increase the diversity of existing well-designed accuracy-oriented methods an d maintain good relevance meanwhile. Overall, our method iteratively produces the diversified list by maximizing an objective function based on mathematical derivation. Unlike [13,14], we avoid us-ing hyperparameters in controlling the trade-off between accuracy and diversity, since it is difficult to determine the optimal balance between them in advance. Every step, we select the item which ma ximally meets user X  X  current marginal preference. To calculate the relevance b etween items and user X  X  preference, we specifically model user X  X  interests as a set of aspects, including some explicit fea-tures such as item genres and implicit factors learned from data. Once an item is selected, user X  X  aspect preference weig ht is updated. If some latent aspects are heavily provided, we will diminish the corresponding weight on those specific aspects. In other words, we consider not only the target user X  X  personal prefer-ence but also the additional influence produced by the already selected items. Consequently, a diversified r ecommendation list is generated.

Before diversification, we use clustering to generate a much smaller set of items as the candidates. Our candidate generation method is designed by considering three diversification requirements: efficien cy, relevance and diversity. As a result, it greatly accelerate the speed of diversifi cation process witho ut decreasing the other performances. Finally, We can provide adaptive diversification [12] for users holding different ranges of interests. In other words, diversified items keep in accordance with user X  X  preferred types, as we fully utilize different user X  X  tastes both in candidates generation and diversification process.

In conclusion, our main contributions are listed as follows:  X  We derive a probabilistic ranking framework for diversifying the baseline  X  Our framework can be run efficiently eno ugh to satisfy the online require- X  We conduct a series of experiments on movie dataset using two baseline
The rest of this paper is organized as follows. We give a detailed description of our proposed diversification framewo rk in section 2. Then section 3 presents the experiments and analysis. Related work on recommendation diversity are included in section 4. Finally we conclude the paper with remarks of our work in section 5. The basic workflow of our proposed framework PDMA (Probabilistic Diversifi-cation using Marginal Aspect preferen ce) is that: Given a list of ranked items B returned by the baseline recommendation method, we firstly assign each item into corresponding clusters. And then we initialize the candidate pool by select-ing some items from each cluster, whose number is proportional to the target user X  X  cluster preference weight. Finally we iteratively produce the diversified rec-ommendation list D using MMAP(Maximal Margina l Aspect Preference). Once an item is selected, candidate pool and user X  X  marginal preference are updated. The overall framework is shown in Fig.1. 2.1 Candidates Generation Using Clustering Before applying diversification, We group similar items in the baseline recom-mendation list to form item clusters. In ea ch cluster, items are ranked based on its initial relevance score.
 Note that the key point of this paper is not to propose a clustering method. As the items usually have taxonomy, we directly treat genres as clusters. If an item i belongs to many genres, it can be assigned into multiple clusters. Based on user X  X  past rating history, we calculate user X  X  preference weight on each genre as Eq.(1). G represents a set of distinct genres, r ( u ) denotes user u X  X  past rated items, r u,i gives u X  X  rating on item i, h ( i, g )=1ifibelongstogenreg,and0 otherwise.

After getting item clusters and user X  X  c luster preference, we initialize the can-didate pool based on the following three considerations. First, the number of total candidate items should be much smaller than the items in the baseline list, because a much smaller search space a llows the online process to be done effi-ciently. For diversification, namely, we j ust select a few items from each cluster. Second, more representative items from each cluster shou ld be selected at earlier time. In other words, items with higher i nitial relevance score are selected with higher priority. This helps us maintain the relevance of diversified list. Third, the number of selected items from each cluster is proportional to the user X  X  prefer-ence weight. Thus if target user has rate d few items from a specific cluster, items of this cluster have few opportunities to be processed. This further helps us avoid unnecessary irrelevant items in advance and maintain relevance, as we consider user X  X  personal preference. Finally, consi dering that selected items from different clusters may be replicated, we only remain unique items in the candidate pool. 2.2 Probabilistic Diversification The derivation of our probabilistic diversification method is based on the prob-ability ranking principle(PRP) [10], which helps us define an objective function to be optimized. Formally, let u represents target user, i denotes an item and R be a binary random variable represent ing relevance. For ranking, we need to the set of aspects that influence user X  X  preference. Then we model user X  X  infor-mation needs as a set of aspects u  X  A . Following this practice, the information containedinanitemisalsomodelas i  X  A .
 We consider an item relevant if it contains any aspect in common with u. Namely, an item is relevant if it contains at least one aspect which also exist in user u X  X  needs.

For simplicity, we can reasonably assume the independence of a j  X  u and a
Aspect preference P ( a j | u ) and aspect correlation P ( a j | i ) can be estimated by using some methods described later. Then we can replace P ( a j  X  u ) with P ( a j | u ), P ( a j  X  i ) with P ( a j | i ).
 Applying Eq(4) to each item allows us to determine the one to be ranked first. For the subsequent items, we must view relevance in the condition of already selected items for diversification. Suppose we have selected the first k  X  1items in a ranked list ( i 1 , ..., i k  X  1 ) and are now considering the relevance of i k ,the item at rank k. We assume that if a specific aspect appears in these first k  X  1 items, then a repetition in i k will bring few additional benefits, which matches u X  current marginal aspect prefer ence in the condition of the first k  X  1 selected doning high-order terms whose value is very small, we get Eq(5). An intuitive explanation for Eq.(5) is that probability P ( R k =1 | u, i )ismeasuredbyhow much item i satisfy u X  current marginal aspect preference.
 Multiply Eq.(5) with r norm ( i k ) which is normalized into [0,1] based on item X  X  initial relevance score, the final diversification formulation is defined by Eq.(6).
Alg.1 describes the diversification pro cedure of our proposed framework. Each time we only select one item I  X  from the candidate pool , which gets the maximal marginal aspect relevance usi ng Eq.(6). Based on the selected item X  X  genres G I  X  , we pull one item from each genre cluster to update the candidate pool, in which replicated items are removed.
 Algorithm 1. Diversification Procedure 2.3 Preference Aspects Modeling In order to implement the above reco mmendation diversification, we need to specifically define the set of aspects A which influence user X  X  preference. In this work, we extract a space of item featur es including explicit item genres and implicit latent factors. Formally, we build user X  X  profile and item X  X  profile as three-attri bute vectors u = { G, T, F } and i = { G, T, F } . Each dimension in u represents how much user u likes this aspect; while the corresponding dimension in i denotes how much item i contains this aspect.

Genre aspects G : Taxonomies exist for various domains. Take movie for ex-ample, there are about 20 genres. Howeve r people usually focus on only a small set of types such as romance, drama or fiction. This phenomenon provide us a way to distinct different user X  X  preference. For i G , we directly set P ( g | i )=1if item contains that genre, 0 otherwise. For u G we use Eq.(1) described before.
Content aspects T : Item tags provide us some text information which is a good characterization of the items X  contents. Similar items usually have related description words. Using topic models such as LDA [7], we can model each item from the concept level to get user X  X  semanti c preference. Item X  X  topic distribution i firstly initialized to 0 .Then  X  item i which has been rated by u, we multiply r u,i vector into u T . Finally, p ( t k | u )is normalized by | T | k =1 p ( t k | u ).
Rating aspects F : Matrix factorization has been developed in [6], which decom-i patterns. In order to make the formulation of probabilistic diversification meaning-i F are normalized by their respective sum.

Finally, user X  X  preference vector u needs to be normalized to 1. We set equal importance weight to the above mentioned three kinds of aspects, as we do not know which is better. Namely, u = { 1 3 G, 1 3 T, 1 3 F } . 2.4 Marginal Preference Modeling As discussed in section 2.2,  X  a  X  A , we need to model user X  X  marginal aspect ering both user X  X  tastes and the influence of already selected items, which need to penalize P ( a | u ), if aspect a is heavily provided. Here we discuss two methods.
PDMA-P: If we model P ( a | u, i 1 , ..., i k  X  1 ) as the probability that u still prefers a on condition that i 1 , ...i k  X  1 have not satisfied the aspect a .Thenitcanbe rewritten by Eq.(7).

PDMA-Q: P ( a | u, i 1 , ..., i k  X  1 ) can also be modeled by Eq.(8). It denotes the quota of aspect a after some assigned it ems, which is motivated by an party election method Sainte-Lagu  X  e[15].
 3.1 Experiment Settings Dataset . For experimentation, we use a public movie dataset 1 which contains 0.8M ratings from about 2.1K users on about 8.6K items. The number of average ratings per user is almost 400, and data density is 4.57%. In order to construct movies X  contents, we crawl the plot keywords of the corresponding movies from imdb 2 website. After that, we filter out items with less than 20 tags and users with less than 20 rated items, in fact the number of filtered users in this step is very small. The number of average crawled tags per movie is about 100. Compared Methods . To compare the performance of our proposed framework in terms of diversity and accuracy, we utilize the following methods: 1. Non-diversified: In this work, we use two popularly used recommendation 2. Proposed: By using the marginal preference algorithms described in section 3. STD: The method proposed by Ziegler [13] [14], also sequentially diversify 4. xQuAD: If we treat user as query and item as document, the popularly used Evaluation . To compare the performance, we adopted the following metrics to cover various aspects of our consideration. Additionally, we randomly split each user X  ratings into five parts equally. 20% of the items in each user X  X  profile are put aside for testing. In user u X  reserved test set, we take items whose rating is greater than u X  X  average rate in training set as real u tests . Because some users are strict raters, while others on the contrary. As default, we re-rank the top 200 items returned by the baseline method for each user, and focus on the evaluation of diversified list with N=10. (a). Accuracy . Accuracy is still one of our cons iderations of performance. We (b). Diversity . Diversity is our another focus on performance. Here, we use (c). Tradeoff . In order to measure the tradeoff between relevance and diversity, 3.2 Results Apart from modeling marginal aspect pr eference, clustering and aspects mod-eling are also two important components of our proposed framework. Here we firstly explore their influence on the final performance.
 Aspect Evaluation . In our proposed method, we utilize three different yet relevant information: movie genres, co ntent topics and rating factors to model user aspects, which are assumed to influence user X  X  preference. Prior approaches often use one single type of features at one time. In order to test the performance of our hybrid setting, we evaluated different combinations G, GT, GF and GTF using two proposed method on two baseline recommendation list. Table 3.2 lists the comparison results. It is obvious to find that: (1) Our hybrid combination GTF which considers all the three sets of aspects, always performs the best in terms of accuracy and  X NDCG . (2) Accuracy always im proves when combining more additional features with item genres. The reason is that if two movie have the same genre assignments, taking into more effective features can help us find which is better more accurately. (3) Dive rsity decreases as accuracy improves. but  X NDCG becomes better. Because irrelevant items which do not belong to user X  X  preference, are avoided more accurately, although they satisfy the requirements that items should be diversified in the list. Thus a better balance in  X NDCG . Clustering Evaluation . On the other hand, clustering is also important in our proposed framework. It just select s a much smaller set of items for the next diversification step. Obviously, candidates generation using clustering can accelerate the online process speed, but we still need to explore its influence on other performance measures. Table 2 presents the comparison results. We surprisedly find that clustering constantly gets a slight increase than not using it in terms of accuracy and  X NDCG . It suggests that our proposed candidate generation method is effective for diversification. This can be explained for two reasons: (1)As the selected items come from different c lusters, we can guarantee the diversity of candidate items. (2) Candi date items are selected based on user X  X  personal cluster preference. If user ha s not rated any item of one cluster, then items from that cluster will not be processed, this help us avoid unnecessary items in advance. Additionally, more rep resentative items in each cluster are selected at earlier time, which h elps further keep the relevance.
 Comparison . It is obviously to be found that after diversification, accuracy measures such as precision and MAP both decrease. But our proposed methods PDMA-P and PDMA-Q remain comparable performance to baseline methods.
 On the other hand, diversity improves a lot especially in low ranks listed as 5. However purely pursuing good accuracy can not get the better tradeoff of  X  NDCG, as UCF and PureSVD perform. From the comparison results, we can see that our methods constantly perform better than baseline methods in terms of  X  NDCG, which is more significant in diversifying the UCF results. we explain our better performance as follows: (1)Exploiting features from both contents and ratings help us fully model user X  pref erence aspects together with item gen-res. (2)When diversification, we consider both user X  X  tastes and the influence of already selected items, and combine them appropriately based on probabilistic derivation, which guarantees the relevance, diversity and adaptability. STD per-forms well in diversification, but its accu racy measures are very poor. Because its diversification method does not consider different user X  X  personal tastes. Some irrelevant items leads to the poor  X  NDCG, though they meet the requirements of diversity. xQuAD perform s well both in accuracy and  X  NDCG. Because they consider both the item X  X  initial relevance score and user X  X  personal preference in diversification. However, it is difficult to make the optimal trade-off manually.
Table 4 lists our running time, conducted in unix system with 4G RAM and quad-core processors of 1.8GHz. To diversify the top 200 items for 2.1K users, we only need 3.6s. It suggests that our framework is efficient enough to satisfy the online requirements. We also find that as baseline list increases, candidate gen-eration using clustering helps us make the running time change slowly. Because the number of candidate items maintains almost constant no matter how the baseline grows. However, directly diversifying the total baseline items increases sharply, which was similarly found in STD and xQuAD. CF(Collaborative Filterin g) [1, 3] has achieved great success in terms of pred-icative accuracy and scalability. Neighbor-based algorithms and latent factor models are the most popularly used CF methods. User-based CF [2] assumes that similar-minded users express similar interests in future items, while latent factor models [5, 6] factorize user-item rating matrix into low latent space to get hidden preference factors. However better accuracy can not guarantee users X  satisfaction for recommending similar redundant items.

Recently, researchers have addressed t he problem that diversity is regarded as another important factor to improve user satisfaction. [13] proposed a re-ranking method to do topic diversification by using item taxonomies. They use ahyperparameter  X  to control the balance between relevance and diversity. [9] proposed a set-oriented method to pro mote recommendation diversity, which combines relevance and diversity in a unified model in one step. [11,17] raised the issue of making diversified recommendati on over time. [12] studied the problem of tackling with adaptive recommendation diversification by applying portfolio theory into latent factor models.

In information retrieval and web search , diversification has been studied ex-tensively [15,16,19]. [8] firstly bridge the gap between search diversity and rec-ommendation diversity. [10] studied the problem of measuring list diversity. Our work is related to [8] [10]. But we derive an more general probabilistic diversifi-cation framework by maximizing user X  X  marginal aspects preference. In this paper we propose a probabilistic framework for diversifying recommen-dation lists, which helps us avoid using hyperparameters to make the tradeoff between relevance and diversity and can be run efficiently enough to satisfy the online requirements. However, we can still do some work to improve our frame-work. Instead of using the same set of aspects for each user, we plan to develop a mechanism to apply different aspects int o different users with individual pref-erence. And we can design new more effective marginal preference algorithms to further improve the performance.
 Acknowledgement. This research is supported by the 863 project of China (2013AA013300), National Natural Science Foundation of China (Grant No. 61375054 and 61402045) and Tsinghua University Initiative Scientific Research Program (20131089256), and Cross fund of Graduate School at Shenzhen, Ts-inghua University (JC20140001).

