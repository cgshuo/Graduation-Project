 Maede Ashouri-Talouki  X  Ahmad Baraani-Dastjerdi  X  Ali Ayd X n Sel X uk Abstract Several techniques have been recently proposed to protect user location privacy while accessing location-based services (LBSs). However, applying these techniques to pro-tect location privacy for a group of users would lead to user privacy leakage and query inefficiency. In this paper, we propose a two-phase protocol, we name Cloaked-Centroid, which is designed specifically to protect location privacy for a group of users. We identify location privacy issues for a group of users who may ask an LBS for a meeting place that is closest to the group centroid. Our protocol relies on spatial cloaking, an anonymous veto network and a conference key establishment protocol. In the first phase, member locations are cloaked into a single region based on their privacy profiles, and then, a single query is submitted to an LBS. In the second phase, a special secure multiparty computation extracts the meeting point result from the received answer set. Our protocol is resource aware, tak-ing into account the LBS overhead and the communication cost, i.e., the number of nearest neighbor queries sent to a service provider and the number of returned points of interests. Regarding privacy, Cloaked-Centroid protects the location privacy of each group member from those in the group and from anyone outside the group, including the LBS. Moreover, our protocol provides result-set anonymity , which prevents LBS providers and other possi-ble attackers from learning the meeting place location. Extensive experiments show that the proposed protocol is efficient in terms of computation and communication costs. A security analysis shows the resistance of the protocol against collusion, disruption and background knowledge attacks in a malicious model.
 Keywords Location privacy  X  Group privacy  X  Location-based services  X  Secure multiparty computation 1 Introduction Location-based services (LBSs) provide a wide range of capabilities to mobile users, such as traffic report services, transportation services, nearby friend or nearby store services, advertising and emergency control services [ 12 ]. These services deliver desired information based on the users X  private information [ 26 ]. Mobile users can ask location-dependent queries of the spatial database [ 61 ] and receive information based on their locations at any time and from anywhere [ 61 ]. These services can be invoked by a single user or by a group of users [ 57 ]. For example, one user could ask  X  X here is the nearest restaurant to my location? X  or a group of users could ask  X  X here is the nearest meeting place to the group centroid? X .
Since LBSs offer their benefits based on the exact location of a user or a group of users, location privacy concerns are raised. Knowing the location of a user (or a group of users) could on proposing techniques that preserve user location privacy during the use of LBSs. Although there exists a large amount of the literature for preserving the location privacy of an individual a group of users has not been much explored.

Consider a scenario in which a military group of users wishes to have a critical meeting in a place that is closest to the group centroid. They can utilize a LBS provider that maintains a database ( P ) of points of interest (POIs) [ 47 ]. To get the desired POI, users of the group provide their current locations (called query points) to the LBS; then, the LBS returns the point(s) of P with the smallest distance(s) from the centroid of query point.

There are two major privacy concerns in this scenario: (i) Preserving the location privacy of each group member and (ii) Preserving the location privacy of the meeting place.

The first issue encompasses protection of user location information from other group members, as well as from the LBS and outside attackers. The second privacy issue deals with hiding the meeting point location from anyone outside the group, including the LBS and outside attackers.

Considering these two privacy issues, we can see the problem as an instance of a secure multiparty computation (SMC), in which group members jointly and securely compute a function of their private inputs (their locations) such that the function outcome is the meeting place location. Furthermore, not only users X  private inputs but also the result of the computa-tion (meeting place location) must be kept secret. In other words, the result of the computation can only be visible to the group members.

Thefocusofgrouplocationprivacyisonprotectinglocationprivacyforallgroupmembers; individual location privacy aims to protect single-user location privacy. Further, preserving the location privacy of a requested place in a single-user scenario is straightforward, but this is more complicated in a group scenario. For these reasons, the techniques of the former cannot be directly applied to the latter; special solutions must be developed to achieve group location privacy.

To the best of our knowledge, Hashem X  X  research [ 31 ] and the GLP protocol [ 2 ]arethe only works addressing the location privacy problem for a group of users during the use of LBSs. In Hashem X  X  method, each member sends her imprecise location to the LBS; then, the LBS returns a set of candidate POIs with respect to the members X  imprecise locations. To determine the actual answer, group members execute a private filtering algorithm that finds the exact result from the candidate answer set without violating members location privacy.
Although Hashem X  X  work preserves the location privacy of group members, it is an expen-sive method in terms of communication cost because it requires each member to send her imprecise location (a cloaked region) to the LBS and the LBS to return a set of candidate POIs that must be jointly refined by the group members to determine the exact result.
In GLP protocol, group members jointly and securely compute the centroid point of their locations and send it to the LBS. Then, the LBS returns the nearest meeting point to the centroid. GLP protocol does not need any computation to determine the actual answer, because the answer set only contains the exact result. The drawback of this approach is that GLP protocol does not support the location privacy of the meeting place [ 2 ].

In this paper, we propose a resource-aware protocol we name Cloaked-Centroid that pro-vides member location privacy and meeting place location privacy. The proposed protocol relies on spatial cloaking, an AV-net scheme and a conference key establishment protocol and is resistant against collusion attacks, disruption attacks and background knowledge attacks. Furthermore, the Cloaked-Centroid protocol offers a location cloaking process with personal-ized privacy requirements for each group member. Moreover, the Cloaked-Centroid protocol is completely independent of how the LBS evaluates the queries; thus, it can be seamlessly integrated with any existing privacy-aware query-processing algorithm [ 11 , 33 , 43 ].
In general, the contribution of this paper can be summarized as follows: 1. We propose a location privacy protection technique (Cloaked-Centroid) for a group of 2. The proposed protocol provides a location cloaking process based on personalized user 3. We provide the proof of correctness of Cloaked-Centroid protocol and analyze its privacy 4. We evaluate the performance of the protocol through extensive experiments. The results
The rest of the paper is organized as follows. The next section reviews the existing works in the field of location privacy. Section 3 delineates our system model and the assumption of our study. In Sect. 4 , the preliminaries of our solution are explained. Section 5 presents the proposed protocol and its proof of correctness. In Sects. 6 and 7 ,wedescribeour privacy analysis and security analysis of the Cloaked-Centroid protocol, respectively. The experimental results are shown in Sect. 8 , along with the comparison of the previous work, and finally, the paper is concluded in Sect. 9 . 2 Related works There is a wide literature on preserving user location privacy during the use of LBSs [ 11 , k-anonymity techniques, which are borrowed from databases [ 51 ] and privacy-preserving data mining field [ 17 , 53 , 59 , 60 ].

Generally, location privacy mechanisms are classified into two main categories [ 55 ]: (1) schemes that rely on trusted third parties (TTP-based) and (2) methods that are not based on TTPs (TTP-free).

The Casper framework [ 43 ] is a TTP-based method presented by Mokbel et al. that con-sists of two main components: the anonymizer and the privacy-aware query processor. The anonymizer uses a grid-based pyramid structure [ 43 ] and blurs a user location to a cloaked defined in her privacy profile). The privacy-aware query processor is embedded in the LBS provider and processes location-based queries.

Proposed by Kalnis et al. [ 33 ], the nearest neighbor cloak and the Hilbert cloak are two other TTP-based methods that blur an exact location to a cloaked region containing k users. Moreover, the authors address the issue of privacy-aware query processing at the LBS and develop an algorithm for it. It is worth mentioning that our paper does not aim to propose another privacy-aware query processor; rather, it addresses the problem of protecting location privacy for a group of users when accessing an LBS. Thus, any existing privacy-aware query-processing algorithm embedded in the LBS provider can be employed [ 11 , 33 , 43 ].
Although TTP-based methods provide a good balance between efficiency, security and accuracy, there is problem with all of these methods: users must trust the TTP and disclose their exact location to it. To overcome these problems, TTP-free methods have been proposed [ 55 ].Twoimportantclassesofmethodsofthiscategoryareasfollows:(1)collaboration-based methods [ 14 , 32 , 56 ] and (2) obfuscation-based methods [ 1 , 19 ]. In a collaboration-based method, a mobile user blurs her exact location by forming a group of her peers. Obfuscation-based methods preserve location privacy by artificially perturbing location information [ 1 ].
In this paper, we only consider solutions that protect user location privacy through group formation because they are similar to the group location privacy paradigm. After discussing these solutions, we specifically focus on the approaches that support location privacy for a group of users [ 2 , 31 ].

Chow et al. [ 14 ] were the first to apply the group formation technique to cloak single users X  locations. In Chow X  X  method, the mobile user forms a group of her peers by contacting them via single-hop or multi-hop communication. Then, the mobile user can blur her exact location into a spatial cloaked region that covers the entire group of peers. In the group formation phase, a query requester broadcasts a FORM_GROUP request to the neighboring peers. Because her peers respond to the FORM_GROUP request with their IDs and locations, the requester learns the locations of her peers. This factor is a drawback to Chow X  X  approach that is not addressed in his later work [ 15 ]. Another drawback of Chow X  X  method is that the user tends to be close to the center of her special cloak. Although this bug is repaired in Chow X  X  later work [ 15 ], the first problem still exists.

PRIVE [ 22 ] and MOBIHIDE [ 21 ] are two consecutive approaches presented by Ghinita et al. They proposed these two distributed methods to preserve the anonymity of a user issuing spatial queries to an LBS. Both methods are based on the Hilbert space-filling curve and assume that a user trusts her peers. In PRIVE, users are grouped into fixed hierarchical parti-tions (clusters) based on their Hilbert value. Each cluster head is responsible for determining the cloaked region of users in her cluster; therefore, the load of the head node in each cluster may be very high. In contrast, MOBIHIDE does not organizing users into fixed partitions, so it is more efficient. The mobile user will construct an index of other user location through a Chord-based distributed hash table and then anonymize her location by mapping the location to a random group of k consecutive users in the hash table.
Solanas et al. [ 55 ] proposed a cryptographic-based method to preserve single-user location privacy. A mobile user contacts the peers in her cover range to learn their locations; then, a centroid point is computed by the mobile user as her fake location. The locations are masked by adding Gaussian noise with zero mean to allow users to freely share their location without trusting their peers. However, if this procedure is applied several times with static users, their location will be disclosed due to the cancelation of Gaussian noise. To solve this drawback, Solanas [ 56 ] applied a public key privacy homomorphism; each user encrypts her masked location with an LBS public key and then shares the result with her peers.

Although applying privacy homomorphism solves this drawback, there is another problem with Solanas method: If the LBS were able to eavesdrop on users X  internal communication, then in consecutive usages with static users, the LBS would be able to deduce their exact locations due to the noise cancelation.

More similar to our protocol, Hu X  X  method [ 32 ] preserves individual user location privacy by forming a group without the user trusting her peers. In general, Hu X  X  method consists of two phases. In Phase one, the mobile user identifies her k peers through proximity information; in phase two, the minimum bounding rectangle (MBR) of the set of users is constructed through a specialized secure multiparty protocol. Alleviating the need for peer trust, this is a solution for single-user location privacy, and, similar to other such solutions, does not need extra phases to determine the exact POI from the received set of POIs (such as the answer-refining phase of Hashem X  X  protocol [ 31 ]).

It is worth mentioning that refining the answer set in all individual scenarios is done by the queryrequesterorbythequeryanonymizer(atrustedthirdpartythatmediatescommunication and performs the cloaking and anonymizing processes [ 33 , 43 ]). In our proposed protocol, there is no anonymizer and users do not need to trust their peers; they refine the answer set to determine the exact result in a secure manner.

In our Cloaked-Centroid protocol, if the LBS eavesdrops on internal communication, it learns no information about users X  exact locations, even with static users. As there is no need for an encryption scheme, Cloaked-Centroid is a lightweight method in terms of computation and communication costs.

As mentioned above, Hashem X  X  [ 31 ]andGLP[ 2 ] are the sole works in the field of group location privacy. In Hashem X  X  work, there are two phases, similar to our Cloaked-Centroid protocol. Hashem X  X  first phase, which is responsible for location cloaking, blurs the exact location of each user based on her peers X  local imprecise locations [ 30 ]. Afterward, each user submits her cloaked location along with a query ID to the LBS. (Query IDs are issued by a group coordinator, which is responsible for managing the group and submitting the parameters of nearest neighbor (NN) queries to the LBS [ 31 ]). Upon receiving all requests, the LBS provider evaluates the received query with respect to a set of cloaked regions and returns a set of candidate POIs, A , along with their total maximum and minimum distances from the users X  cloaked regions.

Hashem X  second phase, called the answer-refining phase, determines the exact POI without revealing the users X  exact locations. Sequentially, each member updates the total maximum and minimum distances of each POI in A with her actual distance; then, the point with the minimum total distance is selected as the meeting place.

Although Hashem X  X  work preserves location privacy for each group user, it does not support meeting place location privacy. In particular, although Hashem X  X  work preserves result-set anonymity, the location of the meeting place can be learned by any outside attacker, including the LBS.

Furthermore,thismethodrequiresthegrouptosend n distinctNNqueries,whichimposesa high communication cost. Moreover, computing an imprecise location requires each member to find her k  X  1 peers and contact them to collect their local imprecise locations [ 30 ]. Thus, the cloaking process requires additional communication and computation costs. Additionally, the LBS overhead to evaluate a group of NN queries is much higher than for that of a single NN query because the LBS evaluates each POI against a set of regions, rather than against a single region.

The GLP protocol [ 2 ] contains only one phase that computes the centroid point of group members. In particular, each member publishes her masked location, and then, a specific member computes the encrypted centroid point of the published locations using Paillier encryption [ 46 ]. Afterward, the encrypted centroid is sent to the LBS; the LBS then decrypts it and returns the meeting place nearest to the centroid. Although this approach preserves members X  location privacy, it does not protect the location privacy of the meeting place. Our Cloaked-Centroid protocol submits a single NN query along with the Cloaked-Centroid region to the LBS and receives the answer set; then, it privately determines the exact result from the answer set in a distributed manner while ensuring exact result privacy. Further, it achieves its security and privacy goals with a lower computation and communication costs. Moreover, as Cloaked-Centroid is completely independent from how LBS providers process and evaluate location-based queries, any existing query-processing algorithm with respect to a cloaked region, e.g., [ 11 , 33 , 43 ] can be employed to evaluate location-based queries; our protocol can be seamlessly integrated with them. 3 System model In this section, we present the assumptions made in our protocol and formally define the general problem of our study.

We assume that there is a group of users having wireless devices with location positioning modules, such as a GPS. These devices can establish Internet connections to external servers and point-to-point connections to neighboring devices.

We consider a malicious model as the protocol threat model and allow the existence of active adversaries. Generally, there are two types of threat models: (i) a semi-honest model and (ii) a malicious model. In a semi-honest model, each participant follows the protocol specification but tries to deduce some private information of the other participants; this model only allows for passive attackers. In a malicious model, the adversary is active and can behave arbitrarily.

We assume an authenticated public channel for each member of the group, which is an essential requirement for general secure multiparty computations [ 25 , 28 ]. This channel can be realized using physical means or a public bulletin board [ 36 ], where authentication can be done using digital signatures [ 36 , 52 ]orsymmetricsharedkeys[ 41 , 49 , 52 ].
In addition, we assume a group membership key, which is a secret shared key known only to members and distributed by the group manager (the member who initiate the group). Notice that the group manager registers the group members and distributes the group membership key among them.

We assume Euclidean distance and a 2D point database server for Cloaked-Centroid protocol.

The proposed protocol assumes slow-moving users, but it is important to mention that, with caution, the Cloaked-Centroid can also be used for fast-moving users. In such a situation, distances change rapidly and thus also will the meeting point. We will give some general information about this situation in Sect. 9 but leave the details for a future work.
Based on the above assumptions, the general problem of the paper can be formally stated as follows:
Given a set of POIs P , a set of active attackers E and a set of users U ={ u 1 , u 2 ,..., u n } a data point p  X  P such that for any point p  X  P ,dist ( p , c )  X  dist ( p , c ) ,where c is the centroid of U . The protocol should output p , while the precise location l i of a user u i is only visible to u i , and the centroid c and meeting point p are only visible to U even in the presence of active attackers. 4 Preliminaries In this section, we present the main building blocks used in designing the Cloaked-Centroid protocol: an AV-net scheme [ 29 ] and the Burmester X  X esmedt conference key establishment protocol [ 6 , 7 , 49 ]. We use the AV-net scheme to mask users X  locations such that the masks vanish upon aggregation. The Burmester X  X esmedt conference key establishment protocol is used to hide the result of the protocol from anyone outside the group. Through these methods, Cloaked-Centroid provides member location and meeting point location privacy. In both building blocks, and consequently in our protocol, it is assumed that G is a finite cyclic group of prime order q in which the Decisional Diffie X  X ellman (DDH) problem is intractable. The generator in G is g , and all computations take place in G .Thereare n members in the group as { u 1 , u 2 ,..., u n } ,andtheyagreeon ( G ; g ) . 4.1 AV-net protocol AV-net [ 28 ] was developed by Hao in 2006 to solve the anonymous veto problem and consists of two rounds. In the first round, each member produces and broadcasts a random ephemeral public keys before i and dividing all the random ephemeral public keys after i :
In the second round, each member broadcasts g c i b i or g a i b i , depending on whether the user vetoes or not, respectively ( c i is a random number). Upon multiplying all messages, if no one vetoes, we have i g a i b i = 1 because of the vanishing property of AV-net exponents vetoing user(s) remain(s) anonymous [ 29 ]. 4.2 Burmester X  X esmedt protocol The second building block of Cloaked-Centroid is the conference key establishment protocol. Many such protocols have been presented in the literature [ 6 ]; of those, we apply a broadcast version of the protocol proposed by Burmester and Desmedt [ 7 ], which we adequately inte-grate with the AV-net rounds. The Burmester X  X esmedt protocol has two major phases. In the first phase [ 7 ], each member u i computes and broadcasts a random number g e i . In the second by the following equation:
Note that k i is the conference key constructed by u i , is the same as other honest members X  keys and is equal to Eq. ( 3 ):
Considering the intractability of the Diffie X  X ellman problem in G , k (the established conference key) is only computable by group members; adversaries can find no information about it [ 7 ]. 5 Cloaked-Centroid protocol AsshowninFig. 1 , the Cloaked-Centroid protocol has two major phases:
In the first phase of the protocol ( in Fig. 1 ), group members jointly and securely compute a cloaked region as the group location, which includes the centroid point of their exact locations. To achieve this, each member cloaks her location based on her privacy profile and anonymously publishes her cloaked region to the public bulletin board through a pseudonym service [ 22 ].

Aftersubmittinghercloakedregion,eachmemberisabletocomputetheCloaked-Centroid region by computing the average of the published cloaked regions X  coordinates. The Cloaked-Centroid region contains the exact centroid point, which will be proved in the proof of correctness subsection.
 Then, a representative member of the group (a randomly chosen member) u a submits an NN query along with the Cloaked-Centroid region to the LBS, either using an onion router [ 52 ] or through a randomly selected peer [ 15 ]( in Fig. 1 ). These techniques hide the sender X  X  identity from the LBS provider. The LBS provider evaluates the received query and returns to u a set of candidate answers ( A ) that is guaranteed to contain the exact result ( in Fig. 1 ). We prove this fact in the next few paragraphs.

In the second phase of the protocol ( in Fig. 1 ), members of the group securely and collaboratively compute the centroid blindly to determine the actual answer. This phase must beconductedinawaythatpreservesthelocationprivacyofallgroupmembersandprotectsthe (b) ( a ) (c) location privacy of the centroid (and thus the meeting place) from possible outside attackers, including the LBS.

Thus, the blind centroid computation phase can be considered a special secure multiparty computation [ 25 ]; it protects users X  private inputs and ensures that the computation results can only be learned by group members. Note that the computation results are the centroid coordinates, which are used to determine the exact answer. Here, we use the AV-net [ 29 ] and the Burmester X  X esmedt conference key establishment protocol [ 7 ] to design a secure multiparty computation.

It is important to note that because of the parallel execution possibility, we use the same number ( and ) for submitting the query and for the blind centroid computation step. We do not consider sending the query and receiving the result (step ) a separate phase; we consider this a subtask that can be done after step and in parallel with step . Figure 2 shows the message flow of each phase, and the following parts explain each phase in depth. Phase 1: Location cloaking Each user u i determines her exact location ( l i = [ x i , y i ] ) through a GPS-enabled device. Then, she blurs her exact location into a rectangle by generating two fixed length lines ( length i , parallel to the x -axis and w idth i , parallel to the y -axis) that pass through her current location. Her cloaked region ( CR i ) is then the top left and bottom right coordinates of a rectangle constructed by these two lines, as shown in Fig. 3 . Note that the length of the lines is dependent on the user X  X  policy and can change over the time and the environment, but should satisfy equation A i , min  X  length i  X  w idth i ,where A i , min is the minimum cloaked area of u i (defined in her privacy profile as her privacy requirement). Because u i can pass the lines through her exact location at any point she wishes, this kind of cloaking ensures that all points in the cloaked region are equally likely to be the exact location of u i .
Then, u i anonymously publishes her cloaked region ( CR i ) to the public bulletin board through a pseudonym service [ 22 ], which removes user identity such as an IP address to ensure the anonymity of the cloaked region, as shown in Fig. 2 a. To prove the authenticity of the anonymous message, each member attaches an HMAC checksum to her message, which is a keyed hash of the message with a group membership key. Verification of the HMAC checksum is done by group members for each message through separately computing the HMAC checksum and comparing it with the received one. Including an HMAC checksum with the anonymous message prevents an attacker from sending fake messages because the checksum requires the attacker to know the group membership key.

When anonymity of a cloaked region is not necessary or the possibility of an attacker with background knowledge 1 is low, group members can publish their messages to the bulletin board without using a pseudonym server. In such cases, group members reveal their iden-tities along with their blurred locations (cloaked regions). Because they do not reveal their exact locations, their location privacy is not violated; the LBS or possible outsider attackers only infer users X  cloaked regions, not their exact locations. We will discuss attackers with background knowledge in Sect. 7.2 .

Upon finishing this round, members compute the Cloaked-Centroid region ( CR c ) ,which includes the exact centroid point. The coordinates of this region are computed by calculating the centroid points of the top left and bottom right coordinates of all cloaked regions, i.e., the top left coordinate of CR i x c , t , y c , t the same is true for the bottom right coordinate x c , b , y c , b
Afterward, u a (a representative member randomly chosen to communicate with the LBS) sends the NN query along with the Cloaked-Centroid region to the LBS (shown in Fig. 2 b), either using onion routing [ 52 ] or through a randomly selected peer [ 14 ]. These techniques provide the anonymous usage of the LBS by concealing the sender X  X  identity.
 Phase 2: Blind centroid computation
Blind centroid computation computes the centroid of members X  locations without endan-gering their location privacy or the centroid point privacy. We call this phase  X  X lind X  because it uses a blinding factor to hide the centroid from anyone outside the group. In this phase, which begins in parallel with the submission of the query, group members start a special secure multiparty computation to compute the centroid point, such that users X  private inputs (location coordinates) and the results of the computation (the centroid coordinates) are kept secret. To design this special secure computation, we apply and adapt the AV-net proto-col [ 29 ] along with the Burmester X  X esmedt conference key establishment protocol [ 7 ]. We apply a broadcast version of the Burmester X  X esmedt conference key establishment protocol, which is adequately integrated with the AV-net rounds and set up during the blind centroid computation phase as follows:
AsshowninFig. 2 c, each member u i selects two random secret values a i , e i  X  R Z q and broadcasts ( g a i , g e i ) to the bulletin board. Then, she computes and publishes t i = ( g finishing this step, u i computes g b i (the AV-net value) and k (the conference key) according to Eqs. ( 1 )and( 2 ), respectively.
 w the conference key) to hide the result of the computation (the centroid); and x i , which is the x -coordinate of u i .

Multiplying all w i s results in canceling the AV-net masks and computing the conference key times the summation of x coordinates of all members, which is a discrete logarithm to the base g , k g i x i . In particular, since a i and b i are AV-net values, we have i a i b i = 0 [ 28 ];thus,wealsohave i g a i b i = g i a i b i = 1.

Moreover, aggregating the conference key part of all w i s results in computing the k as follows:
Therefore, aggregating all w i s results in computing k g i x i as follows:
As mentioned previously, under the difficulty of Diffie X  X ellman problem, k is only com-putable by group members [ 7 ] and serves as a blinding factor to hide the centroid from anyone outside the group; thus, only participating users can divide the result by k to get g x i .
Because x i is normally a small number, group members can compute the discrete logarithm of g x i by applying an exhaustive search or the Pohlig X  X ellman algorithm [ 50 ]. It is worth mentioning that the coordinate data are usually an integer of six-or seven-decimal digits that requires about 32 bits. Thus, x i will be a small number and determining x i from g x i will be done efficiently. Dividing the summation by n , results in computing the x coordinate of the centroid. The same is done to obtain the y coordinate of the centroid.
By receiving the candidate answer set A , each member can determine the exact result by finding the point p  X  A with the minimum distance to the centroid point; then, the protocol terminates. Figure 4 presents the summary of the proposed protocol.

It is worth mentioning that although applying an exhaustive search technique makes it possible to retrieve x i from g x i , adversaries cannot benefit from this because the final result is kept hidden by the established blinding factor k , which is only known to the group members.
For security from malicious participants and active adversaries, we apply a zero-knowledge proof [ 16 ]. Each time a user publishes a value to the bulletin board, she must provide its zero-knowledge proof. In the case of any doubt, members can verify knowledge proofs and detect the malicious member(s). For this purpose, any zero-knowledge proof sys-tem can be applied. Because of simplicity and non-interactivity properties, we use Schnorr X  X  signature [ 54 ], as Hao does [ 29 ]. In Schnorr X  X  signature, to prove the knowledge of the expo-To verify this proof, one can check whether g v is equal to g r g a i h .

We apply Schnorr X  X  signature to provide a single proof for all messages of blind centroid the knowledge of a i and e i and proves that t i and w i are well-formed messages. To provide this proof, u i proceeds as follows: e h = H g , g i , g i , 1 , g i , 2 , g v , g v
This proof can be verified by the following checks: The first two checks ensure that u i knows a i and e i ; the next two checks ensure that u i has constructed and published a well-formed t i and w i .
 Proof of correctness
The Cloaked-Centroid protocol aims to retrieve the nearest POI to the group centroid; thus, to prove the correctness of the Cloaked-Centroid protocol, it suffices to prove that the sent cloaked region to the LBS contains the centroid point of the group. In other words, if the sent cloaked region contains the centroid point, then because the LBS provider evaluates the nearest POI of all points in the cloaked region, it also evaluates the nearest POI to the centroid and includes that point in the answer set. That point will thus be determined as the exact result by the group members. Proof of correctness of the Cloaked-Centroid protocol follows through Lemma 1 .
 Lemma 1 The sent cloaked region to the LBS contains the centroid point of the group. Proof As stated earlier, the centroid coordinates are computed as the average of the x coordinates and y coordinates of all members. Assume c = ( x c , y c ) as the centroid point and CR c = x c , t , y c , t , x c , b , y c , b each member u i , the exact location coordinates are denoted by ( x i , y i ) and her cloaked region is denoted by CR i = x i , t , y i , t , x i , b , y i , b just the x coordinate. It is obvious that for each member u i , x i , t  X  x i  X  x i , b ,sothis should be true for the average function of these values over all members; thus, we have ( 1 / n ) n nate of the centroid is between the lower and upper bounds of the sent cloaked region x , t  X  x c  X  x c , b .The y coordinate can be derived in the same way, and we have that ( 1 / n ) n x and y c , it is obvious that the centroid is somewhere inside the sent cloaked region, and the proof is complete. 6 Privacy analysis As mentioned before, the Cloaked-Centroid protocol should satisfy the following privacy requirements: (i) Preserving the location privacy of all group members and (ii) Preserving the location privacy of the meeting place. To analyze these two requirements, we investigate each phase of the protocol separately and discuss privacy requirements. 6.1 General requirements of location cloaking phase As stated in [ 42 , 44 ], a location anonymization process should satisfy four general require-ments: accuracy, privacy, efficiency and flexibility which are discussed in the following:
Accuracy With respect to accuracy, the anonymization process should satisfy user privacy requirements, i.e., the resulting cloaked region should be as close as possible to the user privacy requirements (defined in her privacy profile). Location cloaking in the Cloaked-Centroid protocol is done by the users themselves. Each user cloaks her location based on her privacy profile by computing a cloaked region with an area size of at least A i , min . Thus, the accuracy property is achieved in the Cloaked-Centroid protocol.

Privacy Regarding privacy, an adversary should not be able to infer any information about the user X  X  exact location from the published cloaked region. Because the reported cloaked area in Cloaked-Centroid is formed by passing two fixed length lines from a user X  X  exact location, all points in the line and consequently in the cloaked region are equally likely to be the user X  X  exact location, so an adversary cannot infer a user X  X  actual location. In addition, using a pseudonym server causes background knowledge attacks to fail. We will explain background knowledge attack in more detail in the next few paragraphs (Sect. 7.2 ).
Efficiency This property means that the cloaked area must be computed in an efficient and scalable manner. Calculating the cloaked region in the Cloaked-Centroid protocol requires only a few simple mathematical operation; therefore, it is an efficient process. The cloaking process needs no cooperation from the user X  X  peers; hence, it is scalable and can be applied to large groups.

Flexibility Finally, in terms of flexibility, each user should be able to change her privacy profile at any time. In the Cloaked-Centroid protocol, a user can change her privacy profile (specifically A i , min ) whenever she wishes. The proposed protocol is also flexible in that it guarantees that the user will achieve her desired privacy level. 6.2 General requirements of the blind centroid computation phase The blind centroid computation phase determines the centroid point by running an SMC pro-tocol. Therefore, Phase 2 should satisfy the central requirements of a general SMC protocol, which are privacy and correctness [ 4 , 39 ].

Regarding privacy, no information except what can be inferred from the output should be learned. More exactly, a user X  X  private inputs must be kept hidden from other users.
Regarding correctness, each party should receive the correct output and an adversary should not be able to cause the result of the computation to deviate from its desired function [ 39 ].

In addition to these two properties, the blind centroid computation phase must satisfy an additional property known as centroid privacy: It must keep the result (the centroid) hidden from all except group members. The following paragraphs state these three properties. Property 1 The blind centroid computation phase preserves the location privacy of individ-ual users.
 The blind centroid computation phase is composed of two well-known building blocks (the AV-net and Burmester X  X esmedt protocols); thus, its privacy property relies on the security of these two schemes. Learning the location of a particular user ( u i ) requires an attacker to learn u i  X  X  AV-net mask and u i  X  X  portion of the conference key.

In the case of no collusion, an attacker fails to learn the required knowledge, because doing so requires her to solve an instance of the Decisional Diffie X  X ellman (DDH) problem [ 29 ], which she cannot. Specifically, finding the AV-net mask and the conference key portion g i , respectively (notice that a i s, b i sand e i s are unknown to the attacker [ 29 ]). Under the difficulty of the DDH problem [ 29 ], the attacker cannot do this and consequently fails to learn the user X  X  location.

In the case of partial collusion against u i ,if u i  X  1 participates in the attack, then comput-the location of u i , attackers must learn the AV-net mask, but this is not possible in a partial collusion attack. Specifically, based on the security of the AV-net scheme [ 29 ], b i is a secret random value to colluding members in a partial collusion attack; thus, colluding members cannot cancel the mask and no useful information can be learned. Moreover, the only infor-mation that can be obtained from the zero-knowledge proofs is that the sender knows the discrete logarithms [ 29 ] and that the sender publishes the well-formed messages.
Because of the above factors, the parties X  published ciphertexts do not leak any useful information and the location privacy of individual users is guaranteed; no members learn other users X  locations.
 Property 2 The blind centroid computation phase of the Cloaked-Centroid protocol pre-serves correctness in a malicious model.

To distort the result (centroid), malicious member may attempt to send fake values or change the sent messages of honest members; however, they will not be able to do this because of the zero-knowledge proof. Including the knowledge proof in the protocol design requires the attackers to publish a consistent zero-knowledge proof for the fake value. To rectify the attack, the honest parties exclude the malicious ones and restart the blind centroid computation phase for obtaining the correct output and their privacy remains intact. It is worth mentioning that fake values of outside attackers cannot be published to the bulletin board, because the bulletin board is an authenticated channel that only publishes authenticated messages (messages belong to the group members) and discards others.
 The zero-knowledge proof is essential in the design of blind centroid computation phase. Without it, several misbehaviors resulting in outcome incorrectness would be possible. For example, if there were no knowledge proof, a participant u i could cause the protocol outcome are random values chosen by u i . Hence, the zero-knowledge proof ensures that the protocol is self-enforcing and correct.
 Property 3 The blind centroid computation phase preserves centroid privacy against pos-sible outside attackers, including the LBS.

As discussed in Property 1 , the blind centroid computation phase preserves user location privacy even if partial collusion occurs. Here, we explain that this phase preserves centroid privacy as well. In the last round of Phase 2, when members X  broadcast values are multiplied, the result obtained is the conference key multiplied by the summation of the x coordinates (or the y coordinates). Learning the centroid requires an outside attacker to learn the conference key.
An outside attacker cannot learn the conference key, because it requires her to solve an instance of Diffie X  X ellman problem according to Theorem 1 of [ 7 ]; therefore, the cen-troid privacy is preserved. Moreover, an attacker fails to learn useful information from zero-knowledge proofs [ 29 ]; thus, she cannot learn the centroid.

Since knowing the centroid is enough to find the meeting point, preserving the location privacy of the meeting place implies that nobody except the group members learns the cen-troid. As explained in Property 3 , applying the conference key protocol makes this phase secure; hence, the Cloaked-Centroid protocol preserves the meeting point location privacy.
Furthermore, because the result of the LBS is a set of candidate POIs, A , with cardinality k (assuming k as the cardinality of A ), the result-set anonymity property is provided with the degree k . More exactly, neither the LBS nor an attacker could deduce the location of the meeting place with a probability larger than 1 / k . 7 Security analysis Centroid behavior in the case of malicious members (known as insider attackers) with back-ground knowledge attack. 7.1 Insider attacks Two main attacks caused by an insider are collusion attacks and disruption attacks. A mali-cious member may collude with other malicious parties to disclose honest members X  loca-tions. She may send fake values to prevent the protocol from achieving its goal and to cause a disruption attack, i.e., she may broadcast incorrect values for her AV-net mask or she may publish an incorrect value for t i or w i , or in the worst case, she may alter her location coor-dinates. Also, a malicious member may abort the protocol execution at any time, i.e., she may refuse to send data. Here, we study these misbehaviors and analyze how the protocol can overcome them. 7.1.1 Collusion attacks In a collusion attack, active attackers may collude to discover the location(s) of some honest member(s) of the group. There are two types of collusion attacks: (i) full collusion and (ii) partial collusion. In a full collusion attack, all participants collude against one user in the network. The Cloaked-Centroid protocol does not preserve user location privacy in the case of a full collusion because the AV-net mask would be canceled [ 28 ]. However, it is unlikely that all participants would collude against just one [ 9 ]; thus, we consider only partial collusion , which involves some participants, but not all.

In the worst case, only participant u k does not participate in a partial collusion against participant u i . In the location cloaking phase, this partial collusion may reveal the cloaked region of u i with probability 1 / 2, since the cloaked regions of only two participants would remain anonymous. Although revealing the identified cloaked region would not be considered a threat in itself, it is a limitation of the Cloaked-Centroid protocol.

Partial collusion in the blind centroid computation phase would not reveal any useful information.Assumeallgroupmembersexcept u k colludeagainst u i to discover u i  X  X location. x it will fail. Assuming this participation, the colluders must find u i  X  X  AV-net mask to disclose her coordinates. To reveal the mask, it is enough for the attackers to find b i , but the AV-net structure (Lemma 2 of [ 29 ]) guarantees that  X  b i is a secret random value to attackers in consequently, fail to discover u i  X  X  location coordinates.

AccordingtoYangetal.[ 60 ], a protocol is called t -private  X  X f no collusion containing at most t parties can get any additional information from its execution X . Based on the above discussion, Cloaked-Centroid protocol will be an ( n  X  2 ) -private protocol. 7.1.2 Disruption attacks Broadcasting fake values for the AV-net mask can prevent a protocol from fulfilling its task; hence, it is considered a disruption attack. In this attack, a malicious party must use a fake b i value. Due to the zero-knowledge proof, however, the malicious member would fail in her attack [ 29 ] because she would not be able to demonstrate a consistent knowledge proof for the fake value. Upon attempting to verify the zero-knowledge proof, honest parties would realize an attack had occurred because the verification would fail. They could then expel the attacker and restart the protocol without violating their location privacy.

Publishing an incorrect value for t i may cause honest parties to come up with an incorrect k (except the party who is immediately next to the malicious member because she constructs her key without considering the t i of the malicious member). However, due to the zero-knowledge proof, the malicious member would fail at her attack because she would not be able to provide a consistent knowledge proof for the fake t i . Specifically, providing any knowledge proof other than the correct one would lead to the failure of knowledge proof verification similar to the AV-net [ 28 ]; thus, the honest parties would realize the attack and then exclude the malicious member and restart the step without endangering their location privacy. The situation is the same for a malicious member who publishes an incorrect value for w i . Generally, the zero-knowledge proof ensures that participants follow the protocol faithfully; thus, the protocol achieves its goal.
 In all multiparty computation protocol, a malicious member can always alter its input [ 39 ]. Although altering the input by a malicious member in the Cloaked-Centroid brings no benefit to the attacker, it may cause a disruption attack if the attacker sends a meaningless value for her coordinates, i.e., a large value out of the range of the location coordinates. Preventing this attack is hard, but there is a technique that ensures members use meaningful values for their coordinates.

As mentioned earlier, location coordinates are small numbers that are at most 32 bits long; to cause a disruption attack, a malicious member alters her x coordinate to a value larger than 2 32 . To overcome this attack, although the Cloaked-Centroid protocol cannot ensure that members provide their real location data, it can ask them to prove that their inputs lie in the valid range by applying range proof protocols [ 5 , 40 , 48 ]. A range proof protocol proves that a committed secret number (the location coordinates in the case of Cloaked-Centroid) lies in a specified interval without disclosing the secret [ 5 ].

TheCentroid-Cloakprotocolasksmemberstoprovidearangeprooffortheirinputlocation coordinates when the computed coordinates for the centroid are meaningless, i.e., there is no point on the map with these coordinates. With this condition, members can start a range proof protocol to prove that their input location coordinates lie in the predefined range and also to detect the malicious member(s). Some well-known range proof protocols (that can be seamlessly integrated with the Cloaked-Centroid protocol) include the classical range proof [ 40 ] or the batch range proof [ 48 ] (see  X  X ppendix X ).
Aborting the protocol execution in the first phase does not cause any harm, so other members can enter the protocol and get the desired results. A refusal to participate during Phase 2 or between the steps of Phase 2 can easily be rectified: at this point, the honest parties can identify and exclude the malicious member through the zero-knowledge verification and restart the protocol at the corresponding step. 7.2 Background knowledge attacks In the context of location privacy, a background knowledge attack might take place when the adversary applies her prior knowledge to infer a user X  X  identity or true location [ 18 ].
Since the blind centroid computation phase is entirely cryptographic, the adversary cannot gain any advantage from a background knowledge attack. In the location cloaking phase, group members publish their anonymous cloaked regions. Depending on the adversary X  X  prior knowledge, one of the following situations may occur: 1. If the adversary has no background knowledge, she would learn some anonymous cloaked 2. Assuming the adversary knows members X  identity and also has some knowledge about 3. If the adversary knows the exact location of a particular user, then there is no location 8 Experiments In this section, we evaluate the performance of Cloaked-Centroid protocol through extensive experiments. We use Sequoia 2 dataset which contains 62,556 points of interest in California and normalize it in a square of 10,000  X  10,000 units (Fig. 5 ). Table 1 summarizes the values used for each parameter in our experiments.

We consider the value of minimum area rectangle for each user as 0.001 X 0.01% of the total space. We use group size of 16, 24, 265 and 1024. The number of required data points for NN of group users varies between 2 and 10% of the total space. We then randomly generate 1024 location points that are uniformly distributed in the considered areas. The size of module p for the cryptographic operation is set to 128 bits. The experiments are run on an Intel P3 2.01 GHz desktop with 1GB of RAM.

We evaluate the performance of Cloaked-Centroid by measuring the following metrics: in terms of computation cost, we measured the CPU time and query response time; in terms of communication cost, we measure the number of returned objects by LBS (size of LBS message) and also the size of intra-group messages.
 For varying group sizes, we first compare the area size of the cloaked region sent by the Cloaked-Centroid protocol versus by Hashem X  X  method. Figure 6 shows that the area size of the Cloaked-Centroid protocol is much lower (nearly a constant value) than that of Hashem X  X ; this is because we use the Cloaked-Centroid region as the group location rather than the MBR that encloses all user-cloaked areas, as Hashem does.

We evaluate the query response time (the time taken by each phase plus the LBS evaluation time) required by Cloaked-Centroid compared to Hashem X  X  protocol for different group sizes and show the result in Fig. 7 a. As shown in the figure, Hashem X  X  method provides a higher query response time than Cloaked-Centroid, especially as the group size grows larger. The Cloaked-Centroid protocol is more efficient due to a lower LBS overhead and the parallel nature of Phase 2. In particular, the LBS overhead to retrieve the nearest POI for the large sent cloaked region in Cloaked-Centroid protocol is, on average, 1,000 orders of magnitude smaller than that of Hashem X  X . Figure 7 b shows the time required for the LBS to evaluate a query and retrieve the candidate POIs.

Further, in Phase 2 of Cloaked-Centroid, users can do their work in parallel; in Hashem X  X  method, they must do it sequentially. In other words, the blind centroid computation phase of Cloaked-Centroid requires only three sequential steps versus n sequential steps in Hashem X  X  method. Hence, although each user in Phase 2 of Cloaked-Centroid must perform a time-consuming task (cryptographic operations), the overall required time to complete the phase is lower than that of Hashem X  X . Figure 7 a presents the query response time without considering ( a )(b) the zero-knowledge operations. Figure 7 c shows the execution times of Cloaked-Centroid, including the required time for generating and verifying zero-knowledge proofs. Although securing the protocol against malicious adversaries requires more computations, parallelizing the operation of Phase 2 with the LBS operations reduces the total execution time.
In Fig. 8 , the result of the communication cost is presented. Since the area size of the sent cloaked region in the Cloaked-Centroid protocol is smaller than the MBR that encloses all user-cloaked regions in Hashem X  X  method, the Cloaked-Centroid protocol has a smaller answer set (about 0.014 orders of magnitude). Therefore, the proposed protocol not only decreases bandwidth consumption, and it prevents the LBS from excessive disclosure. It is worth mentioning that the LBS message in Hashem X  X  method consists of the candidate POIs along with the maximum and minimum total distances values for each POI, so the size of the LBS message is larger than that of Cloaked-Centroid X  X .

As mentioned before, the Cloaked-Centroid protocol is a resource-aware method. This property is verified by the experimental evaluation, since it saves the bandwidth by sending only one request and by receiving the smaller answer set size, as well.

To compare the intra-group communication cost, we consider the total communication costs of Phase 1 and Phase 2. We measure this cost by summing the size of all messages exchanged in both phases. In Phase 1 of Cloaked-Centroid, each user sends her imprecise location to the bulletin board, while in Hashem X  X  method, each user collaborates with her neighbors to find her imprecise location. If the number of neighbors of each user is set to m , then she will receive m messages containing her neighbors X  local cloaked regions. In Phase 2, we experimentally count the number of messages and their sizes and then add the values. As a result, we conclude that the intra-group message size of Cloaked-Centroid would be more than 100 orders of magnitude smaller than that of Hashem X  X .

To sum up, the Cloaked-Centroid protocol preserves location privacy of group members and meeting place privacy. The proposed protocol is resistant to collusion attacks, disruption attacks and background knowledge attacks. Cloaked-Centroid is also a resource-aware pro-tocol as it only sends one NN query to the LBS provider, which leads to a communication complexity of O ( 1 ) . Moreover, the communication complexity of its intra-group messages is of O ( n ) ; in Hashem X  X  protocol, it is O ( nm ) ,where m is the number of response messages received by each participant from her peers [ 30 ].

It is worth mentioning that Cloaked-Centroid is independent of how LBS providers eval-uate the queries; any existing privacy-preserving query-processing algorithm [ 11 , 33 , 43 ] can be used. 9Conclusion In this paper, we addressed the problem of supporting location privacy for a group of users while accessing location-based services. We considered a group of users that wants to benefit from an LBS and meet at a point with the smallest distance from their centroid. We identified the privacy issues of this scenario (location privacy for all group members and location privacy for the meeting place) and proposed the Cloaked-Centroid protocol to satisfy those ( a )(b) issues. Our protocol provides result-set anonymity, preventing the LBS and other possible attackers from learning the location of the meeting place.

Furthermore, Cloaked-Centroid is a resource-aware solution; in sending only one query to the LBS, the overhead to evaluate the query and the size of the LBS result are signifi-cantly decreased. Moreover, as the Cloaked-Centroid protocol is independent of the query-processing algorithm of the LBS, any existing privacy-preserving query-processing algorithm can be applied.

As stated in the paper, with some caution, Cloaked-Centroid can be used for fast-moving users. We briefly discuss this option below, but leave the details for a future work. Under the fast-moving condition, users X  locations change rapidly and thus also will be the meeting point. Hence, a user must consider her speed and direction in both phases of the Cloaked-Centroid protocol. In particular, the user can either blur her location with respect to her speed and direction in such a way that covers her during the protocol run while she is moving fast or she can predict her future location based on her current location, speed and direction. In the latter case, she can publish a cloaked region of her future location in the location cloaking phase and use her future location in the blind centroid computation phase. As an illustration, in Fig. 9 , u 1 can use CR 1 instead of CR 1 in the location cloaking phase and x , y instead of [ x , y ] in the blind centroid computation phase. The idea behind this recommendation is that the user should determine which option will better reflect her future location.
Extensive analysis shows that the Cloaked-Centroid protocol is more secure and efficient with respect to privacy preservation and bandwidth consumption than the previous technique. In addition, the proposed protocol is resistant against collusion attacks, disruption attacks and background knowledge attacks in a malicious model. Appendix: Range proofs for the Cloaked-Centroid protocol range proof [ 40 ] can be applied. In this proof that is based on the zero-knowledge proof of a discrete logarithm [ 54 ], the prover encodes her secret to its binary representation and then proves that each digit in this representation is either 0 or 1, using a proof of knowledge of 1 out of 2 discrete logarithms [ 16 ]. Adapting the classical range proof to the Cloaked-Centroid protocol proceeds as follows:
Assume the parameters of the range proof are the same as the Cloaked-Centroid protocol. 1. The prover generates V = g x i h r mod p as a commitment to x i where h is the generator 2. The prover computes V = V / g a = g x i  X  a h r mod p ; then, the proof that x i  X  [ a , b ] is 3. Let x i  X  a = x 0 2 0 + x 1 2 1 + X  X  X + x m 2 m be the binary representation of x i  X  a ,where 4. The prover chooses u 0 , u 1 ,..., u m  X  R Z q , and computes u = u 0 2 0 + u 1 2 1 +  X  X  X  + 5. The prover sends E j and u to the verifier. 6. The verifier checks whether V h u is equal to m j = 0 E 2 j j mod p . 7. For each E j ( j = 0 , 1 ,..., m ) , the prover and the verifier run a sub-protocol to prove
Note that before running the range proof protocol, the prover should prove that V = g of equality of two discrete logarithms [ 8 ]. Also, the verification can either be done centrally by a chosen member in the group or distributedly by all members.

The batch range proof of Peng et al. [ 48 ] is similar to the classical range proof and can also be applied. In a batch range proof, the prover represents her secret in a base-k system where k can be any integer greater than 1. Then, the prover proves log k ( b  X  a ) instances of batch proof in which the log k ( b  X  a ) instances of proof of knowledge of 1 out of k are batched into a single proof [ 48 ]. Assuming k = 2, the batch proof for m instances of knowledge of 1 out of 2 discrete logarithms is as follows:
Assuming k = 2, adapting the batch range proof to the Cloaked-Centroid protocol pro-ceeds as follows: 8. Steps 1 to 6 are exactly the same as for the classical range proof. 9. The prover and the verifier run a batch proof of knowledge of 1 out of 2 (or 1 out of k ) References
