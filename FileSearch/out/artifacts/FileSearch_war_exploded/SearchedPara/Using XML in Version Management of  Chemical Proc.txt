 Process modeling is the task of developing models of chemical process engineering systems, for the better understanding and simulated investigation of a system. The benefits of modeling and simulation include simplification of complex systems for understanding, safer representation of dangerous systems, and to reduce expensive experimentation. system or tool uses different modeling languages for their development, implementing their own set of semantics and modeling representation techniques. proprietary model representations without the ability to facilitate reuse of these models, let alone facilitating the reuse of models from other packages. This is a significant issue, hampering process design and modeling practices. In considering mechanisms for reuse in process modeling, a number of aspects can be considered. management of the model development process. This is to be accomplished through the application of Software Configuration Management (SCM) strategies and XML technologies. framework for supporting model reuse, and the techniques used to automatically identify versions. Section 5 outlines example test scenarios and their results from our test suite. The paper concludes with a summary of our observations and summarizes future work on the framework. Presently the status of process modeling involves the solving of very large systems of equations (10,000  X  100,000) as part of the process models. However, existing limitations include a lack of mechanisms to handle the following: 1. Modeling complexity [1] [14]; 2. Reuse parts of models, out of and sometimes even within their original context 3. Documenting information/decisions during the design phase [1] [19]; 4. Controlling and documenting the history of the various versions being built in a 5. Support for team effort in model development [4] [12]. address limitation 1 by applying object-orientated concepts to the design of the tools (example packages include ASCEND [1], Modelica [9], SMILE [10], Aspen Plus [3], n-dim [1], Ptolemy II [8], SpeedUp [14], and MODKIT [4]). However, there have been limited advancements with regard to the second, third and fourth limitations. and error prone. The ability to reuse models or model parts would greatly reduce the resources required for model development. However, there currently exists no universally applied standard for developing models or the model semantics. In order objective that a number of systems are attempting [1]. can completely support team efforts in process model development. One of the aims of the recent CAPE-OPEN project signifies an initial effort towards addressing this specific limitation [12], although its overall objectives also deal with the other limitations listed. Global CAPE-OPEN commenced in June 1999. 2.1 Software Engineering Applied to Process Modeling The application of processes and tools utilized in the software engineering profession would address a number of the limitations detailed above. Some works have already taken this approach. Examples include PhD studies involved in the N-dim [1] and ASCEND [17] projects by Allen and Thomas, and a recent dissertation by Thommi Karhela [13] outlining a software architecture for process modeling using XML. Thomas X  X  [17] studies involved the successful integration of ASCEND with N-dim, which supports information management and collaboration. This facilitates possible reuse through revision-management, a significant issue when considering team based model development. Allen X  X  [1] study focused primarily on exploring methods for facilitating reuse, applying the software engineering component based concept of information sharing. Important ideas were discussed, with the project aiming to develop an Open Conceptual Framework to implement: dynamic configuration within set model structures; methods and documentation bound to models; and generalized equation based modeling. reuse of models. An architecture which allows the sharing of models, facilitating model customisation and co-use between different process tools were identified as the key requirements. Secondary to this (from our consideration), was the need for a flexible, fast run-time connection between process simulators and a virtual Distributed Control System (DCS). implemented to facilitate sharing and co-use. In addition to this, the configuration was implemented in XML with component descriptions to allow for easy model customisation and co-use [13]. The secondary requirement outlined was addressed through the implementation of component technology and OLE. models, a number of limitations exist in the approach. The repository, while allowing a centralised storage location of process and proprietary library models, doesn X  X  support the evolution of models developed by modelers. There are no versioning the different states of the process models (i.e. variants). Although some component technology is implemented, no intelligent selection means are offered. Group at Aachen University headed by Professor Wolfgang Marquardt concerning computer-aided modeling and process design [2 ][3]. Their investigations are currently attempting to address the following topics: integrated information models for data and documents; comparisons of data models in chemical engineering [15]; and tool integration and modeling frameworks [2] [3] [11]. Schopfer et al. [15] involving the development of a co-ordination system for process simulators (Cheops) where a centralized model repository (Rome) has an important role [13]. The primary idea is to develop and deploy unit operation models using Rome [11], executing the models based on different modeling schemes utilizing Cheops. The models can be exported from Rome into textual or binary representations of a compliant software component. Rome provides its functionality for other tools via CORBA [11]. This functionality includes manipulation of the neutral model representation or retrieval of information about the model implementation. Rome has also a web user interface known as RomeWWW. These studies have provided significant advantages to process modeling, proving that Software Engineering principles can contribute to the efficiency of process modeling. 2.2 XML in Process Modeling Extensible Mark-up Langauge (XML) has quickly become the standard for the interchange for information. XML instance documents are text that can be read and edited easily on any platform, and thus suits the presentation of structural data. With a XML based data model, different modeling and simulation tools can be integrated, and easily used on the Internet. Process models described in XML would increase the portability of information encapsulated within models. development of an XML based data model CapeML [18]. CapeML is based on CAPE-OPEN work aiming to facilitate standards for Process Modeling. CapeML is outlined in [18]. The second is the Logical data model by Karhela [13] for use in the modeling repository Gallery. The data model for Gallery is specified using XML and referred to as GML. When server clients are communicating with Gallery they are sending and receiving parts of this data model. The current GML is described as a UML class diagram in [13]. XML is central to this openness and is already being applied to Process Modeling. Clearly a set schema or DTD for process models needs to be universally adopted to aid the possibility of standardizing process data models through XML. Regardless outlined here. 2.3 Software Configuration Management Theory Software configuration management provides for complete product life cycle management [20]. There are seven operational aspects involved in SCM [6] [7] [16]: Identification, control, aud it, status accounting, management of the SCM process, software release management and delivery, and team work. As an initial step, our focus is on providing identification and control for process models. Given the lack of any of the above mechanisms currently for process modeling, this is considered a significant step in aiding reuse. techniques and concepts which have been a pplied are often deeply intertwined, with concepts often pertaining to more than on e area. More recently, the approach has been The product space outlines the objects and relationships that are to be managed by the system, at what level the versioning is to be applied, and how the objects and relationships are to be stored [19]. In the application to process modeling, the objects are clearly the models and the level of versioning is dependent on the versioning strategy to be applied by the company or institution. Any other aspects are outside the scope of this paper. version is an object at a particular time during its evolution [6]. As the object changes many versions of it are created. These different versions can be stored for many line isn X  X  successful. Versioning is therefore concerned with managing all these objects to be versioned, version identification and organization strategies and defines operations for retrieving existing versions and constructing new versions. There are and Change-based versioning, which are concerned with the evolution of the objects, and Extensional and Intensional versioning which are concerned with how the versions are reconstructed and stored [6] [16]. Their combination results in vastly different systems with different capabilities. These four concepts are outlined as follows. 2.3.1 State-Based Versioning Version models which focus on the state of versioned items are called state-based . In state-based versioning, versions are described in terms of revisions and variants. The evolution used in the development of the version as outlined below [6] [19]: retained to support maintenance of software already delivered to customers as well as to recover from erroneous updates, etc. 2.3.2 Change-Based Versioning Changes provide an alternative way of characterising versions [1]. In change-based models, a version is described in terms of changes applied to some baseline. A and additional attributes to characterise the reasons and the nature of the change. particular versioned object share some common aspects, and vary with respect to other specific parts. The differences between two versions are called a delta [6] [19]. These differences are stored and are used to either construct new versions (by merging them with a baseline version) or indicate the changes made between versions. 2.3.3 Extensional Versioning Extensional versioning supports retrieval of versions that have been previously versions V = {v 1 , ..., v n } [6]. Here all versions are explicit and have been checked in once before with each version being typically identified by some unique version interacting with the SCM system retrieves some version v i, performs some changes on the retrieved version and submits the changed version as a new version v i + 1 into the object base. To ensure safe retrieval of previously constructed versions, versions can be immutable. In many systems all versions are made immutable when they are checked into the object base. This is generally done through explicit operations which freeze mutable versions. Furthermore, immutability may be imposed selectively i.e. by distinguishing between mutable and immutable attributes. 2.3.4 Intensional Versioning Intensional versioning supports flexible, automatic construction of consistent versions in a large version space [6] [19]. The term  X  X otential versions X  is used when describing intensional versioning, emphasizing that versions may not have been constructed explicitly before when using this technique [20]. rules (which satisfy a set of requirements) from property based descriptions [16]. Therefore, intensional versioning is driven by global version rules which may be either stored in the versioned object base or submitted as part of a query. Figure 1 depicts a UML representation of the framework of a future modeling design support environment. A prototype of such an environment with partial functionality has been implemented and evaluated with the results included in this paper. two existing tools, a model development environment employed in industrial practice and RCS, a basic software versioning tool. The third tool, the Process Models Management System (PMMS) acts as a central access point for all the model developers and any users during the model development and design lifecycle. Tool integration such as this will remain a co nsiderable issue for chemical engineering with each other and those of selected collaborating partners. End users need to customize their design support environments by integrating additional tools and databases provided by other vendors or in-house development groups in order to differentiate their technology from that of their competitors. Additionally, in order to support the whole development process, different packages are often required as no one package (or group of packages) offered by one vendor successfully addresses all aspects of design. different design environments. This is facilitated by using XML based process data models and the openness of their text based structure. Any development environment that outputs an XML instance document can be implemented in the environment. In using XML based models as a tool independent representation, any process model development environment that develops XML based models can be integrated into the framework in a  X  X lug-and-play X  manner. The focus of this paper is the PMMS and its interaction with RCS. Further details regarding model development environments (MDE) and their use are outside the scope of this paper. modeling through all current techniques previously outlined (state-based or change-based, intensional or extensional versioning). The following sections outline the versioning approach of the prototype environment. Intensional versioning has not been implemented here but the framework included aspects allowing the introduction of this technique at a later stage. RCS was integrated with the PMMS over other complicated SCM system would reduce the chances of process modelers successfully versioning system (such as RCS) rather than a fully fledged SCM system as used by necessarily apply. The user has the following scenarios available to them from the framework as diagrammatically represented in Figure 3. GUIs from the prototype Process Model Management System are representative of the use cases outlined. been included. This is further detailed in the next section. The current implementation uses the delta supports change-based strategies and change requests and ultimately will allow for intensional versioning. The framework thus presently supports state-based and change-based versioning with extensional versioning. This results in all models (or delta representations of models) being explicitly enumerated and have been previously constructed. Create New Models involves invoking the chosen model development environment (MDE) to develop a completely new model. The framework allows the user to choose framework. Check-In New Model scenario entails passing the model directly from the MDE to RCS for management and storage. Confirmation that no model like it has been previously checked-in is sought before the system allows the model to be checked-in. model explicitly located and its status in RCS changed. Comparing Models involves the comparison of two models for the identification of changes and differences between the models. The identified differences are stored in a delta file at the developer X  X  discretion. The model is not checked-in in this instance. This is the difference between this scenario and the Check-In Existing Model scenario. If the model (on comparison) is deemed a revision or a variant, this information is added to the model and the model (or delta) is passed to RCS for Check-In. Depending on the users chosen implementation, the Check-In Existing scenario either passes the created delta file or the whole altered file to RCS for management. Fundamental to the versioning system in PMMS is the identification of models as this automatic detection assists the modelers in providing the differences in an external document, saving them the time in manually comparing models. It could also be used to compare library models to identify the model more suited to an application. This detection facility provides several key additional advantages in facilitating reuse: example has been outlined. The example, a continuous stirred tank reactor (CSTR), contains a set of mathematical equations which typically represent various mass and energy balances used to model the system. The CSTR is a standard component achieved when: all parameters and initial values must be specified. Given these numerical values, the application of for example Newton X  X  methods can be used to solve for the steady-state values of C A and T . In simulations any changes that are made to any of the parameter values or set points result in a variant of the model which represents the same system operating at different operating conditions, as the model structure is still the same. If more equations are used, for example, due to linearisation or additional dynamic modeling for mass balances or energy balances, the structure of the model is significantly changed. This therefore is a revision. conditions or the model structure has been changed. If operating conditions (e.g. created using XyDiff [5]. Research is current ly being carried out to intelligently create a semantic delta. scenarios were devised and implemented. These scenarios where a modification, a insertion/deletion, and finally a scenario were no changes where made. All examples used the CapeML example available from [18] as the base (original) model file as outlined below in Figure 4. 5.1 Modification Scenario The first scenario used to test the PMMS automatic versioning identification, involved a modification to the original model file. This modification involved the changing of two parameter values (see lines 5 and 33 of Figure 6). Line 5s the altered file. Line 33s modification was to change the value here from 8.3144 in the original model, to 16.6288. These changes are outlined in Figure 5. produced. From the analysis of the delta file the system produced the following output window with the resulting classification. As can be clearly seen in Figure 7 the system successfully identified the version to be a variant. 5.2 Insert / Delete Scenario The second scenario used to test the PMMS automatic versioning identification equation block from the original model file. This alteration involved the creation of an the original model. The inserted lines can be clearly seen in Figure 6 which indicates the changes made to create the seco nd file used in this instance. output window with the resulting classification. Figure 8 indicates that the system successfully identified the version to be a revision. 5.3 No Changes Scenario The final scenario used to test the PMMS versioning classification involved putting models where then passed through PMMS and a delta file was produced. From the analysis of the delta file the system correctly produced a SAME classification of the significant and will not allow the user to check-in the file to RCS. In this paper, we have described a fram ework for supporting reuse of process models. In the current phase of development the Process Models Management System was created as the central access point for the framework. Additionally the PMMS automatically identifies version types prior to management in RCS. This prototype system was tested using three scenarios which all returned successful results. Research is currently being carried out to intelligently create a semantic delta therefore making the identification technique intelligent. The intention is for the models and allowing template-based re-use of previous models. Future work for the framework aims to continue with seeking SCM and information management techniques that will aid reuse in process modeling, including the application of intensional versioning and component based techniques. 
