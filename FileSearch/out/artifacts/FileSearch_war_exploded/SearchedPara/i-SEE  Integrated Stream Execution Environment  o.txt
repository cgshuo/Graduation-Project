 The primary objective of various da ta stream applications is to monitor the on-going variations of data elements newly generated in data streams, so that appropriate services can be delivered to users timely. Basically, such monitoring activities can be divided into three categories: instant event monitoring , frequent behavior monitoring and analytic OLAP measures monitoring . Several prototype systems for data streams have been introduced but they are designated to support only the operations of one or two categories. However, many real-w orld data stream applications often require mixed operations of the three categories. This demonstration introduces an I ntegrated S tream E xecution E nvironment ( i-SEE ) that can support the mixed execution of the operations of the three categories seamlessly, so that an i-SEE system can provide the multifaceted analytic results of on-line data streams continuously for various emerging applications. H.2.4 [ Database Management ]: Systems  X  Query processing ; H.2.8 [ Database Management ]: Database applications  X  Data mining Performance, Design, Experimentation Data Streams, Data Stream Mi ning, Query Optimization, OLAP. Most of emerging applications such as web click monitoring, network traffic analysis and sens or data monitoring essentially need to deal with infinite data streams in an incessant, immense and volatile manner. To fulfill various types of requirements imposed by these applications, several prototype systems have been introduced [1-3]. Basically, such monitoring activities can be divided into three catede42i-ligories: instant event monitoring , frequent behavior monitoring and analytic OLAP measures monitoring . For the first category, data stream management systems (DSMS) [1] have primarily focused on efficient continuous query ( CQ ) processing over massive data streams. For the second category, data stream mining systems [2, 3] adaptively extract interesting trends or mean ingful patterns embedded in an infinite data stream. For the last category, MAID [3] produces the results of analytic OLAP queries repeatedly to monitor the on-going variations of predefined measures in a multi-dimensional data cube. All of the above systems are designated to support only the operations of one or two categorie s. However, many real-world data stream applications often require mixed operations of the three categories. This demonstration presents an I ntegrated S tream E xecution E nvironment ( i-SEE ) system which can support the mixed operations of the three categories seamlessly over online data streams for a multi-disciplinary analysis. An i-SEE system has the following special features. First, for a primitive operation, several different algor ithms are available and a new algorithm can be easily plugged into i-SEE , which makes i-SEE be an extensible framework. Second, several operations of different categories can be coupled together in an i-SEE system to perform a complex task. For exam ple, the on-going result stream of a continuous query can be transmitted to either an OLAP cube operation or a clustering operation for the identification of meaningful trends and patterns in the result stream. Finally, a number of i-SEE systems execute a complex task in a cooperative way by sending their output da ta streams one another. The overall architecture of an i-SEE system is illustrated in Figure 1. There are two main components: registration component and execution component . The former consists of a data stream descriptor ( DSD ) and a task registrator while the latter consists of a data redirection manager ( DRM ) and a task manager . A set of API functions provided by an i-SEE system is used to communicate with application programs. A new task for source data streams registered in the DSD is defined in the registration component . There are three distinct types of a task, namely CQ task , OLAP task and mining task . For the instant event monitoring categor y, a set of continuous queries that need to be monitored togeth er is defined collectively as a CQ task . A global execution plan for a set of registered queries in a CQ task can be generated by one of two different optimization schemes, na X ve sharing and A-SEGO [4] which can maximize sharing the intermediate results of common sub-expressions in the queries efficiently. For the analytic OLAP category, the on-going variations of measures defined in a multi-dimensional data cube are monitored in an OLAP task . A user can execute OLAP operations like roll-up, drill-down, slicing and dicing interactively to evaluate various aggregation functions. For the frequent behavior monitoring category, a user can define a mining task manually by selecting several operators. The structure of a mining task is a directed graph which is the execution plan of the task. A node of an execution plan represents an operator. The output data stream of an operato r becomes the input data stream of its child operator in a mining task . For this category, i-SEE provides four primitive operators: clustering , frequent itemsets , frequent 1-item sequences and association rules . A clustering operator traces the on-going changes of full dimensional clusters as well as subspace clusters over a high dimensional data stream based on the ST-Tree method [6]. The remaining operators find the on-going changes of frequent itemsets, 1-item sequential patterns and association rules re spectively over a transactional data stream based on the estDec method [5]. In addition, i-SEE provides six auxiliary operators: selection, projection, join , half-join , union and split . These operators are also useful for defining various pre-processing steps for a primitive operator in order to filter out unnecessary data elements or uninteresting attributes. Furtherm ore, they can be employed to examine task-specific conditions on the data elements of a data stream to support constraint-bas ed data mining techniques. A data mining operator provides the following additional options: noise filtering, execution status monitoring and output transforming . First, every incoming data element of an operand data stream is matched with th e current mining result of a data mining operator first to identify the dissimilarity rate between the new data element and the current mining result. When the resulting dissimilarity is greater than or equal to a user defined threshold, the new data element is not inputted to the data mining operator. Second, an application can extract not only the current mining results but also its run-time execution status like memory usage and processing time at any time. Finally, a mining operator can transform every data element of its operand data stream into different output types like a dissimilarity rate , matched item and matched cluster-id for a subsequent mining operator . An i-SEE system is useful for divers e application domains such as personalized recommendation serv ices, intrusion detection systems, traffic monitoring systems and so on. An application that requires the mixed operations of the three categories in an i-SEE system can be easily found in a general ubiquitous computing environment. We will demonstrate how an i-SEE system can accommodate the functional requirements of a network packet monitoring application in an office. A mining task is defined to find the set of frequently co-occurred paths in which most data packets are transmitted. Furthermore, the asso ciation rules of these paths can also be identified. By combini ng the primitive operators, a user can create diverse types of complex analytic views on network packet data streams. For example, in order to extract the usage patterns of each user group, a split operator can be employed to divide the incoming packets into multiple streams each of which is corresponding to each user gr oup. Subsequently, a frequent itemsets operator is performed to each divided stream to extract the normal frequent behavior of each user group. A CQ task is used to monitor the network packets of all workers in the office continuously in order to find out whether any of the workers accesses highly secured internal servers. Furthermore, the output stream of this CQ task is sent to an OLAP task , so that the frequency and data amount of such an access can be monitored with respect to either an individual worker or groups of workers. Finally, the on-going meas ure values of this OLAP task are inputted to a clustering operator to identify groups of similar access patterns. The detailed information can be found at http://database.y onsei.ac.kr/i-see. "This work was supported by th e National Research Foundation of Korea(NRF) grant funded by the Korea government(MEST) (No. 2010-0008007)." [1] B. Gedik, et al., SPADE: The System S Declarative Stream [2] H. Kargupta, et al., VEDAS: A Mobile and Distributed Data [3] Y.D. Cai, et al., MAIDS: Mining Alarming Incidents from [4] H.K. Park, W.S. Lee Multiple continuous queries evaluation [5] J.H. Chang and W.S. Lee, Finding recent frequent itemsets [6] J.W. Lee and W.S. Lee, A Coarse-grain Grid-based 
