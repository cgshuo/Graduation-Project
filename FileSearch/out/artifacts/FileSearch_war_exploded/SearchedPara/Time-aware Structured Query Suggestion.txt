 Most commercial search engines have a query suggestion fea-ture, which is designed to capture various possible search in-tents behind the user X  X  original query. However, even though different search intents behind a given query may have been popular at different time periods in the past, existing query suggestion methods neither utilize nor present such infor-mation. In this study, we propose Time-aware Structured Query Suggestion (TaSQS) which clusters query suggestions along a timeline so that the user can narrow down his search from a temporal point of view. Moreover, when a suggested query is clicked, TaSQS presents web pages from query-URL bipartite graphs after ranking them according to the click counts within a particular time period. Our experiments us-ing data from a commercial search engine log show that the time-aware clustering and the time-aware document ranking features of TaSQS are both effective.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval time-aware information retrieval, query suggestion
Query suggestion is an important feature of web search engines [3, 5, 7, 8]. Together with query autocompletion that presents related queries within the search box in real time [1, 9], a list of query suggestions shown within the search engine result page often helps the user reformulate his query easily and effectively. However, even though dif-ferent search intents behind a given query may have been popular at different time periods in the past, existing query suggestion methods neither utilize nor present such informa-tion. As Li and Croft [6] point out, topically relevant but obsolete documents may not satisfy the user if he is seeking  X 
T his work was done while the author was at Microsoft Re-search Asia.
 Table 1: Example of query suggestions in response to a query  X  X omney 2012 X  recent information. More importantly, even relevant and re-c ent documents may not satisfy the user if he is interested in a specific time period in the past. Some search engines let the user specify a time range together with his search query. However, in order to enjoy such a feature, the user needs to figure out a correct time range, and to explicitly provide it to the search engine.
 In this paper, we introduce Time-aware Structured Query Suggestion (TaSQS), an algorithm for presenting query sug-gestions along a timeline and helping the user access relevant web pages. TaSQS leverages query-URL bipartite graphs to determine time ranges with different durations for dif-ferent query suggestions, and frees the user from the bur-den of entering a specific time constraint with a query. We call this feature time-aware query clustering . Table 1 con-trasts a standard  X  X lat-list X  query suggestions and the query suggestions that TaSQS presents, based on a commercial search engine log from October 1-31, 2012. If the user se-lects  X  X omney losing X  from the flat-list query suggestions, a typical search engine would just return a web search result for this query. In contrast, if the same query is selected on the TaSQS interface, TaSQS interprets this as the user X  X  interest in this query for the specific time period of Octo-ber 1-11, 2012 , and presents corresponding web pages from query-URL bipartite graphs after ranking them according to the click counts within that particular time period. We call this feature time-aware document ranking .

The objective of the present study is to validate the time-aware query clustering and time-aware document ranking features of TaSQS. To this end, we evaluate the retrieval ef-f ectiveness of the ranked web pages provided by TaSQS, un-der the assumption that the user is able to select a query sug-gestion appropriate for his information need on the TaSQS interface like the one shown in Table 1. Our results show that the time-aware query clustering and the time-aware document ranking are both effective.
While flat-list query suggestion is the current de facto standard in commercial web search engines, several researchers have proposed to organize and present query suggestions. For example, Sadikov et al. [8] proposed an algorithm to cluster query suggestions based on clickthrough and session data; Guo et al. [3] proposed a method to provide a label for each query suggestion cluster based on social annota-tion data; Kato et al. [5] proposed a query suggestion al-gorithm that presents labeled query suggestion clusters so that the user can make comparisons across multiple entities (e.g. company names). Clustering queries is probably use-ful for the user to see the relationship across the suggested queries; labeling each cluster is probably useful for the user to see what each cluster represents and how it is related to the original query. However, none of these structured query suggestion methods provide a temporal point of view.
Shokouhi and Radinsky [9] proposed a time-sensitive query autocompletion method based on the idea of Bar-Yossef and Kraus [1], which ranks candidate queries according to fore-casted frequencies rather than past popularity. However, their method is not intended for the problem we are tack-ling, namely, to organize suggested queries along a timeline and to let the user focus on a particular time range without specifying an explicit time constraint.
Time-aware Structured Query Suggestion (TaSQS) is an algorithm for presenting query suggestions along a timeline and helping the user access relevant web pages. It consists of four main steps: generating query suggestions, time-aware query clustering, time-aware query selection and time-aware document ranking. We describe these steps below.
In this step, we can plug in any existing algorithm for gen-erating suggested queries for an input query. In the present study, we use a popular query suggestion algorithm pro-posed by Mei et al [7]. First, we construct a query-URL bipartite graph for each day, where queries and URLs are nodes and the weight of each edge corresponds to the click count w ( q, u, t ), the number of times URL u  X  U is clicked by users with query q  X  Q within a time period t (one day in our case). For every query pair, we compute the hitting time of a random walk, defined as the expected number of steps it takes from a query to another on the bipartite graph, which indicates the  X  X loseness X  between the given query and a query suggestion candidate. We take the top L queries based on hitting time and use them as query suggestions: we let L = 1000 for all of the methods examined in this study.

To obtain the relevance score of a query suggestion, we shift and normalize the hitting time into the [0 , 1] range and then subtract it from 1. The resultant relevance score for the initial query q , a query suggestion q  X  for a time period t is Algorithm 1 T A-Clustering ( M ) 1: C  X  X  X  4: end for 5: while ( |C| &gt; M ) and 8: end while 9: return C denoted by e r ( q , q  X  , t ). Furthermore, to smooth the relevance scores, we use the moving average using  X  preceding days for each t as follows: r ( q, q  X  , t ) = 1  X  this paper, we let  X  = 3 based on a pilot experiment.
To accommodate the users X  diverse needs from a tempo-ral point of view, we perform query clustering so that each cluster represents a group of query suggestions that were popular at a particular time period in the past. To this end, we modify a popular Hierarchical Agglomerative Clustering (HAC) algorithm that iteratively finds a pair of clusters that are the most similar and merges them.

We denote a vector of relevance scores as x t = [ r t 1 , r where m is the number of generated query suggestions and each element is the aforementioned relevance score r t j = r ( q, q j , t ). The input to our clustering algorithm is a set of relevance score vectors R = { x t 1 , x t 2 , . . . , x denotes the number of time periods (days in this study) con-sidered by TaSQS. For example, t 1 , t 2 , . . . , t n means October 1-31 when TaSQS clusters the vectors in October. To incor-porate time-awareness into the similarity calculation of the HAC algorithm, we use the notion of temporal adjacency : for example, a cluster that spans May 10-12 and one that spans May 13-21 are temporally adjacent. Thus, we define the time-aware similarity between two clusters C i and C j as fol-lows: TA-Similarity( C i , C j )= 1 | C if C i is temporally adjacent to C j , TA-Similarity( C i otherwise. Thus, only temporally adjacent clusters can be merged. Algorithm 1 shows our time-aware query clustering algorithm, from which we obtain no more than M clusters. In this study, we let M = 5, as showing more than five clusters on a web search interface may not be realistic.
After clustering, we need to select query suggestions from the clusters for presentation. These presented query sug-gestions are used for accessing the corresponding web pages based on the query-URL bipartite graphs, and the time pe-riods associated with the suggestions are used for ranking these pages. Thus we need to select a set of representa-tive and diverse query suggestions from the clusters to ac-commodate diverse search needs. For this, we rank query suggestions in descending order of the following time-aware score: where q  X  is a query suggestion,  X  C = { x t i  X  I : x t R ( q, q  X  , C ) = 1 | C | the specialized query and target time fields highlighted in gray.  X  &lt; 1 ) that determines the balance between the average relevance score for query suggestion q  X  over cluster C and that for q  X  over the complement of C . Thus, the TA-Score for a given query suggestion and a cluster is high when its average relevance score over that cluster is high while its average relevance score over the complement of that cluster is low. We set  X  to 0 . 4 based on a preliminary experiment. In addition, we take the top N query suggestions according to TA-Score for presentation. In this study, we let N = 15 (See Table 1).
The final step of TaSQS is to present a ranked list of web pages in response to the user X  X  click on a suggested query, by leveraging the query-URL bipartite graphs. As a specific time period is tied to each suggested query in the TaSQS interface, we assume that the user is interested in that suggested query within the context of that particular time period . More specifically, we assume that the user is interested in documents that were frequently clicked within that specific time period.

We have two methods to rank the web pages u available from the query-URL bipartite graphs. The first is to rank them by the overall popularity of the cluster C  X  to which the selected query suggestion q belongs: Recall that w ( q, u, t ) denotes a click count within the time period t . Based on the above method,  X  X onstantly popu-lar X  web pages such as Wikipedia are always ranked high. However, what we really want to accomplish is to favor web pages that were particularly popular within the specific time period. To this end, our second method ranks web pages by relative popularity : where w ( q, u ) =
This section reports on a laboratory experiment for eval-uating the time-aware query clustering and the time-aware document ranking features of TaSQS in terms of the retrieval effectiveness of the ranked lists generated by TaSQS. Click data. We evaluate TaSQS using Microsoft Bing X  X  query log from May 1 to October 31, 2012, where each record consists of a query and a clicked URL. In the preprocessing step, we removed redundant white spaces, punctuations and queries that were longer than 100 characters from the data. URLs more than 300 characters long were also removed. In addition, we filtered out queries and URLs related to adult contents, as well as queries with fewer than five clicks per day. As a result, we obtained 5,348,081 unique queries, 54,445,091 unique URLs, and 75,488,967 query-URL pairs. Moreover, we partitioned the query-URL pairs by day to form query-URL-date triples for each day. The final data set consists of 648,047,630 triples, which has an average of 3,580,374 triples per day.
 For generating query suggestions, we constructed the query-URL bipartite graphs for each day and obtained 183 bipar-tite graphs. Moreover, from each bipartite graph, we ex-tracted a subgraph that consists of queries that contain a term from the initial query. This was used for generating query suggestions for all of the methods examined in this paper.
 Search topics. To evaluate the effect of our proposed time-based ranking method, we constructed 47 search topics which consists of four parts: initial query, specialized query, description, and target time. Table 2 shows a few examples of the search topics used in our experiments. For example, the first entry in the table represents a search scenario where the user is looking for information from around May 4, 2012 on Scarlett Johansson talking about playing Black Widow in the movie  X  X he Avengers X  and starts out with the initial query  X  X vengers. X  What we want to evaluate in this study is the retrieval effectiveness of the ranked list of web pages provided by TaSQS, assuming that the user actually clicks the specialized query in the query suggestion interface.
We constructed the search topics as follows. First, to con-struct realistic search topics that align well with our click data from 2012, we selected queries that resulted in a click on a Wikipedia page whose title contained X 2012. X  For example, the initial query X  X vengers X  X as selected because it had clicks on the Wikipedia page  X  X he Avengers (2012). X  Then, we compared the monthly frequencies of each initial query be-tween May and October 2012 to determine the X  X eak month X  for it. For example, the peak month for  X  X vengers X  X as May. We then manually selected a specialized query (i.e. one that subsumes the initial query) from the  X  X orso X  queries within the peak month, and defined its target time as the day when the specialized query was most frequently used within the peak month. In our example,  X  X carlett johansson avengers X  was selected as the specialized query, and its target time is defined as May 4. Finally, we manually formulated the description fields by examining some web pages that were frequently clicked during the target time.
 Relevance assessments. To conduct retrieval effective-ness evaluation, we hired nineteen assessors with computer science skills as relevance assessors. We pooled top five web pages from all of the methods described in Section 4.2 for each of our search topics, and obtained a total of 716 doc-uments to be judged. Each of the pooled documents were judged by two different assessors on a two-point scale (rele-vant or nonrelevant); the inter-assessor agreement was mod-erate (Cohen X  X  kappa: 0.501). Finally, we consolidated the two sets of assessments to form graded relevance assessments a s follows: 2=highly relevant (judged relevant by both as-sessors); 1=relevant (judged relevant by just one assessor); and 0=nonrelevant (judged nonrelevant by both assessors). Evaluation measures. To evaluate retrieval effectiveness, we use normalized discounted cumulative gain (nDCG) [4], expected reciprocal rank (ERR) [2] and reciprocal rank (RR). nDCG and ERR consider graded relevance while RR does not. Thus RR treats both highly relevant and relevant doc-uments as  X  X ust relevant. X  We discuss statistical significance of results using a two-tailed paired t -test with p &lt; 0 . 05 throughout this paper.
TaSQS first conducts time-aware query clustering, and if a resultant query suggestion is clicked by the user, it ranks the search results based on the popularity or the relative popularity (Eqs. 2 and 3). We denote these two versions as TA-Clustering + POP and TA-Clustering + rPOP , respec-tively.

To evaluate TaSQS, we also prepared several baseline meth-ods. Our first baseline, POP , does not involve query clus-tering, but ranks retrieved documents based on the popu-larity (i.e. click count) statistics from May 1 to October 31. This can be compared with TA-Clustering + POP which uses the popularity information within the time period to which the clicked query belongs . Our second baseline, GOOGLE , also does not involve query clustering, but simply uses the constraint. Finally, our third baseline, EqualSplit + rPOP , divides each month equally instead of applying time-aware clustering. For example, October is divided into 1-6, 7-12, 13-18, 19-24, and 25-31 as five clusters. By comparing this with TA-Clustering + rPOP , we can quantify the benefit of flexibly determining time periods based on time-aware query clustering.

For each method, we assume that the user has clicked the specialized query of each topic, and evaluate the correspond-ing ranked list of web pages. For TA-Clustering + POP , TA-Clustering + nPOP and EqualSplit + nPOP , we assume that the user is able to select the correct  X  X eak month X  (i.e. the month that covers the target time of the topic) and a clus-ter that covers the target time among five clusters using the query suggestion interface: the responsibility of the meth-ods being evaluated is to present query suggestions along the timeline within that month (e.g. October in Table 1) and to present ranked web pages when one of the suggestions in that cluster is clicked.
Table 3 shows the nDCG, ERR and RR performances of the five methods at document cutoffs 1, 3 and 5, with statistical significance test results. It can be observed that TA-Clustering + rPOP significantly outperforms other meth-ods. More specifically, it significantly outperforms POP and GOOGLE in terms of many evaluation measures, which sug-gests that the combination of time-aware query clustering and document ranking based on the relative popularity is effective. Moreover, it significantly outperforms EqualSplit + rPOP in terms of RR at cutoffs 1, 3 and 5, which suggests that our time-aware query clustering approach which deter-mines variable-length time periods is effective. Furthermore, as it significantly outperforms TA-Clustering + POP in terms of nDCG and ERR at cutoffs 3 and 5, it appears that the relative popularity is more effective than the raw popularity: documents clicked frequently within a particular period in time are more useful than those that are constantly popular (See Eqs. 2 and 3).
In this study, we evaluated the retrieval effectiveness of ranked web pages produced by Time-aware Structured Query Suggestion (TaSQS), which first clusters query suggestions from a temporal point of view and then presents web pages from query-URL bipartite graphs after ranking them ac-cording to their popularity within a specific time period. Through retrieval effectiveness evaluation, we showed the effectiveness of time-aware query clustering (i.e. obtaining flexible time periods for different query suggestions) and that of time-aware document ranking (i.e. presenting web pages based on their popularity within a specific time period). In addition, TaSQS outperformed simple baselines including Google search with a time constraint. We plan to evalu-ate TaSQS in the context of real user search tasks in future work.
