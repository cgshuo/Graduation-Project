 1. Introduction ranked objects are returned ( k -NN query), or those within a maximum distance value r ( range query ). meaningful distance range r is not obvious.
 years, such obstacle has been attacked by many proposals, using many different approaches. The earliest and most direct  X 
Approximate methods ( Patella &amp; Ciaccia, 2009 ) that are not derived from exact methods have been also proposed. One
In this work we present the Permutation Prefix Index (PP-Index), an approximate similarity search structure belonging to support the distributed execution of both the index and the search processes in order to further improve efficiency. 1.1. Outline of our work. Section 3 describes the PP-Index. Experiments and results are reported in Section 4 . Section 5 concludes. 2. Related works
The PP-Index belongs to the family of the permutation-based indexes, a recent family of data structures for approximate acteristics of many approximate search methods. 2.1. Ordering permutations between elements according to how they order their distances towards a distinguished set of anchor objects  X  X . d  X  o
Fig. 1 shows the permutation-based partitions of the two-dimensional space generated by a set of randomly picked ref-erence points, using the Euclidean distance as the similarity measure.

Given a query q , all the indexed permutations are sorted by their similarity with P permutations, e.g., the Spearman Footrule Distance ( Diaconis, 1988 ): where P  X  P o x ; r  X  returns the position of the reference object r in the permutation assigned to P
The real distance d between the query and the objects in the data set is then computed by selecting the objects from the data set following the order of similarity of their permutations, until the requested number of objects is retrieved. cability of the method to very large data sets, i.e., when the permutations cannot be all kept in main memory. 2.2. Metric Inverted File
For each object o i 2 D , they compute the permutation P o are used to build a set of inverted lists, one for each reference object. The inverted list for a reference object r the information related to P k i o mation about distant ones. 2.3. Theoretical properties of permutation-based space
Skala (2009) presents a study on the space-partitioning properties of permutation-based indexes. The main hypothesis on which permutation-based indexes are based is that a relatively small number of reference objects can produce a very high number of permutations, following the exponential growth properties of permutations. However, the permutations used in such space.

Skala proves a number of theoretical results that provide bounds on the number of possible permutations with respect to the number of reference objects, the distance measure ( L founded model for permutation-based indexes. 2.4. M-Index
Novak and Batko (2009) propose the M-Index, a similarity search data structure that uses a universal mapping schema to points, and a normalized metric distance function d : U U ! [0,1). The output of the mapping function for an object o is directly related to the permutation describing the pivots sorted by their relative distance with respect to o .
M-Index provides both exact search, that exploits the various metric-based principles of data partitioning, pruning and 2.5. LSH methods
The LSH-Forest is an improvement of the LSH-Index ( Indyk &amp; Motwani, 1998 ). The LSH-Index is based on the notion of locality-sensitive hash function family H .

A family H of functions from a domain O to a range U is called ( r , , p p ; q 2 O : if d ( p , q ) 6 r then P  X  h  X  p  X  X  h  X  q  X  P p 1 if d ( p , q )&gt; r (1 + ) then P  X  h  X  p  X  X  h  X  q  X  6 p for any hashing function h randomly selected from H .

Intuitively, two objects hashed by a LSH function have a higher probability (at least p r , and a lower probability (at most p 2 ) if they are more distant than r (1 + ).

The LSH-Index uses j randomly chosen functions h i 2 H to define a hash function g ( x )=( h distant objects have a probability p 2 to collide for a single h hash tables are built, based on randomly generated g 1 ... g are considered for the computation of the real distance with the query.

Bawa et al. (2005) extend the LSH-Index by proposing the LSH-Forest, in which the hash keys are indexed by a prefix tree table have a prefix match with g x ( q ).
 However, there are relevant differences to be noted.

The LSH-Forest, like the other LSH methods, is based only on probabilistic considerations, while the PP-Index, like the
The hash functions of the LSH methods are solely derived from the similarity measures in use, independently of the way tion about this aspect.
 use a distance function that is a linear combination of other distance functions, function family for non-trivial linear combination of metrics. 3. The PP-Index parison with similar data structures. 3.1. Data structures and basic search function erence objects R , and a permutation prefix length l . The PP-Index represents each indexed object o tation prefix w o i  X  P l o and any other object in O .
 bet is 0 and the last is j R j 1.

Given a k -NN query for an object q 2 O , the basic search function of the PP-Index consist of computing the permutation extremely efficient sequential access to data.

Making an analogy with the inverted list indexing model for text, we can consider each indexed object o prefix queries performed on the lexicon by the PP-Index search function.
 the indexing process is composed by: a Map function that generates the permutation prefix for each object being indexed (the generation of a permutation pre-fix for an object is completely independent from any other object in the collection); m -way merge sorting method ( Knuth, 1998, chap. 5.4 ).
Fig. 2 shows an example list of permutation prefixes generated for a set of objects and the resulting PP-Index data structures.
 The key difference between the PP-Index and previously presented PBI methods is that the PBI methods of Amato and distance function the selection of the best elements among the candidates. 3.2. Improving the search effectiveness optimal levels just by adopting the two following  X  X  X oosting X  X  strategies:
Multiple index : t indexes are built, based on different R plete coverage of the area around queries.
 and fault tolerance.
 the number of indexes involved in the process.

Multiple query : at search time, p additional permutation prefixes from the query permutation prefix w permutation prefix w 0 for the swap of two adjacent/near elements identifies an area V to V fer by the swap of the identifiers 2 and 3, identify two adjacent regions in Fig. 1 . by first selecting for swap those pairs of identifiers that have the smallest distance difference. 4. Experiments The second part reports on various comparison experiments with other methods.
 4.1. The CoPhIR data set
The CoPhIR 3 ( Bolettieri et al., 2009 ) data set has been recently developed within the SAPIR project, Flickr 5 photo sharing website.

The information relative to five MPEG-7 visual descriptors ( MPEG-7, 2002 ) have been extracted from each image, result-images in the CoPhIR data set. 6
We have randomly selected 100 images from the data set as queries, and excluded them from indexing. We have run images from the data set. We have used the remaining six million images, never included in any index, as held-out data for some preliminary experiments.
 the linear combination we have adopted those proposed in Batko, Kohoutkova, and Zezula (2008b) , listed in Table 1 . 4.2. Configurations problems, i.e., j R j and the dataset size.
 The experiments have been run on a desktop machine running Windows XP Professional, equipped with a Intel Pentium Core 2 Quad 2.4 GHz CPU, a single 1 TB Seagate Barracuda 7,200 rpm SATA disk (with 32 MB cache), and 4 GB RAM. The PP-sequential execution of the multiple index/query searches. 4.3. Evaluation measures
We have evaluated the effectiveness of the PP-Index by adopting a ranking -based measure and a distance -based measure, recall and relative distance error , which are defined as ( Patella &amp; Ciaccia, 2009 ): where D q is the list of the elements of D sorted by their distance with respect to q , D the list returned by the algorithm, and L k q  X  i  X  returns the i th element of the list L .
In order to evaluate the efficiency of the PP-Index we have measured: the indexing time, the main memory and disk occu-pation, the search time, the number of data blocks read from disk, and the sequentiality of disk accesses. 4.4. Results size and the data set size.
 between indexing time and data set size. With respect to the indexing times we note that: text search index on the descriptions and the comments associated with the indexed images; formance considering that it is about 900 times faster than the time required to extract the visual descriptor from the images (see Section 4.1 ); in Section 3.1 ; set necessary to build the permutation prefix.
 one of the non-HT descriptors requires about 18 h.

The table also shows the resulting memory occupation of the prefix tree before and after the application of the compres-optimization produce a reduction by orders of magnitude of the main memory space occupation (at least by a factor 50 in data sets.
 tains only a sequential serialization of data blocks. 8 space in groups composed of less than 1000 objects.
 query). For the worst-case, with j R j = 100, we have measured an average 0.239 s search time on the 100M index, with an crease of j R j .
 single-query configuration, for k = 100.

Effectiveness values improve with the increase of j R j for the 10M and 100M data sets, while the 1M data set shows the prefix space and the effectiveness worsen.
 interesting to note the 100M curve is very close to the 10M curve, with an average difference of 3%.
The maximum-efficiency (0.210 s answer time) configuration of PP-Index has obtained a 18.3% recall and 8.1% RDE on the 100M data set, for k = 100. Effectiveness values improve for smaller k values, as it is shown in the Figs. 6 and 7 . values.

Table 3 reports the z 0 values measured when using z values of 100, 1000 and 10,000 on the 1M, 10M and 100M indexes, jects (e.g., retrieving 10,000 data blocks from the data storage involves reading only 3.7 MB from disk).
From the values in Table 3 two trends clearly emerge:
D grows by a factor 100, z 0 increases at worst by a factor 6.6, when z = 1000. space that a larger R set generates.

Fig. 5 shows the recall and RDE values obtained for the above mentioned configurations, limited to the 100M index, for test configurations.
 values. With respect to the multiple index strategy we have measured a great improvement on both measures reaching a by adding a single-index to the original one we have measured a factor two improvement of both measures.
The search cost for the multiple index strategy is exactly proportional to the number of explored indexes. For the eight index configuration we have measured an average 1.72 s search time, for a completely sequential search process. The four index configuration reaches a 52% recall (67% for k = 10) and just a 2.2% RDE with a sub-second answer time. taneously load eight 100M indexes into the memory, thus practically performing search on an 800 million objects index, though with replicated data, on a single computer.

The multiple query strategy also shows relevant improvements, though of minor relevance with respect to the multiple original query permutation prefix, actually resulted in retrieving the same candidates of other queries. the effective queries produce a disk access to sequentially read candidates from data store. j R j = 1000 produces almost exact results, with a recall &gt;97% and a RDE &lt; 0.01%. similar multiple query strategy for the LSH-Index, have measured a percentage of distance computations with respect to data set. 4.5. Comparison experiments
It is a hard task to run comparative experiments on novel and very large data sets, such as CoPhIR, due to many reasons: lack of previous results on the same data set; lack of a publicly available implementation for many of the methods involved in the comparison; difficulty and high cost, both in human and hardware resources, to develop and run a precise implementation of the pro-posed methods, and also to optimize each of them for the new data type; very large data sets but just a proof of concept; moreover, the implementation is usually designed to take in input only a specific data type/format, which makes it dif-ficult to port the application to different data types.

For this reasons, in order to present a broad comparison with related methods, we have adopted a different experimental implementations or results of previous experiments on publicly available data sets. 4.6. LSH-Forest, comparison on the CoPhIR data set
Immorlica, Indyk, and Mirrokni (2004) , we have generated the hashing functions by randomly sampling from a family of sampled values from a Cauchy distribution (which is 1-stable), r = 5 (optimized with experiments on held-out data), and b is randomly sampled with uniform distribution from [0, r ].

With respect to LSH-Forest parameters we set the maximum depth l = 6 (the same value used for the PP-Index), thus each hashing function is composed by six hashing function, g ( which is indexed by the nodes of the prefix tree.

We compared the LSH-Forest and the PP-Index by varying the number of LSH-Trees/PP-Indexes from 1 to 8, setting z = 1000 (and j R j = 100, for the PP-Index).

Figs. 10 and 11 show the comparison of the recall and RDE, averaged on 100 random queries, for various data set sizes, (76.0% for the LSH-Forest).

These values, specially the RDE improvement, indicate how the criterium of closeness to the reference objects adopted by set of the true k most similar objects.

The PP-Index selected on average 1.12% less candidates than the LSH-Forest, however the high variance in this value ( X 6.32) does not allow us to consider this value as statistically relevant. 4.7. M-Chord, comparison on the CoPhIR data set millions images. As the similarity function we suppose they use the same linear combination of visual descriptors of our ilarity search method they use is M-Chord, a P2P data structure for metric-based similarity search. M-Chord uses a one-peers.
 data in memory, and a 32-CPU infrastructure with 32 disks storing the index data, obtaining a 0.45 s answer time for the we chose to compare the methods based on the hardware resources they use.

We have distributed the eight PP-Indexes on 16 CPUs, i.e., eight distinct computers (a total of 32 GB RAM) each one with dual core processors, executing four queries on each CPU (the pair of CPUs on the same computer accessed the same PP-In-recall on the 50M data set. Table 4 summarizes the results of the comparison. 4.8. Metric Inverted File, comparison on the Corel data set
In order to compare the PP-Index with Metric Inverted File we decided to replicate the experiments of Amato and Savino (2008) on the Corel data set, which is publicly available from the UCI Knowledge Discovery in Database Archive.
The data set consists of 50,000 32-dimensions color HSV histograms extracted from the images. The HSV color space is divided into 32 subspaces (using eight ranges of hue and four ranges of saturation). The value in each dimension in the tograms is L 1 .

Replicating Amato and Savino (2008) , we have selected 50 random objects as queries, and indexed the rest of the collec-disk occupation of 13 MB (including HSV histograms) and a memory occupation of 450 kB. objects, from the set of objects retrieved by scanning the inverted lists, when k is very small. mization of access to the data representing the indexed objects. 5. Conclusions
We have presented the PP-Index, an approximate similarity search data structure based on the use of short permutation prefixes.
 both have nice parallelization properties.

We have evaluated the PP-Index on a very large and high-dimensional data set. Results show that it is both efficient and effective in performing similarity search, and it scales well to very large data sets.
We have shown how a limited-resources configuration obtains good effectiveness results in less than a second, and how PP-Index makes possible to distribute the search process in order to further improve its efficiency.
The implementation of the multiple index strategy we have adopted in this work consists of building each index indepen-tation could have one main index with its own data storage, and other t 1 indexes with data storages just containing pointers to the main data storage. The first solution is designed to preserve the maximum effectiveness while the second sparseness of accesses.

The comparison with experimental results published for some related methods, which are among the top-performers on entire collection to produce almost exact results.

We have compared the PP-Index with the LSH-Forest on the entire CoPhIR data set, showing how the locality information flected by the improvement in the RDE values.
 which have shown to scale to very large data set sizes.

The PP-Index has been already used to build a performing similarity search system tering queries and selecting the most representative ones of each cluster.

Among the many other possible directions of investigation we mention the formulation of alternative multiple query gen-eration methods, and extending the experiments to different types of content, e.g., textual data. Acknowledgments I would like to thank Giuseppe Amato, for the useful discussions on the topic, Fabrizio Falchi, for the support on the MPEG-7-related issues, and Fabrizio Sebastiani, for his support to this research activity. References
