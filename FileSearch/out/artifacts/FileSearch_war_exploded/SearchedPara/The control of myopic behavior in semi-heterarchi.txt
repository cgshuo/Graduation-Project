 1. Introduction
In the second part of the last century, due to relative market stability, product life cycles and complexity, hierarchical control architectures were widely accepted and deployed for manufac-turing control, since long-term optimality was possible. These static architectures form a pyramid in which the superior levels make decisions based on their global system view, and opera-tional levels remain attentive to control directions. The top-down command flow assures that lower levels X  actions are lined up with the system X  X  objectives. Nevertheless, the high number of deci-sion loops with associated non-negligible lags and major issues concerning data aggregation and de-aggregation, making hier-archical structures incapable of reacting appropriately and effi-ciently to internal disturbances and continuously changing market rules ( Nagalingam and Lin, 2008 ). As a result, hierarchical structures do not offer the sufficient flexibility, adaptability and robustness needed for coping with current market challenges.
Responding to these constraints, researchers, with the help of new leading-edge-technologies, have proposed heterarchical con-trol architectures ( Dilts et al., 1991 ), in which intelligent entities agree to cooperate without following a specific plan, thus avoid-ing the master/slave relationships that are present in hierarchical architectures. Their cooperation strategies are based on full local autonomy, self-organization, minimum global information, and enhanced communication capabilities. Some of the advantages of heterarchical control are the local fault containment, flexibility and adaptability to changes, as well as reduced complexity due to its enhanced modularity ( Duffie and Prabhu, 1994 ).

Despite the aforementioned advantages, the high levels of reactivity and autonomy pose challenging issues. Since highly reactive systems do not count on future states to evaluate actions in the present, decisional entities do not have a clear vision whether or not the system is heading towards its objectives.
In addition, highly autonomous entities do not include or consider other entities X  performance to adjust their strategies. Therefore, the solutions of the autonomous entities might be good for the local objectives, but at a high price for the overall performance; global optimality is a constraint that is difficult to consider in the decision processes. In other words, decisional entities behave myopically in terms of the long-term situation and the condi-tions/behaviors in their environment.

This myopic behavior is inherited from the entities X  bounded rationality, which is translated into finite computation and com-munication capacities. Increasing the number of intelligent enti-ties and the processing speed does not cross over the limits of uncertainty ( Valckenaers et al., 2008 ). However, up to those limits, it should be possible to adapt the system strategy to cope with dynamic environments, balancing performance and reactiv-ity. The inherited degree of myopia in the decision-making could be regulated to achieve competitive performances compared to those obtained from optimization, at a lesser cost and complexity.
Continuous adaptation of those strategies should lead to less instability and better predictability.

Up to now, myopic behavior has not been formally studied, although it has been identified as a significant barrier for heterarchical control adoption in industrial applications ( Duffie paper is then to introduce formally not only myopic behavior and the dimensions associated to it, but also the mechanisms that allow the adaptability required, taking into account their opera-tional costs (e.g., computational and communication burden). As a starting point, this study focuses on myopic behavior in manu-facturing control and proposes some mechanisms based on holonic manufacturing concepts.

The use of holonic concepts for the proposed framework is justified by the fact that the holonic manufacturing is a paradigm explicitly created for such environments, by mixing informational and physical components. Moreover, such concepts as autonomy, co-operation, recursiveness, and re-configurability have been identified as important features to meet the requirements impose by current market conditions ( Valckenaers et al., 2008 ). The impact of myopic behavior in manufacturing control activities is important due to the capacity constraints associated to the manufacturing systems and the short temporal horizons of those operational activities. This important feature makes it easier to prove the impact of myopic behavior control mechanisms and the cost of their implementation.
 concepts of myopic behavior found in manufacturing, as well as in other disciplines, in order to propose a definition and a typology for myopic behavior. Based on these concepts, Section 3 reviews the myopic behavior mechanisms proposed for heterarchical control architectures, such as multi-agent systems (MAS) and holonic manufacturing systems (HMS). Using the holonic manu-facturing paradigm, Section 4 proposes a holonic framework that integrates mechanisms to control myopic behavior. Section 5 deals with an instance of the allocation problem in flexible manufacturing systems for validation purposes. Section 6 reports the simulation results of three different cases in order to measure the efficiency of the myopia control mechanisms. Section 6 also presents the larger context of this project, trying to implement our framework on a real setting. Our conclusions drawn from these experiments and some prospects for future work are summarized at the end of the paper. 2. Definition of a myopic behavior ing control ( Zambrano Rey et al., 2011 ). Therefore, it is important to start by defining and typifying this behavior it in order to control it. A closer look to other domains (e.g., economics, organizational behavior, finances and marketing) in which this behavior has been widely studied could be helpful in the search of description and characterizing elements. Several factors push decision-makers to act myopically, which has consequences for long-term efficiency of the process. In the general context, myopic behavior appears when decision-makers overemphasize current-term results at the expense of long-term performance. Addition-ally, the local perspective and impact of decisions are over-estimated against its possible consequences for all the other stakeholders involved. Table 1 summarizes various types of myopic behaviors, the causes of this behavior, the characteristics displayed by decision-makers, the possible consequences of myopic decisions and the context.

Concerning manufacturing control, this conduct is an inherent characteristic of highly autonomous entities in heterarchical control systems. Due to design principles, decisional entities in heterarchical control architectures experience a limited visibility of what others do and how the entire system is being oriented towards the global objective ( Leit ~ ao, 2009 ). The emergent beha-vior expected from entity interaction is thus myopic because it can result in local optimality and the potential contradictions between local and global objectives ( Dilts et al., 1991 ). While this myopic behavior might be beneficial in the short term and just for the individual, more often than not, it may be unfavorable to the long-term success and the system as a whole ( Trentesaux, 2009 ).
Two associated dimensions of myopic behavior can be drawn from the conditions presented in Table 1 and the previous examples of myopic behavior: a social and a temporal dimension.
The social dimension of myopic behavior regards the way in which entities seek information and how they form and use possible relationships with other entities. These coalitions should be targeted to better assess their environment and the extent of their decisions. In social systems, an entity must watch social rules and social commitment to look for accepted behaviors.
These rules and commitments are driven by the degree of autonomy that the entities experience. An autonomous entity is capable of planning, controlling and executing its own actions ( Valckenaers et al., 1998 ). To do so, it requires a certain amount of local and global information. For highly heterarchical architec-tures, the amount of global information must be minimized ( Dilts et al., 1991 ), leaving the entities with local information only and the cooperation to build their strategies. The consequence of not having this global view is incoherence between the local and global performance. Thus, it can be concluded that design prin-ciples to improve cooperation and adjust entity autonomy are some of the possible mechanisms to control the social myopia.
The second dimension, temporal myopia, is related to time and the high responsiveness expected from heterarchical control architectures. High reactivity searches for adaptability faced with internal or external disturbances. To achieve that level of respon-siveness, entities become temporally myopic since they ignore the evaluation of the long term in favor of the short term. For loss-averse deciders, the entities in heterarchical control architectures evaluate each situation stepwise, looking for local answers to present issues without forecasting the consequences of those actions.

Analyzing the conditions presented above, we propose the following definition of myopic behavior: myopic behavior is a condition of distributed decision-making in which entities are not capable of balancing their local objectives with the system X  X  global objectives, thus compromising the overall system X  X  perfor-mance. A myopic entity experiences a social myopic behavior and a temporal myopic behavior in terms of, respectively, projeting its decisions towards the rest of the system and the projecting of its decisions in the long-term.

The extended consequences of system X  X  performance degrada-tion over other criteria are the reason why this myopic behavior is a key research issue. Highly reactive (i.e., temporally myopic) systems do not necessarily cope better with continuous changing environment if their internal processes are highly unpredictable; on the contrary, there is considerable chance of the systems X  turning into chaotic behavior ( Benaissa et al., 2008 ). If the entities do not have forecasting abilities or if they neglect future states of the system, decisions might rapidly change and make the control system nervous ( Hadeli et al., 2006 ). This nervousness affects the optimality of planning activities and the accomplishment of other important objectives, such as reductions in energy consumption, scrap and rework, and efficient resource and tool use. In addition, well-integrated systems experience a bullwhip effect, making this unpredictability impact other areas in the production chain (e.g., maintenance planning and scheduling, inventory replenish-ment, customer service, and sales projection).

Myopic behavior has been brought up as a main drawback for heterarchical architectures implementation ( Duffie and Prabhu, 1994 ). In fact, some authors have worked implicitly on this issue by introducing structural or operational mechanisms to fix this myopic behavior, at the cost of downgrading the desired proper-ties of heterarchical systems. The next section presents how these mechanisms intend to control social and temporal myopia and the limitations that motivate this study. 3. Literature review on myopic behavior control mechanisms in manufacturing
The degree of myopic behavior present in heterarchical control architectures depends on their structural and operational design. Structurally, some studies have shown that the inclusion of partial hierarchies into heterarchical systems could benefit from some sort of guidance, making local decisions more coherent with global objectives ( Brennan and Norrie, 2001 ). Operationally, improving cooperation mechanisms and implementing optimiza-tion and simulation functions are some of the proposals found in the literature ( Babiceanu and Chen, 2006 ). 3.1. Myopic behavior control using multi-agent systems
As an alternative to centralized artificial intelligence (AI) approaches, the multi-agent system paradigm appears as an important method for distributed AI. Although it has been difficult to reach a consensus for defining the agent, the following is appropriate for the aims of this paper because it shows the agent X  X  individual and social features. An agent is  X  X  an autonomous component, which represents physical or logical objects in the system, is capable of acting in order to achieve its goals and capable of interacting with other agents when it does not possess knowledge thus one of the powerful agent characteristics; through its control, it is also possible to control the agent X  X  social behavior, and its social and temporal myopia.

There are three possible ways to manage agent autonomy: by determining their goals and tasks, by altering their beliefs, and by influencing their environment ( Van der Vecht et al., 2007 ). The first mechanism stipulates one or more supervisory entities acting as centralized controllers and system coordinators, who manage negotiations between local agents. These architectural types are commonly known as hybrid agent architectures because they share characteristics of heterarchical and hierarchical archi-tectures. In these architectures, all decisions made by local agents are tracked by the supervisor, mediator or coordination agent. These hierarchically-higher agents become the social myopia controllers by forcing ( Wong et al., 2006 ), advising or updating their subordinates X  decisions ( Ouelhadj and Petrovic, 2009 ). Attaining the common goal should be possible if the supervisors have a broader view of all the participating entities and the enough of a vision of the system X  X  objectives ( Heragu et al., 2002 ; Maturana and Norrie, 1996 ). Comparative studies between archi-tectures with and without planning capabilities, which is closely related to temporal myopia ( Cavalieri et al., 2000 ; Brennan, 2000 ), have shown than supervisory entities with certain planning capabilities help the system guarantee a better global perfor-mance even under the presence of uncertain events. When planning is feasible, low-level agents can follow these plans. On the contrary, if perturbations invalidate these plans, real-time control is assured by these low-level agents, solving these unexpected situations locally and autonomously. However, if the problem cannot be solved locally, the supervisor must intervene.
The second mechanism to influence agent actions is by exchanging information, negotiation and cooperation, so one agent can alter the others X  beliefs, thus sharing equal rights.
Holarchies, coalitions, teams, congregations, societies, federations and markets define the protocols and social rules, in which agents can compensate for the others X  myopic vision by passing mes-sages and communicating their states ( Isern et al., 2011 ). The purpose of these organizations is to manage the intra-and inter-agent properties to avoid the loss of global coherence ( Hubner et al., 2007 ). Intra-agent properties are those that define agent responsibilities, permissions and activities. For instance, an agent within a federation may have the facilitator role, and all the other agents within the federation depend on this agent to get informa-tion from the outside. This is a basic example of social myopic control by restricting the agent X  X  interactions and establishing different autonomy levels within a social organization.
Normally, agent cooperation and coordination methods, such as those based on bids, are fully reactive, thus making them temporally myopic methods. However, some extensions can endow the agent with a look-ahead perspective, in which agents can scatter their bidding proposal with a certain temporal projec-tion. For instance, leveled commitment contracts were proposed for increasing the overall systems efficiency in the presence of incomplete information about future events ( Andersson and
Sandholm, 2001 ). Agents may undertake contracts for a number of operations during a time period, and depending on the expected performance, agents can de-commit from these contracts and find better ones, if they are willing to pay a penalty.

The third mechanism is to influence the environment. This is an indirect way to exchange information and handle global information in a local manner. These mechanisms are often bio-inspired ( Leit ~ ao et al., 2012 ). One famous bio-inspired approach models the ant societies, in which the entities communicate through pheromones ( Sallez et al., 2009 ). Holvoet and
Valckenaers (2007) propose a coordination technique for self-organizing systems in which three types of ant-like agents (i.e., feasibility, exploratory and intention agents) help the domain agent to make decisions.
 and temporal myopia. By deciding the action radius for feasibility and exploratory agents, the domain agent controls the amount of information it gathers from the environment. In addition, the intentions laid down in that radius will influence the others X  beliefs, thus reducing the level of social myopia of all decision-makers. Furthermore, by evaluating not only the next step in the action sequence but the entire sequence, the domain agents plan their decision sequence ahead of time, giving them some sort of prediction skills, which they may use to avoid the states that compromise the expected performance. The system behaves cyclically, and then the decision-makers update their decisions according to the system dynamics. Table 2 summarizes the abovementioned mechanisms and introduces some possible lim-itations they might experience. 3.2. Myopic behavior control using holonic systems the early 1990s when the intelligent manufacturing consortium (IMS) put together a program to distributed widely the use of distributed manufacturing systems. The HMS paradigm is based on the concepts from Arthur Koestler X  X  studies about biological and social systems. The main idea behind Koestler X  X  view is that an entity is a part of the whole and simultaneously a whole, and each entity is able to create complex structures with other entities. Holons are autonomous and co-operative entities repre-senting manufacturing components and activities (e.g., products, resources, orders). Holarchies are the societies formed by holons in order to accomplish their individual and collective goals ( Botti and Giret, 2008 ).
 myopia in holonic systems: by adjusting a holon X  X  autonomy (i.e., introducing hierarchy into heterarchy) and by using pheromone-based information propagation mechanisms. Like in multi-agent systems, in holonic architectures, such as PROSA ( Van Brussel et al., 1998 ) and ADACOR ( Leit ~ ao and Restivo, 2006 ), supervisory entities (called staff holons in PROSA) assist local ones with expert knowledge in the form of advice. For instance,
ADACOR X  X  holons have an autonomy factor that adapts the holon X  X  autonomy according to the environment. A low-autonomy factor implies following supervisory advice, and a high-autonomy factor allows self-organization and local problem-solving in case of perturbations. The autonomy factor is calculated based on its current value and the intensity of a pheromone X  X  influence. The pheromone-based disturbance pro-pagation mechanism is a global information distribution method, and thus a mechanism to control social myopia. Of course, its dynamics depends on the learning skills that are implemented.
The higher the autonomy factor, the longer and more complex the adaptation process, and the lower the factor, the more sensitive the system, making the system unstable and not optimal.
Concerning temporal myopia control, supervisory holons or other specialized holons can host simulation functions to help basic holons in their decision-making process. A simulation function, for instance, may help to predict the behavior of the system as a whole, test various scenarios, and select the best strategy to achieve both though decision-making is still distributed, basic holons can access, run and collect their results from the simulation unit. Cardin and Castagna (2009) propose an on-line simulation function held in
PROSA X  X  staff holon to help basic holons make decisions. These on-line simulations are carried out over short horizons to avoid the calculation burden and cop e with the pressure for rapid decisions. The length of the selected time horizon determines the level of temporal myopia. Short horizons make entities more myopic to future events but are done mo re rapidly, thus making quick results possible. On the contrary, longer horizons require much longer processing times, which downgrades the system X  X  reactivity.
Similarly, Pujo et al. (2009) suggest the use of a simulation holon, replacing the staff holon in PROSA. Since PROSIS is an isoarchic architecture, the staff holon is not considered. To deal with temporal myopia in a short horizon, the simulation holon contains the behavioral models of all the holons present in the production system, and this holon updates their states. If a significant change occurs, a new simulation is launched to give an insight into what would likely occur in the system, and to potentially correct the anomalies before they happen. Controlling temporal myopia means controlling to a certain extent the degree of uncertainty in the decision-making process. By adjusting the time horizon, these simulations allow to plan ahead, and thus accommodating the holon X  X  strategy for achieving the global performance. Table 3 presents the previously-mentioned myopia control mechanisms and their possible limitations.

The previously mentioned mechanisms primarily focus on structural properties, such as supervision, direct/indirect informa-tion exchange, or specialized entities with additional functions. Most of them propose structural modifications that tends more towards hierarchies than heterarchy ( Leit ~ ao, 2009 ). Although the basic heterarchical structure is not lost at all, the disadvantages of hierarchical dependencies overshadow the heterarchical princi-ples. Social complexity, which translate to communication bur-dens, complex rule setting, difficult conflict handling and even centralization, are some of the limitations that inspired our new framework. In addition, though myopia is addressed by research-ers in heterarchical control, it is always studied implicitly. Thus, there are no specific studies that focus on this myopia or the mechanisms to control it, using command parameter fine-tuning that fixes the degree of myopia to a desired value, for instance.
It is not advantageous to root out myopic behavior because it is an essential component of hetera rchical architectures and is the origin of desirable features. On the contrary, it is our belief that the main challenge is to control myopic behavior, by its combining specific structural and operational features within the control architecture. Structurally, myopic behavior can be controlled by establishing semi-heterarchical re lationships, stating clearly the extent of decisions at each level an d the exchange of key information among levels. Operationally, controlling myopic behavior means controlling the level of responsiveness and the quality of the solutions proposed by an entity, fin ding an appropri ate compromise between these two criteria. On one hand, to be responsive, the entities must behave selfishly so they can achieve their individual objectives and maximize their individual gains. On the other hand, good quality solutions require evaluating for the long term, reaching for information out of individual bounds and seeking for a coopera-tive strategy that tries to harmonize individual and glo bal objectives. Switching between these two behaviors must rely entirely on the entity X  X  autonomy to avoid rigid hierarchical dependencies.
The theoretical foundations to transfer these require-ments into structural and operational properties exist already in the holonic concept or have been already associated to it (e.g., recursiveness and online simulations); however, they need to be redefined or extended to explicitly control myopic behavior. The following section explains in detail our holonic framework for manufacturing control. 4. Holonic framework for myopic behavior control in manufacturing
Conventional production management and control activities can be classified as strategic, tactical or operational, depending on the long-, medium-or short-term nature of the tasks ( Caramia and Dell X  X lmo, 2006 ). Manufacturing control refers to the man-agement and control decisions at the operational level. Resource allocation, routing evaluation, tool and inventory management, maintenance scheduling, as well as online control and monitoring of shop-floor activities, are the regular tasks needed for manu-facturing control. Although the scope of this paper reaches only the allocation problem, this framework tries to set some generic structural and organizational concepts, which can be replicated with the other manufacturing activities. 4.1. Our holon X  X  generic structure
Christensen was the first researcher to propose a generic model for a holon. This active model has been taken as a reference for all researchers until now. Due to certain limitations and missing functions desired for myopic behavior control, we propose a reformulation of Christensen X  X  holon model ( Christensen, 1994 ).
For instance, the physical processing layer of this model is too restrictive. Nowadays, manufacturing systems may contain smart entities that make local decisions and thus have a certain degree of autonomy. Our model makes a clear division between a high-level control and an operational level control ( Fig. 1 ). The high-level control represents the intelligence in the holon, which means decision-making, the information treatment and well-structured interaction capabilities (e.g., a decision-making based on a market-like approach function come with this layer). On the contrary, although it has a certain degree of intelligence, the operational layer is ruled by the decisions made on the level above (e.g., routing decisions to go from resource A to resource B, with resource B being the destination chosen by the high-level control).
Christensen X  X  model is also limited since it misses an element to manage the recursiveness of holonic systems. The management aggregation/de-aggregation (i.e., recursiveness) of sub-holons does not appear in Christensen X  X  model. Our generic structure makes the aggregation/de-aggregation a part of the operational layer, which handles the sub-holon creation/suppression and the data-transfer. Two additional characteristics are proposed: (1) the division between  X  X  X ecision-making X  X  and  X  X  X ata processing X  X , and (2) the inclusion of specialized interfaces at each level. The first one is inspired by the different natures of both processes. Though the data processing can be required on a high frequency basis, the decision-making processes are event-oriented. The decision-making entities are served by the data-processing modules, while the data processing modules keep the variables and parameters updated, based on those decisions and current system conditions.
The three-layer model relies on specialized interfaces at each level to have a clear understanding of the needed protocols and technological requirements depending on the information type that they transmit. Inter-holon communication is also possible, and it is also handled by the same interfaces.
 described in detail below: 4.2. Holonic organization generic structure. The following typology is inspired by the PROSA reference architecture ( Van Brussel et al., 1998 ). For this frame-work, the manufacturing organization is structured based on the recursiveness of holonic systems. Four generic holons are instan-tiated from our holon structure: order holons (OH), product holons (PH), adjunct product holons (APH) and resource holons (RH). Their Control Execution Modules keep the model informa-tion that defines the functions carried out by each holon type. The operational execution module, in turn, handles the information regarding the evolution of the holon during the solution search or the solution execution. The holon state may be queried from the entities composing this module. Resource holons may also experience a recursive division from plant holons or cell holons, for example, until the last atomic unit (e.g., resources, tools). This paper focuses only on the recursive division of product-related holons, but the myopic behavior certainly reaches all the entities in the system. The resulting holonic organization is shown in Fig. 2 .

The generic holon structure presented in Section 4.1 is instan-tiated to create generic order holons, product holons, adjunct product holons and resource holons. Each type of holon contains the basic information in terms of the extent of its functions, as follows:
The Order Holon ( OH ) represent the client orders, and they are instantiated every time a new order arrives. Their control execu-tion modules contain the information concerning supported product types. Their strategy is to create as many product holons as the jobs in the order, and assign them a product type. The order holon triggers the solution search. Working as a dispatcher, it determines when the solution can pass to the operational layer of product holons to be executed, based on the order X  X  performance.
It also monitors the order X  X  performance and re-launches the solution search to react to internal/external perturbations. More details about the order holon are presented in Table 4 .
Product Holons ( PH ) are the order holon X  X  sub-holons. Each product holon is assigned a particular objective and a specific task sequence according to its type, which it stores in its control execution module. Based on this information, the control decision entity implements a strategy to accomplish the individual objec-tive, while assessing the overall order X  X  performance (i.e., social myopia control mechanism). In the operational layer, each pro-duct holon has a controller for its physical part, as well as the required functions to create and manage other sub-holons. The state of the product holon can also be found in the operational execution module at any time t during the solution search or the execution cycles, as explained in Section 4.4 . The product holon X  X  physical part is composed of the actual product and a resource holon (i.e., the shuttle) for mobility. More details about the product holon are presented in Table 4 .

Adjunct Product Holons ( APH ) are the task-oriented holons, which represent the product holons against the resource holons. They have two tasks: (1) work distributively with peer APHs to find appropriate allocation sequences and (2) react to internal events by triggering recalculations (i.e., direct resource state monitoring). The FMS routing flexibility imposes a combinatorial problem that we try to solve using the APHs. APHs use intentions to test the possible machine routes and then, based on the cost of each possible route, the intentions become reservations, as explained in Section 4.4 . APHs work cooperatively to test various propositions and find the one that suits the objectives. Since APHs are assigned to resources, they can monitor the state of their reservations and trigger recalculations in case of unexpected changes. In this case, APHs will try to solve the problem before the actual product is affected by these changes. These holons do not need any operational or physical layers because they hold just scheduling process information. More details about the APHs are presented in Table 4 .

Resource Holons are service providers for product holons. In their control layer, they host their own objectives and the necessary strategies to accomplish them (e.g., work balance, adaptive capacity, tool management). Their control execution modules host the information related to the supported tasks, temporal intentions and reservations posted by APHs. The opera-tional layer is composed of both physical and informational control elements for executing their services (i.e., resource con-trollers). At the physical level, sensors and actuators follow the commands received from the operational layer to perform a manufacturing process. Resource holons can also experience recursive divisions, from FMS holons to tool holons, in order to deal with global and local performance criteria. More details about the resource holons are presented in Table 4 .

In spite of the hierarchical recursive division, the underlying decision-making processes remain heterarchical within each level, resulting in a semi-heterarchical structure ( Trentesaux, 2009 ). The order holon has a global vision; it is used to regulate the execution of solutions but not the search process. Therefore, the decisions are not passed from level to level, just the necessary performance indicators and constraints. APHs work cooperatively to search for a solution, using local information and the necessary inputs from the product holon. The vertical information exchange assures the coordination and the coherence between the local behavior and the global objectives.

The holon structure and the resulting holonic organization allow us to propose two mechanisms to control myopic behavior.
The first one concerns the recursive division and its temporal meaning. The second one concerns the solution search strategy and its adaptability based on the local and global performance.
Our hypothesis is that, by adjusting these mechanisms, it is possible to control temporal and social myopia up to some extent. 4.3. Temporal and social myopia control strategies
Recursive division on the order level, passing by the product level to the task level, implies the assimilation of different time horizons. The time horizon setting at each level, t level control parameter for temporal myopia. At the order level, the allocation process can contain information ranging from current orders to future orders, depending on how they are planned and/ or forecast. Reactive scheduling strategies are the most tempo-rally myopic strategies, since they just deal with the orders currently available ( t order  X  currentOrder). If the extent of the scheduling process broadens further into the future, it is possible to assess the present requirements with regard to future needs, making the system less temporally myopic. In the case of unexpected events, such as rush orders, 2 t order can be adapted, or not adapted, to accommodate the new requirements, depend-ing on the desired performance. Fig. 3 depicts the t order the order level based on the due-date of the order.

At the product level, the order objective becomes the max-imum time horizon for all products belonging to that specific order. Again, the reactive strategies could consider the scheduling process by product, which does not guarantee the overall effi-ciency of the order. The length of the time horizon, set at the order level t order , implies the participation of more or less product holons into the scheduling process (see Fig. 3 product level). The time horizon is set by the product level controls. The time horizon set by the product level controls the last recursive division and determines how the scheduling sequence can be constructed.
From one task at a time to the consideration of the whole sequence, t task defines the task horizon by limiting the number of APHs to be created (see Fig. 3 task level). The scheduling process is executed on a rolling horizon at each recursive level.
Longer horizons could bring better overall performance but require longer computing times. Shorter horizons, on the con-trary, give results much more quickly. In cases of perturbations, shorter computing times are required to obtain a response to the perturbation. The resulting schedules are thus sensitive to the selection of these time horizons, making them a control para-meter that could be set up statically or dynamically, according to current system conditions.
 ical control architectures experience some social myopia due to the lack of supervision and the absence of global information.
Traditional negotiation mechanisms to correct this social myopia may deadlock the system, where only predefined conditions or the action of a supervisor can solve the conflicts. Moreover, the communication burden associated to those approaches is a significant challenge in large-scale systems. To avoid any direct interventions from other entities and to limit as much as possible the amount of exchanged information, our social myopia control mechanism is integrated into the holon solution search strategy and requires low complexity message interaction.
  X  X  X ompetition approach paradigm X  X  for a cooperative search ( Denzinger, 2006 ). Its objective is to find good solutions for the global problem, which are also good for the holons X  individual objectives. Individual holons vary their solution search strategies, ranging from highly cooperative to competitive. The holons are not required to know other holons X  individual objectives; just a performance indicator gives them a lead on their efficiency to reach their goals. It is completely up to each holon to fine-tune its strategy, from selfish, or socially myopic, behavior to a completely altruist behavior that is good for the overall system. grated into the holon X  X  solution search process. A low social factor means a myopic holon that is searching for its own benefit due to a poor local performance. On the other hand, a high social factor indicates a cooperative behavior is needed to attain better global results. The social factor also serves to rank APH X  X  intentions, making it possible to resolve local conflict. In cases where multi-ple APHs share the same social factor and have overlapping proposals, the resource holon will assign the priority to the first one that requested the service.

To represent this social factor, a cosine function (for the i th product at the k th iteration, as in Eq. (1) ) was chosen because of its vertical symmetry and its continuously differentiable nature, allowing a smoother control. Fig. 4 shows the behavior of the social factor for three cases. The individual performance (IP) is fixed to three random values: 0.24, 0.48 and 0.82. These three values place the individual performance into three possible states: good, average and poor, respectively. In Fig. 4 a, a good individual performance means that the product is close to its objective. If the peer product performance (OP) is worse than the IP (values after l touches zero), the product must increase its social factor to be more cooperative. The product could even reach for an altruist behavior, with a high social factor. In
Fig. 4 b, the product has an average performance. If its peers are doing worse (again, right side of the curve), the product should increase its cooperation, but not as high as in the previous case due to its current situation. Finally, in Fig. 4 c, the local individual performance is very poor, so the product is obliged to assume a competitive behavior in order to look for a better individual performance.

In all cases, the social factor is bounded by the max social factor. This limit determines the behavior that the product may have, depending on its own current performance. The poorer product performance, the lower the max social factor, restricting the product to a competitive behavior. Out of the three regions, the altruist region is risky because it means that the individual loses its own objectives completely, possibly driving its solution search to chaotic behavior. To avoid chaotic behavior, a coopera-tive threshold is introduced in Section 5.1 . l  X  k  X  X 
In order to use these myopic control mechanisms for manufactur-ing control, it is required that the holons undergo a solution evaluation phase before a particular solution is executed. The next section describes how this dynamic behavior is implemented by setting up a solution search/execution structure, supported by our holonic organization. 4.4. Dynamic behavior
As mentioned in the introducti on of this section, the specific problem studied is this paper conce rns the allocation process, which consists of assigning all the operations in the products X  task sequences to the most appropriate resources, considering temporal and capacity limitations. The dynamic behavior assumes that the allocation process is carried out in two cycles: a solution search phase and an execution phase. The solution search phase uses a shop-floor simu-lator to test the possible solut ions before they are executed ( Fig. 5 ). Although the results from the solution search phase are required for theexecutionphase,thesolutionsearchcancontinuetoruninorder to adapt the system to current cond itions. The execution modules in the holon X  X  structure are the ones res ponsible for updating the control layer and the operational layer, so th eir respective control entities can adapt the holon behavior to the current conditions.

The dynamic interactions between the order holon and the product holons can be described using the UML sequence diagram ( Fig. 6 ). First, the control layer of the order holon (OrderHCL) asks its operational layer (OrderHOL) to create as many product holons as the product time horizon requires (Order Spec). The operational layer sets the individual objectives (IO) and a ssigns task sequences according to the product type. The control layers of the product holons (ProductCL) propose solutions and give their in dividual performance (IP) back to the order holon. In exchange, the order holon keeps each product holon updated on the situation of their peer product holons (PeerPer-form). This basic data, together with the individual performance, make it possible for the product holon to calculate its social factor (SF_calc) to adjust its strategy, as s hown in the precedent sub-section.
Once the order holon determines that the solutions satisfy the user X  X  predefined specifications, the product holons can pass the allocation sequences and final reservations to their operational layers ( Fig. 7 ). The operational layer of product holons and resource holons will transform these commands into manufacturing opera-tions through their physical components.
 again based on recursive divisions, depicted in the UML sequence diagram in Fig. 8 . Each product holon (ProductHOL) creates as many APHs as the task time horizon configuration requires. Each product holon passes the appropriate parameters for the APH to work cooperatively and to find proposals. The APHs solution search has a three-phase process:
Phase 2  X  sequence selection: APHs have to decide among the multiple allocation options, choosing the most convenient to the product X  X  objective. The selection criteria are determined depending on the product X  X  objective.

Phase 3  X  reservations: once an allocation sequence has been chosen, the concerned APHs change their intentions into reservations. The final cost to the allocation sequence is returned to the product, and the APHs wait for new para-meters for the next iterations.

The product holons receive the final cost of the reserved allocation sequence from the APH. The control layer of the product holon adjusts the product X  X  strategy for the following iterations, depending on the individual performance and its peers X  performance. Iterations are finished when the order holons decide the global solutions are good to be executed. If the conditions affect the reserved allocation sequence, the APHs pass into monitoring state in order to trigger recalculations. 4.5. Our framework X  X  characteristics
Our framework X  X  objective is to give specific tools to control myopic behavior under a holonic architecture. In general, it takes advantage of the holons X  recursive property to set up a social organization for problem division. Table 5 positions our Execution Cycle Enter at resource
Task provided framework against some of the limitations found in other holonic proposals.

As a conclusion, the t level and the social factor, respectively, are the two control parameters to set up the desired level of temporal and social myopia. Both allow the configuration of possible feedback control loops to adjust holon behavior. The social factor is calculated dynamically, but the t level control and social factor thresholds control are manually set up to note their impact on solution quality. This is a 2-dimension control framework, which allows us to conduct further studies based on control theory. 5. Application of our framework to the allocation problem in FMS
To validate our framework, an instance of the allocation problem for a flexible manufacturing system (FMS) in a Just-in-
Time (JIT) environment was chosen. This section first presents the details of our framework for this specific problem and then described the simulation environment. 5.1. The instance of the allocation problem
The reason behind the choice of a JIT environment is that it suits the social factor strategy perfectly. In addition, despite its importance in real industrial context, it is less studied in the scheduling/allocation literature than the traditional push produc-tion mode, trying to compact production schedules as much as possible. Furthermore, to validate the impact of our myopic control mechanisms, the JIT approaches offer a better and an easier way to establish comparisons than other policies. the process. Big a speed up the process, but they introduce large errors and oscillations. rt  X  k  X  X  rt i  X  k 1  X  X  a x i  X  k  X  for the ith product at the kth iteration
To accommodate the social myopia control mechanisms, the social factor l i ( k ) is immersed into the error calculation, as expressed in Eq. (5) . For this calculation, each product holon requests the peer product performance (OP) to the operational layer of the associate order holon (Eq. (6) ). x  X  k  X  X  X  1 l i  X  k  X  X  IP i  X  l i  X  k  X  OP i  X  5  X 
OP
Under the JIT strategy, the social factor cannot be greater than a threshold; otherwise, the entity will lose track of its own objec-tives. A cooperation threshold ( ct ) needs to be predefined to prevent the product having an altruist behavior, as expressed in
Eq. (7) : l  X  k  X  X  Phase 2 : Create as many APH as the task time horizon requires.
Pass the current release time and the social factor to the APHs so they work cooperatively to find an allocation sequence and its completion time.

These two phases are repeated iteratively until the order holons finds that the MSD has reached a stable region, and the solution is executed in the operational layers.

APHs drive their search strategy according to the product X  X  release time and the minimum completion time. The three-phase strategy works as follows:
Intention phase: APHs send intentions to the resource intentions box and use them to estimate the sequence completion time (eCT) and the sequence workload (eWorkload) for the required time slots. The estimated sequence completion time is the completion time of the last task in the sequence. The sequence workload is calculated as follows: for the j th sequence found for the i th product, Int j k represents the number of intentions with a lower social factor for the time slot of the k th task. The sequence workload SW j is: SW j  X  where m is the number of tasks in the sequence.

Selection phase : for the k th iteration, the best sequence SS ( k ) for product PH i is selected (Eq. (9) ), which tries to balance the estimated sequence cost (Eq. (10) ) and the estimated workload (Eq. (11) ). This last parameter estimates the likelihood of interactions and therefore the possible changes when the APHs go back to convert the intentions into the reservations. The weighted factor b allows us to determine the influence of each cost on the evolution of the solution search. The influence of this parameter on the efficiency of the allocation process will be the subject of future studies.

SS  X  k  X  X  min eRD  X   X  DD CT j  X  S m eRW  X 
Reservation phase: the APHs transform intentions into reserva-tions. If this is not possible, they react instantly and accommodate the related task into the best possible resource. The aim is to find a quick solution with the least impact on the estimated completion time. 5.2. The simulation environment
Given the strong similarities between the multi-agent systems (MAS) and the holonic manufacturing systems paradigms ( Giret and Botti, 2009 ), it appears to be advantageous to use MAS technologies to implement the simulation environment. The control layer and the associated operational layers of the order, product and resource holons are configured as agents whose dependencies are determined by the flexible manufacturing system configuration. All holon types use messages to exchange the required information for their decision-making processes.
The JADE 3 framework was chosen due to its functions of the coordination of multiple FIPA-compliant agents and the use of the standard: Foundation for Intelligent Physical Agent (FIPA) Agent Communication Language (ACL). The UML diagram shown in Fig. 9 illustrates the agent instances to represent the required modules of each one of the holons. 6. Experimental cases, results and analysis 6.1. The flexible manufacturing system and the products
The simulated environment and the entities composing it are referenced by the flexible manufacturing system of the AIP PRIMECA Center at Valenciennes University. This manufacturing cell ( Fig. 10 ) is composed of seven resources: a loading/unloading unit ( R 1 ), which is a Wago-driven lifter; three assembly work-stations ( R 2 , R 3 , R 4 ) supported by Kuka Robots; a quality inspec-tion ( R 5 ); and two other non-conditioned stations ( R 6 flexibility is obtained by having each workstation support redun-dantly different assembly operations (dotted squares around the workstations in Fig. 10 ). Manufacturing resources are linked by a flexible conveyor system and auto-propelled shuttles carry the physical product. The conveyor is composed of a main loop, several derivations to reach the resources, and four transversal sections composing multiple inner loops to allow routing flex-ibility. Wago s controllers (model 750 X 841) are used to drive the swivels to control the shuttle X  X  motion from one loop to another. Throughout the conveyor, decisional nodes (@ in Fig. 10 ) have been set up to let the shuttle communicate with the controllers and request to pass from one section to another. In those decisional nodes, RFID technology is used for identification and localization purposes.

Four different letter-shaped products (B, E, L and T) are assembled in the cell. These products are the combination of five basic components (Axis, I, L, r and screw) assembled on a steel plate ( Fig. 11 ). Each product has a different fabrication sequence, combining all or some of the basic components (see the table in Fig. 11 ). These fabrication sequences impose precedence con-straints to the allocation problem. The interested readers can consult Sallez et al. (2010) for further information about the cell. 6.2. Quadratic linear program (QLP)
With the objective of comparing our results with a mathema-tical formulation, a quadratic linear program was configured using the Concert Technology of IBM Cplex 12.2. 4 The allocation problem under the FMS configuration is identified as the flexible job-shop problem (FJSP). This problem is known to be NP-hard in the sense that no solutions in polynomial time can be found ( Conway et al., 2003 ). In a previous study ( Zambrano Rey et al., 2012 ), this same problem is treated but with the objective of minimizing the total completion time (i.e., makespan). In this formulation, the problem was adapted to the objective function of
JIT manufacturing. The model X  X  parameters, indexes, variables and constraints are presented below.
 J
A {1,2, y n }: for jobs; r A R : for resources; and I A {1,2, for operations
Notations for variables t ij Ompletion time of operation O ij ; where i A I , t ij A ijr A binary variable set to 1 if O ij is performed on b ijkl A binary variable set to 1 if O ij is performed before tr ijr 1 r 2 A binary variable set to 1 if job j is transported to 6.2.1. The objective function
The objective of this QLP is to minimize the MSD 0 , where the completion time of a job j , denoted as CT j , is the completion time of its last operation t 9 I MSD 0  X 
Minimizing MSD 0 is equivalent to minimizing MSD of Eq. (2) since the squared function is strictly monotone. 6.2.2. The constraints Disjunctive constraints:
A resource can process one operation at time, and an operation is performed by only one resource. Resources have unlimited queuing capacity. t  X  p kl m klr  X  BM b ijkl r t kl  X  BM 8 i , k A I , 8 j , l A P , 8 r where BM is a large number. b  X  b klij r 1 8 i A I j , k A I l 8 j , l A P ,  X  14  X 
X ijr  X  1 8 i A I j 8 j A P ,  X  15  X  Precedence constraints:
Guarantee the task sequence of a product. If the two opera-tions are not performed on the same resource, the completion time of the next operation considers the completion time of the previous one and the transportation time. t
X Allocation and transportation relationship:
If successive operations of a product are performed on differ-ent resources, there is a transport operation between those two resources. Transportation delays are set to zero, and the trans-portation system has unlimited capacity. where e is a small number.

The remaining constraints of the QLP guarantee the type of each variable. t
Z p ij 8 i A I j , j A P  X  20  X  b f 0 , 1 g8 i A I j , j A P , 8 k A I l , l A P  X  21  X  tr ijrr 0 A f 0 , 1 g8 i A I j , j A P , 8 r , r 0 A R ij  X  22  X  ijr A f 0 , 1 g8 i A I j , j A J , 8 r A R ij  X  23  X  6.3. Experimental cases
Three experimental cases try to prove the social and temporal myopia control mechanisms. These experiments do not consider the temporal myopia at the order level since this topic is much more complex and requires a deeper study. A future study will address this issue.

The general assumptions for these three experimental cases are listed below:
Since the trajectory problem is not considered for these experimental cases, traveling times between resources are considered constant. Only the trajectories with the best performance are considered statically.

Each experiment consists of the predefined production orders with 4, 5, 6, 7, 8 and 12 mixed-type products.

The order is available at time t  X  0 s. The due-dates were selected based on our previous experiments. The selected due-dates are not feasible, but they result in more interactions among products, making decision-making more critical. Due-dates are approximately 85% the cmax found in Zambrano Rey et al. (2012) .

The a factor for the release-time calculation is set to 0.1 for all products to avoid large errors in calculating the completion time (Eq. (4) ).
 The b factor is set up to 0.5 (Eq. (9) ).

Manufacturing cycles range from 10 to 20 s, depending on the task.
 Case 1. was conducted under the most myopic conditions and a fully reactive behavior ( t order  X  currentOrder). The order holon created a number of product holons according to the number of products in the production order ( t product  X  allProducts). The products did not have any information about other products so they were socially myopic. In addition, the task time horizon was set to one task at time ( t task  X  oneTask), so products set reserva-tions right after they found an available resource and before passing to the next task. The order holon published the overall performance once all products had finished their reservations. This experiment considers that the results were obtained after one iteration, making the architecture the most reactive one. Case 2. had the same level of social myopia as Case 1 , but a lower level of temporal myopia. Products did not count on APH assistance, so they had the same behavior as in Case 1 in terms of the allocation process. The difference was, for this case, that products use the simulations to test more than one allocation sequence, meaning more than one iteration. The products used the release time method to find the time to start the task reservations. Once an iteration was finished, the products calcu-lated the new release times based on the previous completion times and again started a new reservation process. The order holon stopped the iterations once the MSD was stabilized. The products were less temporally myopic, but they remained socially myopic.
 Case 3. was an extension of Case 2 , due to the integration of APHs and the social factor. AHPs worked together to find the allocation sequence by using intentions and reservations, ( t task  X  allTasks). The social factor ranked the APH proposit ions according to their strategy.
Again, the order holon stopped the iterations once the MSD was stabilized. The products had the sa me degree of temporal myopia, but were less socially myop ic than the products in Case 2 .
Table 6 shows the parameter configuration for each experi-ment, and Table 7 presents the simulation results and the results obtained from the quadratic program.

These three cases show that the myopic control mechanisms improved the objective function. For instance, in Fig. 12 c, the last operations of each product show a better distribution around the objective than those in Fig. 12 a and b, meaning that a consensus was achieved. This consensus tries to balance the efficiency of each product, avoiding the dispersion seen in Cases 1 and 2 .In
Fig. 12 c, the last product (i.e., b-product) ends up with a social factor of 0.56, while the others are around the cooperative threshold, established at 0.8. Although the last product X  X  social factor makes it more competitive, it does not mean that it has a better local performance, because the release time also deter-mines its entrance in the system. In Case 3 , the release-time method and the social factor influence the selection of the allocation sequence.

The QLP method must to be stopped after one hour of processing because it was taking too much time. Therefore, the solutions obtained are considered as heuristics since the optimal values were never reached. For the experiments with 8 and 12 jobs, the QLP is unable to find a solution in one hour. In these cases, the transporta-tion constraints had to be relaxed and the obtained values are considered as lower bounds. Taking these values as references, we can conclude that our approach give s interesting results in a reason-able amount of time, which also makes it suitable as a reactive approach. 6.4. Future technical implementation
The holonic structure and the holonic organization proposed are part of a larger project that tries to control the AIP PRIMECA
Cell. A three-level system composed of a virtual layer, a controller layer and a physical layer ( Fig. 13 ) will soon be implemented, which allows the real-time control of the cell using our approach.
This implementation will be used to validate our models and improve our contribution with real experiments. The virtual layer will support the simulation environment already described. Java-supported modules will allow the implementation of commu-nication protocols that will be used to integrate the holons X  control and operational layers. Since the controllers communica-tion protocol support Modbus TCP, the Jamod 5 class package will be used. Even while executing the allocation sequences by the layer beneath, the agents residing in this layer can run recalcula-tions in case of internal or external events. The agents have updated images of the manufacturing controller variables. possible to control the physical layer. Programmable logic con-trollers (PLC) (i.e., Wago controllers) and robot controllers will transform a sequence of decisions from the upper layer into manufacturing operations, such as transportation, loading, unloading, assembly. In addition, identification and industrial networks will support the information exchange in the controller layer. An Ethernet network will link all the elements in this layer, and a wireless network will allow the information exchange between mobile and static element (e.g., the controller module of the product holon). The physical layer will remain, as explained in Section 6.1 . Most of the physical interactions have been already tested and presented in previous studies of our team, which allow us to be confident in the technological feasibility of our approach. Conclusions and future work control. We proposed a generic definition for myopic behavior, and we identified and defined two dimensions: the temporal and the social dmension. Based on these dimensions, we propose a holonic framework with myopic behavior control mechanisms.
The main contribution of our proposal is the structural and operational characteristics that together allow the control of myopic behavior. Structurally speaking, the holon is divided into three layers to clearly define the high-level control decisions from the low-level ones. If used, they are executed by the physical component. Furthermore, in the two upper layers, the informa-tion treatment and the decision-making have also been separated depending on the difference in their behavior. Multiple agents and other functions (e.g., communication protocols and informa-tion storage units) compose our three-layer holon.

The operational characteristics of our approach focus on the temporal horizon and the social factor. Temporal myopia control is achieved by setting up a temporal horizon, t level , associated to the recursive division of the order holon. Setting longer horizons at each recursive level increases the computational cost but gives better results. In turn, the social factor controls social myopia. This factor helps product holons to adapt their behavior, ranging from cooperative to competitive, in terms of the overall efficiency. The main advantage of this social factor is that it is calculated locally and requires just the individual performance of the peer products in the order. In the resulting semi-heterarchical structure, the decisions are made at each recursive level, and constraints and information is exchanged vertically through the recursive levels.
Future research will consider various key points to improve our approach. First, the time horizon must be adjusted dynami-cally, depending on the system X  X  conditions and demand. Accord-ing to the type of the order, product or task, the cooperation thresholds must also be restricted to a specific region (i.e., cooperative, competitive or both). The intention/reservation/ selection cycles must also be revised to improve their efficiency.
Finally, the QLP will be revised, and some relaxations will be considered in order to have better lower bounds to compare with our approach.
 Acknowledgments
The corresponding author was supported financially by the scholarship program,  X  X  Francisco Jose  X  de Caldas  X  Generacio  X  n del
Bicentenario  X  X  of the Administrative Department of Science, Tech-nology and Innovation  X  COLCIENCIAS and Javeriana University (Bogota  X  , Colombia), where he is currently an assistant professor. References
