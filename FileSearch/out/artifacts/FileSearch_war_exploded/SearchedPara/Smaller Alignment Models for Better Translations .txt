 Automatic word alignment is a vital component of nearly all current statistical translation pipelines. Al-though state-of-the-art translation models use rules that operate on units bigger than words (like phrases or tree fragments), they nearly always use word alignments to drive extraction of those translation rules. The dominant approach to word alignment has been the IBM models (Brown et al., 1993) together with the HMM model (Vogel et al., 1996). These models are unsupervised, making them applicable to any language pair for which parallel text is avail-able. Moreover, they are widely disseminated in the open-source GIZA ++ toolkit (Och and Ney, 2004). These properties make them the default choice for most statistical MT systems.

In the decades since their invention, many mod-els have surpassed them in accuracy, but none has supplanted them in practice. Some of these models are partially supervised, combining unlabeled paral-lel text with manually-aligned parallel text (Moore, 2005; Taskar et al., 2005; Riesa and Marcu, 2010). Although manually-aligned data is very valuable, it is only available for a small number of language pairs. Other models are unsupervised like the IBM models (Liang et al., 2006; Grac  X a et al., 2010; Dyer et al., 2011), but have not been as widely adopted as GIZA ++ has.

In this paper, we propose a simple extension to the IBM / HMM models that is unsupervised like the IBM models, is as scalable as GIZA ++ because it is implemented on top of GIZA ++ , and provides sig-nificant improvements in both alignment and trans-lation quality. It extends the IBM / HMM models by incorporating an ` 0 prior, inspired by the princi-ple of minimum description length (Barron et al., 1998), to encourage sparsity in the word-to-word translation model (Section 2.2). This extension fol-lows our previous work on unsupervised part-of-speech tagging (Vaswani et al., 2010), but enables it to scale to the large datasets typical in word alignment, using an e ffi cient training method based on projected gradient descent (Section 2.3). Ex-periments on Czech-, Arabic-, Chinese-and Urdu-English translation (Section 3) demonstrate consis-tent significant improvements over IBM Model 4 in both word alignment (up to + 6.7 F1) and transla-tion quality (up to + 1.4 B leu ). Our implementation has been released as a simple modification to the GIZA ++ toolkit that can be used as a drop-in re-placement for GIZA ++ in any existing MT pipeline. We start with a brief review of the IBM and HMM word alignment models, then describe how to extend them with a smoothed ` 0 prior and how to e ffi ciently train them. 2.1 IBM Models and HMM Given a French string f = f 1  X  X  X  f j  X  X  X  f m and an English string e = e 1  X  X  X  e i  X  X  X  e ` , these models de-scribe the process by which the French string is generated by the English string via the alignment a = a 1 ,..., a j ,..., a m . Each a j is a hidden vari-ables, indicating which English word e a word f j is aligned to.

In IBM Model 1 X 2 and the HMM model, the joint probability of the French sentence and alignment given the English sentence is The parameters of these models are the distortion probabilities d ( a j | a j  X  1 , j ) and the translation prob-abilities t ( f j | e a estimation of d , but the di ff erences do not concern us here. All three models, as well as IBM Models 3 X 5, share the same t . For further details of these models, the reader is referred to the original papers describ-ing them (Brown et al., 1993; Vogel et al., 1996). Let  X  stand for all the parameters of the model. The standard training procedure is to find the param-eter values that maximize the likelihood, or, equiv-alently, minimize the negative log-likelihood of the observed data: This is done using the Expectation-Maximization (EM) algorithm (Dempster et al., 1977). 2.2 MAP-EM with the ` 0 -norm Maximum likelihood training is prone to overfitting, especially in models with many parameters. In word alignment, one well-known manifestation of overfit-ting is that rare words can act as  X  X arbage collectors X  (Moore, 2004), aligning to many unrelated words. This hurts alignment precision and rule-extraction recall. Previous attempted remedies include early stopping, smoothing (Moore, 2004), and posterior regularization (Grac  X a et al., 2010).

We have previously proposed another simple remedy to overfitting in the context of unsuper-vised part-of-speech tagging (Vaswani et al., 2010), which is to minimize the size of the model using a smoothed ` 0 prior. Applying this prior to an HMM improves tagging accuracy for both Italian and En-glish.

Here, our goal is to apply a similar prior in a word-alignment model to the word-to-word transla-tion probabilities t ( f | e ). We leave the distortion models alone, since they are not very large, and there is not much reason to believe that we can profit from compacting them.

With the addition of the ` 0 prior, the MAP (maxi-mum a posteriori ) objective function is where and is a smoothed approximation of the ` 0 -norm. The hyperparameter  X  controls the tightness of the ap-proximation, as illustrated in Figure 1. Substituting back into (4) and dropping constant terms, we get the following optimization problem: minimize subject to the constraints We can carry out the optimization in (7) with the MAP-EM algorithm (Bishop, 2006). EM and MAP-EM share the same E-step; the di ff erence lies in the M-step. For vanilla EM, the M-step is: again subject to the constraints (8). The count C ( e , f ) is the number of times that f occurs aligned to e . For MAP-EM, it is:
This optimization problem is non-convex, and we do not know of a closed-form solution. Previously (Vaswani et al., 2010), we used ALGENCAN, a non-linear optimization toolkit, but this solution does not scale well to the number of parameters involved in word alignment models. Instead, we use a simpler and more scalable method which we describe in the next section. 2.3 Projected gradient descent Following Schoenemann (2011b), we use projected gradient descent (PGD) to solve the M-step (but with the ` 0 -norm instead of the ` 1 -norm). Gradient projection methods are attractive solutions to con-strained optimization problems, particularly when the constraints on the parameters are simple (Bert-sekas, 1999). Let F (  X  ) be the objective function in (10); we seek to minimize this function. As in pre-vious work (Vaswani et al., 2010), we optimize each set of parameters { t (  X  | e ) } separately for each En-glish word type e . The inputs to the PGD are the expected counts E [ C ( e , f )] and the current word-to-word conditional probabilities  X  . We run PGD for K iterations, producing a sequence of intermediate pa-rameter vectors  X  1 ,..., X  k ,..., X  K . Each iteration has two steps, a projection step and a line search. Projection step In this step, we compute: This moves  X  in the direction of steepest descent (  X  F ) with step size s , and then the function [  X  ] projects the resulting point onto the simplex; that is, it finds the nearest point that satisfies the con-straints (8).

The gradient  X  F (  X  k ) is In contrast to Schoenemann (2011b), we use an O ( n log n ) algorithm for the projection step due to Duchi et. al. (2008), shown in Pseudocode 1.
 Pseudocode 1 Project input vector u  X  R n onto the probability simplex. v = u sorted in non-increasing order  X  = 0 for i = 1 to n do end for  X  = 1 w r = max { v r  X   X , 0 } for 1  X  r  X  n return w Line search Next, we move to a point between  X  k and  X  k that satisfies the Armijo condition , where  X  m =  X  m (  X  k  X   X  k ) and  X  and  X  are both con-stants in (0 , 1). We try values m = 1 , 2 ,... until the Armijo condition (13) is satisfied or the limit m = 20 Pseudocode 2 Find a point between  X  k and  X  k that satisfies the Armijo condition.
 for m = 1 to 20 do end for return  X  k + 1 is reached. (Note that we don X  X  allow m = 0 because this can cause  X  k +  X  m to land on the boundary of the probability simplex, where the objective func-tion is undefined.) Then we set  X  k + 1 to the point in {  X  k }  X  {  X  k +  X  m | 1  X  m  X  20 } that minimizes F . The line search algorithm is summarized in Pseu-docode 2.

In our implementation, we set  X  = 0 . 5 and  X  = 0 . 5. We keep s fixed for all PGD iterations; we ex-perimented with s  X  { 0 . 1 , 0 . 5 } and did not observe significant changes in F-score. We run the projection step and line search alternately for at most K itera-tions, terminating early if there is no change in  X  k from one iteration to the next. We set K = 35 for the large Arabic-English experiment; for all other con-ditions, we set K = 50. These choices were made to balance e ffi ciency and accuracy. We found that val-ues of K between 30 and 75 were generally reason-able. To demonstrate the e ff ect of the ` 0 -norm on the IBM models, we performed experiments on four trans-lation tasks: Arabic-English, Chinese-English, and Urdu-English from the NIST Open MT Evaluation, and the Czech-English translation from the Work-shop on Machine Translation (WMT) shared task. We measured the accuracy of word alignments gen-erated by GIZA ++ with and without the ` 0 -norm, and also translation accuracy of systems trained us-ing the word alignments. Across all tests, we found strong improvements from adding the ` 0 -norm. 3.1 Training We have implemented our algorithm as an open-source extension to GIZA ++ . 1 Usage of the exten-sion is identical to standard GIZA ++ , except that the user can switch the ` 0 prior on or o ff , and adjust the hyperparameters  X  and  X  .

For vanilla EM, we ran five iterations of Model 1, five iterations of HMM, and ten iterations of Model 4. For our approach, we first ran one iter-ation of Model 1, followed by four iterations of Model 1 with smoothed ` 0 , followed by five itera-tions of HMM with smoothed ` 0 . Finally, we ran ten iterations of Model 4. 2
We used the following parallel data:  X  Chinese-English: selected data from the con- X  Arabic-English: all available data for the  X  Urdu-English: all available data for the con-u u w ` aiji  X  ao u xu  X  ehu` X  u hu` X zh  X  ang u li  X u u .  X  Czech-English: A corpus of 4 million words of
We set the hyperparameters  X  and  X  by tuning on gold-standard word alignments (to maximize F1) when possible. For Arabic-English and Chinese-English, we used 346 and 184 hand-aligned sen-tences from LDC2006E86 and LDC2006E93. Sim-ilarly, for Czech-English, 515 hand-aligned sen-tences were available (Bojar and Prokopov  X  a, 2006). But for Urdu-English, since we did not have any gold alignments, we used  X  = 10 and  X  = 0 . 05. We did not choose a large  X  , as the dataset was small, and we chose a conservative value for  X  .

We ran word alignment in both directions and symmetrized using grow-diag-final (Koehn et al., 2003). For models with the smoothed ` 0 prior, we tuned  X  and  X  separately in each direction. 3.2 Alignment First, we evaluated alignment accuracy directly by comparing against gold-standard word alignments. The results are shown in the alignment F1 col-umn of Table 1. We used balanced F-measure rather than alignment error rate as our metric (Fraser and Marcu, 2007).

Following Dyer et al. (2011), we also measured the average fertility,  X   X  sing . , of once-seen source words in the symmetrized alignments. Our align-ments show smaller fertility for once-seen words, suggesting that they su ff er from  X  X arbage collec-tion X  e ff ects less than the baseline alignments do.
The fact that we had to use hand-aligned data to tune the hyperparameters  X  and  X  means that our method is no longer completely unsupervised. How-ever, our observation is that alignment accuracy is actually fairly robust to the choice of these hyperpa-rameters, as shown in Table 2. As we will see below, we still obtained strong improvements in translation quality when hand-aligned data was unavailable.
We also tried generating 50 word classes using the tool provided in GIZA ++ . We found that adding word classes improved alignment quality a little, but more so for the baseline system (see Table 3). We used the alignments generated by training with word classes for our translation experiments. Figure 2 shows four examples of Chinese-English alignment, comparing the baseline with our smoothed-` 0 method. In all four cases, the base-line produces incorrect extra alignments that prevent good translation rules from being extracted while the smoothed-` 0 results are correct. In particular, the baseline system demonstrates typical  X  X arbage col-lection X  behavior (Moore, 2004) in all four exam-ples. 3.3 Translation We then tested the e ff ect of word alignments on translation quality using the hierarchical phrase-based translation system Hiero (Chiang, 2007). We used a fairly standard set of features: seven in-herited from Pharaoh (Koehn et al., 2003), a sec-ond language model, and penalties for the glue rule, identity rules, unknown-word rules, and two kinds of number / name rules. The feature weights were discriminatively trained using MIRA (Chi-ang et al., 2008). We used two 5-gram language models, one on the combined English sides of the NIST 2009 Arabic-English and Chinese-English constrained tracks (385M words), and another on 2 billion words of English.

For each language pair, we extracted grammar rules from the same data that were used for word alignment. The development data that were used for discriminative training were: for Chinese-English and Arabic-English, data from the NIST 2004 and NIST 2006 test sets, plus newsgroup data from the GALE program (LDC2006E92); for Urdu-English, half of the NIST 2008 test set; for Czech-English, a training set of 2051 sentences provided by the WMT10 translation workshop.

The results are shown in the B leu column of Ta-ble 1. We used case-insensitive IBM B leu (closest reference length) as our metric. Significance test-ing was carried out using bootstrap resampling with 1000 samples (Koehn, 2004; Zhang et al., 2004).
All of the tests showed significant improvements ( p &lt; 0 . 01), ranging from + 0.4 B leu to + 1.4 B leu For Urdu, even though we didn X  X  have manual align-ments to tune hyperparameters, we got significant gains over a good baseline. This is promising for lan-guages that do not have any manually aligned data.
Ideally, one would want to tune  X  and  X  to max-imize B leu . However, this is prohibitively expen-sive, especially if we must tune them separately in each alignment direction before symmetrization. We ran some contrastive experiments to investi-gate the impact of hyperparameter tuning on trans-lation quality. For the smaller Arabic-English cor-pus, we symmetrized all combinations of the two top-scoring alignments (according to F1) in each di-rection, yielding four sets of alignments. Table 4 shows B leu scores for translation models learned from these alignments. Unfortunately, we find that optimizing F1 is not optimal for B leu  X  X sing the second-best alignments yields a further improve-ment of 0 . 5 B leu on the NIST 2009 data, which is statistically significant ( p &lt; 0 . 05). Schoenemann (2011a), taking inspiration from Bo-drumlu et al. (2009), uses integer linear program-ming to optimize IBM Model 1 X 2 and the HMM with the ` 0 -norm. This method, however, does not outperform GIZA ++ . In later work, Schoenemann (2011b) used projected gradient descent for the ` 1 -norm. Here, we have adopted his use of projected gradient descent, but using a smoothed ` 0 -norm.
Liang et al. (2006) show how to train IBM mod-els in both directions simultaneously by adding a term to the log-likelihood that measures the agree-ment between the two directions. Grac  X a et al. (2010) explore modifications to the HMM model that en-courage bijectivity and symmetry. The modifications take the form of constraints on the posterior dis-tribution over alignments that is computed during the E-step. Mermer and Sarac  X lar (2011) explore a Bayesian version of IBM Model 1, applying sparse Dirichlet priors to t . However, because this method requires the use of Monte Carlo methods, it is not clear how well it can scale to larger datasets. We have extended the IBM models and HMM model by the addition of an ` 0 prior to the word-to-word translation model, which compacts the word-to-word translation table, reducing overfitting, and, in particular, the  X  X arbage collection X  e ff ect. We have shown how to perform MAP-EM with this prior e ffi ciently, even for large datasets. The method is implemented as a modification to the open-source toolkit GIZA ++ , and we have shown that it signif-icantly improves translation quality across four dif-ferent language pairs. Even though we have used a small set of gold-standard alignments to tune our hyperparameters, we found that performance was fairly robust to variation in the hyperparameters, and translation performance was good even when gold-standard alignments were unavailable. We hope that our method, due to its simplicity, generality, and ef-fectiveness, will find wide application for training better statistical translation systems.
 We are indebted to Thomas Schoenemann for ini-tial discussions and pilot experiments that led to this work, and to the anonymous reviewers for their valuable comments. We thank Jason Riesa for providing the Arabic-English and Chinese-English hand-aligned data and the alignment visualization tool, and Chris Dyer for the Czech-English hand-aligned data. This research was supported in part by DARPA under contract DOI-NBC D11AP00244 and a Google Faculty Research Award to L. H.
 Automatic word alignment is a vital component of nearly all current statistical translation pipelines. Al-though state-of-the-art translation models use rules that operate on units bigger than words (like phrases or tree fragments), they nearly always use word alignments to drive extraction of those translation rules. The dominant approach to word alignment has been the IBM models (Brown et al., 1993) together with the HMM model (Vogel et al., 1996). These models are unsupervised, making them applicable to any language pair for which parallel text is avail-able. Moreover, they are widely disseminated in the open-source GIZA ++ toolkit (Och and Ney, 2004). These properties make them the default choice for most statistical MT systems.

In the decades since their invention, many mod-els have surpassed them in accuracy, but none has supplanted them in practice. Some of these models are partially supervised, combining unlabeled paral-lel text with manually-aligned parallel text (Moore, 2005; Taskar et al., 2005; Riesa and Marcu, 2010). Although manually-aligned data is very valuable, it is only available for a small number of language pairs. Other models are unsupervised like the IBM models (Liang et al., 2006; Grac  X a et al., 2010; Dyer et al., 2011), but have not been as widely adopted as GIZA ++ has.

In this paper, we propose a simple extension to the IBM / HMM models that is unsupervised like the IBM models, is as scalable as GIZA ++ because it is implemented on top of GIZA ++ , and provides sig-nificant improvements in both alignment and trans-lation quality. It extends the IBM / HMM models by incorporating an  X  0 prior, inspired by the princi-ple of minimum description length (Barron et al., 1998), to encourage sparsity in the word-to-word translation model (Section 2.2). This extension fol-lows our previous work on unsupervised part-of-speech tagging (Vaswani et al., 2010), but enables it to scale to the large datasets typical in word alignment, using an e ffi cient training method based on projected gradient descent (Section 2.3). Ex-periments on Czech-, Arabic-, Chinese-and Urdu-English translation (Section 3) demonstrate consis-tent significant improvements over IBM Model 4 in both word alignment (up to + 6.7 F1) and transla-tion quality (up to + 1.4 B leu ). Our implementation has been released as a simple modification to the GIZA ++ toolkit that can be used as a drop-in re-placement for GIZA ++ in any existing MT pipeline. We start with a brief review of the IBM and HMM word alignment models, then describe how to extend them with a smoothed  X  0 prior and how to e ffi ciently train them. 2.1 IBM Models and HMM Given a French string f = f 1 f j f m and an English string e = e 1 e i e scribe the process by which the French string is generated by the English string via the alignment a = a 1 ,..., a j ,..., a m . Each a j is a hidden vari-ables, indicating which English word e a word f j is aligned to.

In IBM Model 1 X 2 and the HMM model, the joint probability of the French sentence and alignment given the English sentence is The parameters of these models are the distortion probabilities d ( a j | a j abilities t ( f j | e a estimation of d , but the di ff erences do not concern us here. All three models, as well as IBM Models 3 X 5, share the same t . For further details of these models, the reader is referred to the original papers describ-ing them (Brown et al., 1993; Vogel et al., 1996). Let  X  stand for all the parameters of the model. The standard training procedure is to find the param-eter values that maximize the likelihood, or, equiv-alently, minimize the negative log-likelihood of the observed data: This is done using the Expectation-Maximization (EM) algorithm (Dempster et al., 1977). 2.2 MAP-EM with the  X  0 -norm Maximum likelihood training is prone to overfitting, especially in models with many parameters. In word alignment, one well-known manifestation of overfit-ting is that rare words can act as  X  X arbage collectors X  (Moore, 2004), aligning to many unrelated words. This hurts alignment precision and rule-extraction recall. Previous attempted remedies include early stopping, smoothing (Moore, 2004), and posterior regularization (Grac  X a et al., 2010).

We have previously proposed another simple remedy to overfitting in the context of unsuper-vised part-of-speech tagging (Vaswani et al., 2010), which is to minimize the size of the model using a smoothed  X  0 prior. Applying this prior to an HMM improves tagging accuracy for both Italian and En-glish.

Here, our goal is to apply a similar prior in a word-alignment model to the word-to-word transla-tion probabilities t ( f | e ). We leave the distortion models alone, since they are not very large, and there is not much reason to believe that we can profit from compacting them.

With the addition of the  X  0 prior, the MAP (maxi-mum a posteriori ) objective function is where and is a smoothed approximation of the  X  0 -norm. The hyperparameter  X  controls the tightness of the ap-proximation, as illustrated in Figure 1. Substituting back into (4) and dropping constant terms, we get the following optimization problem: minimize subject to the constraints We can carry out the optimization in (7) with the MAP-EM algorithm (Bishop, 2006). EM and MAP-EM share the same E-step; the di ff erence lies in the M-step. For vanilla EM, the M-step is: again subject to the constraints (8). The count C ( e , f ) is the number of times that f occurs aligned to e . For MAP-EM, it is:
This optimization problem is non-convex, and we do not know of a closed-form solution. Previously (Vaswani et al., 2010), we used ALGENCAN, a non-linear optimization toolkit, but this solution does not scale well to the number of parameters involved in word alignment models. Instead, we use a simpler and more scalable method which we describe in the next section. 2.3 Projected gradient descent Following Schoenemann (2011b), we use projected gradient descent (PGD) to solve the M-step (but with the  X  0 -norm instead of the  X  1 -norm). Gradient projection methods are attractive solutions to con-strained optimization problems, particularly when the constraints on the parameters are simple (Bert-sekas, 1999). Let F (  X  ) be the objective function in (10); we seek to minimize this function. As in pre-vious work (Vaswani et al., 2010), we optimize each set of parameters { t ( | e ) } separately for each En-glish word type e . The inputs to the PGD are the expected counts E [ C ( e , f )] and the current word-to-word conditional probabilities  X  . We run PGD for K iterations, producing a sequence of intermediate pa-rameter vectors  X  1 ,..., X  k ,..., X  K . Each iteration has two steps, a projection step and a line search. Projection step In this step, we compute: This moves  X  in the direction of steepest descent (  X 
F ) with step size s , and then the function [ ]  X  projects the resulting point onto the simplex; that is, it finds the nearest point that satisfies the con-straints (8).

The gradient  X  F (  X  k ) is In contrast to Schoenemann (2011b), we use an O ( n log n ) algorithm for the projection step due to Duchi et. al. (2008), shown in Pseudocode 1.
 Pseudocode 1 Project input vector u  X  R n onto the probability simplex. v = u sorted in non-decreasing order  X  = 0 for i = 1 to n do end for w r = max { v r  X   X , 0 } for 1  X  r  X  n return w Line search Next, we move to a point between  X  k and  X  k that satisfies the Armijo condition , where  X  m =  X  m (  X  k  X   X  k ) and  X  and  X  are both con-stants in (0 , 1). We try values m = 1 , 2 ,... until the Armijo condition (13) is satisfied or the limit m = 20 Pseudocode 2 Find a point between  X  k and  X  k that satisfies the Armijo condition.
 for m = 1 to 20 do end for return  X  k + 1 is reached. (Note that we don X  X  allow m = 0 because this can cause  X  k +  X  m to land on the boundary of the probability simplex, where the objective func-tion is undefined.) Then we set  X  k + 1 to the point in {  X  k }  X  {  X  k +  X  m | 1  X  m  X  20 } that minimizes F . The line search algorithm is summarized in Pseu-docode 2.

In our implementation, we set  X  = 0 . 5 and  X  = 0 . 5. We keep s fixed for all PGD iterations; we ex-perimented with s  X  { 0 . 1 , 0 . 5 } and did not observe significant changes in F-score. We run the projection step and line search alternately for at most K itera-tions, terminating early if there is no change in  X  k from one iteration to the next. We set K = 35 for the large Arabic-English experiment; for all other con-ditions, we set K = 50. These choices were made to balance e ffi ciency and accuracy. We found that val-ues of K between 30 and 75 were generally reason-able. To demonstrate the e ff ect of the  X  0 -norm on the IBM models, we performed experiments on four trans-lation tasks: Arabic-English, Chinese-English, and Urdu-English from the NIST Open MT Evaluation, and the Czech-English translation from the Work-shop on Machine Translation (WMT) shared task. We measured the accuracy of word alignments gen-erated by GIZA ++ with and without the  X  0 -norm, and also translation accuracy of systems trained us-ing the word alignments. Across all tests, we found strong improvements from adding the  X  0 -norm. 3.1 Training We have implemented our algorithm as an open-source extension to GIZA ++ . 1 Usage of the exten-sion is identical to standard GIZA ++ , except that the user can switch the  X  0 prior on or o ff , and adjust the hyperparameters  X  and  X  .

For vanilla EM, we ran five iterations of Model 1, five iterations of HMM, and ten iterations of Model 4. For our approach, we first ran one iter-ation of Model 1, followed by four iterations of Model 1 with smoothed  X  0 , followed by five itera-tions of HMM with smoothed  X  0 . Finally, we ran ten
We used the following parallel data:  X  Chinese-English: selected data from the con- X  Arabic-English: all available data for the  X  Urdu-English: all available data for the con- X  Czech-English: A corpus of 4 million words of
We set the hyperparameters  X  and  X  by tuning on gold-standard word alignments (to maximize F1) when possible. For Arabic-English and Chinese-English, we used 346 and 184 hand-aligned sen-tences from LDC2006E86 and LDC2006E93. Sim-ilarly, for Czech-English, 515 hand-aligned sen-tences were available (Bojar and Prokopov  X  a, 2006). But for Urdu-English, since we did not have any gold alignments, we used  X  = 10 and  X  = 0 . 05. We did not choose a large  X  , as the dataset was small, and we chose a conservative value for  X  .

We ran word alignment in both directions and symmetrized using grow-diag-final (Koehn et al., 2003). For models with the smoothed  X  0 prior, we tuned  X  and  X  separately in each direction. 3.2 Alignment First, we evaluated alignment accuracy directly by comparing against gold-standard word alignments. The results are shown in the alignment F1 col-umn of Table 1. We used balanced F-measure rather than alignment error rate as our metric (Fraser and Marcu, 2007).

Following Dyer et al. (2011), we also measured the average fertility,  X   X  sing words in the symmetrized alignments. Our align-ments show smaller fertility for once-seen words, suggesting that they su ff er from  X  X arbage collec-tion X  e ff ects less than the baseline alignments do.
The fact that we had to use hand-aligned data to tune the hyperparameters  X  and  X  means that our method is no longer completely unsupervised. How-ever, our observation is that alignment accuracy is actually fairly robust to the choice of these hyperpa-rameters, as shown in Table 2. As we will see below, we still obtained strong improvements in translation quality when hand-aligned data was unavailable.
We also tried generating 50 word classes using the tool provided in GIZA ++ . We found that adding word classes improved alignment quality a little, but more so for the baseline system (see Table 3). We used the alignments generated by training with word classes for our translation experiments. Figure 2 shows four examples of Chinese-English alignment, comparing the baseline with our smoothed- X  0 method. In all four cases, the base-line produces incorrect extra alignments that prevent good translation rules from being extracted while the smoothed- X  0 results are correct. In particular, the baseline system demonstrates typical  X  X arbage col-lection X  behavior (Moore, 2004) in all four exam-ples. 3.3 Translation We then tested the e ff ect of word alignments on translation quality using the hierarchical phrase-based translation system Hiero (Chiang, 2007). We used a fairly standard set of features: seven in-herited from Pharaoh (Koehn et al., 2003), a sec-ond language model, and penalties for the glue rule, identity rules, unknown-word rules, and two kinds of number / name rules. The feature weights were discriminatively trained using MIRA (Chi-ang et al., 2008). We used two 5-gram language models, one on the combined English sides of the NIST 2009 Arabic-English and Chinese-English constrained tracks (385M words), and another on 2 billion words of English.

For each language pair, we extracted grammar rules from the same data that were used for word alignment. The development data that were used for discriminative training were: for Chinese-English and Arabic-English, data from the NIST 2004 and NIST 2006 test sets, plus newsgroup data from the GALE program (LDC2006E92); for Urdu-English, half of the NIST 2008 test set; for Czech-English, a training set of 2051 sentences provided by the WMT10 translation workshop.

The results are shown in the B leu column of Ta-ble 1. We used case-insensitive IBM B leu (closest reference length) as our metric. Significance test-ing was carried out using bootstrap resampling with 1000 samples (Koehn, 2004; Zhang et al., 2004).
All of the tests showed significant improvements ( p &lt; 0 . 01), ranging from + 0.4 B leu to + 1.4 B leu For Urdu, even though we didn X  X  have manual align-ments to tune hyperparameters, we got significant gains over a good baseline. This is promising for lan-guages that do not have any manually aligned data.
Ideally, one would want to tune  X  and  X  to max-imize B leu . However, this is prohibitively expen-sive, especially if we must tune them separately in each alignment direction before symmetrization. We ran some contrastive experiments to investi-gate the impact of hyperparameter tuning on trans-lation quality. For the smaller Arabic-English cor-pus, we symmetrized all combinations of the two top-scoring alignments (according to F1) in each di-rection, yielding four sets of alignments. Table 4 shows B from these alignments. Unfortunately, we find that optimizing F1 is not optimal for B leu  X  X sing the second-best alignments yields a further improve-ment of 0 . 5 B leu on the NIST 2009 data, which is statistically significant ( p &lt; 0 . 05). Schoenemann (2011a), taking inspiration from Bo-drumlu et al. (2009), uses integer linear program-ming to optimize IBM Model 1 X 2 and the HMM with the  X  0 -norm. This method, however, does not outperform GIZA ++ . In later work, Schoenemann (2011b) used projected gradient descent for the  X  1 -norm. Here, we have adopted his use of projected gradient descent, but using a smoothed  X  0 -norm.
Liang et al. (2006) show how to train IBM mod-els in both directions simultaneously by adding a term to the log-likelihood that measures the agree-ment between the two directions. Grac  X a et al. (2010) explore modifications to the HMM model that en-courage bijectivity and symmetry. The modifications take the form of constraints on the posterior dis-tribution over alignments that is computed during the E-step. Mermer and Sarac  X lar (2011) explore a Bayesian version of IBM Model 1, applying sparse Dirichlet priors to t . However, because this method requires the use of Monte Carlo methods, it is not clear how well it can scale to larger datasets. We have extended the IBM models and HMM model by the addition of an  X  0 prior to the word-to-word translation model, which compacts the word-to-word translation table, reducing overfitting, and, in particular, the  X  X arbage collection X  e ff ect. We have shown how to perform MAP-EM with this prior e ffi ciently, even for large datasets. The method is implemented as a modification to the open-source toolkit GIZA ++ , and we have shown that it signif-icantly improves translation quality across four dif-ferent language pairs. Even though we have used a small set of gold-standard alignments to tune our hyperparameters, we found that performance was fairly robust to variation in the hyperparameters, and translation performance was good even when gold-standard alignments were unavailable. We hope that our method, due to its simplicity, generality, and ef-fectiveness, will find wide application for training better statistical translation systems.
 We are indebted to Thomas Schoenemann for ini-tial discussions and pilot experiments that led to this work, and to the anonymous reviewers for their valuable comments. We thank Jason Riesa for providing the Arabic-English and Chinese-English hand-aligned data and the alignment visualization tool, and Chris Dyer for the Czech-English hand-aligned data. This research was supported in part by DARPA under contract DOI-NBC D11AP00244 and a Google Faculty Research Award to L. H.

