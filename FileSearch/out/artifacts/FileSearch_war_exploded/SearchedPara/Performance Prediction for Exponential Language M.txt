 In this paper, we investigate the following question for language models belonging to the exponential family: given some training data and test data drawn from the same distribution, can we accurately pre-dict the test set performance of a model estimated from the training data? This problem is known as performance prediction and is relevant for model se-lection , the task of selecting the best model from a
Let us first define some notation. Events have the form ( x,y ) , where we attempt to predict the cur-rent word y given previous words x . We denote the training data as D = ( x fine  X  p ( x,y ) = count distribution of the training data. Similarly, we have tion p  X  ( x,y ) . We take the performance of a condi-tional language model p ( y | x ) to be the cross-entropy H ( p  X  ,p ) between the empirical test distribution p  X  and the model p ( y | x ) : This is equivalent to the negative mean log-likelihood per event, as well as to log perplexity.
We only consider models in the exponential fam-ily. An exponential model p a set of features { f number of parameters  X  = {  X  and where Z
One of the seminal methods for performance pre-diction is the Akaike Information Criterion (AIC) (Akaike, 1973). For a model, let  X   X  be the maxi-mum likelihood estimate of  X  on some training data. Akaike derived the following estimate for the ex-pected value of the test set cross-entropy H ( p  X  ,p H (  X  p,p is the number of parameters in the model, and D is the number of events in the training data. However, maximum likelihood estimates for language mod-els typically yield infinite cross-entropy on test data, and thus AIC behaves poorly for these domains.
In this work, instead of deriving a performance prediction relationship theoretically, we attempt to empirically discover a formula for predicting test performance. Initially, we consider only n -gram lan-guage models, and build models over varying do-mains, data set sizes, and n -gram orders. We per-form linear regression to discover whether we can model test set cross-entropy as a simple function of training set cross-entropy and other model statistics. For the 200+ n -gram models we evaluate, we find that the empirical relationship holds with a correlation of 0.9997 where  X  is a con-stant and where  X   X  = {  X   X  estimates; i.e. , rather than estimating performance for maximum likelihood models as in AIC, we do this for regularized models. In other words, test set cross-entropy can be approximated by the sum of the training set cross-entropy and the scaled sum of the magnitudes of the model parameters.

To maximize the correlation achieved by eq. (4), we find that it is necessary to use the same regular-ization method and regularization hyperparameters across models and that the optimal value of  X  de-pends on the values of the hyperparameters. Con-sequently, we first evaluate several types of regu-larization and find which of these (and which hy-perparameter values) work best across all domains, and use these values in all subsequent experiments. While ` 2 reported in the literature for n -gram models, we find here that ` The organization of this paper is as follows: In Section 2, we evaluate various regularization tech-niques for n -gram models and select the method and hyperparameter values that give the best overall per-formance. In Section 3, we discuss experiments to find a formula for predicting n -gram model perfor-mance, and provide an explanation for why eq. (4) works so well. In Section 4, we evaluate how well eq. (4) holds for several class-based language mod-els and minimum discrimination information mod-els. Finally, in Sections 5 and 6 we discuss related work and conclusions. In this section, we address the issue of how to per-form regularization in our later experiments. Fol-lowing the terminology of Dud  X   X k and Schapire (2006), the most widely-used and effective methods for regularizing exponential models are ` ization (Tibshirani, 1994; Kazama and Tsujii, 2003; Goodman, 2004) and ` 2 Chen and Rosenfeld, 2000; Lebanon and Lafferty, 2001). While not as popular, another regularization scheme that has been shown to be effective is 2-norm inequality regularization (Kazama and Tsujii, 2003) which is an instance of ` by Dud  X   X k and Schapire (2006). Under ` larization, the regularized parameter estimates  X   X  are chosen to optimize the objective function Note that ` cial case of this (by taking  X  =  X  ) as can ` 2 larization (by taking  X  = 0 ).

Here, we evaluate ` tion for exponential n -gram models. An exponen-tial n -gram model contains a binary feature f each n 0 -gram  X  occurring in the training data for n 0  X  n , where f  X  ( x,y ) = 1 iff xy ends in  X  . We would like to find the regularization method and as-sociated hyperparameters that work best across dif-ferent domains, training set sizes, and n -gram or-ders. As it is computationally expensive to evalu-ate a large number of hyperparameter settings over a large collection of models, we divide this search into two phases. First, we evaluate a large set of hy-perparameters on a limited set of models to come up with a short list of candidate hyperparameters. We then evaluate these candidates on our full model set to find the best one.

We build n -gram models over data from five dif-ferent sources and consider three different vocabu-lary sizes for one source, giving us seven  X  X omains X  in total. We refer to these domains by the letters A  X  G ; summary statistics for each domain are given in Table 1. The domains C  X  G consist of regular word data, while domains A and B consist of letter and part-of-speech (POS) sequences, respectively. Do-mains C  X  E differ only in vocabulary.

For each domain, we first randomize the order of sentences in that data. We partition off two devel-opment sets and an evaluation set (5000  X  X entences X  each in domain A and 2500 sentences elsewhere) and use the remaining data as training data. In this way, we assure that our training and test data are drawn from the same distribution as is assumed in our later experiments. Training set sizes in sentences are 100, 300, 1000, 3000, etc., up to the maximums given in Table 1. Building models for each training set size and n -gram order in Table 1 gives us a total of 218 models over the seven domains.

In the first phase of hyperparameter search, we choose a subset of these models (57 total) and evalu-ate many different values for (  X , X  2 ) with ` ularization on each. We perform a grid search, trying value  X  2  X  X  1 , 1 . 2 , 1 . 5 , 2 , 2 . 5 , 3 , 4 , 5 , 6 where  X  =  X  corresponds to `  X  = 0 corresponds to ` 2 2 regularization. We use a variant of iterative scaling for parameter estima-tion. For each model and each (  X , X  2 ) , we denote the cross-entropy of the development data as H m for the m th model, m  X  X  1 ,..., 57 } . Then, for each m and (  X , X  2 ) , we can compute how much worse the settings (  X , X  2 ) perform with model m as compared to the best hyperparameter settings for that model: We would like to select (  X , X  2 ) for which  X  H m to be small; in particular, we choose (  X , X  2 ) that minimizes the root mean squared (RMS) error For each of ` tain the 6 X 8 best hyperparameter settings. To choose the best single hyperparameter setting from within this candidate set, we repeat the same analysis ex-cept over the full set of 218 models.
On the development sets, the (  X , X  2 ) value with the lowest squared error is (0.5, 6), and these are the hyperparameter settings we use in all later ex-periments unless otherwise noted. The RMS error, mean error, and maximum error for these hyperpa-rameters on the evaluation sets are 0.011, 0.007, and responds to a 1.1% difference in perplexity which is generally considered insignificant. Thus, we can achieve good performance across domains, data set sizes, and n -gram orders using a single set of hyper-parameters as compared to optimizing hyperparam-eters separately for each model. Now that we have established which regularization method and hyperparameters to use, we attempt to empirically discover a simple formula for predict-ing the test set cross-entropy of regularized n -gram models. The basic strategy is as follows: We first build a large number of n -gram models over differ-ent domains, training set sizes, and n -gram orders. Then, we come up with a set of candidate statistics, e.g. , training set cross-entropy, number of features, etc., and do linear regression to try to best model test set cross-entropy as a linear function of these statis-tics. We assume that training and test data come from the same distribution; otherwise, it would be difficult to predict test performance.

We use the same 218 n -gram models as in Sec-tion 2. For each model, we compute training set cross-entropy H (  X  p,p (Hurvich and Tsai, 1989), and the Bayesian Infor-mation Criterion (Schwarz, 1978), respectively. As features f F we also consider using F 6 =0 , the number of fea-tures f with fractional exponents are suggested by Figure 2. The value 1 is present to handle constant offsets.
After some initial investigation, it became clear that training set cross-entropy is a very good (par-tial) predictor of test set cross-entropy with coeffi-cient 1. As there is ample theoretical support for this, instead of fitting test set performance directly, we chose to model the difference between test and training performance as a function of the remaining statistics. This difference is sometimes referred to as the optimism of a model:
First, we attempt to model optimism as a lin-ear function of a single statistic. For each statis-tic listed previously, we perform linear regression to minimize root mean squared error when predict-ing development set optimism. In Table 2, we dis-play the RMSE and best coefficient for each statis-tic. We see that three statistics have by far the lowest In practice, most  X   X  so these statistics tend to have similar values. We show in Section 3.1 why this statistic is more appeal-ing than the others. Next, we investigate modeling optimism as a linear function of a pair of statistics. We find that the best RMSE for two variables (0.042) is only slightly lower than that for one (0.043), so it is doubtful that a second variable helps.

Thus, our analysis suggests that among our candi-dates, the best predictor of optimism is simply where  X  = 0 . 938 , with this value being independent of domain, training set size, and n -gram order. In other words, the difference between test and train-ing cross-entropy is a linear function of the sum of parameter magnitudes scaled per event. Substituting into eq. (8) and rearranging, we get eq. (4).
To assess the accuracy of eq. (4), we compute var-ious statistics on our evaluation sets using the best  X  from our development data, i.e. ,  X  = 0 . 938 . In Figure 1, we graph optimism for the evaluation data that the linear correlation is very good. The correla-tion between the actual and predicted cross-entropy on the evaluation data is 0.9997; the mean absolute prediction error is 0.030 nats; the RMSE is 0.043 nats; and the maximum absolute error is 0.166 nats. Thus, on average we can predict test performance to within 3% in perplexity, though in the worst case we
If we compute the prediction error of eq. (4) over the same models except using ` tion (with the best corresponding hyperparameter values found in Section 2), the prediction RMSE is 0.054 and 0.139 nats, respectively. Thus, we find that choosing hyperparameters carefully in Section 2 was important in doing well in performance predic-tion. While hyperparameters were chosen to opti-mize test performance rather than prediction accu-racy, we find that the chosen hyperparameters are favorable for the latter task as well. 3.1 Why Does Prediction Work So Well? The correlation in Figure 1 is remarkably high, and thus it begs for an explanation. First, let us express the difference in test and training cross-entropy for a model in terms of its parameters  X  . Substituting eq. (2) into eq. (1), we get where E can express the difference in test and training per-formance as Ignoring the last term on the right, we see that opti-mism for exponential models is a linear function of the  X 
Then, we can ask what E would let us satisfy eq. (4). Consider the relationship If we substitute this into eq. (11) and ignore the last term on the right again, this gives us exactly eq. (4). We refer to the value ( E discount of a feature. It can be thought of as rep-resenting how many times less the feature occurs in the test data as opposed to the training data, if the test data were normalized to be the same size as the training data. Discounts for n -grams have been stud-ied extensively, e.g. , (Good, 1953; Church and Gale, 1991; Chen and Goodman, 1998), and tend not to vary much across training set sizes.

We can check how well eq. (12) holds for actual regularized n -gram models. We construct a total of ten n -gram models on domains A and E . We build four letter 5-gram models on domain A on training sets ranging in size from 100 words to 30k words, and six models (either trigram or 5-gram) on do-main E on training sets ranging from 100 sentences to 30k sentences. We create large development test sets (45k words for domain A and 70k sentences for domain E ) to better estimate E
Because graphs of discounts as a function of  X   X  are very noisy, we smooth the data before plotting. We partition data points into buckets containing at least 512 points. We average all of the points in each bucket to get a  X  X moothed X  data point, and plot this single point for each bucket. In Figure 2, we plot smoothed discounts as a function of  X   X  range  X   X 
We see that eq. (12) holds at a very rough level over the  X   X  much different ranges of  X   X  all value of P F the great majority of the mass (90 X 95%+) is concen-trated in the range  X   X  der consideration. Thus, to a first approximation, the reason that eq. (4) holds with  X  = 0 . 938 is because on average, feature expectations have a discount of about this value for  X   X 
Due to space considerations, we only summarize our other findings; a longer discussion is provided in (Chen, 2008). We find that the absolute error in cross-entropy tends to be quite small across models for several reasons. For non-sparse models, there is significant variation in average discounts, but be-In contrast, sparse models are dominated by single-count n -grams with features whose average discount is quite close to  X  = 0 . 938 . Finally, the last term on the right in eq. (11) also plays a small but significant role in keeping the prediction error low. In (Chen, 2009), we show how eq. (4) can be used to motivate a novel class-based language model and a regularized version of minimum discrimination in-formation (MDI) models (Della Pietra et al., 1992). In this section, we analyze whether in addition to word n -gram models, eq. (4) holds for these other exponential language models as well. 4.1 Class-Based Language Models We assume a word w is always mapped to the same class c ( w ) . For a sentence w where c sentence token. We use the notation p ng ( y |  X  ) to denote an exponential n -gram model as defined in Section 2, where we have features for each suffix of each  X y occurring in the training set. We use the notation p ng ( y |  X  all features in the models p ng ( y |  X  We consider three class models, models S , M , and L , defined as Model S is an exponential version of the class-based n -gram model from (Brown et al., 1992); model M is a novel model introduced in (Chen, 2009); and model L is an exponential version of the model ind-expredict from (Goodman, 2001).

To evaluate whether eq. (4) can accurately pre-dict test performance for these class-based models, we use the WSJ data and vocabulary from domain E and consider training set sizes of 1k, 10k, 100k, and 900k sentences. We create three different word classings containing 50, 150, and 500 classes using the algorithm of Brown et al. (1992) on the largest training set. For each training set and number of classes, we build both 3-gram and 4-gram versions of each of our three class models.

In Figure 3, we plot optimism ( i.e. , test minus models (66 in total) on our WSJ evaluation set. The  X + X  marks correspond to our class n -gram models, while the small points replicate the points for word n -gram models from Figure 1. Remarkably, eq. (4) appears to accurately predict performance for our class n -gram models using the same  X  = 0 . 938 value found for word n -gram models. The mean ab-solute prediction error is 0.029 nats, comparable to that found for word n -gram models.

It is interesting that eq. (4) works for class-based models despite their being composed of two sub-models, one for word prediction and one for class prediction. However, taking the log of eq. (13), we note that the cross-entropy of text can be expressed as the sum of the cross-entropy of its word tokens and the cross-entropy of its class tokens. It would not be surprising if eq. (4) holds separately for the class prediction model predicting class data and the word prediction model predicting word data, since all of these component models are basically n -gram models. Summing, this explains why eq. (4) holds for the whole class model. 4.2 Models with Prior Distributions Minimum discrimination information models (Della Pietra et al., 1992) are exponential models with a prior distribution q ( y | x ) : The central issue in performance prediction for MDI models is whether q ( y | x ) needs to be accounted for. That is, if we assume q is an exponential model, should its parameters  X  q eq. (4)? From eq. (11), we note that if E E not affect the difference between test and training cross-entropy (ignoring its impact on the last term). By assumption, the training and test set for p come from the same distribution while q is derived from an independent data set. It follows that we expect E should ignore q when applying eq. (4).

To evaluate whether eq. (4) holds for MDI mod-els, we use the same WSJ training and evaluation sets from domain E as in Section 4.1. We consider three different training set sizes: 1k, 10k, and 100k sentences. To train q , we use the 100k sentence BN training set from domain F . We build both trigram and 4-gram versions of each model.

In Figure 3, we plot test minus training cross-WSJ evaluation set; the  X   X   X  marks correspond to the MDI models. As expected, eq. (4) appears to work quite well for MDI models using the same  X  = 0 . 938 value as before; the mean absolute pre-diction error is 0.077 nats. We group existing performance prediction methods into two categories: non-data-splitting methods and data-splitting methods. In non-data-splitting meth-ods, test performance is directly estimated from training set performance and/or other statistics of a model. Data-splitting methods involve partitioning training data into a truncated training set and a surro-gate test set and using surrogate test set performance to estimate true performance.

The most popular non-data-splitting methods for predicting test set cross-entropy (or likelihood) are AIC and variants such as AIC and QAIC Lebreton et al., 1992). In Section 3, we consid-ered performance prediction formulae with the same form as AIC and AIC rameter estimates), and neither performed as well as eq. (4); e.g. , see Table 2.

There are many techniques for bounding test set classification error including the Occam X  X  Ra-zor bound (Blumer et al., 1987; McAllester, 1999), PAC-Bayes bound (McAllester, 1999), and the sam-ple compression bound (Littlestone and Warmuth, 1986; Floyd and Warmuth, 1995). These methods derive theoretical guarantees that the true error rate of a classifier will be below (or above) some value with a certain probability. Langford (2005) evalu-ates these techniques over many data sets; while the bounds can sometimes be fairly tight, in many data sets the bounds are quite loose.

When learning an element from a set of target classifiers, the Vapnik-Chervonenkis (VC) dimen-sion of the set can be used to bound the true error rate relative to the training error rate with some probabil-ity (Vapnik, 1998); this technique has been used to compute error bounds for many types of classifiers. For example, Bartlett (1998) shows that for a neural network with small weights and small training set squared error, the true error depends on the size of its weights rather than the number of weights; this finding is similar in spirit to eq. (4).
In practice, the most accurate methods for perfor-mance prediction in many contexts are data-splitting methods (Guyon et al., 2006). These techniques in-clude the hold-out method; leave-one-out and k -fold cross-validation; and bootstrapping (Allen, 1974; Stone, 1974; Geisser, 1975; Craven and Wahba, 1979; Efron, 1983). However, unlike non-data-splitting methods, these methods do not lend them-selves well to providing insight into model design as discussed in Section 6. We show that for several types of exponential lan-guage models, it is possible to accurately predict the cross-entropy of test data using the simple relation-ship given in eq. (4). When using ` tion with (  X  = 0 . 5 , X  2 = 6) , the value  X  = 0 . 938 works well across varying model types, domains, vocabulary sizes, training set sizes, and n -gram or-ders, yielding a mean absolute error of about 0.03 nats (3% in perplexity). We evaluate  X  300 language models in total, including word and class n -gram models and n -gram models with prior distributions.
While there has been a great deal of work in performance prediction, the vast majority of work on non-data-splitting methods has focused on find-ing theoretically-motivated approximations or prob-abilistic bounds on test performance. In contrast, we developed eq. (4) on a purely empirical basis, and there has been little, if any, existing work that has shown comparable performance prediction accuracy over such a large number of models and data sets. In addition, there has been little, if any, previous work
While eq. (4) performs well as compared to other non-data-splitting methods for performance predic-tion, the prediction error can be several percent in perplexity, which means we cannot reliably rank models that are close in quality. In addition, in speech recognition and many other applications, an external test set is typically provided, which means we can measure test set performance directly. Thus, in practice, eq. (4) is not terribly useful for the task of model selection; instead, what eq. (4) gives us is insight into model design . That is, instead of select-ing between candidate models once they have been built as in model selection, it is desirable to be able to select between models at the model design stage. Being able to intelligently compare models (with-out implementation) requires that we know which aspects of a model impact test performance, and this is exactly what eq. (4) tells us.

Intuitively, simpler models should perform better on test data given equivalent training performance, and model structure (as opposed to parameter val-ues) is an important aspect of the complexity of a model. Accordingly, there have been many meth-ods for model selection that measure the size of a model in terms of the number of features or param-eters in the model, e.g. , (Akaike, 1973; Rissanen, 1978; Schwarz, 1978). Surprisingly, for exponential language models, the number of model parameters seems to matter not at all; all that matters are the magnitudes of the parameter values. Consequently, one can improve such models by adding features (or a prior model) that reduce parameter values while maintaining training performance.

In (Chen, 2009), we show how these ideas can be used to motivate heuristics for improving the perfor-mance of existing language models, and use these heuristics to develop a novel class-based model and a regularized version of MDI models that outper-form comparable methods in both perplexity and speech recognition word-error rate on WSJ data. In addition, we show how the tradeoff between train-ing set performance and model size impacts aspects of language modeling as diverse as backoff n -gram features, class-based models, and domain adapta-tion. In sum, eq. (4) provides a new and valuable framework for characterizing, analyzing, and de-signing statistical models.
 We thank Bhuvana Ramabhadran and the anony-mous reviewers for their comments on this and ear-lier versions of the paper.

