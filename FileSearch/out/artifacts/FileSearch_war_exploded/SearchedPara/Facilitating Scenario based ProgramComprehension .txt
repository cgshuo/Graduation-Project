 During software maintenance and development, comprehending a large amount of source code is a big challenge for software development teams. The program-mers must have an adequate understanding of what a program does and how it does to make functional modifications and extensions without introducing errors [9]. Program comprehension is such an activity of understanding how a software system or a part of it works [14]. According to Corbi [7], program comprehension accounts for more than half of the software maintenance time. Programmers urgently need a method to assist them in understanding the source code effectively.
 Learning (ML), topic modeling have been developing as an effective method of extracting semantic information. Topic models are probabilistic models for uncovering the underlying semantic structure of a document collection based on a hierarchical Bayesian analysis of the original texts [3]. Researchers apply topic models to mine software assets and obtain linguistic topics automatically. Using these topics appropriately, developers should be able to understand programs more effectively [2]. Here, software assets include source code, documents and bug reports [6].
 15, 16, 18], including applying topic models to program comprehension [15, 16]. However, the discussion about program comprehension scenarios and the explo-ration of program comprehension assistant methods in different scenarios has not been given much attention. In different scenarios, developers have different demands, and thus need different kinds of assistant methods. For instance, de-velopers, who are not owners or contributors of the program, comprehend the program because they want to  X  X se X  it, including maintenance and extension. We defined this scenario as Program Users Scenario . See Sect. 3 for more detail. demands of developers, and then we utilized characteristics of Program Users Scenario to explore a program comprehension assistant method based on topic models in this scenario. According to the exploration, we developed a semi-automatic program comprehension tool, namely JSEA (Java Software Engineers Assistant). To evaluate this tool, we recruited 12 volunteers for experiments, designed and conducted an experimentation with JSEA, and analyzed the ex-perimental results in detail. Considering various programming languages have different characters, in this paper, we focused on Java language, but the concept can be reused for other languages.
 prehension scenarios and their characteristics, and analyze developers X  demands in different scenarios. (2) Explore how to facilitate program comprehension with topic modeling in Program Users Scenario , and develop a program comprehen-sion assistant tool, namely JSEA, based on the exploration. (3) Recruit 12 volun-teers and conduct an experimentation to evaluate JSEA, and the experimental results suggest that JSEA can support program comprehension in Program Users Scenario .
 duce related work. In Section 3, we present program comprehension scenarios. In Section 4, we describe JSEA, a semi-automatic assistant tool in Program Users Scenario , supporting program comprehension based on topic models. In Section 5 and Section 6, we provide the experimental procedure and analyze the experimentation results. 2.1 Program Comprehension Successful program maintenance, in particular, depends on comprehension. Re-searchers proposed some influential theories about program comprehension in the past, including top-down [5], bottom-up [17], and a combination of the two [12]. Brooks [5] describes top-down theories of program comprehension as hypothesis-driven. When a program is comprehended, the knowledge are organized into dis-tinct domains which bridge between the original problem and the final program. The program comprehension process is reconstructing knowledge about these domains and the relationship among them. In button-up model, Shneiderman et al. [17] theorizes that programmers first read source code line-by-line and the program comprehension is accomplished by a hierarchical chunking process that organizes several statements into a functional unit. These units can then be organized into still higher level units which convey the overall operation of the program. The integrated metamodel of program comprehension have also been proposed [12], in which programmers switch flexibly from top-down to bottom-up comprehension strategies depending on the situation. 2.2 Topic Models Topic models were originally developed as a means of automatically indexing, searching, clustering, and structuring large corpora of unstructured and unla-beled documents. Using topic models, topics are extracted from documents and are used to represent the corpora. A topic is a collection of terms that co-occur frequently in documents of corpus, so documents can be clustered by topics and the entire corpus can be indexed and organized in terms of this discovered seman-tic structure [3, 6]. Latent Dirichlet Allocation (LDA) is a popular probabilistic topic model [4]. It models each document as a multi-membership mixture of K corpus-wide topics, and each topic as a multi-membership mixture of the terms in the corpus vocabulary. This means that there is a set of topics that describe the entire corpus, each document can contain more than one of these topics, and each term in the entire repository can be contained in more than one of these topics. Therefore, LDA is able to discover a set of ideas or themes that well describe the entire corpus. Blei reported LDA in detail [4]. In this paper, we use LDA-based topic modeling to mine software assets and then support developers. Program comprehension is the activity of understanding how a software system mands, and thus need different kinds of assistant methods. We summarized two representative scenarios (Fig. 1): Program Users Scenario and Program Owners Scenario.
 Program Users Scenario For developers who are not owners or contributors of the program, they comprehend the program because they want to X  X se X  it, including maintenance and extension. We define this kind of developers as pro-gram users and this scenario as Program Users Scenario . Fig. 1(a) shows the procedure. During software maintenance and extension, program users need to be familiar with the source code firstly, to obtain a quick overview of the program and prepare for next steps. Then, they can fast understanding features which they are interested in. Next, with the understanding of the program in mind, they can start to fast using, including maintaining and extending the program. Program Owners Scenario For developers who are program owners or con-tributors , they are familiar with the program. When they perform maintenance tasks or extension tasks, understanding source code for them is easier than pro-gram users . The challenge of program comprehension arises when program own-ers want to improve code quality. We define this scenario as Program Owners Scenario . Fig. 1(b) shows the procedure. Firstly, they need to have an insight into source code, to prepare for the next step. Then, they need to find prob-lems of source code using methods such as test, code review [1] and static code analysis [13]. After finding problems, they can start the work of improving code quality, like refactoring [19].
 and Program Owners Scenario . In Program Owners Scenario , developers need to acquire deep understanding of source code and suggestions on how to improve code quality, so they need tools to find problems in source code and tools to help them improve code quality. Practitioners have provided various kinds of useful tools for developers, such as Arquillian 1 (a unit testing framework), Codacy 2 (a static analysis tool), and IntelliJ IDEA 3 (an IDE that can help developers to do code inspection and refactoring). However, in Program Users Scenario , developers need to understand programs quickly and then maintain or extend programs effectively, so they need tools or methods that can assist them in fast understanding and fast using. In this paper, we aimed at facilitating program comprehension with topic models in Program Users Scenario . We explored how to facilitate program comprehension with topic models in Program Users Scenario , and proposed JSEA (Java Software Engineers Assis-tant) [21]. JSEA uses LDA-based topic modeling to mine commented source code, and presents the results in an interactive top-down way [5], to support program comprehension in Program Users Scenario . All the data, results and source code of JSEA is available in Github 4 .
 generally taken to reduce noise and improve the modeling results, however, data preprocessing techniques and the reporting of parameters are not well docu-mented [6]. Therefore, we explored how to prepare for topic modeling through experimentation and we use JHotDraw 5 version 7.0.6 as research object. In order to guide experimentation, we proposed the following questions: (1) Q1: Which assets to be mined? (2) Q2: How to preprocess the data? (3) Q3: How to set the number of topics? comments in source code, and Javadoc provided by developers as candidates of assets to be mined. As for how to select an optimal asset, referring to the common used method of choosing an optimal value of K (the number of topics) [6], we tested all candidate assets and evaluated each through a Naive Criterion : (1) Label each topics. The categories include functionality , Java library topic , design , repetitive , multiple meaning and useless . The first three are positive, while the last three are negative; (2) Calculate the percentage of each category for each candidate; (3) Compare and analysis all results generated by varied candidates. The basic idea is that the result is better when the percentage of positive label is higher. We found that using commented source code can get the best topic modeling results. Therefore, for Q1, commented source code is the asset to be mined. extracted from source code is much more repetitive and predictable. Based on the characteristic of source code and prior research [10, 20], we customized our preprocess procedure through experimentation and brought five preprocess steps for Q2:  X  Step 1: Characters related to the syntax of the programming language (e.g.,  X  Step 2: Identifier names are split into multiple parts based on common  X  Step 3: Common English-language stopwords (e.g., the , it , on ) are removed.  X  Step 4: Copyright information are removed. For open source code, copy- X  Step 5: Nondescript information are removed. Libraries can be imported and results of the study [6]. For Q3, Chen et al. [6] reported that many articles chose an optimal value of K (the number of topics) by testing a range of K values and evaluating each in some way. In this paper, we use the same strategy and use the Naive Criterion to evaluate topic modeling results. As for the values of other parameters, we give recommended values through similar procedure and also allow users to set the value as their demands.
 topic modeling, and utilizes topic modeling results automatically to construct an interactive program comprehension system, including a project overview page and a search model called JSEA-Search. The project overview page shows all top-ics and related information (for example, top documents for each topic) about the program. As for JSEA-Search, software engineers can obtain semantic informa-tion related to the search query through JSEA-Search and use these information to support program comprehension. See our earlier publication [21] for more detail about JSEA. To evaluate JSEA, we recruited 12 volunteers for experiments and conducted several experiments with JSEA.
 Systems We conducted experiments on two open-source systems: JHotDraw version 7.0.6, and MALLET version 2.0.8. JHotDraw has 54KLOC (thousands of lines of code), while MALLET has 114KLOC.
 Participants We recruited 12 volunteers from School of Software Engineering in Tongji University as partic-ipants of our experiments. Eight of them were junior students, who were Java beginners. They belonged to Beginners Group, and identified as BG 1 to BG 8 ; others were master students, who have experi-ence of programing projects in Java. They belonged to Intermediate Group, and identified as IG 1 to IG 4 .
 Tasks We asked all participants to perform two kinds of tasks for each system. The types of tasks are: (1) Fast Understanding Task; (2) Fast Using Task. In reality, programs are hard to run in many cases, so to imitate the reality, partic-ipants were not allowed to run the system during performing all tasks. Table 2 shows Fast Understanding Tasks of both systems and Table 3 shows Fast Using Tasks of both systems. Procedure Evaluating developers X  familiarity with programs is hard to quan-tify. We asked all participants to perform two kinds of tasks for each system. The time spent on tasks and the correctness of tasks can reflect developer X  X  famil-iarity with programs. Six of participants are required to perform tasks with the help of a commonly used IDE (IntelliJ IDEA), others are required to perform tasks with the help of IDE and JSEA. Table 4 summarizes the distribution of participants.
 lyzed the correctness of the results. The correctness is calculated in the following way: One of authors, who is greatly familiar with both systems and JSEA, was asked to evaluate the correctness of results. We define the items (words, methods or classes) that considered relevant to each task by the author as total items , and define the intersection of total items and the items that considered relevant to each task by the volunteer as correct items . The correctness is the percentage that dividing the number of correct items by the number of total items . tems, tasks and participants. The control variables are software assets, prepro-cessing steps and the values of parameters. The dependent variables are time and correctness. Fig. 3 shows box plots for the experimental results. In Beginner Group, for JHotDraw, participants spent similar time on tasks, but participants who use JSEA have higher correctness; and for MALLET, participants spent similar time on tasks, and have similar correctness of tasks, regardless of using JSEA or not. In Intermediate Group, the affect of JSEA appeared more clearly. Participants who use JSEA spent less time on tasks and have higher correctness, especially for MALLET, which has a larger scale than JHotDraw. In conclusion, with the help of JSEA, developers can perform tasks faster and retain the correctness. It means JSEA can support developers to comprehend programs.
 esting phenomenons and analyzed the reason why these phenomenons appear. in three classes ( key classes ), so if participants can find any of them, they can find out more than half of the contents. However, seven participants only wrote a few correct contents of the menu bar like  X  X edo X ,  X  X ndo X  and  X  X oom X , and five of them are participants who were not required to use JSEA (the total number of participants who were not required to use JSEA is six). When we asked them where they found their answers, they told us that they found them in the  X  X amples X  package of JHotDraw, which provides several examples of JHotDraw framework. Unfortunately, they just found partial contents, but missed three key classes that also appeared in the source code of examples. As for participants who use JSEA (six persons), four of them wrote out more than half of the contents of menu bar, three of them said that the results searched by JSEA help them to find the key classes .
 did not give any right answers, three of them were not require to use JSEA, while two of them used JSEA; and for Task 3 of JHotDraw (See Table 2), three participants did not give any right answers, two of them were not require to use JSEA, while one of them used JSEA. Some participants said that the results searched by JSEA help them to find related classes.
 vide useful guides to developers in Program Users Scenario . In this paper, we analyzed different program comprehension scenarios, and elab-orated developers X  demands in different scenarios. In Program Users Scenario , developers need to understand programs quickly and then maintain or extend programs effectively, so they need tools or methods that can assist them in fast understanding and fast using. Considering the characteristics of Program Users Scenario , we facilitated program comprehension with topic modeling in an in-teractive manner, and developed JSEA (Java Software Engineers Assistant), a semi-automatic program comprehension assistant tool. The results of experimen-tation indicate that JSEA can assist developers in program comprehension and provide useful guides to developers in Program Users Scenario .
 and calculate the correlation between topics and search queries. Other interesting direction for future work would be to combine the code search system into JSEA, assisting software engineers with more powerful functionality.

