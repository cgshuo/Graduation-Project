 Federico Barber  X  Miguel A. Salido Abstract Many real-world problems in Artificial Intelligence (AI) as well as in other areas of computer science and engineering can be efficiently modeled and solved using constraint pro-grammingtechniques.Inmanyreal-worldscenariostheproblemispartiallyknown,imprecise and dynamic such that some effects of actions are undesired and/or several unforeseen inci-dences or changes can occur. Whereas expressivity, efficiency, and optimality have been the typical goals in the area, there are several issues regarding robustness that have a clear rel-evance in dynamic Constraint Satisfaction Problems (CSPs). However, there is still no clear and common definition of robustness-related concepts in CSPs. In this paper, we propose two clearly differentiated definitions for robustness and stability in CSP solutions. We also intro-duce the concepts of recoverability and reliability , which arise in temporal CSPs. All these definitions are based on related well-known concepts, which are addressed in engineering and other related areas.
 Keywords Constraint satisfaction problems  X  Robustness  X  Stability  X  Dynamic CSPs 1 Introduction Nowadays, many real problems can be modeled as Constraint Satisfaction Problems (CSP) that are solved using constraint programming techniques [ 3 ]. Much effort has been spent to increase the efficiency of constraint satisfaction algorithms: filtering, learning and dis-tributed techniques, improved backtracking, use of efficient representations, heuristics, etc. This effort has resulted in the design of constraint reasoning tools which have been used to solve numerous real problems. However, all these techniques assume that the set of variables and constraints, which compose the CSP, is completely known and fixed. This is a strong limitation when dealing with real situations where the CSP under consideration may evolve because of (i) changes in the environment or in its execution conditions, (ii) evolution of user requirements in the framework of an interactive design, and (iii) changes in other agents in the framework of a distributed system [ 19 ].

Since the nature of the real world is dynamic, techniques that attempt to model it should take this dynamicity into consideration [ 21 ]. It is easy to see that all possible changes to a CSP (constraint or domain modifications, addition or removal of variables) can be expressed in terms of addition or removal of constraints [ 19 ]. We remark that we only deal with aspects relaxations do not preserve optimality. This is an interesting, but much more complex issue.
By reading the research carried out in dynamic constraint satisfaction, we found that the terms robustness and stability are sometimes used interchangeably. Some authors refer to robust solutions with the same meaning that others use for stable solutions . For instance, one of the recent papers regarding dynamic constraint satisfaction [ 20 ] states that the strategies that have been devised to handle CSPs are  X  X ethods for finding robust solutions that are either morelikelytoremainsolutionsafterchangeorareguaranteedtoproduceavalidsolutiontothe altered problem with a fixed number of assignment changes X . In the Handbook of Constraint Programming [ 16 ], the authors state that  X  X here are three key concerns in solving dynamic CSPs. The first is to minimize the need for change, and thus to find robust solutions that are
In engineering, there is a clear agreement to distinguish between stable and robust con-cepts. However, the difference between stable and robust CSP solutions is not clearly stated. Robustness in CSP has multiple, sometimes conflicting, interpretations [ 11 ]. In some areas, robustness has been assimilated to stability [ 23 ] and more appropriately, CSPs with tempo-ral constraints has been related to noise tolerance [ 14 ], etc. Even in related areas such as Operation Research, the multiple meanings accorded to the term  X  X obust X  are open to debate sitivity, and even equity . In constraint satisfaction, only a few works make a tiny distinction between robustness and stability [ 6 , 9 ]. However, we consider that robustness and stability terms should be clearly distinguished, since they represent different behaviors of a CSP X  X  solution after changes in the environment: Robust solutions refer to solutions that are either more likely to remain valid after change, whereas stable solutions are solutions that can adapt to a new valid solution with only few assignment changes to variables.
 In this paper, we focus our attention on the  X  X obustness X  and  X  X tability X  concepts in CSPs. We propose general engineering-based and clearly different definitions for robust and stable CSP solutions. Moreover, we also introduce the concepts of  X  X ecoverability X  and  X  X eliability X  which are relevant in real-world temporal-CSP domains. Clear and common definitions are needed to be able to evaluate different alternatives. Afterwards, new research lines will arise: How can we assess the robustness or stability of a solution? What does it guarantee? How can we get a more robust solution? What is the relationship between robustness and other problem parameters, such as optimality and constrainedness? Is it possible to obtain a model of robustness?, etc.

Following some standard notations and definitions in the literature, we have summarized the basic definitions that will be used throughout this paper.
 Definition 1 A Constraint Satisfaction Problem (CSP) is a triple P = X , D , C ,where X C ={ C 1 , C 2 , ..., C m } that restricts the values that the variables can simultaneously take. constraints. 2 Incidences (or changes) in CSPs Since many real problems are dynamic, unexpected incidences in the problem scenario occur due to its dynamism, spurious actions, lack of complete knowledge, etc. Let Z = { z give rise to the finite set of possible changes in the CSP that models the problem. Let us also assume that each z i  X  Z is causally independent and has a probability p ( z i ) to occur. By applying the concept of probability distribution over Z , we introduce pd ( z i ) = p ( z i ) hood for z i to occur and m i = 1 pd ( z i ) = 1.

Each incidence z i  X  Z can be modeled as a finite set of changes in variable domains or constraints. Since changes in domains can be represented as unary constraints, it can be assumed that each incidence z i can be represented by a finite set of changes (restriction or relaxation) of constraints. In this paper, we are interested in robustness issues and how a CSP solution maintains its feasibility after occurrence of possible incidences. Therefore, we assume that, as incidences occur, the previous set of constraints always remains, so that the solution space can only be reduced. Thus, we will only consider changes that restrict the solution space (i.e., add new constraints to the previous existing ones). The removal or relaxation of constraints is not considered here since it does not restrict the solution space. Therefore, each possible incidence z i  X  Z is modeled as a new set of constrains Cz i to be added to the initial set of constraints, making the problem more restricted, or even inconsistent. Thus, the final CSP, after the occurrence of the whole set of incidences { z of the model, the order is not relevant.

We assume the incidences only restrict, but do not make empty the initial solution space; otherwise the problem would become inconsistent. Therefore, some of the feasible solutions of the initial CSP are also solutions of the final CSP. We also assume that we know the typology of expected incidents (and their probability). For example, in scheduling, we can expect delays in task X  X  durations, ready-times, etc. Obviously, it is not possible to determine the robustness-related features of a system if no information about the incidences is given. In this last case, we can obtain a rough estimation by means of the inclusion of random same way that a CSP models the real-world problem, the set of incidences Z should also model the set of expected incidences that can occur in the real world. Thus, Z should not be a set of randomly generated modifications of the constraints and domains of the CSP, but occur in the real-world problem that it is modeled by the CSP. 3Robustness Robustness is a common feature in our environment. Systems that belong to biological life, and maintain their main features despite continuous perturbations, changes, incidences or aggressions.Thus,robustnessisaconceptrelatedtothe persistence ofthesystem,itsstructure, its functionality, etc., against external interference:  X  X  system is robust, if it persists X .
Thus, in a general way,  X  X obustness X  can be defined as the ability of a system to withstand stresses, pressures, perturbations, unpredictable changes, or variations in its operating envi-ronment without loss of functionality. A system that is designed to perform functionality in an expected environment is  X  X obust X  if it is able to maintain its functionality under a set of incidences. For example, an algorithm is robust if it continues to operate despite unexpected inputs or erroneous calculations .

Intuitively, the notion of robustness is easy to define, but its formalization depends on the system, on its expected functionality, and on the specific set of incidences to be confronted [ 15 ]. No general formal definition of robustness has been proposed, except a few exceptions or particular cases. Specifically, Kitano [ 12 ] mathematically defines the robustness ( R )ofa functional system (SYS) with regard to function ( F ) against a set of perturbations ( Z )as(in a simplified way): that returns zero when the system SYS fails under z or it returns a relative viability ] 0 , 1 ] otherwise. For instance, if production drops 20 % under a certain perturbation (z) compared with standard production, then 0.8 is returned .

Expression ( 1 ) formalizes how a system (SYS) is able to maintain a certain level of its SYS 1 is more robust than SYS 2 with regard to an expected functionality F against a set of perturbations Z when:
The application of expression ( 1 ) is highly dependent on the system being assessed. Let us apply ( 1 ) to CSPs:  X  S is a solution of the CSP, whose robustness we want to assess. Robustness is a concept related to CSP solutions, not to CSP itself. Thus, the system SYS in ( 1 ) can be related to the solution S in a CSP.  X  Z is the discrete set of unexpected incidences.  X  F is the expected functionality of the system. In CSP, the expected functionality of a solution is its feasibility.
 Therefore, by applying ( 1 ), the robustness of a CSP solution ( S ) can be defined as follows: Definition 3 A solution ( S )ofaCSPis r-robust with respect to a set of incidences Z ,where each z i  X  Z has a normalized probability of occurrence pd ( z i ) , when: is the consistency of S after z i :  X  F ( S , z i ) = 1iff S also satisfies C  X  Cz i .
Robustness of a solution represents its probability of remaining a solution of the new problem after Z and it varies from 0 to 1 since z
Fromexpression( 3 ),wecanseethatthealgorithmforcalculatingtherobustness r-robust of a solution S against a set of incidences Z is straightforward. It only requires to check whether of checking its feasibility is O ( n ).

On the other hand, note that robustness does not require insensitiveness of the problem modeled by the CSP. For instance, the constraints of the problem could dramatically vary due to z i , such that Cz i could greatly reduce the solution space. However, a robust solution S with respect Cz i would remain feasible after the incidence.

Note that the robustness of a solution S does not depend on the behavior of S against an Z . Thus, the robustness of S depends on the probability p ( z i ) of each possible incidence z  X  Z and how Cz i affects to the feasibility of the solution F ( S , z i ) . In other words, the only way to characterize the robustness level of a given CSP solution is to determine how its feasibility is maintained over several levels of probability of incidences.

Note that we do not take into account other aspects, that have usually been taken into account when the robustness of a CSP solution is assessed by other authors (e.g., the number of variables that must change their values to make the initial solution feasible after the a solution is not more/less robust under a given incidence if the solution needs to be more/less repaired to deal with the incidence. We claim that robustness cannot be assessed on the basis that only small changes are necessary to obtain a new feasible solution. In problems related with satisfiability, robustness should be related to feasibility maintenance. 3.1 Example Let us apply the above definition ( 3 ) to the following example. Let P be a CSP with two  X  C 1 : x 1 + x 2  X  12  X  C 2 : x 2 + x 1  X  6  X  C 3 : x 2  X  x 1  X  2  X  C 4 : x 1  X  x 2  X  4
Figure 1 represents the solution space of the CSP, which is composed of 21 solutions. Let us suppose the following set Z of expected incidences:
The robustness of each solution can be assessed according to expression 3 . Then, we can deduce that ( x 1 = 5 , x 2 = 3 ) and ( x 1 = 5 , x 2 = 4 ) are the most robust solutions, pd R
Even though the solution space of the above example is convex, note that it is not required for assessing the robustness of CSP solutions, nor an implicit representation of the CSP constraints. Moreover, the robustness of each solution can be assessed independently of the assessment of other solutions. 3.2 What does r-robustness guarantee? Themorerobustsolutionis,themorelikelyitwillremainvalidafterchangesintheconstraints. The following conclusions can be obtained from ( 3 ): (i) A 1-robust solution is a solution that maintains its feasibility over the whole set of expected incidences, (ii) a 0-robust solution is a solution that becomes inconsistent with any expected incidence that may occur, and (iii) an pondered incidences. For instance, the solution ( x 1 = 4 , x 2 = 2 ) of the above example is able to maintain robustness over 70 % of the expected likelihood incidences. Specifically, this 4 Stability Stability is an old concept that derives from astronomy and physics [ 22 ]. Loosely speaking, a solution (meaning an equilibrium state) of a dynamical system is said to be stable if small Perturbations can be viewed as small differences that occur in the actual state of the system [ 11 ]. Therefore, by applying this informal definition to CSPs, a solution is stable if small modifications of the constraint set allow a new solution (new consistent variable assignment) that remains close to the original solution: Definition 4 A solution S of a CSP is s -stable, with respect to an incidence z i ,ifthereexist a new feasible solution S in the s -neighborhood of S .
The neighborhood of solutions can be formally defined in terms of norms in the n -dimensional space [ 8 ]. Thus above definition can be detailed as follows.
 Definition 5 A solution S = ( x 1 = v 1 , x 2 = v 2 , ..., x n = v n ) is s-stable if, given an where . is some n -dimensional norm defined in the solution space to evaluate the difference between S and S .

In relation to the implementation of n -dimensional norms, we have: 1. Metric domains, we can apply the Euclidean distance between S and S , with a optional weighted factor  X  i for each assigned variable x i : but normalizing with the maximum distance between any two tuples in the space of solutions. Note that the domains { d i } are finite in a CSP. Thus, the normalized relative distance in a metric domain between S and S becomes: Note that the similarity given in ( 5 ) between S and S may be very low if the two solutions
S and S are very close in the n -dimensional space even though all the variables of S change their values. This n -dimensional norm measures the relative distance between S and S , such that S  X  S z  X  X  0 , 1 ] due to a change in the value of one or all variables. 2. Non-metric domains (like non-ordered sets of values), the Hamming distance ( H ) can be applied. This n -dimensional norm measures the number of variables that have different values in S and S . Therefore, the distance between S and S on non-metric domains can be defined as: with respect to n , such that this criterion evaluates the relative number of variables that change their values and S  X  S z  X  X  0 , 1 ] . Note that this concept is related to the super-solution concept given in [ 10 ].

These measures evaluate the closeness of solutions in the space of solutions. Therefore, feasible solution S in the n -dimensional space of the CSP, by applying expression 5 or 6 depending on metric or non-metric domains. In other words, we should determine how much the new solution S differs from the initial one S to address the incidence. A robust solution is a 0-stable solution.

The proposed measures of s -stability require finding a solution in the closest neighborhood of S , among the complete set of new feasible solutions, such that deviation with respect to the previous solutions S is minimized. Let us denote N ( S , z i ) as the value of S  X  S for the closest solution S to S , after the occurrence of z i : Note that N ( S , z i ) = 0iff F ( S , z i ) = 1 (i.e.,: S satisfies Cz i ).
According to definition 5, we can define the s -stability (STA) of a solution ( S )againsta given set of perturbations Z with a probability P as: 0 to 1 in both cases, metric and non-metric CSPs. The lower its s -stability is, the more stable the solution is.

Obtaining stability of a CSP solution implies obtaining N ( S , z i ) for each z i  X  Z ,which derives in a Constraint Satisfaction and Optimization Problem (CSOP) whose constraints are C  X  Cz i and whose optimality criteria is to minimize S  X  S (Eq. 7 ). In general, solving a CSOP is NP-hard. However, this computational cost can be reduced by searching for a solution S in the closest neighborhood of S . Note that the notion of distance between S and S should take into account whether or not the domain is metric. Therefore, an incremental process can be defined (Algorithm 1 for metric domains and Algorithm 2 for non-metric computational cost for obtaining stability of a solution can be decreased if a solution exists in the close neighborhood of S . In Algorithm 2 , each iteration  X  in the process has a cost ( d i )  X  . Thus, computational cost for obtaining stability of a solution can be decreased if a solution exists in the close neighborhood of S .
 4.1 Example and least robust solutions.
 For instance, the stability of solution ( 4 , 6 ) , according to expression ( 8 ), is:
Thus, Table 1 , ( x 1 = 5 , x 2 = 4 ) is the most robust (0.9) and the most stable solution (0.1/ 4.2 What does s -stability guarantee? Stability of a solution S represents the expected minimum normalized distance between S and a new feasible solution of the new problem after Z . The more stable the solution, the less need for change will be necessary to obtain a new solution after changes in the constraints. The following conclusions can be obtained from (Expression 8 ):  X  A solution S , with STA S Z = 0, is a 1-robust solution. It is fully stable over the whole set of expected incidences.  X  A solution S of a non-metric CSP, with STA S Z = n , requires changing the assignments of the whole set of variables to become consistent against any expected incidence that may occur. A solution S of a metric CSP, with STA S Z = 1, requires moving to the far extreme point of the solution space to become consistent against any expected incidence that may occur.  X  A solution S of a non-metric CSP, with STA S Z = k , requires changing k variables, as average, to become consistent over the whole set of probabilistically pondered incidences.
A solution S of a metric CSP, with STA S Z = k , requires moving to a distance ( k  X  pondered incidences. 5 Temporal constraint satisfaction problems A Temporal Constraint Satisfaction Problem (TCSP) is a subtype of CSPs, where variables represent temporal primitives (time points or temporal intervals), such that interpretation domain is the time, variable assignments are temporally ordered and solutions have a temporal times of tasks (see Fig. 3 ).
Besides robustness and stability concepts, in TCSP, not only is it important to know how different the new feasible solution S is from the original one S , given an inci-dence z i (i.e., stability), but it is also important to know (i) how long the new solution S differs from the initial solution S (recoverability), and (ii) how long the actual solu-tion S can be maintained after the incidence (reliability). Therefore, two new proper-ties appear in relation to the temporal stability or temporal robustness : recoverability and reliability .
 An example of TCSP: a scheduling problem Figure 3 a shows a TCSP that represents a flow-shop scheduling problem with two jobs J as a rectangle whose length corresponds to its duration. This problem can be modeled as a TCSP, where variables represent time points (starting or ending times) of different activities ( x to be the optimal solution. The projection of variables x ij on time represents the optimal assignment of variables of the TCSP. 5.1 Recoverability Despite proactive approaches, it is clear that robustness is not always completely guaranteed. Therefore, recovery strategies should be used once disturbing events occur to keep the feasi-bility of the pre-computed solution. Robustness and recoverability are closely related and, in some optimization frameworks, they have been unified into an integrated notion of recover-able robustness [ 13 ]. For TCSP, where solutions are projected over time, the recoverability of a solution can be measured by the required amount of time (  X  t ) (after an incidence z i that temporal variables, in a solution of a TCSP, are distributed over time, so we can define that a  X  t-recovered solution maintains the same assigned values in the variables from  X  t after the incidence: a recovery process is to minimize  X  t . Likewise, since the variables of a TCSP are temporally a b c d ordered(i.e.,theyareinstantiatedovertime),theobjectiveofarecoveryprocessistominimize the set of variables, from time t (when the incidence occurs) to t +  X  t that require changing their values to obtain a new feasible solution. Definition 6 A TCSP solution S is h-recoverable iff, at most h variables (consecutive vari-ables after the incidence occurs) require changing their values to obtain a new feasible solution S .
 Variables of a TCSP are instantiated over the time line, such that variables of a solution S (see Fig. 2 ). The initial solution is recovered after x k + h ,that is after t +  X  t .
Note that the definition of h -recoverability is similar to the definition of ( h , 0 )  X  super solutions where if h variables lose their assigned values, another solution can be found by reassigning a new value to these variables.

Theonlydifferenceisthat,in h  X  recoverability ,thevariablestoberepairedareconsecutive over time, while, in ( h ,0)-super solutions, the variables to be repaired are not consecutive.
From Definition /refd6, it can be concluded that 0  X  h -recoverability  X  n . The lower is h -recoverability, the more recoverable a solution is. A 0-recoverable solution S does not require changing any variable after incidence to maintain the feasibility of S (equivalent to 1-robust solution) An n -recoverable solution S does require changing all the variables after incidence. Thus, h -recoverability can be considered to be a temporal s -stability. 5.2 Reliability In engineering, reliability is associated with the confidence that a system will perform its intended function during a specified period of time under stated conditions, as well as under unexpected circumstances. Mathematically it can be expressed as: (which is assumed to start from time zero). There is always some chance for failure, but R ( t ) means that the system has a specified probability that it will operate without failure before time t .

In TCSP, variables of solution are distributed over time. Thus, a solution found initially may be invalid for variables that are related to a time greater than  X  t after incidence. Thus, by applying the above concepts, we can assess that a TCSP solution is  X  t-reliable ,ifgiven variables that represents the solution of the problem from time t to t +  X  t maintain their assigned values: where Sol  X  t covers the set of variables from time t to t +  X  t . The way to obtain a reliable solution is to maximize  X  t , or alternatively, to maximize the set of variables from time t , (when incidence occurs) to t +  X  t ) that can maintain their values (Fig. 4 ).

Similarly to recoverability, the reliability of a solution S can be defined in terms of the number of assignments in S that remains valid after the incidence occurs (i.e., they can take part of a solution of TCSP Z ).
 Definition 7 A TCSP solution S is u-reliable if, at least, u assignments of variables in S (consecutive variables after the incidence occurs) can take part of a solution of the TCSP Z .
As corollary of Definition 7 ,ina u -reliable TCSP solution S = ( x 1 = v 1 , x 2 = v 1  X  k + u  X  n , can take part of a solution of TCSP Z , while the variables from t +  X  t ( x maintained from x k to x k + u , that is from t to t +  X  t .
 As in the above case, from Definition 7 , it can be concluded that 0  X  u -reliability  X  n . maintain values in any variable after incidence for maintaining feasibility of S .A n -reliable solution S can maintain the assigned values in all variables. Therefore, we can consider that u -reliability is a concept that is related to the temporary maintenance of robustness from time of occurrence. Moreover, a n -reliable solution is a 0-recoverable solution, which can also be considered to be a temporally 0-stable or 1-robust solution.

Note that h-recoverability and u-reliability of a solution S are not contradictory nor com-plementary concepts. If an incidence occurs at time t , (i) the initial solution S can be main-Recoverability and reliability in the example With respect to the scheduling problem presented in Fig. 3 ,Fig. 3 b shows a robust solution. To this end, some buffer times have been included between some activities to absorb incidences. For instance, if a resource is broken for a short time, (incidence in Fig. 3 b), the solution is not affected by the incidence. Thus, all assignments to variables remain valid. Furthermore, the rest of the variables maintain the same values. Moreover, the typical trade-off between robustness and optimality can be observed in Fig. 3 a/b.
 x . on , x 23 . off ), do not require to change their values. On the other hand, Fig. 3 dshowsa further variables must change their values. 6 Generalizing concepts In the previous sections, the concepts of robustness, stability, recoverability, and reliability have been defined by analyzing how a solution S absorbs or can be adapted to cope with an incidence z i . These concepts can be generalized, such that we can assess the achievable constrainedness of the CSP which is inherent to the problem. Thus:  X  Robustness guarantees that perturbations can be absorbed by the solution. Thus, robustness decreases as the level of incidences increases.  X  Stability guarantees that the consequences of perturbations can be minimized by the new solution. Thus, stability decreases as the level of the incidences increases.  X  A low-restricted CSP with a large solution space will usually allow more robust and stable solutions.  X  A more optimized solution will usually be more sensitive to changes in the environment.
Optimal solutions are usually located at edges of solution X  X  space where robustness is lowest. There exists a clear trade-off between robustness and optimality/quality [ 4 ].
These ideas introduce the main concepts to which robustness, stability, recoverability, and of solutions with: (i) the constrainedness of CSPs (which is a problem-dependent feature); optimality of S (which is a feature of each solution). Thus, typology of expected incidences and their stochastic features, optimality of solutions, and constrainedness of problems are the of solutions in CSPs. A more detailed model of robustness would allow us to parameterize the implicit relations presented in Fig. 5 , by relating the concepts of robustness with the characteristics of the problems or their application scenarios.

The evaluation of the robustness, stability, recoverability, and reliability of a solution S can be viewed as a guarantee of the behavior of S with respect to the expected set of incidences Z . Moreover, recoverability and reliability can be considered as forms of partial robustness, where part of the solution remains valid. Likewise, the concepts and situations described in this section occur not only with TCSP, but more generally with dynamic CSP [ 5 , 9 ] and, particularly, with Planning and Scheduling problems modeled as CSP.
 7 Conclusions While expressivity, efficiency, and optimality have been the typical goals in the development of CSP techniques, there are robustness-related issues that have received less attention. How-ever, robustness requirements have a clear relevance in dynamic environments (usually with incomplete or imprecise knowledge). This work aims to review the concepts of robustness, stability, recoverability, and reliability in dynamic Constraint Satisfaction Problems. This supposes an advance in the state of the art in constraint programming, and new models and techniques can be developed to achieve this properties in CSP solutions.

The general notion of robustness includes several different concepts. Despite the existence of several works on dynamic CSP, there is still no clear and common definition of robustness-related concepts. In this paper, these concepts have been characterized and formalized, such that they can be used, in a general way, to assess robustness-related features of solutions in CSPs.

In this paper, a definition and formalization of these concepts has been proposed, on the basis of their meaning in other areas of science, as well as on how they can be evaluated, and what it guarantees. They can be used, in a general way, to assess robustness-related fea-tures of solutions in CSPs. Particularly, the introduced concepts have been applied to simple problems, which allows us to contrast the differences between them, as well as, the different maintained during (or restored after ) a given time. This different behavior becomes relevant when a CSP is applied to solve real-world problems in a dynamic and partially unknown world. From this point, other relevant issues remain open. Particularly, the design of effi-cient algorithms for obtaining robust, stable, recoverable, and reliable solutions is subject of relevant research lines.
 References
