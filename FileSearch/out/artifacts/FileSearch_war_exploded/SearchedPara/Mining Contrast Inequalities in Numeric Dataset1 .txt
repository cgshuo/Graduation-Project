 Capturing the distinguishing and important characteristics between two or more classes of data is a meaningful task in data mining. Such knowledge is very useful for scien-significantly between different classes of data. They have been used for understanding leukaemia and other bioinformatics applications [2]. Based on the concept of EP, other delta-discriminative EP [4], diverging pattern [5]. 
Similar to EP discovery, class contrast function mining is proposed in [6]. A func-numeric dataset directly. Moreover, there is another kind of contrast exists besides EP and class contrast function. Example 1. Suppose dataset D records the average incomes of five different occupations at different cities. The samples are classified into two classes according to the city is coastal area or inland area. The samples are list as follows. is held by all coastal samples while not held by inland samples. Though Example 1 is a simple synthetic example, it reveals such significative relations in the real world. For example, a notable symptom of an influenza patient is that her/his body temperature is higher than 38 degrees centigrade. Our experimental study dem-onstrates that many relations of this kind exist in real-world datasets. different from EP and class contrast function. Formally, we define this mining task as follows. Definition 1 (Support). Given a dataset D containing numeric attributes. Let ieq be an ieq , is defined as n /| D |, denoted as Sup ( ieq , D ) = n /| D |. multi-class problem can be converted into n two-class problems, to keep our discussion simple, we only consider two-class problem in this work. That is, given a dataset, we divide samples into positive part and negative part. To the best of our knowledge, there is no previous work on finding such kind of ine-qualities has been done. Two contrast mining tasks that are most closely related to our work are disjunctive EP [7] and class contrast function [6]. The disjunctive EPs allows containing logical operations, such as AND, OR, XOR. So, they contain more expres-sive contrasts compared with EPs. In other words, disjunctive EPs are generations of traditional EPs. However, disjunctive EP is different from contrast inequality, since it cannot express the inequality relations among attributes in data. And, it does not con-sider the numerical operations among attributes in data. The main difference between class contrast function and contrast inequality is that contrast inequality is a relational expression, and the result of contrast inequality is a Boolean value, while the result of a class contrast function is a numeric value. 
In general, we have following challenges on mining contrast inequalities: i) How to discover one or more contrast inequalities from the numeric dataset. ii) How to discover contrast inequalities with high discriminative power. iii) How to discover actionable contrast inequalities for domain applications. As the first study on contrast inequality mining, we focus on the first two challenges. The third challenge depends on expert knowledge of the application, and will be the subject of future research. 
The definition of contrast inequality shows that one contrast inequality contains one relational operator, several numerical operators, and several variables. As it is hard to methods, needing user defined hypothesis, to discover such inequalities from dataset. This study applies Gene Expression Programming (GEP) [8, 9] to contrast inequality mining. GEP is the newest development of Genetic Algorithms (GA) and Genetic Programming (GP). GEP has strong evolution power, and each candidate solution (individual) in GEP is coded in a flexible structure. Moreover, we design a new indi-preliminary knowledge of GEP will be introduced in Sec. 2. 
The main contributions of this work include: (1) introducing the concept of contrast inequality, (2) designing a two-genome chromosome structure to guarantee that each method to discover contrast inequalities, (5) giving an extensive performance study on proposed methods and discussing some future studies. Section 3 presents the main ideas used by our methods and the implementation of the Section 5 discusses future works, and concluding remarks. 2.1 Contrast Mining As introduced in Sec. 1, EPs are itemsets whose supports change significantly from one class of data to another. The EP mining algorithm was firstly proposed in [1]. Then, several efficient methods have been designed, including: constraint-based approach [10], tree-based approach [11, 12], projection based algorithm [13], ZBDD based method [7], and equivalence classes based method [4]. The complexity of finding emerging patterns is MAX SNP-hard [14]. 
EPs have high discrimination power [14], many EP-based classification methods have been proposed, such as CAEP [15], DeEPs [16], JEP based method [3]. accurate classifiers. These research results showed that EP based classification methods often out perform some well known classifiers, including C4.5 and SVM [14]. Moreover, EP has got success applications in bioinformatics. For example, it has been used for understanding leukaemia and other applications [2]. Based on the concept of EP, several variants of EP have been introduced. Jumping EPs are EPs which are found in one distinct class of data [3], disjunctive EPs general-izes EPs by introducing conjunctions for pattern description [7]. Delta-discriminative EP defines EP in a more general way [4]. Diverging patterns are itemsets whose fre-quencies change significantly different in two datasets [5]. Class contrast functions are functions whose accuracies change significantly between two classes [6]. Different difference between symbolic regression and class contrast function mining is that the former just considers the accuracy while th e latter not only considers the accuracy but also the accuracy changes in different classes of dataset. 2.2 Preliminary Concepts of GEP GEP is a new evolutionary method inspired by Genetic Algorithms (GAs) and Genetic same as those of GA and GP. Compared with the classical linear GA and the traditional GP, the coding of individuals (candidate solutions) in GEP is more flexible and effi-cient [9]. The main players in GEP are only two: the chromosomes and the expression trees. For each individual in GEP, the genotype is represented by a linear symbol string of fixed length (chromosome), and the phenotype is represented in a hierarchical GEP is a genotype/phenotype system that exhibits the simplicity of GA, while main-tains the complexity of GP. 
One or more genes compose a chromosome. Each gene is divided into a head and a tail. The head contains symbols that repr esent both functions and terminals, whereas the tail contains only terminals. For each problem, the length of the head h is chosen by maximum number of arguments of the element in F is 2, then n = 2. 
In GEP, the length of a gene and the number of genes composed in a chromosome are fixed. No matter what the gene length is, genes may code for expression trees of different sizes and shapes. Through parsing the expression tree from left to right and obtained. Due to the special structure of GEP individuals, any genetic operation made in the chromosome, no matter how profound, always results in a valid expression tree. So all individuals evolved by GEP are syntactically correct. operates iteratively evolving a population of chromosomes, encoding candidate solu-tions, through genetic operators, such as selection, crossover, and mutation, to find an optimum solution. The main steps of GEP consist of following steps [9]: GEP has been widely used in data mining research fields, including symbolic regres-sion, classification, and time series analysis [17-19]. data. Specifically, we present a new chromosome structure in GEP to encode contrast inequalities efficiently. 3.1 Two-Genome Chromosome GEP seeks the optimal solution through evolving the population. Each individual in the population is a candidate solution to the problem. It is composed of one or more genes, length of gene is fixed, thus the complexity of the mathematical expression presented by one gene is limited. To break this limitation, several genes are connected by linking functions, such as plus, multiplication, to express complex expressions. 
When applying GEP to contrast inequality mining, one basic idea is that each GEP individual must be a valid inequality. Then, the calculation power of GEP can be fully used. To this end, a simple idea is using relational operator, such as less than, greater than, as the linking function. However, this method has an obvious disadvantage. First, the number of genes in a chromosome is fixed as two. Second, researches in [9] dem-power than a single long gene. In a word, this method limits the evolution power of GEP. 
We design a new GEP individual structure, called two-genome chromosome , in this work. A two-genome chromosome has following characteristics: i) A two-genome chromosome is composed of two genomes, and one relational ii) A genome is composed of one or more genes. Genes in genome are connected iii) There is no relational operator in left or right genome. Thus, a two-genome chromosome contains only one relational operator, several nu-merical operators and several variables. Moreover, the structure of two-genome guarantees that any two-genome chromosome can be decoded to a valid inequality. Example 2 gives an example of a two-genome chromosome coding an inequality. Example 2. Given a two-genome chromosome, in which the left genome and right genome is composed of two genes, respectively. Let the function set be {+, -, *, /}, the phenotype. The expression tree and corresponding inequality are also illustrated. 
The gene parameters, such as head length, number of genes, linking function, for left genome and right genome are determined by the user. No matter what the values are, also be used in the two-genome chromosome. In this way, the two-genome structure keeps the flexibility without losing the GEP X  X  calculation power. Note that, when the relational operator is not-equal (  X  ), the contrast inequality mining can be converted to mining a function which is accurate in one class but not in other classes. The contrast inequality equals to a class contrast function in this case. 3.2 Fitness Function Design GEP follows the principle of natural selection to evolve candidate solutions. A being selected in the next generation is defined as: Based on Equation (1), the individuals with larger fitness have larger opportunity to be selected to reproduce with modification, leaving progeny with new traits. 
The aim of our work is finding contrast inequalities whose supports change sig-nificantly in different classes of data. Since the fitness function evaluates all candidate solutions and guides the evolution direction, the fitness function is important in GEP application. fitness, denoted as fit ( g i ), is calculated as follows. Equation (2) shows that the fitness of the individual whose support changes more sig-zero-frequency problem, a pseudo-count of 1 is added to the fitness function. 
According to Equation (2), the fitness va lues are all positive numbers. The maximal the difference between the supports in D p and D n as the fitness function, Equation (2) has an advantage: it guides GEP to evolve contrast inequalities that has zero support in D . In EP, this kind of EP is called jumping EP, which has been proved to be very useful in constructing classifiers. 3.3 Relational Operator Mutation Selected individuals are reproduced with m odifications to create the necessary genetic diversity in population. Inspired from the nature, several modifications, like mutation, deletion and insertion, are applied during the replication of the genes. In basic GEP, the genetic operations include mutation, transposition and recombination. 
Mutation is the most efficient genetic operator to introduce random modifications into a given chromosome [9]. No matter how mutation operator performs, it must keep the structural organization of individuals remain intact. To this end, any symbol in the gene heads can change into another function or terminal, while terminals in the gene tails can only change into terminals. 
Functions in the basic GEP belong to the same type, they can occur anywhere at the gene head. However, in the two-genome chromosome, the relational operator cannot occur in the gene head, and functions in the gene head cannot be a relational operator. The mutation operation must remain the chromosome as a valid inequality, when ap-plying the mutation operator to a two-genome chromosome. 
There are two strategies for relational operator mutation in two-genome structure: For the first strategy, the mutation operator has no effect to the relational operator. As chromosome. Specifically, we define a relational operator set besides the function set and the terminal set. The relation operator set contains all available relational operators. Then, the relational operator in the individual randomly changes into another relational operator. For other symbols in the gene heads and tails, they follow the same mutation relational operator change equals to the mutation rate. 
For the other two genetic operations, transposition and recombination, we keep them as same as in the basic GEP, since their operation objects are symbols in genes. The details of transposition and recombination can be found in [9]. 3.4 GEP-Based Mining Method Algorithm 1 describes the pseudo code of contrast inequalities mining by GEP. Algorithm 1: Contrast_Inequality_Mine(D1, D2) Input: (1) sample set of positive class: D1; (2) sample set of negative class: D2. Output: the individual with the highest fitness: bestIndividual . begin 2. FitEval(pop,D1,D2) 3. bestIndividual  X  GetBestIndividual(pop) 4. Repeat 5. pop  X  Select(pop) 6. RelationalOperatorMutation(pop) 7. Transposition(pop) 8. Recombination(pop) 10. bestIndividual  X  GetBestIndividual( ) 11. until StopCondition( ) = true 12. return bestIndividual end. records the best individual discovered so far. From Step 5 to Step 8, selected individuals are modified by genetic operators. The relational operator in two-genome chromosome undergoes mutation operator in Step 6. The stop conditions include: the number of gen-thresholds are discovered; the running time equals to the predetermined value. To evaluate the performance of our GEP-based contrast inequality mining method, we implemented all proposed algorithms in Java. The experiments were performed on an Intel Pentium Dual 1.80 GHz (2 Cores) PC with 2G memory running Windows XP operating system. Table 1 lists the GEP related parameters in our experiments. 
We selected two microarray datasets, Colon Tumor and ALL/AML, which were Bio-medical Dataset (http://datam.i2r.a-star.edu.sg/datasets/krbd). Moreover, we ap-plied our method to datasets selected from UCI Machine Learning Repository [21]: iris, breast cancer and wine. Both iris and wine contain three classes of samples, we divided them into three 2-class datasets, respectively. The samples containing missing values are removed from the original dataset. Table 2 lists the characteristics of datasets. 
First of all, we compared the results of contrast inequality mining with EP mining to discretization method [22] is used to partitio n numeric attributes into two disjoint in-tervals. Attributes are discarded if there is no cut point. As a result, 35 attributes are selected from Colon Tumor and 866 attributes are selected from ALL/AML. Though GEP can deal with as many as attributes theoretically, the large number of attributes Tumor and ALL/AML datasets in EP mining, we selected 20 attributes with top in-formation gains in our experiments. We set the maximal generation number of evolu-tion is 20000, and did 20 independent running for each dataset. The results show that, average generation number for evolving the best individual is 9908.7. For ALL/AML dataset, the average fitness is 28, and the average generation number for evolving the best individual is 3.2. Due to the space limits, we just list three best discovered contrast inequalities. The attributes are sorted in information gain descending order. We use the alphabet to index the attributes. 
Table 3 and Table 4 show that the result of contrast inequality mining is better than positive class is 17:0, and the highest contrast ratio of discovered EP for negative class is 27:0, while the contrast ratio of discovered contrast inequality for positive class is frequency in positive class and 0% frequency in negative class, it is easy to convert it into a contrast inequality with 100% freque ncy in negative class and 0% frequency in ALL/AML, both EP mining and contrast inequality mining can get good results. 
Table 5 to Table 11 lists the discovered contrast inequalities in other datasets. The these real-world datasets. From the fitness, we can see that most discovered inequalities close to the best solutions. So, our proposed method is effective, and it is a desirable work to discover contrast inequalities. data mining task. Based on previous contrast mining studies, we propose a new type of contrast mining, called contrast inequality mi ning. The concept of contrast inequality is operator, is discovered from numeric dataset directly. Contrast inequality mining is a challenging work. As GEP has many advantages on numeric calculation, we apply GEP chromosome structure to guarantee that each individual in GEP population is a valid evolving contrast inequalities. The experimental results show that our proposed method is effective. Compared with EP mining, more discriminative results are discovered in power are discovered in the real-world datasets. 
There are many works worth to be deeply analyzed in the future. For example, how to evaluate the discovered contrast inequalities, and how to make use of contrast ine-qualities to construct classifier are desirable future studies. Moreover, we will consider how to find actionable contrast inequalities by introducing domain knowledge into the mining process. Acknowledgments. The authors thank to Guozhu Dong for his helpful comments. 
