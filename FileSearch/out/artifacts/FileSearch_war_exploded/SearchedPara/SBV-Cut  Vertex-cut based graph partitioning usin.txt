 1. Introduction individuals, to concept maps and ontologies.
 Example 1.1. StrandMaps within the NSDL's educational resources.
 tions using the graph edges that connect them.
 vertex-cuts ) whose removal partitions the graph into the target number of disconnected components:  X  tioning [15,25,29,38,46] and minimum edge-cut based algorithms [7,12,19,20,26,30 these algorithms is that they select (based on different criteria) a set of edges to be removed and an entry point to another partition.  X  spective partitions.
 surface, the two problems are known to have different characteristics and difficulties [18] . when we use these vertices as bridges between multiple partitions. 1.1. Finding balanced vertex-cuts for a minimum sized cut which places the source and target in different partitions. achieve an approximation ratio of O dratic program formulation of the problem, which can be solved in polynomial time [18] . 1.2. Contributions of this paper balanced vertex-cut of the graph: Let us be given a directed graph, G =( V , E ); we call a vertex, v
The organization of the paper is as follows:  X  titioning solutions ( Section 2 ).  X  graph ( Section 3 ).  X  We then present a vertex-cut based graph partitioning algorithm called vertex-cuts ( Section 4 ).  X  itors and works several orders more efficiently than constraint-minimization based approaches.
We conclude the paper in Section 6 . 1.3. Related work
We review common graph clustering/partitioning approaches. 1.3.1. Edge-cuts mum cut tree is calculated to find graph clustering using the minimum cut algorithm. this dense matrix to apply spectral clustering. al. [46] proposed a global criterion, the normalized cut. Mattheyses (FM) algorithm [19] .
 In [48] , the local refinement is enhanced with load-balancing for achieving higher quality solutions. The k -way partitioning can be generalized by recursive bisection.
 titioning based on a labeling-independent metric.
 (see Section 5 ).
 In this paper, we compare SBV-Cut against METIS , Chaco , and however, our algorithm outperforms all of the three algorithms (see Section 5 ). 1.3.2. Vertex-cuts balanced vertex separator [18,9] can be used to balance the workload, while minimizing communication. underlying problem in terms of constraints and solves the resulting mixed-integer programming. Let al. [9] also denote the maximum number of node-disjoint paths between u and v as
In addition to  X  ( n ), the problem specification in [9] also takes as input an dinality of any separator. In the rest of this paper, we refer to version of the vertex separator problem as (  X  ,  X  )-optimal vertex-cut problem.
As we show experimentally in Section 5.3 , the input values of time consuming, and thus unpractical, for large data sets. We discuss this in Section 5.3 in detail. 2. Problem formulation will also apply (when suitably adapted) in the context of vertex-cuts. 2.1. Background: edge-cuts and quality
An edge-cut simply is a set of edges whose removal partitions the graph into two.
De fi nition 2.1. Edge-Cut
Let G =( V , E ) be a graph. Let E  X  p E be a set of edges such that G  X  given a minimality criterion, the edge-cut E  X  is minimal and/or  X  the resulting graph partitions (or clusters), C 1 , C 2 , mogeneity and compactness, cluster separation, and cluster integrity).
Some clustering criteria, such as expansion [29,20] and modularity [41] , combine both of the above. 2.1.1. Edge-cut based expansion
Let the edge-cut E  X  be such that the input graph G is partitioned into two clusters, C note the number of edges in the edge-cut that separates the vertices in C the edge-cut, E  X  is defined as follows [29,20] : where | C 1 |and| C 2 | denote the number of vertices in the clusters, C cut E  X  which partitions G =( V , E ) into m clusters C 1 where  X  is either average or maximum ,issmall. 2.1.2. Edge-cut based modularity
The modularity of an edge-cut [41] , instead, is defined as where E i , j p E  X  is the set of edges in the cut that are used to connect vertices in cluster C connect different clusters. 2.2. Vertex-cuts and cluster quality We focus on vertex-cuts for graph partitioning.

De fi nition 2.2. Vertex-cut
Let G =( V , E )beagraph.Let V  X  p V be a set of vertices and E  X  ) is disconnected. The set V  X  of vertices is referred to as a vertex-cut of G. partitioning, the vertices in V  X  and the corresponding edges in E resulting connected component (disconnected from the rest of the graph), C  X  the edges in E  X  incident to the vertices of C i and  X  the vertices in V  X  neighboring the vertices of C i through those edges. As a consequence, as shown in Fig. 3 , the resulting clusters are vertex (and possibly edge) overlapping.
De fi nition 2.3. s-t vertex cut
Let G =( V , E ) be a (connected) directed graph, with a set S vertex-cut have been removed from G.
 cut, this means that they cannot be used to identify vertex-cut based partitions. 2.2.1. Vertex-cut based expansion
One way to adapt the definition of the expansion to vertex-cuts is to replace the edge _ cut ( C the number of vertices in the vertex-cut through which the two clusters, C directly accounts for the edge distribution is where | C i . E | denotes the number of edges in the cluster, C to the sizes of the clusters in terms of their numbers of edges.
As before,given a vertex-cut V  X  which partitions G =( V , E ) into m clusters C where  X  is either average or maximum , is small. 2.2.2. Vertex-cut based modularity inition of vertex-cut based modularity is where | V i , j | is the number of vertices in the graph that exist commonly between clusters C whereas before | E i , i | denotes the number of edges in C 3. Balance scores of the vertices
Let G =( V , E ) be a (connected) directed graph, with a set S 3.1. Minmax-ratios of the vertices paths. As the minmax ( v ) increases, v gets closer to the sources or to the sinks ( Fig. 6 ). 3.2. Transition probabilities entry m ij represents the transition probability from vertex v (on the undirected version of thegraph).Let v j  X  neighbors ( v bors needs to add up to 1.0, the minmax-ratio score biased transition probability m from v i to v j in E , then both m ij and m ji are non-zero. Fig. 7 (a) and (b) provide an example. 3.3. Obtaining the balance scores
Once the transition matrix M is computed, the next step is to find the vector x value in x i describes the stationary probability associated to the vertex v on vertex v i ). We call the vertex v i with the highest value x 4. SBV-Cut for identifying structurally balanced vertex-cuts v must be on one side of the partition and the vertices between v tex. Thus, we need to further extend this process.
 4.1. Optimistic SBV-Cut on acyclic graphs timistic SBV-Cut then partially splits the graph into two as follows ( Figs. 8 and 11 ):  X  all the vertices that can reach v i are considered on one side of the partition,  X  all the vertices that are reachable from v i are considered on the other side of the partition, and  X  v is included in the set, VC , of vertex-cut.
 partitioned into two sets, this leaves those vertices that can neither reach v rithm are shown in Figs. 9 and 10 .
 Example 4.1. StrandMap partitioning these as shown in Fig. 12 (b).
 4.2. Optimistic SBV-Cut on cyclic graphs Not all graphs are acyclic. We will extend the basic optimistic 4.2.1. Cyclic graph partitioning strategy #1 v  X  V . Optimistic SBV-Cut then partially splits the graph into two as follows:  X  all the vertices that can reach v i and not reachable from v  X  all the vertices that are reachable from v i but cannot reach v  X  the vertices that can reach v i and are also reachable from v
This leaves those vertices that can neither reach v i nor are reachable from v the base algorithm.
 Note that if a dominant balance vertex is involved in a cycle, the extended optimistic where all the vertices in the graph are included in one big cycle; in this case, the optimistic able to partition this graph into two. 4.2.2. Cyclic graph partitioning strategy #2
Alternatively, we can extend the optimistic SBV-Cut as follows: given the dominant balance vertex v  X  all the vertices that can reach v i and not reachable from v  X  all the vertices that are reachable from v i but cannot reach v and  X  v is included in the set, VC , of vertex-cut.

This leaves those vertices that can neither reach v i nor are reachable from v edge-cuts and unattached sink/source vertices are eliminated as in the base algorithm. We refer to this second modified algorithm handling cycles as optimistic unless it is specified otherwise. 4.3. Pessimistic and balance-recomputed SBV-Cut algorithms can be highly affected by the initial dominant balance vertex choice. Pessimistic and balance-recomputed to reduce this impact. 4.3.1. Pessimistic SBV-Cut Instead of removing the vertices on all paths of the selected balance vertices, pessimistic moved and included in the resulting partitions. 4.3.2. Balance-recomputed SBV-Cut remaining in the later stages of the algorithm. Therefore, in balance-recomputed vertices are re-computed at each iteration. 4.4. Computational complexity 4.4.1. Optimistic strategy requires DFS (Depth First Search) to identify reachabilities, which requires O (| V |+| E |) time. 4.4.2. Pessimistic strategy 4.4.3. Balance-recomputation strategy tation of transition probabilities ( O ( max _ degree | V |)), and eigen-decomposition. 5. Evaluation
We evaluate SBV-Cut on graphs of different shapes and sizes and compare the results to ( edge-cut based multilevel algorithms ( METIS , Chaco , and data sets listed in Table 1 .

For METIS , Chaco , and MLrMSATS , we used authors' own packages [ 2 requiring more time were marked unsuccessful . 5.1. Evaluation criteria the properties of the cuts as well as the resulting clusters), and the execution time.
One major difficulty in comparing the vertex-cut based SBV-Cut as expansion and modularity measures ( expansion ncut 1 , expansion based algorithms require edge-cut based measures ( expansion edge-cuts to vertex-cuts and vice versa:  X  we convert a vertex-cut that SBV-Cut returns into an edge-cut and use edge-cut based measures to compare ing edge-cut based algorithms;  X  compare existing edge-cut based algorithms to SBV-Cut . 5.1.1. Converting an edge-cut to a vertex-cut expansion ncut 2  X  , modularity ncut 1  X  , and modularity 5.1.2. Converting a vertex-cut to an edge-cut sion and modularity values computed on this graph as expansion the score for all relevant data sets and target partition numbers. 5.2. Optimistic vs. pessimistic vs. balance-recomputed SBV-Cut highly competitive.
 Fig. 18 (a), (b) and (c) except that for StrandMap data, the pessimistic tremely lower (27%) than the score of the optimistic one (100%).

Fig. 19 (a) shows that running time for all three SBV-Cut sults in Fig. 18 the pessimistic strategy emerges as the most advantageous of the three. 5.3. (  X  ,  X  )-optimal Vertex-Cut vs. SBV-Cut We compare SBV-Cut with the (  X  ,  X  )-optimal vertex-cut [9] . Unlike our quire as input two parameters: the lower bound (  X  ) on the size of the cut and the upper bound ( vertices. In Fig. 20 , we consider 6 different settings for the ( strategies (in the figure each parameter value is set as a percentage of the total number of vertices).
First of all, as shown in Fig. 20 (a), the non-completion rate of ( especially for strict  X  and  X  parameters. This is also confirmed by Fig. 19 (a) which shows that ( tiple orders slow that optimistic and pessimistic SBV-Cut with multiple orders of increase in the average execution time (as was shown in Figs. 19 (a) and 20 (a)). 5.4. Edge-cuts vs. SBV-Cut Here we compare SBV-Cut to four different edge-cut techniques: MLrMSATS [7] using large data sets in Table 1 . Note that on small data sets (StrandMaps), on larger graphs. 5.4.1. Results on large graphs 5.4.1.1. Overview. Fig. 21 compares the expansion and modularity behaviors of comparisons of SBV-Cut vs. MLrMSATS come to 0.1914 vs. 0.6068 for average expansion and 0.2552 vs. modularity.
 Next we do further analysis for cut-based scores and relative scores using
METIS and spectral clustering. The difference is especially strong in average expansions. As the number of target partitions increases, the scores of pecially critical: for example, according to Fig. 23 , METIS degenerate the SBV-Cut clustering quality and, thus, we proposed a slight modification ( quality when graphs contain large cycles. Fig. 24 compares the cycles are short (containing b 2% of the edges in the graph), the basic on the other hand, as the cycles become longer (&gt;2%), the significantly outperforms both spectral clustering and SBV-Cut resulting partitions increase). Once again, bi-partitioning times of spectral and the number of target partitions increases. Fig. 26 shows that the execution time of
In Fig. 25 , we compare the execution times of SBV-Cut , METIS they are implemented for a Linux machine. In the experiments, than spectral clustering which is slower than SBV-Cut . 6. Conclusions Chaco , and MLrMSATS and spectral clustering.
 spectral characteristics of the underlying graph and this complexity makes the algorithm slower than balance scores (see Section 5 ).
 directly rather than generalizing bisection.

References
