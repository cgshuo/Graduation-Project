 Saarland University University of Amsterdam University of Edinburgh
In spoken dialog systems, information must be presented sequentially, making it difficult to quickly browse through a large number of options. Recent studies have shown that user satisfac-tion is negatively correlated with dialog duration, suggesting that systems should be designed to maximize the efficiency of the interactions. Analysis of the logs of 2,000 dialogs between users and nine different dialog systems reveals that a large percentage of the time is spent on the information presentation phase, thus there is potentially a large pay-off to be gained from optimizing information presentation in spoken dialog systems.
 of diverse options by selecting options and then structuring them based on a model of the user X  X  preferences. This enables the dialog system to automatically determine trade-offs between attractive options are thereby structured such that the user can gradually refine her request to find the optimal trade-off.
 the effectiveness of the proposed strategy. Experimental results show that basing the content ness of the user X  X  interaction. Users complete their tasks more successfully and more quickly.
Furthermore, user surveys revealed that participants found that the user-model based system presents complex trade-offs understandably and increases overall user satisfaction. The experi-ments also indicate that presenting users with a brief overview of options that do not fit their requirements significantly improves the user X  X  overview of available options, also making them feel more confident in having been presented with all relevant options. 1. Introduction
A common goal of many spoken dialog systems (SDSs) is to offer efficient and natural access to applications and services, such as e-mail, calendars, travel booking, navigation systems, and product recommendation, in situations where the user X  X  hands and/or eyes are busy with another task, for example driving a car (Pon-Barry, Weng, and Varges 2006) or operating equipment (Hieronymus and Dowding 2007). The naturalness and usability of a spoken dialog interface depends not only on its ability to recognize and interpret user utterances correctly, but also on its ability to present information in ways that users can understand and that help them to achieve their goals.
 research and industry are information-seeking SDSs, which are designed to enable users to browse the space of available options (e.g., flights, hotels, movies) and choose a suit-able option from a potentially large set of choices. Dialogs with such systems typically consist of two main types of activity: information gathering, in which the system tries to establish users X  constraints and preferences, and information presentation, in which the system typically enumerates the set of options that match the user X  X  constraints.
An example is given in Figure 1. In some systems, these activities take place in strictly sequential phases: All of the information necessary to form a database query is gathered, and then the returned options are presented, one at a time or in small groups. In other systems, the activities are interleaved, with users refining their constraints after being presented with some options, or a summary of the option space. In either case, when the number of options to be presented is large, this process can be laborious, leading to reduced user satisfaction. Moreover, as Walker et al. (2004) observe, having to access the set of available options sequentially makes it difficult for the user to remember the various aspects of multiple options and to compare them mentally.
 of spoken dialog systems, relatively little attention has been devoted to information presentation. An analysis of the Communicator corpus consisting of approximately 2,000 dialogs with nine different spoken dialog systems found that information presen-tation is the main contributor to dialog duration 1 (Moore 2006); see Table 1. Moreover, the DARPA Communicator evaluation showed that task duration is negatively corre-lated with user satisfaction ( r =  X  0 . 31, p &lt; 0 . 001, see Walker, Passonneau, and Boland [2001]). Thus, there is reason to believe that improvements in information presentation will lead to improvements in spoken dialog systems.
 to sequential information presentation have been proposed. In the user-model (UM) based approach, the system identifies a small number of options that best match the user X  X  preferences (Moore et al. 2004; Walker et al. 2004). In the summarize and refine (SR) approach, the system structures the large number of options into a small number of clusters that share attributes. The system then summarizes the clusters based on their attributes, thus prompting the user to provide additional constraints (Polifroni, Chung, and Seneff 2003; Chung 2004).
 ens dialog duration by combining the benefits of these two approaches (UMSR). Our 490 approach integrates user modeling with automated clustering such that information is structured in a way that enables users to more effectively and efficiently browse the option space. The system provides detail only about those options that are relevant to the user, where relevance is determined by the user model. If there are multiple relevant options, a cluster-based tree structure orders these options to allow for stepwise refine-ment. The effectiveness of the tree structure, which directs the dialog flow, is optimized by taking the user X  X  preferences into account. In order to give the user a good overview of the option space, trade-offs between alternative options are presented explicitly. In addition, despite selecting only the relevant options, the algorithm also briefly accounts for the remaining (irrelevant) options. We hypothesize that this approach will enable users to make more informed choices. Our approach to the problem has been imple-mented within FLIGHTS, a spoken dialog system for flight booking (Moore et al. 2004;
White, Clark, and Moore 2010). Our results show that in addition to improving dialog efficiency (in terms of number of dialog turns) and effectiveness (in terms of successful task completion), our approach increases user satisfaction.
 turing as implemented in our UMSR strategy can improve the information presentation phase of spoken dialog systems in the following ways: 1. UMSR leads to increased efficiency of information presentation. 2. UMSR makes information presentation more effective. 3. UMSR enables the system to provide users with a better overview of the 4. Tailoring sentence realization to the user X  X  preferences, through the use 5. UMSR ultimately leads to greater user satisfaction.
 of information presentation in spoken dialog systems and discuss their advantages and limitations in more detail (Section 2). In Section 3, we describe our approach and its im-plementation within a spoken dialog system for flight information. Sections 4 through 7 present the user studies we have run to evaluate our approach. In Section 4, we describe two initial studies in which participants rated dialogs they read or overheard. Section 5 describes a modification to the UMSR system to control the length of system-generated dialog turns. Section 6 reports on an experiment in which participants interacted with the revised system. Results of all experiments are discussed in Section 7. Finally, we comment on the relation of this system to other systems from the literature in section 8, and discuss implications of our findings and future directions in Section 9. 2. Background on User Modeling and Content Structuring for
Information Presentation 2.1 Tailoring to a User Model (UM)
Previous work in natural language generation showed how a multi-attribute decision-theoretic model of user preferences can be used in a recommender system to determine which options to mention to a particular user, as well as the attributes that the user will find most relevant for choosing among the available options (Carenini and Moore 2001). In the MATCH system, Walker et al. (2004) applied this approach to information presentation in SDSs, and extended it to generate summaries and comparisons among options. Evaluation of the MATCH system showed that tailoring recommendations and comparisons to the user increases argument effectiveness and improves user satisfaction (Walker et al. 2004).
 attributes to mention, but used a simple template-based approach to realization. For the design of the FLIGHTS 2 system, Moore et al. (2004) focused on organizing and expressing the descriptions of the selected options and attributes in ways that were intended to make the descriptions both easy to understand and memorable. In addition, to increase coherence and naturalness of the descriptions, the system reasons about information structure (Steedman 2000) to control intonation, uses referring expressions that highlight attributes relevant to the user (e.g., a direct flight for a user who wants to minimize connections, vs. the cheapest flight for a user concerned about price), and signals discourse relations (e.g., contrast) with appropriate intonational and discourse cues. For example, Figure 2 shows a description of options tailored to a user who prefers flying business class, on direct flights, and on KLM, in that order.
 constraints, and points out ways in which those options satisfy user preferences. Select-ing a small number of options and presenting only these is an appropriate strategy for an SDS when the number of options to be presented is small, either because the number 492 of options is limited or because users can supply sufficient constraints to winnow down a large set before querying the database of options.
 a small number of options from those that best match the user model does not scale up to situations where the number of relevant options is large. When there are hun-dreds of options to consider (e.g., when choosing among consumer products, hotels, or restaurants) there may be many options that fit the user X  X  specification and interest.
In addition, the user model may not contain enough information for new users, or users may not be able to provide constraints until they hear more information about the available options. This brings up a second problem with the UM-based approach, namely, that it does not provide the user with an overview of the option space, because options scoring below a specified threshold or below a certain rank are not mentioned.
This is related to the third problem, which is the actual or perceived risk that users might miss out on options they would have chosen if they had heard about them. The last two problems may reduce user confidence in the system, if users have the perception that the system is not telling them about all of the available options, and a lack of confidence may ultimately lead to a decrease in user satisfaction.
 information structure to generate more natural sounding utterances by controlling in-tonation, but did not include an explicit comparison to other information presentation strategies. The work presented here extends the FLIGHTS approach to overcome the weaknesses pointed out herein, and presents a series of experiments comparing this approach to an approach that does not employ user modeling techniques. 2.2 Stepwise Refinement through Clustering and Summarization (SR)
Polifroni, Chung, and Seneff (2003) developed an approach to information presentation that structures large data sets for SR. It supports the user in narrowing in on a suitable option by grouping the options that match the user X  X  constraints into clusters of options with similar features. The system then summarizes the clusters based on the attribute values they share, thus suggesting further refinement constraints to the user (Figure 3). on an algorithm that computes the most useful set of attributes, as dictated by the set of options that satisfy the current user query. For large data sets, attributes that partition the data into the minimal number of clusters should be chosen, so that a concise summary can be presented to the user to refine. 3 mation when there are large numbers of options in a way that is suitable for an SDS, it has several limitations. First, there may be long refinement paths in the dialog structure, that is, many dialog turns may be necessary to narrow in on a suitably small set of options. Because the system does not know about the user X  X  preferences, the option clusters may contain irrelevant information which must be filtered out successively with each refinement step. In addition, the difficulty of summarizing options typically increases with their number and diversity, to the point where the summary becomes uninformative (e.g., I found flights on 9 airlines. ).
 where there is no optimal option. If at least one option satisfies all of the user X  X  require-ments, this option can be found efficiently with the SR strategy. However, the system does not point out trade-offs among alternatives in cases where no optimal option exists.
For example, in the flight booking domain, suppose the user wants a flight that is cheap and direct, but all the flights are either expensive and direct or cheap and indirect. In the SR approach, the user will have to ask for cheap flights and direct flights separately because one of these constraints must be relaxed in each case, and thus the user has to explore these refinement paths separately.
 rization may not be relevant to the user. The procedure for choosing the attributes for clustering the options is designed to select attributes that generalize well over the data (i.e., produce large clusters of options), and thus lead to efficient summarization. Hence attributes that partition the data set into a small number of clusters are preferred. If the attribute that is best for summarization is not of interest to a particular user, dialog duration is increased unnecessarily. This in turn may lead to reduced user satisfaction, as the results of our evaluation suggest (see Section 4.1.3). 3. Our Approach: User Model Based Summarize and Refine (UMSR)
Our approach, the UMSR approach first described in Demberg and Moore (2006), is intended to capture the complementary strengths of the two previous approaches. It exploits information from a user model to reduce dialog duration by selecting only options that are relevant to the user. In addition, we introduce a content structuring algorithm that supports stepwise refinement, as in Polifroni, Chung, and Seneff (2003), 494 but in which the structuring reflects the user X  X  preferences. Thus our approach main-tains the benefits of user tailoring, while also being capable of dealing with a large number of options.
 dialog and improve understandability for the user, as well as provide a better overview of the option space, ultimately leading to improved user satisfaction. We discuss these goals in more detail in the following paragraphs.

Increasing Efficiency. The integration of a user model with clustering and structuring alleviates the three problems we identified for the SR approach. When a user model is available, it enables the system to determine which options and corresponding at-tributes are likely to be of interest to the user. The system can then select compelling options, and decide not to mention options which are likely to be irrelevant to the user, leading to shorter refinement paths, more relevant summaries, and increased efficiency.
Increasing Effectiveness. The user model also allows the system to determine trade-offs among options. For example, suppose the user wishes to book a flight, and the user model indicates that this user prefers to fly on KLM. If the database does not contain any KLM flights that also match the user X  X  other preferences (such as preferring direct flights to connecting ones), the system can recognize this conflict and present an explicit trade-off, as in I found a KLM flight but it requires a connection in Amsterdam. However, there is a direct flight on BMI. The user model also allows the identification of the attribute that is most relevant at each stage in the refinement process, which is used to decide whether to present information about arrival time or price, for example.
 make a more informed choice and decreases the risk of the user missing out on relevant options. It thus improves the effectiveness of the spoken dialog system by helping users to select the most suitable option.

Improving Understandability. Our system strives to improve understandability of the presentation by tailoring the presentation to the user X  X  interests. In the flight booking domain, this corresponds to clustering the available flights into ones on airlines that the user prefers versus flights on airlines that the user disprefers, or to talking about flights that arrive by the requested time as opposed to ones that arrive later than specified by the user.

Creating Confidence and Providing an Overview of the Available Options. In order to make the user feel more confident in the dialog system X  X  option selection process, we also briefly summarize options that the user model determines to be irrelevant (see Section 3.5).
By providing users with an overview of the whole option space, we reduce the risk of leaving out options the user may wish to choose in a specific situation (thus overriding her standard user model). The level of detail that the system chooses to present options which are likely to be irrelevant to the user is a trade-off between efficiency and quality of overview. If a situational user model with information about the degree of urgency is available, such overview summaries could be left out when the user is in a hurry (Komatani et al. 2003).

Increasing User Satisfaction. We hypothesize that a system that implements the features discussed here will lead to greater overall user satisfaction. 3.1 Implementation
Our approach to information presentation was implemented within FLIGHTS, a spoken dialog system for flight booking (Moore et al. 2004). The options in the flight book-ing domain are flight connections with the attributes arrival-time , departure-time , number-of-legs , travel-time , price , airline , fare-class ,and layover-airport .A user model contains a partial ordering of these attributes corresponding to the user X  X  ranking, as shown in Table 2. Furthermore, the user model stores preferences (e.g., for a certain airline or flying business class). In a real-world scenario, the user model can be acquired by requiring the user to register with the system at first use (Moore et al. 2004), by building up a user model over time (Thompson, Goeker, and Langley 2004), or by classifying users into preference groups based on other information available about them, and using the group model (Rich 1979), as is frequently done in collaborative filtering. Once a user model exists, the user only needs to specify the current situational information, such as the destination, desired arrival time, and date of travel. 3.2 System Architecture
A sketch of our system X  X  pipeline architecture focusing on the information presentation phase is given in Figure 4. In the version of our system that was used in evaluation, speech recognition and natural language understanding were performed by a wizard (see Section 6.1) who also chose from a set of canned queries during the initial infor-mation gathering phase. The first step in natural language generation (NLG) is content selection and structuring. The NLG subsystem takes as input an abstract communicative goal from the dialog manager. In the information presentation phase of the dialog, this goal is to describe the available flights that best match the user X  X  constraints and prefer-ences. This step is responsible for deciding what information should be communicated in the system X  X  response, and structuring this information based on the user X  X  query, the user model, and the set of options returned from the database. The core of this step is the algorithm for constructing and pruning the option tree, which structures all of the options that satisfy the user X  X  query into the tree and selects the entities that should be mentioned.
 it into natural language. First, it determines how much information can be presented in one dialog turn, and how to structure the information in that turn. For example, in systems that aim to influence the user X  X  choice, such as product recommendation sys-tems, the ordering can be arranged to increase the effectiveness of the recommendation (Carenini and Moore 2001). There exists a full generation pipeline for this system, as described in Moore et al. (2004). However, for the experiments reported here, templates were used instead of the full generation pipeline, for reasons of robustness. 496 and Moran 1999) as a communication hub. All modules are implemented as agents, whose communication is managed by the DIPPER dialog manager agent (Bos et al. 2003), which invokes the different agents and stores the intermediate results from each component.
 step of the system, and is a new design. It consists of three major steps: clustering, building the option tree, and pruning. The first step in our content structuring algorithm is to cluster the values of each attribute in order to group them such that labels like cheap , moderate ,and expensive can be assigned to values of continuous categories such as price . This clustering means that options can also be summarized more easily later. Next, the system constructs the option tree. Each branch of the tree describes a possible refinement path and will thus direct the dialog flow. The construction of the option tree is driven by three factors: the user model, the options returned from the database, and the attribute X  X alue clustering. The resulting option tree determines how different options relate to one another, and which ones are most attractive for the user. After the option tree structure has been built up, it is pruned based on the information from the user model, which enables the system to distinguish between options that are likely to be compelling to the user and those that are not. At this point, the content selection and structuring process is complete, and the option presentation phase follows, which consists of determining turn length and deciding on realizations for the information that is to be conveyed. 3.3 Clustering
We used agglomerative group-average clustering to automatically group values for each attribute; a similar clustering algorithm was used in Polifroni, Chung, and Seneff (2003). The algorithm begins by assigning each unique attribute value to its own cluster, and successively merging those clusters whose means are most similar. For example,
Figure 5 shows the prices from six flights marked as dots on the price axis. In the first step, each flight is assigned to its own cluster (represented as a circle around the dots).
In the second step, the clusters of the two flights with the most similar prices (the ones close to  X 250, in our example) are merged. This procedure continues until a stopping criterion is met. In our implementation, we stop when we have reduced the number of clusters to three. 4 These clusters are then assigned predefined labels, for example, cheap , average-price , expensive for the price attribute. This clustering is used to group similar attribute values together and is only done once for each request (in the air travel domain, a request corresponds to one origin X  X estination pair on a specific date) on the basis of all database entries that satisfy the hard criteria. For further discussion of issues relating to this procedure, see Section 9. Categorical values are clustered using the user X  X  valuation: For example, airlines are clustered into a group of preferred airlines, dispreferred airlines, and airlines the user does not-care about.
 of talking about the  X 51 flight and the  X 48 flight , the system would refer to the cheap flights . This leads to more efficient summaries and enables the system to avoid pre-senting large numbers of options that are very similar in all respects. Furthermore, the clustering process enables the system to assign labels that are sensitive to the other options in the database. For example, a  X 300 flight is assigned the label cheap if it is a flight from Edinburgh to Los Angeles (because most other flights in the database are more costly) but expensive if it is from Edinburgh to Amsterdam (for which there are many cheaper flights in the database). 3.4 Building the Option Tree
The tree building algorithm arranges the available options into a tree structure (Fig-ure 6). Every branching point in the tree corresponds to a choice X  X or example, between economy versus business class flights. The nodes of the option tree correspond to sets of options that share a set of attribute values. The arcs going out from a node are labeled with the different attribute values. For example, in Figure 6, the root of the tree contains all options, and its left child contains all flights offering economy class tickets. The 498 children of this node contain complementary subsets of these options (i.e., all direct economy class flights vs. all indirect economy class flights). Leaf-nodes correspond either to a single flight or to a set of flights, where for each attribute of an option the values are either the same or fall within the same cluster (prices of all these flights are moderate, they all require one connection, they are all economy class, etc.). Each node can maximally have three children in our implementation, because the algorithm works on the clusters instead of the original values (e.g., it does not distinguish between similar prices, such as  X 48 and  X 52, if the clustering algorithm labeled both of them as cheap ). tailored to the user based on the user model. Table 2 shows the valuations of our prototypical  X  X usiness user. X  Fare class is most important to this user, so it is ranked highest. Arrival time, number of legs, departure time, and travel time are considered next most important, and are therefore all assigned rank 2 (i.e., our algorithm does not require a total ordering of the user X  X  preferences). The airline is next most important, and finally, price and layover airport are least important.
 irrelevant criterion is used as the branching criterion high up in the tree, interesting trade-offs risk being scattered across the different branches of the tree. For example, it would be suboptimal to ask a business user to make a choice about cheap versus expensive flights first, if she does not care about this aspect, as she would then have to try to identify interesting flights among both the cheap and the expensive flights. Our algorithm chooses the attribute that has the highest weight according to the user model as the branching criterion for the first level of the tree. For the business user, this would be fare class. The next decision is about the attributes that are second most important, such as the number of legs required (refer to Table 2 and Figure 6), and so on. The system therefore constructs the tree such that it presents the criteria which are most relevant for down in the tree). The advantage of this ordering is that it minimizes the probability that the user needs to backtrack. option set (for instance if none or all of the business class flights happen to be on the user X  X  preferred airline). In that case, a unary node is inserted regardless of the rank of its attribute (see, for example, the right subtree with the attribute airline , which is inserted far up in the tree despite its low rank, in Figure 6). This special case allows for more efficient summarization, for example None of the business class flights are on KLM , instead of having to say this in subsequent dialog turns for each of the business class flights that the user explores.
 the approach taken in Polifroni, Chung, and Seneff (2003). The algorithm selects the attribute that partitions the data into the smallest number of sub-clusters. Consider again the tree in Figure 6: number-of-legs creates only two sub-clusters for the data set ( direct and indirect ) and is therefore further up in the tree than arrival-time , which splits the set of economy class flights into three subsets ( before 3 pm , 3pmto 5pm , after 5 pm for a user whose preferred arrival time is structuring algorithm and Polifroni et al. X  X  (2003) refinement process. The SR system chooses the attribute that partitions the data into the smallest set of unique groups for summarization, whereas our UMSR algorithm takes the ranking of attributes in the user model into account. In the extreme case of a user who does not care about anything (the user model does not specify any valuations of any attributes over others, and indicates that the user does not care about price, whether it is a direct flight, etc.), our algorithm would end up only using the information theoretic criteria, just like the SR system. 3.5 Pruning the Tree Structure
After the tree-building step, the tree contains all the options in the database that satisfy the user X  X  query. This tree can potentially be quite large and navigating through it would be very laborious for the user. At this point, the user model comes into play again:
Because the system already knows which options are relevant to the user (and which ones are not), it can prune the option tree to retain only options that it classifies as being relevant to the user.
 nant options are those for which there is no other option in the data set that is better on all attributes. A dominated option is worse on at least one attribute and equal or worse in all other respects than some other option in the relevant partition of the database; it should therefore not be of interest to any rational user. When two options are equal in all respects and dominate other options, both are kept in the option tree. A similar notion of dominance was employed by Linden, Hanks, and Lesh (1997). dominance is also related to the decision-theoretic concept of Pareto optimality. information from the user model to prune all dominated options. Paths from the root to a given option are thereby shortened considerably and thus dialogs with our system 500 can be expected to be on average shorter than dialogs with a system employing the SR strategy, which does not exploit information from a user model.
 structure in order to efficiently determine dominance relations. We first briefly outline the algorithm, before describing each step in detail. The first step of the algorithm is to order the tree such that the best options are leftmost. 6 tree in depth-first order and generates constraints during this process. These constraints encode the properties that options to the right of the current position in the tree would need to satisfy in order not to be classified as being dominated by any of the options considered so far. A branch must fulfill the constraints that apply to it, otherwise it is pruned. If an option (or a cluster of options) satisfies a constraint, the property that satisfied the constraint is marked as the options X  justification. If some, but not all, of the constraints can be satisfied by an option, the constraints are propagated to the options that are further to the right in the ordered option tree. Once all the dominated options have been pruned from the option tree, there is a homogeneity check to ensure that attributes which have the same value among a set of options are annotated at a node that is a common ancestor of all of these options.

Tree Ordering. The first step of the pruning algorithm is to order the tree. This step is very important, because it imposes a total ordering on the available options and arranges them such that the best option of every node becomes that node X  X  leftmost child. For example, the tree in Figure 6 is not ordered because the business user prefers business flights to economy flights, and thus the two subtrees under the root node must be exchanged (see Figure 7). The total ordering is enforced firstly by placing the attributes that are most relevant to the user at the top of the tree during tree construction, and secondly, by sorting the attribute values from best to worst within each node.
Constraint Generation. After ordering the tree, the globally best option is described by the leftmost branch in the option tree. In our example in Figure 7, this is flight LH1554, in node 7. If the globally best option in node 7 was perfect (i.e., if it was exactly what the user was looking for), the option in node 7 would dominate all other options, and the rest of the tree would be pruned. However, if there is an aspect of the globally best option which does not match the user X  X  ideal, the user will have to make some kind of trade-off. This is what happens in our example, because the arrival time of the flight in node 7 was only classified as fair , not as good , whereas there exist some connections with arrival times that were classified as good . A flight with a good arrival time constitutes a possibly interesting alternative. In order to find such an option and filter out the others, the constraint arrival-time:good is generated.

Pruning Options from the Tree. When node 8 is reached by the depth-first traversing algorithm, a constraint ( arrival-time:good ) has been generated by node 7. Node 8 does not satisfy this constraint; this means that it is dominated by node 7 and therefore is pruned from the option tree (as indicated by shading in Figure 7).

Constraint Propagation. Once the status of a node X  X  children has been determined, any unsatisfied constraints that were generated by the child nodes are propagated to the parent. In our example, the constraint generated by node 7 is propagated up to parent node 6. Because node 6 has no siblings, the constraint is again propagated up to its parent, node 5. The sibling of node 5, node 9, is then tested against the constraint arrival-time:good . Because there is no information about arrival time available at node 9, the constraint is passed down to its leftmost child (node 10). If that child node does not have information about arrival time, the constraint is passed down again. In our example, the constraint is passed down to node 11, and we find that this flight satisfies the constraint. We next repeat the constraint generation step. Flight BA9898 generates the constraint price:good because its own price is only classified as fair .
At nodes 12 and 13, both constraints arrival-time:good and price:good have to be satisfied. However, they are not satisfied and therefore these two nodes are pruned.
The depth-first traversal continues through the tree trying to find options that satisfy the constraints. When node 2 is traversed on the way up in the tree, it generates the constraint airline:KLM . This constraint, as well as any constraints that were generated by the subtree below it and have not yet been satisfied (in our example, the complex 502 constraint price:good AND arrival-time:good ) are propagated to the right branch of the tree, at node 3.
 the exact instances or properties of nodes 12 and 13 or their children. One only has to consider the properties which are relevant to the constraints because the tree is ordered.
This allows us to conclude that all options in a specific subtree are dominated by the options in branches to the right of that subtree.

Justifications. An important by-product of the pruning algorithm is the identification of attributes that make an option cluster compelling with respect to alternative clusters.
For example, the flights in node 11 were considered compelling because they had a better arrival time than the flight in node 7. We call such an attribute the justification for a cluster, as it justifies its existence X  X hat is, it is the reason it is not pruned from the tree. Node 5 in turn is kept in the tree because it is the leftmost child, which means that its attribute values best match the user X  X  preferences. When compared to the flights in node 9, its compelling property is that it is direct (i.e., number-of-legs=1 ).
The default justification for a node is the attribute value on which the branch is based (e.g., fare-class for node 2 in Figure 7). This justification is used for nodes on the leftmost branch. Justifications are used by the generation algorithm to present trade-offs between alternative options explicitly (see Section 3.6.2).
 reasons contain information about which constraints the options failed to satisfy; in our example, the flight in node 8 is deleted because of its bad arrival time. These pruning reasons are later used to provide information for the summarization of poor options in order to give the user a better overview of the option space (e.g., All other flights arrive too late or are more expensive ). To keep summaries about irrelevant options short, we back off to a default statement or are undesirable in some other way if these options are very heterogeneous.

Homogeneity Check. After deleting branches from the option tree, it may be the case that several options have the same attribute value, but are located in different branches in the tree. For example, imagine there are three economy class flights, two direct ones (1 leg), and one which requires a connection (2 legs). Among the two direct ones, one has a good price, and the other one is more expensive. The 2-leg flight also has a good price. If the more expensive direct flight is pruned, both of the remaining options have a good price, and thus this property should be above the number-of-legs branching level in the tree. This is important for efficient information presentation and summarization of options. 3.6 Option Presentation
The user model also comes into play when determining the wording of the option presentation. Because the system has a model of the user X  X  preferences, it can effectively compare and contrast alternatives by highlighting compelling aspects of an option (e.g., a direct flight, the KLM flight), by using intonation and comparatives (e.g., the cheapest flight, the only KLM flight) and by acknowledging drawbacks through the use of discourse markers (e.g., but , however , although ) when generating descriptions of options.
For the options that were considered unattractive for the particular user, the system can provide an overview to cover the option space (e.g., All other flights arrive later than 3 pm ). utterances. The different design decisions underlying sentence planning and realization will be explained in the following sections. 3.6.1 Turn Length. In any spoken dialog system, it is important not to present too much information in a single turn in order to keep the memory load on the user manageable (Seneff 2002). Thus, our system aims at presenting no more than two or maximally three options at once. However, the pruned option tree sometimes contains more than this critical number of options, and therefore needs to be broken down into smaller chunks. We thus divide the pruned option tree into several smaller dialog-turn-sized subtrees.
Typically not all of these subtrees will be presented, but only the ones between the root of the tree and the chosen subset of flights that the user wishes to hear more about. system must decide how many and which of their attributes to mention. Arguably, mentioning too many attributes of options will also lead to memory overload, which may ultimately reduce user satisfaction. However, the system must provide enough information to fully account for what constitutes the trade-off, that is, it must give the reasons why an option is potentially relevant.
 flight arrives later than requested and contrasts this against another business class flight that arrives earlier but requires a connection. The pruning process provided the system with information about the relevant differences between alternative options ( arrival-time and number-of-legs ). 504 simple heuristic segmentation algorithm. Dialogs generated with this heuristic were evaluated in our early experiments, 7 which we report in Sections 4.1 and 4.2. The heuristic cutoff point is visualized in Figure 9, and defined as being no deeper than two branching nodes 8 and their children.

The target size is two to three options. This strategy yields a maximum of nine options (three options per branching level to the power of two branching levels). However, in practice there are typically three or fewer options in any two branching levels left after pruning. We chose to include two layers in order to allow for informative trade-offs: If information from only one layer were available at a time, it would not be possible to contrast the most relevant advantages and disadvantages of alternative options, which is needed to make the trade-off(s) explicit. For example, if only the first level of Figure 9 were to be presented, the system could only talk about fare classes, and would not be able to point out that there is a disadvantage with the business class flights, which the economy class flights do not have.
 options she would like to hear more about (for illustration see Figure 10). periments (see Sections 4.1 and 4.2). However, it became clear in related experiments (Winterboer et al. 2007) that this method of deciding on dialog turn length sometimes led to very long system turns, which were then difficult for the user to remember. We thus modified the algorithm in order to ease comprehension. We will return to this point later, in Section 5. 3.6.2 Referring to Sets of Options. Each branch in the pruned tree corresponds to a set of options. These options should be referred to in an effective way. We do this by taking into account both the dialog structure (i.e., structure of the argumentation) and the user X  X  interest: The description of a set of options is based on their justification. For example, the justification of the flights in the left branch of the tree in Figure 8 is their fare class. Therefore, they are described as flights with availability in business class .On the other hand, the justification for the indirect business class flights is that they have an arrival time that matches the user query better. They are thus referred to by their justification to arrive earlier .

If one of these multiple justifications is a contextually salient attribute, this one is preferred over the justifications that are not salient. For example, if a node is justified both by its arrival time and its price, it would be referred to by the price attribute in a context that just mentioned the price of another flight as being expensive: referred to by the highest ranked attribute, that is, arrival time in the example from
Figure 8. In cases where all options in a set only share a common negative attribute, we acknowledge this situation using a concessive formulation: for example, If you X  X e willing to travel economy. . . ; see the last sentence in Figure 8. 3.6.3 Presenting Additional Attributes to Explain Trade-Offs. In order to present trade-offs between options, it is necessary to provide information about the properties of options that constitute the trade-off(s). Any of these additional properties that are not already mentioned as part of the referring expression are ordered to optimize coherence. First, all positive attributes are enumerated and contrasted against all average or negative attributes. These negative attributes, which are presented last, are then salient and will be used in the description of an alternative option. 3.6.4 Summarizing Properties of Options. When describing a set of flights that are in the same cluster (e.g., because they have good arrival times), the specific attribute values of the options in this cluster may vary (e.g., one flight might arrive at 3 pm and the other at 3:30 pm). In that case, it is necessary to generate a summarizing expression for these attribute values.
 1. The continuous values for attributes such as price and arrival-time 506 2. For discrete-valued attributes with a small number of possible values (e.g., 3. The third group are attributes with categorical values (e.g., airline ).
A sample dialog highlighting these realizations is shown in Figure 10. The turns marked  X  X  X  in this dialog were generated by our system, employing the business user model (see Figure 2). Note, however, that interpreting the user X  X  request (i.e., speech recogni-tion and natural language interpretation) was done by a wizard in our experiments. 3.7 Adaptability to Other Domains
To adapt our system to assist users finding options in another domain (e.g., restaurants, digital cameras), the following steps would have to be taken: 1. Creation of a domain model: Identify entity attributes and the values 2. Adaptation of the generation pipeline: Although sentence structures 3. Acquisition of user models: Accomplished by explicit questioning of users
To apply the clustering algorithm in another domain, it is necessary to define a function that maps attribute values onto numeric values. This can be done by either acquiring the user X  X  preferences, or by choosing a distance function that describes the relation between values of an attribute.
 for which we do not use a distance function but only accept options that fully match these requirements): departure airport, arrival airport, and travel date. If our database had contained distances between airports, our system would have been able to suggest flights that start from or arrive at a nearby airport (e.g., departing from Glasgow instead of Edinburgh). Similarly, in a restaurant recommendation system with information about streets, an external resource could be used to determine which streets are in the same neighborhood, in order to cluster them according to distance or the time it takes to travel to them using a specific means of transport.
 or some kind of ordering that is meaningful for the user. Consider for example our clustering of airlines: There is no information in our database that would make a KLM flight more similar to a Lufthansa flight than to a RyanAir flight based on the airline.
Therefore, we use information from the user model to arrange options into clusters that are meaningful to the user by grouping together airlines that the user prefers to use, and those airlines that the user prefers not to use. Finally, when clusters have been generated, a set of labels must be defined for the resulting clusters. 4. Evaluation I  X  Two Pilot Experiments
We conducted three experiments that compared our approach to information presen-tation, employing content structuring and a user model (UMSR), to a system that uses only content structuring (SR). The experiments were designed to test our hypotheses that the UMSR approach increases user satisfaction, as well as dialog efficiency and effectiveness when compared to the SR approach. In this section, we discuss the first two experiments, during which our participants read or overheard dialogs, as opposed to our second evaluation phase during which they interacted with the system in a Wizard-of-Oz set-up. Although the user X  X  turns were scripted, the SR and UMSR system turns were generated by implemented information presentation components in these two experiments. 4.1 Reading Task Experiment
In the first experiment, participants were asked to read a number of dialogs, some of which were designed according to the description of the SR algorithm and some of which were generated using our UMSR algorithm. Participants were thus in the position of external observers, and could not interact with the system. 4.1.1 Experimental Design. The experiment was performed with 38 participants, mostly students of the University of Edinburgh, who were either native speakers of English or had a near-native proficiency level in English. They were naive with respect to dialog systems and the purpose of the experiment. The experiment was conducted in the lab under controlled conditions. Each subject was presented with six dialog pairs. The first dialog pair was used for training, and was thus not included in the analysis. Each dialog pair consisted of one dialog with the UMSR system and one dialog designed following the SR approach (see Section 2.2). The order of the dialogs in a pair was randomized to prevent the risk of favoring a system due to a constant ordering (in particular, because the content of the database is already known when reading the second dialog, this dialog would be easier to understand).
 to be highly prototypical (see Figure 11) to make it easier for the participants to memo-rize the characteristics of the users.
 scribed briefly in order to communicate their preferences to the participants and put them in a position to assess whether the hypothetical users were able to find the flight that was optimal with respect to their specifications and preferences.
 in Polifroni, Chung, and Seneff (2003). All dialogs were provided as transcripts. 4.1.2 Evaluation Criteria. The order of the dialogs in a pair was randomized. After read-ing each dialog transcript, participants were asked to provide feedback about system responses on four Likert-type scales (see Figure 12). After reading each pair of dialogs, the participants were also asked the forced choice question:  X  X hich of the two systems would you recommend to a friend? X  to assess user satisfaction. 508 4.1.3 Results. User Satisfaction . A significant preference for the UMSR system was ob-served. From a total of 190 forced choices in the experiment (38 participants pairs), UMSR was preferred 120 times (  X  63%), whereas SR was preferred only 70 times (  X  37%). This difference is highly significant (p &lt; 0 . 001) according to a two-tailed binomial test. Thus, the null-hypothesis that the systems are preferred equally often can be rejected with high confidence.

The defining differences between the two systems are tailoring to the user first by presenting only options that are of some relevance to the user, second by explicitly comparing options to one another by pointing out trade-offs, and third by briefly summarizing the full option space. The goal of the experiment is to elicit the individual contribution of these factors to user satisfaction by asking the questions in Figure 12.
Figure 13 shows the average Likert scores for the UMSR and SR systems provided by the users, and will be discussed in the following paragraphs.

Understandability. The UMSR and SR dialogs received almost identical scores for un-derstandability (Question 1 in Figure 12). There is no statistically significant difference between the scores of the two systems (t(189) =  X  0 . 049, p = 0 . 97, using a two-tailed paired t-test). On the one hand, understandability is likely to be enhanced by UMSR because it provides explicit trade-offs, but on the other hand UMSR produces longer and more complex dialog turns which may hinder understandability. We therefore control for dialog turn length between the two conditions in our later experiments; see Section 5.

Overview. The evaluation confirmed our hypothesis that the UMSR system provides a better overview of the option space than the SR system. The difference in ratings, more using a paired t-test); see Figure 13. The better overview achieved by the UMSR system is attributable to the explicit trade-offs, comparative qualifications of options (e.g., the cheapest flight ), and summaries about dominated options (e.g., all other flights arrive later than you specified ).

Relevance. The third question assessed the participant X  X  confidence that all relevant options were mentioned by the system. The UMSR system was again rated significantly higher on this question in comparison to the SR system (t(189) = 2 . 88, p &lt; 0 . 01), accord-ing to a two-tailed paired t-test. Presenting only options that are deemed to be relevant by the system as well as providing summaries about the whole option space are likely to have led to the observed higher confidence ratings.

Efficiency. Question 4 assessed the efficiency with which the hypothetical user was able to access the flight that best matched her interests. Again, the UMSR system was rated significantly higher (t(189) = 3 . 77, p &lt; 0 . 001 in two-tailed paired t-test) than the SR system. Surprisingly, subjects reported that they felt they could access options more quickly with a system employing the UMSR strategy even though the dialog turns were longer on average. 4.2 Overhearer Experiment
A potential criticism of the reading experiment is that reading dialogs is an artificially simplified task because participants can read at their own pace and go back in the text to 510 read difficult parts again. Furthermore, there is no extra difficulty caused by imperfect speech synthesis. The goal of this second experiment was therefore to quantify any facilitating effect introduced through the reading modality, and to compare and validate results. 4.2.1 Experimental Design. For our second lab experiment, we recruited 40 participants, who were mainly Edinburgh university students, native or near-native speakers of
English, and were studying for a range of different degrees. They had not taken part in the previous experiment and were naive with respect to the task. The participants were presented with exactly the same dialog pairs as in the first experiment, and were asked the identical set of questions (see Section 4.1.2). The only difference was that this time, participants overheard the dialogs instead of reading them: We used speech recordings from three different speakers to impersonate our three users X  X he student, the frequent flyer, and the business traveler. System turns were produced by a text-to-speech system provided by CereProc Ltd., 9 using a voice with a Scottish accent ( X  X eather X ). 4.2.2 Results. User Satisfaction . Results for overall user satisfaction were consistent with the results from the reading experiment: Participants chose the UMSR system more often than the SR system when asked which system they would recommend to a friend.
However, the difference did not reach significance level in the overhearer condition (UMSR was preferred 109 times out of 200 times). The more detailed analysis based on the Likert-type scale questions (Figure 14) shows that while ratings tended to be higher in general, the UMSR system benefited less from the oral presentation mode than the SR system.

Understandability. We specifically asked participants not to assess the systems on the speech synthesis quality but rather on the structure and content of the presented mate-rial. The SR system was rated slightly higher on the understandability of the dialogs in comparison with UMSR. The observed slight preference for the SR system did not reach significance level (t(199) =  X  1 . 17, p  X  0 . 24 in a two-tailed paired t-test), however.
Overview and Relevance. The second experiment confirmed the findings from the reading task experiment: Users thought that the UMSR system gave them a better overview of the option space (Question 2). In addition, they felt more confident that they had not missed out on any relevant options (Question 3). The differences in ratings were again 0 . 01), just as in the reading experiment.

Efficiency. The UMSR system was rated better than the SR system in terms of how quickly the hypothetical user was able to access the optimal flight (Question 4). How-ever, this difference was smaller in the overhearer experiment, and did not reach signif-icance level (t(199) = 1 . 65, p  X  0 . 1). 4.2.3 Discussion. All the tendencies in ratings for experiments 1 and 2 were the same, the only differences being that effect sizes were slightly smaller in the overhearer condition (see Figure 14) and that participants rated the systems consistently higher in the over-hearer experiment. We hypothesize that these higher scores across the board must be due to the presentation mode, that is, participants were possibly more impressed with the systems when they overheard the interaction as opposed to reading it, because it was closer to experiencing a working system.
 cerning overview and relevance, and indicate better perceived efficiency of the system, we are ultimately interested in how people cope when interacting with the different types of dialog systems, and how user modeling affects task efficiency and effectiveness.
We therefore designed a third experiment, in which participants were assigned flight booking tasks and directly interacted with the dialog system (see Section 6). to present only those options that are likely to be relevant to the user, and explicitly points out trade-offs among options, we hypothesized that it would also consume less cognitive resources, that is, presentations based on UMSR would impose less cognitive load than those based on SR. Therefore, in parallel to our work on the interaction task experiment, a companion project conducted experiments using a dual-task setting (driving a simulated car while using the dialog system to book flights) to investigate the effects of the two strategies to information presentation (UMSR vs. SR) on cognitive load (Hu et al. 2007). Results indicated that, contrary to expectations, the cognitive load placed on users by the UMSR system was in some cases higher than the cognitive load placed on users in the SR condition, and that this affected performance on the primary task (driving). By examining logs of the conversations, we found that the
UMSR approach sometimes generated turns that were considerably longer than turns produced by the SR approach. Because we are primarily interested in whether the content selection and structuring aspects of UMSR led to its benefits, we removed the confounding factor of turn length by controlling for turn length across the two conditions in our third experiment. 5. Controlling Dialog Turn Length
Determining how much information to include in a dialog turn is an important factor in designing information presentation strategies. The results from Hu et al. (2007) sug-gested that our initial UMSR algorithm for determining how much information to in-clude in a turn needed improvement. In addition, controlling for dialog turn length and 512 the number of information units conveyed in each dialog turn is important for making a fair comparison between the aspects of information presentation we are interested in, that is, content selection (which attributes are included in a summary) and structuring.
Presenting much complex information in a single turn can cause a significant memory burden on the user, and thus disturb the variables we want to measure. Furthermore, we hypothesize that a large memory burden will not only overwhelm the user, and thus affect user satisfaction, but can also cause a degradation in efficiency (because users may have to ask for repetition or clarification of information) and/or effectiveness (because users may forget pieces of information that are critical for making the best choice). into separate chunks, as explained in Section 3.6.1. The original naive heuristic can sometimes cause long system turns if the branching factor of an option tree is large even after the pruning step. In order to balance message length between the two condi-tions, we modified the content selection method to control the amount of information presented in each turn, as follows: that at each step, the turn length and information density would be roughly the same for both conditions. 6. Evaluation II  X  User Interaction Study
Due to the complexity of building a working end-to-end SDS, our previous experi-ments employed an  X  X verhearer X  evaluation methodology, in which participants read or listened to pre-recorded dialogs with a scripted user. This limits the evaluation criteria that can be applied to users X  perceptions (e.g., understandability, goodness of overview of options, and so on). Our third experiment, a short summary of which was first reported in Winterboer and Moore (2007), compares the two systems in a more interesting setting, in which users actively interact with the dialog systems. This setting allows us to measure the systems X  impact on effectiveness of the interaction (as measured by task success) and efficiency (as measured by dialog duration), in addition to user satisfaction. In this experiment, we compare the revised UMSR approach, which controls the amount of information presented in each turn, to the SR approach as described previously. 6.1 The Wizard-of-Oz Paradigm and Experimental Environment
The interaction task experiment presented here followed the Wizard-of-Oz (WoZ) par-adigm (Dahlb  X  ack, J  X  onsson, and Ahrenberg 1993) which enables us to test hypotheses about not yet implemented or not sufficiently robust systems by simulating them.
The systems used in this experiment have fully implemented information presentation components, including content selection and structuring, text planning, and template-based realization. The wizard X  X  role was limited to language understanding, making sure all obligatory slots (e.g., departure airport, destination airport, travel dates) were filled, and keeping the dialog going if the user was silent.
 the-fly based on either the SR or the UMSR strategy to presenting information. The wizard sat on the opposite side of the room, hidden behind a partition that prevented participants from seeing or hearing the wizard during the experiment. The integrated SQL-based database system contained actual flight information as provided by airlines.
The wizard used drop-down menus to perform stepwise queries according to a partic-ipant X  X  requests until a satisfying flight was found and booked. The generated textual information provided by the Web interface was copied-and-pasted to Speechify, a text-to-speech (TTS) application provided by Nuance Communications, Inc. All participants heard a synthetic voice of their own gender speaking British English. This choice was motivated by the work of Nass and Brave (2005), which shows that the gender of the voice used for TTS plays a significant role in terms of user preferences and trust in the information provided (users prefer a voice that matches their gender). Participants were encouraged to speak naturally rather than merely to respond to system prompts. The wizard used very few questions as prompts (e.g., What would you like me to book for you? ) and would only add additional questions (e.g., Do you have a preferred arrival time? )if the participant remained silent for more than five seconds after a round of information presentation by the system. 6.2 Experimental Design
A total of 34 participants were paid to participate in the experiment. About half of participants were students of the University of Edinburgh (but not with a computer science background), the other half were recruited via a Web site for one-off jobs. The average age of the 17 female and 17 male participants was 24 years. All participants were naive to the purpose of the experiment and native English speakers.
 rigorous comparisons, all participants were briefed to act as a business traveler for the flight booking task. As described in Section 4.1.1, the business traveler, in descending 514 order of importance, (1) prefers flying business class , (2) is concerned about arrival time , travel time ,and number of legs , and (3) wants to fly on KLM if possible. task of booking flights and received detailed instructions concerning the two flights to be booked in the first part of the experiment. To make the booking process more realistic, the four routes (i.e., pairs of cities) were carefully chosen in order to guarantee that each participant experienced four different scenarios: 1. no KLM flight was available 2. one KLM flight matched all the criteria 3. one KLM flight in business class was available but required a connection 4. one KLM flight was found but it was in economy class
Both the order in which the four flights were booked and the order of the information presentation strategies (UMSR and SR) were randomized to counter-balance possible order effects. For the first two dialogs, half of the participants obtained flight informa-tion presented from the system adopting the SR approach; the other half received search results as determined by the UMSR approach. In the second part of the experiment, participants who received flight information with SR in the first half of the experiment were provided with information based on UMSR and vice versa. After completing the dialogs with a specific system (i.e., after the second and fourth dialog), participants were asked to fill in a questionnaire to provide judgments on the four user satisfaction questions (see Figure 12). 6.3 Results
Dialog recordings and questionnaire answers were analyzed. For the questionnaire data, we used seven-point Likert-type scales.

Efficiency. There was a highly significant difference in the average number of turns participants required for booking a flight when the system adopted the SR approach as compared to the system adopting the UMSR approach. Using a two-tailed paired t-test we found that participants interacting with the UMSR-based system took significantly fewer turns than when using the SR-based system (t(31) =  X  with ** in Table 3).
 shorter for bookings made with presentations based on UMSR as opposed to SR (t(29) =  X  6 . 39; p &lt; 0 . 0001; Table 3).

Effectiveness. We hypothesized that UMSR, which explicitly points out trade-offs among options, would lead to improved task success. To this end, we extracted information about flights (e.g., flight times, airlines, number of layovers) from http://www.expedia.co.uk and chose our scenarios carefully to ensure that there was one flight that best matched the requirements we presented to participants. We then counted how often the flight best matching the business traveler X  X  profile was chosen in each condition. Using the UMSR-based system, participants succeeded in booking the best-matching flight significantly more often. They booked the optimal flight 62 times out of 68 (91.18% success rate) with the UMSR system, but they only succeeded in doing so 50 out of 68 times (73.53% success rate) when interacting with the SR system.
User Satisfaction Ratings. No statistically significant differences in terms of system pref-erence were found between genders. In the questionnaire data (see Figure 15) we found a general preference for UMSR-based recommendations on all four evaluation criteria.
However, only differences between answers to Questions 1 and 4 ( X  X id the system give the information in a way that was easy to understand? X , t(33) = quickly did the system allow the user to find the optimal flight? X , t(33) = 0 . 005) were statistically significant. We believe that the lack of a significant difference between systems on Questions 2 (overview) and 3 (relevance) is related to the fact that the new version of UMSR controlled for turn length. In the revised version, information about alternative or competing options was only included if the turn length allowed for it. Thus, there is trade-off between understandability and presenting information that is intended to improve the user X  X  overview of the option space. Further investigation of this trade-off should be carried out as part of future research. 6.4 Limitations on Evaluation
Although the WoZ method allows us to evaluate our information presentation strategy in the context of an actual interaction, there are still a number of shortcomings. An ideal user evaluation would use actual automatic speech recognition and language 516 understanding instead of the wizard performing these actions. In addition, it would use the actual model of each user rather than ask them to role-play.
 and Walker 2008) and corpus collection (Carletta 2007), we recognize that there are concerns with respect to assigning subjects a user model as opposed to using the participants X  own models. Possible problems with role-playing include the fact that participants may have incorrect expectations about the needs and preferences of the role they are supposed to play, and that they might not adopt the role sufficiently.
Furthermore, a scenario where participants are role-playing cannot test how good the user model is, or how robust a user-adaptation system is.
 more closely control conditions and guarantee that every participant will be exposed to the same number and constellation of trade-offs (see Section 6.2).
 used. 7. Discussion
We ran over 100 participants in three experiments and obtained very stable results in favor of the UMSR approach to information presentation. In this section, we summarize our findings from the three experiments with respect to our initially stated hypotheses.
Did the UMSR Approach Increase the Efficiency of Information Presentation? Overall, both in terms of the subjectively perceived efficiency, and in terms of the objectively measurable efficiency, the UMSR system significantly outperformed the SR system. Task duration was significantly lower in the UMSR condition than in the SR condition in the interac-tion experiment, with the UMSR system also requiring fewer dialog turns. Furthermore, participants reported that they felt the optimal option was accessed more quickly in the UMSR condition than in the SR condition in all three experiments.

Did the UMSR Approach Make Information Presentation More Effective? This hypothesis was tested in the interaction task experiment by measuring task success. We found that users chose the option that was best for the role they were playing more often in the interaction experiment. These findings also agree with results obtained in other work, using a dual-task method (Hu et al. 2007; Winterboer et al. 2007). Thus, we conclude that information access with the UMSR approach is more effective than with the SR approach.
 Did UMSR Provide a Better Overview of the Option Space and Was Higher Confidence
Achieved with UMSR? Questions 2 ( X  X id the system give X a good overview of the available options? X ) and 3 ( X  X o you think there may be flights that are better options for X that the system did not tell X about? X ) of the questionnaire were designed to assess this aspect. The first two experiments showed a clear preference for the UMSR system in comparison with the SR system. Participants in the interaction experiment also exhibited a preference for the UMSR system, but the difference in ratings did not reach significance level. The smaller effect size in the third experiment is likely due to controlling dialog length: The overview of options deemed uninteresting to the user was sometimes omitted to reduce turn length. This omission seems to negatively affect the user X  X  overview of the option space and their confidence in having heard about all relevant options.
Was the Understandability of the System Improved? Understandability was the single aspect in which the SR system was not outperformed by the UMSR system for the first two experiments (differences in ratings were marginal). Our hypothesis had been that the user model improves understandability by tailoring the presentation of the options to the user. This seemed to be outweighed by the larger amount of information presented in the original implementation of UMSR, however. In the interaction task experiment, in which dialog turn length was kept constant across the SR and UMSR conditions, turns in the two conditions contained a similar number of information units. In this case, the UMSR system achieved better understandability than the SR system.
 Finally, Did We Achieve Higher User Satisfaction? For all conditions, users preferred the
UMSR strategy over the SR strategy, and on no aspect was the SR system found to be significantly better than the UMSR system in our experiments.

We conclude that our hypotheses were largely confirmed, and that a challenge for future work lies in the development of methods that allow the system to predict and control for the cognitive load induced by system utterances. We believe that this is particularly important because dialog systems are frequently used in situations in which the user X  X  hands and eyes are busy. For example, NASA is interested in spoken dialog technology for use in spacecraft (Rayner et al. 2003), and automobile manufacturers are integrating an ever-increasing number of voice services into their products.
 implemented in the context of the TownInfo system (Paksima, Georgila, and Moore 2009), which allows users to search for restaurants in the city of Edinburgh. The system was evaluated with participants interacting directly with the system (as opposed to a
WOZ setting), and was compared to a system that implemented the typical sequential enumeration approach to information presentation. In the UMSR condition, both per-ceived task completion (90.7% vs. 85.2%) and actual task completion (74.1% vs. 62.9%) were higher than in the traditional sequential enumeration condition. Furthermore, dialogs with the UMSR system required significantly fewer turns to complete the task (9.24 for UMSR and 17.78 for the sequential system), and conciseness, accessibility, and efficiency were all rated more highly in the UMSR condition than the sequential enumeration condition. In addition, overall user satisfaction was significantly higher for the UMSR system. Finally, the UMSR system outperformed the sequential system particularly clearly in cases where a trade-off among options existed. 8. Related Work Our experiments evaluate the UMSR model against the SR model described in Polifroni,
Chung, and Seneff (2003). Recently, Polifroni and Walker (2008) developed several variants of the SR approach that differ in how they choose and structure attributes in the summaries presented to the user. That is, they differ in the way they rank attributes for presentation and the method used for clustering. There are two approaches to ranking, one based on the original refiner approach (which chooses to cluster on attributes for which a small number of clusters account for most of the options) and the other based on a user model (which chooses attributes for clustering based on the ranking in the user model). For clustering, they added an  X  X ssociative mode X  in which association rules among attributes are automatically determined and the summary statements produced describe the associations. Imagine that all options in a cluster with property X also 518 happen to have property Y. Association then means that both properties X and Y are mentioned for the cluster (see Figure 16).
 approach in a reading experiment, similar to our first experiment. However, they eval-uated only the first system turn in the dialog for the different conditions presented. The experimental conditions contrasted structuring with versus without a user model, and with versus without associative clustering. They found that users preferred the system utterances that were generated based on a user model when there were a large number of options available, and that the associative mode was beneficial when tailoring the summaries to the user. Their results hence support our approach: The version of the system that included user modeling and associative clustering led to dialogs that are the most similar to those of our UMSR approach.
 user modeling and associative clustering and our UMSR model. First, in UMSR the user model is not only used to structure, but also to select options (via pruning of the option tree). Second, Polifroni and Walker X  X  (2008) approach contains two clustering steps: one for clustering attribute values, which is the same as in our UMSR approach, and a second one for clustering options following each query. This second clustering step corresponds to our tree structuring step. Whereas Polifroni and Walker re-cluster at every system turn, we only build up the option tree once (unless the user changes their query, e.g., by wanting to fly on another day, or asking to fly on another airline). whose values are connected, such as short flight duration and direct flights) is realized in our system as well, but in a less explicit way: In the tree structuring phase, attributes that have identical values for a set of options (this would for example apply if all flights with short travel time turned out to have only one leg) are moved up in the tree even if the attribute has a low rank (see Section 3.4). A difference is that our UMSR model treats the user X  X  valuation as a more important feature for dialog structuring than associations.
Coping with Under-and Over-constrained User Queries. One frequent problem in spoken dialogs is caused by under-and over-constrained queries. In under-constrained queries, the database returns too many results to be presented at once, and the system must support users in further refining their query. In an over-constrained query, there are no entries in the database that match the query exactly, and the system thus has to get the user to relax a constraint, or itself choose a constraint to relax.
 about obligatory slots (e.g., origin , destination ,and date ) and underspecified prefer-ences (concerning preferred airlines, etc.). To fill the obligatory slots, simple slot-filling questions such as When do you want to leave? are asked. For all other cases of over-or under-constrained queries, constraint relaxation and specification is inherent in the
UMSR structuring approach. For underspecified preferences, the user model provides default specifications. In the case of over-constrained queries, we can think of constraint relaxation in terms of the tree structure: Constraints that are less important to the user (e.g., price for our example business user) are automatically relaxed simply because they are located further down in the option tree. Constraint values, namely, good arrival time being changed to fair , are automatically relaxed due to the ordering of the branches within the option tree.
 developed in the literature. Systems proactively suggest additional refinements for underconstrained queries, as in You could try to look for cuisine type? (Pon-Barry, Weng, and Varges 2006; Varges, Weng, and Pon-Barry 2006), or relaxations for over-constrained queries, as in Would a slightly more expensive flight work for you? (Qu and Beale 1999; Pon-
Barry, Weng, and Varges 2006). Additionally, constraints can be relaxed automatically based an ontology (Varges, Weng, and Pon-Barry 2006) or by predefining relaxation sets (e.g., from a specific street for a restaurant to the broader neighborhood) or categorical ones (e.g., relaxing Chinese to Asian ) (Chung 2004). 9. Conclusions and Future Work
The research presented in this article addresses the issue of how to scale information presentation strategies for spoken dialog systems to situations where many diverse options are available.
 ing, and showed how a user model can inform both of these steps to optimize efficiency and effectiveness of the information presentation phase in spoken dialog systems. The knowledge derived from the user model can be used to enable a dialog system to auto-matically present trade-offs between the relevant entities explicitly, thus improving the user X  X  overview of the option space, and contrast options using linguistic and discourse cues. In our experiments, we found that the user model X  X irected approach led to shorter dialogs and that it improved task success: Users found the optimal option more often and were more satisfied with their experience. We tested this with three studies, a reading experiment, an overhearer experiment, and a Wizard-of-Oz experiment, thus providing what we believe is the first large-scale evaluation of alternative information presentation strategies that actually investigates how users interact with the dialog system to perform a task.
 presentation is that it guides users through the dialog by presenting only options that are likely to be of high relevance to them, thus reducing the reliance on user speech.
UMSR exploits information from the user model to provide users with the opportunity to select between the most suitable options available. It computes the trade-offs between options to most effectively narrow down the number of options. This way, considerably fewer turns are required per dialog in comparison with the SR approach, the average dialog duration is shorter, and the optimal option (i.e., flight) is booked more often. 520 is a very promising approach to improving the user experience in terms of achieving higher task success and increasing efficiency. However, there are also other parts of the presentation that could be tailored to the user (e.g., in adaptive option clustering).
Although we used heuristics for how to exploit the information from the user model for content structuring, a very important next step would be to analyze the relationship between the user X  X  valuations and how they explore the option space. It is conceivable that other ways of organizing the options could lead to even shorter refinement paths and quicker interactions. Concerning dialog turn length and complexity, we believe that better formal methods are needed in order to automatically estimate the cognitive burden placed on a user during the dialog interaction. We now briefly address these issues.

Tailored Clustering. The user model can also be used for further tailoring the system responses to the user by taking into account the user X  X  valuations during the clustering step. Instead of using a fixed number of target clusters, it would be better to use a flexible number of natural clusters that the data fall into. This would make the labeling more difficult, but would make clusters (and therefore descriptions of option properties) more meaningful. Furthermore, the distance function used for clustering could be sensitive to the user model. For instance, the price axis used during clustering for a student who cares very much about price could be more fine-grained in the most relevant low price range.

An Adaptive User Model for Turn Length. We learned from our experiments and related work that turn length is important to control. Although we found that our system tended to produce turns that were often rather complex, in a study about choosing the optimal amount of information to convey to users, Whittaker, Walker, and Maloor (2003) found that subjects are biased towards more information. This means that providing an insufficient amount of information is perceived as worse than presenting too many details. Whittaker, Walker, and Maloor X  X  results also indicated that conciseness should be tailored to users, because some users appreciate conciseness more than others. Our system does not currently tailor turn length to specific users, because our user model does not contain information about a user X  X  conciseness preferences, or situational data, such as whether they are in a hurry, or can only devote a limited amount of attention on the task. Furthermore, Polifroni and Walker (2008) found in their user study that people who are not very familiar with the available options (e.g., tourists in a foreign city searching the restaurant domain) appreciate potentially longer, tailored summaries more than users who are very familiar with the data and know more precisely what they are looking for X  X uch users preferred a simple refinement strategy or refinement with association over a user model X  X ased recommendation.
 Exploring the Relationship between the User Model and Optimal Dialog Structure (Minimize
Exploration Need). We have shown that presenting users first with those options that are most relevant according to their user model improved efficiency over using an order which minimizes entropy but does not take into account the user model. However, we have not shown that this is necessarily the best possible order. Therefore, it would be interesting to run a more large-scale user experiment in which users use the system in an even more natural setting for booking flights that match their own interests, analyzing how often users explore more than one branch in the tree as a function of the tree structure. Having to investigate different branches of the tree is an indicator that the tree structure is not optimal. This information could then be used to improve on the content structuring algorithm and learn more about the relationship between the user model and users X  exploration strategies and interests when performing the task.
Measures of Cognitive Load. An interesting aspect in information presentation is also how much cognitive load the system-generated utterances place on the user. In this work, we try to manage cognitive load by controlling how many pieces of information are conveyed in one system turn. This is, however, a very coarse measure, as different linguistic factors have also been shown to affect cognitive load on users. For example, surprising or incoherent information structure has been observed to be more difficult to process (Vauras, Hy  X  on  X  a, and Niemi 1992; Van Gompel, Liversedge, and Pearson 2004), and complex syntactic structures (e.g., long-distance dependencies) have been shown to impose difficulty (Gibson 1998). Language processing difficulty is also affected by frequency: Less frequent structures and words are more difficult to process than more frequent ones (Ehrlich and Rayner 1981; Rayner 1998; Rayner et al. 1998). Furthermore, lexical access (Pollatsek and Rayner 1990) and word predictability (Rayner et al. 2001) have also been shown to play a role. Finally, deciding what is an information unit and estimating how difficult they are to remember (and recall) for a particular user is not a trivial task, and is highly dependent on individual differences in affect, aptitude, intelligence, episodic memory, and so on.
 based on the number of information units to remember, the syntactic structure of the generated sentences, and their semantic coherence would allow the system to adapt to situational constraints (e.g., generate less complex but potentially less efficient interac-tions if the user is performing another task simultaneously), or to a specific user in order to account for age or disabilities.
 what makes presentations based on the UMSR approach so successful, we have recently performed experiments investigating the role of linguistic devices to explicitly point out trade-offs among options (e.g., but , also , just , only ), which are used in UMSR presenta-tions to highlight relations among and trade-offs between options. We found that in both written and spoken presentations of options, those that include these linguistic devices facilitate recall for comparisons among options, when compared to a condition in which presentations do not include such linguistic cues (Winterboer 2009; Winterboer et al. 2011). In future work, we plan to consider how the syntactic complexity of the sentences in a presentation affects cognitive load, and how this interacts with both the number of options and attributes presented, and the use of linguistic devices to point out trade-offs.
 Acknowledgments References 522 524 Appendix 1: Dialogue Scripts for Experiments 1 and 2 Training Scenario (Steve) Steve X  X  user profile:
You X  X e going to read the transcripts of dialogues between a customer, Steve, and two dif-ferent automated travel agents. When asked to fill out a form indicating his preferences for air travel, here X  X  what Steve said:
I X  X  pretty flexible. I have no preferred airline and I don X  X  care about particular layover airports. X  A: Dialogue between Steve and UMSR system:
Steve: Hello. I need a cheap flight from Edinburgh to San Francisco on Thursday, System: I found three flights. They all have a short travel time but require a connection. Steve: Tell me more about the cheap flight, please.

System: The Air France flight leaves Edinburgh at 9:05 am and requires a connection B: Dialogue between Steve and SR system:
Steve: Hello. I need a cheap flight from Edinburgh to San Francisco on Thursday,
System: There are three cheap flights from Edinburgh to San Francisco that arrive
Steve: Can you give me more detailed information about the flight for 304 pounds,
System: It leaves Edinburgh at 9:05 am and requires a connection in Paris. The total Scenario 1 (Carol) Carol X  X  user profile:
You X  X e going to read the transcripts of dialogues between a customer, Carol, and two different automated travel agents. When asked to fill out a form indicating her preferences for air travel, here X  X  what Carol said:  X  X  X  X  a frequent flier and collect frequent flier points with KLM, so the most important thing when booking a flight is the airline. Second most important are the arrival time and the number of legs. Third most important is the travel time. I X  X  not too concerned about the price or the layover airport, although I prefer not to connect in London Heathrow. X  A: Dialogue between Carol and UMSR system: Carol: Hello. I would like to book a flight from Edinburgh to San Francisco for System: Do you have any preferences for airports? Carol: I X  X  rather not connect in London Heathrow.

System: I found two flights that both require a connection. There X  s a KLM flight for B: Dialogue between Carol and SR system: Carol: Hello. I would like to book a flight from Edinburgh to San Francisco for System: There are no flights that leave Edinburgh after 11 am and that are on KLM. Carol: Are there any flights on other airlines that leave Edinburgh after 11 am?
System: There are 7 flights that leave Edinburgh after 11 am. All of them have avail-Carol: Do you have information about the travel time of these flights?
System: Most of the flights take between 18 hours and 20 hours, one has a travel time Carol: Please tell me about that flight with under 16 hours travel time.

System: The Flybe flight leaves Edinburgh at 11:45 am and arrives San Francisco at Scenario 2 (Walter) Walter X  X  user profile:
You X  X e going to read the transcripts of dialogues between a customer, Walter, and two different automated travel agents. When asked to fill out a form indicating his preferences for air travel, here X  X  what Walter said:  X  X  X  X  a business traveller, so the most important thing for me is to fly business class. I need to get to my meetings in time and don X  X  want to spend too much time in airports, so second most important to me are arrival time, travel time, and number of legs. Third most important is to fly on KLM, because I collect bonus miles. I X  X  not concerned about travelling cheaply. X  A: Dialogue between Walter and UMSR system:
Walter: Hello. I X  X  like to book a flight from Edinburgh to Brussels for tomorrow. I need System: Do you have any airline preferences?
Walter: Yes, KLM. And I X  X  rather not connect in London, if at all possible. 526 System: There are four flights with availability in business class. None are on KLM. Walter: Can you tell me more about the business class flights that arrive earlier?
System: The two flights with shortest travel time are both on British Airways and cost B: Dialogue between Walter and SR System: Walter: I X  X  like to book a flight from Edinburgh to Brussels for tomorrow.
System: There are 28 flights from Edinburgh to Brussels. Most of them require a
Walter: Are there any direct flights with availability in business class that arrive
System: There are no direct business class flights that arrive around 3 pm. However,
Walter: No, that X  X  too late . . . what about connecting business class flights that arrive
System: There are three business class flights that require a connection and arrive Walter: How long do these flights take?
System: The British Airways flights take 3 hours and 20 minutes and the Lufthansa Walter: Are there any direct economy flights?
System: Yes, there X  X  a direct flight on BMI. It arrives at 1:10 pm and has a travel time of Scenario 3 (Carol) Carol X  X  user profile:
It X  X  Carol again. This time she wants information about flights to Brussels. Remember what she said in her user profile:  X  X  X  X  a frequent flier, so the first most important thing for me is the airline, because I collect frequent flier points with KLM. Second most important to me is arrival time and number of legs. Third most important is travel time.
I X  X  not too concerned about the price or the layover airport, although I prefer not to connect in London Heathrow. X  A: Dialogue between Carol and UMSR system:
Carol: Hello. I would like to book a flight from Edinburgh to Brussels for Thursday,
System: I found three flights with a good price. Two of them are on KLM. They both Carol: Please tell me more about the KLM flights.
 System: One of them arrives at 11:20 am but has a travel time of 4 hours 15 minutes. B: Dialogue between Carol and SR system:
Carol: Hello. I would like to book a flight from Edinburgh to Brussels for Thursday,
System: I found one KLM flight that arrives Brussels at 11:20 am. It takes 4 hours Carol: Please tell me more about that flight.

System: It leaves Edinburgh at 6:05 am and costs 111 pounds. You need to make a Scenario 4 (Steve) Steve X  X  user profile:
It X  X  Steve again. This time he wants to go to San Francisco. Remember Steve X  X  user profile:  X  X  X  X  a student, so the most important thing to me is to get a cheap flight.
Otherwise I X  X  pretty flexible. I have no preferred airline and I don X  X  care about particular layover airports. X  A: Dialogue between Steve and UMSR system:
Steve: Hello. I would like to book a flight from Edinburgh to Brussels for Thursday, System: What is your desired arrival time? Steve: Ahm . . . in the early afternoon.

System: Ryan Air offers the cheapest flights to Brussels. They cost just 49 pounds, but B: Dialogue between Steve and SR System:
Steve: Hello. I would like to book a flight from Edinburgh to Brussels for Thursday,
System: There are three flights for only 49 pounds on Ryan Air. They all require a
Steve: Is there also a cheap *direct* flight? 528 System: The cheapest direct flight is on BMI and costs 112 pounds.
 Steve: Okay. . . what are the departure and arrival times of the three RyanAir flights?
System: The first Ryan Air leaves Edinburgh at 8:05 am and arrives at 12:45 pm. The Scenario 5 (Walter) Walter X  X  User Profile
It X  X  Walter again. This time he has another request. Remember his preferences:  X  X  X  X  a business traveller, so the most important thing for me is to fly business class. I need to get to my meetings in time and don X  X  want to spend too much time in airports, so second most important to me are arrival time, travel time, and number of legs. Third most important is to fly on KLM, because I collect bonus miles. I X  X  not concerned about travelling cheaply. X  A: Dialogue between Walter and UMSR system:
Walter: Hello. I would like to book a flight from Edinburgh to San Francisco for
System: There are two flights that arrive in San Francisco at 3:45 and 4:35 but neither Walter: Please tell me more about the Air France flight.

System: The Air France flight leaves Edinburgh at 9:05 am and arrives San Francisco B: Dialogue between Walter and SR system:
Walter: I X  X  like to book a flight from Edinburgh to San Francisco for tomorrow, arriv-System: I found one KLM flight with availability in business class. It arrives at 3:45. Walter: Are there any direct flights that arrive around 4 pm?
System: There are no direct flights from Edinburgh to San Francisco. However, there Walter: How long does the KLM flight take? System: The KLM flight has a travel time of 18 hours 20.
 Walter: 18 h is very long. Are any of those other 7 flights faster?
System: There are three flights that take under 15 hours. The British Airways flight Walter: Please tell me more about the Air France Flight.

System: The Air France flight leaves Edinburgh at 9:05 am and arrives San Francisco Appendix 2: Dialogue Samples for Experiment 3 Task descriptions for participants: Task A: You need to book a flight from Edinburgh to San Francisco departing on Task B: You need to book a flight from Edinburgh to Brussels departing on May 20th.
Task C: You X  X e going from New York to Frankfurt departing on June 1st. You X  X  like to Task D: You need to book a flight from San Francisco to Prague departing on Flight booking with SR system X  X dinburgh to San Francisco System: This is the FLIGHTS information system. I am now connected to the network. User: I X  X  like to book a flight from Edinburgh to San Francisco.
 System: Please, tell me the date on which you want to travel.
 User: January 3rd.

System: I found 20 flights from Edinburgh to San Francisco. All these flights require User: I X  X  like to fly business class.

System: I found 5 business class flights from Edinburgh to San Francisco. All these User: What is their arrival times? System: Tell me your preferred arrival time? User: 4:00 pm.

System: There are two business class flights from Edinburgh to San Francisco arriving User: Yes.
 System: Which one do you want me to book for you?
User: The first one. 530
System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with SR system X  X dinburgh to San Francisco System: This is the FLIGHTS information system. I am now connected to the network. User: Yeah, I X  X  like to book another flight on January 3rd from Edinburgh to
System: I found 20 flights from Edinburgh to San Francisco. All these flights require a User: I X  X  like to fly business class and, uh, I X  X  like to arrive around 4:00 pm.
System: There are two business class flights from Edinburgh to San Francisco arriving
User: Do you have any flights on KLM that get in around 4:00 pm that are also System: I found no business class flights from Edinburgh to San Francisco flying on
User: Ok, can you repeat the options for business class flights that arrive around
System: There are 2 business class flights from Edinburgh to San Francisco arriving User: 4:00 pm.

System: There are two business class flights from Edinburgh to San Francisco arriving User: Yeah, I would like to book the first one on Lufthansa.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No. That X  X  it. Thank you.

System: OK, goodbye. Flight booking with UMSR system X  X dinburgh to San Francisco System: This is the FLIGHTS information system. I am now connected to the network.
User: Could I please go from Edinburgh to San Francisco on May 12th in business
System: I found three flights from Edinburgh to San Francisco with availability in
User: Excellent, I would like to arrive in San Francisco at 3 or 4 pm, is there anything
System: There are two flights with availability in business class. One is on United and User: Yes, I X  X  like the one with the shorter travel time, please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No, thanks.
 System: OK, goodbye.
 Flight booking with UMSR system X  X dinburgh to San Francisco System: This is the FLIGHTS information system. I am now connected to the network. User: I would like to book a flight from Edinburgh to San Francisco.
 System: Please, tell me the date on which you want to travel.
 User: January 3rd.

System: There are no direct flights from Edinburgh to San Francisco but I found User: Um, ok, I X  X l fly business class with another airline.

System: PleasewaitwhileIlookupthedatabase....Ifound3flightsfromEdinburgh User: I X  X  like to arrive around 4:00 pm.

System: There are 2 flights with availability in business class. One is on United and User: 4:00 pm.

System: There are two business class flights from Edinburgh to San Francisco arriving 532 User: I X  X l book the United flight. Get nice food.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No. Thanks.
 System: OK, goodbye.
 Flight booking with SR system X  X dinburgh to Brussels System: This is the FLIGHTS information system. I am now connected to the network. User: Yes, please.
 System: What would you like to book? User: I would like to book a flight from Edinburg to Brussels.
 System: Please, tell me the date on which you want to travel.
 User: On December 18th.

System: I found 21 flights from Edinburgh to Brussels. There are flights available in User: I X  X  like a direct flight in business class.

System: There are two direct business class flights from Edinburgh to Brussels. The User: Yes.
 System: Which one do you want me to book for you? User: The first one.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with SR system X  X dinburgh to Brussels System: This is the FLIGHTS information system. I am now connected to the network. User: Yes, from Edinburgh to Brussels on December 18th.

System: I found 21 flights from Edinburgh to Brussels. There are flights available in User: I would like to fly business class on KLM.
 System: There is one business class flight from Edinburgh to Brussels flying on KLM.
User: Yes, please.
System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with UMSR system X  X dinburgh to Brussels System: This is the FLIGHTS information system. I am now connected to the network. User: Yes.
 System: Tell me what do you want to book? User: I would like to go from Edinburgh to Brussels.
 System: Please, tell me the date on which you want to travel? User: December 18th.

System: There are two direct flights from Edinburgh to Brussels with availability in User: Yes, I would like that KLM flight.

System: Wait . . . I found one flight from Edinburgh to Brussels with availability in User: Yes...yes.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with UMSR system X  X dinburgh to Brussels System: This is the FLIGHTS information system. I am now connected to the network. User: Yes.
 System: Tell me what do you want to book? User: I would like to book a flight on KLM.
 System: From where to where? User: From Edinburgh to Brussels.
 System: Please, tell me the date on which you want to travel.
 User: December 18th.

System: There are two direct flights from Edinburgh to Brussels with availability in
User: What time do the direct business flights arrive? 534 System: Please wait while I look up the database. I found two direct flights from
User: No, neither of those flights will do, I need to fly on KLM. What flights do you
System: I found one flight from Edinburgh to Brussels with availability in business User: I X  X  like to book the flight.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with SR system X  X an Francisco to Prague System: This is the FLIGHTS information system. I am now connected to the network. User: Yes.
 System: Tell me what do you want to book? User: Uhh, I want a flight from San Francisco to Prague.
 System: Please, tell me the date on which you want to travel.
 User: On January 30th.

System: I found 21 flights from San Francisco to Prague. All these flights require a User: I X  X  like business class.

System: I found 11 business class flights from San Francisco to Prague. All these flights User: Arrival around 3:00 pm.

System: I found six business class flights from San Francisco to Prague, all arriving User: A flight on KLM?
System: There is one business class flight from San Francisco to Prague flying on KLM, User: Yes.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.

System: OK, goodbye. Flight booking with SR system X  X an Francisco to Prague System: This is the FLIGHTS information system. I am now connected to the network. User: Yes, from San Francisco to Prague on January 30th.

System: I found 21 flights from San Francisco to Prague. All these flights require User: I would like to fly business class on KLM.
 System: There are two business class flights from San Francisco to Prague flying on User: What time does the first flight arrive in Prague again?
System: The first flight departs San Francisco on KLM at 3:20 pm and arrives in Prague User: I X  X  like to book that flight.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with UMSR system X  X an Francisco to Prague System: This is the FLIGHTS information system. I am now connected to the network. User: I do. I need to go from San Francisco to Prague on June 14th.

System: There are no direct flights from Edinburgh to Prague, but I found 14 flights
User: OK, I would like to go there on KLM and I have a meeting there at 4 pm. Do
System: I found only one KLM flight with availability in business class that will get User: Yes, please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No. I don X  X .
 System: OK, goodbye.
 Flight booking with UMSR system X  X an Francisco to Prague System: This is the FLIGHTS information system. I am now connected to the network.
User: Yes, I would. 536 System: Tell me what do you want to book? User: I X  X  like to book a flight from San Francisco to Prague.
 System: Tell me the date on which you want to travel, please.
 User: January 30th.

System: There are no direct flights from San Francisco to Prague but I found 11 flights
User: I would like a business class flight on KLM, do you have anything arriving
System: There are two business class flights from San Francisco to Prague on KLM that User: I would like the second flight please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with SR system X  X ew York to Frankfurt System: This is the FLIGHTS information system. I am now connected to the network. User: I X  X  like to depart New York on June 1st and go to Frankfurt, please.

System: I found 23 flights from New York to Frankfurt. There are direct flights as well User: I X  X  like a business class flight arriving before 2 pm, sorry, arriving before noon.
System: I found 13 business class flights from New York to Frankfurt arriving between User: I X  X  like a direct flight and if there is anything on KLM? System: I found no direct business class flights from New York to Frankfurt flying on User: I X  X l just take a direct flight then between 9:30 and 12:30 pm, please.
System: I found four direct business class flights from New York to Frankfurt. All these User: [Hesitation] Lufthansa, please.

System: There is one direct business class flight from New York to Frankfurt flying User: Sure, please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.

System: OK, goodbye. Flight booking with UMSR system X  X ew York to Frankfurt System: This is the FLIGHTS information system. I am now connected to the network. User: Yes.
 System: Tell me what do you want to book? User: I would like to book a business class flight from New York to Frankfurt on System: Tell me the date on which you want to travel? User: January 15th.

System: There are six direct flights from New York to Frankfurt with availability in User: Tell me about the KLM flight.
 System: I found one flight with availability on business class from New York to User: Yes, please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with SR system X  X ew York to Frankfurt System: This is the FLIGHTS information system. I am now connected to the network. User: Yes, I would like to book a flight from New York to Frankfurt on January 15th.
System: I found 23 flights from New York to Frankfurt. There are direct flights as well User: I need a business class flight.

System: I found 17 business class flights from New York to Frankfurt. I have informa-User: It should arrive in the late morning, around 11:00.

System: I found 13 business class flights from New York to Frankfurt arriving between User: How many of those flights are direct?
System: I found 4 direct business class flights from New York to Frankfurt arriving User: Are any on KLM? System: I found no direct business class flight from New York to Frankfurt flying on 538 User: Ok, I X  X l book one of the United flights.

System: There is one direct business class from New York to Frankfurt flying on United User: I X  X l book the flight.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.
 System: OK, goodbye.
 Flight booking with UMSR system X  X ew York to Frankfurt System: This is the FLIGHTS information system. I am now connected to the network. User: Yeah, I would like to book a flight.
 System: Tell me what do you want to book? User: Well, I want to book a flight on January 15th, uh, and that X  X  going to be from
System: There are six direct flights from New York to Frankfurt with availability in
User: Uh, well, I don X  X  think that X  X  going to be possible. I do prefer to fly business
System: I found three direct flights from New York to Frankfurt with availability in User: When is that going to be? System: I found one direct United flight that departs at 7:00 pm and arrives at 9:10 am. User: Yes, I would like to book that one, please.

System: Sounds good, let me book this flight for you. This will take a moment. Thank User: No.

System: OK, goodbye.
