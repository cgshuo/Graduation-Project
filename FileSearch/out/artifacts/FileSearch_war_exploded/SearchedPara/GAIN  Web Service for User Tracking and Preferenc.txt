 GAIN ( inbeat.eu ) is a web application and service for cap-turing and preprocessing user interactions with semantically described content. GAIN outputs a set of instances in tabu-lar form suitable for further processing with generic machine-learning algorithms. GAIN is demoed as a component of a  X  X MART-TV X  recommender system. Content is automati-cally described with DBpedia types using a Named Entity Recognition (NER) system. Interest is determined based on explicit user actions and user X  X  attention computed by 3D head pose estimation. Preference rules are learnt with an as-sociation rule mining algorithm. These can be e.g. deployed to a business rules system, acting as a recommender. H.4 [ Information Systems Applications ]: Miscellaneous preference learning, entity classification, association rules An important part of the personalization process is the cap-ture of user interaction and preprocessing the recorded data to a form that can be handled by the preference learning algorithm of choice. GAIN 1 ( inbeat.eu ) captures user in-teraction with a video player. The text of the video is auto-matically semantically annotated and linked to the DBpe-dia ontology with the entityclassifier.eu service. GAIN output, the aggregated user data, is subject to preference (association rules) learning using easyminer.eu .  X  Also affiliated with the Dep. of Information and Knowledge Engineering, University of Economics, Prague  X  Also affiliated with the Multimedia and Vision Research Group, Queen Mary, University of London General Analytics INterceptor and INterest Aggregator
The input of GAIN is a variable number of interest clues and a semantic description of content . Interest clues are user interactions, which can be either explicit (clicking a button) or implicit (attention level). Content is described in terms of views , the smallest amount of content to which the inter-est clue can be related to. View can contain multiple objects linked to a domain ontology by Linked Open Data (LOD) identifiers. Objects are described by attributes, properties which influence user interest in the object. Their values might be literals, or LOD identifiers. Domain ontology can be loaded to GAIN allowing computation of relatedness be-tween attribute values.

GAIN output is a set of instances in a tabular form suit-able for processing with generic machine-learning algorithms. Each mining instance relates to one view and is described by a fixed-length vector of weighted classes from the domain ontology, created by an aggregation of content of objects in the view, and a scalar value of interest , aggregation of all preference clues related to the view.

To foster integration with other components of a recom-mender system, GAIN is encapsulated into a REST web ser-vice interface. In the remainder of this section, the internals of GAIN are described.
 Tracking module is integrated into the user interface with which the users interact. It is responsible for capturing in-terest clues and forwarding them in the form of events to the Application module. There are two version: modified Google Analytics (GA) JavaScript tracking code ( ga.js ) for web analytics and a REST API for other domains.
 Application module contains the GAIN core logic. GAIN is implemented on the Node.js ( http://nodejs.org/ ), a lightweight scalable platform with event-driven, non-blocking I/O model. After processing, the data are passed to the storage module. API for importing and exporting data at multiple processing stages is also available.
 Storage module is implemented as a NoSQL document-oriented database MongoDB ( http://www.mongodb.org/ ). The key advantage of this solution is a schema-less design, which fosters the attachment of semantic description to ob-jects, with which the user interacted.
 Aggregation module combines the interest clues from the Tracking module with description of content interacted with into fixed-length vectors suitable for machine learning. Con-tent annotation is sent to the tracking module simultane-ously with each interaction or added during the aggregation. Figure 1: An extended version of the YouTube player used for the SmartTV demo
The LinkedTV project ( linkedtv.eu ) develops a recom-mender system for  X  X mart TV X , which gathers data on tele-viewers behaviour and uses them to learn their preferences. These are then used to choose links to content on the web related to the video being played that will be recommended to the user. GAIN is used for capturing and preprocessing user feedback during video playback. For easy accessibility, this usecase is demoed with the YouTube player.
 There are two sources of interaction: remote control and user behaviour feedback. These two types of interaction are depicted at Fig. 1 as  X  X asic controls X  and  X  X ehaviour controls X . Within the LinkedTV project, the latter type of interaction comes from 3D head pose estimation [2]. Every user interaction is immediately sent by the player via the REST API component to GAIN server along with the time in the video and video identification.

Consider example televiewer watching news. During a spot covering a football match, the user clicks on a bookmark button and behaviour tracking records  X  X ooking at screen X . The video is fragmented into smaller time-intervals in or-der to relate user feedback more precisely to what is on the screen at the time the feedback is recorded. This segmen-tation is performed from start and stop time of subtitles, in the LinkedTV platform, shot detection algorithms are used. The result of segmentation are views .

To identify salient objects, the text of the video, as ex-tracted from subtitles, is processed with entity recognition tool THD [1]. The THD tool also assigns each object with several type attributes corresponding to one or more DBpe-dia Ontology classes.

Example: if entity dbpedia:Ronaldinho is recognized in the subtitle, the type assigned is dbpedia-owl:SoccerPlayer. Multidimensional semantic (taxonomical) description of tracked objects are processed along with user feedback to the lower-dimensional output representation, with a tabular form suit-able for analysis with mainstream data mining algorithms.
Content Description. Each view contains a varying number of objects. First, the domain ontology is used to expand the type attributes to a class membership vector .
Next, the class membership vectors of all objects within a view are aggregated into a single class membership vector.
The  X  X bpedia-owl:SoccerPlayer X  type attribute value is ex-panded to subvector containing non-zero values also for its superclasses: dbpedia-owl:Athlete and dbpedia-owl:Person.
User feedback. None to multiple user actions are recorded during a view. These are aggregated into a single interest value , which ranges from -1 (maximum disinteret) to 1 (max-imum interest). The impact of individual types of actions is determined by a custom set of rules, such as if user clicks on bookmark, the interest is increased by 0.5 or if user looks at the screen, the interest is increased by 0.3 . Our user X  X  bookmark and look at screen actions resulted in a total 0.8 interest for the view .
 For a given user, GAIN outputs one table, where rows corre-spond to views recorded for the user. The Table has n + m +1 columns, where n is the number of classes in the domain on-tology, m number of unique objects and the last column is the estimated value of interest. User preferences are discov-ered with EasyMiner [5], a web sevice and web application for association rule discovery based on LISp-Miner [4].
Mining interactions of our user yields rules such as :  X  dbpedia-owl:Athlete  X  dbpedia:Brazil  X  interest =  X  0 . 3; 0 . 5  X   X  dbpedia:Ronaldinho  X  interest = (0 . 5; 1  X  .
 EasyMiner allows to export selected rules to a Business Rules Engine [3]. There is an ongoing work on using this engine as a recommender system. Input is a description of a candidate content item with an n + m dimensional vector of concepts. The output is the predicted interest. Acknowledgment. This research was supported by the EU via the LinkedTV project (FP7-287911), CTU in Prague grant (SGS13/100/OHK3/1T/18) and VSE by grant IGA 20/2013. The content in Fig. 1 was adapted from Wikipedia. [1] M. Dojchinovski and T. Kliegr. Entityclassifier.eu: [2] J. Leroy, F. Rocca, M. Mancas, and B. Gosselin. Second [3] S. Voj  X  X  X r, T. Kliegr, A. Hazucha, R.  X  Skrabal, and [4] M.  X  Sim  X unek. Academic KDD project LISp-Miner. In [5] R.  X  Skrabal, M.  X  Sim  X unek, S. Voj  X  X  X r, A. Hazucha,
