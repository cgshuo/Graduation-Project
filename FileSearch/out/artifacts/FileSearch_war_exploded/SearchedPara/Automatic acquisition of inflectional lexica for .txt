 1. Introduction Morphological variation, studied by the linguistic field of morphology, may be the result of either inflection or derivation .
Inflection of a word results in word forms that express its grammatical features (such as number and case for nouns; number, stem (the part of the word common to all inflected forms), such as suffix  X -s X  used to express the plural of English nouns. On the other hand, derivation is concerned with the derivation of new words from other words using the derivational affixes. For instance, suffixing  X -ize X  to stems of English adjectives derives a verb, as in standard ? standardize .
Languages differ greatly in their morphological complexity, characterized by the amount of affixation in the language, and logically more complex, especially regarding inflection. First, there is the problem of a large number of ambiguous inflec-tional suffixes, i.e., suffixes that express different morphosyntactic features when combined with different stems. For instance, in Croatian language inflectional suffix  X -e X  expresses the genitive singular feature of most feminine nouns, but it can also express the vocative singular feature of most masculine nouns. Because of this, Slavic languages are also rich in homographs (word forms associated with two or more distinct lexemes). For example, Croatian word form voda may be asso-ciated with three distinct lexemes: noun voda (water), noun vod (a platoon), and the verb voditi (to lead). Moreover, there is the problem of frequent phonological alternations of the stem ending. For example, suffix  X -e X  in noun vojnike (soldier) expresses the accusative plural feature, whereas in vojnic  X  e the same suffix is used on the phonologically altered stem to express the singular vocative feature.

Morphological normalisation refers to the conflation of the morphological variants of a word to a single representative form, the morphological norm . Normalisation effectively prevents the meaning of a word to be dispersed among several of its morphological variants. It is commonly used in information retrieval (IR) and text mining (TM) systems to improve retrieval and classification performance and to reduce the dimensionality of the feature space. Morphological normalisation has been shown to improve the retrieval of English documents ( Hull, 1996 ), and similar has been shown for morphologically acter n-gram tokenization. Using n-grams has been found to improve performance over using unnormalised words in case of the major European languages, but at the cost of increased computational requirements ( McNamee &amp; Mayfield, 2004 ). The than when using normalisation.

The two main approaches to morphological normalisation are stemming and lemmatisation . Stemming refers to the re-moval of affixes from word forms, and the resulting morphological norm is the stem common to all word forms ( Lovins, address both inflection and derivation. The obtained stem is not to be confused with the linguistic stem, the former not nec-essarily being a valid morpheme, or a combination thereof. Stemming has been successfully applied to English ( Lovins, 1968;
Porter, 1980 ) as well as many other morphologically more complex languages ( Carlberger, Dalianis, Hassel, &amp; Knutsson, Willett, 1992; Savoy, 1999, 2006 ).

Contrary to stemming, lemmatisation is the task of determining the linguistically valid canonical form, or lemma , of a given word form. This task is nontrivial for highly inflectional languages for which the lemma often differs from the stem and obtaining one from the other requires the use of substantial linguistic knowledge. Unlike stemming, which may deal with both inflection and derivation, lemmatisation deals only with inflection. In many cases, however, lemmatisation also includes the disambiguation of homographs as well as morphosyntactic tagging. Thus, from a linguistic perspective, lemmatisation is more sophisticated than stemming. For highly inflectional languages it in fact comes close to the task of full morphological icon. The latter relies on string transformation rules (mostly suffix replacement), often induced automatically from a dataset turn both approaches rely on an inflectional lexicon, associating the corresponding word forms with each lemma.
Lexicon-based lemmatisation has several advantages over stemming when it comes to normalisation of inflectionally com-ambiguous suffixes that may trick the stemmer into producing the wrong stem. For example, suffix  X -eg X  is used for adjectives stemming rules, or require the introduction of additional recoding rules. Another advantage of lexicon-based lemmatisation is the fact that lexicon-based lemmatisation can indicate homography, whereas stemming cannot. Thus, in case of word form or disambiguated if necessary. Stemming, on the other hand, would simply result in a single norm,  X  vod  X  for instance, thus wrongly conflating the word forms of three distinct and semantically unrelated lexemes. Finally, lemmatisationhas the advan-tional level. We can then use lemmatisation as the first stage of such a normalisation procedure.

An obvious disadvantage of lexicon-based lemmatisation is in the limited lexicon coverage and the labor and knowledge requiredto compilea lexicon of an adequatesize. As for the former,it shouldbe noted that limitedcoverage need not be a prob-lem for some applications. In text mining, for example, there is no need to extend the lexicon coverage beyond the classifier training set. To overcome the latter, methods have been proposed for automatic acquisition of inflectional lexica from corpus.
The approach we took in this paper may be referred to as lexicon-based inflectional normalisation . This approach is some-where in between stemming and lemmatisation: we use an inflectional lexicon to normalise at inflectional level, but the norms themselves need not exactly be lemmas since for most IR and TM applications this is not required. We address the problem of acquiring automatically such an inflectional lexicon from raw corpus. Thus, our approach has all the aforemen-tioned advantages of lemmatisation over stemming, but at the same time eliminates the immense effort required to compile the lexicon by hand. The acquisition procedure is based on a convenient and a highly expressive morphology representation formalism. We apply our approach to the morphologically complex Croatian language, but it should be equally applicable to other languages of similar morphological complexity. In this paper we focus on evaluating the linguistic quality of the ac-quired lexicon and task-independent evaluation of its normalisation performance. Previous task-specific evaluation in the context of document categorization is discussed in Malenica et al. (2007) and  X ilic  X  et al. (2007) .

The rest of the paper is organized as follows: Section 2 summarizes the related work. Section 3 describes the proposed morphology representation formalism. Section 4 describes the lexicon acquisition algorithm in detail. Section 5 describes the application of our approach to Croatian language. Experimental evaluation is given and discussed in Section 6 . Finally, the conclusions and future work are summarized in Section 7 . 2. Related work
Inflectional lexicon acquisition presupposes the use of a morphological component capable of lemmatising a given word form and also of generating the word forms of a given lemma. For this to be possible, the component must rely on some kind of a formal description of inflectional morphology. One common approach to morphology description is the word-and-paradigm approach introduced by Hockett (1954) . The word-and-paradigm approach associates a particular inflectional pattern (the paradigm) with each lemma. Based on this formalism, an inflectional lexicon is acquired as follows. First, the morphological component is used to lemmatise each word form from corpus. Lemmatisation need not be precise and may yield a number of be expected for highly inflectional languages due to grammar ambiguity. Each lemma-paradigm pair is then fed to a morpho-guistically invalid word forms. Thus, the next step is to assess the validity of each lemma-paradigm pair based on the frequencies with which the corresponding word forms are attested in corpus. For lemma-paradigm pairs that are considered valid, the corresponding lemma-word form pairs are included into the lexicon, whereas others are discarded. The described approach has been followed by Oliver (2003) to acquire a wide-coverage inflectional lexicon for Russian language, and later by
Clement, Sagot, and Lang (2004) for French language and Sagot (2005) for Slovak language. Oliver and Tadic  X  (2004) used the same approach to enlarge the existing Croatian inflectional lexicon that has previously been compiled by Tadic  X  and Fulgosi (2003) . All the mentioned approaches rely either on human intervention or additional linguistic knowledge (queries to the Internet, part-of-speech information, etc.) to resolve the grammar ambiguities appearing during the acquisition process.
An obvious drawback of the described approach is the need to produce the inflectional patterns by hand. If a morpholog-can try to alleviate the burden by making the rule representation formalism as convenient as possible. This is what moti-vated the functional morphology formalism developed by Forsberg and Ranta (2003) . It is a framework for defining natural language morphologies in a functional programming language ( Hudak, 1989 ). The principal idea is to use functions  X  the basic elements of a functional programming language  X  to represent paradigms. Functions are defined over finite algebraic types: types represent the grammatical categories (such as case, gender, and number), and the values of the type represent the grammatical features. Given an input string (the lemma) and the grammatical features, the function generates the cor-responding word form. Functional morphologies for various languages have been developed, including Latin, Swedish, Ital-putation is unidirectional: word forms can be generated but not lemmatised. To address this problem, Forsberg, Hammar-from word forms. This way the user can precisely define which word forms should and should not be attested in the corpus, as well as additional constraints imposed on the structure of the stem.

Our approach is different from those described above in that we aim at acquiring a lexicon for morphological normalisa-sure that all word forms of a single word get conflated to the same and unique norm. What this means in practice is that we can allow for some ambiguity to remain, so instead of relying on human intervention during the acquisition process, we make use of simple heuristics. This way, once the inflectional patterns have been defined, acquisition can be repeated effort-lessly on different corpora to obtain corpus-specific lexica.

Nevertheless, there is still the need to produce the inflectional patterns by hand. To alleviate this drawback, we devised a convenient morphology representation formalism. The formalism closely resembles the often informal but highly expressive description of morphology as found in traditional grammar books. This way, morphology description merely needs to be rewritten in our formalism, rather than adapted to it, which requires only a minimal amount of linguistic knowledge. This is in contrast to the amount of knowledge required to develop a sophisticated rule-based stemmer or a lemmatiser. More-over, for the inflectionally complex languages such as Croatian, the number of paradigms is much less than the number of vene language). Similarly to functional morphology, our representation formalism is inspired by the functional programming style. However, our formalism is more abstract and has the advantage of being directly applicable for lexicon acquisition without the need to write additional extraction rules. 3. Morphology representation formalism
In this section, we introduce a formal framework for representing the inflectional morphology of a natural language. The main notion employed here is that of a function, drawing upon the ideas from functional programming ( Hudak, 1989 ). 3.1. String transformations and condition functions
Let S be the set of all strings producible by the alphabet of a language, and let e denote an empty string, e 2 S . Morpho-logical transformation of one word form into another is represented by a string transformation function subject to conditions (i) 8 s 1 ; s 2 2 S  X  t  X  s 1  X  X  t  X  s 2  X  X ) X  s 1  X  s 2  X _ X  t  X  s (ii) t  X  e  X  X  e .

The empty string e is used as an indication that the transformation is not applicable to the given string, and we then say that t has failed on string s . An example of string transformation failing on a string is an attempt to remove a non-existing function, 8 s 2 S null  X  s  X  X  s , termed null-transformation . Let T denote the set of all string transformations.
In practice, language morphology gives rise to a small number of transformation types. For concatenative morphologies, these are typically suffixing, prefixing, phonological alternation, or some combinations of these. This makes it convenient to define the string transformations by means of only a few higher-order higher-order function sfx : S ! T , defined so that sfx  X  s
The so-defined string transformation sfx  X  s  X  may now be applied to a stem s to add to it the string s sfx  X  s 1  X  X  s  X  X  s  X  X  s 1 , where  X  X  denotes string concatenation. We will make extensive use of higher-order functions in our mor-phology representation formalism.

In this inflectional pattern the lemma (singular nominative form) is identical to the word X  X  stem. The other word forms are obtained by suffixation of the word X  X  stem, with additional phonological alternation of the stem in some cases. Sibilarization
The corresponding string transformations can be defined as follows. To define suffixation transformations we can use the higher-order function sfx : S ! T described above. For example, the word form corresponding to the genitive case of the alternations, a higher-order function alt : }  X  S S  X ! T may be used, where } is the powerset operator. Here the phonolog-stem alternated by sibilarization and palatalization may now be obtained with alt  X  sib  X  X   X  vojnik  X   X  X   X  vojnic  X  and sfx  X   X  e  X   X  X   X  vojni c  X   X  X   X  vojni ce  X .

Besides the inflectional patterns themselves, the grammar usually defines the conditions for pattern applicability. For example, restricting its use to stems with a particular ending. To represent such applicability conditions, we use condition functions of the form condition functions.

Similarly to the string transformation functions, we may use higher-order functions to conveniently define the condition functions. As an example, consider again the inflectional pattern in Table 1 . The grammar defines this pattern to be applica-sonants). To test whether the stem has a particular ending, we may define a higher-order function ends : }  X  S  X ! C . Function sonant group. Finally, we can combine the two condition functions as follows:
The high expressiveness of our morphology representation formalism owes to the fact that arbitrary functions may be used functions by means of various higher-order functions. One issue that requires additional explanation is the actual program-ming implementation of the string transformation functions comprising set T . Earlier we pointed out that our formalism is capable of both word form generation and lemmatisation. For this to be possible, we need a way of computing the inverse of each string transformation. Since the computation of inverses is intractable in general, we cannot use functions of a func-tional programming language directly to implement the string transformations. Instead, we implement the string transfor-mation functions indirectly as a list of primitive string operations, each corresponding to a simple bijective function, and each represented by a value of an algebraic type. This way composition amounts to list concatenation, and computing the inverse amounts to inverting the primitive string operations of a reversed list. 3.2. Inflectional rules
In our representation formalism, inflection of a word (its paradigm) is defined by means of an inflectional rule . An inflec-tional rule defines the distinct word forms of a single word, including its lemma, as string transformations of the word X  X  rule r is a pair:
The condition function c defines the condition that the stem s must satisfy in order for the rule r to be applicable, and f t ; ... ; t n g is a set of string transformation functions with a distinguished element denoted t tions t 0 ; ... ; t n define the transformation of stem s into n distinct word forms, t formation t 0 transforms the stem s into the lemma l , i.e., l  X  t As an example, consider again the inflectional pattern from Table 1 . The corresponding inflectional rule, denoted r defined as follows: where condition function c is given by (1) .

As another example consider the adjectival paradigm of Croatian language. The adjectival paradigm is more complex then the noun or verb paradigm because it gives three degrees of comparison, each using a different stem. The comparative degree typically uses a suffixed or alternated stem of the positive degree, and the superlative degree in turn prefixes  X  X aj- X  to the stem. For example, adjective brz (fast) uses stem brz for positive word forms, jotated stem brz  X  for comparative word forms, and stem najbrz  X  for superlative word forms. Additionally, most adjectives have separate inflectional patterns for indefinite separately the indefinite positive, the definite positive, the comparative, and the superlative word forms. We can then make the inflection of adjective brz (fast). The corresponding inflectional rule, denoted r dition function c is omitted): positive, comparative, and superlative, respectively, as follows (full definitions are omitted): String transformations t C and t S define how the stem is modified in the comparative and superlative degree, respectively.
They are defined as follows: right-hand sides of (5) and (6) into (4) we get which is the form with individual patterns flattened out. 3.3. Inflectional relation stem s obtainable from lemma l , and (ii) no string transformation defined for the inflectional rule r fails. More formally: where s  X  t 1 0  X  l  X  is the stem obtained from the lemma by application of the inverse of transformation t by function c : an inflectional rule either defines all word forms of a lemma, or it defines none.

Having defined the notion of an inflectional rule and the applicability conditions, we now have what is necessary to asso-ciate a lemma with all its word forms. We represent this by the inflectional relation , denoted many relation defined on S as follows:
At this point it is important to understand that relation if rule r is ungrammatical we can hardly expect relation r form brz  X  eg from Fig. 1 , the comparative singular masculine/neuter genitive form of the lemma brz . In this case, besides  X  brz  X  r A 1  X  br zeg  X , which is linguistically valid, we also have  X  br zeg  X  r word form  X  brz  X  eg  X  can be interpreted both as a word form and the lemma. This can be verified simply by choosing from (7) t i  X  t 0  X  null since evidently  X  t i t 1 0  X  X   X  br zeg  X   X  X  X  null null rules r N 1 and r A 1 defined by (3) and (7) , respectively. In this case, we not only have  X  brz  X  also  X  br zeg  X  r N 1  X  br zeg  X , which again is linguistically invalid since rule r 4. Lexicon acquisition
In this section, we describe how, based on a set of inflectional rules R , an inflectional lexicon is acquired from corpus. An inflectional lexicon associates lemmas with the corresponding word forms. Within our morphology representation formal-ism, this association is captured by the inflectional relation rule r from R corresponds to lemma l , we can compactly encode the association between l and its word forms as a pair  X  l ; r  X 2 S R , which we call a lemma-rule pair . Formally, an inflectional lexicon L consists of a set of entries, L  X f E lexicon entry E i generally consist of a set of lemma-rule pairs, E contains more than one lemma-rule pair.
 rences of word form w in corpus W . For simplicity, we will use W to denote both the multiset and the underlying set of ele-ments; the meaning will be clear from the context. Lexicon acquisition is formalized by the function acquire defined in Table iteratively, with a single lexicon entry being acquired in each iteration. We use recursion over the corpus W to model iter-ation; since in each recursive call (lines 10 and 12) some word forms are being removed from the corpus, the corpus W effec-tively shrinks in each iteration and the acquisition eventually terminates (line 14). From now on we will use W the initial corpus (the one to which function acquire is first applied) and W , where W W
The acquisition of a lexicon entry can be divided into three steps: obtaining the lemma-rule pairs (lines 3 and 4), evaluation of lemma-rule pairs (line 5), and forming of a single lexicon entry (lines 6 X 9). 4.1. Obtaining the lemma-rule pairs
Obtaining the lemma-rule pairs begins by choosing a word form w from corpus W (line 3 of Table 2 ). The order in which the word forms are chosen may influence the quality of the acquired lexicon. For this reason, we use function wfpref : }  X  S  X ! }  X  S  X  to narrow down the set of word forms to those we prefer to select first, and then make an arbitrary choice from this set. Here, as well as in the rest of the paper, the choice of an element from a nonempty set X is formalized suitable for Croatian language will be given in Section 5 .
 After the word form w has been chosen, we use the lemmatisation function lm where r is the inflectional relation given by (9) .

Ideally  X  and unless the word form w is homographic  X  lm R because, as discussed in Section 3.3 , lemmatisation precision is limited due to grammar ambiguity. For example, if R  X f r N 1 ; r A 1 g , where r N 1 and r A 1 are defined by (3) and (7) , respectively, then lm though acceptable according to the rules from R . In the above example, lemma-rule pairs  X   X  br zeg  X  ; r spurious, whereas  X   X  brz  X  ; r A 1  X  is linguistically valid.
 4.2. Evaluation of lemma-rule pairs
To filter out the linguistically invalid lemma-rule pairs, we turn to the corpus as an additional source of linguistic knowl-edge. The underlying idea is to use the frequencies of word forms from corpus as supportive evidence for the validity of a lemma-rule pair with which those word forms are associated. We assume that more word forms from corpus will be asso-ciated with valid than with spurious lemma-rule pairs.

The word forms associated with a lemma-rule pair are obtained by the word forms function wf : S R ! }  X  S  X  , defined as follows: where r is the inflectional relation given by (9) .

The linguistic validity of a lemma-rule pair  X  l ; r  X  based on corpus W is evaluated using the heuristic scoring function score : S R }  X  S  X ! N . We compute the score of each of the lemma-rule pair from set LR obtained in the previous step so to obtain the maximal score (value maxScore in line 5 of Table 2 ). The heuristic scoring function is defined as follows: where is the frequency of word forms in the initial corpus W 0 that are associated with lemma-rule pair  X  l ; r  X  . Function plausibility . Priority function pr is used to establish precedence among lemma-rule pairs for which the frequency value is identical. For example, priority may be defined so that nouns are given precedence over adjectives, or that lemmas that are themselves occurring in the corpus are given precedence over those that are not. On the other hand, plausibility function forward way to evaluate the plausibility of a lemma-rule pair is to consider the number of associated distinct word forms from corpus, and regard the lemma-rule pair as implausible if this number is bellow a certain threshold. This way it is pos-we discuss the definitions suitable for Croatian language in Section 5 . 4.3. Forming of lexicon entry
We now use the lemma-rule pairs obtained in the first step and the maximal evaluation score obtained in the previous step to form a lexicon entry. If the maximal score is zero, then no lemma-rule pair is plausible for word form w and the acquisition continues with w being excluded from the corpus (line 12 of Table 2 ). Otherwise, a lexicon entry E is formed.
To form a lexicon entry, we begin by selecting the best scored lemma-rule pairs (set BLR in line 7 of Table 2 ) with which the word form w is associated. As discussed above, this need not be a singleton set, and if it is not, the lexicon entry will be unresolved. However, in order for the lemma-rule pairs to comprise a single lexicon entry, we need to ensure that all are associated with an identical set of word forms from corpus. We do this by selecting a subset from BLR as follows. First, we obtain the word forms associated with an arbitrary chosen best scored lemma-rule pair (set WF in line 8 of Table 2 ).
Then, we select the lemma-rule pairs with which these word forms are associated (set E in line 9 of Table 2 ). The acqui-sition continues with word forms WF (which includes the word form w ) being removed form corpus W (line 10 of Table 2 ).

The question arises as to what are the consequences of keeping unresolved entries in the lexicon, instead of trying to re-solve them. One possibility, used in Oliver and Tadic  X  (2004) , would be to use external information sources based on user/
Internet queries. In our case, the main purpose of the acquired lexicon is morphological normalisation  X  the reduction of a word form to its norm  X  rather than the opposite task of generating word forms from a given lemma. Thus, if we are to use norms that correspond to lexicon entries, instead of the individual lemma-rule pairs of which they are composed, it be-comes irrelevant whether the entry is resolved or not. We formalize this idea by a lexicon-based normalisation function norm L ; R : S ! }  X  S  X  , defined with respect to the acquired lexicon L and the set of inflectional rules R as follows: where lm R is the lemmatisation function defined by (10) , and encode : }  X  }  X  S R  X  X ! S is a function that assigns norms to classes are assigned unique norms. Since word forms that are associated with a particular lemma will be associated with the corresponding lexicon entry no matter whether it is resolved or not, we need not really expend any effort to resolve it.
Note that homographic word forms will be associated with two or more lexicon entries and, consequently, two or more norms.
 5. Application to Croatian language
In this section we describe the application of the lexicon acquisition procedure to Croatian language. This requires to de-fine the Croatian inflectional morphology in our representation formalism, as well as the language-dependent heuristics. The actual implementation was done in the Haskell programming language ( Jones, 2003 ). 5.1. Morphological rules
The rules of Croatian morphology were adopted from Diklic  X  (1979) . The implementation consists of 89 inflectional rules: 43 for nouns, 31 for verbs, and 15 for adjectives. Inflectional rules for other inflectional word classes (numbers, pronouns, and adverbs) were not defined; pronouns and numbers are considered stop words and ignored altogether in most IR and TM applications, whereas Croatian adverbial paradigm is completely subsumed by the adjectival paradigm.

To define the morphological transformations, we used a set of six higher-order functions listed in Table 3 . We also defined common compositions of morphological transformations, as the one exemplified in Table 3 , as separate higher-order func-tions to make rule definitions more concise. The condition functions were defined using the ends and consGroup higher-order functions discussed earlier. 5.2. Plausibility predicate Predicate Pl is used to assess the plausibility of a lemma-rule pair in (12) . We define it as follows: where len is used to compute the orthographical length of a lemma, wf is the word forms function given by (11) , R subset of inflectional rules referring to qualificative (non-possessive) adjectives, and a ditions make up the predicate. First, lemmas containing less than three characters are considered linguistically implausible (though rare exceptions exist). Second, a plausible lemma-rule pair must be supported by at least a distinct word forms from corpus not yet acquired (recall that word forms are removed from multiset W as soon as they are acquired). This embodies not shared with any other lemma-rule pair. This is not to say that lemmas with homographic word forms will not be ac-quired, but rather that each lemma must have some word forms that are exclusive to it. We will require more word forms in case of qualificative adjectives ( a 1 ) than in any other case ( a adjectives are rather ambiguous. 5.3. Priority of lemma-rule pairs
Function pr in (12) assigns priorities to lemma-rule pairs, and we use this to address the following three problems. The first problem is the inability to determine the correct part-of-speech due to inability to discriminate between nouns and adjectives. In Croatian language, adjectival paradigms resemble noun paradigms, and it is often the case that a noun para-digm is completely subsumed by an adjectival paradigm considering the used suffixes. The second problem is in determining whether a qualificative adjective has indefinite forms or not. This presents a problem because the lemma differs in these two cases. The third problem is the acquisition of lemmas that are not even attested in the corpus. These problems can be alle-viated using the following priority function: where R N is the subset of inflectional rules referring to nouns, and R only; there are a modest number of such adjectives, thus it makes sense to prefer other adjectival rules. Value b additionally improve the priority by one point whenever the lemma is attested in the corpus, so to outscore the lemma-rule pairs for which this is not the case. 5.4. Acquisition order
The order in which the lemma-rule pairs are acquired, defined by the word form preference function wfpref , may influence thequalityoftheacquiredlexicon.Thisisbecausethewordformsassociatedwithacquiredlemma-rulepairsgetremovedfrom corpus and thus cannot contribute to the score of other lemma-rule pairs to which they are also associated. We may choose to pairs first and thus perhaps prevent the acquisition of some valid lemma-rule pairs. To overcome this problem, we employ a simple heuristics in that we choose the orthographically longer word forms first, i.e., wfpref  X  W  X  X  argmax naleisbasedontheassumptionthatlongerwordsaremoreindicativeoftheirinflectionalparadigmthantheshorterwords.This 6. Evaluation experiments
In this section we experimentally evaluate the linguistic quality of the acquired lexicon as well as its normalisation per-formance for Croatian language. The acquisition corpus used in this experiment comprises of articles from the newspaper three characters, words containing digits, words in all-caps, and words occurring less than three times were removed from the corpus, while hyphenated word forms were broken into separate word forms. 6.1. Methodology
Since the purpose of the acquired lexicon is morphological normalisation, it makes sense to measure its linguistic quality in terms of lemmatisation performance and coverage. This comparison is carried out on a sample drawn from the acquisition corpus. The sample consists of 100,000 word form tokens accounting for 28,715 word form types. We define coverage as the ratio of word forms found in the lexicon to the total number of word forms (per token coverage) or distinct word forms (per type coverage) in the sample.

To measure lemmatisation performance of the acquired lexicon, we compare the lemmatisation results on the sample against the results obtained using a gold standard morphological lexicon, handcrafted and validated by human linguistic ex-perts. To this end, we use the Croatian Morphological Lexicon compiled by Tadic  X  and Fulgosi (2003) . We frame the lemmat-isation as a classification problem on a per type basis and characterize the performance by the IR measures of precision (P) quired lexicon is considered the selected value. To make the result independent of lexicon coverage, only the cases in which both the selected and target values are available are considered; consequently, recall reflects the completeness of the result for homographic word forms. The micro-averaged harmonic mean of precision and recall (F1) is used as a combined measure of lemmatisation performance.

To evaluate the normalisation performance of the acquired lexicon, we use the error counting method proposed by Paice (1996) . Unlike the more traditional approaches, which evaluate normalisation with respect to a specific task, Paice X  X  method evaluates the performance in terms of the committed understemming and overstemming errors. Understemming errors (or errors of omission ) occur when words that ought to be conflated are not conflated, whereas overstemming errors (or errors of commission ) occur when words are conflated that ought to remain distinct. These errors are counted on a word sample in which the word form types are grouped accordingly. The understemming index (UI) is computed as the proportion of word pairs from sample that are not conflated although they belong to the same group. The overstemming index (OI) is computed as the proportion of word pairs that belong to different groups among those that are conflated to the same norm. the sample consists of 10,000 word form types from the articles of the lexicon acquisition corpus. From this sample we man-ually grouped the inflectionally related word forms. This resulted in 5512 groups, with the average group size of 1.82 word forms. The homographic word forms from sample were treated as follows: first, the homographic word forms were multiplied was performed in which the most common norm is chosen from each group. Besides the UI and OI indices, as another indication of normalisation performance we use is the index compression factor (ICF), defined as the resulting reduction in the number of types in the sample. It should be noted that, when normalising the sample, word forms not found in the lexicon are treated as norms themselves. 6.2. Results and discussion
The linguistic quality and the normalisation performance of lexica acquired using some indicative values of the heuristic parameters are given in Table 4 in order of decreasing F1 value. Results reveal that lexicon quality is strongly influenced by proportional to the number of lexicon entries. In particular, lemmatisation performance is best when plausibility predicate is rather restrictive ( a 1  X  9, a 2  X  5), whereas coverage is best when the plausibility predicate is least restrictive ( a
Heuristic acquisition order improved lemmatisation performance over random acquisition order ( wfpref  X  id ) by only 1.03% on sample (cf. rows 2 and 3). On the other hand, the proposed lemma-rule priorities improved lemmatisation performance by 10.11% (cf. rows 2 and 8). This is because prioritization reduces the acquisition of spurious lemma-rule pairs and thus directly increases lexicon lemmatisation precision without affecting its coverage. In particular, the first term in (15) im-proved lemmatisation performance by 3% on the sample (cf. rows 2 and 6), and the second term by 6.18% (cf. rows 2 and 7).
As for normalisation performance, results indicate that understemming errors are somehow more pronounced than over-stemming errors. This is because of limited lexicon coverage. Lexicon acquired with a coverage and therefore expectedly results in a larger number of understemming errors. Although the performance seems to be the best when lexicon coverage is greatest (cf. rows 4 and 5), a decrease in the ICF values reveals that this is not the case. In fact, these maximum coverage lexica contain a large number of spurious lemma-rule pairs and thus produce a large number of spurious norms, but it is due to the additional disambiguation step that this is not reflected in the UI and OI values. The other two heuristics showed to be of little importance for morphological normalisation. Performance seems to be only minimally affected by the choice of the acquisition order (cf. rows 2 and 3). Because the norms are based on lexicon entries rather than the individual lemmas, the use of lemma-rule priorities  X  although beneficial for lemmatisa-tion  X  does not increase normalisation performance (cf. row 2 and rows 6, 7, and 8). 7. Conclusion
In this paper, we have described an approach to lexicon-based inflectional normalisation and the automatic acquisition of an adequate inflectional lexicon from raw corpora. Contrary to stemming, this approach allows for precise normalisation of serving the meaning of a word. At the same time, our approach makes it possible to acquire automatically corpus-specific lexica of adequate coverage, thus eliminating the immense effort required to compile the lexicon by hand. For normalisation, as it is commonly used in IR and TM systems, the linguistic quality is important only to the extent that ensures correct con-flation of word forms to unique norms. Because of this, human intervention during the acquisition process is not required and instead we relied on simple heuristics. The acquisition procedure is based on inflectional patterns defined in a highly expressive language-independent morphology representation formalism. The formalism draws on ideas from functional pro-gramming, in particular higher-order functions and functional composition. We believe that the proposed formalism is both general and convenient enough to be easily applied to many typologically similar languages.

Our approach has been applied to the morphologically complex Croatian language. Experimental evaluation indicates good normalisation performance. Additional heuristics can further improve the linguistic quality beyond what is required for morphological normalisation. Though evaluation is carried out only for Croatian language, we believe the results to be con-clusive for languages of similar morphological complexity.

As a part of future work, we intend to compare our approach to normalisation of Croatian language with the less knowl-edge-intense approaches such as stemming. Ongoing work includes the extension of our normalisation procedure to cope also with derivational morphology, and its evaluation on actual IR and TM tasks.
 Acknowledgements
The authors would like to thank two anonymous reviewers for helpful comments and suggestions on an earlier draft of this paper. This work has been supported by the Ministry of Science, Education and Sports, Republic of Croatia, under the grants MZO X  130-1300646-0645 and MZO X  036-1300646-1986, and the Government of Flanders under the Grant KRO/ 009/06 (CADIAL).
 References
