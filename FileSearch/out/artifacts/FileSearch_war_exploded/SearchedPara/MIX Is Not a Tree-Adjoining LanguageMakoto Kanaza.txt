 The language has attracted considerable attention in computational linguistics. 1 This language was used by Bach (1981) in an exercise to show that the permutation closure of a context-free language is not necessarily context-free. 2 MIX may be considered a prototypical exam-ple of free word order language , but, as remarked by Bach (1981), it seems that no human language  X  X as such complete freedom for order X , because  X  X ypi-cally, certain constituents act as  X  X oundary domains X  for scrambling X . Joshi (1985) refers to MIX as rep-resenting  X  X n extreme case of the degree of free word order permitted in a language X , which is  X  X in-guistically not relevant X . Gazdar (1988) adopts a similar position regarding the relation between MIX and natural languages, noting that  X  X t seems rather unlikely that any natural language will turn out to have a MIX-like characteristic X .

It therefore seems natural to assume that lan-guages such as MIX should be excluded from any class of formal languages that purports to be a tight formal characterization of the possible natural lan-guages. It was in this spirit that Joshi et al. (1991) suggested that MIX should not be in the class of so-called mildly context-sensitive languages: Mild context-sensitivity is an informally de fi ned no-tion fi rst introduced by Joshi (1985); it consists of the three conditions of limited cross-serial depen-dencies , constant growth ,and polynomial parsing . The fi rst condition is only vaguely formulated, but adjoining grammars. The suggestion of Joshi et al. (1991) was that MIX should be regarded as a vio-lation of the condition of limited cross-serial depen-dencies.

Joshi (1985) conjectured rather strongly that MIX is not a tree-adjoining language:  X  X AGs cannot gen-erate this language, although for TAGs the proof is not in hand yet X . An even stronger conjecture was made by Marsh (1985), namely, that MIX is not an indexed language . 3 (It is known that the indexed languages properly include the tree-adjoining lan-guages.) Joshi et al. (1991), however, expressed a more pessimistic view about the conjecture:
This open question has become all the more press-ing after a recent result by Salvati (2011). This re-sult says that MIX is in the class of multiple context-free languages (Seki et al., 1991), or equivalently, languages of linear context-free rewriting systems (Vijay-Shanker et al., 1987; Weir, 1988), which has been customarily regarded as a formal counterpart of the informal notion of a mildly context-sensitive language. 4 It means that either we have to aban-don the identi fi cation of multiple context-free lan-guages with mildly context-sensitive languages, or we should revise our conception of limited cross-serial dependencies and stop regarding MIX-like languages as violations of this condition. Surely, the resolution of Joshi X  X  (1985) conjecture should cru-cially a ff ect the choice between these two alterna-tives.

In this paper, we prove that MIX is not a tree-adjoining language. Our proof is cast in terms of the formalism of head grammar (Pollard, 1984; Roach, 1987), which is known to be equivalent to TAG (Vijay-Shanker and Weir, 1994). The key to our proof is the notion of an n-decomposition of a string over { a , b , c } , which is similar to the notion of a derivation in head grammars, but independent of any particular grammar. The parameter n indicates how unbalanced the occurrence counts of the three let-ters can be at any point in a decomposition. We fi rst show that if MIX is generated by some head gram-mar, then there is an n such that every string in MIX has an n -decomposition. We then prove that if every string in MIX has an n -decomposition, then every string in MIX must have a 2-decomposition. Finally, we exhibit a particular string in MIX that has no 2-decomposition. The length of this string is 87, and the fact that it has no 2-decomposition was fi rst ver-i fi ed by a computer program accompanying this pa-per. We include here a rigorous, mathematical proof of this fact not relying on the computer veri fi cation. A head grammar is a quadruple G = ( N ,  X  , P , S ), where N is a fi nite set of nonterminals,  X  is a fi -nite set of terminal symbols (alphabet), S is a distin-guished element of N ,and P is a fi nite set of rules. Each nonterminal is interpreted as a binary predicate on strings in  X   X  . There are four types of rules: w , w binary rules and rules of the last type are terminat-ing rules .Thisde fi nition of a head grammar actu-ally corresponds to a normal form for head gram-mars that appears in section 3.3 of Vijay-Shanker and Weir X  X  (1994) paper. 6
The rules of head grammars are interpreted as im-plications from right to left, where variables can be instantiated to any terminal strings. Each binary rule involves an operation that combines two pairs of strings to form a new pair. The operation in-volved in the third rule is known as wrapping ;the operations involved in the fi rst two rules we call left concatenation and right concatenation , respectively. If G = ( N ,  X  , P , S ) is a head grammar, A  X  N ,and w , w be inferred using the rules in P . More formally, we holds:  X  A ( w  X  The language of G is Example 1. Let G = ( N ,  X  , P , S ), where N = {
S the following rules: versal of w . All binary rules of this grammar are wrapping rules.
 a fi nite binary tree whose nodes are labeled by facts  X  If A ( w A ( a , a ) E (  X  a ,  X  a )  X  If If w  X  L ( G ), a derivation tree for w is a derivation tree for some S ( w 1 , w 2 ) such that w 1 w 2 = w . Example 1 (continued) . Figure 1 shows a derivation tree for aa  X  a  X  aa  X  a #  X  aa  X  a  X  aaa .
The following lemma should be intuitively clear from the de fi nition of a derivation tree: Lemma 1. Let G = ( N ,  X  , P , S ) be a head grammar and A be a nonterminal in N. Suppose that w  X  appears as a label of a node. Then there are strings z , z (i) w = z 0 v 1 z 1 v 2 z 2 , and Proof. We can prove by straightforward induction on the height of derivation trees that whenever one of the following conditions: We omit the details.

We call a nonterminal A of a head grammar Guse-less if A does not appear in any derivation trees for strings in L ( G ). Clearly, useless nonterminals can be eliminated from any head grammar without a ff ecting the language of the grammar. Z  X  Z by (  X  1 ,  X  1), and  X  ( w 1 ) +  X  ( w 2 ). In other words,  X  is a homomorphism from the free monoid  X   X  to Z  X  Z with addition as the monoid operation and (0 , 0) as identity. Lemma 2. Suppose that G = ( N ,  X  , P , S ) is a head grammar without useless nonterminals such that L ( G )  X  MIX. There exists a function  X  G : N  X  Z  X  Z Proof. Since G has no useless nonterminals, for each nonterminal A of G , there is a derivation tree for some string in L ( G )inwhich A appears in a node hence
A decomposition of w  X   X   X  is a fi nite binary tree satisfying the following conditions:  X  the root is labeled by some ( w  X  each internal node whose left and right children  X  each leaf node is labeled by some ( s Thus, the label of an internal node in a decomposi-tion is obtained from the labels of its children by left concatenation, right concatenation, or wrapping. It is easy to see that if G is a head grammar over the al-phabet  X  , any derivation for w  X  L ( G ) induces a de-composition of w . (Just strip o ff nonterminals.) Note that unlike with derivation trees, we have placed no bound on the length of a string that may appear on a leaf node of a decomposition. This will be conve-nient in some of the proofs below.

When p and q are integers, we write [ p , q ]forthe set { r  X  Z | p  X  r  X  q } . We call a decomposition of w an n-decomposition if each of its nodes is labeled Lemma 3. If MIX = L ( G ) for some head grammar G w  X  MIX has an n-decomposition.
 Proof. We may suppose without loss of generality that G has no useless nonterminal. Since MIX = of Lemma 2. Since the set N of nonterminals of G [  X  n , n ]forall A  X  N . Then it is clear that a derivation tree for w  X  L ( G ) induces an n -decomposition of w .

If w = d 1 ... d m  X   X  m , then for 0  X  i  X  j  X  m , following is a key lemma in our proof: Lemma 4. If each w  X  MIX has an n-decomposition, then each w  X  MIX has a 2-decomposition.
 Proof. Assume that each w  X  MIX has an n -decomposition. De fi ne a homomorphism  X  n :  X   X   X   X   X  by n  X   X  ( v )forall v  X   X   X  .
 Let w  X  MIX with | w | = m .Then w =  X  n ( w )  X  MIX and | w | = mn . By assumption, w has an n -natural numbers to each node of D in such a way This is done recursively in an obvious way, start-4-tuples assigned to the children are determined ac-the parent node:
Now de fi ne a function f :[0 , mn ]  X  X  kn | 0  X  k  X  m } by f ( i ) = Clearly, f is weakly increasing in the sense that i  X  j the label of each node in D by signed to that node by the above procedure. It is easy to see that D is another decomposition of w .Note multiple of n ,wealwayshave for some substrings u , v of w . This implies that for h = 1 , 2, is an integral multiple of n .
 Claim. D is a 2 n -decomposition.
 We have to show that every node label ( v 1 , v 2 )in D 1 , 2, de fi ne  X  h :[0 , mn ]  X  [0 , mn ]  X  Z as follows: Inspecting the de fi nition of the function f , we can check that to a node in D . By assumption, we have  X  ( w [ i , j ] w [ k , l ])  X  [  X  n , n ], and  X  tegral multiple of n , it follows that  X  This establishes the claim.
We have shown that each node of D is labeled by  X  (  X  Now it is easy to see that inverting the homomor-phism  X  n at each node of D gives a 2-decomposition of w . By Lemmas 3 and 4, in order to prove that there is no head grammar for MIX, it su ffi ces to exhibit a string in MIX that has no 2-decomposition. The following is such a string: In this section, we prove that the string z has no 2-decomposition. 7
It helps to visualize strings in MIX as closed curves in a plane. If w is a string in MIX, by plotting represent w by a closed curve C together with a map given in Figure 2.
 [  X  then w is neither short nor long.) It is easy to see that a short string w always satis fi es The maximal length of a short string is 6. (For ex-if v 1 v 2 is long (or short, respectively).
According to the de fi nition of an n -decomposition, a leaf node in a 2-decomposition must be labeled by a short pair of strings. We call a 2-decomposition normal if the label of every internal node is long. Clearly, any 2-decomposition can be turned into a normal 2-decomposition by deleting all nodes that are descendants of nodes with short labels.

One important property of the string z is the fol-lowing: then either v or x 1 x 2 is short.
 Proof. This is easy to see from the graphical rep-resentation in Figure 2. If a substring v of z has  X  sponding to v must have initial and fi nal coordi-v contains all three letters, then it must contain as The only way to satisfy both these conditions is to have the subcurve corresponding to v start and end that the distance between the coordinate (5 , 0) corre-sponding to position 5 of z and the diagonal segment corresponding to the substring c 29 is large enough that it is impossible for v to start at position 5 and end in the middle of c 29 without violating the condi-tion  X  ( v )  X  [  X  2 , 2]  X  [  X  2 , 2].)
Lemma 5 leads to the following observation. Let us call a decomposition of a string concatenation-free if each of its non-leaf labels is the wrapping of the labels of the children. Lemma 6. If z has a 2-decomposition, then z has a normal, concatenation-free 2-decomposition. Proof. Let D be a 2-decomposition of z . Without loss of generality, we may assume that D is nor-mal. Suppose that D contains a node  X  whose la-bel is the left or right concatenation of the labels sider the case of left concatenation since the case of right concatenation is entirely analogous; so we is short, then the left child of  X  is a leaf because D is normal. We can replace its label by ( u (as well as left concatenation) of the two child la-can combine by wrapping a single node labeled by ( x of  X  , to obtain a new 2-decomposition of z .Inei-ther case, the result is a normal 2-decomposition of z with fewer instances of concatenation. Repeat-ing this procedure, we eventually obtain a normal, concatenation-free 2-decomposition of z .

Another useful property of the string z is the fol-lowing: Lemma 7. Suppose that the following conditions hold: (i) z = x 1 u 1 v 1 yv 2 u 2 x 2 , (ii) x 1 yx 2 is a short string, and Then either ( u 1 , u 2 ) or ( v 1 , v 2 ) is short. u 1 ends in c and v 1 starts in c ,orelse v 2 ends in c and u 2 starts in c .

Case 1. u 1 ends in c and v 1 starts in c .Since ( v the string v 1 yv 2 must contain cb 15 a as a substring. | v [  X  2 , 2]  X  [  X  2 , 2].

Case 2. v 2 ends in c and u 2 starts in c .Inthis | x | and hence | u 2 | b = 15. one occurrence of b , the string v 1 yv 2 must contain ba
We now assume that z has a normal, concatenation-free 2-decomposition D and de-rive a contradiction. We do this by following a certain path in D . Starting from the root, we descend in D , always choosing a non-leaf child, as long as there is one. We show that this path will never terminate.

The i -th node on the path will be denoted by  X  , counting the root as the 0-th node. The la-x  X  x ( u right children of  X  i , respectively. If the left child is not a leaf node, we let  X  i + 1 be the left child, x erwise,  X  i + 1 will be the right child of  X  i ,andwe x
The path  X  0 , X  1 , X  2 ,... is naturally divided into two parts. The initial part of the path consists of  X  must be long and  X  i has two children labeled ( u
We must eventually enter the second part of  X  m be the fi rst node belonging to this part of the  X  Lemma 8. If u and v are short strings and  X  ( uv )  X  [  X  Proof. Since u and v are short, we have | u | a  X  4 , | immediately follows that | uv | c  X  4. We distinguish two cases.
 we must have | uv | a  X  4and | uv | b  X  4.

Case 2. | uv | c  X  3. Since | u | c  X  2and | v | c  X  2, [  X  Since u and v are short, it follows that one of the following two conditions must hold: | u |
By Lemma 8, the number of occurrences of each the root of D somewhere in the vicinity of position 67 (see Figure 2).

It immediately follows that for all i  X  m , w i , 1 is b 14 a 5 . We show by induction that for all i  X  m ,the following condition holds: (  X  ) ba 19 c 17 is a substring of w The condition (  X  ) clearly holds for i = m .Nowas-We consider two cases.

Case 1. u i , 1 contains c .Then ba 19 c is a substring [  X  2 , 2], it follows that u i , 1 must contain at least 17 Therefore, the condition (  X  ) holds with i + 1inplace of i .
 a substring of b 14 a 5 and hence cannot contain more it follows that v i , 1 must contain at least one occur-rence of b . Therefore, ba 19 c 17 must be a substring in place of i .

We have proved that (  X  ) holds for all i  X  m .Itfol-is in fi nite, contradicting the assumption that D is a 2-decomposition of z .
 We have proved the following: Lemma 9. There is a string in MIX that has no 2-decomposition.
 Theorem 10. There is no head grammar G such that L ( G ) = MIX.
 Proof. Immediate from Lemmas 3, 4, and 9.

