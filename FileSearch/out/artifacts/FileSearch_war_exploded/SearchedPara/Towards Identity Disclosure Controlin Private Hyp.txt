 Identity Disclosure Control (IDC) is a critical problem in private data publishing, and has been widely studied in previous work ([10,9,5,2,11]). Most of these stud-ies focus on preventing entities from background knowledge attacks by modeling a social network as a graph [10,16]. However, the graph-based representation is neither sufficient nor realis tic in real-world scenarios.

On the one hand, those potential data buyers (e.g. advertising agencies or application developer) are more interest ed in attributes reflecting the spending habit of an entity rather than the number of his/her friends. For example, the major purpose for a sport retailer paying for the data from Facebook is to figure out the entities who are members of a spor t interest group. More important, such  X  X nterest group X  data is usually real for an entity. We fabricate Bob as a member of Facebook, and assume that he is very cons cious in protecting private informa-tion, such as the date of birth, the living place, the marriage status, and so on. Hence, it is almost unlikely to identify Bob, even the corresponding information is unique. However, as the inherent function and purpose of a social network, Bob will describe his real interests or jo in certain interest groups without any hesitation.

On the other hand, it is unrealistic to model background knowledge attacks on a social network with the graph-based representation in large-scale networks. For example, we take 1 , 000 students in Beijing Jiaotong University who have accounts in Renren.com, which is the most popular social network in China. With the graph-based representation, there are only 1 . 5% students who have unique degrees and 5 . 5% who have unique neighborhood substructures. However, by considering some properties of the interest groups, the unique rate can climb up to 33% .

In order to remedy the above issues, this paper proposes a hypergraph-based representation (seen in Figure 1) for a social network to depict a set of com-plex relational entities, such as grouping a population of entities with various attributes. A hypergraph-based representation is a mathematical construction that is quite useful to exploit relationships between different entities [17]. Gen-erally, vertices represent e ntities and each hyperedge represents a relationship among a set of vertices.

Due to its specific structure, a hypergr aph potentially faces more types of breaches with new background knowledge attacks. In our Facebook example, the members and their interest groups are natural to be modeled as a hypergraph and published to third parties without any privacy guarantee. Thus, an attack can be more valid (usually much easier) w ith the properties of such hypergraphs as background knowledge. For instance, Bob can be easily identified by others knowing his living habits. Notice that, the member-group relation can also be formed as a bipartite graph in our example, but a hypergraph is more general for our discussion, which is suitable for more complex relations such as tripartite graphs [6]. In this paper, we discuss the IDC problem in social networks with a hypergraph-based representation. 1.1 Our Contributions  X  discussing the IDC problem on hypergraphs by modeling rank-based attacks.  X  formalizing a general model for rank-based hypergraph anonymization ,and  X  proposing an efficient algorithm for rank anonymization, and exploring the  X  introducing the bias of communities as information loss incurred in hyper-The remainder of this paper is organized as follows. Section 2 presents a brief survey of IDC on graphs. In Section 3, we model rank attack and introduce efficient metrics for data utility. Section 4 focuses on methods against the pro-posed rank attack and approaches for hypergraph construction. We present the experimental results in Section 5 an d conclude this paper in Section 6. The IDC problem has been studied extensively on graphs. As pointed out in [2,9] simply removing the identifiers (or label) of the nodes does not always guarantee privacy. They study a spectrum of adversary external information and its power to re-identify individuals in a social network. The studies in [16,10] extend the above idea by modelling so called neighborhood attack and degree attack respectively. Specifically, the authors in [10] also proposed a two-step framework as property anonymization and graph construction, which is very useful to solve general anonymity problems on graphs.

Zheleva and Getoor [15] considered th e problem of protect ing sensitive re-lationships among the individuals in the anonymized social networks. This is closely related to the link-prediction problem that has been widely studied in the link mining community. The work in [14] studies how anonymization algo-rithms that are based on randomly adding and removing edges change certain graph properties.

Liu et al. [11] took weight into consideration for privacy preserving in social networks. They studied situations, such as in a business transaction network, in which weights are attached to netwo rk edges that are considered to be con-fidential. Then, they provide two perturbation strategies for this application. The research in [12] extend the above work by formulating an abstract model based on linear programming . However, the objective of their work still focuses on maintaining certain linear property of a social network by reassigning edge weights. 3.1 Rank Attack Let V denote a finite set of vertices, and let E be a family of subsets e of V such that  X  e  X  E = V .Thenwecall G ( V, E ) a hypergraph with the vertex set V and hyperedge set E .Ahyperedge e is said to be incident with a vertex v when v  X  e . For a hyperedge e  X  E ,weuse rank to denote the number of vertices in e , i.e., r ( e )= | e | .Foravertex v ,weuse rank sequence , denoted as R , to represent the set of ranks of its incident edges E ( v )= { e 1 ,e 2 ,...,e p } , the rank set of the hypergraph G , which is denoted by R G = { R 1 ,R 2 ,...,R n } , where n is the number of vertices in G .

Specially, for a hypergraph being regu lar, all sequences in the rank set have the same dimension. Without loss of generality, we assume the elements in a rank sequence are sorted as in descending order, r 1  X  r 2  X  ...  X  r p . Table 1b shows the rank set for the sample hypergraph. Now we model a potential attack on hypergraphs with the properties of edge rank as follows.
 Definition 1. ( rank attack ) Given a hypergraph G ( V, E ) , if the rank sequence R of a vertex v  X  V is unique in G , the vertex v can be identified from G by an adversary with the prior knowledge of R , even all vertices and hyperedges unlabelled.
 For example, in Figure 1, we have the corresponding adjacency matrix and the rank set in Table 1a and 1b for the sample. It shows that the vertices v 2 ,v 6 ,v 7 and v 8 have unique rank sequences, which have high disclosure risk with a rank attack. Let us take another real case as well: in our Facebook example, Bob is involved in three online interest groups, tennis, cooking and photography, the membersineachgroupare 1 , 000 , 100 and 10 . If the rank set R = [1000 , 100 , 10] is unique in the hypergraph containing Bob, it is very likely to identify Bob from the published hypergraph.
 3.2 Problem Definition It is clear that the rank set of a hypergraph has to be investigated and modified (if necessary) before published, in order to protect from the above rank attack. We call this problem as rank-based hypergraph anonymization (RHA) . The initial idea is to generalize the values of the so-called quasi-identifier in a dataset, which is a group of attributes that can be uniquely identify individuals. In this paper, we define rank-based anonymity with the assumption that all attributes in a rank sequence form the quasi-identifier. H owever, all of the algorithms proposed later are suitable for the general case as well with a slight modification. Now, we first introduce the term of rank anonymity for a hypergraph as follows. Definition 2. ( k -rank anonymity ) A hypergraph G ( V, E ) is k -rank anonymous if for every vertex v ,thereexistatleast k  X  1 other vertices in the hypergraph withthesameranksequenceas v .
 For example, from Table 1b, the vertices v 1 ,v 5 ,v 3 and v 4 are 2 -rank anonymous, while others are all 1 -rank anonymous. Therefore, the hypergraph shown in Fig-ure 1 is 1 -rank anonymous. By adding v 5 into the hyperedge e 1 , the hypergraph G is 2 -rank anonymous as shown in Table 1c.
 Then, we formally define the RHA problem as follows.
 Problem 1. ( rank-based hypergraph anonymization )Given R G , the rank set of a hypergraph G ( V, E ) , and an integer k ,constructa k -rank anonymous hypergraph G ( V, E ) , such that the information loss Z is minimized.
 In general, there exist two directions to solve the RHA problem: 1) changing the incident matrix of the hypergraph to adapt the requirement of the rank set, and 2) perturbing the rank set separately and then reconstructing a hypergraph with such modified rank set. The first method has the advantage of maintaining spec-ified data utility globally while ensuring the security. However, such a technique is very inefficient to implement especia lly for very large hypergraphs. Hence, this paper will follow the second way to pertu rb a hypergraph, which is described as rank anonymization (RA) and hypergraph construction (HC) respectively. 3.3 Measuring Quality of Hypergraph Anonymization Differentiating from some other problems, such as k -anonymity on transactional data, we use a conditional metric Z =( Z ; Z A ) to assess the quality of an ap-proach for RHA. The anonymizing cost Z A is usually related to the operations of anonymization, while Z represents one of the important hypergraph property that we suppose to preserve. Here, we can only guarantee a solution of Z to be optimal for RHA with the condition of certain Z A . It can be seen as a trade-off between utility and efficiency. In other words, an anonymizing algorithm be-comes too complex to implement with a real graph property as Z A , since it must construct the adjacen cy matrix to obtain the real property at each step of perturbation. Anonymizing Cost. As our basic operations for perturbing are to add, delete or reallocate vertices in hyperedges, t he method for rank anonymization is nat-urally required to minimize the chang es of hyperedges. Given a hyperedge e and the anonymized e correspondingly, we define the difference between their ranks as anonymizing cost for a hyperedge, i.e. | r e  X  r e | . Then, given a rank set R G of a hypergraph G ( V, E ) , we describe the tota l anonymizing cost as where m is the number of anonymized groups, g i and R  X  i  X  X  G represent the number of objects and the ano nymous object in each group.
 Information Loss on Community Detection. As a hypergraph is powerful in representing the multi-relationship among vertices, an important and natural requirement is to detect communities in re al-world applications [17,13]. There-fore, the methods for RHA also aim at minimizing the effect on community detection on hypergraphs published.

We use a popular metric, called modularity, which is known as a global quality function to identify communities. We revise the definition of modularity in [7] by using the terms of hypergraphs as the cumulative deviation from the random expectation.
 where c ij is the actual number of hyperedges in which i and j are together. Due to space limitations, the induction of Equation 2 is omitted here. Let M G and M G be the modularity derived from the modularity bias as information loss, In this section, we propose algorithms for the RHA problem. It first states the hardness of RHA with anonymizing cost as the objective function, and introduces an efficient heuristic method based on the information loss defined in Equation 1. Then, we discuss hyperg raph construction with a specified rank set, which is rarely mentioned in previous studies so far as we know. 4.1 Rank Anonymization From the definition of RHA, it is obvious that rank anonymization, as the first step, is an optimization problem. The following theorem shows that such an optimization problem is NP-hard, even for the simplest case that all rank sets are with size 2 .
 Algorithm 1. The Rank Anonymization Algorithm Theorem 1. The optimal rank anonymization problem is NP-hard.
 Limited by space, we omit the formal proof (seen in the extended version of this paper). To guarantee the complexity in polynomial time, we introduce an efficient heuristic algorithm as a solution in Algorithm 1. This algorithm is similar with a family of data-oriented heuristics for microaggregation proposed in [3], while the major difference is the objective function due to anonymity.

The computational complexity of Algorithm 1 is O ( n 2 log n k ) . Here, we form a symmetric n  X  n distance matrix that each entry r epresents the Euclidean dis-tance between two rank sets in R . It reduces the complexity of the initialization step to linear. In each step of recu rsion, the algorithm introduce O ( n 2 ) operations to calculate all new distances among groups. Finally, there are log n k recursions due to the group merging. Therefore, the total complexity is O ( n 2 log n k ) . 4.2 Hypergraph Construction Our next task for RHA is to reconstruc t a hypergraph with a perturbed rank set R . Some existing work [8,10] has studied popular construction techniques according to various properties of a graph, such as degree and spectrum. Unfor-tunately, most of these studies only consider graphs, and it has more concerns to apply the proposed methods on hypergraphs due to the computational complex-ity. The major reason is that one modification on an edge will affect a group of vertices rather than only two vertices in gr aphs. Specifically, there are two major challenges for the RHA problem: 1) the anonymized rank set has high possibility that is not realizable; and 2)the constructed hypergraph need to maintain the original community.
To explain the first challenge, we define the realizability of a rank set as follows.
 Definition 3. ( Realizability )Arankset R is called realizable if and only if there exists at least one hypergraph G ( V, E ) that has the exact same rank set with R .
 This definition is extended from the realizability of degree on graph construction [4]. We state the following necessary and sufficient condition for a rank set to be realizable.
 Lemma 1. Arankset R is realizable if and only if, for any entry r ik it holds  X r Proof. The sufficiency is obvious. As a hyperedge with rank r contains r vertices, there at least exists  X  =1 . For the necessity, assuming a rank set has  X r different vertices having an element with value r , it is easy to form  X  hyperedges with rank as r .
 For example, in Table 1c, for r =2 , 4 , 3 ,itholds  X  =1 , 1 , 2 respectively, and the 2 -anonymized rank set is realiz able. However, if we modify R 1 and R 8 to [3 , 2] and [4] , the rank set is still 2 -anonymized but unrealizable with  X  = 3 2 , 5 4 , 5 3 .
Apparently, an anonymized rank set R has very high probability that it is not realizable. Thus, Lemma 1 introduces a principle in how to develop a construction method for RHA to ensure the success of c onstruction. The basic idea behind is to generate a realizable rank set from R based on Lemma 1 with minimal modification. Algorithm 2 takes a specified rank set R as inputs and returns a successfully constructed graph and an approximate error  X  , which denotes the modification bias of the rank set. Steps from 3 to 9 describe a procedure to remove edges by matching each element in its rank set. Step 5 is a basic search to find all vertices containing the same rank with r ri . Step 6 is crucial to modify a rank set to be realizable based on Lemma 1. Step 11 is to ensure the connectivity of the output hypergraph. If the algorithm terminates and outputs a hypergraph, then this hypergraph has the approximate specified rank set R .
The computational complexity of Algorithm 2 is O ( n 2 m 2 ) ,where n is the number of vertices and m is the maximal degree for all vertices. For each vertex v , there are maximal m hyperedges connecting v i with other nodes. And for each hyperedge, the worst case is trav ersing all remaining vertices to find S ( v r ) , which is n  X  m times. As there are n vertices, the total complexity is O ( n 2 m 2 ) .
In Algorithm 2, the basic operations are adding/deleting vertices in each hy-peredge of the original graph to satisfy the privacy requirement. However, such an operation may affect the progress of finding communities. Thus, we provide a community preserving procedure aiming at minimizing the change of the com-munity set C G . Our main idea is to first assign a two-way label for each vertex v  X  V in G ( V, E ) according to the community and the min-cut that contain it. Then, we perform vertex addition or deletion only in its incident domain(s). For example, assuming that a hypergraph G has two non-overlapping communities C 1 and Algorithm 2. The Hypergraph Construction Algorithm and v  X  S v .Wealsouse S 0 as a virtual set to denote a vertex does not appear in any min-cuts. Therefore, in Algorit hm 2, we can perform the selection of v s within the domain where the elements have the same label. Apparently, this procedure is application-oriented since there exist a number of algorithms for community detection. However, this limitation can be released in the real-world applications, which the data publisher can make consistent standards on the methods of community detection with data users. The experiments are conducted on a 2.16 GHz Intel Core 2 Duo Mac with 4GB of 667MHz DDR2 SDRAM running the Macintosh OS X 10.5.8 operating system. All algorithms are implemented using Matlab 7.0.

We use three real-world datasets, named Mushroom, Nursery and Msweb, which contains 8 , 124 , 12 , 960 and 32 , 711 vertices respectively, and 22 , 8 and 294 attributes respectively. Specifically , each attribute takes only a small num-ber of values, each corresponding to a s pecific category. In our experiments, we constructed a hypergraph for each dataset, where attribute values were re-garded as hyperedges. Therefore, the Mushroom data includes 122 hyperedges, while Nursery and Msweb have 27 and 294 hyperedges respectively. All three datasets are from the UCI Machine Learning Repository [1]. 5.1 Rank Attack on Real-World Data Our first experiment is to show whether rank attack may happen on real-world datasets. We detect the possibility of rank attack on the test data with varying a specified parameter  X  , which is a threshold to assess a breach. That is, while the number of vertices sharing the sa me rank sequence is no larger than  X  ,these vertices are recognized to be disclosed.
Table 2 reports the percentage of verti ces which can be successfully identified by rank attack. It clearly shows that the rank attack indeed be a real issue for hypergraph publishing. All testing datasets have relatively high risk of entity disclosure. For Mushroom data, the disclosure rate of rank attack with  X  =10 is even high as 55 . 14% , which implies over half of its vertices can be uniquely identified. The rate is 4 . 55% with  X  =1 for The Msweb contains around 600 in-dividuals have high disclosure risk in the data with the rate 4 . 55% corresponding to  X  =1 . Also, the disclosure rate grows very quick as  X  increases. For example, the rate on the Nursery dat aset increases nearly 10% with  X  =10 than that with  X  =1 . 5.2 Impact on Anonymizing Cost Z A In this section, we assess the cost incurred in applying various strategies for rank anonymization. As a comparison, we also implement a greedy anonymizing algorithm for rank attack, called GreedyRA.

The graphs in Figure 2 describe the relations between anonymizing cost Z A and various k for the Mushroom, Nursery and Msweb datasets respectively. The results show that Z A increases slowly while k is not large (e.g. k&lt; 20 )forboth anonymizing algorithms. Furthermore, the GreedyRA arises much higher cost than the RA algorithm does in all cases as expectation. The biggest difference occurs in Msweb, which is over two times for every plot. In addition, the outcomes reveal the efficiency of GreedyRA with small values of k . For example, the costs by the two methods are very close to each other when k&lt; 50 in the Nursery data. Usually, the indistinguish level is not required to be very high in the real-world applications. Thus, both anonymizing algorithms work efficiently in such cases. 5.3 Impact on Information Loss The final experiment is to explore the r elation between the modularity bias defined in Equation 2 and k . Figure 3 shows the relative changes of Z M with HCCP-RA, HC-RA and HC-RAG approaches by varying k . The modularity bias rises up as k increases that follows the similar trend of Z H . However, the gradients are not steep as that of Z H especially when k is not large. This implies that the impact of perturbation on modularity is not significant as the intra-group error, as Z M is a global measurement. Also, HCCP-RA shows much better performance than the others in all cases as expected. Moreover, the Mushroom data has an interesting result that HC-RA and HC-RAG produce very close plots with each other compared to the result of Z H . The reason is still not clear and we suppose it is related to certa in structure properties of the dataset itself. In this paper, we explored identity disclosure control in private hypergraph pub-lishing. We addressed the problem of rank-based hypergraph anonymization by modeling a novel background knowledge attack with rank. We proposed an effi-cient heuristic algorithm for rank anonymization, which is shown NP-hard. We also studied the problem of constructin g a hypergraph with a specified rank set, and provided methods maintaining the utility of community detection from the original hypergraph.

There are many issues of this work th at need to be addressed in further research. As an NP-hard problem, it is worth to develop approximation algo-rithms for RHA. Also, it is worth to investigate how the proposed approaches affect other real hypergraph properties, such as diameter.
