
The problem of analyzing microarray data became one of important topics in bioinformatics over the past several years, and different data mining techniques have been proposed for the analysis of such data. In this paper, we propose to use association rule discovery methods for determining associations among expression levels of different genes. One of the main problems related to the discovery of these associations is the scalability issue. Microarrays usually contain very large numbers of genes that are sometimes measured in 10,000s. Therefore, analysis of such data can generate a very large number of associations that can often be measured in millions. The paper addresses this problem by presenting a method that enables biologists to evaluate these very large numbers of discovered association rules during the post-analysis stage of the data mining process. This is achieved by providing several rule evaluation operators, including rule grouping, filtering, browsing, and data inspection operators, that allow biologists to validate multiple individual gane regulation patterns at a time. By iteratively applying these operators, biologists can explore a significant part of all the initially generated rules in an acceptable period of time and thus answer biological questions that are of a particular interest to him or her. To validate our method, we tested our system on the microarray data pertaining to the studies of environmental hazards and their influence of gane expression processes. As a result, we managed to answer several questions that were of interest to the biologists that had collected this data. 
Bioinformatics, analysis of microarray data, association rules, post-processing of discovered rules, expert-drivan rule validation, rule filtering, rule grouping. 
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. SIGKDD "02, July 23-26, 2002, Edmonton, Alberta., Canada. 
Copyright 2002 ACM 1-58113-567-X/02/0007...$5.00. factors and fimctional classes of genes: Moreover, Bicciato et al [7] presented a neural network-based method to find relationships among different genes involved in major metabolic pathways and to relate specific genes to different classes of leukemia. 
Since gene expression data is often represented in the binary or ternary form (i.e., gene expressions are up-or down-regulated [19], or unchanged, as will be discussed in the next section) and since biologists often look for interactions among various genes, it is natural to use association rules [2] to represent interactions among multiple genes. Besides providing the relationship between gene expression profiles, association rules also provide the direction of the relationship unlike other techniques, such as clustering and classification. Some initial work on using association rules to capture these interactions has been reported in [6] and [16]. While Berrar et al [6] used the standard association rule discovery algorithm (Apriori [3]), Kotala et al [16] introduced a new method for discovering associations in the microarray data that is based on Peano count trees (P-Trees). 
However, association rule methods face certain challenges when applied to microarray data that have not been addressed in-[6] and [16]. Since microarray data has a very large number of variables (i.e., genes are often measured in thousands), association rule discovery methods tend to generate very large numbers of rules (often measured in hundreds of millions or even billions). 
Although some of these rules contain very important biological relationships among different genes, other rules often represent spurious, irrelevant and already known relationships. Therefore, the challenge is to be able to explore and analyze very large numbers of biological relationships (rules) in an effective manner and to separate "good" relationships from the "bad." One way to deal with the combinatorial explosion problem is to specify tight constraints on the types of association rules that are of interest to the biologists using constraint-based mining methods such as the ones proposed in [5, 25, 28], including the selection of only particular gene types to be used as inputs for the association rule generation algorithms. For example, Berrar et al [6] followed this strategy and restricted the set of genes used for the generation of association rules from 1500 to only 20 and the number of drugs from 1500 to only 20. However, restricting the problem to only 20 genes and 20 drugs created a potentially very limiting situation of leaving out important variables and, therefore, missing important relationships among the genes because some of the genes involved in these relationships might be omitted. 
This paper addresses the challenge of analyzing very large numbers of discovered rules in the post-processing stage of the data mining process by providing the biologist with a set of tools necessary for the analysis of very large numbers of association rules generated by standard association rule generation algorithms (such as Apriori [3]) on the microarray data. These tools leverage the knowledge about genomics that biologists have and let biologists play a central role in the discovery process through close interactions between the tools and the biologist. By utilizing these tools in an interactive and exploratory manner, the biologist can identify and focus on really important rules and separate them from the irrelevant, trivial or already known relationships among the genes. 
The rest of the paper is organized as follows. In Section 2 we formulate the gene regulation pattern discovery and post-analysis problem. In Section 3 we present rule exploration methods to address this problem. In Section 4 we present a case study that tested our methods on some mieroarray data. One way to understand how different genes regulate each other is to measure gene expression levels [19] produced by a cell using microarray technologies [26]. Typically, biologists conduct a number of experiments measuring gene expression levels of a cell or a group of cells under various conditions affecting these expression levels. Biologists are interested in how different gene expressions change depending on the type of a tissue, age of the organism, therapeutic agents, and environmental conditions. From the computational point of view, the expression level is represented as a real number. Therefore, the result of a single experiment is an array of N real numbers. Moreover, the set of genes used in microarrays is determined by a biologist and remains the same for all the experiments. Therefore Mmieroarray experiments result in an M X N matrix {x~}i~l,M, j=,~, where x 0-represents the expression level of gene j in experiment i. Depending on a particular biological application, the number of experiments Mcan vary from a few dozens to several hundreds or even thousands, and the number of genes N can vary from several hundred to tens of thousands (e.g., [8] reports putting 40,000 genes on a single microarray chip). Moreover, the biologists are more interested in how gene expressions vary in these experiments relative to normal expression levels in an organism, rather than in their absolute values. Therefore, biologists typically normalize expression levels x v according to certain normalization criteria and the results are discretized according to whether they exceed certain predetermined thresholds or not. This process results in a discretized MxN matrix {r~}i=l,M.j~l,N where the values rij are of three different levels: unchanged (denoted as #), upregulated [ 19] (denoted as ~'), and downregulated [ 19] (denoted as $). Certainly, one may choose more than 3 levels of gene expression level discretization. However, in many applications biologists assume these three levels of discretization, and we will follow this assumption in the paper. Given normalized and diseretized gene expressions (rij}i=l,M,j~t.s, we can discover gene regulation relationships in the form of association rules. In particular, an experiment i can be represented as a transaction [2] consisting of N items (genes) {riy}j=,~, each item rq taking one of the three values (#,t,$). Given this data, we want to find all the association rules with specified levels of confidence and support and let the biologists select only these rules that are interesting to them from a biological point of view. As mentioned earlier, one of the problems with this approach lies in large numbers of associations generated by rule discovery methods. Depending on the number of genes N in the gene expression matrix M X N and on the particular values of confidence and support, the number of discovered association rules can be measured in billions. As mentioned in Section 1, one can impose constraints on the types of generated association rules, as was done in [5, 25, 28]. However, as was also explained in Section 1, we either (1) still may end up with a very large number of discovered association rules, or (2) impose overly restrictive constraints on the data and many potent!ally important biological relationships may be missed. In Section 3 we present an approach that addresses this problem by providing a biologist with a set of tools for exploring very large numbers of discovered association rules in an iterative and systematic manner. 
In this section we present rule post-processing methods allowing biologists to analyze very large numbers of regulation relationships among genes and select those that are of interest to them. The problem of post-analysis of large numbers of discovered rules using filtering methods has been studied before some of this work in our approach. In particular, Klemettinen et al [15] and Imielinski et al [13] present the methods for the users to specify classes of patterns in which they are interested by providing pattern templates expressed in a certain specification language. The work of Tuzhilin and Liu [32] extends the work of [13, 15] by presenting a template language that is based on a full set of first-order logic expressions defined on multiple rulebases. 
Although the specification languages presented in [13], [15], and [32] differ from each other, they have one common theme: all of them are based on logical constraints that filter only the rules of interest to the user. We took the templates from [13, 15] as a foundation and extended them to the biological domain, as described in Section 3.2, by adding the constructs pertaining to genes and their families. 
Another type of filtering operator deals with the discovery of unexpected rules and various types of this operator are presented in [20, 23, 29]. In its most general form, this filtering operator takes a set of beliefs (or previously discovered rules) and returns all newly discovered rules that are unexpected with respect to the set of beliefs, where unexpectedness is defined differently in all the three references. We adapted the concept of unexpectedness, as introduced in [20, 23, 29], to the genomics domain and introduced the CONTRADICT operator that identifies all the rules from the rule base that "contradict" a user-specified template. We present this operator in Section 3.2. rules in personalization applications. In this paper, we adapt some of the filtering methods from [1] to the genomics domain and to the analysis of microarray data. 
Post-processing of discovered gene regulation relationships is an iterative and interactive process in which the biologist selects specific rule exploration operators, such as rule filtering, rule grouping and other rule analysis operators and applies them to the set of discovered gene regulation relationships. As a result, the biologist can examine groups of relationships at a time, decide which groups are interesting and worth further exploration, which groups of rules are irrelevant, trivial, or already known, and discard these relationships from further consideration. By selecting these rule exploration operators in an interactive manner, the biologist can quickly focus on the rules that are of interest to him or her. We will further elaborate on this in Section 4, when we present the case study. In the rest of this section, we will describe particular rule exploration operators, such as filtering, grouping and others. 
This operator allows the biologist to impose various constraints on the syntactic structure of the discovered biological rules using  X  A gene, e.g., G17;  X  A gene with a particular expression level, e.g., GI7~';  X  A gene with a list of allowable or unallowable  X  A group (or category) of genes I, represented by the  X  A group of genes with an expression level, e.g.,  X  A group of genes with a list of allowable or unallowable  X  Either (ALL), (ANY), or (NONE), specifying the  X  A numeric value; e.g., (2), which specifies that a rule  X  A range of numeric values; e.g., (1-3), which specifies  X  A list of numeric values and/or ranges; e.g., (1, 3, 5-7), 
Genes can often be categorized or grouped according to various (standardized) gene categories, e.g., by their function. G5, and G7: RULE HAS (ANY) OF G1, G5, G7 
For example, rule Gll" ~ G3# matches this template, and rule G2~ m G3~ does not. other genes: RULE HAS (ANY) OF GI, G5, G7 ONLY 
For example, rule GI~ ~ G5~ matches this template, and rule Glf m G3# does not. 
G5, G7. Moreover, only rules with upregulated G1, downregulated G5, and upregulated or downregulated (but not unchanged) G7 are acceptable: RULE HAS (1) OF GI?, G5~, G7={?,,I, } 
For example, rule GII" ~ G3# matches this template, and rule Glq" ~ G7~ does not. (antecedent) or none of them: BODY HAS (NONE, ALL) OF GI, G2 
For example, rule G5q" ~ G3# matches this template, and rule GI~ ~ G7~ does not. belongs to the DNA repair group of genes) in the head (consequent): 
HEAD HAS (ANY) OF [DNA_Repairi addition, all of them must be upregulated: BODY HAS (3) OF [ALL_GENES]t genes in the body, as well as gene G7 in the head of the rule: BODY HAS (1-3) OF IDNA Repair] ONLY AND 
HEAD HAS (ANY) OF G7 one of them belongs either to DNA repair or to Transcription category: BODY HAS (2) OF [ALL_GENES1 AND 
BODY HAS (ANY) OF [DNA_Repair], [Transcription] RULE HAS (2-ALL) OF [Transcription]l' 
POSSIBLE_INFLUENCE(GeneSet 1, GeneSet2) BODY HAS (ANY) OF GeneSetl AND HEAD HAS (ANY) OF GeneSet2 OR BODY HAS (ANY) OF GeneSet2 AND HEAD HAS (ANY) OF GeneSetl POSSIBLE INFLUENCE( {G1, G2}, {G3, G4} ) BODY HAS (ALL) OF GeneExprSet AND HEAD HAS (ALL) OF G  X : { ExpLevel } CONTRADICT( {GI~, O2~}, G4, ~ ) biologically-relevant constructs arising from idiosyncrasies of the genomics domain, such as gene hierarchies, specific values of gene expression levels in filters, and the genomics-specific macros, including the CONTRADICT macro template. 
There can be many "similar" rules among the discovered rules, and it would be useful for biologists to be able to explore and analyze all these similar rules together rather than individually for several reasons. First, instead of potentially dealing with millions of rules, a biologist can be provided with a much smaller number of rule classes (groups), which is easier to handle from the scalability point of view. Second, the ability to group the discovered rules provides a biologist with a high-level overview of the rules and with the capability of the exploratory top-down rule analysis of the rules. Therefore, it is important to provide methods that could group discovered rules into classes, according to some similarity criteria, that biologists could subsequently explore and analyze. In this section, we present a similarity-based rule grouping method for this purpose. The problem of clustering similar rules was first studied in the 
KDD community in [18]. In particular, Lent et al [18] clusters discovered association rules in the two-dimensional space using heuristic methods based on geometric properties of two-dimensional grids. This approach is restricted only to the rules that have two fixed attributes (both of them discrete and ordered) in their antecedents, although some possibilities for handling higher-dimensional data are also outlined in [18]. A different approach to grouping association rules that lifts the two-dimensional restriction is presented in [33], where arbitrary association rules are considered that have any number of numeric and categorical attributes in their bodies. The rules with similar structures can be grouped by merging adjacent intervals of numeric values in a bottom-up manner by maximizing the interestingness of the resulting groups of rules. The two approaches [18] and [33] would work well for medium-sized exploration problems having moderately large numbers of rules (e.g., tens of thousands). However, in large-scale applications, such as microarray data analysis where millions of rules can be generated, the two approaches would still produce too many clusters to be of practical use. 
Another approach that is related to association rule grouping is presented in [31], where the distance between two association rules is defined as the number of transactions on which the two rules differ. Using this distance measure, Toivonen et al [31] group all the rules into appropriate clusters. One of the limitations of this approach lies in that the distance measures selected for rule clustering are somewhat arbitrary. Moreover, it is not clear how to describe concisely the rule cluster to the end-user since rules belonging to the same cluster may have substantially different structure. Still another approach related to rule grouping is presented in [21], where a method for extracting the most important and representative rules (the paper refers to them as "direction-setting rules") from the large number of discovered rules. 
In our previous research [1], we described a similarity measure for grouping customer profile rules in personalization applications. This measure is based on the concept of attribute hierarchies and allows to group profiling rules of different customers based on how similar characteristics of these customers are. In this paper, we propose to use a variant of this rule-grouping method to explore and analyze the association rules discovered in the microarray data. 
In particular, we introduce a gene hierarchy that is specified by the domain expert in a form of a tree (some of these hierarchies are standardized already by biologists and he/she only needs to select the right one). Moreover, genes can be grouped in several different ways, and the biologist needs to select the most appropriate grouping of genes for the problem at hand. For example, one cart organize genes based on their functions, e.g., several genes of the yeast (S.cerevisiae) are categorized by the biologists as having the DNA repair function. Therefore, the leaves of the attribute hierarchy represent all the genes from the microarray dataset to which rule discovery methods were applied, i.e., all genes that can potentially be present in the discovered rules. The non-leaf nodes in the tree are obtained by combining several lower-lewfl nodes (genes) into one parent node (functional category of the genes). For instance, Figure 1 presents an example of such a hierarchy, where genes G1, G2, and G3 are combined into functional category F1 and genes G4 and G5 are combined into functional category F2. Then, functional categories F 1 and F2 are further combined into a category ALL that represents all genes and corresponds to the root node of the tree. 
Given a gene hierarchy, the discovered rules are grouped by specifying the gene aggregation level in this hierarchy. A gene aggregation level is defined by the subset of all the nodes (leaf and non-leaf) of the gene hierarchy, such that for every path fi'om a leaf node to the root, exactly one node on such path belongs to this subset. Figure 2 presents several examples of gene aggregation levels. As mentioned earlier, the gene aggregation level is usually provided by a biologist. GI G2 G3 G4 G5 G1 G2 G3 "-.i,,.G4 ~L Figure 2. Examples of different gene aggregation levels. 
After the rule aggregation level is specified, the discovered rules are aggregated by performing the following syntactic transformation: individual genes and their values (expression levels) in the rules are replaced with the corresponding node in the specified aggregation level. Consider, for example, the rule 
GI? &amp; G25 ~ G55 that indicates that whenever gene 1 is upregulated and gene 2 is downregulated, gene 5 is usually downregulated. By applying the aggregation level from Figure 
When a set of rules is aggregated, different rules could be mapped 
The proposed role grouping method has the following what other gene categories are also up-or downregulated? of genes induced after 30 minutes? 
HEAD HAS (ANY) OF [ALL_GENES]={~,~,}  X  How genes in GrpA affect genes in GrpB;  X  How genes in GrpA affect genes in GrpC;  X  How genes in GrpB affect genes in GrpC. of genes affect each other, we limited our considerations and it produced 1,654 rules. Finally, we decided to apply the grouping operator that grouped these 1,654 rules into 140 groups, based on the functional categories of genes. These groups were examined by biologists, and some interesting groups were identified. Sample groups that were discovered (among the above-mentioned 140 groups): 
As a result of doing this type of analysis using our system, we managed to provide answers to the questions about gene regulation relationships that were of interest to the biologists. 
Group rules based on their 
Figure 3. A sample exploratory analysis of biological rules. 
One of the main challenges related to applying association rule discovery methods to microarray data is the scalability issue. 
Since the number of genes placed on microarray chips is often measured in thousands, association rule discovery methods tend to generate very large numbers of association rules describing how different genes regulate each other. 
We addressed this problem by presenting several rule post-processing operators, such as rule filtering, grouping, browsing and data inspection operators that help the biologists explore and analyze very large numbers of discovered rules in an interactive and systematic manner. We tested our methods on some microarray data together with the biologists that produced the data. As a result, we managed to answer the questions about gene regulation relationships that were of interest to them using our methods. 
Our approach empowers biologists by providing them with a set of tools that allow them to systematically analyze biological data on their own without any explicit help from the data miners. We believe that the development of such end-user tools is one of the major trends in data mining and believe that our work contributes in a significant way to this effort. 
Although we applied our system to the analysis of microarray data, our methods are more general and are also applicable to the analysis of other types of biological data, including proteomic and pharmacogenomic data. 
The authors would like to thank Leona Samson and her team for providing us with the microarray data and for participating in the exploratory analysis of this data using our system. [1] Adomavicius, G. and Tuzhilin, A. Expert-Driven Validation Data Mining and Knowledge Discovery, vol. 5, nos. I/2, [2] Agrawal, R., Imielinski, T., and Swami, A. Mining [3] Agrawal, R., Mannila, H., Srikant, R., Toivonen, H. and 
Data Mining. AAAI Press. 1996. [4] Barash, Y. and Friedman, N. Context-Specific Bayesian Fifth Annual International Conference on Computational 
Molecular Biology (RECOMB-2001), 2001. [5] Bayardo, R.J., Agrawal, R., and Gunopulos, D. Constraint-[6] Berrar, D., Dubitzky, W., Granzow, M., and Eils, R. [7] Bicciato, S., Paladin, M., Didone, G., Di Bello, C. Analysis 
BIOKDD'O1, 2001. [8] Bowtell, D.D. Options available---from start to finish--for [9] Brown, M.P, Grundy, W.N., Lin, D., Cfistiani, N., Sugnet, based analysis of microarray gene expression data by using of Sciences, vol. 97, no 1., Jan. 2000. [10]Duda, R.O., Hart, P.E., and Stork, D.G. Pattern [ll]Eisen, M.B., Spellman, P.T., Brown, P.O., Botstein, D. patterns. Proceedings of National Academy of Sciences, [12]Friedman, N., Linial, M., Nachman, I., and Pe'er, D. Using [13] Imidinski, T. and Virrnani A., MSQL: A query language for [14]Jelinsky, S., Estep, P., Church, G, Samson, L. Regulatory [15] Klemettinen M., Mannila H., Ronkainen P., Toivonen H., [ 16] Kotala, P., Perera A., Kai Zhou, J., Mudivarthy, S., Perrizo, [17]Kurra, G. Niu, W., Bhatnagar, R. Mining Microarray [18]Lent, B, Swami, A.N. and Widom, J. Clustering association [19]Lewin, Benjamin. Genes VL Oxford; New York: Oxford [20] Liu, B. and Hsu, W., 1996. Post-Analysis of Learned Rules. [21]Liu, B., Hsu, W. and Ma, Y. Pruning and summarizing the [22] Meo, R., Psaila, G., and Ceil, S. An extension to SQL for [23] Padmanabhan, B. and Tuzhilin, A. A Belief-Driven Method [24]Pavlidis, P., C. Tang, W. Noble, Classification of genes [25]Pei, J. and Han J. Can We Push More Constraints into [26]Pevsner P.A., Lysov Y., Khrapko K.R., Belyavsky A., [27]Shen, W.M., Ong, K.L., Mitbander, B., and Zaniolo, C. [28] Srikant, R., Vu, Q., and Agrawal, R. Mining Association [29]Suzuki, E., 1997. Autonomous Discovery of Reliable [30] Tamayo, P, Slonim, D., Mesirov, J., Zhu, Q, Kitareewan, S., [31] Toivonen, H., Klemettinen M., Ronkainen P., Hatonen, K. [32]Tuzhilin, A and Liu, B. Querying Multiple Sets of [33]Wang, K, Tay, S.H.W. and Liu, B. Interestingness-based 
