 separating out distinct authorial components of a document. with a multi-author document and wishes to deli-neate the contributions of each author. Perhaps the most salient example is that of documents of his-torical significance that appear to be composites o f multiple earlier texts. The challenge for literary scholars is to tease apart the document X  X  various components. More contemporary examples include analysis of collaborative online works in which one might wish to identify the contribution of a particular author for commercial or forensic pur-poses. first, easier, version, the document to be decom-posed is given to us segmented into units, each of which is the work of a single author. The challenge is only to cluster the units according to author. I n the second version, we are given an unsegmented document and the challenge includes segmenting the document as well as clustering the resulting units. authors of the document is available and that in particular we are not supplied with any identified samples of any author X  X  writing. Thus, our me-thods must be entirely unsupervised. problem, despite its importance. Some work in this direction has been done on intrinsic plagiarism de-tection (e.g., Meyer zu Eisen 2006) and document outlier detection (e.g., Guthrie et al. 2008), but this work makes the simplifying assumption that there is a single dominant author, so that outlier units can be identified as those that deviate from the document as a whole. We don X  X  make this simpli-fying assumption. Some work on a problem that is more similar to ours was done by Graham et al. (2005). However, they assume that examples of pairs of paragraphs labeled as same-author/different-author are available for use as th e basis of supervised learning. We make no such assumption. sion of the problem would be to segment the text (if necessary), represent each of the resulting uni ts of text as a bag-of-words, and then use clustering algorithms to find natural clusters. We will see, however, that this na X ve method is quite inade-quate. Instead, we exploit a method favored by the literary scholar, namely, the use of synonym choice. Synonym choice proves to be far more use-ful for authorial decomposition than ordinary lexi-cal features. However, synonyms are relatively sparse and hence, though reliable, they are not comprehensive; that is, they are useful for separat -ing out some units but not all. Thus, we use a two-stage process: first find a reliable partial cluste ring based on synonym usage and then use these as the basis for supervised learning using a different fea -ture set, such as bag-of-words. this for two reasons. First, this testbed is well m o-tivated, since scholars have been doing authorial analysis of biblical literature for centuries. Seco nd, precisely because it is of great interest, the Bibl e has been manually tagged in a variety of ways that are extremely useful for our method. constructed by randomly  X  X unging X  together ac-tual biblical books, we are able to separate out au -thorial components with extremely high accuracy, even when the components are thematically simi-lar. Moreover, our automated methods recapitulate many of the results of extensive manual research in authorial analysis of biblical literature. next section, we briefly review essential informa-tion regarding our biblical testbed. In Section 3, we introduce a na X ve method for separating compo-nents and demonstrate its inadequacy. In Section 4, we introduce the synonym method, in Section 5 we extend it to the two-stage method, and in Section 6 , we offer systematic empirical results to validate the method. In Section 7, we extend our method to handle documents that have not been pre-segmented and present more empirical results. In Section 8, we suggest conclusions, including some implications for Bible scholarship. and denominations, the common denominator con-sists of twenty-odd books and several shorter works, ranging in length from tens to thousands of verses. These works vary significantly in genre, and include historical narrative, law, prophecy, an d wisdom literature. Some of these books are re-garded by scholars as largely the product of a sin-gle author X  X  work, while others are thought to be composites in which multiple authors are well-represented  X  authors who in some cases lived in widely disparate periods. In this paper, we will focus exclusively on the Hebrew books of the Bi-ble, and we will work with the original untran-slated texts. known as the Pentateuch, are the subject of much controversy. According to the predominant Jewish and Christian traditions, the five books were writ-ten by a single author  X  Moses. Nevertheless, scho-lars have found in the Pentateuch what they believe are distinct narrative and stylistic threads corres -ponding to multiple authors. texts has been done in mostly impressionistic fa-shion, whereby each scholar attempts to detect the telltale signs of multiple authorship and compila-tion. Some work on biblical authorship problems within a computational framework has been at-tempted, but does not handle our problem. Much earlier work (for example, Radday 1970; Bee 1971; Holmes 1994) uses multivariate analysis to test whether the clusters in a given clustering of some biblical text are sufficiently distinct to be regarded as probably a composite text. By contrast, our aim is to find the optimal clustering of a docu -ment, given that it is composite. Crucially, unlike that earlier work, we empirically prove the efficac y of our methods by testing it against known ground truth. Other computational work on biblical au-thorship problems (Mealand 1995; Berryman et al. 2003) involves supervised learning problems where some disputed text is to be attributed to one of a set of known authors. The supervised author-ship attribution problem has been well-researched (for surveys, see Juola (2008), Koppel et al. (2009 ) and Stamatatos (2009)), but it is quite distinct fr om the unsupervised problem we consider here. exclusively using heuristic methods, the subjective nature of such research has left much room for de-bate. We propose to set this work on a firm algo-rithmic basis by identifying an optimal stylistic subdivision of the text. We do not concern our-selves with how or why such distinct threads exist. Those for whom it is a matter of faith that the Pen -tateuch is not a composition of multiple writers ca n view the distinction investigated here as that of multiple styles. cal example to motivate and illustrate each of a sequence of increasingly sophisticated algorithms for solving the decomposition problem. Jeremiah and Ezekiel are two roughly contemporaneous books belonging to the same biblical sub-genre (prophetic works), and each is widely thought to consist primarily of the work of a single distinct author. Jeremiah consists of 52 chapters and Eze-kiel consists of 48 chapters. For our first challen ge, we are given all 100 unlabeled chapters and our task is to separate them out into the two constitue nt books. (For simplicity, let X  X  assume that it is known that there are exactly two natural clusters.) Note that this is a pre-segmented version of the problem since we know that each chapter belongs to only one of the books. foundation for more sophisticated attempts, we do the following: 1. Represent each chapter as a bag-of-words (us-2. Compute the similarity of every pair of chapters 3. Use a clustering algorithm to cluster the chap-ing (Dhillon et al. 2004). Comparing the Jeremiah-Ezekiel split to the clusters thus obtained, we hav e the following matrix: thogonal to the Jeremiah-Ezekiel split. Ideally, 100% of the chapters would lie on the majority diagonal, but in fact only 51% do. Formally, our measure of correspondence between the desired clustering and the actual one is computed by first normalizing rows and then computing the weight of the majority diagonal relative to the whole. Thi s measure, which we call normalized majority di-agonal (NMD), runs from 50% (when the clusters are completely orthogonal to the desired split) to 100% (where the clusters are identical with the desired split). NMD is equivalent to maximal ma-cro-averaged recall where the maximum is taken over the (two) possible assignments of books to clusters. In this case, we obtain an NMD of 51.5%, barely above the theoretical minimum. since there are many ways for the chapters to split (e.g., according to thematic elements, sub-genre, etc.) and we can X  X  expect an unsupervised method to read our minds. Thus, to guide the method in the direction of stylistic elements that might distin-guish between Jeremiah and Ezekiel, we define a class of generic biblical words consisting of all 2 23 words that appear at least five times in each of te n different books of the Bible. miting our feature set to generic biblical words, w e obtain the following matrix: NMD of 51.3%, which does not improve matters at all. Thus, we need to try a different approach. to classify different components of biblical litera -ture is synonym choice. The underlying hypothesis is that different authorial components are likely t o differ in the proportions with which alternative words from a set of synonyms (synset) are used. This hypothesis played a part in the pioneering work of Astruc (1753) on the book of Genesis  X  using a single synset: divine names  X  and has been refined by many others using broader feature sets, such as that of Carpenter and Hartford-Battersby (1900). More recently, the synonym hypothesis has been used in computational work on authorship attribution of English texts in the work of Clark and Hannon (2007) and Koppel et al. (2006). lenges. First, ideally  X  in the absence of a suffi-ciently comprehensive thesaurus  X  we would wish to identify synonyms in an automated fashion. Second, we need to adapt our similarity measure for reasons that will be made clear below. 4.1 (Almost) Automatic Synset Identification ture is the availability of a great deal of manual annotation. In particular, we are able to identify synsets by exploiting the availability of the stan-dard King James translation of the Bible into Eng-lish (KJV). Conveniently, and unlike most modern translations, KJV almost invariably translates syn-onyms identically. Thus, we can generally identify synonyms by considering the translated version of the text. There are two points we need to be precis e about. First, it is not actually words that we rega rd as synonymous, but rather word roots. Second, to be even more precise, it is not quite roots that ar e synonymous, but rather senses of roots. Conve-niently, Strong X  X  (1890 [2010]) Concordance lists every occurrence of each sense of each root that appears in the Bible separately (where senses are distinguished in accordance with the KJV transla-tion). Thus, we can exploit KJV and the concor-dance to automatically identify synsets as well as occurrences of the respective synonyms in a syn-set. 1 (The above notwithstanding, there is still a need for a bit of manual intervention: due to poly-semy in English, false synsets are occasionally created when two non-synonymous Hebrew words are translated into two senses of the same English word. Although this could probably be handled automatically, we found it more convenient to do a manual pass over the raw synsets and eliminate the problems.) including a total of 1595 individual synonyms. Most synsets consist of only two synonyms, but some include many more. For example, there are 7 Hebrew synonyms corresponding to  X  X ear X . 4.2 Adapting the Similarity Measure the following way. Each entry represents a syn-onym in one of the synsets. If none of the syn-onyms in a synset appear in the unit, all their cor -responding entries are 0. If j different synonyms i n a synset appear in the unit, then each correspond-ing entry is 1/j and the rest are 0. Thus, in the t ypi-cal case where exactly one of the synonyms in a synset appears, its corresponding entry in the vec-tor is 1 and the rest are 0. such vectors. The usual cosine measure doesn X  X  capture what we want for the following reason. If the two units use different members of a synset, cosine is diminished; if they use the same members of a synset, cosine is increased. So far, so good. But suppose one unit uses a particular synonym and the other doesn X  X  use any member of that syn-set. This should teach us nothing about the similar -ity of the two units, since it reflects only on the relevance of the synset to the content of that unit ; it says nothing about which synonym is chosen when the synset is relevant. Nevertheless, in this case, cosine would be diminished. eliminate from the representation any synsets that do not appear in both units (where a synset is said to appear in a unit if any of its constituent syn-onyms appear in the unit). We then compute cosine of the truncated vectors. Formally, for a unit x represented in terms of synonyms, our new similar-ity measure is cos'(x,y) = cos(x| S(x  X  y) ,y| where x| S(x  X  y) is the projection of x onto the syn-sets that appear in both x and y. 4.3 Clustering Jeremiah-Ezekiel Using Syn-We now apply ncut clustering to the similarity matrix computed as described above. We obtain the following split: tained using simple lexical features as described above. Intuition for why this works can be pur-chased by considering concrete examples. There are two Hebrew synonyms  X  p  X  X   X h and miq  X   X a  X  corresponding to the word  X  X orner X , two ( min  X   X h and t  X  r X m X h ) corresponding to the word  X  X bla-tion X , and two ( n  X  X  a  X  and  X   X  X  al ) corresponding to the word  X  X lanted X . We find that p  X  X   X h , min  X   X h and n  X  X  a  X  tend to be located in the same units and, concomitantly, miq  X   X a  X  , t  X  r X m X h and  X   X  X  al are lo-cated in the same units. Conveniently, the former are all Jeremiah and the latter are all Ezekiel. obtained using more na X ve feature sets, it is, neve r-theless, far from perfect. We have, however, one more trick at our disposal that will improve these results further. two observations. First, some of the units belong firmly to one cluster or the other. The rest have t o be assigned to one cluster or the other because that X  X  the nature of the clustering algorithm, but in fact are not part of what we might think of as the core of either cluster. Informally, we say that a unit is in the core of its cluster if it is sufficiently simi-lar to the centroid of its cluster and it is suffic iently more similar to the centroid of its cluster than to any other centroid. Formally, let S be a set of syn -sets, let B be a set of units, and let C be a clust er-ing of B where the units in B are represented in terms of the synsets in S. For a unit x in cluster C(x) with centroid c(x), we say that x is in the co re for every centroid c  X  c(x). In our experiments be-low, we use  X  1 =1/  X  2 (corresponding to an angle of less than 45 degrees between x and the centroid of its cluster) and  X  2 =0.1. a subset of the full collection of synsets that doe s the heavy lifting. Formally, we say that a synonym n in synset s is over-represented in cluster C if That is, n is over-represented in C if knowing that n appears in a unit increases the likelihood that t he unit is in C, relative to knowing only that some member of n X  X  synset appears in the unit and rela-tive to knowing nothing. We say that a synset s is a separating synset for a clustering {C1,C2} if some synonym in s is over-represented in C1 and a dif-ferent synonym in s is over-represented in C2. 5.1 Defining the Core of a Cluster define the cores of the respective clusters using t he following iterative algorithm. 1. Initially, let S be the collection of all synsets, let 2. Reduce B to the cores of C1 and C2. 3. Reduce S to the separating synsets for {C1,C2}. 4. Redefine C1 and C2 to be the clusters obtained 5. Repeat Steps 2-4 until convergence (no further well-separated cluster cores and a set of separatin g synsets. When we compute cores of clusters in our Jeremiah-Ezekiel experiment, 26 of the initial 100 units are eliminated. Of the 154 synsets that appea r in the Jeremiah-Ezekiel corpus, 118 are separating synsets for the resulting clustering. The resulting cluster cores split with Jeremiah and Ezekiel as follows: are not part of the core. Thus, we have a better clustering but it is only a partial one. 5.2 Using Cores for Supervised Learning representatives of each cluster, we can use them in a supervised way to classify the remaining unclus-tered units. The interesting question is which fea-ture set we should use. Using synonyms would just get us back to where we began. Instead we use the set of generic Bible words introduced earlier. The point to recall is that while this feature set prov ed inadequate in an unsupervised setting, this does no t mean that it is inadequate for separating Jeremiah and Ezekiel, given a few good training examples. stricted to generic Bible words for the 74 units in our cluster cores and label them according to the cluster to which they were assigned. We now apply SVM to learn a classifier for the two clusters. We assign each unit, including those in the training s et, to the class assigned to it by the SVM classifier. The resulting split is as follows: were in the Jeremiah cluster (and hence were es-sentially misleading training examples) end up on the Ezekiel side of the SVM boundary. to clustering is a generic method not specific to o ur particular application. The point is that there are some feature sets that are very well suited to a pa r-ticular unsupervised problem but are sparse, so they give only a partial clustering. At the same time, there are other feature sets that are denser and, possibly for that reason, adequate for super-vised separation of the intended classes but inade-quate for unsupervised separation of the intended classes. This suggests an obvious two-stage me-thod for clustering, which we use here to good ad-vantage. supervised methods sometimes used in text catego-rization where few training examples are available (Nigam et al. 2000). However, those methods typi-cally begin with some information, either in the form of a small number of labeled documents or in the form of keywords, while we are not supplied with these. Furthermore, the semi-supervised work bootstraps iteratively, at each stage using feature s drawn from within the same feature set, while we use exactly two stages, the second of which uses a different type of feature set than the first. entire two-stage method: 1. Represent units in terms of synonyms. 2. Compute similarities of pairs of units using 3. Use ncut to obtain an initial clustering. 4. Use the iterative method to find cluster cores. 5. Represent units in cluster cores in terms of ge-6. Use units in cluster cores as training for learn-7. Classify all units according to the learned SVM cal books to see if we obtain comparable results to those seen above. We need, therefore, to identify a set of biblical books such that (i) each book is su f-ficiently long (say, at least 20 chapters), (ii) ea ch is written by one primary author, and (iii) the author s are distinct. Since we wish to use these books as a gold standard, it is important that there be a broa d consensus regarding the latter two, potentially con -troversial, criteria. Our choice is thus limited to the following five books that belong to two biblical sub-genres: Isaiah, Jeremiah, Ezekiel (prophetic literature), Job and Proverbs (wisdom literature). (Due to controversies regarding authorship (Pope 1952, 1965), we include only Chapters 1-33 of Isaiah and only Chapters 3-41 of Job.) each pair of books, we are given all the chapters i n the union of the two books and are given no infor-mation regarding labels. The object is to sort out the chapters belonging to the respective two books. (The fact that there are precisely two constituent books is given.) 1. generic biblical words representation and ncut 2. synonym representation and ncut clustering; 3. our two-stage algorithm. In Figure 1, we see results for the six pairs of books that belong to different sub-genres. In Figur e 2, we see results for the four pairs of books that are in the same genre. (For completeness, we include Jeremiah-Ezekiel, although it served above as a development corpus.) All results are normalized majority diagonal. simplest method works quite well, though not as well as the two-stage method, which is perfect for five of six such pairs. The real advantage of the two-stage method is for same-genre pairs. For these the simple method is quite erratic, while the two-stage method is near perfect. We note that the synonym method without the second stage is slightly worse than generic words for different-genre pairs (probably because these pairs share relatively few synsets) but is much more consistent for same-genre pairs, giving results in the area of 90% for each such pair. The second stage reduces the errors considerably over the synonym method for both same-genre and different-genre pairs. we are given text that has been pre-segmented into pure authorial units. This does not capture the kin d of decomposition problems we face in real life. For example, in the Pentateuch problem, the text is divided up according to chapter, but there is no indication that the chapter breaks are correlated with crossovers between authorial units. Thus, we wish now to generalize our two-stage method to handle unsegmented text. 7.1 Generating Composite Documents how we might create the kind of document that we wish to decompose. For concreteness, let X  X  think about Jeremiah and Ezekiel. We create a composite document, called Jer-iel , as follows: 1. Choose the first k 1 available verses of Jeremiah, 2. Choose the first k 2 available verses of Ezekiel, 3. Repeat until one of the books is exhausted; then m=100 (though further experiments, omitted for lack of space, show that results shown are essen-tially unchanged for any m  X  60). Furthermore, to simulate the Pentateuch problem, we break Jer-iel into initial units by beginning a new unit whenever we reach the first verse of one of the original cha p-ters of Jeremiah or Ezekiel. (This does not leak an y information since there is no inherent connection between these verses and actual crossover points.) 7.2 Applying the Two-Stage Method the initial units (each of which might be a mix of verses from Jeremiah and Ezekiel) by splitting them into smaller units that we hope will be pure (wholly from Jeremiah or from Ezekiel). We say that a synset is doubly-represented in a unit if the unit includes two different synonyms of that syn-set. Doubly-represented synsets are an indication that the unit might include verses from two differ-ent books. Our object is thus to split the unit in a way that minimizes doubly-represented synonyms. Formally, let M(x) represent the number of synsets for which more than one synonym appear in x. Call ,x 2  X  a split of x if x=x 1 x 2 . A split  X  x 1 ',x the maximum is taken over all splits of x. If for a n initial unit, there is some split for which M(x)-max(M(x 1 ),M(x 2 )) is greater than 0, we split the unit optimally; if there is more than one optimal split, we choose the one closest to the middle verse of the unit. (In principle, we could apply this proce-dure iteratively; in the experiments reported here, we split only the initial units but not split units .) method on the units of Jer-iel obtained from the splitting process, as described above, until the point where the SVM classifier has been learned. Now, instead of classifying chapters as in Step 7 o f the algorithm, we classify individual verses. is that verses are short and may contain few or no relevant features. In order to remedy this, and als o to take advantage of the stickiness of classes acro ss consecutive verses (if a given verse is from a cer-tain book, there is a good chance that the next verse is from the same book), we use two smooth-ing tactics. the SVM classifier, representing its signed distanc e from the SVM boundary. We smooth these scores by computing for each verse a refined score that is a weighted average of the verse X  X  raw score and the raw scores of the two verses preceding and succeeding it. (In our scheme, the verse itself is given 1.5 times as much weight as its immediate neighbors and three times as much weight as sec-ondary neighbors.) (the width of the SVM margin), we do not initially assign the verse to either class. Rather, we check the class of the last assigned verse before it and the first assigned verse after it. If these are the sam e, the verse is assigned to that class (an operation w e call  X  X illing the gaps X ). If they are not, the vers e remains unassigned.  X  X unged X  book has 96 units. After pre-splitting, we have 143 units. Of these, 105 are pure units. Our two cluster cores, include 33 and 39 units, re-spectively; 27 of the former are pure Jeremiah and 30 of the latter are pure Ezekiel; no pure units ar e in the  X  X rong X  cluster core. Applying the SVM classifier learned on the cluster cores to individu al verses, 992 of the 2637 verses in Jer-iel lie outsi de the SVM margin and are assigned to some class. All but four of these are assigned correctly. Filli ng the gaps assigns a class to 1186 more verses, all but ten of them correctly. Of the remaining 459 unassigned verses, most lie along transition points (where smoothing tends to flatten scores and where preceding and succeeding assigned verses tend to belong to opposite classes). 7.3 Empirical Results each of the book pairs considered above. In Fig-ures 3 and 4, we show for each book pair the per-centage of all verses in the munged document that are  X  X orrectly X  classed (that is, in the majority d i-agonal), the percentage incorrectly classed (minori -ty diagonal) and the percentage not assigned to either class. As is evident, in each case the vast majority of verses are correctly assigned and only a small fraction are incorrectly assigned. That is, w e can tease apart the components almost perfectly. posed into authorial components with very high accuracy by using a two-stage process. First, we establish a reliable partial clustering of units by using synonym choice and then we use these par-tial clusters as training texts for supervised lear n-ing using generic words as features. two components, although our method generalizes trivially to more than two components, for example by applying it iteratively. The real challenge is t o determine the correct number of components, where this information is not given. We leave this for future work. biblical books suggests that our method can be fruitfully applied to the Pentateuch, since the bro ad consensus in the field is that the Pentateuch can b e divided into two main authorial categories: Priestl y (P) and non-Priestly (Driver 1909). (Both catego-ries are often divided further, but these subdivi-sions are more controversial.) We find that our split corresponds to the expert consensus regarding P and non-P for over 90% of the verses in the Pen-tateuch for which such consensus exists. We have thus been able to largely recapitulate several cent u-ries of painstaking manual labor with our auto-mated method. We offer those instances in which we disagree with the consensus for the considera-tion of scholars in the field. of tools for identifying synonyms in biblical liter a-ture. In future work, we intend to extend our me-thods to texts for which such tools are unavailable . P. Juola. 2008. Author Attribution . Series title: 
Foundations and Trends in Information Retriev-al . Now Publishing, Delft. 
