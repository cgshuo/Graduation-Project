 Balanced edge partition has emerged as a new approach to partition an input graph data for the purpose of scaling out parallel computations, which is of interest for several modern data analytics computation platforms, including platforms for iterative computations, machine learning problems, and graph databases. This new approach stands in a stark con-trast to the traditional approach of balanced vertex parti-tion, where for given number of partitions, the problem is to minimize the number of edges cut subject to balancing the vertex cardinality of partitions.

In this paper, we first characterize the expected costs of vertex and edge partitions with and without aggregation of messages, for the commonly deployed policy of placing a ver-tex or an edge uniformly at random to one of the partitions. We then obtain the first approximation algorithms for the balanced edge-partition problem which for the case of no ag-gregation matches the best known approximation ratio for the balanced vertex-partition problem, and show that this remains to hold for the case with aggregation up to factor that is equal to the maximum in-degree of a vertex. We report results of an extensive empirical evaluation on a set of real-world graphs, which quantifies the benefits of edge-vs. vertex-partition, and demonstrates efficiency of natural greedy online assignments for the balanced edge-partition problem with and with no aggregation.
 E.1 Data [ Data Structures ]: Graphs and networks; G.2.2 [ Mathematics of Computing ]: Discrete Mathematics X  Graph Theory, Graph Algorithms; H.2 [ Information Sys-tems ]: Database Management Algorithms, Experiments, Performance  X 
Work performed as part of a MSR-INRIA joint research centre project.
 Graph Edge Partition, Distributed Massive Computations, Approximation Algorithms, Streaming Heuristics
A common approach to scale-out computations on large-scale input graph data is to partition the graph data and parallelize the computation on some given number of ma-chines in a distributed cluster of machines. For example, this is of interest for iterative computations on input graph data such as computing the PageRank using the power-iteration method in systems such as Pregel [23], Giraph [8] and Spark [39], or for iterative machine learning compu-tations such as approximate Bayesian inference in systems such as Graphlab [22, 21], or for efficiently resolving queries in large-scale databases, e.g. [3], and specifically, graph databases, e.g., Neo4j [24] and Trinity [30]. An important problem is to ensure a high-quality of a graph partition with respect to two criteria: balancing the processing load across machines and minimizing the communication cost between different machines.

A traditional approach to placing a graph on a cluster of k machines is to construct a balanced vertex partition that equi-partitions the set of vertices to k partitions such that the number of edges spanning the partitions is minimized. A new approach was proposed recently in [9] that advocates to perform an edge partition by equi-partitioning the set of edges to k partitions such that the amount of communication required to synchronize the state of vertex-copies is mini-mized. This new approach is motivated by the observation that standard tools, e.g., [14, 26] for constructing a balanced vertex partition perform poorly on power-law graphs [1, 19, 20]. Each cut edge contributes to storage and network over-head since both machines maintain a copy of the adjacency information, and in some cases, a ghost vertex per each cut edge is maintained [10]. Many systems resort to using hash (random) vertex placement for its simplicity of implementa-tion. Since the graph partitioning problem is considered to be intrinsically difficult, this random partition may perform rather poorly. The design rationale of performing an edge partition is to allow for more flexibility for processing load balancing by allowing a single vertex program to span mul-tiple machines and reduction of communication and storage overhead by evenly assigning edges to machines. Since each edge is stored exactly once, changes to edge data do not need to be communicated.

Little is known about the balanced edge-partition problem both on the grounds of theoretical computation complexity and approximation guarantees, and practical methods with good average-case performance. This is unlike to the tradi-tional balanced vertex-partition problem which was studied rather extensively, with the best known approximation guar-antee of O ( in k clusters of a size n graph [18], and with software tools being available off-the-shelf, e.g. METIS [12, 13]. An impor-tant requirement for graph partitioning at scale is to being able to produce a good-quality graph partition under restric-tion to make a single pass through the graph data, which is often referred to as streaming graph partition . Here, again, we find a number of approaches that have been studied for the vertex-partition problem, e.g. [32, 34, 25]. On the con-trary, the study of streaming heuristics for the edge-partition problem is limited to the study of the PowerGraph heuris-tic introduced and studied in the original proposal [9] that advocates the use of edge partitions.

In this paper we study the following two fundamental questions:
Q1 What are the quantitative performance benefits of us-and
Q2 What are the approximation guarantees for the edge-
The first question requires some care to ensure a fair com-parison. It is important here to compare the two approaches by using a conforming definition of the cut cost, and we dis-tinguish two different definitions of a cut cost. The first definition of a cut cost assumes no aggregation of messages. In this case for the traditional vertex partition problem, the cost of a cut corresponds to the number of edges spanning the partition boundaries, and for the edge partition prob-lem it corresponds to the number of copies of vertices across clusters. The second definition of a cut cost assumes aggre-gation of messages. For the vertex-partition problem, the cost of fetching messages by a vertex from its neighbor ver-tices is equal to the number of distinct remote machines to which the neighbor vertices are assigned. Similarly, for the edge-partition problem, the cost of synchronizing the state of a master vertex is equal to the number of distinct remote machines that contain at least one edge with the given ver-tex as one of its end-points. The second question is studied by deriving theoretical approximation guaranteed and em-pirical evaluation of a large-set of real-world graphs.
Our main contributions can be summarized in the follow-ing points ( n is the number of vertices in the graph, m the number of edges and k the number of clusters in the parti-tion):  X 
We formulate the combinatorial optimization problems for the balanced vertex-partition and edge-partition problems with and without aggregation.  X 
We characterize the expected cost for each of these four cases under uniform random assignment policy.  X 
Under uniform random assignment, the expected cost of edge-partition with aggregation is always less than or equal to that of the vertex-partition with aggregation.  X 
For the edge-partition problem with aggregation, we show a polynomial time O ( d max rithm, where d max is the maximum degree of a vertex, for any graph with m = X ( k 2 ) edges. From a practical point of view, we show that from any  X  X ood X  vertex partitioning al-gorithm, we can derive a  X  X ood X  edge partitioning algorithm for any sparse graph.  X 
We show that the edge-partition problem with no aggre-gation corresponds to a balanced vertex-partition problem with in-degree-weighted cardinality constraints. Hence, the edge-partition problem has the same approximation guar-antees as that of a vertex-partition problem. Again, this implies that any algorithm for the vertex-partition can be easily turned into an edge-partition algorithm with similar performance.  X 
We report results of an empirical study of a large set of real-world graphs to evaluate the benefits of using the edge-partition approach vs. the vertex-partition approach, eval-uate the quality of edge partitions using the approximation algorithms derived in this paper. We found that the edge partitions for the greedy assignment streaming heuristics de-rived from our offline problem formulations outperform pre-viously best-known heuristics.

The paper is structured as follows. Section 2 formulates the problems of vertex-and edge-partition without and with aggregation. Section 3 provides characterizations of the ex-pected cost for uniform random assignment of vertices of edges, and provide the comparison results. In Section 4, we provide our main results on the approximation guarantees for the edge-partition problem with and without aggrega-tion. Streaming heuristics are discussed in Section 5. Em-pirical evaluation results are provided in Section 6. Related work is further discussed in Section 7. Finally, we conclude in Section 8.
In this section, we describe the four different partition problems.
 Given a directed graph G =( V,E )withthesetofvertices V and the set of directed edges E  X  V  X  V .Let n and m denote the number of vertices and the number of directed edges, respectively. Throughout the paper, we shall use the following notation. Let N in ( u )= { v  X  V, ( v,u )  X  E } N out ( u )= { v  X  V, ( u, v )  X  E } denote the set of vertices that have edges respectively incoming to and outgoing from u  X  V . Let us define d in ( u )and d out ( u ) the in-degree and out-degree of vertex u  X  V , i.e. d in ( u )= | N in ( u )
A partition of vertices into k clusters is defined as follows: y v,i =1ifvertex v  X  V is assigned to partition i  X  [ k ], and y v,i = 0 otherwise. Each vertex being assigned to exactly onecluster,wehave k i =1 y v,i =1forall v  X  V .

Similarly, a partition of edges into k clusters is defined as follows: x e,i =1ifedge e  X  E is assigned to cluster i  X  [ k ], and x e,i = 0, otherwise. Each edge is assigned to exactly one cluster, thus k i =1 x e,i = 1, for all e  X  E .
Each partition problem is characterized by a communica-tion cost (denoted by C ) which has to be minimized under a condition of balanced loads of the clusters. If we denote by L ( i ) the load of cluster i  X  [ k ], our partition problems can be written as:
In the sequel we call the parameter  X   X  0 the load con-straint. The precise definitions of the communication cost and the load of a cluster will depend on which problem we consider: vertex or edge partition with or without aggrega-tion. Typically, the communication cost between two clus-ters is assumed to be linear in the number of messages ex-changed in order to synchronize the states of the replicas and the load of a cluster is assumed to be linear in the num-ber of basic operations done by all the elements (vertices or edges) stored on a cluster. We precisely define the four different problems in the sequel.

We can also deal with undirected graphs. In this case, we create the following directed graph from the original graph: we associate to each undirected edge { uv } two directed edges ( u, v )and( v,u ). The problem formulation is then the same except for the following modification: we require that for each undirected edge { u, v } ,wehave x ( u,v ) ,i = x ( v,u that in this case, d in ( u )= d out ( u ) is the degree of vertex u in the undirected graph and m is twice the number of edges in the undirected graph.
In a vertex partition, the cost function to minimize is typ-ically the number of edges with endpoints in different clus-ters. This case corresponds to the case with no aggregation. In the case of k clusters, the number of such edges is given by:
Standard balanced graph partitioning problem asks for an optimal partitioning of vertices under a balance condition on the cardinality of clusters. Here, we consider a more general version where for some given positive weights on vertices ( a u ,u  X  V ), the load of a cluster is given by: For  X   X  0, the vertex partition problem with no aggregation is formulated as the following integer programming problem denoted ( k,a )  X  VP : ( k,a )-V ERT EX PA RT IT ION wi th N O AG G R EG A -TION :
The vertex cardinality constraints are accommodated as a special case with unit weights: a u = 1. We shall use the notation ( k,d in ) to refer to a balanced vertex partition with no aggregation problem where the weights correspond to in-degrees of vertices: a u = d in ( u ), for u  X  V .
When aggregation is possible, the communication cost changes as edges between two clusters can be lumped to-gether and then incur only a cost of one. In this case, the communication cost is simply: The balance condition remains the same as above (2) so that the vertex partition with aggregation can be formulated as the following integer programming problem denoted ( k,a ) VPA : ( k,a )-VERTEX PARTITION with AGGREGATION : We shall use the notation ( k,d out )torefertoabalancedver-tex partition with no aggregation problem where the weights correspond to in-degrees of vertices: a u = d out ( u ), for u
We consider now a situation where each edge is assigned to exactly one cluster. As a result, a vertex might have copies in different clusters. For example in Figure 1, node u is replicated 3 times, once in each of the clusters 1, 3 and 4. For each vertex v , we assume that there is a designated master vertex assigned to exactly one cluster whose task is to collect messages from all neighbors vertices of v ,perform a computation using the input messages, and then commu-nicate the result to all copies of vertex v . The location of a master vertex is indicated by z v,i = 1 if the master of ver-tex v is located in cluster i ,and z v,i =0,otherwise. Note that the master of a vertex v is not necessarily located in a cluster that contains at least one copy of vertex v .
In case of no aggregation, we assume that a unit cost is incurred per each edge incident to a given vertex that re-sides in a cluster different from that of the master vertex of the given vertex. For example in Figure 1, suppose that the master for vertex u is located in cluster 4, then a com-munication cost of 4 is payed for vertex u as there are four incoming edges that reside in clusters other than 4. In a dis-tributed iterative computation, each such copy of a vertex, will require a message to be sent to the master vertex across different partitions. More formally, the communication cost canbewrittenas:
C EP ( x, z )= Each master vertex is assumed to incur a processing cost that is equal to the number of edges incident to the corre-sponding vertex. In a distributed iterative computation, the processing cost of the master is assumed to be linear in the number of messages received per iteration. More formally, the load of cluster i is given by (note it is independent of x ):
Finally, for any  X   X  0, the edge partition problem with no aggregation denoted k  X  EP is given by: k -EDGE PARTITION with NO AGGREGATION : subject to u  X  V d in ( u ) z u,i  X  (1 +  X  ) m k ,i  X  [ k ]
Note that for directed graphs, the optimal communication cost is zero. Indeed for any admissible z u,i ,wecantake x v,u ) ,i = z u,i so that the cost becomes: C However for undirected graphs, the communication cost will generally not be zero because of the constraint x ( u,v ) x v,u ) ,i for each undirected edge
If aggregation is possible then both the communication cost and the load are modified as computations are done locally, the results of these computations are lumped and then sent to each master. As a result, each vertex u  X  V incurs a communication cost which is simply the number of clusters containing at least an edge ( v,u )  X  E minus one (corresponding to the cluster containing the master). Summing the contribution of each vertex, we get: Now, since computations are made locally, the load of a clus-ter is simply proportional to the number of edges contained in this cluster:
Finally, for any  X   X  0, the edge partition problem with no aggregation denoted k  X  EPA is given by (note that we can remove the additive constant n in the cost function without modifying the optimal solution; we keep it to allow to make comparison with the other problems): k -EDGE PARTITION with AGGREGATION : subject to e  X  E x e,i  X  (1 +  X  ) m k ,i  X  K
In this section we consider the expected cost of random assignment policy that for the case of edge partition assigns each edge independently and uniformly at random to one of k partitions, and likewise for the case of vertex partition assigns each vertex independently and uniformly at random to one of k partitions. We shall provide exact characteriza-tions of these expected costs for the case without and with aggregation. We then show that aggregation lowers the ex-pected communication cost (in most cases). Moreover, also expected costs are the same for edge and vertex partition with no aggregation, we find that when aggregation is pos-sible, edge partition has a lower expected cost than vertex partition. There are two statistics of the in-degree sequence of a given graph that play an important role here for the case without and with aggregation, respectively, the number of (directed) edges : m = v  X  V d in ( v )and The latter statistic corresponds to a moment generating func-tion of the degree sequence evaluated at the value log(1 1 /k ).
Proposition 1. For any given graph with sequence of in-degrees d in =( d in ( v )) v  X  V , we assign edges independently and uniformly at random across k clusters. In the case of edge partition with no aggregation, we assign the master to a random cluster. Then we have the following expected com-munication costs:
Corollary 1. As soon as nk  X  m , aggregation lowers the communication cost under a random edge partition, i.e. E [ C EP ] &gt; E [ C EPA ] . Moreover, for any given graph, the gap between the two expected costs is at least ( n  X  m/k ) .
Proofs are provided in Appendix [7].
Proposition 2. For any given graph with sequence of de-and uniformly at random across k clusters. Then we have the fol lowing expected communication costs:
Corollary 2. Aggregation lowers the communication cost under a random vertex partition, i.e. E [ C VP ] &gt; E [ C Proofs are provided in Appendix [7].
Note that the expected costs are the same for the edge and vertex partitions when there is no aggregation. The following easy corollary shows that the situation is different with aggregation:
Corollary 3. For every given graph, the expected cost of vertex partition with aggregation is greater than the expected cost of edge partition with aggregation. Moreover, the gap between the two expected costs is at least n X  ( d in ,k ) .
Proof. Follows directly from (7) and (9).
In this section, we restrict ourselves to the undirected case so that N in ( u )= N out ( u )= N ( u ), d in ( u )= d out and u  X  V d ( u )= m is twice the number of (undirected) edges.
It is well-known that the (2 , 1)-vertex partition problem with no aggregation, i.e. the minimum bisection problem is NP -complete but efficient approximation algorithms have been obtained in [6]. The following theorem shows that it is not possible to derive a finite approximation factor for each of the four problems when k is not a constant.

Theorem 1. Each of the four problems with  X  =0 : ( k,d ) -vertex partition with/with no aggregation and k -edge parti-tion with/with no aggregation, has no polynomial time ap-proximation algorithm with finite approximation factor un-less P = NP .

Proof. The case of ( k, 1)-vertex partition with no ag-gregation is Theorem 2.1 in [17] and the other cases follow by the same reduction from the 3-Partition problem (details omitted).
For edge partition with aggregation we show that there exists a polynomial-time algorithm with approximation ra-tio that matches that of the vertex partition problem up to a d max factor, where d max is the maximum degree of a vertex. Since the best known approximation ratio for the vertex partition problem is poly-logarithmic in the number of vertices of the graph, this yields a poly-logarithmic ap-proximation algorithm for any sparse graph, i.e. such that d max = O (log c n ), for some positive constant c . The algo-rithm uses as a subroutine an approximation algorithm for the vertex partition problem with no aggregation and the load of a partition defined to be the sum of degree weighted vertices assigned to this partition. The algorithm can be summarized in the following two steps:
Theorem 2. There exists a polynomial-time algorithm that given a feasible solution y with load constraint  X  to ( k,d ) -VP of cost C VP ( y ) outputs a feasible solution x with load constraint  X  + k 2 m to k -EPA of cost C EPA ( x ) such that
Proof. The proof consists of two steps. First, we show that given a feasible vertex partition y for the ( k,d )-problem with the load parameter  X  , the given construction of an edge partition x is a feasible solution for the k -problem with the load parameter  X  + k 2 /m . Second, we show that the objective functions C EPA ( x )and C VP ( y )satisfythe relations in (10).

Suppose y is a feasible solution to the ( k,d )-VP problem and let C VP ( y ) denote the value of the cut. Let S i be the set of vertices in partition i , i.e. S i = { v  X  V : y v,i =1 total cost of the cut can be expressed as 1 2 i  X  [ k ] | S ) | where for A, B  X  V , E ( A, B ) denotes the set of edges with exactly one end in A and the other end in B .Now, note that Since y is assumed to be a feasible assignment,
Let us define the edge-partition P 1 ,P 2 ,...,P k as follows: for each pair i, j  X  [ k ] such that i = j , split E ( S i into two sets P i,j and P j,i of balanced cardinalities, i.e. P P j,i =  X  ,and  X  1  X | P i,j | X  X  P j,i | X  1. Define P i = E ( S  X 
It is easy to observe that for all i  X  [ k ], Hence where the first inequality follows by (11) and (12) and the second inequality is by the fact k  X  1  X  (1 +  X  )( k 2 /m ) m/k . This implies that the given edge partitioning satisfies the constraints of the k -EPA problem.

It remains to show that the objective functions C EPA ( x ) and C VP ( y ) satisfy the relations in (10). First note that only edges cut in the vertex partition y contribute to the communication cost C EPA ( x ), indeed removing all the edges which are not cut in y will not change C VP ( y )nor C EPA Moreover each edge cut in y contribute to at most one in C EPA ( x )sothat C EPA ( x )  X  C VP ( y ).

Inversely, each vertex u  X  V incurs a cost of at most d max in the communication cost C VP ( y ) (corresponding to the case where each incident edge to u is cut in y ). A vertex u V incursacostofzeroin C VP ( y ) if none of the incident edge to u is cut. In this last case, the vertex will not contribute to the communication cost C EPA ( x ) by previous remark. Hence we have C VP ( y )  X  d max C EPA ( x ).

Corollary 4. Assume that m = X ( k 2 ) , then there ex-ists a polynomial-time algorithm with approximation ratio
Proof. This is a corollary of Theorem 2 and an easy extension of Theorem 1.1 in [18] to the ( k,d )-VP problem showing that there exists a polynomial-time approximation algorithm with the approximation ratio O (
We shall show that the edge partition is in a one-to-one correspondence to a vertex partition problem. This will show that the computational complexity of the balanced edge partition with no aggregation corresponds to that of a balanced vertex partition problem (with no aggregation). This reduction will be established by the following simple two-step construction: 1. Suppose y is an optimal solution to the ( k, d )-vertex 2. Then, partition edges by assigning each edge ( u, v )  X 
Theorem 3. k -edge partition problem is in a one-to-one correspondence with the ( k,d ) -vertex partition problem.
Proof of this theorem is provided in Appendix [7]. Again thanks to an easy extension of Theorem 1.1 in [18], we obtain the following corollary of Theorem 3:
Corollary 5. There exists a polynomial-time algorithm with approximation ratio O ( tition problem.
In this section, we discuss streaming heuristics for the bal-anced edge partition problem without and with aggregation. We shall first introduce a state-of-the-art heuristic for the balanced edge partition problem and point out to some of its deficiencies. We shall then move to introducing a class of novel streaming heuristics that are inspired by the analysis of the offline version of the problem in Section 4.
Suppose edges arrive in an arbitrary order. In the de-scription of the algorithm below, S ( v ) will be a set evolving as edges arrive and it will contain the clusters with at least one already observed edge incident to vertex v . Initially, S ( v )=  X  , for all v  X  V . The algorithm defined below re-quires to know for each arriving edge, the number of unas-signed edges for each end-vertex of this edge. For this to be realized, it suffices to know the degree of each vertex, and then the number of the unassigned edges of a vertex can be kept as part of the algorithm state (this we omit in the description presented below).
 PowerGraph heuristic Per each arrival of an edge ( u, v ), do the following: 1. If the intersection of S ( u )and S ( v )isnon-empty,then assign edge ( u, v )toacluster I in this intersection. 2. Otherwise, assign edge ( u, v )toacluster I in S ( u ) (containing either u or v ) with the most unassigned edges. 3. Otherwise, if both S ( u )and S ( v ) are empty, then assign edge ( u, v ) to a partition I with the least number of assigned edges. 4. S ( u )  X  S ( u )  X  X  I } and S ( v )  X  S ( v )  X  X  I } .
This heuristic can be showed to correspond to a greedy as-sign ment that for each arriving edge minimizes the expected cut cost conditional on that all subsequent edges are assigned to partitions uniformly at random. This can be seen as a derandomization of the uniform random assignment, and is thus guaranteed to yield a cut cost that is guaranteed to be less or equal to that of the uniform random assignment.
An important observation from the definition of the Pow-ergraph heuristic is that edges are assigned using a greedy assignment that prioritizes assignment of an edge to a par-tition that already contains one of the end-vertices, and the load balancing of edges is performed only if neither of the end-vertices have been already assigned. This may result in a gross imbalance of the partition sizes. For example, a worst-case is a breadth-first search traversal of a connected tree, where all edges end up being assigned to one partition, which results in an extreme imbalance.
For the basic formulation, we derive a greedy online as-signment for edge partition with aggregation by an irrevo-cable assignment of edges to clusters as they are observed in the input stream to a cluster that minimizes the marginal cost. We denote by P i the clusters of an edge-partition. Then for any S  X  E , V ( S ) is the set of vertices spanned by S , i.e. all vertices adjacent to an edge in S .Notefrom (5) that the marginal cost of the cut size by adding an edge ( u, v )tocluster i is equal to It is noteworthy that in any case the marginal cost of the cut size is either 0, 1 or 2: first, it is zero if the edge is placed in a cluster in which both of its end-vertices have been already assigned, second, it is equal to 1 if exactly one of its end-vertices has been previously assigned, and third, it is equal to 2 if neither of its vertices have been previously assigned to this cluster.

Since | V ( P i  X  ( u, v )) \ V ( P i ) | =2  X  X  V ( P i ) online heuristic for minimizing the cut size is to assign each input edge ( u, v )toacluster i  X  I where which means that the edge is assigned to a cluster in the following priority order: (i) in a cluster that already contains both of its end-vertices, if any exists, (ii) in a cluster that already contains exactly one of its end-vertices, if any exists, and else (iii) to an arbitrary cluster. Such an assignment is greedy with respect to the cost of the cut criteria and is entirely ignorant of the load balancing criteria.
A way to define a greedy assignment that accounts for both criteria is to redefine the optimization problem as fol-lows. Let c : R +  X  R + be an increasing convex function such that c (0) = 0. Then, redefine k -EPA by moving the hard constraints into the objective function as a soft penalty function, as given in here The greedy online assignment with respect to this problem amounts to assigning an input edge ( u, v )toacluster i  X  where I =argmax j  X  [ k ] {| V ( P j )  X  X  u, v }| X  [ c ( | P j  X  We refer to this class of greedy assignment policies as the least incremental cost (IC) assignment.

An alternative class of heuristics is derived by following an approach pursued for balanced vertex partitioning that amounts to discounting the marginal benefit in (13) with the cardinality of the partition. Specifically, for given decreasing function d : R +  X  R , assign an input edge ( u, v )toacluster I where
Notice that unlike to the PowerGraph heuristic, the greedy online assignments as defined in this section do not require any extra information about the input data, such as knowing the degree of each vertex.
We use as a subroutine a greedy online algorithm for ap-proximating vertex partitioning defined in [34], which is very similar to the one described in the previous section. It sup-poses vertex arrival. The idea of the algorithm is to mini-mize the following objective function: i  X  [ k ] | E ( S i c ( | S i | ). This can be done with this greedy online assignment: Per vertex u arrival, we assign it to a partition i  X  I where
I =argmax j  X  [ k ] {| N in ( u )  X  P j | + c ( | P j  X  u We refer to this class of greedy vertex assignment policies as the vertex partition least incremental cost (VP-IC) assign-ment.
Suppose edges arrival in an arbitrary order. Suppose we have some partitioning of the vertices S i , for all i  X  X  which are balanced with regard to degree weights. We can derive easily an edge partitioning from this vertex partition-ing as follows. Per each arrival of an edge ( u, v ), flip a fair coin, and do either of the following: (1) assign ( u, v )topar-tition i such that u  X  S i , or (2) assign ( u, v ) to partition i such that v  X  S i . This will give an edge partitioning with a communication cost lesser than the vertex partitioning X  X  one, and should keep a maxload ratio close to the previous one thanks to random assignment.
In this section we report results of empirical evaluation of several hypotheses on a dataset containing samples of five real-world graphs whose properties are summarized in Ta-ble 1. This dataset contains samples of real-graphs with quite some diversity along several dimensions, including the scale ranging from hundred of thousands to m illions of ver-tices, sparsity ranging from a few to hundreds of edges per vertex, and type including social graphs, co-purchasing of products and co-authorship of scientific papers. In the first part of this section, we shall evaluate expected communica-tion cost for edge and vertex partition problems with and without aggregation under rando m assignment of edges of vertices, under our benchmark random edge or vertex as-signment, which is commonly deployed in practice. This part of our analysis provides empirical support to the fol-lowing claims: (H1) For balanced edge partition, aggregation of messages typically provides significant reduction of the communica-tion cost. (H2) Balanced edge partition with aggregation can have significantly smaller expected communication cost than bal-anced vertex partition with aggregation.

In the second part, we shall focus on evaluating our ap-proximation algorithms for balanced edge partition problem, for the offline and the online version of the problem. For the online version, we shall compare with previously-proposed method for balanced edge partition problem, namely Pow-erGraph heuristics. Our empirical validation results provide support to the following claims: (H3) PowerGraph heuristic provides significant reduction of the communication cost with respect to random edge parti-tion. However, this is at the expense of a maximum load of a partition that may assume rather large values. (H4) Least incremental cost heuristic (described in Sec-tion 5.2.1) typically has communication cost that is smaller or equal to that of PowerGraph heuristic and nearly per-fectly balanced loads of partitions. (H5) Balanced edge partition derived from a vertex par-tition with degree-weighted vertices using an offline solver tends to have significantly smaller communication cost than online assignment strategies. (H6) Balanced edge partition derived from a vertex parti-tion with degree-weighted vertices using the least marginal cost online heuristic tends to have much smaller communica-tion cost than random edge assignment, but worse than least marginal cost strategy for balanced edge partition problem.
We evaluate expected communication costs under random edge or vertex assignments. In Section 3 we provided a com-plete characterization of the expected communication costs under random or vertex assignment, and observed that they all depend in one way or another on the degree sequence of the given input graph. The degree distributions of the graphs in our dataset are showed in Figure 2. As one would expect they all exhibit some degree of a power-law depen-dence. For all the examples, the 0 . 99-quantile of the vertex degree is in the order of 10 vertices. A notable distinction of Orkut graph data is that an approximately same portions of vertices have degrees in the range from one to order ten. In Figure 3 we show expected communication cost for edge partition with and without aggregation, and vertex partition with aggregation versus the number of partitions ranging from 2 to 32 partitions. In this figure, the circles repre-sent empirical means computed over 10 repeated partitions. As one would expect, the empirical means are highly con-centrated around the expected values computed using the degree sequence in the characterization results presented in Section 3. For all graphs in our dataset, aggregation of mes-sages for balanced edge partition problem yields significant reduction of communication cost. For a small number of partitions, the communication cost of edge partition with aggregation can be as small as 1 / 10 of that with no aggre-gation. From Figure 3, we also observe that balanced edge partition with aggregation typically has smaller communica-tion cost than vertex partition with aggregation, and there exist cases where the difference is significant. Overall, these results provide support to hypothesis (H1) and (H2) asserted at the beginning of this section.
We evaluated various approximation algorithms for bal-anced edge partition problem with respect to the two criteria of the communication cost and the maximum load of a par-tition. In Figure 4, we present results for different approx-imation algorithms for each input graph from our dataset. RND refers to random edge assignment. VP-IC refers to edge partition derived as explained in Section 5.3 from a vertex partitioning given by a greedy online assignment as defined in Section 5.2.2 with c ( x )=  X x  X  ,  X  = n ( k m  X  =1 . 5. PG refers to Powergraph heuristic defined in Sec-tion 5.1. IC refers to greedy online assignment as defined in Section 5.2.1 with c ( x )=  X  ( u  X  x d u )  X  ,  X  = m k  X  =1 . 5. And, finally, VP-METIS refers to edge partitioning derived as explained in Section 5.3 from a vertex partitioning given by the offline tool METIS, which is a state-of-the-art software tool for approximating balanced vertex partition problem.

In this part of analysis we evaluate performance of three one-pass streaming algorithms for balanced edge partition, including random, least marginal cost, and PowerGraph, and the approximation algorithm for the offline version of the problem in Section 4.2. In particular, in the latter case, we use METIS solver for finding an approximate solution to the subroutine balanced vertex partition with degree-weighted vertices. For the online version of the problem, we observe that for all the graphs in our dataset, least marginal cost algorithm yields a smaller or equal communication cost than PowerGraph. We observe that PowerGraph exhibits varying quality of partition with respect to the maximum load of a partition, which in some cases attains significantly larger values than any other method. Especially, under Pow-erGraph assignment, the maximum load tends to increase with the number of partitions, and can achieve maximum load values of more than 10% of extra load to the mean number of edges per partition. On the other hand, the least marginal cost assignment achieves nearly perfect load bal-ancing, and still performs better or nearly equal than Pow-erGraph with respect to the communication cost. Overall, these observations provide empirical support to the hypothe-ses (H3) and (H4). For the offline approximation algorithm described in Section 4.2, we observe that it can perform significantly superior performance with respect to the com-munication cost than one-pass streaming algorithms. This provides empirical support to hypothesis (H5). Finally, we also observe that using a one-pass streaming algorithm for the balanced vertex partition problem with degree-weighted vertices and then deriving an edge partition from the result-ing vertex partition can provide significant reduction of the communication cost with respect to random edge assign-ment, but worse than the least marginal cost strategy for balanced edge partition problem. This provides empirical support to hypothesis (H6). An implication of this hypoth-esis is that one needs to exercise some care in designing a scalable partition strategy based on a few passes through graph data based on the approach in Section 4.2 that uses a balanced vertex partition problem as a subroutine.
Traditional balanced graph partitioning problem, referred to in this paper as the vertex partition problem with no ag-gregation, has been studied extensively by theoretical com-puter science and more applied communities. The best known approximation ratio for this problem is O ( and [18], using a semi-definite programming relaxation and a randomized rounding. The solvers used in practice rely on a combination of various heuristics, e.g. one commonly used software is METIS [12, 14, 13] that combines a num-ber of heuristics including the well-known Kernighan and Li heuristic [15]. Graph partitioning has attracted a lot of attention recently by the systems community to scale out large-scale computations, e.g. for parallel distributed com-puting in distributed clusters of machines [9, 22, 21, 11, 38, 40, 16], graph databases and graph analytics platforms [30, 37, 36, 4], search and social networks [35, 5, 28], and multi-core and share memory systems [27, 2, 31, 29]. In recent partition with aggregation vs. the number of partitions k . work, scalable strategies for graph strategies have been in-vestigated that are based on one-pass streaming algorithms. An early work in this direction is [32] that focused on the traditional graph partitioning problem, improved strategies in [34], and a multi-pass version in [25]. [35] studied local improvements algorithms that aim at minimizing the cut subject to a budget constraint on the number of vertices to reallocate. In this recent work, novel variants of graph partitioning problems have emerged that are different from the traditional balanced graph partitioning problem with re-spect to the definition of the cut cost function and the load balancing constraints. One such new variant is the balanced edge partition problem, originally proposed in [9], which we have studied in this paper.

From a theoretical standpoint, the balanced edge parti-tion problem is an instance of a submodular function mini-mization subject to cardinality constraints. For general class of submodular load balancing problems, the approximation guarantee of O ( n/ log n ) was showed to hold in [33]. Our approximation ratio of O ( d max ter approximation guarantee for the subclass of balanced edge partition problems for any graphs with d max = o (
In this paper we analyzed balanced graph edge partition problem that was recently proposed as an alternative to traditional balanced graph vertex partition for scaling out distributed computations in data analytics platforms. We provided explicit characterization of the expected commu-nication cost for different variants of the graph partition problem under commonly deployed scheme of randomly as-signing edges of vertices to a given number of partitions. We provided approximation algorithms for balanced edge partition problem with and without message aggregation. Interestingly, both problems use a balanced vertex parti-tion problem as a subroutine, thus allowing us to reutilize known techniques and off-the-shelf software for this tradi-tional graph partition problem. For scalable partitioning based on a single pass through graph data, we showed that the least marginal cost greedy heuristic provides better per-formance than the best previously known heuristic with re-spect to both the communication cost and load balancing of partitions. The results in this paper present a first step towards a more thorough analysis of balanced edge parti-tion problem both on the side of theoretical approximation guarantees and the design of practical algorithms with good average-case performance.
