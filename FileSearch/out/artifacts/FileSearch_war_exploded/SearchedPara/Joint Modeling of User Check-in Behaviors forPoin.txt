 Point-of-Interest (POI) recommendation has become an important means to help people discover attractive and interesting locations, especially when users travel out of town. However, extreme sparsi-ty of user-POI matrix creates a severe challenge. To cope with this challenge, a growing line of research has exploited the temporal effect, geographical-social influence, content effect and word-of-mouth effect. However, current research lacks an integrated anal-ysis of the joint effect of the above factors to deal with the issue of data-sparsity, especially in the out-of-town recommendation s-cenario which has been ignored by most existing work.

In light of the above, we propose a joint probabilistic generative model to mimic user check-in behaviors in a process of decision making, which strategically integrates the above factors to effec-tively overcome the data sparsity, especially for out-of-town users. To demonstrate the applicability and flexibility of our model, we investigate how it supports two recommendation scenarios in a u-nified way, i.e., home-town recommendation and out-of-town rec-ommendation. We conduct extensive experiments to evaluate the performance of our model on two real large-scale datasets in terms of both recommendation effectiveness and efficiency, and the ex-perimental results show its superiority over other competitors. H.3.3 [ Information Search and Retrieval ]: Information Filtering Recommender system; Location-based service; Probabilistic gen-erative model; Joint Modeling
The rapid development of Web 2.0, location acquisition and wire-less communication technologies have fostered a number of location-based social networks (LBSNs), such as Foursquare and Facebook Places. In these LBSNs, users can post their physical locations or c geo-tagged information in the form of  X  X heck-in X , and share their visiting experiences and tips for points of interest (POI) with friend-s, such as restaurants, sightseeing sites. In LBSNs, it is crucial to utilize user check-in data to make personalized POI recommenda-tion, which helps users know new POIs and explore new regions, facilitate advertisers to launch mobile advertisements to targeted users, and make LBSNs more attractive to users and advertisers.
Recently, POI recommendation has become a popular research topic due to easy access of large-scale check-in records. One of the most important problems is how to deal with a severe challenge stemming from extreme sparsity of user-POI interaction matrix. There are millions of POIs in LBSNs, but a user can only visit a limited number of them. Moreover, the observation of travel locali-ty exacerbates this problem. The observation of travel locality [15] made on LBSNs shows that most of users X  check-ins are limited to their living regions (e.g., home cities) on account of the distance constraint. An investigation demonstrates that the check-in records generated by users in their non-home cities are very scarce and on-ly take up 0 . 47% of the check-in records left in their home cities, which aggravates the data sparsity problem with POI recommen-dation for out-of-town users (e.g., if we want to recommend POIs located at Los Angeles to people from New York City) [10, 35].
The most popular approach in recommender systems is that of collaborative filtering [1]. There exists a considerable body of re-search [15, 27, 17, 10, 11] which deposited people X  X  check-in his-tory into user-POI matrix where each row corresponds to a user X  X  POI-visiting history and each column denotes a POI. A collabo-rative filtering-based method is then employed by [15, 27, 10] to infer the user X  X  preference regarding each unvisited POI. Based on the core idea of collaborative filtering, similar users of the target us-er (i.e., those who exhibit similar POI visiting behaviors) are cho-sen to provide clues for making recommendation. Owing to travel locality, most of these similar users are more likely to live in the same region with the target user than other regions. As a recom-mendation is made by considering POIs visited by the similar user-s, most of the recommended POIs would be located in the target user X  X  home town. So, these CF-based methods cannot be directly applied to the POI recommendation for out-of-town users [10, 35].
Moreover, unlike the traditional GPS trajectories [42, 41], the time-ordered check-in records of a user are low-sample-rate where the details of movement information are lost. The spatial gap be-tween any two consecutive check-ins is typically in the scale of kilometers while the spatial gap between consecutively logged G-PS points in the GPS trajectories is typically 5-10 meters. Besides, the time interval between consecutive check-ins is much larger than that in the GPS trajectories. Therefore, existing sequential pattern mining methods such as Markov-chain models on GPS trajectories cannot be applied to the sparse users X  check-in data in LBSNs.
To deal with the issue of data sparsity, especially for out-of-town recommendation scenario, we explore the following factors which affect users X  check-in behaviors.
While there are some studies that exploit one of the above fac-tors to improve POI recommendation effectiveness, they lack an integrated analysis of their joint effect to deal with the issue of data sparsity, especially in the out-of-town recommendation sce-nario. Specifically, most prior work of POI recommendation fo-cused on exploiting users X  mobility patterns by investigating geo-graphical influence [28, 5, 17], temporal effects [36, 11], or social influence [10, 28, 8], but they ignored the potential effect of con-tent information of checked-in POI, thus missing the opportunity to transfer user interests inferred at home town to other out-of-town regions by the medium of POI contents [35]. Although some recent work [35, 12, 20] exploited the content information of POIs to deal with the issue of data sparsity, they did not consider the temporal effect and geographical influence.

In light of this, we propose a Joint probabilistic generative mod-el JIM to simulate the decision-making process of users X  check-in behaviors, which strategically integrates the above factors to ef-fectively overcome the issue of data sparsity, especially for out-of-town users. As a POI has both semantic and geographical at-tributes, two corresponding components are designed in JIM: Time-aware User Interest Component (TIC) and Popularity-aware User Mobility Component (PMC).

TIC aims to exploit both the contents of POIs and their temporal effect to model users X  interests. Specifically, we infer individual us-er X  X  interests according to the contents of his/her checked-in POIs. Thus, TIC alleviates the data sparsity, especially for out-of-town users, as the contents play the role of medium which can trans-fer users X  interests inferred at their home regions to out-of-town regions where they are traveling. Unfortunately, based on recen-t analysis of LBSNs data [26], about 30% of all POIs are lack-ing any meaningful textual descriptions. To address this problem, we exploit the temporal effect of users X  activity contents, since the check-in time provides important clues to the contents of POIs.
PMC is developed to utilize the geographical influence and word-of-mouth effect to account for users X  spatial mobility. Different from user online behaviors in the virtual world, user activities in the physical world are limited by travel distance. In this compo-nent, we first infer a user X  X  activity range according to the location distribution of his/her historical visited POIs or his/her current lo-cation. Specifically, we divide the geographical space into several regions and compute the probability of each region that an indi-vidual user is likely to visit. Then, we infer the POI generating probability from each region according to both the public X  X  check-in behaviors at that region and the distance between the POI and the center of that region, i.e., considering both the region-level popu-larity of the POI and the geographical influence. By integrating the region-level word-of-mouth effect, i.e., the wisdom of crowds, JIM model can solve the problem of user interest drift across geographi-cal regions which indicates that user interests inferred at one region (e.g., home town) cannot always be applied to recommendation at another region. For example, a user u never goes gambling when he lives in Beijing, China, but when he travels to Macao or Las Vegas he is most likely to visit casinos.

To demonstrate the applicability of JIM, we investigate how it supports two recommendation scenarios in a unified way: 1) home-town recommendation that assumes that the target user is located in his/her home town, i.e., to meet users X  information need in their daily life, and 2) out-of-town recommendation that aims to meet users X  information need when they travel out of town, especially in unfamiliar regions. It is worth mentioning that both of the rec-ommendation scenarios should be personalized, time-aware [36] and location-based [10], i.e., to recommend different ranked lists of POIs for the same target user at different time and locations.
We conduct extensive experiments to evaluate the performance of our JIM model on two real large-scale datasets in terms of rec-ommendation effectiveness and efficiency, and the results show su-periority of JIM model over other competitors. Besides, we study the contribution of each factor to improve the recommendation re-sults in the two respective scenarios under a unified recommenda-tion framework, and find that the content effect plays a dominant role in alleviating the data sparsity of out-of-town recommenda-tion, while the temporal effect is most important to improve home-town recommendation. To the best of our knowledge, this is the first work to compare the effect of each factor in the two different recommendation scenarios.

The remainder of the paper is organized as follows. Section 2 details JIM model. We present how to effectively and efficiently deploy JIM model to the POI recommendation in Section 3. We report the experimental results in Section 4. Section 5 reviews the related work and we conclude the paper in Section 6.
In this section, we first formulate the problem definition, and then present our proposed JIM model.
For the ease of presentation, we define the key data structures and notations used in this paper.

Definition 1. (POI) A POI is defined as a uniquely identified specific site (e.g., a restaurant or a cinema). In our model, a POI has three attributes: identifier, location and content. We use v to represent a POI identifier and l v to denote its corresponding geo-graphical attribute in terms of longitude and latitude coordinates. It should be noted that many different POIs can share the same geo-graphical coordinate. Besides, there may be textual semantic infor-mation associated with a POI, such as the category and tag words. We use the notation W v to denote the set of words describing POI v . Table 1 shows an example.

Definition 2. (User Home Location) Following the recent work of [16], given a user u , we define the user X  X  home location as the place where the user lives, denoted as l u .

Note that, we assume a user X  X  home location is  X  X ermanent X  in our problem. In other words, a home location is a static location instead of a real-time location that is  X  X emporally X  related to him (e.g., the places where he/she is traveling). Due to privacy, user home locations are not always available. For a user whose home location is not explicitly given, we adopt the method developed by [22] which discretizes the world into 25 km by 25 km cells and defines the home location as the average position of check-ins in the cell with most of his/her check-ins.

Definition 3. (Check-in Activity) A user check-in activity is rep-resented by a five tuple ( u, v, l v , W v , t ) that means user u visits POI v at time t .

Definition 4. (User Profile) For each user u , we create a user profile D u , which is a set of check-in activities associated with u . The dataset D used in our model consists of user profiles, i.e., D = { D u : u  X  U } .

Definition 5. (Topic) Given a collection of words W , a topic z is defined as a multinomial distribution over W , i.e.,  X  w  X  W } where each component  X  z,w denotes the probability of topic z generating word w . Generally, a topic is a semantic-coherent soft cluster of words.

Given a dataset D as the union of a collection of user profiles, we aim to provide POI recommendation for both home-town and out-of-town users. We formulate our problem that takes into account both of the two scenarios in a unified fashion as follows.
P ROBLEM 1. (POI Recommendation) Given a check-in activ-ity dataset D and a querying user u q with his/her current location l and time t q (that is, the query is q = ( u q , t q , l q to recommend a list of POIs that u q would be interested in. Given a distance threshold d , the problem becomes an out-of-town rec-ommendation if the distance between the target user X  X  current lo-cation and his/her home location (that is, | l q  X  l u | ) is greater than d . Otherwise, the problem is a home-town recommendation .
Following related studies [10, 8], we set d = 100 km in our work, since a distance around 100 km is the typical radius of human  X  X each X   X  it takes about 1 to 2 hours to drive such a distance.
To mimic users X  check-in behaviors in a process of decision mak-ing, we propose a joint probabilistic generative model JIM to take various factors into account, including content effect, temporal ef-fect, geographical influences and word-of-mouth effect. Figure 1 shows the graphical representation of JIM. We first introduce the notations of our model and list them in Table 2. Figure 1 shows the graphical representation of JIM where N , K and R denote the number of users, topics and regions, respectively. Our input da-ta, i.e., users X  check-in records, is modeled as observed random variables, shown as shaded circles in the figure. The topic and region indexes of check-in records are considered as latent ran-dom variables, which are denoted as z and r . Specifically, JIM consists of two components: Time-aware User Interest Componen-t and Popularity-aware User Mobility Component, which will be described in the following.

Time-Aware User Interest Modeling . Intuitively, a user choos-es a POI at a given time by matching his/her personal interests with the contents of that POI. Inspired by the early work about user in-terest modeling [35, 13, 31], JIM adopts latent semantic topics to characterize users X  interests to overcome the data sparsity. Specif-ically, we infer individual user X  X  interest distribution over a set of topics according to the contents (e.g., tags and categories) of his/her checked-in POIs, denoted as  X  u .

Unfortunately, based on the recent analysis of LBSNs data in [26], about 30% of all POIs are lacking any meaningful textu-al information. To address this problem, we exploit the associ-ation between the contents of checked-in POIs and the check-in time by mining the co-occurrence patterns of user activity contents and the activity time, since the check-in time provides importan-t clues to the contents of POIs. Intuitively, the POIs which are checked-in at the same/similar time by most users are more likely to have same/similar functions and categories. So the introduction of check-in time is helpful to infer the topics of POIs, especially whose contents are not available. Technically, each topic z in our JIM model is not only associated with a multinomial distribution over words  X  z , but also with a continuous distribution over time  X  . This design enables  X  z and  X  z to be mutually influenced and enhanced during the topic discovery process by associating them. Another benefit of this design is that the inferred personal interests are not only semantic-aware, but also time-aware.

To integrate the check-in time information to the topic discovery process, the method of time division is essential. Instead of adopt-ing existing discretization methods to split the time into hourly-based slots [11, 36], we treat time t as continuous real value and normalize the time during a day to a range from 0 to 1, consider-ing that 1) time is intrinsically continuous; 2) discretization of time always begs the question of selecting the proper time interval, and the interval is invariably too small for some periods and too large for others. Following the literature [25], we employ the Beta distri-bution to describe the time distribution of topic z which can behave versatile shape.

In the standard topic models [3], a document (i.e., a bag of word-s) contains a mixture of topics, and each word has a hidden topic label. While this is a reasonable assumption for long documents, for short document W v , it is most likely to be about a single topic since most of POIs belong to a single category. We therefore assign a single topic with the document W v .

Popularity-Aware User Mobility Modeling . The spatial clus-tering phenomenon indicates that users are most likely to visit a number of POIs and these POIs are usually limited to some geo-graphical regions [28]. In this component, the geographical space is divided into R regions. We apply a multinomial distribution  X  over regions to model u  X  X  spatial patterns. Following the litera-tures [19, 18], we assume a Gaussian distribution for each region r , and the location for POI v is characterized by l v  X  N (  X  as follows: where  X  r and  X  r denote the mean vector and covariance matrix.
Popularity can also affect the users X  check-in behaviors to a great extent. Especially, when people travel out of town, especially in a new region, their decision-makings are significantly affected by the word-of-mouth opinions, which can be represented as the populari-ty of the POIs. We use the multinomial distribution  X  r to model the normalized popularity of POIs in a region level, i.e.,  X  r,v the normalized popularity of POI v in region r . The local popular POIs represent the local attractions and potentially provide better user experiences. That is why two POIs with the same semantics can be rated differently in the same region.

Note that, to avoid overfitting, we place a Dirichlet prior [30, 34] over the multinomial distribution  X  u , as parameterized by  X  : where  X (  X  ) is the gamma function. Similarly, priors over  X  and  X  r are imposed with parameters  X  ,  X  , and  X  , respectively. We formally describe the probabilistic generative process of the JIM model in Algorithm 1. Finally, we obtain the joint distribution of the observed and hidden variables as described in Equation 3.
Our goal is to learn parameters that maximize the marginal log-likelihood of the observed random variables v , l v , W v ever, the exact marginalization is intractable due to the coupling be-tween hidden variables. Therefore, we follow the studies [35, 30, 34] to use Markov Chain Monte Carlo method (MCMC) to max-imize the complete data likelihood in Equation 3. Note that we adopt conjugate prior (Dirichlet) for multinomial distributions, and thus we can easily integrate out  X  ,  X  ,  X  and  X  . Due to the space limitation, we omit the derivation details. In this way we facilitate the sampling  X  that is we need not sample  X  ,  X  ,  X  and  X  at all. As for the hyperparameters  X  ,  X  ,  X  and  X  , for simplicity, we take a fix value, i.e.,  X  = 50 /K ,  X  = 50 /R and  X  =  X  = 0 . 01 , following the studies [35, 30, 34].

In the Gibbs sampling procedure, we need to obtain the posterior probability of sampling latent topic z and latent region r for each user check-in record ( u, v, l v , W v , t ) . First, we need to com-pute the conditional probability P ( z | z  X  u,v , r , v , l where z  X  u,v represents topic assignments for all check-in records except the current one. We begin with the joint probability distribu-tion of the latent and observed variables shown in Equation 3, and using the Bayes chain rule, we can obtain the conditional probabil-ity conveniently as: where n u,z is the number of times that latent topic z has been sam-pled from the interest distribution of user u , and n z,w of times that word w is generated from topic z ; the number n  X  with superscript  X  u,v denotes a quantity excluding the current in-stance. It is worth mentioning that our JIM can handle POIs without any content information. In that case, we will remove the last part related with W v in the above sampling formula.

Then, we sample region r according to the following posterior probability: where n u,r is the number of times that region r has been sampled from the spatial activity distribution of user u , and n r,v ber of times that POI v is generated by region r .

After each iteration, we employ the method of moments to up-date the Beta and Gaussian distribution parameters (i.e.,  X  ,  X  and  X  ) according to the assigned latent variables r and z for simplicity and speed. Specifically, parameters  X  r and  X  r are updated as in Equations (6) and (7). where S r denotes the set of POIs assigned with latent region r . The Beta distribution parameters  X  are updated as follows: where t z and s 2 z indicate the sample mean and the sample variance of the timestamps assigned with topic z , respectively.

Inference Framework . After a sufficient number of sampling iterations, the approximated posteriors can be used to estimate pa-rameters by examining the counts of z and r assignments to check-in records. The detailed inference framework is shown in Algorith-m 2. We first initialize the latent geographical regions by a K-means algorithm (Lines 3-4), and then randomly initialize the topic assignments for the check-in records (Lines 5-9). Afterwards, in each iteration, Equations (4, 5) are utilized to update the region and topic assignments for each check-in record ( u, v, l v (Lines 12-17). After each iteration, we update the Gaussian dis-tribution and Beta distribution parameters (Lines 18-19). The it-eration is repeated until convergence (Lines 11-24). In addition, a burn-in process is introduced in the first several hundreds of itera-tions to remove unreliable sampling results (Lines 20-23). We also introduce the sample lag (i.e., the interval between samples after burn-in) to sample only periodically thereafter to avoid correlation-s between samples.

Time Complexity . We analyze the time complexity of the above inference framework as follows. Suppose the process needs I iter-ations to reach convergence. In each iteration, it requires to go through all user check-in records. For each check-in record, it first requires O ( K ) operations to compute the posterior distribution for sampling latent topic, and then needs O ( R ) operations to compute the posterior distribution for sampling latent region. Thus, the w-hole time complexity is O ( I ( K + R ) P u | D u | ) .
Once we have learnt the model parameter set  X   X  = {  X   X  ,  X   X  ,  X   X  ,  X   X  } , given a query user u q with the query time t tion l q , i.e., q = ( u q ,t q ,l q ) , we compute a probability of user u checking-in each POI v , and then select top-k POIs with highest probabilities for the query user. Specifically, the probability of user u q checking-in POI v , given his/her query time t q and location l as well as the learnt model parameters  X   X  , is computed according to Equation 17.
 where P ( v,l v ,W v ,t q | u q ,l q ,  X   X  ) is calculated as follows: where P ( r | l q ,  X   X  ) denotes the probability of user u visiting region r given his/her current location l q , and it is computed as in Equa-tion 19 according to Bayes rule, in which the prior probability of latent region r can be estimated by Equation 20, as follows. where N u denotes the number of check-ins generated by user u . In order to avoid overfilling, we introduce the Dirichlet prior parame-ter  X  to play the role of pseudocount. P ( v,l v ,W v ,t q defined as in Equation 21 where we adopt geometric mean for the probability of topic z generating word set W v , i.e., P ( W Q ated with different POIs may be different.

Based on Equations (18-21), the original Equation 17 can be re-formulated as in Equation 22.
Our proposed recommendation strategy is to first train JIM of-fline and obtain a knowledge model containing necessary insights about users X  interests, mobility patterns and POIs X  properties, and then use the knowledge model to retrieve top-k POIs for the real-time query q . To speed up the process of online recommendation, we propose a ranking framework based on Equation 22, as follows: where S ( q,v ) represents the ranking score of POI v for query q by matching query preference (i.e., W ( q,r ) = P ( l q |  X   X  P ( r ) P ( l v |  X   X  r ,  X   X  r )  X   X  r,v and F ( v,z ) = Q Each region/topic can be seen as an attribute (i.e., a = r or z ), and W ( q,a ) represents the weight of query q on attribute a , and F ( v,a ) represents the score of POI v with respect to attribute a . This ranking framework separates the offline scoring computation from the online scoring computation. Since F ( v,a ) is independent of queries, it can be computed offline. Although the query weight W ( q,a ) is computed online, its main time-consuming components line computation is just a simple combination process. This design enables maximum precomputation for the problem considered, and in turn minimizes the query time.

The straightforward method of generating the top-k POIs need-s to compute the ranking scores for all POIs according to Equa-tion (23) and select top-k ones with highest ranking scores, which is, however, computationally inefficient, especially when the num-ber of POIs or the number of POI attributes becomes large. To improve the online recommendation efficiency based on the obser-vation of query preference sparsity that a query q only prefers a s-mall number of attributes (say 3-5 latent dimensions) and the query weights on most attributes are extremely small, we adopt the TA-based query processing technique for top-k recommendation de-veloped in [35, 29]. Since W ( q,a ) is non-negative, the proposed ranking function in Equation 23 is monotonically increasing given a query q , which meets the requirement of the TA-based query pro-cessing technique. This technology has the nice property of finding top-k results correctly by examining the minimum number of POIs without scanning all ones, which enables the JIM model scalable to large-scale datasets.
In this section, we first describe the settings of experiments and then demonstrate the experimental results.
Our experiments are conducted on two real datasets: Foursquare and Twitter. Their basic statistics are shown in Table 3.
Foursquare . This dataset contains the check-in history of 4,163 users who live in the California, USA. For each user, it contains his/her social networks, check-in POI IDs, location of each check-in POI in terms of latitude and longitude, check-in time and the contents of each check-in POI. Each check-in is stored as user-ID, POI-ID, POI-location, POI-content, check-in time . Each record in
Table 3: Basic statistics of Foursquare and Twitter datasets social networks is stored as user-ID, friend-ID and the total number of social relationship is 32,512. This dataset is publicly available
Twitter . This dataset is based on the publicly available twit-ter dataset [7]. Twitter supports third-party location sharing ser-vices like Foursquare and Gowalla (where users of these services can share their check-ins on Twitter). But the original dataset does not contain the category and tag information about each POI. So, we crawled the content information associated with each POI from Foursquare with the help of its publicly available API 2 . Each check-in record has the same format with the above Foursquare dataset. But, this dataset does not contain user social network.
We first compare our JIM model with the following four state-of-the-art POI recommendation methods.

SVDFeature . SVDFeature [4] is a machine learning toolkit de-signed to solve the feature-based matrix factorization. Based on this toolkit, we build a factorization model incorporating more side information beyond the user-POI matrix, including POI content, POI geographical location, temporal dynamics (i.e., check-in time) and popularity of POI, to compare with our model JIM fairly. The limitation of SVDFeature is that it cannot deal with continuous time and location, thus we adopt the discretization methods developed in [36, 30] to segment them into bins and grid squares.

Time-Aware Collaborative Filtering (TACF) . TACF is the state-of-the-art time-aware POI recommendation method [36], which is a collaborative filtering model integrating temporal effect . Specif-ically, TACF splits time into hour-based slots and models the tem-poral preference of a given user in a time slot according to his/her visited POIs in that time slot. Given a query user u at a specific time t , TACF first finds a group of users sharing similar temporal preferences with u .

UPS-CF . UPS-CF, proposed in [10], is a collaborative recom-mendation framework which is especially designed for out-of-town users. This framework integrates user-based collaborative filtering and social-based collaborative filtering, i.e., recommending POIs to a target user according to the check-in records of both his/her friends and similar users with him/her.

LCA-LDA . LCA-LDA is a location-content-aware recommender model which is developed to support POI recommendation for user-s traveling in new cities [35]. This model takes into account both personal interests and local preferences of each city by exploiting POI co-visiting patterns and contents of POIs. Compared with JIM, it ignores the temporal effect and geographical influence. http://www.public.asu.edu/ hgao16/dataset.html https://developer.foursquare.com/
To further validate the benefits brought by exploiting the tempo-ral effect, content effect, word-of-mouth effect and geographical in-fluence, respectively, we design four baselines. JIM-S1 is the first simplified version of the JIM model where we remove the check-in time information, and the latent variable z only generates the word set W v for each check-in record. JIM-S2 is the second simplified version of the JIM model where we remove the content informa-tion of POIs, and the latent variable z only generates the check-in time. As the third simplified version of JIM, JIM-S3 means our model without considering the word-of-mouth effect. So, the latent variable r only generates the location of POI v . As the last simpli-fied version of JIM, JIM-S4 means our model without considering the geographical influence. So, the latent variable r only generates the ID of POI v , and the popularity-aware user mobility component degenerates into a model-based collaborative filtering method.
Since our JIM is designed for both home-town and out-of-town recommendation, we evaluate the recommendation effectiveness of our model under the two scenarios respectively. Given a user profile in terms of a collection of user activities, we divide the user X  X  activ-ities into a training set and a test set. For the scenario of home-town recommendation, we randomly select 20% of the activity records occurring at the user X  X  home town as test set, and use the remaining activity records as the training set. Similarly, for the scenario of out-of-town recommendation, we randomly select 20% of the ac-tivity records generated by the user when he/she travels out of town as the test set, and use the remaining activity records as training set. To decide whether an activity record occurs at home town or out of town, we measure the distance between the user X  X  home lo-cation and the POI (i.e., | l u  X  l v | ). If the distance is greater than the threshold d , then we assume the activity occurs when the user is out-of-town. Besides, to simulate a more real POI recommenda-tion scenario, we have to choose a location coordinate as the target user X  X  current standing position before visiting v . Specifically, for each test case ( u, v, l v , W v , t ) , we use a Gaussian function to generate a coordinate l within the circle of radius d centered at l to represent the current standing point of user u . Thus, a query q = ( u, l, t ) is formed for the test case.

According to the above dividing strategies, we split the user ac-tivity dataset D into the training set D train and the test set D To evaluate the recommendation methods, we adopt the evaluation methodology and measurement Accuracy@ k proposed in [10, 35, 33, 32]. Specifically, for each activity record ( u, v, l D test as well as its associated query q : First, we compute the rank-ing score for POI v and all other POIs which are within the circle of radius d centered at l v and unvisited by u previously. Second, we form a ranked list by ordering all of these POIs according to their ranking scores. Let p denote the position of the POI v within this list. The best result corresponds to the case where v precedes all the unvisited POIs (that is, p = 1 ). Third, we form a top-k rec-ommendation list by picking the k top ranked POIs from the list. If p  X  k , we have a hit (i.e., the ground truth v is recommended to the user). Otherwise, we have a miss.

The computation of Accuracy@ k proceeds as follows. We de-fine hit@ k for a single test case as either the value 1, if the ground truth POI v appears in the top-k results, or the value 0 , if otherwise. The overall Accuracy@ k is defined by averaging over all test cases: where # hit @ k denotes the number of hits in the test set, and | D is the number of all test cases. The results have been validated by means of a standard 5-fold cross validation.
In this part, we present the effectiveness of the recommendation methods with well-tuned parameters. Figures 2 and 3 report the performance of the recommendation methods on the Foursquare and Twitter datasets, respectively. We only show the performance where k is set to 1, 5, 10, 15, 20, as a greater value of k is usually ignored for a typical top-k recommendation task.

Out-of-Town Recommendation On Foursquare . Figure 2(a) presents the recommendation accuracy in the scenario of out-of-town recommendation, where the accuracy of JIM is about 0 . 12 when k = 10 , and 0 . 15 when k = 20 (i.e., the model has a prob-ability of 12% of placing an appealing POI in the top-10 and 15% of placing it in the top-20). Clearly, our proposed JIM model out-performs other competitor models significantly, and the advantages of JIM over other competitor methods are very obvious in this s-cenario. Several observations are made from the results: 1) TACF and UPS-CF drop behind JIM, SVDFeature and LCA-LDA, show-ing the advantages of latent class models incorporating the contents of checked-in POIs. This is because users have few check-in ac-tivity records in out-of-town regions (e.g., cities), thus TACF and UPS-CF suffer from the severe data sparsity in this scenario while JIM, SVDFeature and LCA-LDA are latent class models and in-tegrate content information of POIs, which can alleviate the data sparsity problem to a great extent. 2) UPS-CF performs better than TACF, showing the benefits brought by exploiting social influence. The check-in records left by social friends can help alleviate the issue of data sparsity in the out-of-town scenario to a small extent, since we sometimes travel out of town to visit our friends. 3) JIM and SVDFeature perform better than LCA-LDA. This is because LCA-LDA ignores both temporal effect and geographical influence compared with JIM and SVDFeature. 4) JIM achieves much high-er recommendation accuracy than SVDFeature although they use the same types of features and information, showing the advantage of probabilistic generative models over feature-based matrix fac-torization. This may be because some important information is lost when discretizing time and geographical location information.
Home-Town Recommendation On Foursquare . In Figure 2(b), we report the performance of all recommendation models for the home-town scenario. From the results, we observe that the recom-mendation accuracies of all methods are higher in Figure 2(b) than that in Figure 2(a). Besides, LCA-LDA outperforms TACF in Fig-ure 2(a) while TACF slightly exceeds LCA-LDA in Figure 2(b) due to its incorporation of temporal effect, showing that time-aware col-laborative filtering method better suits the setting where the user-POI matrix is not sparse, and the model-based method which inte-grates content information of POIs is more capable of overcoming the difficulty of data sparsity in the out-of-town scenario. Anoth-er observation is that the performance gap between our JIM model and other competitor methods is smaller than that in Figure 2(a), showing that the performance differences among recommendation methods become less obvious when the issue of data sparsity is not serious. The comparison between Figure 2(a) and Figure 2(b) al-so reveals that the two recommendation scenarios are intrinsically different, and should be separately evaluated.

Recommendation on Twitter . Figure 3 reports the performance of the recommendation models on the Twitter dataset. We do not compare our model with UPS-CF since this dataset does not con-tain user social network information. From the figure, we can see that the trend of comparison result is similar to that presented in Figure 2, and the main difference is that all recommendation meth-ods achieve lower accuracy. This may be because users in the Foursquare dataset have more check-in records than users in the Twitter dataset on average, which enables the models to capture users X  interests more accurately.
To explore the benefits of integrating the temporal effect, con-tent effect, word-of-mouth effect and geographical influence into JIM model, respectively, we compare our JIM model with four baselines, JIM-S1, JIM-S2, JIM-S3 and JIM-S4. The comparison results are shown in Tables 4 and 5. From the results, we first ob-serve that JIM consistently outperforms the four baselines in both out-of-town recommendation scenario and home-town recommen-dation scenario, indicating that JIM benefits from simultaneously considering the four factors in a joint way. Second, we find that the contribution of each factor to improving recommendation ac-curacy is different. Besides, another observation is that the contri-butions of the same factor are different in the two different recom-mendation scenarios. Specifically, according to the importance of Table 4: Recommendation Accuracy on Foursquare Dataset.
 the four factors in the out-of-town recommendation scenario, they can be ranked as follows: Content Effect &gt; Word-of-Mouth Effect &gt; Temporal Effect &gt; Geographical Influence, while in the home-town recommendation scenario they can be ranked as: Temporal Effect &gt; Geographical Influence &gt; Word-of-Mouth Effect &gt; Con-tent Effect. Obviously, the content information plays a dominant role in overcoming the issue of data sparsity of out-of-town rec-ommendation scenario, while the temporal effect is most important to improve home-town recommendation. This is because the two recommendation scenarios have different characteristics: 1) most of users have enough check-in records in their home towns while few check-in activities are left in out-of-town regions; 2) the limi-tation of travel distance in the out-of-town scenario does not matter as much as that in home town; and 3) users X  daily routines may change when they travel out of town.
Tuning model parameters, such as the number of topics (i.e., K ), the number of regions (i.e., R ), is critical to the performance of JIM model. We therefore study the impact of model parameters on Foursquare dataset in this section.

As for the hyperparameters  X  ,  X  ,  X  and  X  , following recen-t works [23, 35], we empirically set fixed values (i.e.,  X  = 50 /K ,  X  = 50 /R ,  X  =  X  = 0 . 01 ). We try different setups and find that the performance of JIM model is not sensitive to these hyperpa-rameters, but the performance of JIM is sensitive to the number of topics and regions. Thus, we test the performance of JIM model by varying the number of topics and regions, and present the results in Tables 6 and 7. From the results, we observe that the recommenda-tion accuracy of JIM first increases with the increasing number of topics, and then it does not change significantly when the number of topics is larger than 50 . Similar observation is made for increas-ing the number of regions (i.e., R ): the recommendation accuracy of JIM increases with the increasing number of regions, and then it does not change much when the number of regions is larger than 50 . The reason is that K and R represent the model complexity. Thus, when K and R are too small, the model has limited ability to describe the data. On the other hand, when K and R exceed a threshold, the model is complex enough to handle the data. At this point, it is less helpful to improve the model performance by increasing K and R . It should be noted that the performance re-ported in Figure 2 is achieved with 50 latent topics (i.e., K = 50 ) and 50 latent regions (i.e., R = 50 ). Similar observations are also made on the Twitter dataset, and the optimal experimental result-s presented in Figure 3 are obtained with the parameter settings K = 50 and R = 70 .
This experiment is to evaluate the online recommendation ef-ficiency. For the online recommendation of JIM, we adopt two methods. The first one is called JIM-TA which adopts the TA-based query processing technique [35] to produce online recom-mendation. The second is called JIM-BF which uses a naive brute-force algorithm to produce top-k recommendations by linear scan. As the feature-based matrix factorization model SVDFeature can be seamlessly integrated with the Metric Tree-based retrieval algo-rithm proposed in [14], we compare JIM-TA with it (SVDFeature-MT). The number of latent factors is set 120 (i.e., K = 50 and R = 70) for both SVDFeature and JIM. Note that the ranking func-tion in SVDFeature is not monotonic, hence, the TA-based query processing technique cannot be applied to it. All the online recom-mendation algorithms were implemented in Java (JDK 1.6) and run on a Linux Server with 128G RAM.

Table 8 presents the average online efficiency of three different methods over all queries created for D test on the Twitter dataset. We show the performance where k is set to 1 , 5 , 10 , 15 and 20 . For example, on average JIM-TA finds the top-10 recommendations from about 62,000 POIs in 29.67 ms. From the results, we ob-serve that 1) JIM-TA outperforms JIM-BF significantly, justifying the benefits brought by the TA-based query processing technique, and it only needs to access around 16% of all the POIs on average for top-10 recommendations since it takes full advantage of sparsity in query preferences; 2) the time cost of JIM-TA increases with the increasing number of recommendations (i.e., k ), but it is still much lower than that of JIM-BF in the recommendation task even when k = 20 ; and 3) the time cost of SVDFeature-MT is higher than that of the naive linear scan method in our task, although Koenig-stein et al. [14] reported the good performance of the Metric Tree in the setting with 50 latent factors where it achieved about 1.7 times faster than the linear scan method for k = 10 . This result shows that the Metric-Tree cannot still overcome the curse of dimension-ality when the objects (e.g., POIs) have hundreds of dimensionality or attributes.

Table 8: Recommendation Efficiency on Twitter Dataset.
POI recommendation, also called location or place recommenda-tion, has been considered as an essential task in the domain of rec-ommender systems [2]. Recently, with the development of location-based social networks, it is easy for users to check-in at POIs in the physical world, resulting in easy access of large-scale check-in records [9]. Based on the LBSNs data, many recent work has tried to improve POI recommendation by exploiting and integrat-ing geographical and social influence, temporal effect and content information of POIs.

Geo-Social Influence . Many recent studies [7, 10, 28, 8, 37, 21, 39, 40] showed that there is a strong correlation between us-er check-in activities and geographical distance as well as social connections, so most of current POI recommendation work mainly focuses on leveraging the geographical and social influences to im-prove recommendation accuracy. For example, Ye et al. [28] delved into POI recommendation by investigating the geographical influ-ences among locations and proposed a system that combines user preferences, social influence and geographical influence. Cheng et al. [5] investigated the geographical influence through combin-ing a multi-center Gaussian model, matrix factorization and social influence together for location recommendation. Lian et al. [17] incorporated spatial clustering phenomenon resulted by geograph-ical influence into a weighted matrix factorization framework to deal with the challenge from matrix sparsity. However, all of them do not consider the current location of the user. Thus, no matter whether the user is located in the home town or traveling out of town, they will recommend the same POIs to the user. In light of this, Ference et al. [10] designed a collaborative recommendation framework which not only investigates the roles of friends and sim-ilar users in POI recommendation, but also considers the current location of the user.

Temporal Effect . The temporal effect of user check-in activi-ties in LBSNs has also attracted much attention from researchers. POI recommendation with temporal effect mainly leverage tempo-ral cyclic patterns and temporal chronological patterns on LBSNs. Gao et al. [11] investigated the temporal cyclic patterns of user check-ins in terms of temporal non-uniformness and temporal con-secutiveness. Yuan et al. [36] also incorporated the temporal cyclic information into a user-based collaborative filtering framework for time-aware POI recommendation. Cheng et al. [6] introduced the task of successive personalized POI recommendation in LBSNs by embedding the temporal chronological patterns.

Content Information . Most recently, researchers explored the content information of POIs to alleviate the problem of data spar-sity. Hu et al. [13] proposed a spatial topic model for POI rec-ommendation considering both spatial aspect and textual aspect of user posts from Twitter. Liu et al. [20] studied the effect of POI-associated tags for POI recommendation with an aggregated LDA and matrix factorization method. Yin et al. [35, 24] exploited both personal interests and local preferences based on the contents as-sociated with spatial items. Gao et al. [12] and Zhao et al. [38] studied both POI-associated contents and user sentiment informa-tion (e.g., user comments) into POI recommendation and reported their good performance. However, all of them do not consider the time information associated with the contents of POIs.
 As described above, while there are many studies to improve the POI recommendation by exploiting geographical-social influence, temporal effect and content information, they lack an integrated analysis of their joint effect to alleviate the issue of data sparsity, especially in out-of-town recommendation scenario. Most of the above work assumed that users are in home town, thus they ignored that users X  interests can vary drastically at different regions (e.g., c-ities), failing to deal with user interest drift. Our proposed method strategically takes all these factors into consideration and presents a flexible probabilistic generative model for both home-town rec-ommendation and out-of-town recommendation. To deal with the drift of user interests, our method considers the current location of the user and exploits the local word-of-mouth effect. Moreover, we are the first to study the importance of each mentioned factor to overcome the data sparsity in both home-town and out-of-town recommendation scenarios under a unified framework. In this paper, we proposed a joint probabilistic generative model JIM to model users X  check-in behaviors in LBSNs, which strate-gically integrates the factors of temporal effect, content effect, ge-ographical influence and word-of-mouth effect to effectively over-come the issues of data sparsity and user interest drift across ge-ographical regions, especially when users travel out of town. To demonstrate the applicability and flexibility of JIM, we investigat-ed how it supports two recommendation scenarios in a unified way, home-town recommendation and out-of-town recommendation . We conducted extensive experiments to evaluate the performance of our JIM model in terms of both effectiveness and efficiency. The re-sults showed superiority of JIM model over other competitor meth-ods. Besides, we studied the importance of each factor in improv-ing both home-town and out-of-town recommendation under the same framework, and found that the content information plays a dominant role in overcoming the data sparsity in out-of-town rec-ommendation scenario, while the temporal effect is most important to improve home-town recommendation. The work described in this paper is partially supported by ARC Discovery Project (DP140103171). It is also partially supported by National Basic Research Program of China (2013CB329305), Na-tional Natural Science Foundation of China (Grant No. 61272155, 61232006, 61303164, 61402447), 973 program of China (Grant No. 2014CB340405), Beijing Natural Science Foundation (Grant No. 9144037) and the Scientific Research Foundation for the Re-turned Overseas Chinese Scholars, State Education Ministry.
