 In this paper, we present a method for boosting collaborative filter-ing by integrating spatial information about geo-referenced items (e.g., photos). In particular, we developed a method to estimate missing ratings by propagating an item X  X  neighbor X  X  ratings based on the similarity of geospatial information. An empirical evaluation shows that geospatial information significantly improves recom-mendation results, and its contribution grows with the ratings data X  X  level of sparseness. We illustrate the usefulness of the method for a photo recommendation task using data obtained from two pop-ular photo-sharing web-sites: Flickr and Panoramio. A compar-ison with state-of-the-art methods indicates the superiority of the proposed method, implying that geospatial information should be considered, when available.
 H.3.3 [ Information Systems ]: Information Search and Retrieval Algorithms; Modeling; Optimization Context-aware recommender systems; Collaborative filtering
Collaborative filtering (CF) -based recommender systems are very popular due to their simplicity and their excellent predictive perfor-mance. However, these systems may not be quite as effective if the rating matrix is sparse. Therefore, various methods have been de-veloped to alleviate this sparseness problem (see for example [10]).
The basic idea presented in this paper is to utilize available ge-ographic information, which is attached to the items, to enrich the rating matrix and convert it into a dense matrix. While geo-location data are frequently used for building context-aware recommender systems [2], these systems aim to match the item to the user X  X  cur-rent physical location. Here, we focus on a scenario where items from certain locations are of interest to the user, regardless of the user X  X  current location. One motivating example is photo recom-mendation. In this case, the items are photos taken by other users. We assume that if a user likes a photo taken in a specific location, s/he will probably like other photos taken in locations close-by. An-other example is news recommendations: readers may be interested in news from specific locations such as conflict areas.

Our approach is based on the assumption that a user X  X  interest in a specific item is partially based on its geo-location. Thus, we first identify items that lie in the same spatial area and those that are rated by users with similar interests. Then, we propagate rat-ings between the items that belong to the same geo-interest group. Specifically, the actual ratings of frequently rated items are prop-agated to items that are sparsely rated in an attempt to create arti-ficial ratings for them. Finally, given the enriched matrix, we can employ the CF method on the dense matrix in order to induce the improved model. Note that genuine ratings should be trusted more than propagated ratings.

These geo-interest groups cannot be detected using the general methods proposed in works dealing with ratings clustering [9], be-cause of the arbitrary shape that objects can form in space. More-over, different geo-interest groups can be located in the same area and have to be distinguished.

The idea of exploiting geographic information in recommenda-tions is not new. User geographic location is widely used to gen-erate a more relevant result when the user is moving in a mobile environment. The term location-based recommendation is used in the literature to classify this kind of work. Bae-Hee et al. [4] ex-ploit the user X  X  current GPS position to introduce a location context in addition to the personal and the environmental context in the generation of the final recommendation. Horozov et al. [2] reduce the number of possible recommendation candidates using a circular buffer around the present position of the user. Matyas and Schlieder [6] offer an approach for handling users X  individual differences by identifying less popular geographic objects that are nevertheless of interest to a specific user. Their approach is based on user-based collaborative filtering in conjunction with geographical partonomy information. Most recently, [5] took a geospatial approach for de-termining location-based preferences. They proposed capturing the geographic context of user preferences for items using a relational graph, deriving different algorithms for calculating user similarity.
It should be clarified that our work is not a context-aware recom-mender system, because it neither aims to match the user X  X  current location user to the item nor tries to recommend places. Instead, this work uses geographic information attached to the items in an attempt to enrich the rating matrix and improve recommendations.
Currently, no studies exist that tried to alleviate the sparsity prob-lem by using spatial information to enrich the ratings matrix and make it denser. The goal of this research is to provide a method to boost the performance of CF in the case of sparse data using available spatial metadata regarding the items. The contributions are threefold: 1. A method to enrich the sparse rating matrix using geograph-2. Adjusting Nearest Neighbors Collaboration Filtering (NN CF) 3. The proposed method is evaluated on two real-world datasets;
While the proposed method can be embedded in any CF-based recommender system, for the sake of clarity, we illustrate our method on the following popular settings: user-to-user NN CF. The main steps of this setting are: 1) Calculating the user-to-user similarity matrix; and 2) recommending items based on the items rated by the top nearest users. Recall that in our approach we enrich the rating matrix by propagating the ratings (Step 1 below). Then, together with the genuine ratings, we calculate the user-to-user similarity matrix (Step 2 below).
We present three geo-propagation methods. In the first, most simple method, the propagation is performed within the ratings of the same user based on the geographical distance between items. In our locations clustering-based propagation method, we first clus-ter the items into spatial groups and then inter-propagate ratings among the items that belong to the same spatial group. In the last method  X  the locations-users based propagation -we try to detect geo-interest groups by considering both the location and the users X  rating patterns. This permitted us to obtain a more fine-grained clustering of the same geographical area based on users X  ratings.
Method 1: Direct use of location The provided ratings of items are propagated to closely located items. Specifically, we assign a pair of values to each entry in the user-item matrix. The first value is V ui ( V  X  0) , which represents the mean propagated rating. The second value, W ui (0  X  W  X  1) , refers to the total propagated weights. The values of V ui and W ui are calculated using following equation:
V where R u ( R  X  0) is the set of items rated by user u and R indicates the rating of user u to item i . dist ( i,j ) is the geograph-ical distance between items i and j (in our case, we calculated the Euclidean distance based on the GPS latitude and longitude coor-dinates).  X  (  X  &gt; 0) is the propagation parameter, which represents the importance of the original rating provided by the user u for item i . A high value of  X  indicates that V ui is determined mainly by the original rating provided by the user.

We determine the value of  X  through a trial-and-error process and tune its value to the database in hand. More specifically, we started with the value of zero and increased the value while monitoring the recommendation performance. We observed that setting  X  to low values provides the best results in terms of recommendation precision. We decided that the propagation weight (strength) will be inversely proportional to the square of the distances between the items X  locations in order to emphasize closer items.

Method 2: Locations clustering based propagation: In the previous method, we assumed that propagation can be originated from any item, even from items located far from the target item (toward which the propagation is performed). Moreover, in the previous method, propagation is also performed for target items located in areas that the user has never rated. In the location clus-tering method, we limit the propagation by first clustering the items based on their location, and then, perform propagation only within the clusters. We do not attempt to enrich items that are located in clusters that were not rated by the user.

For example, pictures taken close to Piazza di Spagna in Rome are interesting because of the historical and architectural sites lo-cated in neighboring areas. Therefore, we assume that if users like/dislike an item attributed to this area, they might like/dislike other items located nearby. After grouping items into the same clusters, propagation is performed on them. We use the spatial clus-tering algorithm DBSCAN [1] to cluster the items based solely on their density in the geographical space. DBSCAN it can find ar-bitrarily shaped clusters and discard isolated items as noise. After cluster detection, the propagating ratings calculation is calculated using Eq. 1 and 2; however, the calculation is performed over the set of clusters to which user u rated items belong, using the set of items that belong to the same cluster as item i .

Method 3: Locations-users based propagation: The previ-ous method clustered items based solely on their location, while ignoring the users X  ratings. This may lead to large clusters that in-clude different types of items, some of which the user likes and others s/he dislikes. To demonstrate the problem, recall the Piazza di Spagna in Rome example whose neighborhoods include both historical and architectural sites and also places of leisure, such as shops and cafes. Clearly, some people are more interested in cul-tural sites than leisure sites and vice versa. Thus, to detect these groups, both spatial and user preferences have to be considered in the cluster-detecting process. After detecting spatial-users clusters, we perform propagation for the items belonging to the same clus-ters. For each spatial cluster found, we perform the following pro-cedure: 1. Represent each item as a vector of all users X  ratings in the 2. Blur rating values across the vectors using a Gaussian filter 3. Run the GDBSCAN [7] algorithm, which generalizes clus-
We fitted the clustering algorithm parameters heuristically. The parameters Eps and MinPoints should be set to low values for denser spatial distribution of the items. The WCard value was tuned between 0 to 1 by maximizing the recommendation perfor-mance.
We used an enriched ratings matrix to calculate user-user simi-larity and find the nearest neighbors. For each pair of users ( u,s ) , we calculated similarity according to the modified Tanimoto simi-larity function:
We evaluated our methods on two recommendation tasks of geo-referenced items: pictures and points of interest. In the first step, we compared our base direct propagation (DP_CF) to the base-line user-user NN CF and the modern state-of-the-art method of recommending items with geo-referenced items X  relational neigh-bors [5]. We used two weighting schemes examined by Marinho  X  the two layer similarity notated as RN_TL (see [6]) and the CF. In the second step, we compared different propagation approaches  X  the direct propagation (DP_CF), locations clustering propagation (LP_CF), and locations-users propagation (LUCP_CF).

Our initial datasets were very sparse ( &gt; 99.99%); thus, so that we could check our hypothesis along different sparsity levels starting from base relatively low sparsity, we selected users who fit the low sparsity profile that was increased by randomly removing parts of the ratings in the training set for each user, by increasing the ratio to achieve a higher actual sparsity. It should be noted that usu-ally in commercial systems sparsity levels tend to be much greater than 95% [8]. The validity of the hypothesis was checked in an off-line evaluation using a repeated random sub-sampling valida-tion. In each of the ten iterations and for each sparsity level, we randomly selected 30% of the users as the test set. Then, since we did not have user transaction times for each user in the test set, we randomly selected 70% of their ratings for training and 30% for testing. To check the significance of our results, we used the Fried-man test (  X  =0.05), and rank sums-based procedure, post-hoc test, for determining the homogeneous subsets (  X  =0.05).
Flickr is an image and video hosting website, where comments are posted about shared pictures, which provide valuable informa-tion for estimating users X  interest in the pictures and their opin-ions about them. We use a text sentiment analysis algorithm [3] to calculate ratings from sentiment and opinion values refined from bloggers X  comments. Each blogger can express his opinion about a particular picture several times resulting in several opinions and sentiment values for one user. We assume that the number of a user X  X  comments about a picture reflects the strength of his opinion about it; thus, the more comments written by the user, the stronger his/her sentiment and opinion expression. Using the above assump-tion, we calculate a user X  X  rating value for the picture.
We checked our hypothesis for sparsity levels 92%, 95.1%, 99.1% (representing lowest available, middle range, and the highest spar-sity), for recall, R-Precision (precision at R, where R is the number of relevant items), and MAP. For all of the metrics and sparsity levels we checked (except R-Precision at 95.1%), we were able to reject the null-hypothesis that there is no difference between the al-gorithm X  X  performance, using the Friedman test ( p &lt; 0 . 001 ). This indicates that the superiority of our algorithm is statistically signif-icant.

Fig. 1 presents the recall performance for the compared algo-rithms along the increasing sparsity levels. We got three homoge-neous groups, {DP_CF}, {RN_TL, RN_CF}, and {U_CF} for all sparsity levels. Fig. 1 also presents the R-Precision for the com-pared algorithms along the increasing sparsity levels. At the lowest (92%) level of sparsity, there is no single significant leader; both state-of-the-art approaches RN_TL and collaborative filtering are based on direct ratings propagation (DP_CF), and belong to the same leader homogeneous group as detected by post-hoc tests. The average value of both R-Precision and MAP over the experiments is higher for the RN_TL approach. At a high 95.1% of sparsity, all the algorithms have no significant difference and belong to the same group. At the highest sparsity level of 99%, it can be seen that DP_CF gains a significant advantage over other approaches.
For calculating locations clusters to be used in the LCP_CF method, we used the DBSCAN algorithm with Eps=10 and MinPoints = 4. For detecting user-item clusters to be used in the LUCP_CF method, we used the GDBSCAN algorithm with Eps=3, MinSim=0.6, MinWCard=0.7 and  X  =1 for blurring the data.
On the Panoramio web-site, many photos illustrate places. This permits the assumption that if a user takes a picture in a specific location, then s/he has some interest in that location. Since the physical POI can be represented by many photos taken by different users in close locations but still in different geographic coordinates, we adopted the same approach as in the compared state-of-the-art approaches, where the authors used geographic clusters to represent POI X  X . Therefore, instead of recommending individual coordinates represented by photos, we recommended regions where users may be interested in taking photos. Since each user can upload several photos for a single POI, we had to find a way to deal with several users X  transactions for one item. In the Panoramio dataset, when a user X  X  transaction is not accompanied by an explicit rating, we assume that the uploading of the photo expresses the users X  positive opinion on the item and represent this fact with initial rating of 1. Moreover, we assume that the users X  positive opinion is stronger when more images are in a particular POI.

We checked our hypothesis for chosen sparsity levels 95%, 96.9%, 99.3% (representing lowest available, middle range and the high-est sparsity), for recall, R-Precision and MAP. The observations are analogous to the results observed for pictures recommendation. In all cases, we were able to reject the null-hypothesis that all al-gorithms perform the same, using the Friedman test (p &lt; 0.001). Fig. 2. presents the recall performance for the compared algo-rithms along the increasing sparsity levels. We have three homo-geneous groups, {DP_CF}, {RN_TL, RN_CF}, {U_CF}, for all sparsity levels. The leading group is the direct propagation ap-proach (DP_CF), obtaining full available recall at all levels, which is explained by recommending based on a 100% populated items-ratings matrix. The relational neighbors approach group (RN_CF, RN_TL), provided better results than the base line unpropagated U_CF, with a quite constant gap along the sparsity levels; the recall of both declined drastically at the highest sparsity. It can be noted that RN_CF and RN_TL obtained exactly the same recall levels.
Fig. 2. also presents the R-Precision for the compared algo-rithms along the increasing sparsity levels. At the lowest (95.0%) level of sparsity, the significant leader is the relational neighbors two layer similarity approach (RN_TL), standing in a separate group, while after increasing sparsity to 96.9% we get quite another pic-ture  X  the state-of-the-art RN_TL approach and the propagated CF (DP_CF) both stand in the homogeneous leader group, with no sig-nificant differences. At the highest sparsity level of 99.3%, the propagated CF (DP_CF) gets the significant advantage at R-Precision and MAP over other approaches, while all the other algorithms drastically plunge to zero levels. For calculating locations clusters to be used in the LCP_CF method, we used the DBSCAN algorithm with Eps=30 and MinPoints = 4. For detecting user-item clusters to be used in the LUCP_CF method, we used the GDBSCAN al-gorithm with our custom predicates with Eps = 5, MinSim = 0.7, MinWCard = 0.8. For blurring items vectors in the LUCP_CF al-gorithm, we used  X  =1. In this study, we explored the possibility of boosting the collab-orative filtering performance in the case of sparse data in the do-main of recommending geo-tagged items by integrating spatial in-formation known about the items. We evaluated the performance of our methods in comparison with the latest state-of-the-art ap-proaches for recommending geo-tagged items, and showed signif-icant advantages of our methods in the case of sparse data, which is the situation in most scenarios. We found that the advantage of our method becomes more significant with the growth of spar-sity. We also proposed and evaluated more enhanced propagation approaches intended to improve the precision at lower sparsity lev-els, but did not get a significant improvement in evaluated datasets over our initially proposed approach. The enhanced approaches of propagation can be valuable in other data scenarios or when more information is available in the ratings matrix. However, since our study was initially oriented to deal with the sparsity problem, we would recommend using our base approach instead. [1] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu. A [2] T. Horozov, N. Narasimhan, and V. Vasudevan. Using [3] S. Kisilevich, C. Rohrdantz, and D. Keim.  X Sbeautiful picture [4] B.-H. Lee, H.-N. Kim, J.-G. Jung, and G.-S. Jo.
 [5] L. B. Marinho, T. Sandholm, C. de Souza Baptista, I. Nunes, [6] C. Matyas and C. Schlieder. A spatial user similarity [7] J. Sander, M. Ester, H.-P. Kriegel, and X. Xu. Density-based [8] B. Shapira, L. Rokach, and S. Freilikhman. Facebook single [9] A. Shepitsen, J. Gemmell, B. Mobasher, and R. Burke. [10] H. Yildirim and M. S. Krishnamoorthy. A random walk
