 Source code retrieval is an important task in order to maintain the quality of software in the development cycle. Duplicated code complicates this activity and leads to high-more code will need to be tested. Many developers put significant effort into finding find efficiently the code segments that we want. 
Various techniques have been proposed to collect similar source codes. These techniques can be classified into four categories:  X  Text-based comparison proach is to identify source-code fragments using similar identifiers [3].  X  Token comparison ues, code fragments that are different on ly in parameter naming can be detected.  X  Metrics comparison This approach characterizes code fragments using some metrics, and compares these metric vectors instead of directly comparing the code [4].  X  Structure-based comparison trees or dependency graphs. Baxter et al. [1] propose a method using abstract syntax propose a multi-language source code retrieval system using the structural content of the source code and the semantic one. Their approach is focused on detecting plagiar-ism in source code between programs written in different programming languages, such as C, C++, Java, and C#. 
Our approach is the structure-based comparison that takes a sequence of statements information is an input to the vector space model and a proposed source code retrieval retrieval. 
The rest of this paper is organized as follows. In Section 2, we present architecture trieval model and results of code retrieval. Section 6 concludes the paper. thod identifiers from every method of a class in Java. Then, these extracted structures retrieval tool, which are written in Visual Basic language. Finally, the outputs of those modules are fed into a source code viewer. 
The vector space retrieval tool retrieves a set of similar methods by assigning con-trol statements and method identifiers to a document vector, and then computing the Details are discussed in Section 4. replacing each element of the given sequence with a wildcard. In case, the sequence thods. Details are discussed in Section 5. 3.1 Framework and Struts 2 A framework automates common tasks, and thereby providing a user platform that simplifies web development. The Struts 2 framework [7] implements the model-view-controller (MVC) design pattern. 
We estimated the volume of the source codes using file metrics. Struts 2.3.1.1 Core for the number of lines, Struts 2.3.1.1 Core is a middle scale application in industry. 
We can estimate the volume of the source codes using file metrics. Typical file me-trics used are as follows: Number of Java Files ----368 Number of Classes ----414 Number of Methods ----2,667 Number of Code Lines ----21,543 Number of Comment Lines ----17,954 Number of Total Lines ----46,100 The number of Java files are 368, which differs from the number of declared classes 414 because some java files include definitions of inner classes and anonymous classes. 3.2 Extracted Control Statements and Method Identifiers Fig. 2 shows the extracted structures of the evaluateClientSideJsEnablement() method in Form.java file in org.apache.struts2.components package. Three numbers preceded depth of nesting of the control statements, they supply enough information for retriev-ing methods using a substructure of source codes. 4.1 Structural Metrics as Vector Components The vector space model [6] is an algebraic model for representing text documents as represented as a vector of term weights: term. A user query can be similarly converted into a vector q : The similarity between document d j and query q can be computed as the cosine of the angle between the two vectors d j and q in the N -dimensional space: 4.2 Results of Code Retrieval by the Vector Space Model The left part of Table 1 shows the top 27 methods obtained by a query vector with the an internal list of Struts 2 Core. It is typically used after checking the existence of a er are a reasonable retrieval condition in the vector space retrieval model. 392 methods are retrieved with the similarity between 0.997 and 0.009 because the 392 methods include at least one if-statement. However, only 21 methods whose No columns are shaded in Table 1 are valid candidate methods in the sense that an add-Parameter method is called after an if-statement. Details are discussed in Section 5. 5.1 Derived Structure Retrieval Model that comprise the document. Similarity of a document and a query is calculated as the model. On the other hand, a program is essentially a sequence of statements. So, the program source codes. S
The essential idea of the derived structure retrieval model is matching on wildcard characters. Given a sequence [S 1  X  S 2  X  ...  X  S n ] and a method structure m, our model [S 1  X  S 2  X  ...  X  S n ], and try to search structure of m that matches the derived sequence. except for the sequence [*  X  *  X  ...  X  *], are evaluated. [S 1  X  *  X  ...  X  S n ], etc. In general, 2 quence including the sequence whose all elements are replaced by wildcards. Because the sequence [*  X  *  X  ...  X  *] matches all substructures, it does not work as a retrieval domain of discourse for retrieval conditions. [S 5.2 Results of Code Retrieval by Derived Structure Retrieval Model the result obtained in Subsection 4.2. The right part of Table 1 shows retrieved me-thods that match sequences [ if  X  addParameter ], [*  X  addParameter ], and [if  X  *]. 
FormButton::void evaluateExtraParams() method is ranked 21 th with similarity 0.913 in the vector space model. The method includes five if -statements, three addPa-rameter identifiers, and one [ if  X  addParameter ] sequence. Because the similarity in the vector space model is computed by the number of statements and/or method iden-ranked in the derived structure retrieval model. 
The similarity of ActionError::void evaluateExtraParams() method is 0.000 in the derived structure retrieval model, whereas it is 0.894 and is ranked 11 th in the vector and zero [ if  X  addParameter ] sequences. 
A program is essentially represented by a sequence of statements. Because the vec-tor space model computes similarity of two document vectors based on a set of terms that comprise the document vectors, it theoretically has a limitation on performance in than the vector space model. provement. Table 2 shows a summary of performance improvement of other expe-riments on source code retrieval. In this paper, we presented an approach that improves source code retrieval using the given sequence, and then performs retrieval using all of the derived conditions. Thus given sequence. available on the Internet. 
