 Being able to express and enforce role-based access con trol on XML data is a critical comp onen t of XML data manage-men t. However, given the semi-structured nature of XML, this is non-trivial, as access con trol can be applied on the values of nodes as well as on the structural relationship be-tween nodes. In this con text, we adopt and extend a graph editing language for specifying role-based access constrain ts in the form of securit y views. A Securit y Annotated Schema (SAS) is prop osed as the internal represen tation for the se-curit y views and can be automatically constructed from the original schema and the securit y view speci cation. To en-force the access constrain ts on user queries, we prop ose Se-cure Query Rewrite (SQR) -a set of rules that can be used to rewrite a user XP ath query on the securit y view into an equiv alen t XQuery expression against the original data, with the guaran tee that the users only see information in the view but not any data that was blo cked. Exp erimen tal evalua-tion demonstrates the eciency and the expressiv eness of our approac h.
 H.2.7 [ Database Administration ]: Securit y Managemen t, Securit y, Performance XML, Access Con trol, Securit y View, Query Rewrite
XML is one of the most extensiv ely used data represen-tation and data exc hange formats. Muc h of the researc h on XML has focused on dev eloping ecien t mec hanisms to store, query and manage XML data either as a part of a relational database or using nativ e XML stores. However, hiding sensitiv e data is as imp ortan t as making the data ef-cien tly available, as has been emphasized and studied for decades in relational databases.
Consider the problem of dev eloping and conducting tests through a Course Managemen t System suc h as Oncourse 1 . Online tests and quizzes are stored in XML in Oncourse using the IMS-QTI schema 2 . A highly simpli ed version of this structure is sho wn in Figure 1. Figure 1: Simpli ed Tree Structure for an Online Quiz
Example 1.1. Sever al access constr aints can be envisione d in the online quiz applic ation. An author (instructor) should have access to all elements of quizzes he/she writes (ful l ac-cess). A student should only have access to curr ent quizzes in courses that he/she is register ed for, but not have access to the solutions (conditional and unc onditional removal). Mor eover, instructors other than the authors should have access to the questions as wel l as to the solutions, but po-tential ly without the course-sp eci c structuring (conditional and unc onditional restructuring). Final ly, for summarizing purp oses, a statistician may have access to all the solutions. But even for some one who may have permission as both a student and as a statistician, he/she should not be able to gur e out the solution to each individual question (removal of asso ciation). If materialize d views are used to implement the above role-b ased security policy for the student view, the view gener ated would be as shown in Figur e 1(b).
All the securit y constrain ts in Example 1.1 are not uncom-mon, yet, none of the existing techniques supp ort them with-out actually generating or materializing the \views". How-ever, given that the data may constan tly change, and that usually there are multiple securit y levels in a system with eac h level con taining multiple securit y views, even incre-men tally main taining the securit y views is sometimes non-realistic in a real-time system. An alternativ e is to main tain only virtual securit y views and enforce the access constrain ts via query rewrites, as prop osed in [1]. However, the securit y view speci cation language needs to be enric hed for DBAs to be able to de ne views similar to those in Example 1.1. Figure 2: The Infrastructure of the Securit y View Based
The infrastructure of our securit y-view based query an-swering system is as sho wn in Figure 2. Taking the origi-nal XML schema and securit y view speci cation sequence in SSX as input, the Securit y View Construction comp o-nen t (on the left) constructs a Securit y Annotated Schema (SAS). SAS is an internal represen tation in our system. The securit y view schema can be trivially obtained from an SAS and it is the only schema that is made available to the corresp onding user group. In our system the securit y views are not materialized by default. The Secure Query Rewrite comp onen t (on the righ t) rewrites the user queries (in XP ath) into equiv alen t target queries (in XQuery) against the original schema, using the information in the SAS. These rewritten queries are then evaluated against the base data.
Giv en securit y constrain ts suc h as those in Example 1.1 and other similar cases, we introduce our Securit y Speci ca-tion Language for XML (SSX) in the form of a set of graph editing primitiv es. 3 In SSX eac h primitiv e tak es an XML schema tree as input, and outputs an XML schema tree. The parameters and functions of the primitiv es are de ned as follo ws (parameters within square brac kets are optional): create(destSPE, newName) creates a new elemen t delete(destXP ath) remo ves the sub-trees rooted at the copy(sourceXP ath, destSPE, [newName], [scop e], rename(destSPE, newName) assigns a new tag to the
A securit y view speci cation is then written in the form of a sequence of these primitiv es. Eac h primitiv e tak es the result of the subsequence in fron t of it as input. The nal result is the securit y annotated schema (SAS) for the SSX sequence. Figure 3: The Securit y Annotated Schema for the Stu-
To facilitate query answ ering and rewriting, we prop ose an internal represen tation -Securit y Annotated Schema (SAS) in the form of annotations to represen t the schema trans-formation speci ed by a SSX sequence. Annotations are asso ciated with the elemen t node that was mo di ed and re-ects the actual changes performed on the original schema tree structure. SAS introduces the follo wing annotations to re ect the SSX primitiv es that specify the access constrain ts: We introduce algorithms to automatically construct the SAS from the SSX primitiv es. The securit y annotated schema for the studen t view is sho wn in Figure 3 and the securit y view for the same can be trivially deriv ed from the SAS.
Rather than creating and main taining materialized secu-rity views, we choose to rewrite the user queries (in XP ath) to queries (in XQuery) that re ect the securit y constrain ts and are evaluated against the source data.The Secure Query Rewrite pro cess (SQR) is rule-based, and is de ned via a re-cursiv e rewrite function that translates an user XP ath query on the securit y view to an XQuery expression against the original data.

Exp erimen tal evaluations rev eal that our approac h is ef-fectiv e and ecien t. A complete discussion of SSX, SAS and query rewrites(SQR) and the algorithms and rewrite rules are available at [2].
We introduce a framew ork for specifying and represen t-ing complex securit y constrain ts for XML and enforcing the securit y constrain ts during query evaluation, via the query rewrite pro cess. This framew ork is the rst to introduce the capabilit y to specify and enforce complicated securit y policies on both sub-trees and structural relationships in an XML documen t. [1] W. Fan, C.-Y. Chan, and M. Garofalakis. Secure XML [2] S.Mohan, A.Sengupta, Y.W u, and J.Klinginsmith.
