 Large amounts of data often require expensive and time-consuming analysis. Therefore, highly scalable and efficient techniques are necessary to process, analyze and discover useful information. Database sampling has proven to be a powerful method to surpass these limitations. Using only a sample of the original large database brings the benefit of obtaining useful information faster, at the potential expense of lower accuracy. In this paper, we demonstrate VFDS, a novel fast database sampling system that maintains the ref-erential integrity of the data. The system is developed over the open-source database management system, MySQL. We present various scenarios to demonstrate the effectiveness of VFDS in approximate query answering, sample size, and execution time, on both real and synthetic databases. H.2 [ Database Management ]: Miscellaneous Database Sampling, Random, Relational Database.
Nowadays, data is growing at an exponential rate and it becomes a difficult challenge not only to store large vol-umes of data, but most importantly to analyze it. For this purpose, techniques are constantly improved, and optimal solutions are being sought in order to process big volumes of data. However, database sampling applied on the existing original database provides a useful balance between the cost of the analysis to be performed on the original data, and the accuracy of the results determined.

Database sampling has proven to be a useful technique, starting with Olken X  X  major contribution [9], and currently being used in a wide range of application areas in computer science (e.g. data mining [7], software testing [11]). Several closely related sampling techniques are described below: stands in the method for generating at high speed the sam-ple, and in the way it handles diamond patterns, exemplified in Figure 1. Diamond patterns represent a difficult challenge for the sampling process due to potential space overhead. For instance, in Figure 1(c), populating the summit (i.e. the diamond X  X  root), t 5 , from a single child, t 3 , will cause revisiting t 5 after populating its other child t 4 to add missing references. VFDS automatically handles diamond patterns such that the space overhead is minimum. The system is a generic one and can be applied to any relational database, regardless of it containing a diamond pattern. VFDS per-forms between 300 and 1000 times faster than the compared techniques [3]. The high performance of the method makes VFDS a suitable candidate for real-time systems that require to quickly analyze a database. With our demonstration, we intend to give an insight of the system and show its effec-tiveness in real-time, on both synthetic and real databases, from the following perspectives: (1) execution time, (2) sam-ple size, and (3) approximate query answering.
The system proposed implemented the automated random sampling method VFDS [3]. Its objective is to maintain the referential integrity of the sampled data, while speeding up the sampling process. The method receives as input an origi-nal relational database O and a sampling rate  X  . It produces the sample database in a single pass over O , as follows: 1. Selecting a starting table t ? : The method begins with 2. Sampling tuples of t ? : The method randomly selects a pling parameters. These are illustrated in Figure 2. The following inputs are required by the system: (i) the DBMS credentials (i.e. username and password), (ii) the name of the database to be sampled, and (iii) the sample rate when running the sampling process or creating the report. The system extracts the schema of the original database and en-sures the creation of the sample database accordingly. Fur-thermore, the system samples the original database accord-ing to the sampling rate given,  X  . Finally, the user can optionally provide the starting table manually in order to manipulate the sampling process.
 Report The system generates a report containing the fol-lowing information with regards to the metrics described in [3]: (i) execution time, (ii) size errors, and (iii) the query relative error. The system measures both the sampling time (i.e. the time it takes to create the files containing the sam-pled data) and the load time (i.e. the time it takes to load the data from the files in the sample database). The size er-rors are divided in: (i) absolute size error, which computes the difference between the expected and the actual sample size, (ii) the global size error, which is equal to the abso-lute size error relative to the expected sample size, and (iii) the average size error, which reflects the average between the global size error of each table. The query relative error measures the difference between the expected and the actual query result, relative to the expected query result. Other in-formation included in the report are the input parameters (e.g. database name, username). The system generates four queries, Q j , j  X  [1 , 4], as follows: (1) A set of j tables, linked through foreign key constraints, are selected for the query, (2) A random aggregate operator (i.e. avg , min , max , count , sum ) is selected and applied on a random field of the first table, (3) A random field is selected from the last table and is included in the where clause, (4) A random value is chosen for the random field previously selected and included in the where clause. If no query was found for the number of tables required in the join, then  X  1 is displayed for the query rela-tive error (e.g. Q 4 in Fig. 3). The system also allows the user to input its own queries and it will regenerate the report by clicking the Compute button. Moreover, the user can regen-erate new random queries using the Generate button. The report is exemplified in Figure 3, given as input the real database, Financial , and a sampling rate  X  = 0 . 5. We ob-serve that VFDS produces a sample with only 1% absolute, and 1 . 5% global size error. The sample shows higher average size error, 25 . 8% due to the diamond pattern contained in the Financial database which enforces the method to sample one of the tables entirely. Even though the table has only 77 tuples, this highly impacts the average size error metric. The compared techniques are more severely affected by this, with 29 . 3% for LBS, and 57 . 5% error for JS [3]. Moreover, we notice the query relative error of VFDS is below 5% for all queries generated, with a maximum error of 3 . 5%. In terms of query answering, the methods generally produce similar errors as they represent random techniques [3].
This section discusses the four demonstration scenarios we plan to present at the conference. To demonstrate VFDS X  effectiveness, we plan to apply the system on both real data from the Financial database 2 from the PKDD X 99 Challenge http://lisp.vse.cz/pkdd99/Challenge/berka.htm
