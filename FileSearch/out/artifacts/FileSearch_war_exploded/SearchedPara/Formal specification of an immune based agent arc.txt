 1. Introduction
The natural immune system is a subject of great research interests because it provides powerful and flexible information processing capability as a decentralised intelligent system. The immune system constitutes an excellent model of adaptive cooperation at the local level and of emergent behaviour at the global level. These concepts can be applied in the Multi-Agent
Systems field where autonomous agents interact in order to solve a common goal. There exists several theories to explain immunological phenomena and software models to simulate various components in the immune system ( Suzuki and Yama-moto, 2000 ).

These artificial immune systems (AIS from hereon) are typically defined in an informal way and applied in an ad hoc fashion. As stated in Timmis (2007) , Aickelin and Dasgupta (2006) , de Castro and Timmis (2003) the AIS domain needs foundational works in order to clearly define models and frame-works that allow understanding and exploitation. The need is even more critical in the case of idiotypic networks chosen in this paper as it is a controversial subject even for the biologists (Timmis et al., ). Consequently, system designers have been unable to fully exploit the existing models commonalities and specialise or reuse them for specific problems.

The contribution of this paper is to propose a formal specification approach of an idiotypic network based architecture based upon the composition of Object-Z and statecharts. This specification allows a precise and non-ambiguous description of the architecture. Moreover, using software tools that enable model checking and theorem proving one can gain understanding on the architecture behaviour. Such a specification allows to fully exploit the idiotypic network models and facilitate its reuse. The use of the presented architecture is illustrated on a robot soccer example.

The basic components of the immune system are macro-phages, antibodies and lymphocytes. Lymphocytes are the cells maturing in the bone marrow and produces antibodies from its surface. The antibody recognises and binds to specific type of antigens (foreign substances invading a human). The key portion of antigen that is recognised by the antibody is called epitope, which is the antigen determinant. Paratope is the portion of antibody that corresponds to a specific type of antigens. Once an antibody combines an antigen via their epitope the elimination process can begin. Recent studies in immunology have clarified that each type of antibody also has its own antigenic determinant, called an idiotope. This means that an antibody is recognised as an antigen by another antibody ( Farmer et al., 1986 ). Based on this fact, Jerne proposed the concept of the immune network, or idiotypic network ( Jerne, 1974), which states that antibodies and lymphocytes are not isolated, but they are communicating with each other. The idiotope of an antibody is recognised by another antibody as an antigen. This network, called idiotypic network, is formed on the basis of idiotope recognition with the stimulation and suppression chains among antibodies. The approach pre-sented in this paper is based on this interpretation of the immune system ( Table 1 ).

This paper is organised as follows: Section 2 presents the principles of Immune System and AIS. Specifically the background concerning an architecture inspired by idiotypic networks is presented. Section 3 presents our formal specification notation and the specification of the architecture its analysis and an example. Section 4 presents some related works. Eventually,
Section 5 concludes. 2. AIS background 2.1. Biological inspiration
From a computing viewpoint, the human immune system can be considered as a parallel, distributed system that has the capacity to control a complex system over time ( Farmer et al., 1986). The human immune system is composed of several layers of defence among them: physical (e.g. skin), innate and adaptive.
We are specifically interested in the adaptive part of the human immune system. The adaptive system improves its response to a specific pathogen with each exposure. Therefore, the adaptive system has three key functionalities: recognition, adaptation and memory. The adaptive immune system can be divided into two major sections: humoral immune system and cellular immune system. The former acts against antigens by means of proteins called immunoglobulins or antibodies built by a specific sort of cells: B-cells. The latter, among other duties, destroys virus-infected cells. Fig. 1 illustrates the antigen recognition mechanism. An antibody Ab manufactured by a B-cell recognises and binds to an antigen Ag if Ag matches Ab  X  X  structure. The region of antibodies which matches antigens is called the paratope. The counterpart region on antigens is called epitope. In Fig. 1 antibody Ab 1 recognise only antigen similar to antigen Ag 1 .

The immune system continuously generates new sort of antibodies by cloning and muting existing ones. The goal is to produce antibodies that will match antigens. It is the second functionality of the immune system: adaptation. If new antigens appear the immune system may be capable of producing matching antibodies.

When an antibody match an antigen Ag i it proliferates in order to bind to this antigen. This selection mechanism augments the concentration of effective antibodies. Even if all Ag i antigens are destroyed, the immune system is able to keep some antibodies that could destroy them for some time. This is the third functionality of the immune system: memory. If an Ag i antigen reappears, matching antibodies may already exist.

Among the numerous theories which try to explain the human immune system, Nobel Laureate Jerne (1974) proposed a model for immune system regulation based on communications be-tween antibodies. These communications take the form of stimulation and inhibition. This theory is known as Jerne X  X 
Idiotypic Network. The network is defined by stimulation/ inhibition links between antibodies. The region by which antibodies stimulate or inhibit other antibodies is called idiotope. These idiotopes play the roles of antigens for other antibodies.
This regulation mechanism enables the immune system to maintain an effective set of cells and self-organise in order to deal with antigens. 2.2. Immune system based agent architecture
The Jerne X  X  idiotypic network has already been used as agent architecture, for example Watanabe et al. (). This agent archi-tecture is an interpretation of the Jerne X  X  theory. We use the concepts developed in this reference as a basis for the approach presented in this paper. First, antibodies are represented by agents. This analogy is depicted in Fig. 1 . An antibody is divided into three parts. The first part is the precondition. It states under which circumstances the antibody is stimulated. That is to say in which context this antibody may execute it X  X  associated beha-viour. This part is an analogy with the real antibody paratope which tries to match antigens epitope to recognise them. It can be seen as a perception part of the agent.

The second part specifies the behaviour of the antibody. It is the behaviour which is executed when the antibody is selected. The behaviour of the real antibody is to eliminate the antigen.
The third part is composed of references to other antibodies with degrees of stimulation (affinities). It is the idiotope part of the antibody by which it is recognised and allows interactions (stimulation/inhibition) with other antibodies.

The Jerne X  X  Idiotypic network is defined by the different antibodies and their affinities. The affinities are either stimulation or inhibition between two antibodies. An example of idiotypic network is presented in Fig. 2 . The i -th antibody stimulates M antibodies and inhibits N antibodies. m ji and m ik denote affinities between antibody j and i , and between antibody i and k , respectively. m i is an affinity between an antigen and antibody i . The antibody population is represented by the concept of Ab1:Antibody paratope concentration. In Farmer et al. (1986) authors propose equations to compute the concentration of the i-th antibody, denoted by a using the stimulation/inhibition links: dA  X  t  X  dt  X  a a  X  t  X  X 
In the first equation, the first and second term of the right hand side denote the stimulation and suppression from other antibodies. m ji and m ik are positive values between 0 and 1. The third term, m i , is 1 when antibody i is stimulated directly by an antigen, otherwise 0. The forth term, k i , denotes the dissipation factor representing the antibody X  X  natural death. The second equation is the function that is used to squash the parameter
A  X  t  X  1  X  , calculated by the first equation, between 0 and 1. An antibody is selected based on the probability proportional to the current concentrations (roulette-wheel selection strategy).
The adaptation mechanism starts from the situation where the idiotopes of the antibodies are undefined, and then obtains the idiotopes using reinforcement signals so the idiotypic network structure can be rearranged at run-time by changing affinity values.

It means that the affinity values are all initialised with 0. The adaptation consists in computing the affinity values using the analysis of reinforcement for executed antibodies behaviours. This process constructs the idiotypic network.

The following equation describes how affinity m 12 between antibody 1 and antibody 2 is computed. m
T Ab 1 p is the number of times penalty reinforcement signals were received when Ab 1 was selected.

T Ab 2 r is the number of times reward reinforcement signals were received when Ab 2 was selected.

T Ab 2 Ab 1 is the number of times both, Ab 1 and Ab 2, have reacted to specific antigens.

This approach means that immune network learns from results of its own behaviour. 3. Specification 3.1. OZS notation
Many specification formalisms can be used to specify entire system but few, if any, are particularly suited to model all aspects of such systems. For large or complex systems, like MAS, the specification may use more than one formalism or extend one formalism.

Our choice is to use Object-Z to specify the transformational aspects and statecharts to specify the reactive aspects. Object-Z extends Z ( Luck and d X  X nverno, 1995 ) with object-oriented specification support. The basic construct is the class which encapsulates state schema and operation schemas which may affect its variables.

Statecharts extend finite state automata with constructs for specifying parallelism, nested states and broadcast communica-tion for events. Both language have constructs which enable refinement of specification. Moreover, statecharts have an opera-tional semantic which allows the execution of a specification.
Authors of Gruer et al. (2004) introduce a multi-formalisms notation that consists in integrating statecharts in Object-Z classes. The class describes the attributes and operations of the objects. This description is based upon set theory and first order predicates logic. The statechart describes both the possible states of the object and the events which may change these states. A statechart included in an Object-Z class can use attributes and operations of the class. The sharing mechanism used is based on name identity. Moreover, we introduce basic types [ Event , Action , Attribute ]. Event is the set of events which trigger transitions in statecharts. Action is the set of statecharts actions and Object-Z classes operations. Attribute is the set of objects attributes.
The TwoWheelsRobot class illustrates the integration of the t wo formalisms. It specifies a part of a robot with two independent wheels. The attributes of this class are speed which is the desired speed of the robot and lwSpeed (resp rwSpeed ) which is the speed of the left (resp right) wheel. Parallelism between the two wheels is expressed by the dashed line between LeftWheel and RightWheel sub-states. Each sub-state specifies the behaviour of a wheel. A wheel is in Blocked state by default. It means that it is not running. In the following we describe the behaviour of the left wheel which is symmetric to the one of the right wheel. If a runL event with a speed parameter is perceived then the left wheel is in Running state where it can receive change of speed events or blockL event make the wheel return to Blocked state. If the runL event is perceived then the transition from Blocked to Running state is fired and the operation setLWSpeed is called with the speed as input. The input parameter is noted with the ? suffix.
The notation for attribute modification consists of the modified attributes which belongs to the D list. In any operation sub-schema, attributes before their modification are noted by their names and attributes after the operation are suffixed by 0 .
The result of the composition of Object-Z and statecharts seems particularly suited to specify MAS. Indeed, each formalism has constructs which enable complex structure specification.
Moreover, aspects such as reactivity and concurrency can be easily dealt with. 3.2. Idiotypic network specification
The specification of this section is based upon a framework defined in Hilaire et al. (2001, 2008) . Each class inherits from the
Role class, not presented here, which specifies abstract behaviours played by agents. It means that the Antibody and IdiotypicNetwork classes are abstract behaviours that can be played by agents.
The first class Antibody specifies an antibody. It is determined by an identifier id which belongs to a set of Identifier Id . Usually this set may be a subset of N . Each antibody is also specified by its interactions with other antibodies. These interactions are de-scribed by affinities and stimulation functions. These functions map antibodies identifiers with their specific affinities (resp stimulation) for the current antibody. The timesBothSelected function stores the number of times the argument and the current antibody have been selected. The concentration value gives the current concentration of the antibody and the a ; b and k values are figures used by the concentration formula. Each antibody, if chosen, receives reinforcement respectively to the effects of its action on the goals of the system.

The behaviour of the antibody is defined as follows: it is idle until receiving a stimulating antigen in which case it is activated.
The activation triggers the propagation of affinities. These stimulations change the concentration values of the correspond-ing antibodies. The idiotypic network choose among the activated antibodies a winner. This winner acts according to its specific behaviour and receive penalties and rewards that update the of affinities values.

The affinity operation is a test which is true if and only if this antibody has affinity with the antigen in input. The updateCon-centration and updateAffinities operations update respectively the antibody concentration and affinities. Both take as input an antibody Id for which the affinities will be updated.
The updateConcentration operation modifies the concentration of antibodies according to the formula presented in Section 2.2 and the values of stimulation/suppression of the i ? antibody. This operation also updates the timesBothSelected function.
The updateAffinities operation with reinforcement ? value as input updates the number of rewards and penalties and computes the affinity value between this antibody and the winner
The IdiotypicNetwork class specifies the Idiotypic Network. It contains a set, called antibodies , of antibodies. Among these antibodies some are selected and among the selected antibodies there may be a winner. The selected antibodies belongs to the selected set and the winner antibody Id is kept in the winner attribute.

Whenever a change is detected the behaviour of the network consists in broadcasting the antigen representing the change to antibodies and waiting for antibodies to react. After a timeout, the network chooses the winner among the selected antibodies, analyses the result of the executed behaviour and then sends reinforcement signals according to how the winner antibody deals with the context.

The chooseWinner operation chooses among the selected antibodies the one with the greatest concentration. The output of this operation is the Id of the winner antibody. The winner is chosen among the selected antibodies. That is to say that it belongs to antibodies . The constraints which allows to choose in the elements of antibodies is that there cannot be another antibody in this set with greater concentration.

The sendReinforcement operation sends to selected antibodies reinforcement value of the winner, according to the result of the analysis of the execution of the behaviour of the winner. If the executed behaviour satisfy the problem constraints, the value is a
Reward else it is a Penalty 3.3. Specification analysis
OZS semantics ( Gruer et al., 2004 ) is based upon transition systems as defined in Manna and Pnueli (1995). It means that for each OZS specification there is an associated transition system.
This transition system represents the set of possible computations the specification can produce.
 With such transition systems and software tools like SAL ( de Moura et al., 2004 ) one can validate specifications and verify specification properties.

Validation enables to test if the specification behaves as expected and in our case simulates the functioning of idiotypic networks. In order to validate the specifications of Section 3.2 we have used the SAL path finder. The SAL path finder is a random trace generator. It means that for the transition system represent-ing the semantics of the idiotypic network specification the SAL environment generates random trace of execution. These traces are alternate sequences of states and transitions. A state is a mapping between variables representing the different character-istics of the system and their values. A transition is a change between two states. With these traces we gain confidence that our specifications faithfully represent the immune system as presented in Section 2.2.

Verification consists in formally verifying specification proper-ties. Different techniques can be used. The Model checking technique for example tries to establish a counterexample of a property by exploring the state space defined by the specification. If no counterexample is found then the property is true. This technique is easy to use but suffers from combinatorial explosion of the state space. A solution to avoid this is to use theorem provers but their use requires a great expertise. A third way proposed in de Moura et al. (2003) is to use bounded model-checking and induction to prove theorems. Given a system S specified by an initial predicate I and a transition relation T , there exist a counterexample of length k to invariant P if there is a sequence of states I  X  s 0  X  4 T  X  s 0 ; s 1  X  4 4 T  X  s k 1 technique we have proven the following property: &amp;  X 8 i ; j : Antibody i : id a j : id 4 i : id  X  IdiotypicNetwork : winner 4 i : reinforcement  X  reward 4 j : affinity  X  i  X  X  0 )  X : j : affinity  X  i  X  o 0  X  X  It may be interpretated as a safety property of the learning mechanism. Indeed, whenever an antibody is chosen and receive rewards, the affinities of other antibodies with this winner will grow.

A second property was proven using another technique. This property is a liveness property stating that whenever an antigen is detected an antibody will be proposed to deal with this antigen. The property is specified as follows: changeDetected ) B winner a |
This property cannot be proved by induction. Indeed, the only properties that can be proved using induction are safety proper-ties or properties that always hold. The liveness property is not always true, it may takes time to become true. In order to prove this property we have used the bounded model checker which takes as input the depth of the search in terms of number of transitions taken. The depth enables to limit the size of the state-space. In our case, we have proven the property with depth 20. It means that there is no counter-example for traces between 0 and 20 transitions. 3.4. Robot soccer example
The immune system based architecture presented in the precedent sub-section allows the arbitration among several behaviours. The arbitration is the result of the selection of the antibody with the highest concentration. The antibodies concentrations evolve according to stimulation of antigens (perception) and stimulation/inhibition of other antibodies. This architecture does not take into account agent interactions. Indeed, an agent encapsulates an immune system which chooses the behaviour it executes to react to external stimulations. Moreover, complex goals are difficult to deal with. The architecture we propose is based upon the single agent immune architecture but extended for Holonic MAS. The term holon was coined by A.
Koestler in 1967. A holon is a self-similar structure composed of holons as sub-structures. This hierarchical structure composed of holons is called a holarchy . A holon can be seen, depending on the level of observation, either as an autonomous  X  X  X tomic X  X  entity, or as an organisation of holons.

The principle is that a holon H is at the same time an antibody for the looking up face and one or several immune systems for the looking down face. We illustrate this architecture by the robot soccers example. Robot soccer competitions has begun since 1996 either with real and simulated robots ( Kim, 1996). It is an example where real-time coordination behaviour is needed.
Indeed, the principle is for two teams of autonomous robots to play a game similar to human football. It constitutes a benchmark for several research fields such as MAS, vision and control for example.

In order to realise an appropriate strategy a holarchy composed of four levels have been designed. The highest level, called team is a holon representing a team of robots. The second level assigns appropriate roles to robots according to the situation which is based on the strategy. The third level deals with role-playing by robots. Eventually, the lowest level computes the robots trajectories. The overall organisation of the three levels is depicted in Fig. 3 . The advantages of such an approach are threefold. First, it enables the behaviours decomposition at several levels of abstraction. This decomposition makes them simpler to design. Second, it separates the different goals of the system and their learning mechanisms. Finally, it allows the coordination of agents and dynamic self-organisation of the MAS.
A robot soccer simulator and an immune system API, implementing the presented specification, have been developed using the MadKit platform ( Gutknecht and Ferber, 2000). The interface of this simulator during a game is shown in Fig. 4 .
Several scenarios were experimented with this simulator. One is presented here, it consists in one team implementing the immune based architecture and the other used a strategy consisting mainly in following the ball except for the goalkeeper. The phenomenon observed is the average position of the ball during the games. The field has been split in two halves to see if the ball is more in one half than the other. Fig. 5 presents the percentage of time the ball was in each half. The ball is 67% of time in the half of the team with the non-immune strategy. It means that the immune team is able to keep the ball in its opponent half and thus has more chance to score goals.

A complete description of this ar chitecture implementation and detailed experimental results are presented in Hilaire et al. (2008) . 4. Related works
The example used in this paper to illustrate the Immune based architecture is based on robot soccers. Robot soccers since their beginnings ( Kim, 1996; Kitano, 1998 ) constitute a testbed for many fields such as: MAS ( Hilaire et al., 2002; Bakhouya et al., 2003), vision ( Bailey and Gupta, 2008 ) and control ( Balch, 1998) for example. The goal of this paper is not to propose a completely described architecture that is better than existing robot soccer architectures as for example Aler et al. (2007) , Gabel and Riedmiller (2006) , and Stone et al. (2000) . Indeed, we did not compare the presented architecture to the existing ones. Even if there are no architecture, up to our knowledge, which take into account several goals (strategy, role interpretation, trajectories computation) like the one presented in this paper. We have shown that in the context of a dynamic, unpredictable environ-ment the presented architecture is able to exhibit complex and efficient decision making ( Hilaire et al., 2008 ).

It is indeed difficult to find a MAS architecture which can fit in with dynamic environments and open systems. Self-organisation is an answer to such problems. Coordination in self-organising systems ( Serugendo et al., 2003 ) can be achieved by several techniques such as coordination fields or  X  X  X uples on the air X  X  like techniques which enable pheromone propagation ( Mamei and Zambonelli, 2004 ). However, these techniques are aimed at very simple behaviours such as exploration. Moreover, it is difficult to take into account multiple objectives.

The metaphor of the immune system has already been used in computer science for a wide variety of applications, e.g. Foukia (2004) . For surveys on immune systems applications one can read (Dasgupta et al., 1997; de Castro and Zuben, 2000). There are several computational models used to implement interpretations of the immune system ( de Castro, 2002 ), for example, clonal selection ( Hightower et al., 1996 ), danger theory and immune networks ( Watanable et al., 1998; Suzuki and Yamamoto, 2000). The idiotypic network of Jerne is the basis of the immune networks. Since then several different approaches for immune networks have been proposed ( Garrett, 2003 ) each has it specificities concerning the dynamics and modelling aspects. 67%
However, many scientists criticise the immune networks as there are no evidence of their real existence ( Timmis et al., ). All these reasons, multiplicity of models, controversial aspects has led to works on grounding and theoretical foundations of AIS in order to better understand and compare them as stated in Timmis (2007) , Aickelin and Dasgupta (2006) and de Castro and Timmis (2003) .
The work of Stepney et al. (2004) proposes a framework for AIS that identify their main concepts and give hints for instantiation.
In Timmis et al. (2008) the authors emphasise the need of proper formal models of AIS for their understanding. In their work
Markov chains are used to define the three main AIS types (clonal selection, immune networks and negative selection). It is a very important work for AIS analysis and fundational in term of formalisation. The problem is that Markov chains are not easily refinable down to code. In this paper we are interested in a formal specification of one immune network based architecture that enables a precise, unambiguous description. Moreover, with associated tools that allow proofs one can gain understanding and confidence in the architecture functioning. As opposed to examples like ( Watanable et al., 1998; Suzuki and Yamamoto, 2000) which use a single objective immune network we have presented an approach for the engineering of self-organised MAS based upon several levels of immune systems. The role of the immune systems is the arbitration of several behaviours. The behaviour resulting from the arbitration of a level is used as input by the level immediately below. This architecture allows the coordination of interacting entities at several level of abstraction.
We have illustrated this approach with a MAS dedicated to robot soccers simulation.

The novelty of the model comes from the use of multiple (hierarchically composed) idiotypic networks. The approach enables a flexible and adaptive behaviour without the need of a centralised control. Even more, from a Software Engineering point of view, it reduces the complexity of designing such systems by tackling different levels of abstraction (team/group, robot/indivi-dual, trajectory) independently. 5. Conclusion
In this paper we have presented an architecture for MAS based upon the immune system. A formal specification gives a precise and non-ambiguous description of this architecture. This speci-fication is validated and verified and may be the starting point of implementations.

The role of the immune system in this architecture is the arbitration of several behaviours. This architecture allows the coordination of interacting entities at several level of abstraction and adds adaptive capabilities to these entities. We have illustrated this approach with a HMAS dedicated to robot soccer simulation. The advantages of this approach are numerous. The immune system has learning capabilities. It means that it is able to find at runtime the appropriate behaviours to different stimulations. It enables the decomposition of behaviours at several levels of abstraction making them simpler to design. It separates the different goals of the system and their learning mechanisms. This goal modularity makes the design easier and the adaptation more pertinent. Eventually, it allows the coordina-tion of agents and dynamic self-organisation of the MAS. Indeed, each holon behaviour helps its sub-holons to react to stimulations and to organise themselves in order to solve the problem at hand. References
