 This demonstration presents the LinGO Gram-mar Matrix grammar customization system 1 and its functionality for rapidly prototyping grammars. The LinGO Grammar Matrix project (Bender et al., 2002) is situated within the DELPH -IN 2 col-laboration and is both a repository of reusable linguistic knowledge and a method of delivering this knowledge to a user in the form of an ex-tensible precision implemented grammar. The stored knowledge includes both a cross-linguistic core grammar and a series of  X  X ibraries X  contain-ing analyses of cross-linguistically variable phe-nomena. The core grammar handles basic phrase types, semantic compositionality, and general in-frastructure such as the feature geometry, while the current set of libraries includes analyses of word order, person/number/gender, tense/aspect, case, coordination, pro-drop, sentential negation, yes/no questions, and direct-inverse marking, as well as facilities for defining classes (types) of lex-ical entries and lexical rules which apply to those types. The grammars produced are compatible with both the grammar development tools and the grammar-based applications produced by DELPH -. The grammar framework used is Head-driven Phrase Structure Grammar ( HPSG ) (Pollard and Sag, 1994) and the grammars map bidirectionally between surface strings and semantic representa-tions in the format of Minimal Recursion Seman-tics (Copestake et al., 2005).

The Grammar Matrix project has three goals X  one engineering and two scientific. The engineer-ing goal is to reduce the cost of creating gram-mars by distilling the solutions developed in exist-ing DELPH -IN grammars and making them easily available for new projects. The first scientific goal is to support grammar engineering for linguistic hypothesis testing, allowing users to quickly cus-tomize a basic grammar and use it as a medium in which to develop and test analyses of more inter-esting phenomena. 3 The second scientific goal is to use computational methods to combine the re-sults of typological research and formal syntactic analysis into a single resource that achieves both typological breadth (handling the known range of realizations of the phenomena analyzed) and ana-lytical depth (producing analyses which work to-gether to map surface strings to semantic represen-tations) (Drellishak, 2009). Grammar customization with the LinGO Gram-mar Matrix consists of three primary activities: filling out the questionnaire, preliminary testing of the grammar fragment, and grammar creation. 2.1 Questionnaire Most of the linguistic phenomena supported by the questionnaire vary across languages along multi-ple dimensions. It is not enough, for example, 1 simply to know that the target language has coor-dination. It is also necessary to know, among other things, what types of phrases can be coordinated, how those phrases are marked, and what patterns of marking appear in the language. Supporting a linguistic phenomenon, therefore, requires elicit-ing the answers to such questions from the user. The customization system elicits these answers us-ing a detailed, web-based, typological question-naire, then interprets the answers without human intervention and produces a grammar in the format expected by the LKB (Copestake, 2002), namely TDL (type description language).

The questionnaire is designed for linguists who want to create computational grammars of natu-ral languages, and therefore it freely uses techni-cal linguistic terminology, but avoids, when possi-ble, mentioning the internals of the grammar that will be produced, although a user who intends to extend the grammar will need to become familiar with HPSG and TDL before doing so.

The questionnaire is presented to the user as a series of connected web pages. The first page the user sees (the  X  X ain page X ) contains some intro-ductory text and hyperlinks to direct the user to other sections of the questionnaire ( X  X ubpages X ). Each subpage contains a set of related questions that (with some exceptions) covers the range of a single Matrix library. The actual questions in the questionnaire are represented by HTML form fields, including: text fields, check boxes, ra-dio buttons, drop-downs, and multi-select drop-downs. The values of these form fields are stored in a  X  X hoices file X , which is the object passed on to the grammar customization stage. 2.1.1 Unbounded Content Early versions of the customization system (Ben-der and Flickinger, 2005; Drellishak and Bender, 2005) only allowed a finite (and small) number of entries for things like lexical types. For in-stance, users were required to provide exactly one transitive verb type and one intransitive verb type. The current system has an iterator mechanism in the questionnaire that allows for repeated sections, and thus unlimited entries. These repeated sec-tions can also be nested, which allows for much more richly structured information.

The utility of the iterator mechanism is most apparent when filling out the Lexicon subpage. Users can create an arbitrary number of lexical rule  X  X lots X , each with an arbitrary number of morphemes which each in turn bear any num-ber of feature constraints. For example, the user could create a tense-agreement morpholog-ical slot, which contains multiple portmanteau morphemes each expressing some combination of tense, subject person and subject number values (e.g., French -ez expresses 2nd person plural sub-ject agreement together with present tense).
The ability provided by the iterators to create unbounded content facilitates the creation of sub-stantial grammars through the customization sys-tem. Furthermore, the system allows users to ex-pand on some iterators while leaving others un-specified, thus modeling complex rule interactions even when it cannot cover features provided by these rules. A user can correctly model the mor-photactic framework of the language using  X  X kele-tal X  lexical rules X  X hose that specify morphemes X  forms and their co-occurrence restrictions, but per-haps not their morphosyntactic features. The user can then, post-customization, augment these rules with the missing information. 2.1.2 Dynamic Content In earlier versions of the customization system, the questionnaire was static. Not only was the num-ber of form fields static, but the questions were the same, regardless of user input. The current questionnaire is more dynamic. When the user loads the customization system X  X  main page or subpages, appropriate HTML is created on the fly on the basis of the information already collected from the user as well as language-independent in-formation provided by the system.

The questionnaire has two kinds of dynamic content: expandable lists for unbounded entry fields, and the population of drop-down selec-tors. The lists in an iterated section can be ex-panded or shortened with  X  X dd X  and  X  X elete X  but-tons near the items in question. Drop-down selec-tors can be automatically populated in several dif-ferent ways. 4 These dynamic drop-downs greatly lessen the amount of information the user must remember while filling out the questionnaire and can prevent the user from trying to enter an invalid value. Both of these operations occur without re-freshing the page, saving time for the user. 2 2.2 Validation It makes no sense to attempt to create a consis-tent grammar from an empty questionnaire, an in-complete questionnaire, or a questionnaire con-taining contradictory answers, so the customiza-tion system first sends a user X  X  answers through  X  X orm validation X . This component places a set of arbitrarily complex constraints on the answers provided. The system insists, for example, that the user not state the language contains no deter-miners but then provide one in the Lexicon sub-page. When a question fails form validation, it is marked with a red asterisk in the questionnaire, and if the user hovers the mouse cursor over the as-terisk, a pop-up message appears describing how form validation failed. The validation component can also produce warnings (marked with red ques-tion marks) in cases where the system can gen-erate a grammar from the user X  X  answers, but we have reason to believe the grammar won X  X  behave as expected. This occurs, for example, when there are no verbal lexical entries provided, yielding a grammar that cannot parse any sentences. 2.3 Creating a Grammar After the questionnaire has passed validation, the system enables two more buttons on the main page:  X  X est by Generation X  and  X  X reate Gram-mar X .  X  X est by Generation X  allows the user to test the performance of the current state of the gram-mar without leaving the browser, and is described in  X  3.  X  X reate Grammar X  causes the customiza-tion system to output an LKB -compatible grammar that includes all the types in the core Matrix, along with the types from each library, tailored appropri-ately, according to the specific answers provided for the language described in the questionnaire. 2.4 Summary This section has briefly presented the structure of the customization system. While we antici-pate some future improvements (e.g., visualiza-tion tools to assist with designing type hierarchies and morphotactic dependencies), we believe that this system is sufficiently general to support the addition of analyses of many different linguistic phenomena. The system has been used to create starter grammars for more than 40 languages in the context of a graduate grammar engineering course.
To give sense of the size of the grammars produced by the customization system, Table 1 compares the English Resource Grammar (ERG) (Flickinger, 2000), a broad-coverage precision grammar in the same framework under develop-ment since 1994, to 11 grammars produced with the customization system by graduate students in a grammar engineering class at the University of Washington. The students developed these gram-mars over three weeks using reference materials and the customization system. We compare the grammars in terms of the number types they de-fine, as well as the number of lexical rule and phrase structure rule instances. 5 We separate types defined in the Matrix core grammar from language-specific types defined by the customiza-tion system. Not all of the Matrix-provided types are used in the definition of the language-specific rules, but they are nonetheless an important part of the grammar, serving as the foundation for further hand-development. The Matrix core grammar in-cludes a larger number of types whose function is to provide disjunctions of parts of speech. These are given in Table 1, as  X  X ead types X . The final col-umn in the table gives the number of  X  X hoices X  or specifications that the users gave to the customiza-tion system in order to derive these grammars. The purpose of the test-by-generation feature is to provide a quick method for testing the grammar compiled from a choices file. It accomplishes this by generating sentences the grammar deems gram-matical. This is useful to the user in two main ways: it quickly shows whether any ungrammat-ical sentences are being licensed by the grammar and, by providing an exhaustive list of licensed sentences for an input template, allows users to see if an expected sentence is not being produced.
It is worth emphasizing that this feature of the customization system relies on the bidirectional-ity of the grammars; that is, the fact that the same grammar can be used for both parsing and genera-tion. Our experience has shown that grammar de-velopers quickly find generation provides a more stringent test than parsing, especially for the abil-ity of a grammar to model ungrammaticality. 3.1 Underspecified MRS Testing by generation takes advantage of the gen-eration algorithm include in the LKB (Carroll et al., 3 1999). This algorithm takes input in the form of Minimal Recursion Semantics ( MRS ) (Copestake et al., 2005): a bag of elementary predications, each bearing features encoding a predicate string, a label, and one or more argument positions that can be filled with variables or with labels of other elementary predications. 6 Each variable can fur-ther bear features encoding  X  X ariable properties X  such as tense, aspect, mood, sentential force, per-son, number or gender.

In order to test our starter grammars by gen-eration, therefore, we must provide input MRS s. The shared core grammar ensures that all of the grammars produce and interpret valid MRS s, but there are still language-specific properties in these semantic representations. Most notably, the predicate strings are user-defined (and language-specific), as are the variable properties. In addi-tion, some coarser-grained typological properties (such as the presence or absence of determiners) lead to differences in the semantic representations. Therefore, we cannot simply store a set of MRS s from one grammar to use as input to the generator.
Instead, we take a set of stored template MRS s and generalize them by removing all variable properties (allowing the generator to explore all possible values), leaving only the predicate strings and links between the elementary predications. We then replace the stored predicate strings with ones selected from among those provided by the user. Figure 1a shows an MRS produced by a grammar fragment for English. Figure 1b shows the MRS with the variable properties removed and the predicate strings replaced with generic place-holders. One such template is needed for every sentence type (e.g., intransitive, transitive, negated-intransitive, etc.). In order to ensure that the generated strings are maximally informative to the user testing a grammar, we take advantage of the lexical type system. Because words in lexical types as defined by the customization system dif-fer only in orthography and predicate string, and not in syntactic behavior, we need only consider one word of each type. This allows us to focus the range of variation produced by the generator on (a) the differences between lexical types and (b) the variable properties. 3.2 Test by generation process The first step of the test-by-generation process is to compile the choices file into a grammar. Next, a copy of the LKB is initialized on the web server that is hosting the Matrix system, and the newly-created grammar is loaded into this LKB session.
We then construct the underspecified MRS s in order to generate from them. To do this, the pro-cess needs to find the proper predicates to use for verbs, nouns, determiners, and any other parts of speech that a given MRS template may require. For nouns and determiners, the choices file is searched for the predicate for one noun of each lexical noun type, all of the determiner predicates, and whether or not each noun type needs a determiner or not. For verbs, the process is more complicated, re-quiring valence information as well as predicate strings in order to select the correct MRS template. In order to get this information, the process tra-verses the type hierarchy above the verbal lexical 4 types until it finds a type that gives valence infor-mation about the verb. Once the process has all of this information, it matches verbs to MRS tem-plates and fills in appropriate predicates.

The test-by-generation process then sends these constructed MRS s to the LKB process and displays the generation results, along with a brief explana-tion of the input semantics that gave rise to them, in
HTML for the user. 7 As stated above, the engineering goal of the Gram-mar Matrix is to facilitate the rapid development of large-scale precision grammars. The starter grammars output by the customization system are compatible in format and semantic representations with existing DELPH -IN tools, including software for grammar development and for applications in-cluding machine translation (Oepen et al., 2007) and robust textual entailment (Bergmair, 2008).
More broadly, the Grammar Matrix is situated in the field of multilingual grammar engineer-ing, or the practice of developing linguistically-motivated grammars for multiple languages within a consistent framework. Other projects in this field include ParGram (Butt et al., 2002; King et al., 2005) ( LFG ), the CoreGram project 8 (e.g., (M  X  uller, 2009)) ( HPSG ), and the MetaGrammar project (de la Clergerie, 2005) ( TAG ).

To our knowledge, however, there is only one other system that elicits typological information about a language and outputs an appropriately cus-tomized implemented grammar. The system, de-scribed in (Black, 2004) and (Black and Black, 2009), is called PAWS (Parser And Writer for Syntax) and is available for download online. 9 PAWS is being developed by SIL in the context of both descriptive (prose) grammar writing and  X  X omputer-assisted related language adaptation X , the practice of writing a text in a target language by starting with a translation of that text in a related source language and mapping the words from target to source. Accordingly, the output of PAWS consists of both a prose descriptive grammar and an implemented grammar. The latter is in the format required by PC -PATR (McConnel, 1995), and is used primarily to disambiguate morpholog-ical analyses of lexical items in the input string.
Other systems that attempt to elicit linguistic in-formation from a user include the Expedition (Mc-Shane and Nirenburg, 2003) and Avenue projects (Monson et al., 2008), which are specifically tar-geted at developing machine translation for low-density languages. These projects differ from the Grammar Matrix customization system in elic-iting information from native speakers (such as paradigms or translations of specifically tailored corpora), rather than linguists. Further, unlike the Grammar Matrix customization system, they do not produce resources meant to sustain further de-velopment by a linguist. Our demonstration illustrates how the customiza-tion system can be used to create starter gram-mars and test them by invoking test-by-generation. We first walk through the questionnaire to illus-trate the functionality of libraries and the way that the user interacts with the system to enter infor-mation. Then, using a sample grammar for En-glish, we demonstrate how test-by-generation can expose both overgeneration (ungrammatical gen-erated strings) and undergeneration (gaps in gen-erated paradigms). Finally, we return to the ques-tionnaire to address the bugs in the sample gram-mar and retest to show the result. This paper has presented an overview of the LinGO Grammar Matrix Customization System, highlighting the ways in which it provides ac-cess to its repository of linguistic knowledge. The current customization system covers a sufficiently wide range of phenomena that the grammars it produces are non-trivial. In addition, it is not al-ways apparent to a user what the implications will be of selecting various options in the question-naire, nor how analyses of different phenomena will interact. The test-by-generation methodology allows users to interactively explore the conse-quences of different linguistic analyses within the platform. We anticipate that it will, as a result, en-courage users to develop more complex grammars within the customization system (before moving on to hand-editing) and thereby gain more benefit. 5 This material is based upon work supported by the National Science Foundation under Grant No. 0644097. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.
