 Recently, online social networks are getting more and more popular. With a huge amount of online social network data, we can analyze social interactions and activities. In this paper, our goal is to find guides , informative friends, for a given querier. A guide represents someone who is our friend on the online social network and may provide the information we are looking for. The guide itself may know about the information we need, or the guide may know some other friends who have the information we need. The reason that a guide must be a friend is that we usually get more detailed and helpful information if we ask for information from the persons we have good relationship with.
 The motivation of this work can be understood by the following example. When finding a job, a user always wants to know more about the companies she is interested in. If she knows some of her friends are working in those companies, it is not difficult to ask them to get information. However, what if she does not know whether there is any friend working there? Or, what if there is no friend working there? Based on the social graph data, we can find out which friends she should ask first. The suggestion would be the friends who are working in those target companies, or the friends who could introduce some of their friends working there.

The similar scenario can be applied to lots of cases in our life. Although we might find some useful information on the Internet, it is always better to reach someone who has been in the corresponding circumstances. It is worth noting that a querier usually cannot access to i nformation of all other users in the social network. By providing the guides, t he social network service provider can help the querier without providing further information of the nodes that are not friends of the querier.

An example social network graph is shown in Figure 1. Node q is the querier, the user who is looking for information. Assumed that q is looking for information A or B , N 3 , N 4 , N 5 ,and N 6 are the targets. To access the targets, N 1 and N 3 , who are friends of q , are the guides. N 3 is a guide because it knows A . N 1 is a guide because three of its friends know A or B . N 2 is not a guide because q cannot know A nor B from it. N 3 could be a better guide since q can directly connect to N 3 . However, N 1 could be better since q may access three targets via N 1 . To decide whether N 1 or N 3 is better, we would like to consider edge probability that the information is indeed passed through each edge. The main idea is to use the expected number of influenced target nodes based on some influence diffusion model to represent the informative level for each candidate node, and then to sort the candidate nodes and provide the best few guides as the answer. In this example graph, N 1 is a better guide when p&gt; 1 / 3.
The contribution of this paper is summarized as follows.  X  We define the guide query, which is to find the informative neighboring nodes  X  We propose a framework to answer the guide query by considering the ability  X  We develop a prototype system using the coauthor network of DBLP com-The rest of the paper is organized as follows. In Section 2, the guide query is defined and the proposed framework for answering the guide query is intro-duced. Corresponding experiments are performed in Section 3. Related works are introduced in Section 4. The ar ticle is concluded in Section 5. In this section, we first provide necessary definitions and define the guide query. We introduce the basic framework to answer the guide query based on InfScore , and we describe the advanced framework integrating InfScore and DivScore . 2.1 Problem Definition In this paper, the social network G =( V,E ) is modeled as follows. Each node N to decide whether the node is a target node or not. Each edge e i,j  X  E is with a probability deciding whether information can be passed through the edge, which depends on the relationship between the two nodes.
 With the given social network, we define the guide query as follows. Definition 1. Given a query node q and a set of keywords W = { w 1 ,w 2 ,..., w W .
 The phrase informative is the key of the objective. We will design InfScore and DivScore to decide the informative level in Section 2.2 and Section 2.3 correspondingly. For better understanding, following definitions are provided. Definition 2. Given the query node q , we define the neighboring nodes of q as candidate nodes, where C denotes the set of candidate nodes.
 Definition 3. Given the keyword set W , we define any node having at least one attribute in W as a target node, where T denotes the set of target nodes. Besides, let T w x denote the set of target nodes having the keyword w x . Note that T w x  X  T , and T is the union of each T w x .
 Take Fig. 1 for example. Given q and W = { A, B } ,wehave C = { N 1 ,N 2 ,N 3 } and T = { N 3 ,N 4 ,N 5 ,N 6 } ,where T A = { N 3 ,N 4 } and T B = { N 5 ,N 6 } . 2.2 The Basic Framework In this section, we first define InfScore , and we propose the basic framework for answering the guide query based on InfScore .

The main idea of InfScore is to use the ability of spreading the request to target nodes to represent the informative level for a candidate node. A candidate who can broadly spread the request is able to help the querier access to more target nodes. The IC (Independent Cascade) model [4], which is one of the most popular information diffusion models, is used to define InfScore .IntheIC model, briefly speaking, every edge is given with a probability, which is identical to the given social graph in the guide query. A node N i that is influenced at time t will try to influence every neighbor N j at time t + 1, and the edge probability e ( N i ,N j ) is the probability that N j is successfully influenced by N i . Based on theICmodel,wefirstdefine InfRatio and then use it to define InfScore . Definition 4. Based on the IC model, assuming that N i is initially influenced, InfRatio ( N i ,N j ) is defined as the probability that N j is also influenced. Note that N j can be any node in the social graph.
 Definition 5 As Def. 5, InfScore is an expected weighted sum of the number of target nodes that are influenced when assuming that N i is initially influenced. The weight is the number of keywords that a target node has. This is to say, if the query node ask for N i  X  X  help, the number of nodes that are finally accessed is expected to be InfScore ( N i ), where a node having two keywords is counted twice. With the InfScore defined, the guide query in Def. 1 is re-defined as follows. Definition 6. Given a query node q and a set of keywords W = { w 1 ,w 2 ,..., w considering W .
 With Def. 6 in mind, we design the basic framework for answering the guide query as shown in Fig. 2. The Social Graph is first generated based on the given social network dataset, following the descriptions at the beginning of Section 2.1. In the offline phase, InfRatio Calculation calculates and stores InfRatios .Inthe online phase, Target Identification, Score Calculation, Ranking are performed consecutively according to the input ( q,W,k ).

Although InfRatio is calculated in the offline phase, it could be very hard to calculate the exact value of InfRatio since all possible worlds need to be examined, where a possible world is a possible network structure considering whether each edge exists or not. Thus, following previous works using the IC model [1] [4], we apply a large number of simulations to obtain the approximate value of InfRatios and store the results for calculating InfScores in the on-line phase. For example, assuming we run 10,000 simulations with N i initially influenced, and in 4,800 simulations that N j is finally influenced. We estimate InfRatio ( N i ,N j )by0 . 48, which is a part of InfScore ( N i ). Details of each process are introduced as follows.  X  InfRatio Calculation: In the offline phase, InfRatio Calculation calculates  X  Target Identification: The given keywords in W are matched with the at- X  Score Calculation: The set of neighboring nodes of the given query node q  X  Ranking: The candidate nodes are sorted by their InfScores . The candidate Example 1. Figure 3 is an example graph for demonstrating the proposed frame-work. The graph is also used in every example in the rest of this paper. The dotted line with an arrow from N i to N j represents that N j could be influenced if N i is initially influenced, and the value besides the dotted line represents the InfRatio ( N i ,N j ) estimated by simulations. With the query node q and keyword set W = { A, B } , the candidate set C and target set T are decided based on Def. 2andDef.3asfollows.  X  C = { N 1 ,N 2 ,N 3 ,N 4 ,N 5 ,N 6 } . Following Def. 5, InfScore ( N i )ofeach N i  X  C is calculated using the given InfRatio ( N i ,N j ). Take N 2 and N 4 for example.
 It is worth noting that InfRatio ( N 4 ,N 12 ) is counted twice when aggregat-ing InfScore ( N 4 ). This is because N 12 has both keyword A and keyword B in its attributes, which means that N 12  X  T A and N 12  X  T B . Similarly, we have InfScore ( N 1 )=0 . 3, InfScore ( N 3 )=0 . 3, InfScore ( N 5 )=0 . 1, and InfScore ( N 6 )=0.

Then we sort the candidate nodes based on their InfScores .Given k =2,the answer to the guide query are two nodes randomly chosen from { N 1 ,N 2 ,N 3 ,N 4 } , which are the nodes with the top InfScore . 2.3 The Advanced Framework In addition to the InfScore, we define the DivScore as another feature for de-ciding the informative level. The DivScore is designed to represent the diversity considering the number of possibly accessi ble target nodes. This is based on the observation that attribute values of a node might not be complete. Since there might be extra information obtained when each target node is accessed, it is better to access more target nodes for more extra information.
 With the consideration above in mind, we define the target vector as follows. Definition 7. For some node N i , the target vector X T of size | T | is defined as where T [ t ]= N j .Eachitemin X T is a normalized InfScore value, which describes the probability distribution on different target nodes.
 Example 2. Referring to the example graph in Fig. 3, we obtain the target vector X T basedonDef.7.Take N 2 and N 4 for example.
 We then define DivScore corresponding to the target vector X T .
 Definition 8 Example 3. With the target vectors above, based on Def. 8, DivScore values are calculated as Referring to the flowchart in Fig. 2, with the additional DivScore calculated in Score Calculation, Ranking simultaneously considers InfScores and DivScore to answer the guide query. The ranking process is designed to appreciate the candidate node which have a good rank based on each score. Instead of assign-ing the weights and then summing up InfScore and DivScore ,wesortthe candidate nodes by each score and obtain two ranking lists. For each candidate node, the worse rank among the two ranking lists is used for the final ranking process. The candidate nodes with the top-k smallest worse rank are the answer to the guide query. For two nodes with the same worse rank, the other rank is compared to decide the final rank.
 Example 4. Referring to the example graph in Fig. 3, Table 1 presents InfScore and DivScore of all candidate nodes and corresponding target vectors. We rank the candidate nodes according to each score and present the results in Table 2. For each candidate node, the right column is the worse rank among its two ranks. Given k = 2, the answer to the guide query are the two nodes with the top-2 smallest worse ranks, which are N 2 and either of { N 1 ,N 4 } . We implement the proposed framework to a ssess its effectiveness and efficiency. 3.1 Implementation The DBLP dataset [8] is used to construct the social network graph. The frame-work is implemented on a PC with Intel i7 CPU and 3GB memory. A node is an author, and an edge between two nodes is the coauthor relationship. Referring to previous works using the IC model [1] [4], the probability of each edge is assigned based on the WC (weighted cascade) model. In this model, the probability of conference names of an author X  X  publications are regarded as the attributes of the corresponding node. Also, the given keywords of the guide query are cho-sen from the abbreviated conference names. In the offline phase, for each node N , we perform 10,000 simulations to obtain the InfRatio ( N i ,N j ). Besides, we only store the InfRatio ( N i ,N j ) &gt; 0 . 01 to save the storage space and the query processing time. 3.2 Experimental Results We first apply a few guide queries with q =  X  X ing-Syan Chen X  and k = 10. The first query is with W = [KDD, SDM, CIKM, ICDM, PKDD], which are top conferences of the data mining field. The resulting top-k ranking lists are shown in Table 3. The left list ranks candidates based on only InfScore ,whichisalso the answer of the basic framework. The middle list ranks candidates based on only DivScore . The right list ranks candidates based on the worse ranks, and the list is the answer of the advanced framework. Comparing the answers of the basic and the advanced framework, we find that some authors have good ranks in both answers, such as Philip S. Yu and Wang-Chien Lee. These authors are expected to help the querier reach a good number of target authors with a good diversity. On the contrary, there are some authors ranked well only in the basic framework, such as Chang-Hung Lee and Cheng-Ru Lin. Although these authors are expected to help the queier reach a good number of target nodes, the required information can be provide d by only few targets. The results are identical to our expectation.

Table 4 presents the time consumed to answer the guide query using the basic and the advanced frameworks. It is shown that the guide query is answered in acceptive time. It is worth noting that in the scenario that a server is responsible for only a part of nodes in the social graph, InfRatios can be loaded to memory in advance and then the processing time can be largely reduced. Comparing the two frameworks, the advanced framework costs more time in both the Score Calculation and the Ranking processes. Extra time is necessary for constructing the target vector and for integrating the linking lists ranked by InfScore and DivScore to provide the final answer. In each framework, the Score Calculation process costs most time b ecause the pre-calculated InfRatios need to be read from files, and InfRatio of each N i ,N t needs to be found for aggregation.
In the following, for the same q and the same k , we apply the guide query con-sidering different W ,whichare W 1 = [SIGMOD, PODS, VLDB, ICDE, ICDT], W 2 = [KDD, CIKM, PKDD], and W 3 = [KDD, SDM, CIKM, ICDM, PKDD].
 W 1 includes top conferences in the database field, W 3 includes top conferences in the data mining field, and W 2 is a subset of W 3 . We apply the guide query using the advanced framework and we present the resulting ranking lists in Table 5. It is observed that for each keyword set, the authors with the top ranks have pub-lished papers on the corresponding conf erences, or have coauthored papers with other authors who have published papers on the corresponding conferences, or both. Although the database and data mining fields are closely related, consid-ering W 1 , W 2 ,and W 3 results in different ranking lists. Since some authors are in only one list, it is demonstrated that being able to consider different keyword sets is necessary for the guide query.
 Table 6 presents the time consumed to answer the guide query considering W 1 , W 2 ,and W 3 . Considering W 3 costs more time than considering W 1 .Thisisbe-cause the candidate nodes are more related to the data mining field, where there are more possibly accessible tar get nodes when considering W 3 . Considering W 3 also costs more time than considering W 2 .Since W 2  X  W 3 , considering W 3 im-plies more possibly accessible target nodes are involved in the Score Calculation process.

To further examine the efficiency, we randomly choose a query node from the nodes with degrees larger than 10 to apply the guide query considering W with different sizes. We first apply the guide query considering a single keyword and then incrementally add a keyword into W . The average consumed time on different size of keyword sets are presen ted in Fig. 4(a). It is worth noting that even if considering 10 keywords, the gui de query is still answered without much processing time. However, when there are more input keywords, more processing time is required. This is because when there are more input keywords, there are also more possibly accessible target nodes, as shown in Fig. 4(b).
 With the population of online social network services, there are numerous pa-pers discussing and modeling the online social networks. Some pervious works finding the experts in social networks [2] [7].However, finding the experts is not enough for us. Our goal is to find the most informative neighbors of the query node. Besides, the expert finding algorithm is time-consuming such that it is not suitable for our online target identification process.

Some previous works are on finding gateways or connected parts between the source group and the target group [3] [6] [9] [11]. They are looking for the best group of nodes, which are connected [3 ] [6] [11] or unconnected [9], to be the bridge from the source group to the target group. Similar to our purpose, they are distinguishing important nodes from others in a social network with full knowledge. However, what we intend to figure out are the informative nodes among the querier X  X  neighboring nodes, but not among all nodes in the graph.
In [11], Wu, Tang, and Bo are finding a tight social graph including the source nodes and the target nodes. The resulting social graph provides insights of guides. However, the resulting social graph does not provide any score of each node such that we cannot rank the querier X  X  neighboring nodes. Another concern is when considering several keywords, the graph might be too large and too complicated for observation.

Many previous works are describing the social network using information dif-fusion models based on two widely-used fundamentals models [5] [10], which are the independent cascade model (IC) and the linear threshold (LT) model [4]. Some works modify the models to describe different behaviors [5] [10], and some works choose the initially influenced nodes to maximize the final influence [1]. Instead, we propose to use simulated results of the IC model as scores for estimating the ability to help the querier spread the request to target nodes. In this paper, we define the guide query on social network graphs. The guide query is to find the most informative neighbors of the query node considering given requirements. We define InfScore to represent the informative level of a node, based on the popular IC influence diffusion model. We also propose a two-phase framework to answer the guide query efficiently. The offline phase calculates InfRatio , which is the main component of InfScore , and stores them. The online phase identifies the target nodes, calculates InfScores , and ranks the candidate nodes. In addition, we define DivScore for extending the framework by considering the diversity of possibly accessible target nodes. We implement the proposed framework for experiments . Example query results are presented to show that the guide query is effective and can be answered efficiently.
