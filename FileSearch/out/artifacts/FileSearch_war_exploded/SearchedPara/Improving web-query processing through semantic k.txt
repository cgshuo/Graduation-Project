 1. Introduction
The continued explosion of available information on the World Wide Web has lead to the need for process-ing queries intelligently to address more of the user X  X  intended requirements than previously possible [1] .
Doing so, requires some notion of the context within which the query is being posed and the semantics of the query itself. In our context, intelligent means that the queries should be interpreted and extended in order to contextualize and disambiguate them.

Several knowledge repositories have been created to support agents (humans or programs) to increase the intelligence of their tasks. Examples include WordNet [2] , Cyc [3] , and ConceptNet [4] . Although all of these are useful for their intended purposes, they are limited as a general repository in several ways. Linguistic repos-itories, such as WordNet, do not capture the semantic relationships or integrity constraints between concepts.
Semantic repositories such as Cyc do not represent linguistic relationships of the concepts (e.g. whether two con-cepts are synonyms). Some of the existing repositories are domain dependent and only represent information about certain aspects of the domains, not the complete domain. Research on query extension has used knowl-
Most query extension approaches use only linguistic knowledge [12] . However, linguistic repositories lack semantic knowledge, so query expansion cannot deal with several issues: (1) knowledge related to the domain of the query, (2) common sense inferences, or (3) the semantic relationships in which the concepts of the query can participate. Grootjen and Weide [6] focus on creating a small lattice of concepts to support query expansion.
In contrast, our approach focuses on grouping and using existing knowledge in large knowledge bases for query expansion in an efficient manner.

In this research, we consider semantic repositories to be repositories that represent semantic information about a domain. They are independent of syntax, word forms, and languages, but tend to be domain and cul-ture dependent. Semantic repositories need linguistic knowledge to identify relevant concepts from the repos-itory that represent a given term used in the query. Therefore, the integration of linguistic and semantic information into one repository could be useful to increase the contexts where knowledge in these repositories can be used successfully. Table 1 shows examples of improvement in search results using semantic and linguistic knowledge. The queries shown in Table 1 have been executed manually. The  X  X % Rel X  X  metric is the percentage of the number of documents that are relevant to the query in the first 10 documents returned by the search engine.
The Cyc ontology is a repository developed to capture and represent common sense. ReseachCyc ( http:// research.cyc.com ) is a huge semantic repository. It should be possible to use techniques from Cyc [13 X 15] to extend ResearchCyc with linguistic information from the WordNet lexicon, and factual information from the World Wide Web.

The objective of this research is to demonstrate that the use of semantic and linguistic knowledge together improves the query refinement process. To do so, we study the problems associated with the web-query process and show how ResearchCyc, in combination with WordNet, helps improve query results for web searches.
This research makes several contributions. First, it demonstrates that semantic and linguistic knowledge together improve query expansion. Second, the research identifies and formalizes web-query problems and presents a query classification scheme that explains why, in some cases, the query expansion may not be done successfully, even if the repository used to support such a task is complete. Such information is used to identify the structure and knowledge that an ontology should have to increase the chances of improving different kinds of queries. 2. Web queries
The purpose of a web query is to search for information that best reflects the user X  X  needed information. In this research, semantics is defined as the meaning, or essential message, of terms. To carry out useful research for dealing with semantics, symbols must be manipulated in ways that are meaningful and useful [16] .
To process a web query, the expected result is E R . This information, in general, belongs to several domains, intended domains D I . Therefore, the expected result is contained in the knowledge defined for the intersection of all the intended domains E R K ( D I1 ) \ K ( D I2 ) \ ... , \ K ( D returns the knowledge defined in the domain D as illustrated in Fig. 1 .
 To perform a search, the user creates an initial query ( Q terms Q w ) to describe what he or she is searching for. The problem arises with the ambiguity of the languages humans use. The user considers a query, Q w , within a given context (i.e., the context of the intended domains ).
Since words have several senses in several domains, query search techniques are not able to determine which of query tends to contain results that deal with a number of domains D domains ( m P n ) 1 . The resultant domains are called obtained domains , with each depending on a subset of the query terms D O ( W ), where W { w 1 , ... , w k }.
 Suppose a user lives in Georgia, USA., and wants to buy sports shoes with Nike brand. E
Georgia (USA) where I can find a pair of Nike shoes X  X . E R sport stuff (sport shoes), commercial information (brand Nike sells sport stuff), and geographical information (which commercial organizations in Georgia sell Nike products). These three domains are the intended domains. Suppose the user defines a query that contains two words Q the D O will be D O 1 (Nike) = Commercial Brand, D O 2 (Nike) = Greek Mythology (Nike is the goddess of Vic-tory in Greek Mythology), D O 3 (Georgia) = Central-European Country, D
States of America , and D O 5 ( Georgia )= Football Team Georgia Bulldogs . The query results will be the web pages that deal with the presented D O . 2.1. Web-query problems
The ambiguity of the language used in the query, the possible partial knowledge of the user, and the dif-ficulty in determining what the user really wants, lead to the following problems that affect the processing of web queries.  X  Identification of a good initial query : There is no systematic way, or guidelines that support the user in iden-tifying the best terms for a query. A good selection of Q in too many irrelevant D O , and results. Using very specific words may result in missing some of the results that match E R because they use a plain language.  X  Resolving language ambiguity : Documents that deal with the same domain can use different terms for describing the same concepts. Therefore, for a given concept ( sport stuff ) some documents may use the terms ( sport stuff ), other documents may use synonyms ( sport material ), and other terms that deal with the same concept, but more generally ( playing sport artifact ) or specifically ( trainer ).
  X  Identifying the relevant results : It may be difficult to detect whether a given result of the query is valid. A user. A result is also valid if it belongs to the intersection of the intended domains . Unfortunately, we do not know what those domains are, and, due to word ambiguity problems, we cannot conclude that the obtained domains are the expected ones. Hence, it is not possible to identify which results are relevant for the user and which are irrelevant.

Several research efforts have attempted to minimize these problems. Interactive approaches, such as query refinement, help the user identify better terms for a query [7,17] . These techniques show the user information related to Q W . The user then uses this information to learn more about the domain and identify better terms or concepts for the query. These techniques are also useful when the user is not certain about what he or she is searching for, and needs a conceptualization of the intended domains. For example, these techniques help the or her interests are about buying domestic cats,  X  X  X uy Persian Cat Atlanta X  X . Other approaches use linguistic repositories for minimizing the problem of query ambiguity by using synonyms, hypernyms, and hyponyms.
Nevertheless, there does not appear to be any technique that enables the user to identify when the results of the query are relevant. 2.2. Query classification
Initial experiments using the ResearchCyc knowledge base for query expansion and refinement reveal that there are some queries that cannot be improved using ResearchCyc or any other semantic repository. Recall the query where the user is searching for Nike sport shoes in Georgia. Nike is not a concept, but an instance in
ResearchCyc. The extensional information 2 of this repository indicates that it is a commercial organization with the name  X  X  X ike, X  X  and it has an affiliated called Michael Jordan. However, ResearchCyc does not give any information about what this organization sells, and therefore, the contained knowledge is useless. Thus, one of the contributions of this research is to identify classes of queries that could or could not take advantage of the knowledge in ResearchCyc. The classification takes into account the types of knowledge that are needed to improve a web query.  X  Intensional query : This type of query obtains intensional information about E ted by the necessity of the user increasing his or her knowledge. Only intensional terms should be used to define the query. For example, the query  X  X  X uy a Pet Cat X  X  is intensional because the user is interested in learning something new about buying cats, such as which kinds of shops sell cats, and guidelines for buying a cat.

Usually knowledge repositories use only intensional information to define their knowledge. Therefore, any knowledge repository that deals with the intended domains of an intensional query can be used successfully to improve such a query.  X  Extensional query : The purpose of this type of query is to obtain extensional information about E user is not interested in learning abstract knowledge, but specific knowledge. This kind of query tends to be motivated for more practical needs. In the query  X  X  X ike Georgia X  X  the user may be interested in the shops in Georgia that sell Nike products, or the Nike factories located in the country of Georgia. This query is extensional because the user is not interested in general information about USA states or commercial com-panies. The user is interested in obtaining information about particular instances of those concepts (Nike is an instance of a commercial company and Georgia is an instance of the State in USA).  X   X 
The user is not interested in the possible relationship types between the concepts, but in the real relation-ships between them. For instance, Business has a relationship type (in ResearchCyc) called parentCompany that relates one business to another business which is its parent company. In an intentional query, the user may be interested in knowing that sometimes a business may have a parent company. However, in extensional queries, the user is only interested in this relationship when there is an instance of the relationship in which Nike is a participant.

To improve this kind of query, knowledge repositories are needed that include both the intension of the intended domains, and their extension. The more extensional information the repository has, the better are the results obtained through query expansion. Unfortunately, the actual knowledge repositories do not take into account extensional knowledge; they only exemplify the intensional knowledge. Therefore, the actual knowledge repositories are useless for improving this kind of query.

An intensional or extensional query may also contain other kinds of information, which helps to contex-tualize the query. In some cases, this additional knowledge allows discarding of domains that do not fit with the user X  X  intended domains. For example,  X  X  X ike Georgia buy X  X  is an extensional query ( X  X  X ike Georgia X  X ) that contains intensional information (buy) that allows delimiting the purpose of the user: buying. On the other hand, the query  X  X  X lute Bohemian Drink X  X  is an intensional query ( X  X  X lute Drink X  X ) with extensional informa-tion ( X  X  X ohemian X  X ) that allows contextualizing our query. We are only interested in information regarding
Flute and Drink related in any way with a Bohemian instance, which may be the instance of a geographical region (Czech Republic), a music movement, etcetera.

For queries that use intensional and extensional knowledge, we need to use knowledge repositories that rep-resent both of these types of knowledge for the intended domains. Table 2 summarizes the roles of the lexical, semantic, and factual information in the query process. 3. Semantics in query processing
The use of semantic, linguistic, and factual knowledge for web queries may require common sense knowl-edge. The following shows the kind of knowledge and structure an ontology should have to improve any kind of query (extensional or intensional). These types of knowledge could be combined to form an ontology that contains, for example, the semantic information of ResearchCyc, the linguistic information from WordNet, and the factual information from the Web. The ontology could then be used to facilitate the processing of a web query. The semantic information is necessary to represent the intended domains, The linguistic infor-mation is necessary to identify the concepts that represent the query terms and to define the linguistic relation-ships (synonymy, antonymy, etc.) of such concepts. The factual information is necessary to represent the such an ontology should contain semantic, linguistic, and factual knowledge, it should be composed of a set [18] :  X  Concepts : A concept is something we have created in our mind in order to generalize the properties a set of objects have in common. A concept has an extension and an intension. The extension is the set of all its possible instances; the intension is the set of common properties of all its instances. There are two kinds of concepts:  X  Classes : A class represents concept type; it can be specialized or generalized;  X  Properties : A property relates objects, and describes their interactions or properties.  X  Individuals : These are the extension of the concepts and represent a particular concept of a real world (tan-gible or intangible).  X  Classification relationships between an individual and a concept . The fact that i is an instance of concept c (either an entity type or a relationship type) is denoted as InstanceOf ( i , c ).  X  Generalization relationships between concepts : These binary relationships organize the concepts in a tree structure using generalization/specialization. These relationships specify that a concept (child) is a subtype of another concept (parent), and therefore, the extension of a child must be included in the extension of the parent. This relationship type is an inclusion integrity constraint between the parent and the child concepts.
However, due to the important role of such relationships in the ontologies, these relationships are defined explicitly such as a relationship type.

The concepts and the generalization relationships are needed to conceptualize the intensional information about the domains to model. On the other hand, the individuals and the classification relationships are needed to represent the extensional information of our conceptualization. A concept of the ontology may represent either semantic or linguistic information. The rationale is that the ontology should represent the synonyms of each concept, when a concept is a compound name composed for two or more nouns and so on. For exam-ple, if there is a semantic concept in the ontology called DomesticPet the ontology should also contain linguis-tic information which indicate that its name is a noun comprised of two words: Domestic and Pet , and is the denotation of the word Pet.

Although the heuristics are not necessary in an ontology, they enable inference. For example, ResearchCyc defines a heuristic for the concept DomesticPet which indicates that most pets have a pleasant personality. If in a DomesticPet because there is a generalization relationship between Pet and Animal , a synonymy relation-ship between friendly and pleasant , and a heuristic which indicates that Pets tend to be friendly .
Similarly, constraints are not needed but may be useful for detecting some concepts (or contexts) for which the user is interested. For example, suppose the user is interested in obtaining information about the cat, Garfield, but does not remember which kind of animal Garfield is. The user X  X  query:  X  X  X arfield
Pet X  X  may result in irrelevant web pages because Garfield is also a surname. The disjoint integrity constraint between the concepts Cat and Person (defined in the ResearchCyc ontology) may be used to determine that the user is not interested in persons, and therefore, modify the query to discard the web pages that deal with persons.

Although most ontology languages facilitate representing instances, most of the ontologies used to support web queries neither represent the instances of the conceptualization they are modeling, nor the linguistic infor-mation about their concepts. As a result, they are not able to improve correctly the user requests that use extensional knowledge, and must use linguistic external repositories to identify which concepts in the ontology are related with the terms provided by the user. 4. Methodology
The methodology uses semantic, linguistic, and factual information from ResearchCyc and WordNet to process web queries. The two major aspects of the methodology are query expansion and query refinement. During query expansion, the query is  X  X  X xpanded X  X  with new terms to improve the retrieval performance.
The expansion is usually performed using synonyms of the initial query terms Q into account the actions or properties of the initial terms (non-taxonomic relationships) and instances (in some cases). For example, the query  X  X  Pet  X  X  may be expanded as Pet and Animal .

Query refinement is the incremental process of transforming a query into a new query that more accurately reflects the user X  X  information need [17] . The goal is not to obtain better results but to change (shrink/grow) what the user are looking for (the expected result). To do so, the user is asked to disambiguate the query after which, the query may be reformulated automatically using the semantic knowledge of the ontology. This pro-cess uses generalization or specialization relationship types as well as non-taxonomic relationships and instances. For example, the query  X  X  X et X  X  may be refined by asking the user: Supposing that the user is interested in Pet Stores in his/her area and he/she lives in Atlanta, then using the
ResearchCyc knowledge the query may be automatically redefined as:  X  X  X et Store X  X  and Atlanta and Georgia and buy .
 The proposed methodology consists of four phases: (a) Query Parsing, (b) Query Expansion, (c)
Query Refinement, and (d) Query Submission. The query parsing phase involves parsing the natural language query using POS tagging and identifying the types of terms: nouns (and noun phrases), verbs, adjectives, adverbs, etc. These terms form the initial query. The query expansion phase adds similar terms to the query and negative knowledge as appropriate. The user identifies the correct word sense and the other word senses are added as negative knowledge since the user is not interested in them. The query refinement phase reformulates the query to better focus on the necessities of the user. This is accomplished by using the taxonomic and non-taxonomic relationships in ResearchCyc. The query submission phase creates the final query according to the syntax required by the search engine used and submits the query and provides the results back to the user. The steps in the methodology are given below. After each step, the user is asked if the query reflects his/her intension. If so, the final query is constructed using the appropriate syntax and submitted to the search engine. The steps in the methodology are summarized in Table 3 .

The following example shows how concepts in ResearchCyc can be used to reason about query terms and to select an appropriate sense and terms to add to the query. Suppose the user wants to know the places to drink mate, which is a kind of tea frequently drunk in Argentina, and writes the query  X  X  X rinking mate in Bar-mate , and Barcelona . The word drinking has three senses in ResearchCyc: Alcoholic beverage, Drink as a noun and Drink as a verb (the act of drinking). The word mate has three senses with Paraguayan tea identified from Wordnet because it is not defined in ResearchCyc. We use the links between the supertypes of mate in Wordnet and ResearchCyc to identify that tea (a supertype of mate) is related to the concept Tea-Beverage in
ResearchCyc. Finally, Barcelona has only one sense: city of Barcelona. Thus, the result of the second step for the presented query is:
The above query has three senses for the word drinking. In the third step of the methodology, the second sense Drink is automatically discarded because it is the supertype of the sense AlcoholicBeverage of the same word. Here, we need user interaction to identify that we are interested in the activity of drinking instead of the alcoholic beverage. Therefore, the concept DrinkEvent is selected as the appropriated sense for the first query term. Note that the appropriate sense of the second word  X  X  X ate X  X  may be inferred automatically because Tea-Beverage is related to a particular sense of the other two words. Specifically, Tea-Beverage is related with
DrinkEvent because Tea-Beverage is a subtype of Drink, and Drink is related with DrinkEvent with a relationship that denotes that the action of drinking involves consuming a drink. Tea-Beverage is related with cityOfBarcelona because it is an instance of City, which is a subtype of Place; Place is related with Event-
Localized, which is a supertype of DrinkingEvent, with the relationship type EventOccurs. Hence, the other senses are automatically discarded from the second word of the query and added as negative knowledge.
Therefore, the third step returns the following two lists: {DrinkEvent, Tea-Beverage, CityOfBarcelona} { { AlcoholicBeverage}, {partner}, { }} The first list denotes the relevant meaning for the query while the second list represents the discarded senses.
In the fourth step of our example, the query should be expanded with the concept Spain because there is a relationship called CountryOfCity that relates CityOfBarcelona with the concept Spain. Hence, the concept
Spain has been added to the list of relevant concepts. Assume that the user does not select any refinement in this example ( fifth step ). Finally, the sixth step returns the following query: 5. Prototype architecture and implementation
The methodology has been implemented in a prototype using J2EE technologies. The prototype interfaces with Google and AlltheWeb search engines. The query expansion module and the query refinement module interact with ResearchCyc through its Java API [5] , which is used for querying the concepts of ResearchCyc and making inferences about the concepts related to user query terms.

The architecture of the prototype is shown in Fig. 2 and consists of two parts, the client side and java-enabled server side. The client is a web browser that presents the web pages created in the server side to gather informa-tion from the user and present the query results. The server side contains four major components: (1) query par-ser module, (2) query expansion module, (3) query refinement module, and (4) query generation module.
The Query Parser Module captures the user X  X  query, parses it with QTag parser ( http://www.english.bha-m.ac.uk/staff/omason/software/qtag.html ) and returns the part-of-speech for each term. From this, a baseline query is created. The Query Expansion Module interfaces with ResearchCyc knowledge sources and supports the query expansion steps. For each query term, it obtains the related concepts and the synsets and lets the user select the appropriate word sense to use. Based on the user X  X  input, appropriate synonyms and negative knowledge are added to the query. In some cases, the word sense can be identified automatically when some of the terms in the query are relationship types that relate to other concepts in the query for only one of the pos-sible senses. The Query Refinement Module interfaces with ResearchCyc and adds personal information that is relevant to the query to restrict the search domains. Based on the user X  X  selected synset, hypernyms and hyp-onyms for the selected sense of the term are obtained from ResearchCyc and WordNet. This module uses tax-onomic and non-taxonomic relationships from ResearchCyc to reason about concepts and to propose appropriate refinements to the query. When the user chooses to refine a query, the new query is sent back to the query expansion module because the refined query can be expanded with new information and further refined before being executed. The Query Generation Module creates the augmented query using the appropri-ate syntax for the search engine. Boolean operators are used to construct the final query and adequate care is taken to ensure that the final query meets the syntax requirements. The Search Engine Interface enables the final query to be submitted to various search engines and forwards the results back to the user. 5.1. Implementation
The prototype is implemented as a web application using JSP (Java Server Pages). This development envi-ronment was chosen because it would make the system portable and easily accessible through the World Wide
Web. On the client side, web pages are used to gather information from the user, such as the initial query, the user selection of the relevant senses for the query terms and the refinements to apply. On the server side, sev-eral modules have been implemented using java servlets. These modules are used to parse the query, identify the correct senses of the query terms in the ontology, identify other concepts from the ontology which are also relevant to the query, and identify possible query refinements. The query expansion module and the query refinement module interact with ResearchCyc through its Java API [5] . The query creation module interfaces with Google and AlltheWeb search engines. 5.2. Sample query
This section illustrates how our system works using a sample query. Assume that a user from Atlanta (Georgia) is looking to buy forks. Therefore, the user may pose the query  X  X  X uying fork Georgia X  X . If we exe-cute such a query in Google only one of the first 10 results is relevant to the user.

In our system, the user would type the query in the initial web page ( Fig. 3 ) and click on the  X  X  X arse Query X  X  button. The query is sent to the server and parsed to identify the query terms (the nouns and verbs contained in the query among others). The query terms in the example are { buying, fork, georgia }.

The query expansion module identifies the ResearchCyc concepts that are linguistically related to the query terms. If more than one concept is related to a single query term then the system creates a web page and sends it to the user ( Fig. 4 ). This web page shows the different meanings of the ambiguous query terms and allows the user to choose the correct sense. In our example, the term Georgia has three different meanings in the ontology: the University of Georgia, the state of Georgia in the US and the country of Georgia in Europe.
Then, the user selects the meaning Georgia-State and clicks on the  X  X  X uery Expansion and Refinement X  X  button to continue. Due to the incompleteness of the ontology, an option called  X  X  X one of the previous senses X  X  has been added to the web page. In the event that none of the senses defined in the ontology fits with the query term in the context of the query, the user can select this option.

Based on the user X  X  selection, the query expansion module identifies the concepts that can be used to expand the query. At this point, only geographical information and the part of relationship types are used to identify these expansions. Since Georgia-State is a state of the US, the query is expanded with the term the United States . The query generation module creates the final query using the denotations of the correct meaning of the query terms and their expansions. The discarded meanings are added as negative information to the query. The resultant query is
Next, the system identifies the possible refinements of the query by studying the knowledge related to the relevant concepts. When all the possible refinements have been identified, the system creates a web page that contains the created query and these refinements ( Fig. 5 ). In this example, the system presents seven refine-ments for the term fork ( Kitchenware, eating, utensil organizer, hand, grip, control, action with only one per-former ), three refinements for Georgia ( Governor, US Governor, state official ) and two for Buying ( drug trafficking 4 and invest in hedge fund ).

In the web page shown in Fig. 5 , the user has two options: 1. Generate the final query : If no refinements have been done, the user can generate the final query by clicking  X  X  X onstruct Final Query X  X . Then the final query will be created and presented to the user using the syntax of
Google and AlltheWeb search engines. The user can click on the corresponding button for the search engine that he or she wants to use. Since the query is presented in a text box, the user can modify it before submission. The results of the query are directly presented by the search engine. needs. Suppose that in our example, the user chooses the kitchenware refinement for the term fork, the query will be refined by substituting the term fork (and its negative and expanded knowledge) with the term kitch-enware. Since the user is neither interested in drugs nor in politics, he or she does not need to select further refinements for the other two terms Georgia and buying . When refinements are selected, the  X  X  X onstruct Final
Query X  X  button will be changed to  X  X  X efine &amp; Expand Query X  X . When the user clicks on this, the query is mod-ified to  X  X  X uying kitchenware Georgia X  X  and sent to the query expansion module again because the new query terms ( kitchenware ) may involve additional expansions. Since the user may also be interested in the refine-ments of the new query, the possible refinements are created and presented to the user in a web page.
Assume that, after this refinement, the user agrees with the expanded query and therefore executes it by clicking on the  X  X  X onstruct Final Query X  X  button. Then the final query is created and the user can execute it using Google or AllTheWeb search engines. Our system greatly improved the relevance of the results for this query, since there were eight relevant Web pages in the first 10 results returned for the refined query compared to only one from the initial query. 6. Validation
Sample queries have been executed with the results shown in Table 4 . The base query and the expanded query were executed in Google and the number of relevant hits in the top 10 results were identified (Relevance
Score). These sample queries show that the addition of semantic and linguistic knowledge helps improve query results.

In the first query the user searches information about bohemian flutes, which are glasses made in the bohe-mian region (Czech republic). This query returns a lot of information about flutes (the tube-shaped musical instrument). In the second query, the user is interested in the relationship between suicide and sadness emo-tions of people. In the third query, the user is interested in information about biscuit stores. Executing this query using a search engine yields irrelevant results because a cookie is also a web technique used for storing information in a user X  X  computers. The fourth query returns web pages about the sailors that performed piracy during the 17th, 18th and 19th centuries. However, the user is interested in the punishments for piracy, the illegal copying of copyrighted material. The fifth query returns a great deal of irrelevant information regarding vehicles and traveling. In the expanded query the possible meanings of the term coach is narrowed down and therefore the query results are improved. In the sixth query, the user wants to download images of sunsets in order to put them as wallpapers in his or her computer. Since our tool allows refining the term image to wall-paper , some of the results that dealt with screensavers can be discarded. The seventh query does not produce good results because the phrase monkey virus is ambiguous. There is a computer virus and a biological virus with the same name. In the refined query, the user indicates a preference for the biological virus sense. In the last query, the user is looking for the history of buccaneers. Some of the results obtained deal with the football team Tampa Bay Buccaneers . In all of the above queries, the refinements proposed by our system improve the query results. 7. Discussion
The use of ResearchCyc has been successful for improving web querying. However, the quantity of infor-mation contained in ResearchCyc and the lack of mechanisms for accessing ResearchCyc in an efficient man-ner made it difficult to work with. Several difficulties arose when integrating ResearchCyc into the prototype.  X  Documentation : There is little documentation that identifies different classes within the API and how to use them. In some cases, the only way to identify relevant functions is to examine the source code of the API.
For example, although there may be a function in the API that returns the concepts that represent the meanings of term ( getDenotationsOf ), it is not defined in the API documentation. Therefore, one must inspect the source code of the API (the class CycAccess ) to discover its existence.  X  Operating Environment : There are problems running ResearchCyc on different operating systems. Specifi-cally, we were unable to run the API under Windows XP or Debian GNU/Linux.
 Other problems arose that were based on the type of knowledge and the level of detail of its description.
First, there is a lack of domain information. Although ResearchCyc is a huge ontology, there are many domains that it does not cover. For example, in the query  X  X  X rink mate Barcelona X  X  the user is interested in a tea originally from Paraguay. Unfortunately, ResearchCyc does not contain a concept that describes such a tea and therefore other ontologies must be used to fill this gap.

Second, there is a lack of linguistic information. For example, ResearchCyc does not have well-defined denotations of all the concepts; only a few synonyms and antonyms are represented. Third, ResearchCyc does not always use terminology that is the most commonly used in the real world. The results in misaligned queries that are difficult to execute. Fourth, ResearchCyc does not distinguish how close different pieces of extensional information are to a given term. When a term has different senses, the user identifies the correct sense to use and irrelevant senses are used as negative information in the query. This heuristic may cause problems when applied to extensional knowledge. For example, suppose we are interested in knowing the hobbies of the former US president Bill Clinton and therefore create the query  X  X  X linton hobbies X  X . There are several instances in ResearchCyc that have Clinton as surname: William Clinton , Hillary Clinton and Chelsea
Clinton . If we choose William Clinton , the rest of the instances are used as negative knowledge. This will eliminate web pages that have his wife or daughter X  X  name, even though they may contain information about the hobbies of Bill Clinton .

Hence, ResearchCyc is most effectively used with other knowledge sources such as WordNet to improve web querying. 8. Related work
Since traditional search engines do not deal with any domain knowledge, they do not understand the meaning of user X  X  query and the inherent relationships between its terms [19] . Present search engines are trying to overcome these problems in different ways. One way is to deduce the context of the web query from its query terms. For example, if the query contains a U.S. street address or a city, the search engine can provide direct links to maps and several web pages related to the city. As web search becomes a more important function within society, the need for better search services is becoming increasingly important [20] .

Due to the diversity in content and structure of the web, novel techniques are needed to create more focused queries. Some query expansion and refinement techniques use conceptual fuzzy sets [21] . Although several approaches to improve web queries through query expansion are reported in the literature, we discuss only the ones closest to our approach, specifically [11,5] .

Zhang et al. [11] present an approach that disambiguates user queries by analyzing the  X  X  X elationship X  X  con-text associated with query concepts. Their method uses a domain ontology to support the whole activity. The paper presents a set of pattern queries that try to represent the different ways in which the relationships and concepts can be posed in a query. The presented methodology is somewhat similar to ours in that it identifies relevant concepts and relationship types involved in the context of the query. However, this approach has sev-eral weaknesses: (a) The patterns they present may be useful to identify the concepts and the relationship types from written (b) Their approach is context (or domain) dependent and may not be generalizable. The query context (c) The manual intervention needed in their methodology is quite high. In large domain ontologies such as (d) Due to the lack of good ontologies in most domains, the approach can be successfully applied in only
In [5] , Burton-Jones et al. present a methodology for context aware query processing on the Web. Their methodology enhances the semantic content of Web queries using two complementary knowledge sources: lex-icons and ontologies. The methodology constructs a semantic net using the original query as a seed, and refines the semantic net with terms from the two knowledge sources. The enhanced query, represented by the refined semantic net, can be executed by search engines. Their empirical evaluation shows that queries suggested by their system produce more relevant results than those obtained by the original queries.
Their work demonstrates the use of existing knowledge sources to enhance the semantic content of Web queries.

This approach is very similar to ours; however, it has some limitations. One of the issues with this approach is the way in which the final query is constructed. In some search engines, such as Google, the order of the terms in the web query determines greatly the results of the query. For that reason it is possible that their extended query may result in more irrelevant web pages, even though the extended query is more focused on the user X  X  intents. Another limitation is the use of DAML Library, which contains a number of classes dis-persed among different ontologies. The number of interconnections between concepts (such as the number of relationship types per concept) is lower than the number of interconnections that exists in our support ontol-ogy, namely, ReseachCyc. Therefore, less manual intervention is involved in our approach. Furthermore, another difference is that [5] does not include refinement activity.

Some query refinement methods have not been successful because they are syntactic based [7] . However, some semantic refinement approaches are beginning to appear. The closest one to our approach is by Hart-mann et al. [7] , which defines an architecture that realizes semantic-based search to access information repre-sented in semantic portals (called SEAL). Their approach uses query refinement techniques to refine the logical queries provided for the users. They present a set of heuristics that direct the query refinement. The main difference between this approach and ours is that the search is performed on a knowledge base instead of the web. The main drawbacks of this method for applying it to the web context are: (1) since the ontology used is in OWL-DL, it cannot take advantage of general constraints and heuristics; (2) some of the assump-tions made in this work do not hold in the case of web search; (3) the support ontology used cannot have mul-tiple inheritance. This is a serious drawback, since most large and meaningful domain ontologies use multiple inheritance; and (4) this approach is specific to the SEAL technology and its generalizability to the web con-text is unclear.

Another approach that uses query expansion and refinement, but with different goals, is [6] . It focuses more on how to create a small lattice of concepts to support query expansion and less on the methodology to use such a lattice. On the other hand, our approach focuses on how to group and use the knowledge contained in large knowledge bases to improve the query meaningfully and efficiently. 9. Conclusion
A methodology for employing ResearchCyc, a body of semantic knowledge about various application domains, has been presented. The methodology is based on prior research on semantic, linguistic, knowledge repositories. The methodology has been implemented in a prototype and applied to web queries. The prelimin-ary results from the prototype are encouraging, however, further validation using different types of queries and domains is required to provide more conclusive evidence. Further work is also needed to determine the circumstances under which the approach may not yield good results.

This research contributes to the improvement of web queries in several ways. First, it demonstrates that semantic and linguistic knowledge together improve query expansion. Second, the research identifies and for-malizes web-query problems and presents a query classification scheme that explains why, in some cases, query expansion may not be successful, even if the repository used to support such a task is complete. Third, the research illustrates that an ontology structure should contain concepts and generalization relationships to rep-resent both intensional and extensional information. The inclusion of heuristics and integrity constraints facil-itates inferencing on new information to create intelligent queries.

Although ResearchCyc contains useful knowledge for supporting web queries, it is most effective when aug-mented with linguistic information from WordNet and factual information from the World Wide Web [14,15] .
Future research will concentrate on expanding the heuristics of the methodology and automating different aspects of it (e.g. sense disambiguation). It will also examine the feasibility of integrating ResearchCyc with other ontology libraries and with other search engines. Acknowledgements
This work has been partly supported by the Ministerio de Educacion y Ciencia under Project TIN 2005-06253, Georgia State University, and Oakland University.

References
