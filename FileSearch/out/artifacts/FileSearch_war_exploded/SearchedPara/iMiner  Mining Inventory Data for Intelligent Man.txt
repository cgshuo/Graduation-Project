 Inventory management refers to tracing inventory levels, or-ders and sales of a retailing business. In the current retail-ing market, a tremendous amount of data regarding stocked goods (items) in an inventory will be generated everyday. Due to the increasing volume of transaction data and the correlated relations of items, it is often a non-trivial task to efficiently and effectively manage stocked goods. In this demo, we present an intelligent system, called iMiner ,to ease the management of enormous inventory data. We uti-lize distributed computing resources to process the huge vol-ume of inventory data, and incorporate the latest advances of data mining technologies into the system to perform the tasks of inventory management, e.g., forecasting inventory, detecting abnormal items, and analyzing inventory aging. Since 2014, iMiner has been deployed as the major inven-tory management platform of ChangHong Electric Co., Ltd, one of the world X  X  largest TV selling companies in China. Categories and Subject Descriptors: H.2.8[Database Applications]: Data Mining Keywords: Inventory Management; Inventory Forecasting; Anomaly Detection; Inventory Aging
Inventory management is often an indispensable process for most retailing companies, as it has the functionalities to avoid product overstock and outages. It refers to the gen-eral process of monitoring the fluctuant flow of goods (items) into and out of an existing inventory. This process usually generates two types of time series data, representing the amount of stock in/out evolving over time. Complete inven-tory management also seeks to control the costs associated with inventory operations [10].

In current retailing businesses, a huge amount of items are often stored at different locations of a supply network to precede the planned course of sales. For example, in our demo case, the retailing vendor has 251,874 items in total, with 132,140 transactions daily on an average. The increasing volume of such data renders it difficult to man-ually manage the inventory, e.g., to specify the shape and percentage of stocked items. In addition, some items may have correlations with others. For example, when a customer is buying a TV, he/she may also choose multiple auxiliary products, e.g., TV mount or DVD players. Such correlations further increase the difficulty of efficient inventory manage-ment. Existing inventory management softwares, such as inFlow 1 and Inventoria 2 , provide functionalities to facilitate businesses to manage the inventory. However, most of these systems only rely on statistical analysis of the existing in-ventory data, and have very limited capability of intelligent management, e.g., forecasting item demand and detecting abnormal patterns of item inventory transactions.
To address the limitations of existing systems, we de-sign and develop iMiner to assist retailing businesses in efficiently performing inventory management. iMiner pro-vides a set of key functionalities that help businesses con-veniently and effectively manage huge volume of inventory data. Specifically, the system has the following merits:  X  Efficient support of large-scale inventory data analysis .
The analytical platform is built on a distributed system (FIU-Miner [9]) to support high-performance data analy-sis. The platform manages all the transaction data in a distributed environment, which is capable of configuring and executing data preprocessing and data analysis tasks in an automatic way.  X 
Effective management of complex analysis tasks . iMiner integrates appropriate data mining algorithms and adapts them to the problem of analyzing inventory data. In par-ticular, the system 1) adopts various regression models and combines them with time series data analysis to ful-fill the task of inventory forecasting ;2)employscontext-aware anomaly detection algorithms to identify abnormal items ; and 3) utilizes statistical regression models to per-form inventory aging analysis . iMiner has been designed and developed by a research team consisting of 12 members for one year. The system is designed under the following principles: 1) The methods used in the system should provide accurate, and more im-portantly, interpretable results; 2) The system should pro-vide users with interactive functionalities; and 3) The system should be able to handle large-scale data analysis. A demo http://www.inflowinventory.com. http://www.nchsoftware.com/inventory. can be found in http://matrix.cs.fiu.edu/iMiner. Figure 1 presents an overview of the system architecture of iMiner The system is composed of four layers: User Interface , Data Analysis Layer , Task and System Management Layer ,and Physical Resource Layer . Figure 1: An overview of the system architecture.
Existing inventory management softwares have two limi-tations when applied to the practice: 1) They do not support handy algorithm plug-in; and 2) They do not support large scale analysis tasks running in parallel in heterogeneous en-vironments. Task and System Management Layer provides a fast, integrated, and user-friendly system to address the aforementioned limitations, where all the data analysis tasks in Data Analysis Layer can be configured as workflows and automatically scheduled. This system is built on our previ-ous large-scale data mining system, FIU-Miner. More details of this system can be found in [9].

Data Analysis Layer consists of appropriate data mining solutions to the corresponding tasks of inventory manage-ment, including Inventory Forecasting , Anomaly Detection , and Inventory Aging Analysis . In Section 3, more details are provided by presenting our data mining solutions customized for inventory management tasks. The system also provides basic data processing and exploration functionalities.
User Interface contains various interactive interfaces for inventory operations. Specifically, it provides Dashboard and Statistics Interface to allow users to have an overview of the current inventory status. In addition, several key in-dices of inventory, e.g., turnover rate and stock-to-use ratio, are presented in Inventory Index Interface , assisting users in promptly querying the status of a particular item.
The primary goal of inventory forecasting is to minimize the inventory loading. Excess inventory is sub-optimal as it requires additional maintenance and cost. Hence, in in-ventory management, it is imperative to perform accurate forecasting so as to reduce the inventory investment and risk of obsolescence. A common practice of inventory fore-casting is to predict the demand of a specific item in the future, and reserve the amount of item based on the fore-casting result. This often refers to as demand forecasting. In existing solutions to this problem, this is often achieved by calculating past averages. However, the demand of an item is determined by not only contemporary comparison, but also a list of factors, such as seasonality, trend, and special events. Hence, a much more accurate and optimal forecasting method is expected.

To this end, we design and implement a forecasting mech-anism in iMiner based on the past inventory transaction data. It takes as input the past transaction data of an item (as a real-valued time series), and processes the data into a list of instances. In each instance i , the amount of stock out of the item in timestamp i is treated as the label, and the val-ues of stock out in i  X  X  previous k timestamps are regarded as the features. We then utilize various regression algorithms, such as Neural Network, Linear Regression, SVM [2], Gaus-sian Process [7], regression tree [1], and gradient descent re-gression tree [3], to build regression models with optimized parameters for each item. These models are updated in a daily basis. An ensemble method [8] is employed to aggre-gate the predictions of these models.

The obtained result from the ensemble is purely originated from the perspective of the data itself, without consider-ing the characteristics of inventory forecasting. To enhance the interpretability of forecasting, we treat the ensemble re-sult as the forecasting basis, and further propose a dynamic model that takes into account various factors of inventory data, including seasonality, trend, and special events. Sea-sonality refers to the portion of item demand fluctuation accounted for by a reoccurring pattern [6]. In inventory management, such patterns often repeat over time. Com-paratively, trend is the portion of item demand without re-occurrence. For instance, a trend may show a period of growth followed by a leveling off. Special events, such as holidays and sales promotion, may have great impact on the demand of items. These factors are integrated into an interactive interface shown in Figure 2 to provide dynamic prediction for demand forecasting.

Figure 2: Dynamic forecasting of item demand.
Monitoring inventory index for anomaly detection is a very important task in inventory management. This prob-lem becomes further difficult in the Big Data era as the data scale increases dramatically and the type of anomalies gets more complicated.

In our system, in addition to providing traditional statisti-cal methods (e.g., parametric and non-parametric methods) and proximity-based methods [5], we also design and de-velop a context-aware anomaly detection method to identify abnormal items in inventory data. The data in inventory management includes both transaction data (i.e., time se-ries) and item-related data (i.e., item catalog and descrip-tion). We combine transaction data and product-related data and identify context clusters as items having similar transaction behaviors with similar item attributes. An in-stance (i.e., an item in a time interval) is anomalous if it is far away from any context clusters. To identify context clus-ters, we make use of spectral clustering where the similarity between transaction data (measured by their principal com-ponents) and the similarity between the item-related data (measured by their textual attributes) are combined with a learned kernel [4].

Our system builds the unsupervised model of context clus-ters based on a training set and then applies the model for new test instances. New test instances arriving every day can be cross-checked with the learned model and the model can also be updated with the new data. Figure 3 shows an example of the anomaly detection interface.

The main purpose to monitor and analyze inventory ag-ing is to prevent items from overstocking and reduce the overstocked items. In our system, an overstocked item at the time t is an item with the amount more than x %(e.g., 30%) over y (e.g., 6 months) old, where x and y can be set by users. We provide in the system both basic tools and advanced tools to analyze the inventory aging.

The basic tools allow users to visualize inventory aging distributions of a given item and compare current and his-torical inventory aging changes among different items. The advanced tools are able to help users find attributes of items correlated with overstocking. This further allows users to monitor the related attributes, and especially pay attention to those items of which the value of the related attribute is above or below a predefined threshold.

To indicate how related the item attributes are with over-stocking, we model it as a feature selection problem. For each item and each timestamp when the item exists in stock, we generate a data sample, ( x i ,y i ), where x i are the at-tributes of the item and y i is the label with value 1 indicating the item at that time is overstocked, and value 0 otherwise. The label information can divide the entire item collection X to overstocked items X 1 and non-overstocked items X 0 . The system integrates several feature selections methods in-cluding Information Gain, mRMR and ReliefF to rank the attributes, and allows users to configure which one will be used at running time. For each attribute, users can further compare its histograms on X 1 and X 0 to obtain a more in-tuitive sense of the relationship between the attribute and overstocking.

Using the related attributes, users can impose queries to retrieve the items that are likely to overstock and put them into the monitoring list. Figure 4 shows the interface of querying items using multiple attributes. A query is a logical conjunction of a set of literals, each of which corresponds to an attribute. For a continuous attribute a , its literal is in the form of L a  X  a  X  H a ,where L a and H a are the lower and upper threshold of the attribute a ,respectively. Fora discrete attribute, the condition is in the form of a = V where V a is the given value of a . Given a literal for an attribute a , we can retrieve a subset of the items X a  X  X . To help users compose the query, for attribute a ,the system recommends a literal as [ L  X  a , +  X  ]or[  X  X  X  ,H  X  continuous attributes and V  X  a for discrete attributes, with the goal of maximizing the probability of overstocking in the corresponding subset p ( y i =1 |X a ).
 Figure 4: Attributes in inventory aging analysis. The work was supported in part by the National Science Foundation under grants D BI-0850203, CNS-1126619, and IIS-1213026, the Army Research Offic e under gra nts W911NF-10-1-0366 and W911NF-12-1-0431, and an FIU Dissertation Year Fellowship.
