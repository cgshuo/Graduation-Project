 Recent years have witnessed the growth of community detection as one of the ma-jor directions in social network mining. A community can be defined as a group of users sharing some common properties. As users migrate from a community to another, communities could form and dissolve. As a result, social networks in real life are highly dynamic with evolving communities. In this paper, we are particularly interested in the discovery of community transition of individual users in social networks. This study is important for understanding user be-havior patterns, which can be used to support many real-life applications. For example, in targeted marketing, users X  migration to another online community often foretells the emergence of new inter ests and, accordingly, new opportunities for marketing [1, 2]. Similar applications can also be found in churn prediction in which the detection of community transition within a sliding window could indi-cate a user X  X  potential service switch. Furthermore, the discovery of impending migration is useful in social identity linkage across social networks [3].
Unfortunately, most of the existing methods on community mining assume an underlying social network which is static [4 X 9]. Though there are some re-cent studies to investigate the dynamics of social networks [10 X 13] and model dynamic communities based on community structure, most of them do not ex-amine user interaction, which is in fact one of the most important dynamics of a social network [14]. For instance, in a social network like Twitter, interactions of tweeting and retweeting form conversations, which propagate information within and across communities. In this paper, we define a sequence of individual inter-action networks snapshots to model dynamic communities.

To the best of our knowledge, very few studies have been devoted to the problem of discovering community transitions. The problem is challenging in that (I) The transition between communi ties is, in general, an irregular and infrequent event for an individual user, which adds an extra degree of difficulty for detection due to the absence of regula r patterns; and (II) A single observed interaction may not substantiate a user X  X  immediate inclination. For example, the chat with an insurance agent does not always indicate that the user is inclined to buy insurance.

In summary, we make the following contributions in this work. We formalize the problem of community transition discovery for social network users. A trajec-tory is built to represent users X  community evolution. We propose an automatic trajectory segmentation method based on the principle of Minimum Description Length (MDL) [15], which frees our solution from user-defined parameters such as the number of segments or the threshold to report a transition. Furthermore, our method can detect transitions in a noisy environment by replacing the noise with the underlying real observation. The framework of our method is illustrated in Figure 1. The experiments demonstrat e the efficiency and effectiveness of our approach in discovering the community transition on real datasets.

The remainder of the paper is organized as follows. In Section 2, we define the underlying interaction network, community evolutionary trajectory and tra-jectory segmentation. Then we design an encoding scheme to determine a good segmentation of the community evolut ionary trajectory i n Section 3. Section 4 presents the corresponding algorithms, and we report the experimental results in Section 5. Section 6 reviews the related work and Section 7 concludes the paper. In this section, we present the preliminaries and formulate the problem. V ( G ). We term a graph G as an ego network if a node u 0  X  V ( G ) satisfying for labels, a labeling function, L ( V ) '  X   X  ,mapsnodesin G to labels in  X  .
Given such an underlying ego network G , we define a ij as an interaction between two users u i and u j , which is attached with a weight representing the frequency of interactions between the two users. Such interactions, for example, can be emails or replies.

Consider an ego network G which is evolving over time, we use G ( t ) to repre-u  X  V ( G ( t ) ) is associated with a set of labels  X  ( t )
In this paper, community is defined as the subgroup of users sharing the same properties, then we group the users with a same label into a community. Given with a community has more to do with that community and therefore we introduce the notion of dominant community which denotes the community with maximal interactions.
 Definition 1 (Dominant Community). The community which has the maximal interactions with user u 0 at i -timestamp is defined as the dominant community D ( i ) . We define the community activity to measure the frequency of interactions, which is computed as the ratio of intra-community interactions to the total number of interactions at i -timestamp, i.e., where the minimum is 0 indicating no interaction within this community, while the maximum is 1 representing no interaction outside this community.
Tracking dominant communities along t he sequence of interaction network snapshots enables to discover valuable knowledge about the behavior evolution regarding to communities in social network. To motivate this, we construct a community evolutionary trajectory using the sequence of dominant communities. Definition 2 (Community Evolutionary Trajectory). A community evo-lutionary trajectory of length t for user u 0 is a sequence consisting of t dominant communities, i.e., where each trajectory element L i is the label of the dominant community D ( i ) .
There are two reasons to construct the evolutionary trajectory using dominant communities: 1) The communities within wh ich the users interact frequently are more important, which reveals stronger correlation between users and communi-ties. 2) Community evolution trajectory provides an efficient method to study the community evolution. Traditional algorithms with regard to community evolu-tion problems are of high computational complexity. Tracking how communities evolve over time based on sequence reduces the complexity by mapping complex graph structure into a community label, which is more efficient, especially in large social networks.

In order to track the evolution of communities transitions, we partition the community trajectory into a finite set of segments, and each segment has the maximal discriminating power. The goo dness measurement of the segmentation will be made precisely in the next section, which formulates our cost objective function.
 Definition 3 (Community Trajectory Partitions). For a trajectory T of by L i...j for 0 &lt;i  X  j  X  t . The set of consecutive communities which are assigned into the p -th segment 1  X  p  X  n is denoted by T p . The partitions do not overlap, in the sense that T p T p = ( for p = p . Given two consecutive L (
T
Based on the above definition, the partition of a sequence can be regarded as a 1-dimensional classificaiton problem, and the best partition is a set of ho-mogeneous segments, within which there exists the communities with the same label. We treat a community evolutiona ry trajectory as a sequence, an encod-ing scheme is proposed to describe the sequence. As a perfect segment is the repetitions of the same character, we ca n use fewer characters to describe the sequence, which leads to a smaller encod ing cost. According to the Minimal De-scription Length (MDL) principle, the best encoding scheme is the one which leads to the minimal encoding cost. The problem of finding a good partition can be converted to the proble m of determining a good encoding method. Thus, we define the problem as follows:
The goal: Given a community evolutionary trajectory T , find the best par-tition P ( T ) by identifying a set of change points, which leads to the minimal encoding cost.
 To achieve the goal that finding the best partition with minimal encoding cost, a lossless encoding scheme is introduced . Consider a lossless compressor that output s from s , s can be seen as another description of s .If s is shorter than s ,then s is a better description than s , which gives a smaller encod-ing cost. Given a community evolutionary trajectory, our target is to identify a set of change points that leads to the optimal partition. The problem can be rephrased as to pick up the unreasonable change points. The unreasonable change points mainly consist of the noisy ones. For example, given a trajec-tory T = NNNUNNNAUUUUUUU , the first occurring  X  U  X  X nd X  A  X  X an be considered as such noisy change points, and the optimal partition should be {{ NNNUNNNA } , { UUUUUUU }} . Under the MDL principle, we design a cost objective function with two parts , the first one is the cost to encode the optimal segmentation, and the second is the cost to identify the unreasonable change points. 3.1 Segment Encoding We start by converting the trajectory i nto a sequence whose elements are nu-merical characters. Let Num be the function that maps each community la-bel to a numerical character L i '  X  Char ( j ). For example, given a trajectory T = NNNNNSNNUUUU , and Num maps each label to a character as follows: ( S, 0) , ( N, 1) , ( U, 2), so that we have the corresponding sequence S = Num ( T )= 111110112222. After converting the trajectory, we introduce how to encode the trajectory segments.

As our goal is to decompose the trajectory into best segments, each segment can be seen as a repetition of some characters. For example, given an input sequence: S = 111110112222, our encoding schema partitions this sequence into be encoded into two fields, encoding the repeating character symbol into one field, and the length of the segment in the other:  X  Len ( S p ): the length of segment S p .

Note that, Char S p ( j )and Len ( S p ) is constant, which has no effect on the final segmentation. To facilitate the encoding, we define the entropy for a sequence under a partition S p as where x is the element in S , p ( x ) is the probability of x that appears in S . E ( S ) measures how homogeneous the sequence is. The minimum of E ( S )is 0 when all the elements are the same, and the maximum is log | S | when the sequence is a pure random sequence. Thus, we obtain the segment encoding cost as the follows: Definition 4 (Segments Encoding Cost) where m is the number of bits needed to encode a segment. The cost is a sum of encoding cost of all the segments. 3.2 Identifying the Unreasonable Change Points Given a trajectory with a set of change points, the cost of identifying the change point is heavily related to the occurrence frequency of the corresponding com-munity. For instance, given a trajectory T = NNNUNNNAUUUUUUU ,ob-viously, the cost of identifying the time that  X  A  X  appears as an unreasonable change point is much less than the one to identify the first time  X  U  X  X ppears, as we need to consider eight candidate  X  U  X  in order to identify. Thus it leads to more cost to substitute the community which occurs frequently in the trajec-tory. It is also sound to interpret this with our problem statement, more penalty should be given to treat a frequently o ccurring community as a noise. The encod-ing scheme for a substitution is encoded in a way similar as a segment encoding, which includes:  X  Sub S p ( k,k ): the substitution of character k for k ,
Similarly, the description complexity for substitution T is constant, which is equal to the encoding cost of a segment. Thus, we obtain the substitution encoding cost as the follows: Definition 5 where m is the number of bits needed to encode a substitution. The cost is a sum of encoding cost of all the substitutions.

Given a community evolutionary sequence S , our goal is to partition it into a number of segments, and compress each segment which leads to a minimal encoding cost. The total encoding cost is the sum of the segments encoding cost and the cost of all the substitutions. We formulate the total encoding cost in the following: Definition 6 (Total Encoding Cost) b -th substitution.

In the next section, we present a search algorithm to find the optimal solution, based on the cost objective function.
 In this section, based on the encoding scheme and cost function introduced in section 3, an algorithm is introduced to find the optimal segmentation in the presence of noise. Algorithm 1 is to find all the change points existing in the trajectory. The change point is a point in the trajectory that is different from the one located in the immediate left/right. The algorithm we apply to find the optimal segmentation is basically to substitute some unreasonable change points in order to find the optimal partition under the measurement of the cost function. Algorithm 2 presents the approximate algorithm to achieve the target. Basically, we use Depth-First Search (DFS) to search for the optimal partition from the answer space. Procedure OP presents the search logic with one node in the search tree. Given the current partition, OP constructs the change point sets for both two directions, PL and PR. Then OP tries to substitute each of them with the character which makes it distinguished, i.e., the substitution merges one change point into the segment left or right to it. After the substitution, OP computes the encoding cost of the new partition. If the encoding cost is smaller than the value of the original partition passed to OP, OP is recursively called with the new partition. Global value minCost and minString are used to store the answer. They are kept updating during the whole search procedure, with the minimal cost and its corresponding partition.
 1: procedure FCPL ( S , P ) 2: P  X ( 3: cur  X  S 0 4: for i  X  1 , | S | do 5: if cur = S i then 6: cur = S i 7: P  X  P S i 8: end if 9: end for 10: end procedure In this section, we will evaluate our method on real, large social network datasets. We perform the experiments on a PC with a Intel(R) Core(TM) i5-2300 2.80GHz CPU and 12GB RAM and the algorithm is implemented with JAVA.
 5.1 Dataset We conduct our study on the Renren Network dataset 1 . Renren Network is a leading social networking service in China, which is similar as Facebook. As Ren-ren is one of the largest real name based social network in China, and Renren user provides a list of education background in their profiles, thus we can ob-serve the evolution of their communities through the observation of interactions with different groups of friends along with the evolution of users X  identities. The dataset consists of more than 16 million replies to 6,437 users X  status posts, and the profile information of 690,926 unique users are involved in the dataset.
The interaction network snapshot I ( t ) is constructed from the observed reply messages, each edge in the network corresponding to a reply between two users. We use a window size of one day to construct the interaction network snapshots, and then generate the community evolut ionary trajectory based on the network snapshots. The education and occupation information are chosen as the labels of users, and each label is associated with a time period constraint. The users with the same label are grouped into a community in each network snapshot, the community with the maximal community activity is selected as the element of the trajectory. The statistics of Renren dataset is shown in Table 1. 5.2 Effectiveness In this subsection, we evaluate the effectiveness of our method for finding optimal segmentation in the following two experiments.

In the first experiment, we match the reasonable change points identified by our method with the ground truth provided by the labels in users X  profiles. More specifically, we compute the smallest difference (day) between the results with any change point in the ground truth. The variance of the results is reported in Figure 2. We can observe that most dots lo cate in the left side, indicating our method has a high accuracy. Many dots gather in the lower left corner, which demonstrates our method can detect the transition happened in the latest two months. The dots in the right part present the cases of low accuracy, which could be due to the delayed update or data missing of their profiles for some users. The other reason is due to the short sequence generated from inactive users.
Secondly, we estimate our method under different tolerance window. The tol-erance window is created by moving the change point on the left and right with the distance of the tolerance value. Then we determine if any change point in ground truth falls within that window. The comparison of the accuracy with different tolerance from 7 to 105 days is listed in Figure 3. We can observe an obvious increase of accuracy along with increase of the tolerance window. The results show that our method can achieve 60%  X  70% accuracy when the window is smaller than 35 days, and t he accuracy can reach to 75%  X  87% when the size of tolerance window is between 47 and 62 days. The results showed in Figure 3 is consist with what we observe in Figure 2.
Furthermore, we display a comparison of the original trajectory and the tra-jectory generated by our method in Fig ure 4. Figure 4(a) shows an example of the original trajectory, each colour ar ea corresponds to a segment of consecutive identical dominant communities. A rough transformation of communities can be observed in Figure 4 (a). Our method substitutes the noise observation with the underlying real behavior, and nicely generates a set of segments representing a community evolution as shown in Figure 4 (b): SchoolA  X  SchoolB  X  SchoolC . 5.3 Scalability We illustrate the running time for different number of snapshots in Figure 5. As shown in Figure 5, the near linear run time complexity demonstrates the high scalability of our method. Several papers have studied on the community evolution in social networks. In general, we consider three broad class of temporal analysis on online commu-nities: 1) properties or phenomena of evolving community analysis, 2) stage of dynamic community identification, 3) dynamic community detection and the community changes identification. In the first class work, Leskovec et al. [16] discovered the shrinking diameter phenomena on time-evolving networks. In the second class work, Palla et al. [17] quantifies the events in community evolu-tion: growth, merging, birth, contraction, splitting and death. In the last class work, Tang et al. [11] proposed a clustering algorithm to mine the evolution of communities in social network with multiple entities. Aggarawal and Yu [18] proposed a method to find community changes in dynamic graphs, which re-quires user-specified parameters. Sun. et al. [19] and Ferlez at al. [20] proposed a parameter-free framework to discover communities and community changes in dynamic networks, relying on the MDL principle. Overall, all the above stud-ies have a drawback that they cannot det ermine the evolution of users across communities individually, they all track the evolution of the whole network. In this paper, we propose a parameter-free method to discover the community transition for individual users in dynamic networks. We start by constructing a trajectory to represent the evolution of communities, then a trajectory segmen-tation approach is proposed to discover the best partition, based on the MDL principle. Our method is automatic, which requires no user-specified parameters, like the threshold of a transition and the number of segments. Furthermore, our method is adaptive to distinguish between the noise and underlying true behav-ior. The experiments on real dataset show that our method has a high accuracy to find the community transitions, and our method is fast and scalable.
Our paper is a preliminary study on the detection of community transition, which still needs a lot of improvements. First, we should improve the method by incorporating all the communities evolved in the user X  X  interactions, and detect-ing long-term transition and short-term transition. Second, we should enlarge the experiment by evaluating our method on different datasets, and comparing some state-of-art methods.
 Acknowledgement. This research has been supported by the Singapore Na-tional Research Foundation under its International Research Centre @ Singapore Funding Initiative and administered by the IDM Programme Office, Media De-velopment Authority (MDA) and the Pinnacle Lab at Singapore Management University.

