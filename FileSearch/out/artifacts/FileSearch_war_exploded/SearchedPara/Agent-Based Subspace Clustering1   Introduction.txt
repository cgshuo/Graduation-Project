 As an extension of traditional full-dimens ional clustering, subspace clustering seeks to find clusters in subspaces in high -dimensional data. Subspace clustering approaches can provide fast search in different subspaces, so as to find clusters hidden in subspaces of a full dimensional space.

The interpretability of the results is highly desirable in data mining appli-cations. As a basic approach, the clustering results should be easily utilized by other methods, such as visulization techniques. In last decade, subspace clus-tering has been researched widely. Howev er, there are still some issues in this area. Some subspaces clustering, such as CLIQUE [3], produce only overlapped clustering, where one data point can bel ong to several clusters. This makes the clusters fail to provide a clear description of data. In addition, most subspace clustering methods generate low quality clusters.
 In order to obtain high quality subspace clustering, we design a model of Agent-based Clustering on Subspaces (ACS). By simulating the actions and in-teractions of autonomous agents with a vi ew to accessing their effects on the sys-tem as a whole, Agent-based subspace clus tering can result in far more complex and interesting clustering. The clusters obtained can provide a natural descrip-tion of data. Agent-based subspace clustering is a powerful clustering modeling technique that can be applied to real-business problems.

This paper is organized as follows. Section 2 gives the background and re-lated work of subspace clustering. Sect ion 3 presents our model of agent-based subspace clustering. The experimental results and evaluation are given in Sec-tion 4. An application on market manipulation is also provided in Section 4. We conclude the research in Section 5. The goal of clustering is to group a given set of data points into clusters such that all data within a cluster are similar to e ach other. However, with the increase of dimensionality, traditional clustering methods are questioned. For example, the traditional distance measures fail to diff erentiate the nearest neighbor from the farthest point in very high-dimensional spaces. Subspace clustering was introduced in order to solve the problem and identify the similarity of data points in subspaces.
According to search strategy, ther e are two main approaches to subspace clustering: bottom-up search methods and top-down search methods.

The bottom-up search methods, such as CLIQUE[3], ENCLUS [5] and DOC[9], take advantage of the downward closure property of density to reduce the search space by using an APRIORI style approach. Candidate high-dimensional sub-spaces are generated from lo w dimensional subspaces which contain dense units. The searching stops when no candidate subspaces are generated. The top-down subspace clustering approaches, such as PROCLUS [1], FINDIT and COSA, starts by finding an initial approximation of the clusters with equal weight on full dimensions. Then each dimension is assigend a weight for each cluster. The updated weights are then used in the next iteration to update the clusters. Most top-down methods use sampling techni que to improve their performance. The CLIQUE algorithm [3] is one of the first subspace clustering algorithms. The algorithm combines density and grid based clustering. In CLIQUE, grid cells are defined by a fixed grid splitting each dimensions in  X  equal width cells. Dense units are those cells with more than  X  data points. CLIQUE uses an apriori style search technique to find dense units. A cluster in CLIQUE is defined as a connection of dense units. The hyperr ectangular clusters are then defined by a Disjunctive Normal Form (DNF) exper ssion. Clusters generated by CLIQUE may be found in overlapping subspaces, which means that each data point can belong to more than one clusters.

In order to obtain an effective hard clustering where clusters are not over-lapped with each other, we utilize agent-based modeling to find subspace clus-ters. Agent-based clustering approach is able to provide a natural description of a data clustering. Flexibility is another advantage of agent-based clustering. There are two main categoreis of agent-based clustering methods: multi-agent clustering and biologically inspired clustering.

Ogston et al. presented a method of clu stering within a fully decentralized multi-agent system [8]. In their system, each object is considered as an agent and agents try to form groups among themselves. Agents are connected in a random network and the agents search in a peer-to-peer fashion for other similar agents. Usually, the network is complex, which limits the use of this approach.
Biologically inspired clustering al gorithms have been studied by many re-searchers. Ant colonies, flocks of birds, swarms of bees, etc., are agent-based insect models that have been used in many applications [10]. In these meth-ods, the bio-inspired agents can change their environment locally. They have the ability to accomplish the tasks that can not be achieved by a single agent.
Although many agent-based clustering have been proposed, there is no work reported yet on subspace clustering in agent-based approach. In the next section, we show how agent-based methods can be applied to subspace clustering. 3.1 Problem Statement Let S = { S 1 ,S 2 ,...,S d } be a set of dimensions, and S = S 1  X  S 2 ...  X  S d a d-dimensional numerical or categorical space. The input consists of a set of d-component of v i , is drawn from dimension S j .

Table 1 is a simple example of data. The columns are dimensions S = {
S example, numerical data set is used to sh ow the discretization process. After discretization, clustering on numerical data is similar with the clustering on categorical data.

The expected output is a hard clustering C = { C 1 ,C 2 ,...,C k } . C is a partitioning of the input data set V . C 1 ,C 2 ,...,C k are disjoint clusters, and C .dimensions  X  S,  X  C i  X  C .

Now, the question is what is the best clustering C ? Based on the goal of hard clustering, a larger cluster size | C i | and a higher dimensionality | C i .dimensions | are preferred. However, there is a confli ct between them. For example, assume that one cluster C 1 has | C 1 | = 500 and | C 1 .dimension | = 2 while another cluster C 2 has | C 2 | = 100 and C 2 .dimension = 10. Which cluster is  X  X etter X  or preferred? In order to balance the two preferred choices, we define a measure to evaluate the quality of clustering with respect to both cluster size | C i | and dimensionality | C i .dimensions | as follows: The clusters C with optimized M ( C ) will have a large data size and a large dimensionality at the same time. 3.2 Agent-Based Subspace Clustering In this section, we describe the design of o ur agent-based subspace clustering ap-proach and explain how to implement the tasks of subspace clustering definded above.

Firstly, we briefly present the model of agent-based subspace clustering. In the agent-based model, there are a set of agents and each agent represents a data point. The agents move from one local environment to another local environment. We named the local environment as bins . The movement of agents is instructed by some heuristic rules . There is a global environment to determinate when agents stop moving. In this way, an optimized clustering is obtained as a whole. To sum up, the complex subspace clustering is achieved by using the simple behaviors of agents under the guidance of heuristic rules [4,6].

The key components of agent-based subspace clustering are: agents, the local environment bins and the global environment. In order to explain the detail of the agent-based subspace clustering model, we take the data set in Table 1 as a simple example.  X  Let A = { a 1 ,a 2 ,...,a m } represent agents. For example, agents  X  Let B = { B 1 ,B 2 ,...,B n } be a set of bins. The bins B are the local en-In this model, we choose CLIQUE as the method to generate bins B . The first step of CLIQUE is to discrete the numeric values into intervals. Table 2 shows the agents after discretization with  X  = 3, which is the number of levels in each dimension. The intervals on different dimensions form units. CLIQUE firstly finds all dense units as the basic elements of clusters. Then the connected dense units are treated as final clusters. Figure 1 is an example of result of CLIQUE with  X  =0 . 8and  X  = 3 on the data in Table 1. There are two clusters on subspaces S 4 and S 6 respectively.

However, this clustering is unble to satis fy the definition of hard clustering. In our model, the groups generated by CLIQUE are treated as bins B as an input to our model to generate higher quality clusters. The global environment is an important component of an agent-based model. We define an objective function as a global environment based on Equation (1). In our model, local environment bins B are being optimized with the movement of agents A . When objective function M ( B ) in Equation (2) reaches its maximal value, agents stop moving. Bins B are fully optimized and are treated as final clusters C .
 Some simple rules are defined to make sure that M ( B ) can be optimized by the movements of agents A .

The movement of agents is a parallel decen tralized process. Initially, each agent a i ( a i  X  A ) randomly choose a bin B j ( B j  X  B  X  a i  X  B j ) it belongs to as its local environment. In the next loop, agent a i randomly chooses another bin B k ( k = j measure the changes in B j and B k with respect to the global objective function M ( B ). move ( a i ) in Equation (5) indicates the influence of the movement on M ( B ). If move ( a i ) is evaluated as positive, the agent will move from its bin B j to the destination B k .Otherwise,agent a i stays in B j .

When bins B are generated by CLIQUE, each agent a i may be contained in multiple bins, and they are called the preferred bins of a i , denoted as a i .bins . Therefore, a i  X  B j ,  X  B j  X  a i .bins . In order to improve the efficiency of move-ment, we only allow agent a i move among its preferred bins a i .bins .
When objective function M ( B ) reachs its maximal value, the movements stop and the final clustering C is obtained. Figure 2 is an example of the final clus-tering on the example data in Table 1. Two clusters are generated: One cluster contain points v 1 , v 2 ,and v 3 on dimensions S 1 , S 2 , S 3 and S 4 , and another cluster contain v 4 and v 5 on dimensions S 1 , S 2 , S 3 and S 6 . 3.3 Algorithm The algorithm is composed of the following three steps.
 Step 1. Generate local bins B . In this step, we utilize CLIQUE algorithm[3] to Step 2. Agents A move among their preferred bins. Each agent a i  X  A randomly Step 3. If M ( B ) reaches the maximal value, then the clustering process stops. 4.1 Data and Evaluation Criteria In the experiments, we compare our ACS algorithm with existing subspace clus-tering algorithems which include CLIQUE, DOC, FIRES, P3C, Schism, Subclu, MineClus, and PROCLUS [1]. All these algorithms are implemented on a Weka subspace clustering plugin tool[7]. Table 3 shows the datasets used in our exper-iments, which are public data sets from UCI repositery.

F1 measure and Entropy are chosen to evaluate the algorithms.  X  F1 measure considers recall and precision [7]. For each cluseter T i in cluster-Algorithm 1. Agent-based Subspace Clustering  X  Entropy is to measure the homogeneity of the found clusters with respect to 4.2 Experimental Results For a fair evaluation, we show the best results of all algorithms in the massive experiments with various parameter settings for each algorithm.

Figures 3-8 show the performance of the algorithms on data breast, diabetes, glass, pendigits, liver and shape. From the figures, we can see that ACS performs better than the other subspaces methods on both F1 measure and Entropy. For breast, glass and shape data, ACS has the best performance on F1 measure and Entropy. In particular, ACS has much better F1 measure than the others. For diabetes, pendigits and liver data, the performance of ACS ranks higher on F1 measure and entropy. In fact, ACS performs similarly to the first rank algorthms in each figure.

Figures 9 and 10 show the time consumed with respect to the dimensionality and data size. It is obvious that the time consumed by ACS is similar with those of MineClus, CLIQUE and Schism, while STATPC, DOC, FIRES, P3C and PROCLUS consume much longer time than the first group. We can conclude that ACS are fast and scalable with the number of dimensions and data size.
ACS has two parameters:  X  and  X  . The figure 11 show the time change with the parameters. From these figures, we can see the run time decrease with the increase of  X  and  X  . 4.3 A Case Study Our technique has been applied to stock market surveillance. In stock market, the key surveillance function is identifying market anomalies, such as market manipulation, to provide a fair and efficient trading platform. Market manipula-tion refers to the trade action which aims to interfere with the demand or supply of a given stock to make the price incre ase or decrease in a particular way.
A data set is composed based on the financial model proposed by Rajesh and Guo [2]. In this model, there are three period of time to describe the stock market manipulation: pre-manipulation, manipulation and post-manipulation. The stock price rises throughtout the manipulation period and then falls in the post-manipulation. We analyze stock market manipulation in HKEx (Hong Kong Stock Exchange). The market manipulation data are collected from SFC (Securityies and Futures Commission). The trade data are collected from Yahoo website. The attributes of the daily trade data include: daily price, daily volume, daily volatility, daily highest price, daily lowest price. We also collect the index of Hong Kong in the same period of time. The trade days when a manipulation occurs are treated as normal trade day while the trade days when a manipulation happended are treated as abnormal day.

We test the performance of ACS and other subspace clustering algorithms on this dataset to see their performance in reality. From Figure 12, we can see ACS perform the best on both F1 measure and Entropy. The results show that ACS is a potential approach to cluster data sets in the real-world applications. This paper presents an agent-based subspace clustering algorithm, with which agent-based method is used to obtain an optimized subspace clustering by mov-ing agents among local environments. The experimental results show that the proposed technique outperforms existing subspace clustering algorithms. The effectiveness of our technique is also va lidated by a case study in stock market surveillance.

This research can be extented in two ways. One potential research is utilizing agent-based subspace clustering to iden tify outliers in high dimensional data. The other future work is to research on using agent-based method for semi-supervised subspace clustering.

