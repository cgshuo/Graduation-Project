 JAMES PUSTEJOVSKY, ROBERT KNIPPEN, JESSICA LITTMAN and ROSER SAURI  X  1. Introduction The automatic recognition of temporal and event expressions in natural language text has recently become an area of intense research in computa-tional linguistics and Artificial Intelligence. The importance of temporal awareness to question answering systems has become more obvious as current systems strive to move beyond keyword and simple named entity extraction. Named entity recognition (Chinchor et al ., 1999) has moved the fields of information retrieval and information exploitation closer to access by content, by allowing some identification of names, locations, and products in texts. Beyond such metadata tags, however, there is only a limited ability to mark up text for real content. One major problem that has not been solved is the recognition of events and their temporal anchorings.
 and the events and states of affairs they participate in. As it happens, however, much of the temporal information in a report or narrative is left implicit in the text. The exact temporal locations of events is rarely explicit and many temporal expressions are vague at best. A crucial first step in the automatic extraction of information from such texts, for use in applications such as automatic question answering or summarization, is the capacity to identify what events are being described and to make explicit when these events occurred.
 beings after reading the appropriate newspaper article, such capabilities go beyond any current automatic system: (1) a. Is Schro  X  der currently German chancellor? clearly a prerequisite for understanding and answering these questions. In addition, further temporal knowledge needs to be represented and further temporal inferences need to be drawn. First, temporal aspects of the properties of entities (i.e., property of being German chancellor) must be adequately represented. Second, the extraction of event descriptions with their time stamps has to be carried out. The knowledge of certain temporal features of events (i.e. typical duration of an event) seems also to be crucial be checked as well (i.e., actual versus intended events). As can be seen from these three example questions, building an automatic system that can extract and reason with temporal and event information brings up new multifaceted research issues. First we require an expressive language in which the kind of event and time information we are concerned with can be made explicit. 2. Temporal Information in Questions Natural language questions express possible queries that a QA system must answer. In many of them, temporal information is a basic component of knowledge, and needs to be handled for an acceptable degree of perfor-mance to be attained. Take as example the following interrogative sentences, which are extracted from (or based on other questions in) the Excite question log. (2) a. When did Yale first admit women? does not require a very powerful reasoning engine. Assuming that the needed information is contained in our knowledge base, the answer will be the specific date associated with the event denoted by the query. For unstruc-tured textual knowledge bases, it will suffice to have a system capable of identifying events and temporal expressions in a text and anchoring the events in the timeline. The first task can be performed reasonably well by a chunker informed with lexical information and constrained to a limited set of structures (Mani and Wilson, 2000; Schilder and Habel, 2001; Pustejovsky et al ., 2002). Similarly, some time-stamping relations can be extracted from the parse tree, as is done in previous work (Filatova and Hovy, 2001; Mani et al ., 2003). However, queries like (2b) demand a higher temporal reasoning capability. The eventive predicate ( climbing Everest ) does not refer to a unique event in the knowledge base, and therefore the felicitous answer will need to be calculated over a set of temporal expressions presumably associ-ated with that expression. A similar issue is at play in the following pair of examples: (3) a. Who was the American ambassador to Japan before Walter such as before, after , and during . The reasoning system does not need to be very sophisticated for questions like (3a) which, similar to (2a), focusses on very unique events. The first time Yale admitted women happened pre-sumably only once in our timeline. Similarly, there is only a limited number of states of somebody being the American ambassador to Japan, and all of them are reasonably well anchored in time. From a structured knowledge base perspective, the answer to (3a) can be provided on the basis of ordered lists of domain-prominent state-of-affairs in the world. From less structured sources, the processing tools mentioned above for question (2a) would help in time-stamping and ordering the set of states of being an American ambassador to Japan. However, answering queries like (3b) demands the temporal ordering of events that may not be as well temporally delimited as those in (2a) or (3a), and for which no precise time-stamping may exist. Consider now the examples below: (4) a. When is the Monsoon season in Southeast India? expression ( Monsoon season , which is of the same nature as Ramadan, Christmas ,or Passover ). Assuming that our knowledge base contains the necessary information to answer it, we can expect Monsoon season to be temporally related to a bounded period of time (such as between ( Monsoon, October, December )), so that answer (4b) is returned. (5) a. When does the Monsoon season begin in Southeast India? (6) a. How long does the Monsoon season last in Southeast India? for interpreting the queries (so that the references to only part of the Monsoon period in (5a) and to its duration in (6b) are identified), and in the answering process in order to compute the appropriate information from the statement in our knowledge base. Whatever strategy a QA system applies, it is clear that answering those questions requires controlling information along the temporal axis. Other examples illustrating the fundamental char-acter of temporal information in queries are the following: (7) a. Who won the Nobel prize this year? expression or relation, but about individuals. Yet, answering them involves locating the events they refer to in the time axis. The structure of (7a) resembles that of (2a) in that they both relate an event ( winning the Nobel prize and admitting women to Yale , respectively) to a temporal expression (in (7a), this year , and in (2a) the value that will be returned as answer to the question). Furthermore, temporal reasoning is also essential in queries with no overt or queried temporal values. Question (7b), for instance, may not receive an adequate answer if no reference to the temporal axis is made. pervasive throughout questions, thereby demanding systems capable of representing and reasoning with temporal knowledge. This is the case for many of the different types of queries in the typologies used by current QA systems (e.g., Abney et al ., 2000; Hovy et al ., 2002). We will now look into different kinds of questions and analyze the relevant components that must be identified in order to answer the question felicitously. The first task to address here is the identification of temporally relevant queries since, as shown in (3) and (7), it is not necessary for them to be introduced by a wh -word referring to a temporal index, nor to contain an overt temporal expression. Still, a generalization applies to all sentences in (2 X 7). They all involve at least one temporal relation of any of the following sorts:  X  BetweenaneventEandatemporalreferenceT.ThetemporalreferenceTcan  X  Between an event E and another event E  X  (8b);  X  Between two temporal values, T and T  X  (8c).
 (8) a. How many servings of Coca-Cola were consumed in 1994? relevant queries, we now have a better view on the kinds of potential ques-tions that are involved here.
 look for a temporal value as its felicitous answer, be it an index to a calendar expository purposes, we identify this required temporal value as qT , 2 and the queries featuring them, as qT-queries . (9) a. When is the next full moon? wh -phrases. Queries aiming at durations are generally introduced by (10a), whereas those looking for a set, by expressions like (10b). On the other hand, queries pointing to temporal indices (calendar dates and time of the day) are introduced by phrases like (10c), where N t is any temporal denoting noun (of the sort hour, day, month, century, Wednesday, January , etc.), and NP t is an NP headed by an N t . (10) a. how long commonly, introduced by the very distinctive temporally selecting wh -word when , which is not restricted to any of the temporal value types distin-guished in (9). relations they convey. Some of them involve a relation qT-T, between the queried temporal value qT and another temporal value T (11a). Some others hold a qT-E relation between qT and an event E (11b). Others present two relations: a first one between qT and an event E, which in turn is related to a time value T (as in 11c). Using the same notation as for the previous two relations, this case can be represented as qT-(E-T), but for simplicity X  X  sake, they will be represented as qT-ET. Queries of the form qT-TT are also possible (11d). 3 (11) a. qT-T: [ qT When] is [ T the first day of winter 1999]? queries introduced by this particle can actually receive as answer a reference to the temporal relation that E or T holds with a second event E  X  , (12c): (12) a. When did the embargo on Iraq begin? ries . They look for events as their appropriate answer type ( qEs , in our terminology). All the cases identified as qE-queries are introduced by the expression what happened and, interestingly, the set of temporal relations they can convey is equivalent to the one shown for qT-queries. In other words, qE-queries also hold relations between the qE element and a temporal reference T (13a), another event E (13b), an event E that is anchored to a temporal value T (13c), or a time reference T that is anchored to another temporal value T  X  (13d). (13) a. qE-T: [ qE What happened] in Czechoslovakia [ T in 1968]? individuals or values ( qI and qV , respectively). qI and qV are in fact argu-ments of an eventive relation expressed or implicated in the query. qI-queries are exemplified in (14), qV-queries , in (15). (14) a. Who was the ruler of Egypt when Jesus Christ was born? (15) a. How many Iraqi civilians have been killed in the last year? any individual denoting noun, and NP i is an NP headed by an N i . Similarly, qV-queries are distinguishable by wh -phrases of any of the patterns in (17): (16) who correlations between the q-term and the element it is temporally related to. This is actually predictable from the fact that q-terms in qI-and qV-queries are arguments of an event-denoting predicate, which is, strictly speaking, the element participating in the temporal relation. The query types for qI-and qV-queries (corresponding to those in (11) and (13) for qT-and qE-queries) V which refers to an argument of event E, and ! is a temporal entity (either a time value T or an event E) to which E is temporally related. (18) a. q I E-T: [ q (19) a. q v E-T: [ q ries), qI-and qV-queries can also be temporally relevant and yet not express a temporal relation overtly, as illustrated in examples (7b) above and (20): (20) a. What company is ranked number 1 on the Fortune 500 list of the argument of an event E n , computed from a set of temporally ordered events R . All elements in R have equivalent intension, but receive a different extension depending on the temporal index they are related to. Thus, the answer in (20a) will refer to a different company depending on the year the state of being ranked number 1 on the Fortune 500 list of companies is anchored to. Similarly, the value indicating the population in Iraq will vary from day to day.
 types I and V, E n refers to an event E 2 R (the set of temporally ordered T is an implicit temporal index. 4 Two distinctive strategies for locating event E n within R can be distinguished. On the one hand, there are cases like those in (21) in which E n is calculated on the basis of an ordinal term ( first, third ) premodifying the event-denoting expression. Knowing the temporal anchor-will correspond to the temporal index of E n , T=T E (21) q v E n -(T) , where T = T E Differences in the linguistic encoding of the information allow for grouping those queries into several subclasses, which, correspondingly, requires different reasoning schemes. (22) q v E n -(T) , where T E (23) q v E n -(T now ), where T E (24) q v E n -(T now ), where T E is employed to signal the temporal relation between E n and the implicit temporal index T. Depending on the sequencing term, the relation between the two entities will be ; , or =. A reference to a temporal index is also needed in queries grouped under (23), which are different from the previous cases in that E n is not explicitely temporally ordered. In this case, the tem-poral relation assumed by default is T E are very similar to those in (23), the main difference being that in these the passenger ) or a measure-denoting noun ( population, height, temperature ). they can be subclassified depending on the types of the entities involved in that relation: 5 (25) a. qR(T-T): Is [ T Ramadan] [ qR before or after] [ T Christmas]? (26) a. qR(E-T): Was [ E the attack on Falluja] [ qR after or during] temporal relations made explicit in the text: (27) a. q(T-T): Is [ T Lent] before [ T Carnaval]? (28) a. q(E-T): Are poinsettias [ E popular in Australia] during kinds of questions in natural language. In some cases, it is present even if there is no explicit temporal reference, be it a wh -expression or an overt temporal expression. A QA system must be sensitive to the different ways temporal relations are conveyed in natural language queries, as well as capable of controlling the information at the temporal axis. 3. Representation of Temporal Information for QA Systems The previous section made clear how important it is that QA systems are sensitive to temporal information of various sorts. In this section, we con-sider more specifically the kinds of temporal information that might be needed for answering questions and how this information might be repre-sented for use by a QA system.
 marking up a document collection with some annotation language, so the question we address here is what such a markup language has to be like in order to use it to annotate documents for temporally sensitive question answering. There are clearly types of information that such a language must temporal information from texts. For example, it should be clear from Section 2 that to be useful for retrieving answers to temporally sensitive questions, a knowledge representation language must have some way to annotate the way natural languages refer to events, times, and temporal relations. We can see that any temporally aware QA system must have the ability to anchor events in time and order them. By event anchoring we mean placing a given event on a timeline. By event ordering , we mean establishing the relative position of two events in time. To make either of these tasks possible, a language must have some way of uniquely identifying events and times, as well as a way to express relations between these two. The details of how these three primitives are expressed in English, as well as their con-ceptual background have been discussed elsewhere (e.g., Setzer, 2001). Here we will be concerned with those features of events, times, and relations which must be encoded in order to answer questions effectively.
 also have to consider the sorts of time-related information needed by tools and algorithms which automatically extract temporal information. It is important to us that any annotation scheme is equally useful as a language for marking up corpora which can later be used to train and evaluate tem-poral information extraction algorithms. Information about the tense and aspect of finite verbs, for instance, may not be directly useable for answering questions, but as an important way that natural languages express time, it may be useful to algorithms which determine the anchoring and ordering of events in texts. Further, given the range of linguistic mechanisms involved in expressing temporal information, a language which allows an incremental, layered approach to information extraction will be valued highly. 3.1. Retrieving Information from Texts 3.1.1. Events Events, as well as the kinds of states which change and thus might need to be clauses, nonfinite clauses, nominalizations, event-referring nouns, adjectives, and even some kinds of adverbial clauses, as seen in the following examples. (29) a. When President Leonid Kravchuk was elected by the Ukrainian Just as important for retrieval in QA is some way to indicate whether an event-(30) a. When it became clear that controllers could not contact referred to as a  X  X egative X  event. It might not be possible or necessary to design an annotation system which indicates how the negation is expressed in every case. However, in order to determine whether one of the statements in (30) constitutes an answer to some question, it must have some way to record the fact that the relevant event is negated in each case.
 deal with, is the fact that events are often expressed with various types of modality, as seen below. (31) a. The United States may extend its naval quarantine to Jordan. aspects of events such as necessity and possibility. Deontic modality, seen in examples (31c) and (31d), has to do with aspects of events such as obligations agents might have with respect to them, or the permissibility of events. In general, such modality is expressed in English with a modal verb. The modality expressed in each case clearly has implications for the suitability of statements as answers to questions. With no more information than (31a), for example, a question answering system should not treat the event referred to by extend as if it really occurred. One can even imagine domains in which questions refer directly to modalities such as permissibility ( Can a US citizen visit Cuba before 2005? ). Thus, a retrieval system should at the very least record the modality of the events in statements like the above. about negation and modality to be represented.
 every unique event referred to can be associated with a text extent. That is, some text extents refer to multiple events, by quantifying over events as in (32a), or by the use of various kinds of syntactic ellipsis, as in (32b). (32) a. James taught 3 times on Tuesday. The first time was at 8 am. different negation and modality properties, as well as different sorts of relations to times and other events, it is important for any annotation lan-guage to have a way to reify the multiple events referred to in a single text extent. In (32b), two teaching events are referred to, but one is negated. In (32a), there are 3 events of teaching referred to, and they must be represented separately to capture the different times expressed for each one. In Section 4, we discuss a method for associating multiple events with a single text extent. 3.1.2. Times The main reason for the knowledge base of a QA system to concern itself with time expressions is in order to be able to anchor events to times. It may sometimes be useful for efficient retrieval to order times with respect to each other, but the main concern will always be trying to place events on a timeline. Times are usually expressed in English by adverbial or prepositional phrases, as shown in the following: (33) a. on Thursday answered, it is necessary to normalize time expressions to a representation that can be mapped to a timeline. Such a normalization simplifies by conflating the different ways English has for referring to the same time (e.g., 11/15/04, November 15, 2004, the 15th of November in 2004 , etc.). It also resolves any indexical component there might be to a time. Many time expressions refer to a point in time via some indexical anchor, as seen in the following: (34) a. today specify that time. They refer via reference to the moment of utterance X  X n the case of texts, the document creation time. One has to know the time of utterance in order to retrieve the time referred to and normalize them to some machine-readable form. ISO 8601 provides a useful standard for the purpose of normalizing times. However, English has numerous ways to express what might be called  X  X ndeterminate X  times, which cannot be determinately linked to a timeline. Some examples follow. (35) a. in the Fall of this year their begin and end points are more or less vague. Nevertheless, they can be ordered with respect to most points on a timeline, and so a knowledge rep-resentation system for QA must have some way of normalizing them. In Section 4 we discuss a set of indicators that are useful for normalizing many such expressions.
 ularity and with greater or lesser precision, to coherent  X  X hunks X  of the timeline. They provide a means for directly associating particular events with particular parts of the timeline, and are thus of primary importance in QA applications. English contains two more kinds of time expressions which involve slightly more complex means of anchoring events to times. The first but to quantities of time.
 (36) a. after three weeks events. They thus might be significant to making inferences about how events are ordered with respect to each other, or making inferences about the location of a particular event on the timeline. These topics will be discussed below. One also cannot rule out the possibility that a QA system might be presented with a query about the duration of a particular event. The repre-sentation of such expressions must normalize these periods of time so inferences can be drawn. Other durations are part of a more complex system for indicating the time of an event. (37) two weeks from today express the time of an event by making explicit the duration of time between the event and a time. In fact, they can be said to be part of a compositional time expression. For example, in (37), the duration two weeks is anchored to the time expression today . Thus, in combination with the temporal preposition from and the time expressed by today , it refers to a time two weeks after the document creation time. In order to effectively answer questions about the event referred to, a QA retrieval system should have some access to the time referred to. It could be retrieved via a calculation from the anchor, the duration, and the nature of the relation indicated by from , or this information could be calculated by an infor-mation extraction system and stored as part of the annotation of this statement. The language for representing time in QA systems should allow for either possibility.
 (38) Three weeks before the invasion , most stockpiles were destroyed . indicates distance along it  X  the amount of time that separates the italicized events. As such, it does not directly anchor events to times, but may allow the time for an event to be inferred. Like durations anchored to times, the amount of time they indicate should be represented in any temporal language for question answering.
 (39) a. every Thursday refer neither to coherent chunks of the timeline, nor to distances along it, but to, roughly speaking, groups of distinct pieces of the timeline. They are used to place recurring events on the timeline, particularly when the recurrence is regular. While corpus study reveals that such time expressions are not common in English texts, they are one way English allows events to be associated with the timeline, and a language for representing the temporal aspects of English texts should have some way of normalizing them. A way to do so will be discussed in Section 4. 3.1.3. Temporal Relations In order to perform the fundamental tasks of anchoring and ordering events, the last major building block required of a temporal annotation language is the ability to represent temporal relations. The language must have some way to characterize the relationship between events and times. English and other natural languages do not usually express the interval which a given event use a range of strategies to indicate a relation between a given event and which a given event takes on the timeline is expressed only partially. (40) A Brooklyn woman who was watching her clothes dry in a is predicated between a time and the event referred to. It expresses that the interval in which the event killed occurs is included in the time Thursday evening . This is signalled by the presence of the preposition on . This infor-mation is partial in that the precise begin and end points are not specified for the event. The reader only knows that it occurred somewhere within a par-ticular range on the timeline. If specific end and begin points for events were always expressed, it would be possible for a knowledge base to directly represent them as part of the event. However, a relation such as  X  X s included X  anchors an event to a time by specifying a pair of ordering constraints on the endpoints of the event; its begin point is after the time referred to by Thursday evening begins and its end point is before Thursday evening ends. Such a complex pattern is best expressed by a relation which can easily be interpreted by machine. The need for relations is seen even more clearly in examples like the following.
 (41) a. Not that long ago, before the Chinese takeover , real estate poral extent of the events are ordering constraints on the begin and end points of the events. (41a) is an example of a before relation, which orders the two events with respect to each other. The ordering constraint implied by this relation might be useful if, for example, the following statement was part of the knowledge base. (42) The Chinese takeover of Hong Kong took place on July 1, 1997. is expressed in English is the tense/aspect system. This grammatical marking system expresses the temporal extent of an event expressed by a finite clause with respect to the time of utterance (in the case of texts, the document creation time), and to a reference time (for details, see Reichenbach, 1947). This can be seen in examples such as the following: (43) a. Kidnappers kept their promise to kill a store owner they took before the document creation time. In (43b), the use of perfective aspect indicates that the event demanded was complete before the time of the event contacted .
 to retrieve answers to questions. Allen (1984) laid out the space of possibil-endpoints of intervals, as shown in Figure 1.
 intervals, so it might not be necessary for a temporal annotation language to use all of them. Overlaps , for example, is difficult to find instantiated in natural language text. The most important requirement of the set of relations used by the language under consideration is that it allow infer-ences to be drawn from pairs of relations. This is because in natural language texts, it is uncommon for each event to be associated with a time. As we have seen, much more significant is the placement of events with respect to each other and with respect to certain key times. That is, information about the placement of a given event on the timeline is almost always partial and distributed across several clauses. Thus, a QA system needs to have reference to a system of relations which allows it to easily combine the different kinds of temporal information expressed in a set of English statements and make judgements about the temporal location of events. Because reasoning over the Allen relations is well-understood, they provide a good basis for the set of relations needed by a QA system. Further, the more temporally oriented questions seen in Section 2 are phrased directly in terms of temporal relations.
 3.1.4. Subordination relations Examination of the following examples makes clear that there is, in fact, another kind of event X  X vent relation that is important to be able to represent in a QA knowledge base. (44) a. Five other U.N. inspection teams visited a total of nine other example  X  whether the event can be treated as real  X  is affected by the fact that it is embedded under the underlined verb. The sentence does not simply represent the event as being part of the actual past or present, or projected future. Instead, it expresses the event in qualified terms. This is very similar to modality, discussed above. In (44a), for instance, the underlined event is qualified by being the argument of report . Its veracity depends on the reli-ability of the reporting agent. In (44b), the underlined event is presupposed to be true, because regret is a factive predicate in English (Kiparsky and Kiparsky, 1970). The relations expressed between subordinated events and the events that subordinate them are not temporal relations, per se, (though they may have temporal implications); nevertheless, it is crucial that they are represented in a QA knowledge base. In order to effectively answer a question about an event, it is very important to know whether the writer has presupposed its veracity, deferred responsibility for its veracity to another party, or presupposed its falsity. The use of such relations and even their significance will vary from application to application, but a QA retrieval application will have to know that the relation exists. Thus, a language for modeling temporal information in texts should have some way to represent the different sorts of subordination relations that can be expressed. In Sec-tion 4, we present a complete set of relations for this purpose. 3.2. Extracting Information for Use by qa Systems As seen above, English (as well as any other natural language) has many mechanisms for expressing temporal properties of events. So far, we have primarily discussed the nature of those temporal properties themselves; we have considered what can be expressed from the perspective of how that information could be represented in such a way that a QA retrieval system could have access to it. Now we turn to considerations of how temporal information might be extracted from natural language texts. A temporal annotation language should also capture the kind of information that might be required by tools and algorithms for automatically annotating temporal information. Such tools and algorithms include machine learning techniques which might use human-annotated documents as training data, as well as more rule-based techniques, which might exploit linguistic regularities to derive temporal relations. We envision a multi-step, layered, information extraction process in which distinct modules may be responsible for extracting different pieces of information and incrementally marking up a knowledge base so information can be retrieved from it. Because the tem-poral relations representing the anchoring and ordering of events are the ultimate goal of an extraction process, such a process requires a practical way to represent all the building blocks which might be used to determine the temporal relations. 3.2.1. Morphosyntax of events As discussed above, the tense/aspect system of English is an important method of locating events on the timeline. Thus, a language used to record information relevant to temporal information extraction systems would have to record the tense and aspect of finite verbs so it could infer a relation between the document creation time and the event based on the event X  X  tense. While we would not expect a QA retrieval system to use information about the tense of a verb used to express a given event, tense/aspect information is absolutely necessary for any information extraction system which attempts to anchor events to times. It also seems likely that information about tense and aspect features may be an important component in attempts to extract temporal relations between events. Some positive results have been reported by Grover et al . (1995), Song and Cohen (1991), and Mani et al . (2003) using machine learning techniques for predicting temporal relations between events based on tense and aspect (among other morphosyntactic factors). Nonfinite verbs are quite common ways to refer to events, and nouns and adjectives are not insignificant. Lapata and Lascarides (2004) found that the grammatical category of nonfinite verbs that express events is significant in predicting temporal relations between events which occur in the same sentence. We expect that the part-of-speech of events not expressed with verbs may be significant in drawing inferences about the temporal anchoring of events. For example, adjectives normally encode states, which, when they can be located temporally, are considered events for our purposes. States are may well be usable to make temporal inferences; an introduced state can be assumed to continue unless its termination is explicitly mentioned. So the part-of-speech of an event-expressing term may give clues as to the type of event, which might in turn have implications about the temporal properties of the event. Next, we turn to the importance of such a typology of events for temporal information extraction. 3.2.2. Typology of events There are several different ways to categorize events. The just-mentioned distinction between states and events is based on temporal properties of events, and is part of the Vendler (1957) classification, which focusses on the internal temporal structure of events. It is certainly plausible that a Vendlerian classification of events might provide useful input to algorithms which attempt to anchor and order events in text, and a temporal annotation language could certainly adopt this classification. However, other aspects of Vendler X  X  scheme involve quite a bit more sublety than the event/state dis-tinction, and the implications of the distinctions for inferring temporal relations are not at all straightforward. As we discuss in Section 4, the event/ state distinction is the only aspect of Vendler X  X  classification that we adopt. We are, however, concerned with having the ability to automatically infer or extract the sort of embedding relations mentioned above in 3.1.4. It seems that the sort of embedding relation involved is easily predictable from semantic features of the verb. Consider the following examples of events which might be intuitively classed as  X  X eporting X  events of some sort. (45) a. In the air, U.S. Air Force fliers say they have engaged in ... same sort of relation to their embedded events as described in 3.1.4. They seem to express that the agent of the reporting event is responsible for establishing the veracity of the embedded event. It would seem that a classification which recognized these verbs as belonging to the same class would allow us to easily infer the presence of this particular type of subordination relation. Thus, it would be very useful for a temporal information extraction system to have access to a classification of events which would allow it to predict the sort of subordination relations they introduce, particularly in case there is some level of ambiguity in the way such relations are introduced; if a given verb can have senses which introduce subordination relations and senses which do not, a classification algorithm will be needed in order to automatically infer the a reporting verb, obviously has senses in which it has no reporting meaning and thus does not introduce a subordination relation. This suggests that extracting subordination relations will be a multi-step process which involves the classification of events by some sort of disambiguation. In Section 4, we propose a set of event types for this purpose.
 special mention here, because it introduces subordination relations of a unique sort. 3.2.3. Aspectual verbs and relations Consider the examples below. (46) a. The tank began leaking oil on Friday morning. expresses an important temporal property of the event referred to by the embedded verb. We might say that it  X  X hooses X  an event or a time and expresses a temporal relation between that event or time and the underlined event. For example, in (46a), the event of leaking is said to begin on Friday. If we compare the sentence in (47), we see that different relations between the time Friday morning and the event leaking are expressed in these cases. (46a) gives more specific information about the temporal extent of the leaking event. (47) The tank was leaking oil on Friday morning.
 morning . Without the verb began , only an includes relation is expressed between the two, meaning the temporal extent of leaking includes the time referred to by Friday morning . Thus, the fact that leaking is subordinated to began in this example is a very important fact that a temporal annotation language must record if it is going to be useful for inferring anchorings and orderings of events. The behavior of verbs like begin, stop, continue , etc., closely parallels the grammatical category of aspect, and thus, the underlined verbs are often referred to as  X  X spectual X  verbs. In Section 4, we introduce a classification of events which includes aspectual events. While the temporal extent of aspectual events are not in themselves of interest, they seem to form a class in that they introduce a special sort of subordination relation. Paralleling the event classification, we refer to the sort of subordination relation they introduce as an  X  X spectual X  relation. Note that aspectual verbs can be subcategorized in terms of the sort of aspectual relation they intro-duce. For example, verbs like begin, start , and commence all express an aspectual relation which allows one to infer a begins relation between the embedded verb and some other time or event. A temporal annotation lan-guage should both recognize the category of aspectual verbs, and provide a way to characterize the subordination relations they introduce. 3.2.4. Signals of temporal relations Above, we saw examples of temporal relations being expressed by temporal prepositions and conjunctions like before, after, while, on , etc. In order to automatically extract temporal relations, it is important to be able to first identify such signals. Because these expressions have multiple uses (for example, on can be used as a locative preposition), it becomes necessary to identify when they are signaling a temporal relation and when they are not. Again, we envision a multi-step information extraction process, in which them. Because we also expect that human-annotated corpora will be used for machine learning, it will be necessary for the markup language to have some way to associate temporal relations with the signals that express them. 3.2.5. The functional content of time expressions As seen above, time expressions in natural language do not usually fully specify a time. Instead, they often function indexically, picking out a time via reference to some anchoring time in the context, as seen below: (48) a. The White House press secretary reports that the president indexical anchor (usually the document creation time) is recovered. It refers to a day one day after that anchor. As a time expression on its own, a phrase like October has similar behavior. The October it picks out is picked out with respect to the document creation time. Expressions like the following Satur-day parallel this behavior, except that their anchors are times other than the document creation time. It is possible to see such expressions as functional in the sense that they return determinate values based on their anchoring. That is, their meaning returns a value when given an anchor time. While we assume that a QA retrieval system will have more use for the fully specified, normalized value of a time expression, the possibility of representing the functional content which is the meaning of these expressions would be extremely useful in an incremental process for extracting temporal infor-mation; it allows the process of recovering the functional content of these expressions to be separated from the process of normalizing and fully spec-ifying their value. In Section 4, we present a proposal for representing the functional content of time expressions. 4. TimeML The questions presented in the question corpus revealed that some under-standing of time was necessary in order to both model and answer the questions. Moreover, many of the questions and the data that could answer them involved temporal relationships in an implicit way. That is, while some questions such as When was John F. Kennedy president? require the use of time directly, others are far less explicit. For example, the question, Who was but it surely requires a temporal understanding to answer it.
 were discussed. Such a system must be able to represent temporal expres-sions, events, and relationships. TimeML is a modeling language that has been designed with these features in mind. In this section, we discuss how this is accomplished and point out some of the expressive power of TimeML. standing of time so that questions and corpora can be modeled, leading to eventual question answering. To that end, TimeML used four different tag types. The TIMEX3 tag is used to capture all temporal expressions. The EVENT tag captures all temporal events. Functional words such as at and from are annotated with the SIGNAL tag. Finally, all relationships between the other tags are represented with the LINK tags: TLINK, SLINK, and ALINK. For a complete description of TimeML, the reader can refer to http://www.timeml.org. 4.1. Representing Temporal Expressions At the core of any scheme designed to provide temporal understanding is a method for representing specific temporal expressions such as 1961 or today . TimeML models this type of expression with the TIMEX3 tag. There are four types of temporal expressions captured in TIMEX3: TIME, DATE, DURA-TION, and SET, each corresponding with the types described in 3.1.2. the day, even if in a very indefinite way. The easiest way to distinguish a TIME from a DATE is to look at the granularity of the expression. If the granularity of the expression is smaller than a day, then the expression is a TIME. For example, the following expressions fit into this category:
Mr. Smith left ten minutes to three expressions. That is, they appear to be within a context that provides their complete specification, including the date on which they take place. With the exception of the expression 9 a.m. Friday, October 1, 1999 , each of these expressions requires more information to fully represent what they entail. This is a recurring phenomenon with temporal expressions that TimeML addresses with temporal functions. This technique will be discussed shortly. calendar time. Again, there may be some confusion as to when an expression is a TIME and when it is a DATE. The granularity test continues to help with this as DATES are generally of a day or larger temporal unit. As with TIME S , DATE S are often underspecified. Here are a few examples:
Mr. Smith left Friday, October 1, 1999 time. Examples of this are:
Mr. Smith stayed 2 months in Boston larly reoccurring times. These are expressions such as:
John swims twice a week . a specific value for the time expression. A temporal expression X  X  value is annotated with an extension of the ISO 8601 standard. For example, a fully specified temporal expression such as the one in (49a) has a value of  X  X 2004-11-22 X  X . A TimeML annotation produces XML as in example (49b). (49) a. November 22, 2004 obvious as those whose extent contains all of the necessary information. For these kinds of expression, the value must be normalized. But, before this is discussed, it is useful to examine one more aspect of the simple example in (49). The tid attribute is an automatically assigned ID number that allows the expression to be mentioned elsewhere in the annotation. For instance,  X  X  X 1 X  X  above might participate in a temporal link with some event. The method for doing this is found in 4.4.1, but it is enough to say, for now, that all objects in TimeML receive an ID number similar to the one given in the TIMEX3 tag.
 used in the value attribute. For example, an expression such as January 12 provides no year information. It can be given a value of XXXX-1-12 . In the case of times and dates, these placeholders are generally removed in favor of a more complete annotation provided by temporal functions. Durations and sets are rarely, if ever, underspecified, but they do receive some special attention in both the value attribute and the TIMEX3 tag as a whole. In the following subsection, temporal functions for times and dates will be descri-bed, but, first, we will briefly turn to these special aspects. Durations are required to a have a particular format in this attribute because they represent a period of time. A sample annotation for a simple duration is given in (50). (50) &lt; TIMEX3 tid="t1" type= "DURATION" value="P3D" &gt; beginPoint and endPoint . These are used to capture what were called in Section 3 anchored durations . For example, the expression a week from Monday has a begin point, namely, the tid for Monday . With this infor-mation, the actual date that the full phrase refers to can be calculated. Ti-meML allows for an additional TIMEX3 to be created to annotate the missing point. This is a useful and neccesary part of TimeML. The following example reveals why. (51) John will leave a week from Monday.
 events and temporal relationships, it should be clear that leave is linked in some way to the expression a week from Monday . Yet, it is not directly related to either a week or Monday . Using the method described above, a tid can be created that can participate in a link such that leave is truly anchored to the correct time.
 at least one of two additional TIMEX3 attributes: quant and freq . The former represents any quantifier that is used in the expression. For instance, every Tuesday would receive a quant of EVERY and a value of  X  X  X XXX-WXX-2 X  X , the ISO 8601 representation of Tuesday . The frequency of the expression is represented in the freq attribute as in 3 days each week . The annotation of this expression is given in (52). (52) &lt; TIMEX3 tid="t1" type="SET" value="P1W" 4.1.1. Functional Content of Temporal Expressions TimeML strives to capture all temporal expressions with the TIMEX3 tag, but, as is apparent in the above examples, many of these expressions seem to be missing information critical to their full specification. In fact, analysis of the corpus reveals that there are generally very few fully specified temporal expressions. The reader uses these to fully appreciate the rest of the temporal expressions. Temporal functions are TimeML X  X  way of doing the same thing. When a TIMEX3 is underspecified, it is anchored to a fully specified temporal expression. This is often the expression that includes the FunctionInDocument attribute in its TI-MEX3. For example, a news report often includes a specific document creation time. If the article refers to today , that expression is anchored to the document creation time to complete its specification. In the same manner, an expression such as July 9 is underspecified until the appro-priate year is supplied. Since that information can be extracted from the document creation time, it is anchored to that TIMEX3 and the correct year is added to the value of the July 9 TIMEX3.
 attribute called temporalFunction receives a  X  X  X rue X  X  value. When an annotation is done manually, this attribute is just an indication that the value of the TIMEX3 was calculated by way of a temporal anchor, which the annotator must also supply. An automatic annotation will use functions to do the same thing. In the next section, descriptions of these functions are provided along with examples of the functions in action. Notice that the underspecified TIMEX3s still have three core attributes: tid, type, and value . When a temporal function is also used, three more attributes are added:  X  temporalFunction : a boolean attribute that indicates that a function is necessary  X  anchorTimeID : the tid of another TIMEX3 that provides information to the temporal function  X  valueFromFunction : the tfid , or temporal function ID, of the function that completes the TIMEX3 specification The reader may wonder why both the value and valueFromFunc-tion attributes are used since expre ssions that require functions, by definition, do not contain enough information to provide a value. However, it is not always the case th at the expression doesn X  X  contain any specific temporal information at all. In cases such as today ,the extent of the tag cannot lend any information to the value attribute and, truly, the temporal function must d o all the work. Still, cases such as Wednesday do contain specific information that should be captured by the TIMEX3 tag. In the former case, the value must be something like  X  X  X XXX-XXXX X  X , where the X-placeholder is used to show that the format of this value should be that of a DATE, but that no other information has been provided. In the latter case, though, it is useful to capture that the expression makes use of specific temporal information by giving a value of  X  X  X XXX-WXX-3 X  X .
 4.1.2. Specification of Selected Temporal Functions 1. &lt; IndefiniteFuture tfid= argumentID =/&gt; 2. &lt; IndefinitePast tfid= argumentID= /&gt; 3. &lt; Identity tfid= argumentID= /&gt; 4. &lt; CoerceTo tfid= argumentID= scale= /&gt; 5. &lt; Predecessor/Successor tfid= 6. &lt; Adjust tfid= argumentID= signalID= 4.2. Representing Events The goal of TimeML is to provide a language for the representation of temporal relations. Temporal expressions, captured with TIMEX3, are the first ingredient in many of these relationships. Events are the next ingredient and are primarily represented with the EVENT tag, followed by the MAK-EINSTANCE tag. 4.2.1. The EVENT Tag Much like the TIMEX3 tag, TimeML captures several different types of event. The type of event is stored in an attribute, class .A TimeML event will fit into one of these categories: narrates an event, or informs about an event, the event that describes that action is of the REPORTING class. These are generally verbs such as: say , report, tell, explain, state .
 perception of another event. Such events are typically expressed by verbs like: see, watch, glimpse, behold, view, hear, listen, overhear . grammatical device of aspectual predication, which focuses on different facets of event history: (a) Initiation: begin, start (b) Reinitiation: restart, reinitiate, reignite (c) Termination: stop, cancel (d) Culmination: finish, complete . (e) Continuation: continue Events that are of this class also participate in a particular kind of TimeML link called an ALINK (for "Aspectual Link X  X ) so that the relationship between the ASPECTUAL event and the one it predicates over can be shown (see section 4.4.3). introduces an event argument, which must be in the text explicitly. The event argument describes an action or situation from which we can infer something given its relation with the I ) ACTION. For instance, the events introduced as arguments of some I ) ACTIONs may not necessarily have occurred when the I
ACTION takes place. Explicit performative predicates are also included here. Note that the I ) ACTION class does not cover states as they have their own associated classes.
 class. The following list provides a sampling of this class: (a) attempt, try, scramble (b) investigate, investigation, look at, delve (c) delay, postpone, defer, hinder, set back (d) avoid, prevent, cancel (e) ask, order, persuade, request, beg, command, urge, authorize (f) promise, offer, assure, propose, agree, decide (g) swear, vow (h) name, nominate, appoint, declare, proclaim (i) claim, allege, suggest includes states that refer to alternative or possible worlds (delimited by square brackets in the examples below), which can be introduced by subor-dinated clauses (a), nominalizations (b), or untensed VPs (c): (a) Russia now feels [the US must hold off at least until UN secretary general (b)  X  X  X here is no reason why we would not be prepared for [an attack] X  X  . (c) The agencies fear they will be unable [to crack those codes to eavesdrop on (a) believe, think, suspect, imagine, doubt, feel, be conceivable, be sure (b) want, love, like, desire, crave, lust (c) hope, expect, aspire, plan (d) fear, hate, dread, worry, be afraid (e) need, require, demand (f) be ready, be eager, be prepared (g) be able, be unable 6. STATE: STATEs describe circumstances in which something obtains or holds true. However, only certain events in this category are annotated in TimeML: (a) Statesthatareidentifiablychanged over the course of the document being (b) States that are directly related to a temporal expression. If a STATE (c) States that are introduced by: an I ) ACTION, an I ) STATE, a (d) Predicative states the validity of which is dependent on the document 7. OCCURRENCE: This class includes all the many other kinds of events describing something that happens or occurs in the world. Essentially, this is a catch-all category for events that participate in the temporal annotation, but do not fit into any of the above categories.
 attribute and an event ID attribute. The following tag, MAKEINSTANCE holds much more information about the event, or rather an instance of that event. As such, examples of annotated EVENTs are provided below. 4.2.2. The MAKEINSTANCE Tag Once an event is tagged in TimeML, an instance of that event is created with the MAKEINSTANCE tag. It is this event instance that participates in temporal relationships. MAKINSTANCE is the first example of a non-consuming TimeML tag. That is, both the TIMEX3 and EVENT tags are inserted directly into a document so they surround the text they capture. The data calls for instances of an event to be annotated out of line because these instances do not always capture text directly from the document. This tag was developed to capture multiple instances of an event. The following simple sentence reveals why MAKEINSTANCE is necessary in this case:  X  X  X ohn teaches on Monday and Wednesday. X  X  One might believe the EVENT and TIMEX3 tags, along with the soon to be discussed temporal relationship tags, could successfully capture the infor-mation this sentence contains. However, without multiple instances of the teaches event, such a relationship would suggest that the same event occurs on both Monday and Wednesday. The MAKEINSTANCE tag allows a more accurate representation of this sentence such that the occurrences of teaches on Monday and Wednesday are unique. In the above sentence, the teaches event is annotated first with an EVENT tag and then with two MAKEIN-STANCE tags: John &lt; EVENT eid="e1" class="OCCURANCR "&gt; teaches &lt;/EVENT on Monday and Wednesday . &lt;MAKEINSTANCE eiid ="ei1" eventID="e1" tense="PRESENT" aspect="NONE"/&gt; &lt;MAKEINSTANCE eiid="ei2" eventID="e1" tense = "PRESENT" "aspect="NONE"/&gt; Along with this ability to create multiple instances of an event, the MAKEINSTANCE tag captures the other attributes for the event instance. The values for these attributes are generally lexically motivated. The tense and aspect of the event are represented in the appropriate MAKEINSTANCE for that event along with the instance X  X  modality and polarity. Again, this information must appear in a non-consuming tag because it can change for multiple instances of the event. A simple sentence can demonstrate this:  X  X  X ohn teaches on Monday but might not on Tuesday. X  X  Here, one instance of teaches contains both a modal and negation operator while the other does not: John &lt;EVENT eid="e2" class="OCCURRENCE"&gt; teaches &lt;/ EVENT &gt; on Monday but might not on Tuesday &lt;MAKEINSTANCE eiid="ei1" eventID="e2" tense="PRESENT" aspect= "NONE"/&gt; &lt;MAKEINSTANCE eiid = "ei2" eventID="e2" 4.3. Representing Signals Functional words such as before and during are captured with the SIGNAL tag to make explicit the part they play in determining relationships between times and events. Once a text has been given an annotation for times, events, and signals, TimeML can begin to relate them to each other. In the next section, these relationships will be described. A complete annotation for a simple sentence, prior to any links being added, looks like this: John &lt; EVENT eid="e2" class = "OCCURRENCE" &gt; teaches &lt;/ EVENT &gt; &lt; MAKEINSTANCE eiid="ei1" eventID="e2" tense="PRESENT" aspect="NONE"/ &gt; &lt; SIGNAL sid = "s1l" &gt; at &lt;/ SIGNAL &gt; &lt; TIMEX3 tid="t1l" type = "TIME" value = "2004-11-22T15:00" temporalFunction="TRUE" anchorTimeID="t2" &gt; 3:00 &lt;/ TIMEX3 &gt; &lt; SIGNAL sid="s2" &gt; on &lt;/ SIGNAL &gt; &lt; TIMEX3 tid="t2" type = "DATE value = "2004-11-22" &gt; November 22 , 2004 &lt;/ TIMEX3 &gt;. 4.4. Representing relationships TIMEX3 and EVENT tags only begin to reveal the representational power of TimeML. In order to adequately represent-text and queries for question answering, an annotation requires a method for capturing all sorts of temporal relationships as well as other relationships that have already been touched upon.
 An article might include a sentence such as:  X  X  X ohn taught at 3:00 p.m. X  X  In this case, the taught event can be stamped with the 3:00 p.m . time so that this anchoring relationship is clear. Time stamping is an effective way to represent some temporal relationships, but it cannot capture relationships that involve the ordering of events and times, or any other relationships between two events. For example, the subordinating relationship an I ACTION has with another event is key to the understanding of the text. That relationship may be a modal one that calls into question whether the latter event actually takes place, or it could negate that latter event alto-gether.
 expressions, TimeML can effectively do time stamping with a LINK tag, presented in the following section. TimeML is not limited to this kind of temporal relationship, though. The LINK tags capture both anchoring and ordering relationships as well as subordinating and aspectual ones between event instances.
 1. TLINK : Temporal Link, captures anchoring and ordering relationships 2. SLINK : Subordinating Link, captures subordinating relationships 3. ALINK : Aspectual Link, captures aspectual relationships between As with the MAKEINSTANCE tag, these linking tags appear offline since they don X  X  specifically capture any text. Each tag has particular attributes asso-ciated with it. The most crucial of these is the relType attribute, which has different possible values depending on the type of the link. Since the rel-Type is the primary indicator for what relationship the participating tem-of each tag. 4.4.1. Temporal Links A TLINK or Temporal Link represents the temporal relationship holding between events, times, or between an event and a time. Note that EVENTs participate in a TLINK by means of their corresponding event instance IDs. In the present explanation, however, the words  X  X  X vents X  X  and  X  X  X vent instances X  X  are used interchangeably. This same observation applies also for SLINKs and ALINKs , below. As a rule, EVENTs never participate in a LINK . Only their associated event instances are eligible.
 attribute in a TLINK tag: 1. Simultaneous : Two event instances are judged simultaneous if they 2. One before the other: As in the following example between the events 3. One after the other: This is just the inverse of the preceding relation. So 4. One immediately before the other: As in the following sentence between 5. One immediately after than the other: This is the inverse of the 6. One including the other: As is the case between the temporal expression 7. One being included in the other: The inverse relation to the preceding 8. One holds during the other: Specifically applicable to states or events 9. One being the beginning of the other: As holds between the first of the 10. One being begun by the other: The inverse relation to the one just 11. One being the ending of the other: 12. One being ended by the other: The inverse relation to the one just 13. Event identity : Event identity is also annotated via the TLINK . The With this rich library of possible temporal relationships, the TLINK can both anchor an event instance to a particular time and order event instances with respect to one another. In addition, some of these relationships work spe-cifically with events of the DURATION type. TLINK is arguably the most important tag in all of TimeML. It greatly increases the power of the annotation by providing the tools for temporal ordering, a feature lacking in traditional time stamping procedures. Whether a question itself requires ordering in its representation or the text that can answer that question necessitates it, the anchoring and ordering capabilities of the TLINK tag greatly increase the likelihood that question answering can be achieved. the last section, adding two temporal links: John &lt; EVENT eid="e2" class = "OCCURRENCE" &gt; teaches &lt;/ EVENT &gt; &lt; MAKEINSTANCE eiid="eil" eventID = "e2" tense="PRESENT" aspect="NONE" /&gt; &lt; SIGNAL sid="s1" &gt; at &lt;/ SIGNAL &gt; &lt; TIMEX3 tid="tl" type="TIME" value = "2004-11-22T15:00" temporalFunction = "TRUE" anchorTimeID="t2" &gt; 3:00 &lt;/ TIMEX3 &gt; &lt; SIGNAL sid = "s2" &gt; on &lt;/ SIGNAL &gt; &lt; TIMEX3 tid="t2" type="DATE value="2004-11-22" &gt; November 22, 2004 &lt;/ TIMEX3 &gt;. &lt; TLINK eventInstanceID="ei1" relatedToTime="tl" rel-
Type = "IS ) INCLUDED" signalID = "s1" /&gt; &lt; TLINK timeID = "tl" relatedToTime="t2" reltype="IS ) INCLUDED"signalID="s2" /&gt; 4.4.2. Subordinating Links An SLINK or Subordination Link is used for contexts introducing relations between two events. SLINKs are of one of the following sorts:  X  Modal: This relation is brought up by events introducing a reference to a possible world  X  mainly I ) ACTIONs and LSTATEs:  X  Factive: Certain verbs introduce an entailment (or presupposition) of their argument X  X  veracity. They include forget (with a tensed complement), regret ,or manage :  X  Counter-factive: Contrary to the previous relation, in this case the event introduces a presupposition about the non-veracity of its argument: forget (to), unable to (in past tense), prevent, cancel, avoid, decline , etc.  X  Evidential: Evidential relations are typically introduced by REPORTING or PERCEPTION events:  X  Negative evidential: Introduced by REPORTING and PERCEPTION events conveying negative polarity:  X  Conditional: Introduced by the presence of an  X  X f X  construction: SLINKs can be either lexically or structurally based. Those that are lexically based are SLINKs introduced by I ) ACTION, I ) STATE, PERCEPTION, and REPORTING events. These events generally take a clausal complement or a noun phrase headed by an event-denoting nominal. The SLINK is established between those events and the one denoted by the complement. An SLINK is always introduced when an event is tagged as being in one of these classes. ditional constructions. In the first case, an SLINK relates the event in the main clause (boldface) and the one in the purpose clause modifying it (underlined): In this example, adopt puts ensure in a modal context, motivating an SLINK with a MODAL reltype .
 cedent clause and the one in the consequent clause: 4.4.3. Aspectual Links An ALINK or Aspectual Link represents the relationship between an aspectual event and its argument event. Examples of the aspectual relations to be encoded are: 1. Initiation: 2. Culmination: 3. Termination: 4. Continuation: An ALINK is required whenever an event is classified as ASPECTUAL. They are, as such, completely motivated by the text.
 picture of the text takes shape with respect to time. 5. Conclusion In this paper, we have presented a descriptive framework with which to examine the temporal aspects of natural language queries. We then demon-strated generally how tense and temporal information is encoded in language, motivating a particular specification description, The rest of the paper reported on work done towards establishing a broad and open standard metadata markup language for natural language texts, examining events, temporal expressions, and their orderings. What is novel in this language, TimeML, we believe, is the integration of three efforts in the semantic annotation of text: TimeML systematically anchors event predicates to a broad range of temporally denotating expressions; it provides a language for ordering event expressions in text relative to one another, both intrasenten-tially and in discourse; and it provides a semantics for underspecified tem-poral expressions, thereby allowing for a delayed interpretation. mation in large textual corpora, according to the specification of TimeML described above. The result is a goldstandard corpus, known as TIME-BANK, which has been released for general use (Pustejovsky et al, 2003). We have also worked towards integrating TimeML with the DAML-Time language (Hobbs, 2002; Hobbs and Pustejovsky, 2003), for providing an explicit interpretation of the markup described in this paper. It is hoped that this effort will provide a platform on which to build a multi-lingual, multi-domain standard for the representation of events and temporal expressions. We are currently building on this work to develop temporal awareness algorithms in the context of question answering systems within the AQUA-INT program.
 Acknowledgements The authors would like to thank the other members of the TERQAS and TANGO Working Groups on TimeML for their contribution to the speci-fication language presented here. In particular, we would like to thank Jerry Hobbs, Inderjeet Mani, Rob Gaizauskas, and Graham Katz. This work was performed in support of the Northeast Regional Reseach Center (NRRC) which is sponsored by the Advanced Research and Development Activity in Information Technology (ARDA), a U.S. Government entity which sponsors and promotes research of import to the Intelligence Community which includes but is not limited to the CIA, DIA, NSA, NIMA, and NRO. It was also funded in part by the Defense Advanced Research Projects Agency as part of the DAML program under Air Force Research Laboratory contract F30602-00-C0168.
 Notes References
