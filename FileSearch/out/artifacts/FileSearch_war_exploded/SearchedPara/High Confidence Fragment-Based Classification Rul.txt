 Frequent pattern discovery in structured data has gained more and more attention in both scientific and industry areas, which can support a broad arrange of applications. In particular, researchers in bio-informatic s and chemistry often need to analyze large collections of molecular compounds to find some desirable common features and regu-larities for different classes of compounds, whi ch helps reveal some intrinsic behaviors of those molecular compounds. One typical example is the DTP AIDS antiviral screen program, which has checked tens of thousands of compounds for evidence of anti-HIV activity. When new compounds arrive, the tr aditional approach to discovering its prop-erties is to conduct biological experiments and evaluate them. But with feature mining and classification techniques, the behavio rs and activities of new compounds can be pre-dicted according to the known features. Anot her example is the drug design progress, where biologists need to screen thousands of compounds to find evidence of activity against a specific disease. With the help o f data mining tools, we can mine some useful features and build a classifier in order to guide the discovery or composition of desirable drug candidates.

The discovery of common features in a set of given instances makes sense in many cases. In contrast to some other data mining problems, given a database of compounds with known classes, we aim to analyze it to find some high confidence molecular frag-ment features, which can be used to build an accurate classifier. When a new molecular arrives, we can use the classifier to predict which class it belongs to.
 In this paper, we present a fragment featur e based approach to predicting the anti-HIV activity of new compounds by finding high confidence instance-centric classifica-tion rules for the imbalanced DTP AIDS database. We mine the frequent fragments in different classes of compounds that can provide best hints of the characteristics of the class they belong to, and then use these fragments to form association rules. Extensible performance study shows that our algorithm is effective in finding discriminating frag-ments for the imbalanced database and can facilitate the development of detecting new compounds with desired anti-HIV activity.
 The rest of this paper is organized as follows. Section 2 reviews the related work. Section 3 introduces some notations, definitions, and the problem formulation. Section 4 describes the SMILES and SMARTS languages used for representing compounds and fragments. Section 5 presents our solu tion to efficiently and effectively mine the frequent fragments of molecular compounds. Section 6 discusses how to build the clas-sification model in details. Then we show the experimental results in section 7. Finally we conclude the study in section 8. The discovery of molecular fragment features can be formulated as a frequent subgraph mining problem, which relies on graph and subgraph isomorphism theory. Various mea-sures to mine substructures of graphs have been proposed. Early subgraph mining al-gorithms generate candidates and check whether they are frequent in a breadth-first search manner, and a typical example is FSG [5]. While algorithms adopting the depth-first search paradigm, such as MoFa [1] and gSp an [10], generate and test the candidates in a depth first way, and usually consume l ess memory, but are more efficient. Recently several algorithms [2,4] have been proposed to provide an automatic approach to com-puting and finding common features of compounds. They focus on efficient mining of frequent molecular substructures in chemical compounds.

This work also relates to associative classification algorithms, which extend the association rule mining to associative classification rule mining, and build classifica-tion model from the mined classification rules. Typical associative classifiers include CBA [7], CMAR [6], and CPAR [11]. Previous studies have shown that associative clas-sification approaches can achieve better classification results than traditional rule-based approaches such as FOIL and C4.5. One dra wback of the associative classifiers is that the number of initial classification rules is usually extremely large, which significantly increases the time of rule discovery and selec tion. Recently an alternate rule-based clas-sifier, HARMONY [8], which adopts an instance-centric rule generation framework, is proposed and shown to be more effective and scalable than previous ones. It keeps for each training instance one of the highest confidence classification rules during the rule mining process, and later builds the cl assification model from the final set of high confidence rules. This work extends the instance-centric classification framework from itemset setting to a more complicated case, that is, fragment feature mining, and vali-dates its utility in classifying imbalanced HIV data. In this section, we introduce some preliminary concepts, notations, and terms in order to simplify the discussion. We also give the problem formulation. 3.1 Preliminary Concepts In this paper, we treat each chemical compound as a simple undirected, labeled graph without multi-edges and self-loops. An undirected labeled graph G can be represented by a 6-tuple, G =( V, E, L v ,L e ,F v ,F e ) ,where V = { v 1 ,v 2 ,...,v k } is the set of vertices, E  X  V  X  V is the set of edges in G , L v is the set of vertex labels and L e is the set of edge labels, respectively, F v : V  X  L v and F e : E  X  L e are mapping functions assigning the labels to the ver tices and edges, respectively.
 Agraph G 1 is isomorphic to another graph G 2 iff there exists a bijection f : V 1  X  V 2 such that for any vertex v E iff V 1  X  V 2 and E 1  X  E 2  X  ( V 1  X  V 1 ) . Equivalently, G 2 is called a supergraph of G 1 . If G 1 is graph isomorphic to a subgraph g in G 2 ,wesay G 1 is subgraph isomorphic to G 2 and g is an embedding of G 1 in G 2 .

A training graph instance can be denoted as tid, cid ,where tid represents the unique identifier and cid represents the class label. An input training graph database D = { t 1 ,t 2 ,...,t n } consists of a set of n graphs, where t i represents the i th instance. A class label set C = { c 1 ,c 2 ,...,c k } contains all the k distinct class labels in D . Let I = { t 1 ,t 2 ,...,t m } be the set of all distinct ver tices appearing in database D . A subgraph pattern p for D is a subgraph consisting of vertex set I p and edge set E p where I p  X  I  X  E p  X  ( I p  X  I p ) .Agraph t j is said to cover subgraph pattern p if t j is a supergraph of p . The number of graphs in D which cover p is called the support of p , denoted by sup p . Given a user-specified minimum support threshold min sup ,a subgraph pattern p is said to be frequent if sup p  X  min sup .

An classification rule is an expression X  p  X  c i : sup c i p ,conf c i p  X , where p is the body, c is the head, sup c i p is the support, and conf c i p = sup c i p sup respectively. The corresponding classification rule of a frequent pattern p covered by instance t j . For a graph instance t j , the frequent covering rules which have the highest conf c i p are called the Highest Confidence Covering Rules w.r.t t j . The support and confidence of a Highest Confidence Covering Rule w.r.t graph instance t j are denoted 3.2 Problem Definition Given an input training chemical compound database D with a class label set C ,and a minimum support threshold min sup , our problem is to find a set of high quality graph-based classification rules for each class c i , which can help classify new com-pounds whose class labels are not known. A chemical compound is modelled as a labeled graph in order to reflect its inner struc-ture in a way that each atom is treated as a vertex and each bond as an edge with labels to indicate the atom types and the bond types.

In mining frequent subgraph patterns, one key point is how to avoid redundant search, as the same subgraph patterns can be grown by gradually adding nodes and edges in different orders. To avoid such redundant search and make the algorithm ef-ficient, an effective method is to design a canonical growing order and adopt a unique representation for each pattern [5,10]. In t his section we introduce the SMILES and the SMARTS which can also help avoid redundant pattern generating and facilitate the mining process. 4.1 SMILES Representation of Compounds First of all, in order to avoid the redundant search of subgraph patterns, we use the unique SMILES (Simplified Molecular Input Line Entry System) language as the canonical representation of a compound [9 ]. This is because the canonical SMILES representation has several advantages for mining compounds. Firstly, SMILES keeps compounds in a lineal format, which supports fast structure searching and is very com-pact for storage. It is said that a typical SMILES will take 50% to 70% less space than an equivalent connection table. Secondly, SMILES is a general representing lan-guage which is very widely used and can be well understood by chemists and biologists. Thirdly, SMILES just contains a simple vocabulary and a few grammar rules and is very vivid for description.

In SMILES representations, atoms and bonds are formed into a sequence, hydrogen atoms can be omitted, aromatic atoms are written in lowercase while others start with a capital, the single bonds and the aromatic bonds in some cases are not written, cycles need to be depicted by breaking one bond in the ring and adding a pair of numbers, and branch structures are repre sented within the brackets.

For example, the compound in Figure 1 (a) can be represented by a SMILES string  X  X C(C)(N)Cc1ccccc1 X , where  X  X 1ccccc1 X  represe nts the benzene ri ng, four C X  X  denote the non-aromatic carbon atoms, N denotes the nitrogen atom, and the brackets represent the branch-connected structure. 4.2 Fragment Pattern Encoding Using SMARTS For most applications, connected substructures are useful enough to reveal some intrin-sic characteristics of compounds. Moreover, the search space of mining disconnected substructures is too huge. Thus, we in this paper only consider fragments of connected substructures, which will be used to form high confidence classification rules. For frag-ment patterns we use the SMARTS (please see [3]) to describe them. SMARTS is a language derived from SMILES in order to specify substructures in compounds, which can be used to determine whether a fragment is covered by a compound. Then in the frequent fragment enumeration process, we can figure out the frequency of a fragment pattern, which is the number of compounds that cover the fragment, by checking the SMARTS of this fragment through the SMILES X  X  of the compounds.

For example, the SMARTS expression  X  X -C(-N)-C-c:c:c X  represents the molecular fragment shown in Figure 1 (b), which is covered by the compound in Figure 1 (a). In this section, we mainly discuss how to efficiently enumerate frequent fragments and how to design some pruning techniques to prune some parts of search space which are not promising in generating high quality fragment-based classification rules. In ad-dition, we also discuss how to mine frequent fragments with class-specific supports, which is especially useful for imbalanced databases. 5.1 Frequent Fragment Enumeration We adopt the widely used projection-based mining framework as a basis to efficiently enumerate the fragment features and get their corresponding classification rules. As shown in Figure 2, each node in the traversal tr ee represents a fragment. Each fragment node in the tree is a connected substructure of compounds with a support no less than min sup . Many previous algorithms have shown that depth-first search is more efficient in mining long frequent patterns than breadth-first search. In this paper, our algorithm traverses the tree of fragment nodes in a strict depth-first search manner.
We first compute the set of frequent bonds, B , in the input database. The root node is assumed to be  X  with no atom or bond. Each node in the fisrt level represents a fragment with only one bond in B . When traversing down one level we recursively extend the current fragment by adding a bond, which will either form a ring or add an atom that is currently not in the fragment substructure. During the mining process, a certain linear order of the bonds,  X  T , is designed and used to avoid generating duplicate fragments. For each fragment node, we constr uct its pseudo projection, which can be efficiently done by recording a set of poi nters that index the boundary positions where the fragment is embedded in the compounds. For the enumeration of the nodes in the next layer, we only need to scan these pointers of the fragment to compute its child frequent fragments. This will be explained m ore clearly by introducing the definition of immediate extensible bonds .
 Definition 1. (Immediate extensible bonds) Given a fragment f , a minimum support threshold min sup , and an input compound database D , for each compound m in D that covers f , we check the boundary positions and record the bonds each of which appears in m but not currently in f and connects at least one atom in f . All these bonds are categorized according to the position o f starting atom, the bond type and the ending atom type. Then the collection of bonds each of which occurs more than min sup times are called immediate extensible bonds of f .
 Lemma 1. (Immediate extension). Given a frequent fragment f and its projected data-base D f , the complete set of frequent child fragments w.r.t. prefix f is equivalent to the set of fragments each of which extends f by a bond in the immediate extensible bonds of f .
 Proof. The proof is simple and due to the limited space we omit it here.
 Therefore, given a fragment f and its projected database D f , the immediate extensible bonds of f , denoted by IEB ( f ) , can be used to extend f to generate bigger frequent child fragments.
 Theorem 1. (Needed extension). Given a frequent fragment f and one of its child frag-ment f b extended from f by an immediate extensible bond b , let the immediate extensi-ble bonds of f b that exactly spread from b be IEB ( f b ,b ) , then the immediate extensible bonds of f and f b hold the following relation: Proof. First, with the definition of IEB ( f b ,b ) , we can divide the IEB ( f b ) into two subsets: IEB ( f b ,b ) and ( IEB ( f b )  X  IEB ( f b ,b ) ). Then it follows that each bond in ( IEB ( f b )  X  IEB ( f b ,b ) ) should start from an atom in f , which is the same as the bonds in IEB ( f ) . According to the anti-monotonic property of frequent pattern mining and the definition of immediate exten sible bonds, any bond that is not in ( IEB ( f )  X  X  b } ) (as b has already been extended into f b ) would not be an immediate extensible bond in an immediate extensible bond in ( IEB ( f )  X  X  b } ) . Thus ( IEB ( f b )  X  IEB ( f b ,b ))  X  ( IEB ( f )  X  X  b } ) holds. So we have: IEB ( f b )  X  ( IEB ( f ) IEB ( f b ,b )  X  X  b } ) .
An example is shown in Figure 3. Figure 3(a) shows a prefix fragment f and its simple projection database. Figure 3(b) shows the immediate extensible bonds of f . The bonds of dotted lines in Figure 3(c) constitute IEB ( f b ,b ) .

Based on Lemma 1 and Theorem 1, for a fragment f b extended from a prefix frag-ment f , we only need to focus on the last extended bond b and figure out IEB ( f b ,b ) , which is the immediate extensible bonds on it. Then we can just check the bonds in ( IEB ( f )  X  X  b } ) and select those which are still frequent and immediate extensible as ( IEB ( f b )  X  IEB ( f b ,b ) ). Then we will easily get the IEF ( f b ) for fragment f b and can use it to generate frequent child fragments for f b . In a recursive way we can get the complete set of all the frequent fragments for the input compound database. 5.2 Pruning Strategies Based on the preceding fragment enumeratio n framework, we can find the complete set of frequent fragments. However, as we introduced in Section 3, for each molecule we only concern the covering rules with the highest confidence. How to efficiently discover these highest confidence covering rules? Following we will discuss some useful pruning strategies to speed up the rule mining process.
 Unpromising Fragment Pruning. According to [8], given a prefix fragment P ,and any fragment f which can be used to extend P to get a bigger and also frequent frag-ment, P  X  f , for any class label c i , the following equation holds: With the upper bound on the right side of th e equation, the unpromising conditional database pruning technique proposed in [8] can be adopted to prune the entire projected database of a fragment. That is, for any compound m i with class label c j in the projected database D P of the current fragment P ( 1  X  i  X | D P | , 1  X  j  X  k ), if the following equation always holds, it means that any fragment-based classifica tion rule generated from a fragment with pre-fix P has no chance to become the highest confidence covering rule of any compound in D P , then the prefix fragment P can be safely pruned.
 Redundant SMARTS Pruning. Suppose there are two fragments f A and f B ,and f A is discovered earlier than f B ,if f A and f B have the same optimized SMARTS expression, which means they have the same embeddings to any compound sharing the same set of bonds and atoms with the same topology, then f B is redundant with regard to f A in the fragment enumeration process. Therefore, f B and its child fragments can be pruned to facilitate the fragment enumeration. This can be efficiently implemented by maintaining a hash table for the optimized SMARTS expressions of all the fragments that have been mined. When we get a new fragment f , we first check if its optimized SMARTS expression has been inserted in the hash table, if so, we can safely stop growing f . Support Equivalence Bond Pruning. The support equivalence item pruning strategy proposed in [8] can also be extended and applied in the fragment-based rule mining with some modifications. For any child fragment f b which extends a bond b to f ,if sup f sup f and f b has no immediate extensible bonds starting from the ending atom of b ,the child fragment f b can be pruned to facilitate the enumeration for the following reason. From sup f holds. Given any other immediate extension e to f ,wethenhave sup c j f f .As f b has no other immediate extensible bonds starting from the ending atom of b , so all the frequent child fragments extended from f b will generate rules with the same confidence as those extended from f . Thus f b can be safely pruned. 5.3 Class-Specific Support Threshold Using a uniform minimum support may be suitable for frequent pattern mining without class label information. However, it may cau se some problems for imbalanced databases with class information. In imbalanced databases, class distribution is skewed. Some classes may be quite large, while the others are small. On one hand, if we set a large value for minimum support, the algorithm w ill have difficulties in finding high quality rules for the small classes. On the other hand, if we set a small value for minimum support, it may lead to the overfitting problem for large classes. This suggests that class-specific support thresholds should be adopted for imbalanced databases.

To specify different minimum support values for different classes, a reasonable ap-proach is to set them in proportion to their size. Suppose that min sup corresponds to the minimum support of the smallest class, then we automatically compute the mini-mum supports for each class c i from min sup according to the class distribution, de-noted as min sup i , by the following equation: Here, | c i | is the number of all the compounds of class c i ,and  X  (  X   X  0 )isthe support differentia factor whichissetto1bydefault.
By assigning class-specific minimum support values for different sized classes, the pruning equation in Section 5.2 is still applicable, except that min sup needs to be replaced with min sup i and the equation should be changed to the following form: By integrating the canonical representation of the compound structure and fragment pat-tern, the projection-based enumeration framework, and the search space pruning tech-niques, we can mine a set of fragment-based high confidence classification rules, which can be divided into k groups according to their class lab els. When a new chemical com-pound arrives, we search the rules in each group to find the highest confidence matching rule in each group, and use the confidence of this rule in group i as the score for class c i . We predict the class label of the new compound as the class with the highest score. This scoring function is simple and also effective in most cases, but may not be the best one for the imbalanced databases like DTP AIDS. As the class distribution in an imbalanced database is extremely skewed, it is usually easier to mine high confidence rules for a large class, while it is relatively difficult for a small class. Thus, the HARMONY-like model [8] biases the big classes. To mitigate this problem, we compute the final score, FinalScore c k t
Here, Score c k t c , c max is the class label with the highest average confidence, and  X  (  X   X  0 ) is called the score differentia factor . We used the HIV data derived from the DTP AIDS antiviral Screen program to eval-uate our approach. This database contains 41911 compounds which are divided into three classes, CA, CM and CI. There are a total of 417 compounds from class CA, 1072 compounds from class CM, and 40422 ones of class CI. All the experiments were conducted on a 2.8GHZ Pentium 4 machine with 1GB memory running Windows XP. 7.1 Effectiveness of High Confidence Rules Selecting We first conducted experiments to evaluate the effectiveness of the pruning strategies. In Figure 4, we show the runtime comparison for mining high confidence fragments with and without pruning strategies. We can see that the algorithm using pruning meth-ods takes much less time than the one without pruning, especially at lower support thresholds. This might be because that higher confidence fragments can be found at lower supports, which will subsequently be used to raise the currently maintained high-est confidences and thus prune the search space. As we can notice from Figure 5, the number of enumerated fragments decreases significantly when the pruning methods are adopted, which illustrates that the pruning methods are very effective in pruning the unpromising parts of search space. 7.2 Interesting Distinguishing Fragments with High Quality Distinguishing patterns, whose frequencies vary significantly from one class of data to another, often reveal ample difference among classes of data and are quite useful for prediction and building classifiers. Here we show the ability of our algorithm of finding distinguishing fragments among different classes. In these experiments we used all the compounds of class CA, CI and CM as the input database and applied the algorithm to it by setting min sup to 20 and  X  to 1 by default. Our approach found 154 distinct fragments in total, among which 113 are for class CA, 41 are for class CM, and 102 are for class CI. To the best of our knowledge, most of these fragments have never been dis-covered by previous methods. Some salient fragments are listed in Table 1 (fragments are here represented as SMARTS strings), an d a few of them are also depicted in Figure 6. These fragments are quite useful for prediction of class label. For example, the frag-ment 1 shown in Figure 6 appears in 32 compounds of the class CA, but never occur in the other two classes. Based on this observation we are able to infer that an unknown compound containing this fragment can be predicted as confirmed active and should be a member of class CA. We note that in Table 1, compared with those of classes CA and CI, the confidences of fragments in class CM are relative low. This might be caused by the fact that the anti-HIV activity of compounds of class CM is more than 50% and less than 100%, which act as compromise between class CA and class CI.

Compared with MOLFEA [4], our algorithm has several advantages. First, it can MOLFEA can discover. Secondly, our algorithm can mine distinguishing fragments for all the classes simultaneously from multi-class data, while MOLFEA only deals with binary data. Moreover, our algorithm can detect some linear distinguishing frag-ments that MOLFEA cannot find(e.g the fragment 25 with SMART string  X  X =C-N-c:c:c:c-Cl X ). Table 2 shows some salient distinguishing fragments our approach found but MOLFEA missed from the input compounds of classes CA and CM. 7.3 Classification Results We used 10-fold cross validation method to evaluate the classification performance of our approach. We tested the sensitivity, sp ecificity, and accuracy of the classification model for databases consisting of compounds of different classes, with min sup vary-ing from 20 to 50,  X  varying from 0 to 3, and  X  =1 by default. Due to the limited space only the results of experiments on classes CA and CI are shown in Table 3.

From these results we can see that as we decrease min sup , the sensitivity and ac-curacy tend to increase significantly, and the specificity tends to decrease marginally. This is because as the min sup goes down, more distinguishing fragments with lower support for rare class CA are detected, which helps a lot in improving the sensitivity and overall accuracy of the classifier. However, if min sup is set to a low value, it may lead to overfitting, especially for the large class, which impairs the specificity. We can also observe the effectiveness of the score differentia factor  X  . With  X  varying from 0 to 3, it does improve the sensitivity a lot, although in the meantime it hurts the specificity and the overall accuracy. In this paper, we study the problem of mining high-quality fragment-based classifica-tion rules for imbalanced mol ecular database of the DTP AIDS antiviral screen pro-gram. We present an efficient approach to mining the fragments that can form rules with highest confidence for each compound. We also take into account the imbalanced class distribution of the database to improve the performance. Some pruning strategies are also introduced to speed up the mining process. Experiments show the efficiency of our method and its effectiveness for aiding classification, which surely will facilitate the detection of new compounds with desired anti-HIV activity.

