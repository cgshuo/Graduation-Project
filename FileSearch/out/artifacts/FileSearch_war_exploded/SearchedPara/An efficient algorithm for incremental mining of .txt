 1. Introduction [1] . Data mining techniques include association rules mining, classi mining, to name a few, with association rules mining receiving a signi
Manyalgorithms fordiscoveringassociationrulesin transactiondatabaseshavebeendevelopedandwidelystudied:Aprioriand its variations, partitioning, sampling, TreeProjection, and FP-growth algorithms [3 time intervals but not during others [7] .
 works, discovering association rules was performed on a given subset of a database speci mining measures, support and con fi dence, have been reformulated to re temporal association rules with numerical attributes such as the TAR algorithm [9] . have to be maintained by discarding the rules that become insigni interestingness measures used are density and strength instead of con algorithm (ULI), Negative Border with Partitioning (NBP), Update With Early Pruning algorithm (UWEP), New Fast UPdate algorithm (NFUP), Fast Incremental Mining (FIM) algorithm and Pre-FUFP Algorithm [16 Unfortunately, none of these algorithms address the incremental mining of temporal association rules. itemsets after the temporal transaction database has been updated. The proposed algorithm employs the skeleton of the incremental procedure of the Sliding-Window Filtering algorithm (SWF) [11] . 2. Preliminaries
DB , let n be the number of partitions with a time granularity, such as month, quarter, year. db database formed by a continuous region from partition P s number of transactions in the partition P h . An item y s,e partition of y and P e is the ending partition of y [8,12] .
 partitions P 1 and P 2 in accordance with the  X  month  X  granularity and db contains one partition P item E 2,3 denotes that the exhibition period of E 2,3 is from the beginning time of partition P and is denoted by MCP( x ). For example, as shown in Table 1 , itemset DE maximal temporal itemset because MCP( D )=(1,3) and MCP( E )=(2,3) hence MCP( DE )=(2,3). A temporal itemset z temporal Sub-Itemset ( SI ) of a maximal temporal itemset x the sub-itemsets { B 2,3 , D 2,3 , E 2,3 , BD 2,3 , BE 2,3 equation:
Where the numeratorindicates thenumber of transactions in thepartialdatabase db rule is de fi ned as an implication in the form ( X  X  Y) MCP( XY ) where minimum support threshold ( min_sup ), and its con fi dence is not smaller than the minimum con 1. Generate all frequent maximal temporal itemsets ( TIs ) with their support values. 2. Generate the support values of all corresponding temporal sub-itemsets ( SI s) of frequent TI s. 3. Generate all temporal association rules that satisfy min_conf using the frequent TIs and/or SIs. 3. Related work association rules by fi nding frequent temporal itemsets within these partitions. number of candidate 2-itemsets generated by PPM is very close to the number of frequent 2-itemsets. starting time or a common ending time. Then, for each sub-database, the second procedure progressively and SI's.
 frequent k -itemsets from the generated frequent 2-itemsets. 4. The proposed algorithm
The main objective of the proposed algorithm is to maintain temporal frequent itemsets after the temporal transaction generated directly from candidate 2-itemsets.
 algorithm is to reduce the number of database scans required for the updating process. fi fl owchart of the ITARM algorithm is depicted in Fig. 1 . The algorithm consists of two main procedures: the Incremental procedure, which actually performs the incremental mining and the Update_C2 procedure, which performs preprocessing directly.
 applies the scan reduction technique by generating all candidate k -itemsets from candidate ( k database only once.
 the ITARM algorithm works in the two cases.
 two partitions P 1 and P 2 according to the month time granularity from January 2009 to February 2009. Suppose that min_sup =30% and min_conf =75%.
 temporal association rules mining algorithm. The proposed algorithm support count equal to or greater than the relative minimum support count. For example, the itemset BC occurs from P
Its relative minimum support count is equal to [ min_sup  X   X  3 from P 1 to P 3 . This item has a support count greater than relative support count (5 2-itemsets. Note that although the itemset BD appears in two transactions of P itemsets of all sizes in the database scan.
 itemsthatappearineachitemset.Forexample,theitemsetCEconsistsoftwoitemsCandE.SinceMCP( C )=(1,3)andMCP( E )=(2,3), we have MCP( CE )=(2,3). Hence, the TI will be CE 2,3 as shown in Table 5 and the corresponding SI's are generated ( C shown in Table 7 . Table 8 illustrates the new frequent temporal itemsets in the updated database. they are to be considered as an extension to the P 2 transactions, instead of being a new partition P candidate 2-itemsets of the original database by scanning P original database after removing P 2 from the original database and merging it with P same way as explained above.
 just equal to the number of comparisons needed by the other two algorithms in handling one partition. 5. Correctness of proposed algorithm
In this section, the correctness of the proposed algorithm is proved using the same de algorithms deal with two types of candidate itemsets, 1) Type newly selected after only taking the current data partition into account. Let N that contain itemset X . The region ratio of an itemset is de
De fi nition 1. A region ratio of an itemset X for the transaction database db database db i,j is considered.

Lemma 1. A 2-itemset X remains in the candidate 2-itemsets after the processing of partition P for any integer t in the interval [i, j], r i,t (X)  X  min_sup where min_sup is the minimal support required.
Proof. To prove the  X  if  X  condition, consider the following two cases: before the processingof partition P i . Since r i,i (X)  X  the processing of partition P i , itemset X will remain as a type remain in candidate 2-itemsets throughout the processing from P
To prove the  X  only if  X  condition, i.e., if X remains in candidate 2-itemsets after the processing of partition P such that for any t in the interval [ i , j ], r i,t ( X ) candidate 2-itemsets after the processing of partition P j by setting j = i since r i,i ( X )  X  min_sup .

On the other hand, suppose that X is a type  X  candidate itemset after the processing of P type  X  candidate itemset in a previous phase. Then, we will trace backward the type of itemset X from partition P
P , P j  X  1 , P j  X  2 , etc.) until the partition that records itemset X as a type partition identi fi ed above as partition P i , we have, for any t in the interval [ i , j ], r
Lemma 2. An itemset X remains in candidate itemsets after the processing of partition P r (X)  X  min_sup, where min_sup is the minimal support required.

Proof. Clearly, the proof of  X  only if  X  condition follows directly from Lemma 1. To prove the exists an i such that r i,j ( X )  X  min_sup , then let u be the largest v such that r
Lemma 1 that itemset X will remain in the candidate itemsets after the processing of partition P ( X )  X  min_sup since r i,u ( X 2 ) b min_sup and r i,j ( X 2 ) candidate itemsets after the processing of partition P j , completing the lemma proof. algorithm.

Theorem 1. If there exists a frequent itemset X t,n in the transaction database db candidate itemsets produced by the proposed algorithm.

Proof. Let n be the number of partitions of the transaction database. Since the itemset X r ( X )  X  min_sup , which essentially is a special case of Lemma 2 for i = t and j = n , proving this theorem. database db i,j after the processing of P j . We then have the following lemma. Lemma 3. For i  X  t  X  j, then C t,j  X  C i,j .

Proof. Assume that there exists a 2-itemset X  X  C t , j . From the that r h,j ( X )  X  min_sup , where t  X  h  X  j . Since i  X  t also in C i , j , i.e., X  X  C i , j . The fact that C t , j  X  Theorem 1 and Lemma 3 lead to the following theorem which states the correctness of the proposed algorithm.
Theorem 2. If there exists a frequent k-itemset X k t,n in the transaction database db the proposed algorithm.

Proof. Since itemset X k t , n is frequent, we have r t,n frequent with r t,n ( X h )  X  min_sup . Precisely, X 2 t , n monotone Apriori-like heuristic, i.e., if any length k itemset X
X i,n will never be frequent, the super-itemset X k t , n of X
In addition, if there exists a frequent TI 3 -itemset ABC ( ABC )  X  min_sup , then we have r t,n ( AB )  X  min_sup , r
ABC
Hence, Theorem 2 states the correctness of the proposed algorithm. 6. Experimental results main memory, running on Microsoft Windows XP Professional and all the programs are coded in C#.
The experiments were performed on synthetic publication databases, used in the experimental results of the previously [ Tx n is the number of maximal potentially frequent itemsets (in thousands), and o is the number of partitions. purchased at one time. The goal for this dataset is to fi equal to 164 while the average transaction size is equal to 6.5.
 combination of different parameters is, the proposed algorithm performs signi to perform the update, while both the SPF and Twain algorithms need two database scans to perform the update. database increases while the size of the incremental database is previous mining well and can incrementally generate frequent itemsets ef 7. Conclusion rulesinthetransactiondatabase.Theproposedalgorithmreducesthetimeneededforgeneratingnewcandidatesbystoringcandidate proposed algorithm is scalable and can work with large databases.
 Acknowledgements My thanks to Dr. Mohammed J. Zaki for his valuable comments and his revision.
References
