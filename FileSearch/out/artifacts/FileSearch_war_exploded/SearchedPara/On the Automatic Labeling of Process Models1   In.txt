 Business process management is a concept for enabling companies to cope with the increasing dynamics and challenges in a competitive business environment. A key element of process management is to map business processes to mod-els in order to leverage understanding, analysis and improvement of processes. Today, many larger enterprises possess an extensive documentation of their busi-ness process in terms of several thousan dmodels,oftenatasignificantlevelof detail [1]. In order to make large and detailed models easier to understand, re-cent research has developed automatic abst raction techniques to generate coarse-grained model parts from more detailed ones [2,3].

The essential idea of abstraction is to identify fragments of a model that can be aggregated into a single activity. While this is valuable to reduce the structural complexity of a large model, existing techniques do not address how a suitable name for an aggregated part can be established. When using abstraction to render a high-level view of a process model for a human reader, which is the most popular use case for abstraction [4], this is troublesome. In this paper, we address the naming problem of aggregated model parts from the perspective of naming a whole process model . A complete process model is as much a collection of activities with mutual control-flow dependencies as an aggregated process model part is, although it is evidently not part of any higher-level model. Since in many industrial settings entire process models themselves carry names that convey indications of the business procedure that they capture, the underlying process model naming conventions are a valuable source of inspiration on how to name model parts. Our contribution is an automatic approach for generating name suggestions for a process model based o n its events and activities, which is applicable to process model fragments as well. From a practical point of view, this approach paves the way to an integrated and automated abstraction of process models, in pursuit of the communication advantages associated with skilfully decomposed process models [5].

Against this background, the paper is structured as follows. Section 2 discusses the problem of assigning a meaningful name to a process and identifies a list of naming strategies in models from practice. Section 3 describes the different phases of our approach to generate process model names. Section 4 discusses our contribution in the light of related work. Finally, Section 5 summarizes the findings and provides an outlook on future research. Before considering an automatic approach for generating process model names, we have to understand how modelers assign names to process models. Guidelines exist on how activity names should be composed, e.g. [6] suggest a verb-object style putting the action first followed by the corresponding business object. While such guidelines advocate a certain grammatical structure of naming, they do not deal with its content by refraining to mention how to choose a particular verb or business object in the name of the model. In Section 2.1, we introduce Event-Driven Process Chains (EPCs), t he process modeling language that we consider in this paper, and discuss directions for choosing a name for a model. In Section 2.2, we inspect three sets of p rocess models from practice in order to identify strategies of naming. These strategies provide us with the foundation to automatically generate names for a fragment or the whole EPC. 2.1 Event-Driven Process Chains An EPC is a graph-structured process model, which consists of different types of nodes: functions, events, and connectors. Functions define the business activ-ities that have to be executed while events define the pre-conditions and post-conditions for starting a function. Figure 1 shows an example EPC from the SAP reference model with two functions (rounded boxes) and four events (hexagons). Functions and events are connected via control flow arcs in an alternating way. Complex routing is defined using connectors (circles). In the example, we observe an OR-split connector (symbol  X  ) creating two end events. An EPC has at least one start event (no incoming arc) and at l east one end event (no outgoing arc).
To illustrate the naming problem addressed in this paper, we re-consider the example EPC from Figure 1. One approach for naming the entire process would be to consider the different activities of the model. The two functions relate to the business object material price , in respective connection with the actions activate and change , which therefore could be used as central elements of the overall name. Another option would be to look at the names of the end events since they refer to what is actually acco mplished by executing the process. Hence, the creation of the revaluation document may represent another naming option. This discussion aims to emphasize that there are many options, and they are difficult to rank without prior domain knowledge. In the following part, we aim to systematically identify different strategies for choosing a name for a process. 2.2 Classification of Naming Strategies We collected an extensive set of process m odels from practice in order to iden-tify naming strategies. We used three different model collections, aiming in this respect for broad diversity in the underlying domains. First, we had access to the SAP Reference Model [7, pp. 145-164], a collection containing 604 EPCs organized in 29 functional branches of an enterprise such as sales, accounting and other areas, with a total number of 2,433 activity labels. Second, we have used a model collection from a European utility vehicle manufacturer consisting of one main procurement process with nine sub-processes and altogether 115 activity labels. Third, we inspected a model collection containing the incident management process from an international IT service provider . The process is captured as an EPC on three abstraction layers, containing 88 sub-processes and 293 activity labels.

We analyzed the names in the model sets by first identifying action and business objects in the name of the process model. Then, we used a self-developed tool that identified linguistic relations between the name parts and the activity and event labels. As a final step, we inspected each model manually. Based on this proce-dure, we were able to develop a classification of naming strategies. Five different approaches were observed including Dominating Element, Main Activity, Start or End Events, Conjunction of Activities, and Semantic Naming. Figure 1 illustrates some of these strategies, wh ich we now aim to describe. 1. Dominating Element: If one particular business object or action is men-2. Main Activity: Some of the analyzed processe s contain one particular ac-3. Start or End Events: Especially when the state at the beginning or at the 4. Conjunction of Activities: If the same action is performed on different 5. Semantic Naming: The previously introduced co ncepts always explicitly In this section we present an automatic approach for the generation of process model names, which builds on the strategies identified in the previous section. The main idea of the approach is to derive a set of potentially useful names for a given process model based on its activities and events. Subsequently, a modeler can select the most suitable name.

We organize our approach in three steps. Phase 1 serves as preparation for the main information extraction. In this phase all activities, start events and end events of the given process model are anno tated with their respective action and business object. For this step, we use an algorithm for automatically identifying action and business objects from activity l abels as presented in [9], and extended it with a capability to analyze different start and end event structures as defined in [10]. In Phase 3, the name candidates are transformed automatically to the verb-object style based on the techniques defined in [9]. In the following subsec-tions, we introduce the specific techniques to generate the different proposals in Phase 2, as well as their interdependence. All of these assume that annotations of actions and business objects are available from Phase 1. The reader may wish to refer to [11] for the pseudo algorithms that abstract from our implementation in Java.

The Dominating Element Extraction technique investigates whether the given process model includes a dominating action and dominating business object. Therefore, for each element type, i.e. action or business object, the occurrence of the elements among all activities of t he model is checked. If there exists an element that has a higher occurrence than all other elements among this type, it is saved as dominating element. If a dominating element has been identified, it can be used as input for the Subordinate Element Extraction technique. In case no dominating element could be detected, the further steps are limited to executing the Event Extraction and the Main Activity Extraction techniques, which do not require the input of a dominating element.

If one type of dominant element was detected, the Subordinate Element Ex-traction technique identifies those actions or business objects with which the dominant element is connected in the giv en process model. Therefore, all ac-tivities containing the dominating element are scanned and the complementing element is both extracted and saved to a list of subordinate elements. If, for in-stance, the dominating action analyze was derived from the two activities Order Analysis and Program Analysis , the subordinate elements are given by the busi-ness objects order and program . Hence, all activities containing the dominating element are selected and the subo rdinate elements are derived.

We introduce two techniques for const ructing a process name based on the set of subordinate elements and the dominating element: Lexical Conjunction and Logical Conjunction . In case of the Lexical Conjunction the subordinate actions or business objects are replaced with a n ewly introduced element. In partic-ular, the lexical database WordN et is consulted to detect common holonyms and hypernyms of the subordinate elements. If a proper holonym  X  a word that is more generic than a given word  X  or a hypernym is found  X  a word that is more specific than a given word  X  a name proposal is constructed using the dominating element and the according holonym or hypernym. In case of the Logical Conjunction, the subordinate elements are simply connected using the logical operators and or or .
 Another technique that builds on the identified dominating elements is Label Repository . This technique uses the activities of other process models to build up a label repository. If a dominating element was identified with the Dominating Element Extraction technique, such a label repository can be consulted to find a corresponding element which is likel y to be connected with the dominating element. As an example, consider the SAP process model Capacity Planning containing the dominating business object Capacity . As this business object in isolation is not a very comprehensive process name, the repository can be con-sulted. By browsing the repository for labels containing Capacity , we obtain, amongst others, the process name Capacity Planning which perfectly matches the original process name.

The Event Extraction technique derives potentially useful names from start and end events. Therefore, start and end events are inspected on their merit to provide information about the model content. That decision is based on the usage of particular signal terms given in the event label. For instance, it is not very probable that the term was in the start event Asset was found indicates what is to be performed in the process; rather, it represents a state that was required for triggering the first activity. By contrast, the term is to be in the start event Asset is to be created captures the necessity for the execution of a subsequent action within the process of consideration. Hence, (1) the identified start events are reduced to those where the signal term indicates that the event actually contains information about what is going to happen and (2) the end events are restricted to those that signal what has happened in the process. Based on an extensive classification of these terms from the investigated process model collections, this decision ca n be made in an automated fashion.
Referring to the main activity approach a s briefly mentioned in Section 2.2, we further introduce the Main Activity Extraction technique. The objective of this technique is to automatically decide whether a considered activity repre-sents a main activity for the given process model or not. In order to be able to make this decision for an individual activity, it is necessary to automatically derive the context of the process and subsequently decide about the role of the activity. This approach utilizes the insight of our analysis that approximately 85% of the main activities are found either at the beginning or at the end of the process. Accordingly, the main activit y extraction presumes the existence of a main activity in the first or last position and selects the according activity labels as process name proposals.
 In order to obtain an all-encompassing approach, we combined all techniques. To some extent the order of executing the techniques is fixed as some depend on the on the input of other, like the Lexical Conjunction . However, techniques such as Main Activity Extraction can be executed independently from other techniques and can be executed at any time. Several approaches have been proposed fo r process model abstraction. The work by Polyvyanyy et al. builds on an algorithm for aggregating activities based on a slider and specific abstract ion criteria [3]. Abstraction criteria are discussed in [12,13]. A recent paper presents an ab straction approach based on behavioral profiles [14]. For a set of activities, this approach generates the control flow of the aggregated model. Both approaches do not generate names for aggregated activities, such that our work is comp lementary. A different approach based on meronymy relations is presented in [15]. This approach inspects meronymy relations between activity labels to find aggregation candidates. It integrates the problems of finding aggregation candida tes and aggregation names. Our work is more general in that sense that it is able to derive names for arbitrary process model fragments, even if they do not share a meronymy relation.

The linguistic analysis of activity labels is also an import task in process model matching and similarity calculation [16,17,18]. Different approaches of matching process models are integrated in [19]. T his area is also related to research on semantic annotation of business proces s models [20]. Recent research has also started using natural language processing techniques for generating process mod-els from text. Gon  X  calves et al. generate process m odels from group stories [21]. The approach by the University of Klagenfurt combines linguistic analysis with user feedback [22]. The Rapid Business Process Discovery (R-BPD) framework uses natural language techniques for constructing BPMN models from corporate documentations or web-content [23]. An aphora resolution is tackled in a recent approach to generate BPMN models [24]. In this paper, we have addressed the problem of automatically generating names for process models. Our work is motivated by the fact that existing works on process model abstraction require tellin g names for structurally aggregated pro-cess fragments. Our overall contribution is an automatic naming approach that builds on the linguistic analysis of the elements of process models from industry. The work presented in this paper has significant implications for research and practice. The automatic generation provides the basis not only for proposing names of whole processes, but also for process fragments. In this regard, our ap-proach can be used for instance to dynamically generate abstractions of different granularity as the user is interacting with the modeling tool.
 The main task for future research is the validation of the presented approach. This may include the comparison of the given with the generated names but also an applicability assessment by humans. In addition, we aim to further investigate the usability of different naming strategies. Currently, if a single name for an ab-stracted fragment is needed , a system can only make a random suggestion from the set of name proposals. We expect that the strategy itself, but also the length of the suggested name has a significant im pact on the perceived usefulness. Based on such insight, we will be able to select the best name from a set of suggestions.
