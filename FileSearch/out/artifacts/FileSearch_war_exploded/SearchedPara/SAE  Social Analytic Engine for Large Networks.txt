 Online social networks become a bridge to connect our phys-ical daily life and the virtual Web space, which not only provides rich data for mining, but also brings many new challenges. In this paper, we present a novel Social Analytic Engine (SAE) for large online social networks. The key is-sues we pursue in the analytic engine are concerned with the following problems: 1) at the micro-level, how do people form different types of social ties and how people influence each other? 2) at the meso-level, how do people group into communities? 3) at the macro-level, what are the hottest topics in a social network and how the topics evolve over time?
We propose methods to address the above questions. The methods are general and can be applied to various social networking data. We have deployed and validated the pro-posed analytic engine over multiple different networks and validated the effectiveness and efficiency of the proposed methods.
 J.4 [ Social and Behavioral Sciences ]: Miscellaneous; H.2.8 [ Database Management ]: Data Mining Algorithms, Design Social analytic engine; Social influence; Social network
The rapid proliferation of online social networks provides rich data for us to understand the complex mechanism that governs the dynamics of social networks. This has attracted much attention from both academic and industrial commu-nities. For example, SNAP 1 is general purpose network analysis and graph mining library. It is mainly designed for static network and provides several general analytic tools. GraphChi 2 aims to bring web-scale graph computation avail-able on a modern laptop. It supports running very large graph computations on single machine, using parallel tech-niques. If has focused on computation over graphs, but can-not be directly applied to social networks. For example it ignores several important factors underlying the social net-works such as social influence, social status, and structural hole.

In this paper, we propose an Social Analytic Engine (SAE) for analyzing and mining large social network. Figure 1 shows the architecture of SAE. The cornerstone of the ana-lytic engine is a distributed graph database, which provides storage for the networking data. On the top of the database, there are three core components: network integration, social network analysis, and distributed machine learning.
The network integration component supports to inte-grate entities extracted from different networks. For ex-ample, in academia, an author may have profile pages on Google Scholar, AMiner, and LinkedIn, but with different accounts. Automatically recognizing and integrating those profile pages can benefit many application such as expert finding and influence analysis.

The social network analysis component is our major tech-nical contribution. It first provides basic analyses for net-work characteristics, including macro-level properties such as density, diameter, degree distribution, community par-tition, and also micro-level properties such as centrality, homophily, reciprocity, prestige, and reachability for spe-cific nodes. Moreover, we have designed and implemented several novel technologies for social influence analysis [2, 6, 12], structural hole spanner detection [3], and social tie min-ing [1, 5, 9, 10, 11]. More specifically, social influence aims to quantify the influential strength between users from differ-ent angles (topics) in a large social network. Structural hole spanner detection tries to recognize structural hole spanners who control the information flow in the social network. So-cial tie mining tries to reveal fundamental factors that form the different types of social relationships.

We have also developed a distributed machine learning component, which supports to incorporate various social-based factors derived from the above social network anal-ysis component into machine learning models. Employing factor graph model as the example, we demonstrated that h ttp://snap.stanford.edu/ http://graphlab.org/graphchi/ machine learning component. Table 1: Several typical social networks. # Mes-Co-Author [ 3 , 8 , 6] 1,629,217 2,623,832 2,174,141 Twitter [ 1 , 3] 112,044 468,238 2,409,768 Patent [ 7 , 11] 190,000 32,000,000 4,000,000 Slashdot [ 5 , 9] 93,133 964,562 8,714,700
Mobile [ 5 , 9] 106 5,436 16,807 by incorporating social theory based features into the facto r graph model, the performance of inferring social tie [5] can be significantly improved.

The proposed social analytic engine has many real appli-cations. We will use integrated entity search, social influ-ence analysis, and topic evolution analysis as the example to demonstrate the power of the analytic engine.
Let us begin with the social networking data we are study-ing in the analytic engine. Table 1 lists statistics of several typical social networks. Co-Author is an academic network consisting of authors and collaborative relationships between authors. Twitter is a subnetwork crawled using the snowball sampling method. Patent is a heterogeneous network con-sisting of companies, inventors, and patent full text, derived from a patent database. Weibo is a Twitter like microblog-ging network. 3 Slashdot is a network of friends and foes. Email is a network derived from the Enron data set, and Mobile is a location based network of mobile users.
We then use three scenarios to introduce the core tech-nologies in SAE: Integrated Entity Search, Social Influence Analysis, and Topic Evolution Analysis.
Given a query, finding the most relevant entities (e.g., opinion leaders, authors, and companies) in a network is an important task for social network analysis. The problem has been referred to as entity search or expert finding (when searching for people). However, traditional research ignores one fact: a user may have multiple different accounts in different networks. For example, in the academia, a user may have profile pages in Google Scholar, and AMiner and LinkedIn.

Automatically connecting the entities from different net-works can significantly help rank the entities. We first pro-pose a network integration method. The basic idea is that the same entity in different networks would have the same social circles. To implement the method, given two input networks, we first identify potential candidate pairs using heuristics. We then construct a pairwise factor graph by viewing each candidate pair as an observation variable x and associate each pair with a binary variable y to indicate whether the pair represent the same entity. We use a small labeled data set to train the factor graph model by maximiz-ing the log-likelihood objective function P ( Y | X ) ( Y and X h ttp://weibo.com are respectively the set of corresponding variables { x } and { y } ), and then apply the trained model to identify the other linked pairs.
 We have conducted an experiment on Google Scholar, AMiner, LinkedIn, and VideoLecture. With the proposed method, we have accurately integrated more than 10,000 researchers from the four networks.

Based on the integrated results, we propose a propagation-based entity ranking algorithm. Given a query q , the idea is to leverage both textual and network information to cal-culate a relevance score r [ v ] for each entity v  X  V .
More specifically, the method has two stages: in the first stage, we calculate the relevance score of an entity to the query q by utilizing language model; in the second stage, we select the top-ranked entities as candidates and construct a heterogeneous subgraph. We revise the relevance score of candidates by propagating the score between the linked entities in the subgraph. The intuition behind the second stage is, a document written by the user with higher exper-tise degrees on a topic (query) is more likely to have a higher relevance (or impact), an organization owns higher quality documents and senior/active users should be ranked higher, and a user who writes documents with higher impact should be ranked higher. We perform the score propagation as fol-lows (here we use an organization vertex c as the example): r k +1 [ c ] = (1  X   X  1  X   X  2 ) r k [ c ]+  X  1 w here r k [ c ] is the ranking score of organization c after the k -step propagation; V c a denotes a set of users related to orga-nization c and V c d denotes a set of documents owned by orga-nization c ;  X  1 and  X  2 are two parameters to control the prop-agation. The number of propagation steps reflects how we trust the network information. Setting k = 0 indicates that we only use the content information, while setting k =  X  indicates that we only trust the network information, thus the algorithm obtains a result similar to that of PageRank [4] on the heterogeneous network.
Social influence occurs when one X  X  opinions, emotions, or behaviors are affected by others. It is widely viewed as a fundamental force that governs the dynamics of social net-works. In SAE, we provide a unique feature to estimate users X  topic-based influence. As the example given in Fig-ure 1, Quoc Le is identified as one of the major influencees of Prof. Andrew Ng.

The input of this problem is a social network G = ( V, E ), and a T -dimensional topic distribution  X  v  X  R T associ-ated with each vertex (user) in G . Each element  X  z v is the probability (importance) of the user on topic z , satisfying P modeling methodologies in the distributed machine learn-ing component of SAE. The goal of social influence analysis is to derive the topic-level social influence based on the in-put network and topic distribution on each user. Formally, social influence from user v to v  X  denoted as  X  z vv  X  is a nu-merical weight associated with the edge e vv  X  and topic z . In most cases, the social influence score is asymmetric, i.e.,  X  vary on different topics. We also define one X  X  global influence
To quantify the influence between users, it is necessary to c onsider both user-specific topic distribution and the net-work structure. We employ a unified approach to utilize both the local attributes (topic distribution) and the global structure (network information) for social influence analy-sis. The algorithm is called as TAP (topical affinity prop-agation) [6]. The main idea is to perform affinity propa-gation at topic-level for social influence identification. The approach is based on a factor graph model, in which the observation data are cohesive on both local attributes and relationships. To calculate the influence in different periods, we execute the proposed method on networks at each time point respectively.
Understanding what are the hottest topics and how the topics evolve over time is an important and challenging task. SAE addresses this problem by supporting to construct a topic flow graph . In a topic flow graph, a vertex denotes a topic, and an edge represents a topic flow. A topic flow from one topic to another at adjacent time points represents the former one evolves (splits or merge) into the latter one. As the example shown in Figure 1, the  X  X ig data X  topic is very hot recently and the topic can be traced back to  X  X atabase X  and  X  X arallel computing X . A vertex without any in-edges represents an emerged topic. A vertex without any out-edges denotes a topic that people do not talk about. The strength of the arrow between two vertices indicates the similarity of the two corresponding topics. The size of a vertex represents the hotness of the corresponding topic.

Given a query, SAE returns a topic flow graph containing relevant topics to the query. The user is allowed to choose a vertex (topic). The system then identifies the backbone path containing the chosen topic, and presents all topics in that path. The system also displays a table to present documents, users, and organizations relevant to the selected topic in each social network.

The topic flow graph can be defined as a directed acyclic graph (DAG), where vertices represent the topics at each time point, and edges indicate the topic flow between two consecutive topics along time. Given a set of documents over time, technically, the goal is to extract hidden topics and construct a DAG which represents the flow of topics.
To automatically generate the topic flow graph for a given query, we first utilize the probabilistic topic model imple-mented in the distributed machine learning component of SAE to extract hidden topics from the documents at each time point independently. Each topic is assigned with a word distribution  X  zw , which indicates the probability that the word w will be used to express the topic z . We then employ classic clustering algorithms like K -means to cluster topics in consecutive time points. We define the distance between two topics as the KL-divergence of their word dis-tribution. For two consecutive topics along time, we create an edge if their distance is less than a threshold, and define the strength of the edge to be inversely proportional to the distance.
In this paper, we present the Social Analytic Engine (SAE) for large networks. We briefly introduce the archi-tecture of the system and then use three scenarios as the example to explain the core technologies: integrated entity search, social influence analysis, and topic evolution anal-ysis. The engine also provides many other social network analysis tools such as kernel community detection, struc-tural hole spanner detection, and user behavior modeling. We deploy the SAE engine over a number of different genres of data sets and our studies validate the effectiveness and efficiency of the proposed social analytic engine. Acknowledgements. The work is supported by the Natural Science Foundation of China (No. 61222212, No. 61073073, No. 61170061), Chinese National Key Founda-tion Research (No. 60933013, No.61035004), and a research fund supported by Huawei Inc. [1] J. Hopcroft, T. Lou, and J. Tang. Who will follow you [2] L. Liu, J. Tang, J. Han, M. Jiang, and S. Yang. [3] T. Lou and J. Tang. Mining structural hole spanners [4] L. Page, S. Brin, R. Motwani, and T. Winograd. The [5] J. Tang, T. Lou, and J. Kleinberg. Inferring social ties [6] J. Tang, J. Sun, C. Wang, and Z. Yang. Social [7] J. Tang, B. Wang, Y. Yang, P. Hu, Y. Zhao, X. Yan, [8] J. Tang, J. Zhang, L. Yao, J. Li, L. Zhang, and Z. Su. [9] W. Tang, H. Zhuang, and J. Tang. Learning to infer [10] C. Wang, J. Han, Y. Jia, J. Tang, D. Zhang, Y. Yu, [11] Y. Yang, J. Tang, J. Keomany, Y. Zhao, Y. Ding, [12] J. Zhang, B. Liu, J. Tang, T. Chen, and J. Li. Social
