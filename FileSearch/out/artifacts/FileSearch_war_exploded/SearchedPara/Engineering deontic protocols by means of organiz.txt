 1. Introduction 1.1. The importance of protocols in cooperative information systems
Cooperative information systems (CIS) aim at supporting cooperation and the coordination of distributed activities within and between organizations ( Verharen, 1997 ). It includes applica-tions such as inter-organizational workflow (IOW) ( Schmidt, 2004 ), supply X  X hain management ( Fox et al., 2000; Wang et al., 2008 ), e-commerce ( He et al., 2003 ), e-institutions ( Sierra et al., ). Multi-agent systems (MAS) are known to be an adequate design paradigm to build such CIS, notably because they provide high level abstractions to deal with distribution, to model sophisticated interaction protocols ( Huget and Koning, 2003 ) and to capture powerful organizational patterns ( Ferber et al., 2001; Hu  X  bner et al., 2002 ). Following this perspective, the designer has at his disposal high level concepts, inherited from MAS (such as roles, groups, teams, interaction protocols, commitments, patterns between the organization X  X  roles to be expressed. At run time, protocols ensure the efficiency of interactions by structuring the flows of communications in manageable and coherent units, i.e. conversations corresponding to protocol executions. By obeying to the rules of a protocol, a conversation gives a context to each communication and so improves its meaning. Besides implement-ing a protocol as a specific and independent component, instead of having it improperly distributed and hard-coded into agents, gives it numerous software engineering qualities regarding MAS issues such as autonomy, security, adaptability or scalability ( Hanachi and Sibertin-Blanc, 2004 ). 1.2. Problem definition: requirements for modeling protocols world organizations requires three additional qualities: easy integration in organizations, taking into account the complexity of interactions and reliability. Let us examine in detail these three requirements which have not yet been simultaneously addressed in the previous works.
 1.4. Our contribution
Given the previous observations, the aim of this paper is to propose a new formalism, which extends and unifies the two previous PN dialects. This formalism supports the design and the implementation of deontic protocols and targets a class of application that other formalisms could not cope with, notably cooperative information systems. More precisely, the contribu-tions of this paper are threefold:
The proposal of a new modeling formalism called organiza-tional Petri nets, which integrates deontic Petri nets (DPN) (Raskin et al., 1995, 1996 ) and PNO ( Sibertin-Blanc, 1985, 2001 ). This formalism enables the three dimensions involved in protocols to be represented together with their deontic constraints. It also provides means to analyze and simulate protocols. We provide its metamodel, its syntax and its semantics.
 A three-step process to progressively model a protocol with OgPN.

A theoretical framework for analyzing deontic properties. In addition to Petri net standard properties, we define original deontic properties concerning on one hand the coherence of
OgPN and on the other hand the deontic quality of the actors X  behaviors. 1.5. Organization of the paper
This paper is organized as follows. In order to illustrate our proposal, Section 2 presents an example, a item-borrowing protocol, that will guide us throughout this paper. In Section 3, we review the two previous PN formalisms related to our work and show their strengths and weaknesses. Section 4 gives a metamodel of OgPN, its formal definition and its semantics. Section 5 presents a process to design OgPN models and illustrates it through the example. Section 6 gives several formal properties that can be verified: standard and also deontic properties of OgPN. Finally, Section 7 compares our contribution to related works. Section 8 concludes the paper and mentions some open issues. 2. A working example: lending policy of a library
A library item-borrowing protocol will be used as a working example throughout this paper to illustrate the OgPN formalism. Example 1. The borrowing protocol is described informally by describing the roles involved, the borrowed items, the lending policy and library sanctions:
Two roles are involved: borrower and librarian. There are different categories of borrowers according to their age, and a specific lending policy is associated with each category. Three types of items can be borrowed: books, CDs and DVDs.
There are different categories of books and DVDs according to the age of the public the items are intended for.

The lending policy . An adult may borrow a maximum of 10 items with a limit of eight books, three CDs and two DVDs.
A teenager may borrow a maximum of six items with a limit of five books, two CDs and one DVD. A child under 12 may borrow only books or DVDs intended for the young. The loan duration for books and CDs is three weeks. For DVDs, it is one week. An item may be reserved provided it has not already been reserved. An item loan may be renewed once. Loans of items that are reserved by another borrower cannot be renewed. tokens (color, tuples, objects, net, etc.). Among them, two dialects of Petri nets have drawn our attention, deontic Petri nets and Petri nets with objects. 3.2. Deontic Petri nets (1995, 1996) who proposes an extension of classical PNs to represent deontic aspects.
 represent ideal and non-ideal actions. White transitions represent ideal actions corresponding to an expected behavior. Black transitions represent sub-ideal actions and gray transitions repair actions. Weights associated with transitions express how good or bad each transition is. A positive weight assigned to a sub-ideal transition represents a penalty,while a negative weight assigned to a repair transition is a reward to compensate a sub-ideal action performed before. The weight of ideal actions is zero. example of the book-borrowing protocol from Raskin et al. (1995) .
The places P 1, P 2, P 3 represent,respectively,a state where a book is borrowed , damaged or returned . The transitions t 1, t 2 represent, respectively,the actions of damaging a book or repairing a book after damage . Transitions t 3 and t 4 correspond to the action of delaying a book delivery . Finally, t 5 and t 6 represent the action of returning a book either without damage ( t 5) or with damage ( t 6).
The weight is written next to the concerned transition if it is different from zero.
 several scenarios/sequences of transitions are possible. The sequence limited to the transition t 5 is an ideal behavior since it means that the borrower returns the book in time and undamaged. Conversely,the sequence t 1 : t 4 : t 6 is a non-ideal behavior since it means that the borrower has damaged the book and returns it late.
 with the borrowing protocol (the expected behavior being the ideal one),the authors have defined a preference ordering.
Definition 2 ( Preference ordering of execution ). A sequence of transitions s 1 is preferred to a sequence s 2 if the sum of the weights of the transitions in s 1 is less than that of s 2. having a weight of 1,is preferred to the sequence  X  X  X o return a damaged book X  X  s d  X  t1 : t6 having a weight of 10.
 represent the actors and the information involved in the protocol.
Indeed, in DPN tokens are atomic and undistinguishable. It means that neither the different entities of the informational system, nor the different roles of the organizational model can be distin-guished. In the context of the borrowing example, this means that it is impossible to distinguish one book from another, or one Borrowers input place has name  X  X  X aul X  X  and he already has borrowed three items. Let us also remark that the h Borrower i class, in addition to the attributes { Name, NbrItem }, features a method { Return } as well.

Now let us consider the transition ExpectedReturn . It has a precondition f I : ReturnDate Date  X  X  &amp;&amp; I : Aspect !  X  Damaged g which indicates that the return date must be before or equal to the current date and the item not damaged. This precondition is expressed with the formal parameter of the input arcs (I and Br). If this precondition is satisfied, the action is executed and the object h Borrower i is asked to execute its Return method, which updates the number of items it has borrowed. According to the value of InAdvance , the emission rules will direct the process through one path or another. If InAdvance is true then a token is put in the ImmediateArrangement output place to make the item immedi-ately available. In the other case, a token is put in the DelayedArrangement output place and the item will be made available later. In both cases, a token is put in the Borrowers output place so that the borrower may return to his occupation.
Let us detail how PNO can cope with the complexity issues discussed in the introduction. Regarding interaction richness, agent communication languages (ACL), such as KQML ( Finin et al., 1997 ) or FIPA-ACL ( Foundation for Intelligent Physical Agents, ), can be easily supported by PN ( Cost et al., 1999 ) and more accurately by PNO. This is done by representing message contents by objects, the sending and receipt of messages by actions within transitions, the message preconditions by the transition precondi-tions, the message postconditions by the emission rules and the protocols in which messages are exchanged by the PNO structure.
As for the openness issue, PNO deal with the environment of a system by means of interface places where the environment can put and remove tokens according to the arrival and departure of actors or resources. As for concurrency, transitions that are able to catch different tokens in their input places can occur concurrently because there is no conflict in the use of the resources they need. The state of a PNO being defined by a distribution of objects tokens over places, this formalism allows to manage a high level of complexity.

However, even if the PNO formalism gives means to represent the three dimensions discussed in the introduction, the organiza-tional one is insufficiently taken into account, since it does not integrate the deontic aspect. Thus, ideal behavior is not distin-guished from violation or repair one, and the penalties adminis-tered to an actor or the repair actions it performs cannot be represented. In the context of the book borrowing example, this introduction, this metamodel integrates the informational, orga-nizational and behavioral dimensions in the following way:
To each transition t 2 T , are associated: V is the set of variables labeling arcs, typed by a function
V ! C ; the type of a variable defines its domain of value, that is the set of elements it may be bound to.

Pre is the forward incidence function: P T ! V , that defines the variables labeling the input arcs of transitions; variables appearing in Pre(-, t) are called the input variables of t;
Post is the backward incidence function: T EmR P ! V , that defines the variables labeling the output arcs of transi-tions; variables appearing in Post(t, -, -) are called the output variables of t ;
Resp is the function : Vi [ Re ! V , where Resp  X  t  X  is an input variable of t and type  X  Resp  X  t  X  X  is in A , that associates with each violation or repair transition a variable corresponding to the responsible actor ;
Cost is the function: T ! R that states the punishment or reward resulting from the occurrence of each transition t ;if t 2 Id then Cost  X  t  X  X  0; if t 2 Vi then Cost  X  t  X  4 0; if t 2 Re then Cost  X  t  X  o 0;
CTD Vi Re is a relation which associates each repair transition with violation transition and thus defines the
Contrary-to-Duty obligations:  X  t ; t 0  X 2 CTD 3 t 0 repairs t ;if  X  t ; t 0  X 2 CTD then type  X  Resp  X  t  X  X   X  type  X  Resp  X  t 0  X  X  . 4.3. Semantics of OgPN
Both the net Petri nets and Petri nets with objects formalisms have well-founded semantics extending the classical Petri net formalism. Accordingly, the OgPN semantics includes the PNO semantics (as defined in Sibertin-Blanc, 2001 ) and introduces into actor objects the DPNs computation of penalties.
 To define the OgPN semantics is to define the dynamics of an OgPN: in which transitions can occur from a given state and what state change is produced by the occurrence of a transition. 4.3.1. Substitution Let us first define a state.
 Definition 4 ( State ). A state, also called a marking, of an OgPN is a distribution of tokens among the places of the net together with the value of these tokens.

A transition only occurs if it can pick tokens from its input places in such a way that each of its input variables is bound to an element of its domain of value. For a given transition t ,a substitution binds each variable labeling an arc from a place p to t with an item that appears in a token being in p .
 Definition 5 ( Substitution ). A substitution is an injective function S : V inp  X  t  X ! O where V inp  X  t  X  is the set of input variables of transition t , O is the union of the domains of value of the variables, The injectivity ensures coherence of method invocations. isolation), since the behavior of an actor is inscribed in the penalties it is charged.
 sequence are given: be a sequence of bound transitions and M a marking. s is enabled from M and its occurrence yields the marking M 0 if !
Definition 8 ( Cost of a sequence ). The cost of a sequence s  X   X  t 1 ; S 1  X  ...  X  tn ; Sn  X  of bounded transitions having the same actor sum of the costs associated with the transitions in s , a : penalty :  X  a : penalty  X  Cost  X  s  X  . 5. Modeling a protocol as an organizational Petri net of a protocol and is illustrated by the example of the item-borrowing protocol.
 stages providing information to one another. The three stages correspond to the three dimensions of a protocol: information, organization and dynamic behavior. Each one gives rise to a model that is detailed in the order we advise to carry them out. However, this is not a linear process and it requires iterations to refine and make the three models coherent. 5.1. Informational model design the objects that flow in the OgPN and are processed by actors X  actions. It is a view on the information system of the considered organization and more generally on the resources needed to run the protocol. It provides an understanding of the domain by describing the structure of the objects that are handled (e.g. a item) and possibly some integrity constraints (e.g. a item cannot be borrowed simultaneously by two borrowers). One also want to express more flexible or institutional constraints ( Meyer et al., involved in the protocol. Roles have the permission to handle some items, and in this case, their type should appear as parameter type in role methods. The Penalty attribute (discussed in Section 4) also appears in the Librarian class although it supports no deontic rule because it is an actor. 5.3. Behavioral model design
The behavioral model defines the protocol X  X  sequences of transitions with their associated actions that may occur ( der Aalst et al., 2003 ), and thus the possible behaviors of the actors responsible for the occurrence of this sequences. Doing so, it defines when and how actions that violate or repair deontic constraints can occur, and how an actor is penalized.

Thanks to the expressive power of Petri nets, a lot of control structures may be represented such as alternative, sequence, loop and concurrency. Thus they enable deontic constraints between two actions, such as x followed by y , to be represented. The permissions granted to a role are expressed by the nature of the arc between an information place and a transition: incoming arc (consuming), outgoing arc (producing), bi-directional arc (read/ write) and so on.

Moreover, an additional constraint must be respected: if a repair transition (CTD) and a violation one are considered, the former must always occur after the latter. The analysis of the coherence of behavioral models is discussed in Section 6. The behavioral model of the item-borrowing protocol (see Fig. 8 ) includes 12 transitions and 12 places, typed with classes of the informational or organizational models. At the initial state, the three places ReadyToWorkLibrarians , WaitingBorrowers and AvailableItems contain tokens corresponding to a situation where a librarian is free at his desk waiting for a borrower intending to borrow items. The final state is defined by the three sink places ( AvailableLibrarians , ServedBorrowers and ReturnedItems ) and represents a situation where the borrower has returned a borrowed item and the librarian becomes available.

Transitions are colored to distinguish between ideal transitions (white: T 1 ; T 2 ; T 4 ; T 6 ; T 7 ; T 9 ; T 10 and T 12), violation ones (dark gray: T 3 and T 8) and repair transitions (light gray: T 5 and T 11).

For each violation and repair transition, the responsible actor and its cost are specified by the notation h name i : cost next to that transition. For example, the violation transition T 3 corresponding to the damaging of an item is annotated with h Br i : 10 to express that the Borrower is responsible for this transition occurrence and will get a penalty of 10.

Three typical scenarios are now explained. An ideal behavior  X  X  X o borrow and read an item and to return it in due time without order to deal with the identity and properties of items involved in the functioning of the modeled protocol. So an accurate model of the control of this protocol is provided, but the analysis techniques accounting for the object dimensions of OgPN, in fact those of PNO ( Sibertin-Blanc, 1985 ), are limited.
 the actors and so to give the penalties. Going one step further, this deontic dimension is also given up and then just a classical Petri net is obtained which is called the underlying PN of the OgPN. Then all the analysis and verification techniques of classical Petri nets are applicable; the application of these techniques is still meaningful, because this net accepts all the behaviors (i.e. the sequences of transitions that occur) that could take place within the original OgPN. Conditions that are necessary and sufficient for a property of the underlying PN of an OgPN are still sufficient to guarantee this property in the OgPN.

The following subsections give an overview of the standard properties that can be investigated with any Petri net-based formalism, and then address properties related to the deontic aspects of OgPN. 6.1. Standard properties
To prove standard Petri net properties such as the presence of loops or cycles (sequences of transitions that can be infinitely repeated), deadlocks (blocking state from which no transition may occur), the (un-)accessibility of a goal , final or home state , the boundedness (no infinite growing of the number of tokens) or the lost of tokens in a hole place ( Murata, 1989 ) is not elaborated here. These properties are common to any model of any system. Other properties are specific to the considered system and are just the formal statement of its requirements. Considering the OgPN net shown in Fig. 8 , the requirement saying that  X  X  X o item is lost X  X  corresponds to a place invariant guaranteeing that a token initially in the AvailableItems place can in any case reach the ReturnedItems place.

Properties relative to the behavior of the whole system are distinguished from properties about a specific object. We shall consider the net of Fig. 8 with an initial marking including any number of tokens in the AvailableItems place and a single token in
Property 2 ( Each violation is repaired ). For each transition se-quence s  X  t 1 ... t n in Behav and each subsequence of s t v 1 ... t vh in (2) vj o rj for j  X  1 ... h that is the violation occurs before the 6.2.2. Deontic quality of the behaviors of an actor constraints associated with actors. As an example, the deontic requirements of a protocol may include an obligation for one actor of the kind:  X  X  X f action a p is performed then action a n must also be performed X  X , where a p is either elementary or a conjunction of actions. In the case of the item borrowing protocol, we have the following deontic constraint:  X  X  X f a borrower borrows an item, he must return this item X  X . This property is formalized in the net of Fig. 8 as the trivial following property: any sequence in
Behav (Borrower) that includes T 1 also includes T 6. Although there is no general classification of deontic constraints, it is clear that all of them can be checked as soon as the Petri net is bounded. This holds, for instance, for all the liveness and safety properties considered within the GAIA methodology ( Wooldridge et al., 2000 ).
 where for any sequence s  X  t 1 ... t n in Behav(a), we have Cost  X  s ; a  X  X  is compared in order to identify the worst of them, and to change the behavioral rules in the OgPN to prevent their occurrence. At runtime, an agent can use the knowledge about the costs to choose the best behavior with regard to its own objectives. An actor may hesitate between either to execute an ideal action that satisfies the organizational requirements, or to execute a sub-ideal action that is more convenient to its current plans. In this respect, an OgPN may be provided with several Cost functions that take into account different concerns or stakeholder interests. These functions make explicit the respective consequences and can support a runtime decision process.
 supporting Petri nets with objects ( Sibertin-Blanc et al., 1995 ).
The organizational Petri nets is supported by the SYROCCO environment that makes it possible to edit Object classes including a Petri net with objects and to generate a C  X  X  class for each
Object class. However, it requires some modifications, particularly to take into account the deontic aspects and to modify the interpreter. The deontic aspects consist mainly in adding the new attribute, called penalty , within the actor classes and to associate to a transition a cost and an actor responsible. Considering the interpreter, to process a transition occurrence has to be adapted to charge the penalty of the actor responsible for this transition according to its cost. Moreover, an editor of OgPN is under development with ECLIPSE and it could generate Java Classes. 7. Related work related to three domains: our knowledge, there are no FSM dialects dealing with deontic aspects.

Regarding logic, Meyer et al. (1998) and Verharen (1997) discuss the role of deontic logic in the specification of information systems (policy specification, normative organization behavior, etc.). Meyer et al. (1998) present a multi-modal extension of standard deontic logic to deal with information systems, notably to specify desirable properties of the universe of discourse, which may be violated. Verharen (1997) addresses dynamic aspects of normative systems by using dynamic deontic logic. He shows how authorizations can be requested, granted and also retracted.

More generally, regarding the link between logic and PN, we must mention the work reported in Pradin-Che  X  zalviel and Valette (1993) that establishes the very close expressive power of PNs and linear logic. Indeed, linear logic is a very suitable logic to deal with concurrency and the use of resources as PNs do. In this way, the closest formalism to ours is the deontic linear logic ( Lokhorst, 1996 ). Despite its numerous advantages, this formalism is amenable to Petri nets, and the author has chosen Petri nets to define the semantics of deontic linear logic. 7.2. Multi-agent methodology
Our approach is also related to agent-oriented methodologies like GAIA ( Wooldridge et al., 2000 ) or MOISE  X  (Hu  X  bner et al., 2002 ) where protocols are considered as key components. Unfortunately, protocols in these methodologies lack formaliza-tion. By taking into account the organizational context, organiza-tional Petri nets contribute to the improvement of these methods in an integrative and formal framework. Notably, the shared concept of role eases the use of OgPN in those methodologies to integrate the protocol dimension. Let us detail how OgPN may be integrated in MOISE  X  and GAIA.

MOISE  X  (Model of Organization for multI-agent SystEms) is an organization model including three specifications, the structural, functional and deontic ones. The structural specification defines the relations between agents through the notions of roles, groups and links. The functional specification defines a social scheme corresponding to global plans organized into missions. The deontic specification links the two previous ones by defining the permissions and obligations that roles must respect while achieving missions.
 In MOISE  X  , interaction protocols are not directly addressed. They are implicitly given by the assignment of missions to roles by means of deontic links (permissions and obligations) ( Coutinho et al., 2005 ). MOISE  X  does not mean to refer to an informational model to handle resources.

The integration of OgPN in MOISE  X  may enrich MOISE  X  and gives it means to explicitly represent interaction protocols and therefore enable analysis, simulation of protocols before their deployment.

The GAIA methodology supports multi-agent system analysis and design. The analysis gives rise to two models, the roles model and the interactions model. The roles model defines for each role, its responsibilities, permissions, activities and interaction proto-cols. In fact, an interaction protocol defines how a given role interacts with another one. The interactions model consists of a set of protocol definitions representing the interactions between the different roles. OgPN may be very useful to capture these different aspects in a formal way. Indeed, as mentioned by the authors in conclusion of Wooldridge et al. (2000) , GAIA requires a  X  X  X uch richer protocol specification framework X  X . Let us clarify how each GAIA concept involved in the analysis step can be captured by OgPN.

