 Vector space models of language like the ones presented in (Collobert et al., 2011b; Mikolov et al., 2013; Pennington et al., 2014) create good representations for the individual words of a lan-guage. However, the words in a language can be combined into infinitely many distinct, well-formed phrases and sentences . Creating meaning-ful, reusable representations for such longer word sequences is still an open problem.

In this paper we focus on building represen-tations for syntactic units just above the word level , by exploring compositional models for com-pounds . Bauer (2001) defines a compound as  X  X  lexical unit made up of two or more elements, each of which can function as a lexeme indepen-dent of the other(s) in other contexts X  (e.g. apple tree ). The vast majority of compounds are com-positional, i.e. we can understand the meaning of the compound if we know the meaning of its con-stituent words. We would like to equip the vector space model with a composition function able to construct a composite representation for apple tree from the representations of apple and tree . The composite representation should ideally be indis-tinguishable from its observed representation, i.e. the representation learned directly by the language model if the compound is part of the dictionary.
We situate our investigations in the context of the German language, a language where com-pounds represent an important fraction of the vo-cabulary. Baroni et al. (2002) analyzed the 28 mil-lion words German APA news corpus and discov-ered that compounds account for 47% of the word types but only 7% of the overall token count, with 83% of compounds having a corpus frequency of 5 or lower. The high productivity of the compound-ing process makes the compositional approach the most tractable way to create meaningful represen-tations for all the compounds that have been or will be coined by the speakers of the German language.
German compounds have a strategic advantage for our study: they are generally written as a contiguous word, irrespective of how many con-stituents they have. Our example English com-pound, apple tree , translates into the German com-pound Apfelbaum , with the head Baum  X  X ree X  and the modifier Apfel  X  X pple X . Because the com-pound is written as a single word, we can di-rectly learn the representations for the compound and for its constituents. Given a large dataset of German compounds together with their immedi-ate constituents, and the corresponding distributed representations for each of the individual words, one can try to reverse-engineer the compounding process and learn the parameters of a function that combines the representation of the constituents into the representation of the compound. More formally, we are interested in learning a compo-sition function f such that where c comp  X  R n is the composite representa-the observed representations of its modifier and its head. The function should minimize J , the mean squared error between the composite ( c comp ) and the observed ( c obs ) representations of the | C | com-pounds in the training set: Several compositionality models have already been proposed in the literature (Mitchell and La-pata, 2010; Baroni and Zamparelli, 2010; Socher et al., 2012). In this paper we evaluate several of the proposed composition functions and also present a new composition model which outper-forms all previous models on a dataset of German compounds. We trained 4 vector space language models for German (with 50, 100, 200 and 300 dimensions respectively) using the GloVe package (Penning-ton et al., 2014) and a 10 billion token raw-text corpus extracted from the DECOW14AX corpus (Sch  X  afer, 2015). We use a vocabulary of 1,029,270 (1M) words, obtained by selecting all the words with a minimum frequency of 100 (the full vocab-ulary had 50M unique words). We used the default GloVe training parameters, the only modifications being the use of a symmetric context when con-structing the co-occurence matrix (10 words to the left and to the right of the target word) and training each model for 15 iterations. All the vector spaces were normalized to the L 2 -norm, first across fea-tures then across samples using scikit-learn (Pe-dregosa et al., 2011).

The German compounds dataset used in the ex-periments is a subset of the 54759 compounds available in GermaNet 9.0 1 . The compounds in the list were automatically split and manu-ally post-corrected (Henrich and Hinrichs, 2011). Each entry in the list is a triple of the form (com-pound, modifier, head). We filtered the entries in the list, keeping only those where all three words have a minimum frequency of 500 in the support corpus used to create the vector space represen-tations. The reason for the filtering step is that a  X  X ell-learned X  representation (based on a suffi-ciently large number of contexts) should allow for a more accurate reconstruction than a representa-tion based only on a few contexts. The filtered dataset contains 34497 entries. This dataset was randomized and partitioned into train , test and dev splits according to the 70-20-10 rule. The dataset contains 8580 unique modifiers and heads, and a dictionary of 41732 unique words. 1345 compounds appear as the modifier or head of an-other compound. We adopt a notation similar to the one introduced in (Mitchell and Lapata, 2010), where the compos-ite representation p is the result of applying a com-position function f to the vectors u and v . In this study we tested the following composition func-tions: 1. p = v , the second constituent of the com-2. p = u , the first constituent of the compound 3. p = u v , component-wise vector multipli-4. p = ( u  X  u ) v + (  X   X  1)( u  X  v ) u , dilation 5. p = 0 . 5 u + 0 . 5 v , vector addition 6. p =  X u +  X v , weighted vector addition, 7. p = Uv , where v  X  R n is the vectorial 8. p = M 1 u + M 2 v , where M 1 ,M 2  X  R n  X  n 9. p = g ( W [ u ; v ]) , where: [ u ; v ]  X  R 2 n  X  1 is the 10. p = g ( W [ V u ; Uv ]) . Introduced in (Socher 11. p = u u 0 + v v 00 , the additive mask model 12. p = g ( W [ u u 0 ; v v 00 ]) , the global ma-Models 1 through 8 were tested using the im-plementations available in the DISSECT toolkit (Dinu et al., 2013a). As a side note, the Lex-func implementation in DISSECT does not pro-duce a composite representation for 11.5% of the our test data, where a word does not appear as a modifier during training. Therefore, we reimple-mented the Lexfunc model and solved the missing training material problem by initializing the ma-trix for all the words in the dictionary with I + , the identity matrix plus a small amount of Gaus-sian noise. This type of initialization was proposed by (Socher et al., 2012), and allows the model to back-off to the model p = v when there is no data to estimate the parameters of the modifier matrix. We also reimplemented models 9 and 10, which were used in (Socher et al., 2010; Socher et al., 2012), as the existing implementations are part of a more complex recursive architecture aimed at constructing representations for full sentences. 3.1 The mask models The newly introduced mask models build upon the idea that when a word w enters a composition pro-cess, there is some variation in its meaning de-pending on whether it is the first or the second el-ement of the composition. Think, for instance, of the compounds company car and car factory . In the first case, car has its primary denotation, that of a road vehicle. In the second case, what mat-ters more about the car is its product aspect, the fact that it is an  X  X rtifact produced in a factory X . A good representation of the word car should encode both aspects. Likewise, a good composition model should be able to select from the individual word representations only those aspects that are relevant for the composition process.

We want to give the composition model the pos-sibility to deal with these slight sense variations, so we train, for each word in the dictionary, two masks , one for the case when it is the first word in the composition process and one for when it is the second word. The masks of the word w rep-resented by u  X  R n are two vectors u 0 ,u 00  X  R n . The mask vectors are initialized with a vector of all ones, 1 , and estimated with the help of the train-ing data. Each time w is the first word in the com-position process, it is represented as the element-wise multiplication of the vector u and the mask u 0 , u u 0 . When w is the second word in the composition, it is represented by the element-wise multiplication of u and the mask u 00 , u u 00 .
It is important to note that the initial vector rep-resentations remain fixed during the learning pro-cess. The learning process only affects the mask vectors. The composite representation of a com-pound like car factory is obtained by combin-ing the masked representations, u car u 0 car and v nation methods: (i) p = u u 0 + v v 00 , called Addmask (model 11), where the masked represen-tations are combined via component-wise addi-tion, and (ii) p = g ( W [ u u 0 ; v v 00 ]) , called Wmask (model 12), where the combination of the masked representations is made via a global ma-ilar to model 10. 3.2 Implementing composition models Models 7, 9 and 10 and the mask models were im-plemented using neural network architectures in the Torch7 library (Collobert et al., 2011a). We use the mean squared error as a training criterion, and optimize all models using Adagrad (Duchi et al., 2011) and a mini-batch of 100 samples. The hyperparameters were chosen by testing different parameter values and evaluating their performance on the dev set. To avoid overfitting we used early stopping (Prechelt, 1998). All the implemented models keep the input vectors fixed during the composition process.

Training the mask models entails estimating modifier and head masks for every word in the dic-tionary D . The two types of masks to be learned can be formalized as two matrices W M ,W H  X  representations. The masks of the word w i  X  D are the i th rows in W M and W H . In Torch7 such representations can be learned using lookup table layers (Collobert et al., 2011b), which map matrix indices to the corresponding row vector.
The masked representation of the modifier is obtained by first feeding the index of the word to modifier mask, and then multiplying the modifier mask with the initial representation for the modi-fier. The masked representation of the head is ob-tained in a similar manner via a lookup operation in LT W and Wmask models differ only in the composi-tion method used after the masking process: the masked representations are directly added together in the case of Addmask and are passed through a earity g in the case of Wmask . The two matri-ces W M ,W H are initialized with all ones and are modified via backpropagation during the training process. The twelve composition models presented in Sec-tion 3 were evaluated using word representations of increasing size (described in Section 2). All the models are trained on the train split and tested on the test split. We used the rank eval-uation method proposed by (Baroni and Zampar-elli, 2010) for a similar task: first, we generate a composite representation for each of the 6901 compounds in the test set; then, we use the co-sine similarity to rank each composite representa-tion with respect to the observed representations of the 41732 unique words in the dataset dictio-nary. If the observed representation is the nearest neighbour, the composition is assigned the rank 1. Similar to (Baroni and Zamparelli, 2010), we as-sign the rank 1000 (  X  1K) when the observed rep-resentation is not one of the nearest 1000 neigh-bours of the composite representation. We then compute the first, second and third quartiles (Q1, Q2, Q3) across all the compounds in the test set. A Q1 value of 2 means that the first 25% of the data was only assigned ranks 1 and 2. Similarly, Q2 and Q3 refer to the ranks assigned to the first 50% and 75% of data, respectively. The results of our evaluation are displayed in Table 1.

The observed representation of the head (model 1) was used as a strong baseline for the compound composition task. Two of the tested models, mul-tiplicative (model 3) and dilation (model 4) score worse than the head baseline, while the additive models (5 and 6) score only slightly above it. The fact that the worst performing model is the multi-plicative model is surprising considering its good performance in previous studies (Mitchell and La-pata, 2010). This might be either a side-effect of the normalization procedure, or a genuine incom-patibility of this compositionality model with the vectorial representations produced by GloVe.
The new Addmask and Wmask models (intro-duced in Section 3.1) perform very well, with Wmask producing the best results on the test dataset across all dimensions. It is interesting to note that the linguistically motivated Lexfunc and Fulllex models, which build dedicated representa-tions for each individual constituent, are outper-formed by a simple model like Fulladd , that only learns two modification matrices, one for each po-sition. The explanation is, in our opinion, that the available training material is not enough for train-ing all the parameters of the complex Lexfunc and Fulllex models, but good enough for the more sim-ple Fulladd .

The mask models are computationally cheaper than models like Lexfunc and Fulllex , as they they only train 2 n parameters for each word in the vo-cabulary, and not n 2 parameters like the aforemen-tioned models. They manage to strike a balance and learn a dedicated representation for each con-stituent with a small number of parameters, thus performing better than the more complex models.
We used non-parametric statistical tests to de-tect significant differences between the results ob-tained by the models. We focused our analysis on the best performing 4 models: model 9, which we will label the Matrix model, Fulladd (model 8), Addmask (model 11) and Wmask (model 12). The comparison takes into account two separate fac-tors: (i) differences between the models using rep-resentations of the same size; (ii) differences in the performance of the same model using representa-tions of different sizes.

A Friedman test on the ranks obtained by the 4 selected models on representations of size 300 showed that there is a significant difference be-tween the models ( p &lt; 0 . 01 ). Pairwise compar-isons (using the Wilcoxon signed rank test and Bonferroni corrections) showed that there is a sig-nificant difference ( p &lt; 0 . 01 ) between all but one pair of models, namely the Matrix and the Ad-dmask models ( p = 0 . 9 ). The same test confirmed that there are significant differences in the perfor-mance of the best model Wmask when using repre-sentations of different sizes ( p &lt; 0 . 01 ). Pairwise reimplementations of existing models and N marks new models. comparisons showed that Wmask model signifi-cantly improves its performance ( p &lt; 0 . 01 ) when using word representations of increasing size (50, 100, 200 and 300 dimensions).

The twelve composition models were also com-pared in terms of the mean squared error (MSE) objective function, by computing the MSE be-tween the composite and the observed represen-tation of the compounds in the test set. The best scoring models in the rank evaluation were also the best in the MSE evaluation. However, the dif-ference in performance between the best and the worst models was considerably smaller: the MSE of the multiplicative model is only twice as large as the MSE of the best performing Wmask model. This is in contrast to the rank evaluation where the multiplicative model assigned the observed repre-sentations in the test set only ranks  X  1000 , while Wmask assigned ranks  X  25 to 75% of the test data. Additional investigations are necessary to es-timate the impact of different objective functions on the performance of compositional models. The experiments reported in this paper are, to the best of our knowledge, the first large scale experi-ments on the composition of German compounds. Other studies (Kisselew et al., 2015; Lazaridou et al., 2013) focused on morphologically complex words in German and English respectively. In terms of the size of the training and test material, our experiments are closest to the adjective-noun experiments in (Baroni and Zamparelli, 2010) and (Dinu et al., 2013b) where the lexical function model performed the best, with lowest reported median ranks (Q2) above 100. Twelve composition models were evaluated on the task of building compositional representations for German compounds. The best results (median rank 6) were obtained by the newly introduced Wmask model, p = g ( W [ u u 0 ; v v 00 ]) . The re-sults show that it is possible to learn a composition function specific to compounds, an idea which we would like to further explore using existing com-pound datasets for English (  X  O S  X  eaghdha, 2008; Tratz and Hovy, 2010). The implementation of the newly introduced composition methods can be downloaded from the author X  X  website.
 The author would like to thank Emanuel Dima, Erhard Hinrichs, Dani  X  el de Kok, D  X  orte de Kok and Jianqiang Ma, as well as the anonymous re-viewers for their insightful comments and sugges-tions. Financial support for the research reported in this paper was provided by the German Re-search Foundation (DFG) as part of the Collabo-rative Research Center  X  X mergence of Meaning X  (SFB 833), project A3.

