 REGULAR PAPER I. L  X  opez-Ar  X  evalo  X  R. Ba  X  nares-Alc  X  antara  X  A. Aldea  X  A. Rodr  X   X guez-Mart  X   X nez Abstract An approach to improve the management of complexity during the re-design of technical processes is proposed. The approach consists of two abstract steps. In the first step, model-based reasoning is used to generate automatically al-In the second step, process alternatives are generated through the application of case-based reasoning. The key point of our framework is the modeling ap-proach, which is an extension of the Multimodeling and Multilevel Flow Modeling methodologies. These, together with a systematic design methodology, are used to represent a process hierarchically, thus improving the identification of analo-gous equipment/sections from different processes. The hierarchical representation results in sets of equipment/sections organized according to their functions and intentions. A case-based reasoning system then retrieves from a library of cases similar equipment/sections to the one selected by the user. The final output is a set of equipment/sections ordered according to their similarity. Human intervention is necessary to adapt the most promising case within the original process. Keywords Case-based reasoning  X  Model-based reasoning  X  Design and redesign of processes 1 Introduction Technological, economical and environmental regulation changes have an impor-tant impact on the process industry. As a result, processes are constantly modi-fied to satisfy market or legislation demands. These modifications are commonly known as redesign , which is a process to generate a viable alternative (complying with the new set of specifications) based on an existing one.
 detailed numerical simulation to accurately predict their behavior and ( b )inthe initial difficulty for an engineer without experience in a specific process to under-stand its structure and behavior. For these reasons, a redesign support framework that facilitates the redesign steps would be a valuable asset for the process indus-try.
 tions. In consequence, we have taken into account the following assumptions for their redesign: 1. The complexity of the process is high, i.e. a process is composed of many and 2. The processes typically operate at steady-state. That means that we assume 3. Complex numerical simulators have to be used to model the behavior of the 4. The process has already been physically implemented, which means that a 5. Experts in the field can understand the process intuitively by identifying and 6. The process can be represented by functional abstract concepts. In other words, the framework; when dealing with complex situations human experts often create mental models to reduce complexity [ 18 , 35 ]. Thus, the human expert eliminates nonessential information, and aggregates process sections to form abstract groups to achieve a better understanding.
 part to be redesigned and proposal of alternative modifications. To carry out the first step, a model-based reasoning (MBR) system, which automatically generates hierarchical multiple-model representations of an existing process at several lev-els of abstraction, has been developed [ 37 ]. In order to deal with the second step, a tool that uses hierarchical case-based reasoning (CBR) is employed to suggest process alternatives. In both steps we are exploiting a hierarchical approach which uses a flow diagram representation that represents function and intention, and is able to account for means-end and part-whole concepts [ 7 , 22 ]. A case library is used to obtain alternative process sections that can be adapted into the original process. Thus, the framework allows to model the process; to identify process sec-tions suitable for redesign; to examine alternative parts; and, finally, to adapt these sections into the original process. This procedure can be seen as a reverse engi-neering activity. The framework has been implemented and tested on the Chemical Engineering domain, and three prototypes have been developed: HEAD, AHA!, and RETRO (each covering part of the overall task).
 presented in the next section; the issues around the identification and classification of process sections are described in Sect. 3 while the details of their modification to achieve the redesign goals are explained in Sect. 4 ; and Sect. 5 describes the implementation of the framework and the initial results of the system are presented in Sect. 6 . 2 The redesign framework key points in our redesign framework are the redesign process and the redesign object. The former is related to cognitive issues on how the redesign activities are performed, while the latter is closely related to modeling and manipulation issues of the entities in redesign. 2.1 The redesign process The redesign process is an activity involving human expertise, particularly during modeling and problem-solving [ 11 , 31 ], which can be applied with small varia-tions to any engineered artifact. Its objective is to find a configuration of elements that, combined in one artifact, perform a set of required functions [ 2 , 5 ]. The two abstract steps of our redesign framework are divided in the following stages: 1. Design-description acquisition. 2. Identification of candidates. 3. Generation of alternatives. 4. Adaptation and evaluation of alternatives.
 object to be redesigned to obtain alternatives that satisfy a set of new requirements. The structure of our redesign framework allows, through iteration, to control the complexity of the redesign alternatives by generating solutions at different levels of detail/abstraction. 2.2 The redesign object The redesign object is the central point of all redesign activities. Thus, its ade-quate understanding is essential; this understanding depends strongly on the men-tal models of the human designer. Usually designers communicate their ideas more easily in terms of abstract, high-level descriptions to describe complex con-cepts [ 32 ]. Therefore, an amount of specific knowledge that explains those abstract (high level) concepts and translates them into more detailed (lower level) require-ments is needed. The description of the redesign object can be done in many dif-ferent ways, depending on the context and purpose for which the description is to be used. For example, in the early phases of redesign, highly abstract descriptions (e.g. qualitative or causal) might be helpful, whereas in later phases, more detailed and quantitative descriptions provide more suitable information. In this sense, the use of computer tools is fundamental to support the designer. Independently of the tools and representations employed, several authors [ 17 , 24 , 32 , 45 ] suggest that two important aspects must be addressed if computer tools are used to tackle complex systems: 1. Content , the semantic information that should be contained in the representa-2. Structure , how to design the representation to facilitate extraction of the infor-useful information about the redesign object must be selected. Both, content and structure are considered by our hierarchical approach and are described in Sect. 3.1 .
 of the redesign framework, which are briefly described as follows. 2.3 Stages of the redesign framework The proposed redesign framework is shown in Fig. 1 .
 role within this framework: 1. The simulator : A (commercial) software system used to obtain the design de-2. The reasoner : A set of software modules required to model the process, iden-3. The human designer : The human user provides the input to the system and can be summarized as follows: 1. Design-description acquisition : This stage is composed of two substages: 2. Identification of candidates : The most suitable candidates for modification 3. Generation of alternatives : Based on the candidates identified during the pre-4. Adaptation and evaluation of alternatives : The most similar alternative is tion of process sections , while the third and fourth stages into the generation of alternatives task. Both tasks are described in more detail in the next sections. object) and the modeling approach was chosen to mimic the behavior of human designers during real redesign situations. The final objective is to support human designers, not to carry out the redesign automatically, i.e. without human inter-vention. 3 Identification of process sections The redesign object must be modeled in such a way that the identification of the process sections to be modified can be performed automatically. The modeling approach employed will thus affect the choice of algorithm used to identify such sections. We have decided to create an integrated hierarchical modeling approach based on the Multimodeling [ 7 ]and Multilevel Flow Modeling (MFM) [ 21 , 22 ] methodologies. In our integrated hierarchical modeling approach, irrelevant de-tails of the model are omitted incrementally at different levels of abstraction. High-level models represent an abstract section of the process by aggregating elements. On high levels of abstraction the MFM approach is used (as only the functions and goals are considered). However, in middle and low level of abstraction, the Multimodeling approach is used (behavior, structure, function, and goals). source. In our case, these data came from specialized process simulators. The captured data is analyzed to identify the component parts of the process and their associated functions and the intended goals of each of the components is also iden-tified. The abstract models are generated and represented as a graph of functions and goals.
 subsection. The data acquisition phase of the modeling process is presented in Sect. 3.2 followed by the section identification phase in Sect. 3.3 . 3.1 Hierarchical modeling Designers usually combine top-down with bottom-up reasoning in their mental models of the process to be redesigned. Designers cope with complexity by build-ing stratified hierarchies. Complex artifacts can then be expressed in terms of a hierarchy of models, each one more complex than the previous. This modeling approach is named Hierarchy Theory [ 33 ] and deals with the fundamental differ-ences between one level of complexity and the following. Its aim is to explain the relationships between different levels: what generates the levels, what sepa-rates them, and which are the links between them. According to Rasmussen [ 34 ], human users structure a system along two dimensions:  X  a part-whole abstraction, and  X  a means-ends abstraction.
 at several levels of physical aggregation. Each level of a hierarchy represents a more abstract model of the aggregated components from the lower level. Each level contains the same conceptual information but detailed information about the concepts is hidden. In a means-ends abstraction, each level represents a differ-ent model of the same system, at any point in the hierarchy. The information at one level acts as the goals (the ends) with respect to the model at the next lower level (the means). In a means-ends abstraction, the current level specifies  X  X hat, X  while the level below the  X  X ow, X  and the level above the  X  X hy X  [ 34 ]. Models at the lower levels are related to a specific physical implementation that can serve several purposes, while those at higher levels are related to a specific purpose that can be performed by several physical implementations. Thus, reasons for proper function are derived top-down. In contrast, causes of improper function depend upon changes in the physical world (i.e., the implementation) and thus they are explained bottom up [ 45 ]. The Multimodeling [ 7 ] and the Multilevel Flow Mod-eling [ 21 , 22 ] approaches follow this idea. 3.1.1 Multimodeling The Multimodeling approach [ 7 ] is characterized by the representation of many diverse and explicit models of a system, which are used in a cooperative way in specific problem solving tasks. The fundamental concepts in Multimodeling are: 1. Ontologies : The concepts about the entities that constitute the process (e.g. 2. Representational assumptions : What is relevant to represent about the process 3. Types of knowledge . They can be: 4. Aggregation levels : The degree of granularity of the represented knowledge. temological, and aggregation links may be established between the models of the same system. Each link relates one model to the others by connecting explicitly corresponding knowledge elements in different models. According to the specific problem-solving task considered, different types of knowledge may be useful in different moments and with different roles. Therefore, their representation must be kept as separate as possible. 3.1.2 Multilevel flow modeling Multilevel Flow Modeling (MFM) is a functional modeling approach developed by Lind [ 22 , 24 ]. MFM provides a graphical and systematic basis for using means-end and whole-part hierarchical decompositions in the modeling of complex sys-tems such as industrial plants. Through the distinction between means and ends, a system is described in terms of goals, functions and the physical components ent levels of whole-part decompositions. These are functional models with a very high level of abstraction, combined with a teleological representation of goals, or purposes, of the modeled system.
 what it has been designed to do, how it should do it, and with which information it should do it. Thus, the three basic concept types of MFM are:  X  goals , which are the objectives or purposes of the system, i.e., the ends that  X  functions , which are the means by which the goals are obtained, i.e., the capa- X  physical components , which are the different elements of the system, the Thus, in MFM there are different types of relations to connect these concepts:  X  achievement relations , connect a set of functions to a goal, and it means that  X  condition relations , connect a goal to a function, so the goal must be fulfilled  X  implementation relations , connect a physical component to a function, so that tions of the same function and alternative ways of achieving the same goal. One function may satisfy several goals, one goal can be a condition to several func-tions, one function may be conditioned by several goals, etc. MFM requires that goals, functions, and physical components are considered as separate, but cooper-ative entities in a similar way as the Multimodeling approach. The assumption that functions are separate from components is similar to the no function in structure assumption of Qualitative Physics [ 12 ].
 3.2 Generation of hierarchical models The first stage of the framework is to obtain the design description of the process to be redesigned, i.e. the representation of the process containing all the information necessary to manipulate it during the redesign activities. The design description in human terms means representations required to communicate and reflect a reality expressed through some common conventions about the process. In computational terms it means abstracting knowledge about the process features that can be se-lected, retrieved, and transformed. In our approach this stage is carried out in two substages: data acquisition and functional identification, which are described as follows:  X  Data acquisition : Knowledge about the structure and behavior of all compo- X  Functional identification : The data extracted from the simulator is used to au-3.2.1 Knowledge representation A unit that encapsulates the already described four types of models is generated for each physical unit of the process (see Fig. 2 ). Furthermore, an ontology of functions and units (not necessarily with formal specification) has to be identified. This ontology is used to create a priority order of functions. Given the priority of functions of units and their goals, it is possible to identify incrementally the functional sections of the process. Therefore, the human expert should define the priority order to ensure the suitability of the function grouping mechanism. The functional priority order must also be defined by considering the goals that func-tions could achieve. The grouping of functions generates metaunits and identifies a functional section. Units/metaunits with lower priority functions are  X  X bsorbed X  by units/metaunits with higher priority functions. This forms a hierarchy of func-tional sections. In this way, the process is represented on several abstracts levels at each level of the hierarchy, the sections of the process are represented in terms of structural, behavioral, functional, and teleological models. The hierarchical mod-els form a tree of functions and goals in the process. The connections between such functions denote the causal relations between the process variables and the goals. Thus, we can model a process hierarchically (Fig. 3 )[ 37 ]. 3.3 Identification of candidates The aim of this stage is to identify the units or metaunits that have to be modified to fulfil the new redesign objectives. Therefore, the hierarchical model represen-tation of the process and the new set of specifications that the process must satisfy are required. The process variable to focus on, according to the new requirements of the process, must be set. Then, a diagnosis algorithm is used to identify the units/metaunits that affect such a process variable. This reasoning process is very fast because it is based on the functional models generated in the functional iden-tification stage.
 metaunits that directly affect the process variables on which the redesign is fo-cused on. In other words, the units/metaunits where the process variables do not achieve the needed values are detected. No simulation is required; the algorithm uses the ontological assumptions and the values of such variables. As result, a small list of the most possible  X  X aulty X  units is obtained. Based on any identified unit/metaunit, their corresponding  X  X ause X  and  X  X onsequence X  units are identified. A  X  X ause X  unit/metaunit is the unit/metaunit that provides the actual operational conditions to the involved process variables in the function of the unit/metaunit of interest. A  X  X onsequence X  unit/metaunit is the unit/metaunit affected by the operational conditions given by the unit/metaunit of interest. The causes and con-sequences units/metaunits are important in the adaptation and evaluation stage because their input/output parameters must be taken into account when a new unit/meta-unit is adapted. 4 Generation of alternatives The aim of this stage is to find units (items of equipment) or metaunits (process sections) that can be adapted into the process to fulfil the new requirements. so similar cases can be retrieved from a library of cases, and be reused and adapted to the new conditions. The reasoning process to obtain alternatives in the frame-work corresponds to the retrieve stage of CBR and the adaptation and evaluation stages in the redesign framework correspond to the reuse, revision, and retention stages of the CBR cycle.
 solve old problems can help to solve similar problems [ 1 ]. A CBR system solves new problems by adapting relevant cases from a library of cases to the new speci-fications. Therefore, the most important issues are:  X  the library of cases where each case describes a problem and a solution to a  X  the similarity engine to compute the similarities between the problem case and stage, similar units/metaunits can be retrieved from other processes. The retrieved unit/metaunit which functional and teleological models are the closest to the func-process requires that the performance and operational conditions of the cause and consequence units/metaunits associated with the retrieved unit/metaunit must be similar to the original case. 4.1 Hierarchical case-based reasoning As mentioned previously, the overall process was modeled as a graph denoting a hierarchy of functions and goals (see Fig. 4 ). Therefore, hierarchical case-based reasoning [ 6 , 38 ] is an appropriate approach to obtain alternatives by using the graph. 4.1.1 Definition of cases During the modeling stage, when a level of abstraction is generated, cases from the existing units/metaunits on the process are stored in the library of cases. Based on the levels of abstraction, two kinds of cases are distinguished:  X  ground cases , i.e., cases located at the lowest level of abstraction, units (real  X  abstract cases , i.e., cases represented at higher levels of abstraction, metaunits number of input/output streams, abstraction level, etc. From a specific point of view, the characteristics of a case depend on the type of unit/metaunit that it rep-resents. For example, in Temperature Change Units (heat exchangers, heaters, and coolers), common characteristics are increment/decrement of temperature, tem-perature input, existing phases, etc. 4.1.2 Indexing function of the unit/metaunit. Thus, a possible classification of functions would be:  X  General function : Denoting a function that can be achieved by several equip- X  Specific function : Denoting the abstract function as is known in the domain  X  Working function : Denoting a function that can be achieved by a specific sin-their specific function. There are not distinctions between units and metaunits with the same specific function. This organization scheme allows saving and storing cases from several processes considering only the function of the unit/metaunit and not other attributes. 4.1.3 Case retrieval the unit/metaunit from where the alternatives are to be generated. The potential unit/metaunit selected will be the target case with the appropriate customizations to start the CBR cycle.
 the library of cases, similar in idea to the query-sensitive similarity measure [ 42 ]. Functional and teleological models denote strongly the relationship between the units/metaunits and its neighbors. From an abstract point of view, two types of similarities are computed, global and local.
 distance), which can be defined as follows: are computed over each feature of the cases. We propose to employ the following simple local similarity measures: 1. Numerical :Let a and b be numbers, the similarity between a and b is given by 2. Symbolic :Let a and b be labels with a defined semantic, the similarity between 3. Hierarchical :Let a and b be trees of functions, the similarity between a and to the needs of the problem. The numerical measure is intended to work with real or integer numbers. This is a simple measure considering numbers situated within an interval of minimum and maximum values (determined dynamically), and is applied when comparing numerical values of variables such as tempera-ture, pressure, diameter, mass fraction, etc. The symbolic measure works with sets of labels describing some concept in the ontology, i.e., it searches for simi-lar labels between two different sets, and is applied over goals, functional labels, roles of the chemical compounds, etc. The hierarchical measure finds similarities between tree nodes. As described earlier in the knowledge representation and the definition of cases subsections, a metaunit is a small tree composed of the merged units (the nodes). Thus, the hierarchical measure determines the similarity be-tween two metaunits according to their associated tree structures and considers the level of abstraction, the parent nodes, the leaf nodes, and every function of the nodes [ 20 ].
 the similarity is obtained from the abstract description of the target by means of symbolic and numerical similarity measures of its features. Therefore, the most relevant aspects of such description are the functional and teleological (goals) models:  X  Functions; function of the unit, inlet functions, outlet functions .  X  Teleology; attributes of the goal: objective, process variables involved, at-and the functions of its neighbors. We expect to retrieve units/metaunits with at least the same function of the current unit/metaunit; different neighbor functions do not affect directly its performance. The teleological model de-notes features of the intention or goal of the unit/metaunit. As such, those features are completely inherent. Unsupervized changes of these features must be done with care as they can change the aim to a totally different intention.
 iteration hierarchical similarity is computed by means of hierarchical similarity measure. This is done because a metaunit models a section of the process (i.e. a units/metaunits at similar abstraction levels.
 units) is obtained. This set is ranked according to the global similarity between the target case (the original unit/metaunit) and the source case (retrieved unit/metaunit from the library of cases). 4.1.4 Adaptation and evaluation The reuse, revision, and retention stages of the CBR cycle correspond to the adap-tation and evaluation stages in the redesign framework. The retention of adapted cases is implicit in the redesign framework.
 cation can be performed automatically on the retrieved cases because these cases correspond to real equipment on a real process. User experience must, therefore, be taken into consideration. The user must then be aware that modifications to some section of the process may affect the global performance of the process as all sections have strong relations between them.
 process to verify its correct performance. The adaptation depends on the satis-faction (evaluation) of the new requirements of the process. This is the unique way to achieve these stages because in the redesign framework the process was modeled using high-level concepts. These stages form an iterative cycle with the previous stage until an appropriate alternative process design has been found.
 adaptability of the chosen unit/metaunit. This adaptation cost is based on the differences of process variables between the chosen unit (source case from the library of cases) and the cause and consequence units/metaunits identi-fied with the diagnosis algorithm. Thus, the cost is a normalized value denot-formance of the unit and the values of the process variables involved in the performance of the neighbor units/metaunits. The adaptation cost will have a value between 0 and 1. Values close to 0 mean that the adaptation is difficult.
 erated in the modeling process but cases are also saved when a new case from as a whole, only the cases (units) obtained/derived from the library of cases to avoid redundancies. It is important to maintain the consistency of the adapted case (unit or metaunit) with respect to the overall process, such as neighbour functions, information of streams, information on the goal, etc. Because of this, the overall alternative process must be modeled again to identify the adapted units. 5 Implementation The framework has been implemented and applied in the Chemical Engi-neering domain. First, the ontological concepts of the domain are described. The software modules that use these concepts are presented in the following subsections. 5.1 Ontology of functions Since the framework requires functional concepts, a crucial point is to define the type of functions to be used. These concepts give us an idea about how redesign is viewed in the Chemical Engineering domain. We have identified several con-cepts about redesign of chemical processes. They are related to the functions per-formed by the items of equipment in a chemical process (also named unit opera-tions in the Chemical Engineering context). This decision was adopted based on two facts:  X  It has been recognized historically that it is possible to define a chemical pro- X  The systematic study of the individual unit operations has led to the develop-cepts in a similar way to the SUMO (Suggested Upper Merged Ontology) on-tology structure [ 28 ]. SUMO structures the concepts using metaconcepts, where terminology of general purpose is situated at higher levels, while terminology for specific domains is situated at lower levels. Our ontology extends generic concepts from SUMO such as process, objects, and mereological and topological concepts. These specific concepts have been defined:  X  physicochemical processes,  X  thermodynamic processes,  X  substances (mass and energy),  X  substance roles (of chemical compounds),  X  functional roles,  X  devices (items of equipment and connections),  X  measurement units,  X  operations, and  X  relations.
 added or extended concepts have a Chemical Engineering basis. A simplified dia-gram of the ontology of functions is shown in Fig. 5 .
 can be found in several domains. The middle level includes the functional concepts proposed in the Multimodeling and Multilevel Flow Modeling approaches, which are: source, transport, barrier, storage, balance, and sink . These concepts are also called broad functions because they are inherent to other functions. The low-level functional concepts come from the well-known chemical process design method-ologies developed by Douglas [ 9 ] and Turton et al. [ 43 ]. The low-level functional concepts can be grouped as: reaction, separation, temperature change, pressure change, and flow change . These concepts are called general functions . Each func-tion is subdivided into more specific ones named specific functions , which denote the function of the items of equipment in the process. In turn, each specific func-tion is subdivided into more specific ones, called working functions . A working function can be associated with one or more units and a unit can be related to more than one function. But when several working functions coexist, only one is the main function in the process. Figure 6 depicts an example to illustrate the instantiation of functions.
 items of equipment in the process, see Fig. 7 . This ordering was defined with the aim of forming groups of functions where the most important functions dominate those with minor importance. The ontology has not been defined using a formal specification (i.e., using an ontology definition language), but its definition is im-plicit in the framework.
 5.2 The software modules As stated earlier in stages of the redesign framework (Sect. 2.3 ), the framework consists of four main stages: design-description acquisition, identification of can-didates, generation of alternatives, and adaptation and evaluation of alternatives. The three first stages have been implemented; the last stage is performed by the user, as shown in Table 1 . As a result, the architecture of the framework can be reorganized according to the implemented software modules, see Fig. 8 . 5.2.1 Modeling module Its aim is to obtain a hierarchical representation of the process, a crucial input for the following modules. Two tasks are carried out in this module: data acquisition and functional identification .
 ulator [ 16 ]. This simulator is employed broadly in the simulation of chemical pro-cesses in industry as well as in academia. HYSYS allows the extraction of infor-mation through its Application Program Interface (API). Given that only a portion of the information generated by the simulator is required, a filter to identify the useful data was implemented [ 36 ]. Thus, data acquisition is focused on the process units and their streams, which are the constituent elements of the flowsheet. The process units are the items of equipment that carry out the conversion of inputs (mass and energy) into desired outputs. Streams connect the items of equipment between themselves or with the external environment. The information thus ex-tracted refers to the structure and behavior of the process. The items of equipment contain information about their performed function(s) and their input and output streams. The streams, in turn, contain the values of the process variables. The soft-ware module that extracts and organizes this information is called HEAD ( Hysys ExtrAction Data ).
 by HEAD. Each item of equipment in the process is represented as shown in Fig. 9 (mixer representation). Based on such functions the functional sections of the pro-cess are identified. As output, this module returns a hierarchical representation of the process with a tree-like structure. The grouping strategy is based on the functional importance of units and metaunits (see the example in Fig. 10 ). The tree represents a tree of metamodels because it contains units, which encapsulate structural, behavioral, functional and teleological models. This grouping task is carried out by a prototype system called AHA! ( Automatic Hierarchical Abstrac-tion tool )[ 25 , 36 ], which has been implemented in Java and JESS [ 13 ]. The main elements of AHA! are:  X  The knowledge base, which contains heuristic rules obtained from the Chemi- X  The database, which contains information of the units and metaunits of functions [ 41 ].
 obtained. An example of which is shown in Fig. 11 . From here the rest of software modules can operate with this representation. The representation is accessible to the designer via a graphical interface, which allows full interaction with all the information of the modeled process.
 5.2.2 Diagnosis module The aim of this module is to identify the most suitable candidates (units or metau-nits) to be redesigned. This module receives as an input the hierarchical repre-sentation generated by the modeling module and the variable around which the redesign is to be focused. As an output it returns a list of the most promising can-didates to be redesigned taken from the different levels of the graph. The process variable of interest is obtained from the redesign objective, e.g. maximize purity of main product, minimize energy consumption, etc.
 the MFM fault diagnosis algorithm described by Larsson [ 21 ]. The algorithm re-cursively performs a depth-first search on the graph representation of the process. The search propagates along static connections, thus neither global search, pattern matching, nor conflict resolution is needed. The algorithm is applied over all the units/metaunits at all the levels initiating from the root level.
 corresponding cause and consequence units/metaunits (connected to its input or output streams); this information proves to be useful at the adaptation and eval-uation stage. It is important to stress that the module does not identify a unique candidate, not only it would be very difficult to do so (it would require access to deeper domain knowledge and detailed simulations), but the result would not ensure a good redesign alternative [ 4 , 8 ]. At this point, the designer must decide on which candidate to focus considering the desired level of abstraction. Thus, based on every candidate, different alternative solutions may be generated. The designer X  X  expertise is fundamental in this task. 5.2.3 Case-based reasoning module The aim of this module is to obtain similar units/metaunits ( source cases ) based on the selected candidate to be redesigned ( target case ). This module receives as an input the candidate for modification and returns as output a list of the most similar alternatives. The input candidate may be a unit or metaunit, depending on the designer choice; the output also may contain units or metaunits. Human in-tervention is necessary to evaluate and adapt any of the proposed alternatives (the retrieved units or metaunits) until the new design objectives are fulfilled. When an alternative design description is finally accepted as a solution, the process must be modeled again before introducing it as a new case in the case library.
 Database Manager (OODBM) Ozone [ 29 ] to store and retrieve cases. The core of the module was implemented as extensions and additions to the libraries from the Selection Engine project [ 46 ]. Only the retrieval and retention tasks were imple-mented for the reasons explained previously. The main elements of this module are:  X  The case library. It contains units and metaunits (cases) from diverse chemical  X  The similarity engine. It extracts the best matching cases from the case li-a prototype named RETRO ( Reverse Engineering Tool for Retrofit Options ), for details see ref. [ 26 ].
 6 Initial results The library of cases has been populated with 2370 cases coming from 50 aca-demic/industrial chemical processes, and with 45,000 fictitious cases generated to evaluate the performance of the similarity engine. As an example we show the application of the framework to the ammonia production process (Fig. 12 ). nected items of equipment (units) used by the simulator. Subsequently, the hierar-chical abstract models are created automatically as described in Sect. 3 . been generated by merging together a reactor with a mixer, with the reactor dom-inating the resulting metaunit (because its function dominates that of a mixer, see Fig. 7 ). Finally, the process is represented as a graph of connected functions as shown in Fig. 14 .
 different levels of abstraction (Fig. 14 ), and ( 2 ) the selection by the user of the corresponding process section to be improved based on functional retrofit crite-ria. In this example, we select the second abstraction level (see Fig. 15 )andthe  X  X eaction function X  criteria in order to obtain alternative solutions.
 through chemical reaction are identified. In this particular example those metau-nits are: PFR-100, MU6-reaction-21 ,and MU7-reaction-21 (see Ta b l e 2 ). Table 2 shows that the operational conditions of the candidate 2, and 2.07E-2% respectively). In agreement with experience, we should explore changes in MU6-reaction-21 or MU7-reaction-21 due to their low con-versions.
 MU6-reaction-21 is selected (e.g., name, abstraction level, input/ouput, unit/metaunit functions, stream connections). From this information, the similarity engine can retrieve similar units/metaunits from the library of cases. In addition, the user can modify the functional requirements to be considered by the similarity engine (i.e., function of the unit/metaunits, input and output functions). To refine the search for similar cases, the user can establish weights and preferences. In this case (Fig. 17 ), we select the reaction function , which is the default function in MU6-reaction-21 . As inlet function, we choose f ( Flow change ), and as outlet function we choose t ( Temperature change ). The similarity engine is now ready to retrieve the most promising unit/metaunits. ments cannot be redefined because the teleological model of a unit/metaunit is an inherent part of it (as it defines the original design intention). Alteration to the intention should involve alterations to the structural, behavioral, and functional models, i.e., creating a new unit/metaunit, which is not within the scope of this work.
 the 15 promising solutions (Fig. 18). The similarity is computed over the func-tional, teleological and hierarchical similarities (Eqs. (1) X (4)). Thus, a very high similarity of any of the three individual contributions does not mean a high global similarity will be found. As shown in Fig. 18 , the first three metaunits have global similarities of 56, 43, and 37% respectively. These similarities result from their similar structural (two inputs and one output), functional (reaction as a general function), and teleological models. General details of these alternatives are shown in Table 3. The results in Table 3 expose one of the main limitations of our current prototype: while the three reactors found in the library of cases have an overall similarity with the reactor to be substituted (in terms of the global similarity mea-surement in Eq. (1)), they operate with completely different reactants and prod-ucts. Further work is needed to associate different weights to different variables or more interesting, to account for the degree of similarity between chemical sub-stances.
 an alternative solution. The user should take the most promising solutions pro-posed and make the adaptation and evaluation stages in the simulator. 7 Conclusions This paper describes a process redesign framework based on hierarchical mod-eling. The framework aims to support human designers in the understanding of complex technical processes and to guide them during the redesign process by sug-gesting items of equipment or sections to be modified or substituted. The redesign is not performed automatically, but human designer intervention is required, i.e., the system aims to support and not substitute human designers.
 sentations used in all redesign activities. This hierarchical modeling is based on means-ends and whole-parts concepts. It enhances the reasoning mechanism to identify the elements to be modified and the possible modification alternatives. The framework integrates a hybrid approach of model-based (modeling and diag-nosis) and case-based reasoning (finding similarities between different processes). representation allows the identification of functional sections. Therefore, the user selects an appropriate unit/metaunit to be improved based on his/her experience and redesign criteria at any level of abstraction of the representation. Then, a CBR system retrieves from a library of cases similar units or metaunits to the one se-lected by the user (similarity is measured according to the function and teleology of a unit and its neighbours). As the output from the CBR system, a set of cases (units/metaunits) is obtained, which are ordered according to their similarity with respect to the target case. Although the adaptation and evaluation of cases into the original process are carried out through human intervention, an interface to commercial simulators (useful in the solution of these tasks) has been developed. redesign are twofold: ( a ) the approach supports a representation of the process at different levels of abstraction facilitating the understanding of the most impor-tant process features through the elimination of unnecessary detail at the highest abstraction levels; ( b ) the identification of possible redesign alternatives is done using a CBR that operates at every level of the abstraction hierarchy both for the problem case and the library cases, this opens the possibility to identify similar so-lutions at different levels of abstraction. However, the proposed system is limited by the size and quality of the CBR library and can only propose similar solutions, leaving to the user the task of adaptation, verification and optimization of a final solution.
 stages: 1 ) Design-description acquisition, 2 ) Identification of candidates, 3 )Gen-eration of alternatives, and 4 ) Adaptation and evaluation of alternatives. While this framework has been under development, it has been applied to the Chemical En-gineering process domain with interesting results. The contribution of the present paper is that it integrates for the first time the ideas, implementation and results presented separately (and partially) in previous publications.
 References Author Biographies
