 In real-world recommendation applications, many items are related to activities that people like to participate with their folks. For example, items such as online game invitations, movie tickets, dinner discounts are related to social activities (playing games, watching movies, and dining). We call such items (social) activ-ity items . Activity items are commonly found in real-world e-commerce web-sites such as Groupon (www.groupon.com) and Meituan (www.meituan.com), as shown in the examples of Figure 1 (a).
 ing the precision, recall, or diversity of recommended items [ 1 ]. In this paper, we follow a totally new direction: as Figure 1 shows, instead of recommending only activity items to users, we combine the activity-item sale platform and social network platform to make the activity-item sales benefit from also recommend-ing activity partners for the suggested items. Our rationale is that, for activities in which people like to participate with their folks, if a system recommends a related item alone, the user may give up attending the activity (i.e., reject the item) if s/he cannot immediately think of someone to invite to attend the activity together. The Figure 1 (c) illustrates the effectiveness of recommending activity partners via an example. The recommended product  X  X ickets of Bruno Mars X  concert X  is an activity item and the corresponding activity can be described as  X  X atching Bruno Mars X  concert X . Imagine that you have some interest in Bruno Mars X  show; however, when you see the recommendation message, it may be hard for you to think of suitable partners for watching the show together. This could be a good reason for you to give up attending this activity since you don X  X  feel like going to a concert alone. On the other hand, if the recommendation also includes suggestions for possible partners, you can try inviting them and enjoy the show together. Based on this example, we designed a simple questionnaire to collect feedback from real web-users on the potential effectiveness of recom-mending activity partners. The results (shown in Section 4.1 ) demonstrate that the great majority of web users would favor such an approach as opposed to a simple activity item recommender. In summary, we assert that including partner recommendations not only improves the quality of recommender systems, but may also increase the positive response rate of users, improving therefore the revenue of the involved businesses.
 As discussed above, recommending activity partners is likely to improve the success rate of activity item recommendations. On the other hand, to the best of our knowledge, there are no previous studies or applications of this idea in the research community or the industry, respectively. This motivates us to investi-gate methods for activity-partner recommendation. We firstly explore how atten-dance preference and social context can be used to recommend activity partners. Then, we propose a method that analyzes the historical records of user prefer-ences on activity partners to predict future activity partners. This is a reasonable methodology, since the past user preferences on activity partners would be avail-able after the activity-partner recommendation system has been set up and used to collect training data.
  X  We bring in the idea of recommending suitable activity partners, in order  X  We study how to derive activity-partner recommendations using user-item  X  We also propose a methodology for recommending activity partners based  X  We conduct an experimental evaluation based on real data that tests the problem. Section 3 describes our methods for activity-partner recommendation. Section 4 includes our experiments. Section 5 discusses related work. Finally, Section 6 concludes with a discussion about future work. As Figure 2 shows, typically there are two types of objects (i.e., user and item ) in recommendation systems for activity items. Let U = { u set of users and A = { a 1 ,a 2 ,...,a n a } be the set of activity items. Two common types of relationships exist among these entities. First, users can be connected to each other in a social network; we use f i,j to represent the friendship status between users u i and u j , i.e., f i,j =1if u i and u j are friends and otherwise. Second, users may indicate their preference to activity items. Since, in our case, items are related to activities, we call the preference of users to items attendance preference . For each user u t and activity item 1 to 5) or it can be binary number (i.e., pf ( u t  X  a l ) = 1 means that a ). Besides the above two types of relationships (i.e., friendship and attendance preference), we bring in another relationship, called together preference ,which indicates whether or how much a user prefers to attend a given activity item together with another user. For example, if Tom clicks the  X  X nvite Jerry X  button in the exemplary user interface in Figure 1 (c), this indicates that Tom prefers to attend activity  X  X runo Mars X  show X  together with Jerry. The together preference relates a user and an activity item [ u t ,a l ], i.e., a ua-pair , to another user example, the fact that Tom prefers the tickets of Bruno Mars X  concert creates pair [Tom, tickets of Bruno Mars X  concert]; if Tom likes Jerry to join him to the concert, then there is a relationship between [Tom, tickets of Bruno Mars X  concert] and Jerry. We use pf ([ u t ,a l ]  X  u x ) to indicate how much user prefers to attend the activity of a l together with u x . numerical or binary values, similar to the attendance preference defined above. For example, we can set the binary value of p ([Tom, tickets of Bruno Mars X  concert]  X  Jerry) to 1 if Tom clicks the  X  X nvite Jerry X  button or to 0 if Tom does not click the button.
 As Figure 2 shows, the objective of our work is, for each activity item rec-ommended by an activity-item recommendation system, to predict the users X  together preference on the activity item. With the above notation, our prob-lem can be stated as follows. Given a target user a (recommended by some activity-item recommender), use any known friend-ship, attendance preference, and together preference relationships to estimate p ([ u ,a l ]  X  u c ), where u c is any candidate activity partner. Then, rank the partner candidates u c by their pf ([ u t ,a l ]  X  u c ) values and extract the top-candidates as the recommended activity partners. 3.1 Utilizing Attendance Preference and Social Context In this section, we first utilize attendance preference and social context to imple-ment activity-partner recommendation.
 Social-Closeness Hypothesis. The majority of web services nowadays allow users to establish friendship relationships between them. Thus, the most intuitive relationship between users is their social closeness. Here we use the neighborhood overlap [ 2 ] (commonly used owing to its low computational complexity) to model the social closeness SC ( u t ,u c ) between two users: Thus, one user-user relation-ship that may help predict together preference pf ([ u t ,a closeness SC ( u t ,u c ) between u t and u x . Here we assume that people prefer to attend activities with users who are socially close to them. Therefore, we can predict together preference as follows: where F t ( F c ) is the friends set of u t ( u c ). In order to recommend activity partners to a target user u t , we rank the activity-partner candidates according to their social closeness to u t and return the top ones as the recommended partners. We call this method Social-Closeness based Activity-Partner Recommendation (SCAPR) .
 Similar-Interest Hypothesis. The similarity between user interests (homo-philly) is commonly used in previous recommender systems. For recommending activity partners based on user homophilly, we can rank the activity-partner can-didates according to their similarity to the target user. This approach assumes that users prefer to participate in activities with people who have similar interests to them. For example, we can measure the cosine similarity between user-profile vectors and use it to define Similar-Interest based Activity-Partner Recommen-dation (SIAPR) : of u t and u c , respectively.
 Also-Like Hypothesis. Besides the above hypothesises, assuming that users prefer to attend an activity together with users who also prefer to attend the activity, we rank the activity-partner candidates by their attendance preference to the activity item: We call this method Also-Like based Activity-Partner Recommendation (ALAPR) . The attendance preference of the activity-partner candidates to the activity item can be estimated by any activity-item recommendation system. For example, we can use user-based collaborative filtering [ 5 ] (explained in detail in Section 3.2 ) to estimate the attendance preference. 3.2 Utilizing Training Together Preference In this section, we propose an alternative method to the simple strategies intro-duced in Section 3.1 . Our objective is to predict a user X  X  together preference via his/her past together preference records. We first discuss about the possible sources of past together preference data for the target user. Then, we will show how known together preference data can be used to predict together preference for a new item.
 Extracting Together Preference Data. Several methods can be used to retrieve together preference data. First, some domains own the together prefer-ence data already. For example, consider the case where the activity items are online games. The system that hosts the games can easily record whether two users have played some game together. Together preferences can also be derived from users X  behavior at the activity-partner recommendation web service. For example, if we set up an activity-partner recommendation system with an inter-face similar to the one in the of Figure 1 (c), users X  clicking behavior on the invi-tation button is a indicator of activity-partner preference. One typical source of together-preference data are the check-in records of geo-social networks. Assume that we have access to the check-in data of users together with their social con-nections. If two users who are friends checked in at the same activity venue very close in time, we can infer that they attended the activity together. For example, two friends who checked in at the same Chinese restaurant at 8:00 pm and 8:15 pm on the same day, most probably had dinner together.
 Using Together Preference Data. With the availability of past together-preference data, recommending activity partners seems to be a typical recom-mendation problem if we regard the combination of target user and activity (e.g. [ u t ,a l ]) as a special  X  X ser X . Up to now, two main classes of recommenda-tion approaches exist: collaborative [ 3 ] or content-based filtering [ 4 ]. Content-based filtering methods extract features from the items and recommend to users items with similar features to past items chosen by them. In our problem, the  X  X tems X  to be recommended are activity partners, which lack a generalized def-inition of content. Therefore, collaborative filtering (CF) appears to be a more suitable approach for activity-partner recommendation. Therefore, we propose a method, called Collaborative Filtering based Activity-Partner Recommendation (CFAPR) , which appropriately extends the idea of CF methods to solve our problem.
 Before presenting CFAPR , we first explain how user-based CF [ 5 ]works. Since it can be used for predicting the attendance preferences in our APR prob-lem, here we take the process of accessing pf ( u t  X  a l a as an example. The first step of the approach is to calculate for each other user u i the vector similarity between rating profiles of u t and and r i ). For example, we can use the similar interests Equation ( 2 ) to calculate the similarity S u t,i between u t and u i . The second step is as follows: if isfies some condition (e.g., larger than a threshold or in the set of top-similarities), we regard u i to be in the neighborhood of erence p A t,l of user u t to activity a l , we aggregate (weighted sum) the (known) preferences p A i,l to a l of all users u i in the neighborhood of where N t denotes the set of u t  X  X  neighbor users who have rated to predict the together preference pf ([ u t ,a l ]  X  u c [ u ,a l ] as a special user unit. We call such a  X  X ser X  unit a ua-pair . First, we should try to find the neighborhood of ua-pair [ u t ,a l ]. However, since a conventional activity-item recommender always recommends to users activity items they have not rated yet, there must not be any historical together preference of [ The above fact means that all the elements of the profile vector of [ unknown, thus we are not able to find neighbor ua-pairs of [ problem is not unique to user-based CF. It also occurs when we try to use item-based [ 6 ] or matrix-factorization-based CF [ 7 ] methods, since the profile row of [ u ,a l ] does not contain any known values.
 define the neighbors of [ u t ,a l ] and their similarity. We just consider all [ ( ua-pairs for which the user element is same as the target user of neighbor ua-pairs, since we found that the together-preference patterns of different users are very different (this will be demonstrated in the next section). Then, we regard the similarity between [ u t ,a l ] and [ between a l and a m ( m = l ). For example, we can use the similarity between the profile vectors of a l and a m (i.e., item similarity) to model the similarity between [ u ,a l ] and [ u t ,a m ]. Note that we can also use content similarity between the activity items if the activity item carry a rich description. After calculating the similarity between [ u t ,a l ] and all [ u t ,a  X  ], we select the most similar [ with the highest similarities). Finally, we can predict p T by aggregating all together preferences p T t,m,c (i.e. pf ( m = l )on u c as: where N t,l denotes the neighbor ua-pairs of [ u t ,a l ]. We denote the above exten-ded CF method by CFAPR . From the above equation, we can see that CFAPR actually assumes that people have similar preferences for patterns on similar activities, which is a reasonable assumption. For example, John likes to watch football matches and play football with his sports buddies, but prefers to watch romantic movies and have dinner in a restaurant with his girlfriend. the candidate set C t,l of activity partners is an important parameter, since the problem size is determined by it. For example, in our experiments, we restrict the candidate set of activity partners to include only the users who have a friendship connection with u t to control the problem size and the cost of CFAPR . Studying the effect of alternative methods for restricting the candidate-set is an important direction of our future work.
 Section 4.1 demonstrates the meaningfulness of activity-partner recommendation via feedback collected from real web users. Section 4.2 evaluates the activity partner recommendation strategies described in Section 3 . 4.1 Users X  Favor of Activity-Partner Recommendation To confirm the practical value of our work, we conducted an electronic survey that involved real-world web-users. The objective is to find out whether users to whom activity items are recommended are also interested in activity-partner rec-ommendation for these items. The designed questionnaire, which has the format showninFigure 3 asks people whether they prefer to be also recommended by activity partners and was released to public Chinese web-users from November 21, 2014. Until the submission of this work, 57 web-users (from various provinces of China) returned their answers to us. Although we did not get a lot of feedback (there were very few web users willing to fill-in the on-line questionnaire with-out a reward), we believe that the sample is big enough to reflect the opinion of typical web-users. Finally, about 93 % of participating users expressed their pref-erence to activity-partner recommendation, compared to recommending activity items alone. This indicates that our study has good potential in improving the quality of current recommender systems. 4.2 Effectiveness of Activity-Partner Recommenders Data. In our effectiveness evaluation, we used data from location-based social networks (LSBN) to simulate a real-world scenario for our problem. We regard locations in LSBN datasets as activity items. This is reasonable, since many activity items (e.g., tickets, dinner vouchers) refer to particular locations at par-ticular time periods or moments. For example, location Han Dynasty (Chinese Restaurant, 4356 Main St, Philadelphia, PA 19127) can be regarded as activity-item  X  X oupon for eating Chinese food in Han Dynasty X . Moreover, the activity partners with whom users attend (check-in) some activity items (location) can be inferred based on the check-in timestamps and the friendship relationships between users, as discussed in Section 3.2 : if two users are friends and check-in at a same location at close timestamps (i.e., the time difference between their check-in timestamps is less than three hours), we regard that the two users attend the corresponding activity item (location) together and thus they are activity partners of each other with respect to the activity item. We used data crawled from three popular LSBN websites: Gowalla ( gewalla.com ), Foursquare ( foursquare.com ) and Brightkite ( brightkite.com ). All these datasets have check-in timestamps and social links between users. Finally, we obtained 101400 (from Gowalla), 16220 (from Foursqure), and 1690 (from Brightkite) [user, activity] ua-pairs for testing (each such ua-pair is associated with at least one activity partners, e.g., [John, Han Dynasty]  X  X  Jerry, Bella, Nicole Evaluation Measures. After extracting the testing ua-pairs and their corre-sponding activity-partner knowledge, we use the tested methods to recommend K activity partners for each valid user-activity pair. We denote the set of valid user-activity pairs as V , the real activity-partners of a testing ua-pair [ Pa real ( u t ,a l ), and the recommended partners to [ u the classic precision and recall measures to evaluate the performance of recom-mending activity partners.
 Competitors. Besides methods SCAPR, SIAPR, ALAPR (introduced in Sec-tion 3.1 ), and CFAPR (introduced in Section 3.2 ), we include in the evaluation an additional strategy, which also employs together preference training. This method is called Popular-Partner based APR (PPAPR) and models the popu-larity of a activity partner candidate by the times s/he is preferred as an activity partner by the target user only . PPAPR is based on a partner consistency hypoth-esis, while CFAPR assumes that partners are sensitive to activities. In PPAPR, the popularity of a partner candidate u c for a target user where V t c is the set of valid user-activity pairs of user include u c .
 While evaluating all methods, for each testing user-activity pair (e.g. [ we set the candidate set of activity partners as the friends set of over, we use all neighbor candidates in CFAPR as the ua-pair neighbors (set neighbor condition in Algorithm 1 initially as TRUE) and use the Cosine sim-ilarity between activities X  rated vectors. Besides, for implementing ALAPR ,we used user-based CF as a basis with the neighbors of a user being the 100 most similar users to the target user.
 Results and Analysis. Before performing performance comparison, we ana-lyze the number of activity partners users prefer when attending an activity. According to the check-in records of LBSN datasets, we found that most of (more than 95% in our experiments) the user-activity pairs have 1 to 5 activ-ity partners. Therefore, we will test the performance of the methods introduced above on activity-partner recommendation when the size of recommendation list of activity partners is changing from 1 to 5. Figure 5 shows the results of all methods while K is varying from 1 to 5. Note that the precision of all methods falls and the recall increases as K increases, which indicates the predictions more close to the top are more accurate. When comparing performance of different methods, we can observe that:  X  CFAPR outperforms all other methods.
  X  CFPAR outperforms PPAPR.
  X  CFPAR and PPAPR outperform SIAPR, SCAPR, ALAPR.
  X  SIAPR outperforms SCAPR, ALAPR.
 together preferences is a requirement for methods such as CFAPR and PPAPR . The results show that CFAPR performs best for this set of users. In the case, where there are users with no past together preferences, we propose a hybrid strategy, where (i) CFAPR is used for recommending activity partners to users with past together preferences and (ii) SIAPR is used for the remaining users (recall that SIAPR performs best among the simple methods that do not rely on past together preference knowledge). We denote this hybrid method as SIC-FA P R . Figure 6 shows the result of SICFAPR , compared with using SIAPR to all users. Observe that SICFAPR exhibits constantly good performance on all tested cases. The most related work to ours includes recommendation approaches that also utilize social or user-profile information (Section 3.1 ) and work on collaborative filtering (Section 3.2 ). We also discuss related work on problems that are similar to activity-partner recommendation.
 Recommender Systems. Research on recommender systems in the previ-ous years can be divided into two directions. The first is to improve existing models (e.g. collaborative filtering, content-based filtering, SVD based models) for recommendation. Another direction, which gains in popularity in the recent years, is to discover interesting applications of these models and extend base recommenders to domain-specific models and methods. Our work also falls in this direction. We study a new recommendation problem: recommend activity partners for the activity items suggested to a user.
 Friend Recommendation. Recently, friend recommendation [ 11 ] became a popular research topic, assisting social networks to improve their service. Com-monly to friend recommendation, the recommended object in our problem is also a user. However, the tasks of friend recommendation and activity-partner rec-ommendation are very different. Friend recommendation systems predict user-user relationships (i.e., friendships) while our work explores (user, item)-user relationship (i.e., together preference from [user, activity item] to an activity partner). Friend recommendation estimates the likelihood that two non-friends will become friends in the future. Actually, the relatively bad performance of the SCAPR method, which employs the social closeness between users to rec-ommend activity partners, verifies the intrinsic difference between friendships and activity partners.
 Group Recommendation. Group recommendation [ 12 ] is to explore the pref-erence of a group of users to items. Currently, many services (e.g., Movielens, Tencent QQ) allow users to create groups that consist of several users. Then, a typical objective of group recommendation is to aggregate the preferences from group members to find relevant items for groups. The problem of activity-partner recommendation is different from the problem of group recommendation. Most works in group recommendation aim at selecting items for fixed groups, while activity-partner recommendation strives to find users as activity partners hav-ing as fixed variables a target user and an activity item (recommended by any activity-item recommendation system). In this paper, we have proposed and studied the problem of recommending activity partners to web-users for activity items suggested to them. Based on a questionnaire, we verify that real users have great interest in such a type of recommendation. We then show how to take advantage of different types of data and relationships, including attendance preference from users to activities, social context of users, and past together preference knowledge for activity-partner rec-ommendation. Our experiments analyzed the strengths and weaknesses of the proposed activity partners recommendation models. We have five directions in mind for future research. The first is to study how to combine the hypothesises introduced in this work into a hybrid component that considers all mentioned factors (social, attendance, and together preference) to rank the activity-partner candidates. The second is to investigate the effective-ness of activity-partner recommendation and the performance of CFAPR (and the other approaches tested in this paper) in additional application domains and with additional real-world data. Third, we plan to study how to combine together-preferences and attendance-preferences in order to adjust the ranking of activity items shown to the users. One idea would be to increase the rank-ing of activity items for which people can find more suitable activity partners. The fourth direction of future work is to integrate content information (e.g., the categories or geographical information of activity items) into our CFAPR framework, to see how far content information can improve activity-partner recommendation. Last, we also plan to study the problem of Partner-Activity Recommendation , where in friend recommendation we also include suggested activities for them to meet (e.g., the dating location and activity). This type of recommendation finds use in real-world applications, such as dating sites (e.g., www.jiayuan.com).

