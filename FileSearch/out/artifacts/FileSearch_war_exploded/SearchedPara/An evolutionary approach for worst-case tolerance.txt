 Jinn-Tsong Tsai n 1. Introduction
Tolerance has become a crucial design consideration in mod-ern engineering design because of the demand for improved product performance, longer product lifetimes, and shorter design times. Designers must constantly seek a point with the maximum tolerances in the parameter space in order to maximize yield and minimize costs while maintaining compliance with design speci-fications ( Wu et al., 1998 ). Because the conventional approach to yield estimation, Monte Carlo analysis ( Kalos and Whitlock, 1986 ), requires numerous simulations and computationally expensive analysis runs, researchers have proposed alternative methods of approximating the region of acceptability ( R A polyhedral approximation ( Director and Hatchel, 1977 ; Hocevar et al., 1988 ; Krishna and Director, 1995 ), quadratic approximation ( Bandler and Abdel-Malek, 1978 ; Abdel-Malek and Bandler, 1980 ; Biernacki et al., 1989 ), and ellipsoidal method ( Abdel-Malek and
Abdel-Karim, 1991 ; Wojciechowski and Vlach, 1993 ; Sapatnekar et al., 1994 ; Wojciechowski et al., 1997 ). However, such approx-imation methods and low-order polynomial models may be inadequate for tolerance design when considering wide ranges of input variables and when performance surfaces are highly nonlinear ( Wu et al., 1998 ). Therefore, researchers have recently begun applying genetic algorithms in tolerance design ( Femia and
Spagnuolo, 2000 , 2002 ; Spagnuolo and Vitelli, 2002 ; Vitelli et al., 2002 ; Haq et al., 2005 ; Kato et al., 2006 ; Rout and Mittal, 2008 ).
These studies have generally obtained good results by combining vertex analysis of the worst-case design scenario with genetic algorithms. However, to test the feasibility of a product design involving N parameters, vertex analysis must be performed in all 2 N vertices of the parameter space, which is time-consuming and may become trapped in the local optima when numerous (i.e., seven or more) design parameters, specifications, and constraints are involved. Therefore, a highly efficient evolutionary algorithm is needed to solve worst-case tolerance design problems. and Price (1995 , 1997) has attracted growing interest for use in solving global design problems. Its advantages include its simpli-city, powerful search capability, compact structure, minimal control parameters, and high convergence characteristics ( Storn, 1999 ; Price et al., 2005 ; Brest et al., 2006 ; Rahnamayan et al., 2008 ; Noman and Iba, 2008 ; Peng et al., 2009 ; Ho et al., 2010 ; Tsai et al., 2011 ). Like other evolutionary algorithms, the DEA is highly reliable for population-based and stochastic global optimization in nonlinear and multimodal environments. However, its use of stochastic recombination is not a systematic approach to breeding individual trial vectors. Therefore, the objective of this work was to improve the DEA by combining it with a highly efficient worst-case tolerance design method. That is, the sliding-level orthogonal differential evolution algorithm (SLODEA) was combined with a two-level orthogonal array (2OA) to yield the proposed SLO-
DEA2OA. The SLODEA2OA enhances the effectiveness of the DEA by combining the use of sliding-level orthogonal experimental design method (SLOEDM) ( Taguchi, 1987 ) for exploring optimal solutions and effectively reduces the impact of parameter varia-tions with the use of 2OA for vertex analysis of the candidate tolerance region. For evaluating and implementing improvements in products, processes, and equipment, SLOEDM adopts many of the ideas and evaluation factors applied in statistical experimen-tal design. A factor is considered related to another factor if its desirable experimental region depends on the level at which the other factor is set. By using SLOEDM, the proposed SLODEA2OA improves the DEA by providing a novel recombination method for systematically breeding better individuals.

This paper is organized as follows. Section 2 defines the research issue. The SLODEA2OA is presented in Section 3 . Section 4 describes the use of the SLODEA2OA to solve the worst-case tolerance design problem and compares its performance with an SLODEA with three-level orthogonal array (SLODEA3OA), with an SLODEA with two-level full-factorial design (SLODEA2F), and with other nature-inspired methods. Finally, Section 5 concludes the study. 2. Problem definition
Given a product (or system) with r design parameters and y , r . The allowable values define the  X  X  X arameter space X  X  as a r -dimensional sub-space of R r . For each parameter, a tolerance region (R T ) is defined by a bounded range of variation: ( x 7 to an axis of the parameter space, the R T is a r -dimensional axis-aligned polygon in the parameter space. Additionally, let R design constraints apply to the functions of product parameters: f y , x lower and upper bounds, L j and U j , respectively, within which performance function f j assumes acceptable values. All parameter region of the parameter space designated as the region of acceptability ( R A ). The feasibility region ( R F ) is a subset of R the intersection between R T and R A ( R T \ R A ). Depending on how R is positioned in relation to R A , R F is a r -dimensional sub-space that may be either empty or equal to R T . It bounds all sets of parameter values that guarantee that the design constraints are met. Each point in the R F corresponds to a feasible parameter set.
Given the design constraints and the design parameter tolerances, the yield is an evaluation index (range, 0 X 100) for quantifying the production rate and/or the reliability of the design product with respect to variations of its own parameters.

Regarding the relative position between R A and R T , tolerance design cannot be performed by simply inscribing the R T into the R . The actual goal of tolerance design is simultaneous optimiza-tion of performance, parameter tolerance, and yield. In most cases, the R A can be assumed to be convex and simply connected.
For each candidate R T , the worst-case tolerance design obtained in vertex analysis can be used to determine when feasibility reaches 100%. Thus, an evolutionary strategy applies vertex analysis to maximize the parameter tolerance so that a 100% yield is achiev-able. To design a product involving r parameters, the conven-tional approach is to perform vertex analysis for feasibility tests of all 2 r vertices of the r -dimensional axis-aligned box in the parameter space. The R T is considered 100% feasible if all vertices comply with the design constraints. Although this approach is intuitive and easily implemented, its limitation is its high dimen-sional dependence since it requires 2 r checks of the design constraints. In practice, however, the number of parameters considered in the tolerance design process is limited (e.g., only the most expensive and valuable components of the product are considered) to avoid the need to check whether constraints are satisfied in an unwieldy number of R T vertices ( Spence and Soin, 1988 ; Spagnuolo and Vitelli, 2002 ). 3. Proposed SLODEA2OA approach The proposed SLODEA2OA enhances the DEA by including SLOEDM to explore the optimal solution. It also effectively reduces the sensitivity of parameter variations by including a 2OA for vertex analysis of the candidate tolerance region. The SLOEDM has the systematic reasoning capability to select the best individuals for achieving the recombination and, therefore, the capability for enhancing the performance of the DEA. The 2OA has two essential roles in the SLODEA2OA: to perform recombination in the SLOEDM and to minimize the effect of parameter varia-tions. The detailed steps of the SLODEA2OA are described below. 3.1. Steps of the SLODEA2OA
Step 1: Set parameters: population size p s , crossover rate p two scaling factors F 1 and F 2 , weighting factor w p for penalty value, and function calls N g .

Step 2: Generate p s initial feasible vectors X 1 i ( i  X  1, 2, using Algorithm 1 as shown in 3.2.2 of Section 3 , and evaluate their fitness values by using Eq. (3.3) as shown in 3.2.1 of Section 3 .
 Step 3: Initialize the iteration index by setting G to 1. Step 4: Set the initial target index i to 1.
 Step 5: Generate the mutated vector V G i by using Eq. (3.5) with F  X  F 1 as shown in 3.2.3 of Section 3 .
 Step 6: Based on crossover rate p c , obtain trial vector U inherited from X G i and V G i , and use Eq. (3.3) to evaluate its fitness value.
 Otherwise, return to Step 5.
 Step 8: Set the initial target index t to 1  X  p s .

Step 9: Generate the mutated vectors V G t 1 and V G t 2 by using Eq. (3.5) with F  X  F 1 and F  X  F 2 , respectively, as shown in 3.2.3 of Section 3 .
 Step 10: Obtain the trial vector U G t by implementing the
SLOEDM given in Algorithm 2 as shown in 3.2.4 of Section 3 , and use Eq. (3.3) to evaluate its fitness value.

Step 11: Let the target index t  X  t  X  1. If t 4 (( p s /10)  X  p go to Step 12. Otherwise, return to Step 9.
 values in increasing order.

Step 13: Select the best p s individuals as parents X G  X  1 y , p s ) of the next generation.
 Step 14: Let the iteration index G  X  G  X  1. If G 4 N g , and go to Step 15. Otherwise, return to Step 4 and continue through Step 14.

Step 15: Stop, and display the best individual and fitness value. 3.2. Details of SLODEA2OA procedure
The following demonstrates the use of SLODEA2OA approach to solve tolerance design problems under parameter variations and design constraints. 3.2.1. Fitness function
Consider the following tolerance-allowed optimization pro-blem: Minimize f g  X  x  X  9 x A  X  x , x g , subject to the design constraints and tolerance t of x , where g ( x ) is an objective function; x  X  X  x 1 , x 2 ... , x vector of the nominal design values of r design variables; and t is a tolerance of x . The domain of x j is  X  x j , x j ( j  X  1, 2, feasible solution space is  X  x , x .

To evaluate solutions to an optimization problem, an evolu-tionary algorithm uses the fitness value rather than the objective function value because of the tolerance in each component and design constraints. The objective function returns the objective value of g ( x ), which represents the system performance of g ( x ) within the nominal design values excluding tolerance t of x .
However, the fitness function returns the fitness values that include tolerance t and design constraints. Therefore, choosing the fitness function is an important step for directing the outcome toward a desired target value and for minimizing sensitivity to uncontrollable variation in component specifications. Fractional factorial experiments are highly efficient because they retain the desirable properties (e.g., balance and orthogonality) of the full factorial experiments and because they reduce the size of the experiment. For each design parameter, they also set upper and lower bounds based on the assigned tolerances. Levels 1 and 2 of the 2OA are associated with a specific design variable and can be set according to the upper and lower specification limits for the design variable. For each design variable, the suitable tolerance is selected by increasing its value (or percentage) stepwise from small to large until the target performance index becomes unacceptable. Therefore, this study used a 2OA for vertex analysis to solve the tolerance variation and to generate the fitness value.
A suitable 2OA is chosen according to the number of design variables, which must be less than or equal to the number of columns in the adopted 2OA.

Evolutionary methods relax the constraints of a constrained optimization problem by setting a value for penalizing infeasible individuals in the population. A feasible region of the search space is identified by navigating through infeasible regions until the penalty is reduced. Therefore, clearly distinguishing between feasible and infeasible individuals is essential. Infeasible indivi-duals are distinguishable by their violations of numerous con-straints in the range [1, R ], where R is the number of design constraints. The higher this index of violation is, the larger the penalty should be. With this in mind, the penalty value P is defined as P  X  w p where y j is a calculated value depending on the constraint function; U j and L j are the upper and lower bounds, respectively, of the constraint function; w p is a value distinguishing the feasible from the infeasible individuals; and w L and w U denote the weights. If y j o L j , then w L  X  1 and w U  X  0; if y j 4 U (3.2), each value calculated for y j should be between its upper and lower bounds. The value is not punished if it is located within the feasible region. If not, the value is punished by multiplication of the value by a large number w p . The penalty value must equal 0 when the optimization process is complete to ensure that the values of the design variables do not violate the design con-straints ( Tsai, 2010 ).

For a minimum (smaller-the-better) problem, fitness value F is defined as F  X  g  X  x  X  X 
The value P n i  X  1 P i is obtained by conducting the matrix experiment of the 2OA L n (2 n 1 ), which accommodates the toler-ance in each component, where n is the number of experimental runs. The two levels 1 and 2, e.g., as shown in the central area of
Table 1 , correspond to the lower and upper tolerances associated with a specific factor (variable). For example, for L
Tables 2 and 3 show the control variables and their levels and P ( i  X  1, 2, y , 8), respectively. Therefore, P 8 i  X  1 P i of penalty value P i in 8 experimental runs. 3.2.2. Initial population individual is encoded as a vector of floating-point numbers with the same length as the vector of decision variables. The coding representation is accurate and efficient because it is the closest approximation of the actual decision space; moreover, the string length is the number of decision variables. For convenience and simplicity, an individual X G i is denoted as where G denotes the current generation, i  X  1, 2, y , p s denotes the population size. The x G ij ( j  X  1, 2, y , r ) denotes the decision variable, and r is the number of decision variables.
The initial variable values of x 1 ij are chosen randomly from within user-defined bounds  X  x j , x j . Once the initial population is gener-ated, the fitness value of each individual vector is evaluated and stored for future reference.

The initialization procedure uses the following algorithm to produce p s individuals: Algorithm 1.

Step 1: Generate a uniformly distributed random number b , where b A [0, 1].
 nominal value of the j th element of X 1 i in Eq. (3.4) and where x and x j are the lower and upper bounds of x 1 ij , respectively.
Repeat r times, and produce an individual vector  X  x 1 i 1
Step 3: Conduct the matrix experiments of the 2OA L n (2 n 1 with the tolerance assignment of each component, e.g., as shown in Table 3 , and calculate the fitness value F .
Step 4: Repeat the above three steps p s times to produce p initial feasible individuals. 3.2.3. Mutation operation
In every generation, each individual vector X G i ( i  X  1,2, the population becomes a target vector. For target vectors X ( i
A 1,2, y , p s ) and the best vector X G best in the current generation
G , DEA uses the differential mutation operation to generate a mutated individual V G i , by applying the following equation: V  X  X G best  X  F  X  X G j  X  X G k X G q X G r  X  ,  X  3 : 5  X  where X G j , X G k , X G q , and X G r are randomly selected from the population such that j , k , q , and r belong to {1,2, y , p j a k a q a r . Since their values differ, p s Z 4. The X G best the best individual in the current generation G . The F is a mutation scaling factor, typically a positive real number less than two, which controls the evolution rate. If a mutation causes an element v G ij in the vector V G i  X  X  v G i 1 , v G i 2 , ... , v G beyond the allowable interval  X  x j , x j , then v G ij is set to x and is set to x j if v G ij 4 x j : The mutated vector V G crossover and in the SLOEDM-based crossover as a donor vector for breeding a better trial vector U G i : 3.2.4. Generating improved offspring by SLOEDM
Since the value of scaling factor F can affect the performance of the DEA, performance improvements are compared between two the mutated individual vector V G i  X  X  v G i 1 , v G i 2 , ... , v G considered a related vector because it depends on the level settings of scaling factor F . When some of the factors (or individuals) are related, an appropriate experimental region becomes irregular and thus cannot be constructed using the conventional approach to experimental design. A factor is con-sidered related if its desirable experimental region depends on the settings of other factors. Experimental designs using related factors can be implemented by SLOEDM ( Taguchi, 1987 ).
The Taguchi method uses an orthogonal array (OA) to study a large number of decision variables with a small number of experiments. The best combinations of decision variables are determined by the OA and by the signal-to-noise ratios. The key concept of the Taguchi method is to maximize the signal-to-noise ratios, which are used as a performance measure, by using the OA to run a partial set of experiments. This work uses a 2OA with Q variables, where Q is the number of design variables and each variable has two levels. To establish an OA with two levels of Q variables, L n (2 n 1 ) represents n 1 columns, n separate experi-ments corresponding to the n rows, and n  X  2 k where k is a positive integer ( k 4 1) and Q r n 1. If Q o n 1 only the front Q columns are used, and the other n 1 Q columns are ignored.
For example, consider an OA with five variables, i.e., Q  X  5, and a target vector X G i , X G i is level 2 in the OA L 8 (2 for this purpose because it has seven columns. Mutated vector V is level 1, which is a sliding level in the OA. The actual settings of levels for V G i depend on levels F 1 and F 2 of scaling factor F as shown below: Variable F Sliding level 1 for mutated vector Scaling factor F 1 Set V G i 1 as level 1
Scaling factor F 2 Set V G i 2 as level 1 where V G i 1 is vector V G i in Eq. (3.5) as F  X  F 1 , and where V V i as F  X  F 2 .

The signal-to-noise ratio ( Z i ), which is measured in decibels, refers to the mean-square-deviation of the objective function. According to the Taguchi definition, Z i  X  10log  X  X  1 = t for the larger-the-better characteristic, and Z i  X  10log  X  X  1 = P 2, y , n and where n is the number of experiments for an OA L (2 n 1 ). Let y ij denote the experimental output value of the i th row of OA L n (2 n 1 ) where j  X  1, 2, y , t and where t is the number of experiments for the i th row of OA. When building the response table, the effects of different variables can be defined as follows: E b l  X  sum of Z i for variable b level l ,  X  3 : 6  X  where i is the experiment number, b is the variable name, and l is the level number.

The main reason for constructing an experimental matrix for the 2OA L n (2 n 1 ) is to select, for each variable, elements from the U : For each variable, an element is chosen if the E b l has the highest value in the experimental region. That is, the best level is chosen for each variable. The best level for a variable is the level that has the higher value of E b l in the experimental region. For the variable, where b A [1, Q ]. Otherwise, level 2 is the best. After the best level for each variable is selected, the new individual U also obtained by combining the values of the levels for each variable. Therefore, for the new individual U G i , using the systema-tic reasoning capability provided by the SLOEDM-based crossover operation obtains the best or close-to-best fitness value among the 2 Q combinations of variable levels, where 2 Q is the total number of experiments needed for all combinations of variable levels.

The SLOEDM-based crossover operation generates a better trial individual U G i by using a target vector X G i and a mutated vector V G i to conduct matrix experiments of a 2OA and to build the response table. The detailed steps for each step of the matrix experiment are described in the following algorithm.
 Algorithm 2.

Step 1: Set j  X  1. Generate two sets ~ U 1 and ~ U 2 , each of which has Q variables, and allocate the Q variables from the front Q columns of the 2OA L n (2 n 1 ), where Q r n 1. Assign F 1 level 1 and F 2 to level 2 in the first column of the OA L
The other design variables are located in the second to Q th columns. Designate sets ~ U 1 and ~ U 2 are as level 1 and level 2, respectively. Depending on the value of the first column of the 2OA, include vector V G i 1 or vector V G i 2 in set ~ U 1 include vector X G i in set ~ U 2 .

Step 2: Assign the value of level 1 from ~ U 1 and the value of level 2 from ~ U 2 to level cells of the j th experiment in the OA.
Step 3: Compute the fitness value and the signal-to-noise ratio for the new individual.
 Step 4: If j 4 n , then go to Step 5. Otherwise, j  X  j  X  1; repeat Steps 2 X 4.

Step 5: Compare the effects of the various variables ( E b 1 E b 2 ), where b  X  1, 2, y , Q .

Step 6: If E b 1 4 E b 2 , the b th variable of the new individual is derived from ~ U 1 . Otherwise, the b th variable is derived from
U 2 , where b  X  1, 2, y , Q . Repeating the procedure for each element of each variable obtains the improved individual vector U G i . 4. Design examples and comparisons Two examples were used for a performance comparison of the SLODEA2OA, SLODEA3OA, and SLODEA2F.
 Example 1. Test function for tolerance design
The test function shown in Eq. (4.1), which includes quadratic, linear, non-linear, and polynomial forms, was used for a perfor-mance comparison of the SLODEA2OA, SLODEA3OA, and SLO-
DEA2F. The test function includes 18 constraints in 10 dimensions. The variables were x  X  [ x 1 , x 2 , y , x 10 variable had tolerances of 7 0.1%, 7 0.5%, 7 1%, and 7 5%. The solution accuracy of each variable was set to 10 6 .

Minimize g  X  x  X  X  x 2 1  X  x 2 2  X  x 1 x 2 14 x 1 16 x 2  X  X  x subject to f  X  x  X  X  105 4 x 1 5 x 2  X  3 x 7 9 x 8 Z 0 , f  X  x  X  X  10 x 1  X  8 x 2  X  17 x 7 2 x 8 Z 0 , f  X  x  X  X  8 x 1 2 x 2 5 x 9  X  2 x 10  X  12 Z 0 , f  X  x  X  X  5 x 2 1 8 x 2  X  x 3 6  X  2  X  2 x 4  X  40 Z 0 , f  X  x  X  X  3  X  x 1 2  X  2 4  X  x 2 3  X  2 2 x 2 3  X  7 x 4  X  120 Z 0 , f  X  x  X  X  x 2 1 2  X  x 2 2  X  2  X  2 x 1 x 2 14 x 5  X  6 x 6 Z 0 , f  X  x  X  X  0 : 5  X  x 1 8  X  2 2  X  x 2 4  X  2 3 x 2 5  X  x 6  X  30 Z 0 , f  X  x  X  X  3 x 1 6 x 2 12  X  x 9 8  X  2  X  7 x 10 Z 0 , 10 r x i the ten variables occur less than the fifteen factors in L the SLODEA2OA approach, fitness function F SLODEA2OA derived from Eq. (3.3) is defined as
SLODEA3OA approach. Fitness function F SLODEA3OA was set as follows: ial experiments to analyze all 2 10 vertices of the parameter space. Fitness function F SLODEA2F is shown below.
 (4.2) X (4.4). The penalty value P j was P j  X  w p where w p was set to 10 6 , which was considered sufficient for distinguishing between feasible and infeasible individuals. settings and the performance results obtained in 30 runs of the
SLODEA2OA at a tolerance of 7 0.1%. Overall, the SLODEA2OA obtained good quality results, especially when the settings for population size, crossover rate, scaling factor F 1 , scaling factor F and function calls were set to 100, 0.9, 0.6, 1.4, and 250,000, respectively. Therefore, these settings were further applied in the SLODEA3OA and SLODEA2F. Table 5 compares the proposed
SLODEA2OA with the SLODEA3OA and SLODEA2F in terms of best fitness values, average fitness values, and average run times achieved over 30 different runs and at varying tolerances of 7 0.1%, 7 0.5%, 7 1%, and 7 5%. Table 6 shows the parameter values obtained in a further comparison of solution robustness.
Finally, Table 7 shows that, in 3000 random experiments the solutions obtained by the SLODEA2OA and the SLODEA2F showed no constraint violations in any of the four different tolerances whereas the solutions obtained by the SLODEA3OA contained 12, 11, 11, and 11 constraint violations at tolerances of 7 0.1%, 7 0.5%, 7 1%, and 7 5%, respectively. Tables 5 and 7 show that, while the SLODEA3OA obtained better solutions compared to the
SLODEA2OA and SLODEA2F, it tended to violate the imposed constraints because it only marginally complied with the constraint equation. Another reason that the three-level OA
L (3 13 ) tended to violate constraints is that it used fewer vertices for tolerance compared to the 2OA L 16 (2 15 ) even though it used relatively more experiments to deal with the tolerance. Addition-ally, although both the SLODEA2OA and SLODEA2F achieved excellent solutions, the run time for the SLODEA2F was about 50 times longer than that of the SLODEA2OA. Tables 4 and 5 compare the computation time for the three approaches run in C program in the Windows XP environment on a PC with a 1.66 GHz
CPU and 512 Mb RAM. In summary, the above experimental results confirm that the SLODEA2OA outperforms both the SLO-DEA3OA and SLODEA2F.
 Example 2. Speed reducer design
The discrete variables considered in the design for a speed reducer were width of face ( b ), width of teeth module ( m ), number of teeth on pinion ( n ), length of shaft 1 between bearings ( l ), length of shaft 2 between bearings ( l 2 ), diameter of shaft 1 ( d n , l 1 , l 2 , d 1 , d 2 ] T  X  [ x 1 , x 2 , x 3 , x 4 , x objective is to minimize the total weight of the speed reducer given the following constraints: bending stress and surface stress on gear teeth, transverse deflection and stress on shafts 1 and 2 caused by transmitted force, and stresses on shafts 1 and 2. The variable are 7 0.1%, 7 0.5%, 7 0.6%, 7 0.7%, and 7 0.8%. Addi-tionally, 18 design constraints are considered. The problem is mathematically formulated as follows ( Coello and Corte  X  s, 2004 ; Bernardino et al., 2008 ): Minimize g  X  x  X  X  0 : 7854 x 1 x 2 2  X  3 : 3333 x 2 3  X  14 : 9334 x subject to f  X  x  X  X  27 x 1 1 x 2 2 x 1 3 1 r 0 , f 2  X  x  X  X  397 : 5 x 1 f  X  x  X  X  1 : 93 x 1 2 x 1 3 x 3 4 x 4 6 1 r 0 , f 4  X  x  X  X  1 : 93 x f  X  x  X  X   X  X  745 x 4 =  X  x 2 f  X  x  X  X   X  X  745 x 5 =  X  x 2 f  X  x  X  X  x 2 x 3 40 r 0 , f 8  X  x  X  X  5 x 1 = x 2 r 0 , f 9  X  x  X  X  x f  X  x  X  X  X  1 : 5 x 6  X  1 : 9  X  x 1 4 1 r 0 , f 11  X  x  X  X  X  1 : 1 x 2 : 6 r x 1 r 3 : 6 , 0 : 5 r x 2 r 0 : 8 , 17 r x 3 r 28 , 7 7 : 3 r x 5 r 8 : 3 , 2 : 9 r x 6 r 3 : 9 , and 5 : 0 r x where x 1 and x 2 are integer multiples of 0.1; x 3 is an integer variable; and x 4 , x 5 , x 6 , and x 7 are continuous variables. The solution accuracy of a continuous variable is set to 10 6
The 2OA L 8 (2 7 ) was chosen to deal with tolerance since the seven design variables are equal to the seven factors in L fitness function F SLODEA2OA derived from Eq. (3.3) for the SLO-DEA2OA approach is defined as F
The three-level OA L 27 (3 13 ) was selected for the SLODEA3OA approach. Fitness function F SLODEA3OA was set as follows: F
The SLODEA2F approach used the full factorial experiments for analysis of all 2 7 vertices of the parameter space during feasibility tests. Fitness function F SLODEA2F is shown below.
 F
The objectives were to minimize the fitness functions of Eqs. (4.7) X (4.9). The penalty value P j is shown below, and w p be 10 6 .

P  X  w p
Parameters were set after measuring their sensitivities. Popu-lation size p s was 50, crossover rate p c was 0.9, scaling factors F and F 2 were 0.4 and 1.0, respectively, and the function call was 20,000. Table 8 compares the best and average fitness values and average run times obtained by the proposed SLODEA2OA, the
SLODEA3OA and the SLODEA2F in 30 different runs performed at tolerances of 7 0.1%, 7 0.5%, 7 0.6%, 7 0.7%, and 7 0.8%. Table 9 shows the parameter values obtained by the three algorithms for robustness testing of solutions for the speed reducer design.
Table 10 shows that, in 3000 random experiments performed at tolerances of 7 0.1%, 7 0.5%, 7 0.6%, 7 0.7%, the SLODEA3OA obtains only one constraint violation at 7 0.7% tolerance. When the tolerance is set higher than 7 0.8%, neither the SLODEA2OA nor the SLODEA3OA find feasible parameter values that satisfy the design constraints in 3000 random experiments. The SLODEA2F is still capable of doing so but requires a run time about 14 times longer than that of the SLODEA2OA. In summary, the SLODEA2OA clearly outperforms both the SLODEA3OA and SLODEA2F under the specified tolerances and large-scale design variables.
The speed reducer design problem was further used for a performance comparison of the proposed SLODEA2OA with nat-ure-inspired methods such as those developed by Coello and
Corte  X  s (2004) and by Bernardino et al. (2008) . Since a compre-hensive literature review shows no reported applications of their methods to solve the problem of speed reducer design subject to tolerances, zero tolerance solutions obtained in these studies were compared with solutions obtained by SLODEA, which is the proposed SLODEA2OA with zero tolerance. Table 11 compares the best solutions obtained by the SLODEA with those obtained by the nature-inspired methods developed by Coello and Corte  X  s (2004) and by Bernardino et al. (2008) . Again, the results obtained by the SLODEA are superior. Table 12 further shows that, in a comparison of robustness between SLODEA and the nature-inspired methods, the SLODEA finds the best fitness value of 2994.341764 in each independent run (in a series of 30 runs).
Notably, even the average fitness values obtained by the SLODEA are superior to the best values obtained by Coello and Corte  X  s (2004) and Bernardino et al. (2008) . The mean number of function calls obtained by the SLODEA (5189) is also far smaller than the mean numbers of 150,000 and 36,000 obtained by Coello and
Corte  X  s (2004) and Bernardino et al. (2008) , respectively. These comparisons confirm the outstanding performance of the SLODEA in finding the best solution.

Despite their demonstrated effectiveness in terms of optimiz-ing performance, the techniques used in the proposed optimiza-tion-design method do not ensure robust design parameters, which are subject to tolerances or fluctuations. Under such circumstances, the solutions are very sensitive to the constraints imposed by the design requirements. That is, varying the design parameter values often violates the constraints. For example, the parameter values shown in Table 11 , which were obtained by Coello and Corte  X  s (2004) and Bernardino et al. (2008) , were used to test the solution robustness of the speed reducer design. At a tolerance of 7 0.1%, 8977 and 7505 constraint violations were observed in solutions obtained by Coello and Corte  X  s (2004) and Bernardino et al. (2008) , respectively, in 3000 random experi-ments. The total number of violations can potentially exceed 3000 since it is calculated by summing the numbers of constraints f ( x ) f 11 ( x ) and x 1 x 7 that occur in each experiment. Tolerances for design parameters are a practical engineering problem because of the potential for errors resulting from machine imperfections or degradation resulting aging, usage and environ-mental factors. Since minimizing the impact of parameter varia-tions is a key criterion for selecting a parameter optimization approach, parameter robustness is an important consideration. This study showed that the proposed SLODEA2OA can potentially achieve robust optimal-parameter solutions for tolerance design problems. 5. Conclusions
By introducing a 2OA within the SLODEA framework, the proposed SLODEA2OA approach preserves the merit of the SLO-DEA as a worst-case tolerance design approach. The major contribution of the SLODEA2OA is the use of a 2OA to account for tolerance in the evaluation stage in order to minimize the effect of parameter variations and to reduce computation time. Doing so obtains solutions within a specified tolerance so that further steps can be taken based on the vertex analysis results obtained by the 2OA. Vertex analysis avoids violations because its results can be far from the boundaries of the imposed constraints. Performance comparisons of the SLODEA2OA approach in the two cases in this study, which included a function with 10 design variables and a speed reducer design problem, confirmed its high robustness, short computation time, and easy optimization. Acknowledgment This work was in part supported by the National Science Council, Taiwan, Republic of China, under Grant numbers NSC99-2221-E153-001 and NSC100-2221-E153-001.
 References
