 The eXtensible Markup Language (XML) has become a standard language for data representation and exchange [11]. With the continuous growth in XML data sources, the ability to manage collections of XML documents and discover knowledge from them for decision support becomes increasingly important. Several databases tools are developed to deliver, store and querying XML data [2,4,10]. However they do require efficient data management techniques such as indexing based on structural similarity to support an effective document storage and retrieval. The clustering of XML documents according to their structural sim ilarity facilitates these applications. 
Mining of XML documents significantly differs from structured data mining and text mining [9]. XML allows the representation of semi-structured and hierarchal data containing not only the values of individual items but also the relationships between data items. Element tags and their nesting therein dictate the structure of an XML document. The inherent flexibility of XML, in both structure and semantics, poses new challenges to find similarity among XML data. 
Research on measuring the similarity of XML documents is gaining momentum [1,3,6,7,8]. Most of these methods rely on the notion of tree edit distance developed in combinational pattern matching  X  finding common structures in tree collection [14]. pair-wise similarity between documents/trees. The similarity is measured using the and maximize the inter-cluster similarity. The similarity value between each pair of trees is mapped into a similarity matrix . This matrix becomes the input to the clustering process using either the hierarch ical agglomerative or k-means clustering algorithms [5]. They are generally computationally expensive when the data sources are large due to the need of pair wise similarity matching among diverse documents. 
Our strategy is quite different from these pair-wise clustering approaches. It is inspired by the clustering algorithms developed for transactional data, LargeItem [13] and Clope [12], that do not need to compute a pair wise similarity. These methods measures to optimize the cluster parameters. Each new object is compared against the existing clusters instead of comparing against the individual objects. Since the similarities, global approaches are efficient. However, these methods are not suitable for XML documents, as they do not consider the hierarchical structure of a document, (i.e. the level positions, context or relationships of elements). 
This paper presents the X ML documents C lustering with L evel S imilarity (XCLS) algorithm to group the heterogenous XML documents according to similar structure using global similarity measures. We develop a Level structure format that represents the documents for efficient clustering. The novel global criterion function, called relationships between elements of documents. The experimental results show the XCLS to be an accurate, fast and scalable technique for grouping XML documents. 2.1 Level Structure: Inferring of XML Documents Structure In a heterogeneous and flexible environment as the Web, it is not appropriate to assume that each XML document on the web has a schema that defines its structure definition. Additionally if they have one, many documents depart from their structure definition through multiple modifications. For XCLS to be used for general Web documents, the structural information within the document is inferred. The documents and schemas are first represented as labelled trees. We define a novel concept of the on paths of elements with content values (i.e. leaves in a document tree), without considering attributes in an XML document. Figure 1 shows a XML document (X_Movie) and its corresponding structural tree (T_Movie). In order to enhance the clustering speed, the name of each element is denoted by a distinct integer. The Figure 2 shows the level structure for T_Movie. 
The contents of a cluster preserving the hierarchical information of document are elements of the same level for all documents within the cluster. The figure 4 shows a tree structure of a document on Actor information and its corresponding level structure. The Figure 3 shows the level structure of a cluster containing both the Movie and Actor documents. Each block in this structure contains information including element value, level in the hierar chy, its original tree identification, etc. 2.2 Clustering Global Criterion Function with Level Similarity (LevelSim) Considering the level information and elements X  relationships/context of XML data, a new solution for measuring structural similarity between two XML objects (cluster to (LevelSim) . It measures the common items in each corresponding level, and allocates different weight according to the level (i.e. high level (e.g. root) has more weight than low level (e.g. leaf)). Elements are matche d according to the level information of each object. The order of matching between two objects is important due to the structural information present in an XML document. The LevelSim when matching object 1 (tree) to object 2 (cluster) is defined as: all levels considering the level information of object 1 and object 2 respectively; 
TreeWeight denotes the total weight of all items in each level of the tree (object 1); the higher level elements have larger than lower level elements called as  X  X ase Weight X ; 
L is the number of levels in the tree. 
LevelSim yields the values between 0 and 1; 0 indicates completely different objects and 1 indicates homogenous objects. The operation LevelSim is not transitive. There are some cases when one object may be a part of the other sharing a large similarity. In order to solve this problem, the measured and the larger value between two is chosen: 2.3 The Process of Structure Matching Between Two Objects The steps to match elements of a tree (object 1) to elements of a cluster (object 2) are: 1. Start with searching common elements in the 1 st level of both objects. If at least one common element is found, mark the number of common elements with the level step 3. 2. Move both objects to next level (level i++, level j++) and search common elements in these new levels; If at least one common element is found, mark the number of then go to step 2. Otherwise, go to step 3. 3. Only move object 2 to next level (level j), then search common elements in the common element is found, mark the number of common elements with the level step 3. 4. Repeat the process until all levels in either object have been matched. After completion of structure matching the Level Similarity (LevelSim) is computed. 
The Figure 5 shows two cases of matching object 1 (a tree T_Movie) to object 2. In case, object 2 is a cluster containing both T_Actor and T_Movie. 2.4 Clustering with Level Similarity This section discusses the algorithm that groups the XML structures according to LevelSim values. The task is to group each XML document into an existing cluster that have the maximum LevelSim or to a new cluster. The figure 6 outlines the algorithm that includes two phases of allocation and reassignment. In the allocation phase, clusters are progressively formed driven by the criterion function LevelSim . In the reassignment phase, only a few iterations are required to refine the clustering and /* Phase 1  X  Allocation */ 
For all XML trees to be clustered  X  read the next tree (represented as level structure);  X  compute the LevelSim between the tree and each existing cluster;  X  assign the tree to an existing cluster if maximum of LevelSim(s) is found  X  otherwise, form a new cluster containing the tree. /* Phase 2  X  Reassignment (adjustment) */ 
For all XML trees  X  read the next tree (i.e. level structure);  X  compute the LevelSim between the tree and each existing cluster;  X  reassign the tree to an existing cluster if maximum of LevelSim(s) is found  X  otherwise, form a new cluster containing the tree. /* Stop if there is ano improvement in two iterations*/ optimize the LevelSim . The XCLS algorithm uses a user-defined threshold LevelSim_Threshold below which the cohesion between two objects is not considered. This threshold (between 0 and 1) can be se t according to the app lication requirement, if only highly homogenous documents are to be grouped the threshold is set higher (near 1) otherwise it is set at a lower value (near 0). The data used in experiments are 460 XML documents downloaded from the Wisconisn X  X  XML data bank (http://www.cs.wisc.edu/hiagara/data.html) and the XML data repository (http://www.cs.washington.edu/research/xmldatasets/). The data set includes various domains such as (Movie (#Documents: 74), University (22), Automobile (208), Bibliography (16), Company (38), Hospitality message (24), Travel (10), Order (10), Auction data (4), Appointment (2), Document page (15), Bookstore (2), Play (20), Club (12), Medical (2), and Nutrition (1). The number of nodes varies form 10 to 1000 in these sources. The nesting level varies from 2 to 50. Majority of these domains consists of a number of different documents that have structural and semantic differences. Hence, even though documents are from the same domain, they might not be considered similar enough to be grouped into the same clusters. 3.1 Evaluation Criteria The two commonly used evaluation methods are utilised: (1) the intra-cluster and inter-cluster quality and (2) the FScore measure. 
The intra-cluster similarity measures the cohesion within a cluster, how close the documents within a cluster are. This is computed by measuring the level similarity between a pair of trees (i.e. XML document structures) within a cluster. The intra-cluster similarity of a cluster C i is the average of all pair-wise level similarities within the cluster: average of the intra-cluster similarities of all clusters taking into account the number of trees within each cluster: solution. 
The inter-cluster similarity measures the separation among different clusters. It is computed by measuring the level similarity between two clusters. The inter-cluster similarity of the clustering solution is the average of all pair-wise level similarities of solution C = { C 1 , C 2 ... C k } is: clustering. comparison of clusters X  classes to known external classes. Given a XML document category Z r with the n r number of similar XML documents, and a cluster C i with the n i number of similar XML documents categorised by XCLS. Let n r i be the number of clusters of the clustering solution. Hence the FScore of the overall clustering solution is then defined to be the sum of the individual class FScore weighted differently according to the number of documents in the class: 
FScore 3.2 Experimental Evaluation for Accuracy of Clustering To show the comparison between pair-wise similarity algorithms and XCLS, a similarity matrix is generated by measuring the similarity between each pair of documents in the database. The constrained hierarchal agglomerative clustering algorithm Wcluto, [15] is used to group documents from this similarity matrix. The figure 7 shows the value of FScore near 1 as the given document set is clustered into groups according to the natural distribution of domains in the input data sources. XCLS achieves the intra-class similarity value to 1 as the number of clusters increases (figure 8). Due to the nature of the XCLS algorithm, documents are XCLS does not need many iterations in the second phase, only minor adjustments are made in consecutive passes. 3.3 Scalability Evaluation Space Complexity. The XCLS require only the information of the current document (in process) and a small amount of information of each cluster in the RAM. The tree X  X  information, called tree features, includes the number of levels and its level structure containing all distinct elements in each level. The cluster X  X  information, called cluster features, includes the number of trees, the level structure containing all distinct only the memory consumed by level structures of clusters need to be analysed for the space complexity. Suppose the maximum number of levels is N and the average for the level structure in a cluster is approximately N*M*8 bytes using array of 2*4-byte integers (4-byte for element id, 4-byte for occurrences). Therefore, XML structure and with a clustering of 1 k can be fit into a 8M (50*10*8*1 k ) RAM. Time Complexity. The time complexity of pair-wise clustering algorithms is at least large amount of data. XCLS computes the structure similarity between the document structure and clusters avoiding the need of pair-wise comparison. Its time complexity is O(m X c X p X n) : m is number of elements in documents; c is number of clusters; p is number of iterations; n is number of distinct elements in clusters. The documents grouped into a cluster should have similar structures and elements. So the number of distinct elements in clusters should always be less than the distinct elements in documents. The number of iterations is usually small and its maximum can be configured. (In our experiments, we never required more than two passes. The maximum is set as 6.) Therefore, if the number of clusters is less than the number of documents (that is usually the case) the time cost is linear to the number of documents. The execution time of XCLS (including both pre-processing and clustering), time of generating the similarity matrix between each pairs of documents in the data set, and execution time of Wcluto (including the similarity matrix generation and clustering) in Figure 10 shows the effectiveness of XCLS. A novel algorithm for clustering heterogeneous XML documents by their structures LevelSim . XCLS does not compute pair-wise structural similarity between two XML documents to get the matrix for clustering; instead, it computes the LevelSim to quantify the structural similarity between a XML document and existing clusters and groups the XML document to the cluster with the maximum level similarity. 
The LevelSim emphasizes different importance of elements in different level positions by allocating different weight to them. The hierarchical relationships of elements are also considered by only counting common elements sharing common computation of LevelSim is quite effective. 
This simple idea behind XCLS makes it accurate, fast and memory saving in (inter-cluster similarity close to 0, intra-cluster similarity close to 1, the FScore value close to 1) clustering algorithm for diverse and heterogenous XML documents. 
XCLS can be widely used in creating hierarchical index of a large number documents for browsing, discovering elements patterns when describing a specific for documents classification. XCLS can be used to enhance the speed and accuracy of fast searching or locating of XML documents. 
XCLS needs some future work to improve its effectiveness. XCLS ignored the sematic similarity among documents, which is impractical in the flexible environment on web since people may use different tags to describe the same thing. As WordNet can organize English words into synonym sets and defined different relations link the similarity among elements. 
