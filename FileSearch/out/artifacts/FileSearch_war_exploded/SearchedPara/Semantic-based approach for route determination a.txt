 1. Introduction
The basic approach to the navigation problem when more than one vehicle is involved consists of each vehicle independently following a specific route, detecting and avoiding obstacles using well-known algorithms. Static obstacles can be handled effi-ciently; however, in the presence of mobile obstacles, the algo-rithm applied is mostly conservative due to the inherent uncertainty in obstacle trajectory. The vehicle will either stop or try to overtake the obstacle by a wide margin, making it an inefficient way to navigate.

A more efficient approach involves cooperation among vehi-cles, and consists of a central system that receives information wirelessly from the vehicles and sends commands to them. The vehicles can be coordinated by the central system by means of a central metric motion planner. For example, in ( Bouraoui et al., 2006 ), this approach is proposed for handling the meeting of two vehicles at an urban intersection. As the vehicles approach the intersection, a wireless link is established between the vehicles and a static node. The two vehicles communicate their GPS information to the static node. This information is then passed to a motion planner. The motion planning strategy considers the vehicle dynamics and the real-time constraints imposed by the environment. In order to determine the safe states, an inevitable collision state checker is also incorporated. A new trajectory is calculated periodically when new information is received. When the vehicles are close to each other, they are decelerated to ensure safety. If more than two vehicles are involved, the problem becomes more complex, and a long time is required for the system to resolve the crossing situation.

In order to solve the problem more efficiently, the authors propose a semantic approach. The semantic scheme proposed handles the crossing problem by means of a centralized ontology reasoner that decides, based on the priorities and rules defined, what vehicle should stop and what vehicle should proceed.
As soon as one vehicle stops, the other one will regard it as a static obstacle and the situation is quickly resolved. The problem of motion planning is thus considerably simplified.

The present work is part of a project to develop a low-cost smart system that can engage in passenger transport and surveil-lance in non-structured environmental settings: specifically, at the facilities of the Technical and Renewable Energies Institute (ITER) in Tenerife, which features a housing complex with 25 environmental-friendly dwellings. Fig. 1 shows the so-called
VERDINO prototype traveling through the aforementioned facil-ities ( Gonza  X  lez et al., 2009 ). To achieve this task, the first key element is determining the path to take from all the possible routes in the complex. Initially, VERDINO was capable of follow-ing routes that had been previously recorded and processed.
A more ambitious goal is, given a start and finish point, to determine the shortest possible route and to have VERDINO travel along this route. The second goal considered is that of intelligently managing several vehicles that share the complex X  X  roads, resolving potential conflicts as they are encountered, assigning priority at intersections, keeping a safe distance between vehicles or on narrow two-way segments, etc. Both goals are addressed using the commented semantic approach; specifically, by designing an ontology for a semantically rich mark-up language (OWL  X  Ontology Web Language) ( W3C, 2004 ) and by expressing a rule set in SWRL (Semantic Web Rule
Language) ( Horrocks et al., 2004 ). These tools allow knowledge to be represented in a way that computers can understand.
The rest of the paper is organized as follows: Section 2 summarizes related work about the use of ontologies in the field of intelligent vehicles and Section 3 briefly describes the details of the VERDINO prototype, focusing on those devices that are used to achieve the goals described. The semantic approach employed is detailed in Section 4 . The work done involving route determi-nation and fleet management, as well as to update the ontology, is explained in Sections 5 and 6 , respectively. In Section 7 the result of various experiment are shown. The paper closes with a brief section outlining the conclusions. 2. Related work
In recent years, a tremendous effort has been made to imbue web elements with greater content and significance, beyond that of simply representing the content ( Gruber, 1993 ; Guarino, 1995 ).
This endeavor is known as the Semantic Web ( Ding and Finin, 2004 ), and aims to represent knowledge in a way that computer systems can understand. That way is through the use of ontolo-gies. For this paper, the authors will adopt the definition detailed by ( Blomqvist and O  X  hgren, 2008 ).

An ontology is a hierarchically structured set of concepts describing a specific domain of knowledge that can be used to create a knowledge base. An ontology contains concepts, a subsumption hierarchy, arbitrary relations between concepts, and possibly other axioms. It may also contain other constraints and functions.

Working with ontologies offers a series of advantages, such as the establishment of common knowledge that can be reused among the various systems that interact within the same domain, and that at the same time simplifies communications between said systems. In addition, they increase the deductive capacity of the system, which is able to extract relationships not explicitly stated in the ontology ( Gonza  X  lez et al., 2006 ). The ontology itself can be managed dynamically in a way that can be reasonably interpreted by humans.

The dominant trend in the field of ontologies is the use of the so-called markup languages. These languages offer several advan-tages, such as data portability, ease of learning and use, flexibility, structural compatibility with web languages such as HTML, and others. Moreover, the latest generation of these languages endows computers with an additional degree of autonomy that can help them to perform their tasks, enabling them to provide all kinds of additional services beyond the basic requirements while offering the greatest semantic information possible. In this sense, the most suitable candidate at the present time is OWL (Ontology Web Language) ( W3C, 2004 ). Moreover, the resulting objects modeled could be translated to other languages for further processing with reasonable effort ( Fuchs et al., 2008 ). OWL is the W3C X  X  (World Wide Web Consortium) standard for the Semantic Web and represents a step forward from previous languages, such as XML and RDF ( World Wide Web Consortium, 2012 ). OWL incorporates the ability to express new class relationships, relationship types, 2005 ; Schlenoff, 2005) (an open-source Java-based editor with a strong user community ( Foedisch et al., 2006 )), that simplify the implementation of ontologies by shielding the user from having to code directly in OWL.

With regard to intelligent vehicles, several interesting approaches based on semantic treatments and/or ontologies have been developed. Amin et al. (1995) propose the use of a Semantic Control Paradigm to model both traffic control as well as vehicle path planning and steering control. Keyarsalan and Montazer (2011) model the traffic light control domain using a fuzzy ontology and apply it in order to control isolated intersections. Oliveira et al. (2010) develop a semantic fusion of laser and vision in pedestrian detection. Kuipers (2000) , (2008) determines that the knowledge of a large-scale space should be expressed through several distinct representations collectively known as the Spatial Semantic Hierarchy. Werner et al. (2000) developed the Route Graph for practical robot navigation in real application contexts. Fuchs et al. (2008) discuss the influence of the driving context on decision-making for context-aware driver assistance systems and present an OWL-based context model for abstract scene repre-sentation of driving scenarios. This representation includes ele-ments like traffic signs, the state of the driver and of the vehicle itself. Baumgartner et al. (2007) explain an ontological represen-tation of road traffic situation awareness. Schlenoff et al. (2005) develop an OWL-Service (OWL-S) intelligent ground vehicle (IGV) ontology that is the key for automating ground combat vehicles. This ontology was originally built to capture all pertinent infor-mation on tactical behaviors unambiguously so as to enable computer interpretation without any human supervision. Pisanelli et al. (2009) introduce a modular ontology supporting an on-board vehicle multimodal interaction system defining five domains for that ontology (vehicle security, road and traffic security, meteorological, user X  X  profiles and travel) that yield safer and more efficient road transport and mobility. T  X  onnis et al. (2007) present ontologies in the context of driver-assistance systems. Madkour and Maach (2011) build an ontology modeling approach for context management in intelligent pervasive mid-dleware for context-aware vehicle services. Feld and M  X  uller (2011) describe an  X  X  X utomative ontology X  X  including concepts like VehicleIdentity, DrivingManeuvers, VehicleInterior, etc.
Finally, the authors cite the work by H  X  ulsen et al. (2011) , which provides an approach for creating a generic situation description for advanced driver assistance systems using logic reasoning on a traffic situation knowledge base.

As can be deduced, the majority of the references focus on driver-assistance and only a few approaches involve an autono-mous vehicle. Apart from this, the ontologies cited do not themselves include any information about the rules to be observed, but these rules are defined in a software module that accesses the ontology. This fact, from the point of view of the authors, involves wasting the interesting potential that ontologies offer. Furthermore, there are no examples of dynamic ontology updating to adapt to new environmental conditions. 3. Brief description of the VERDINO prototype
The platform chosen for the project was a vehicle of the type used for transportation on golf courses, namely the EZ-GO TXT-2 golf cart, which is a fully electric, and thus CO2 emissions free, two-seat vehicle. This is an important requirement given the environmental nature of the facilities where the vehicle is to be used.

So as to allow the vehicle to operate automatically, modifica-tions were made to the original to equip it with computerized steering, braking and traction control systems. The original steering wheel was attached to a DC motor; the brakes, which originally relied on a cable, were replaced by a pneumatic circuit that controls braking force; and the speed controller was replaced by one developed by the project team. All of this is controlled by an Atmel microcontroller that sends commands to the lower-level parts of the system in order to move the vehicle. The microcon-troller receives information from an onboard quad-core computer that processes the information provided by the sensors mounted on the vehicle so as to calculate trajectories and avoid obstacles.
VERDINO is provided with a set of sensors that are used for locating the vehicle and for reconstructing the environment, including road and obstacle detection. The vehicle X  X  location is provided by a differential GPS that relies on two different GPS stations. The first is a fixed ground station whose position is very accurately known. The error between its actual and calculated positions is used to estimate the error introduced by each satellite and to send the corrections to the roving GPS station mounted on the vehicle. Specifically, the GPS device is a JAVAD GNSS Triumph-1 ( JAVAD, 2012 ) which accurate to within 1 cm horizontally and to around 1.5 cm vertically. The differential GPS is complemented by an Inertial Measurement Unit, an Xsens Mti one ( Xsens, 2012 ), which measures the vehicle X  X  three-dimensional orientation. This unit features three accelerometers, three gyroscopes, three magnet-ometers and a processor that is capable of calculating the proto-type X  X  Euler angles in real time based on the information provided by these nine sensors. In addition, an odometer system was installed on the rear wheels of the vehicle to serve as a back-up positioning system that can be used by the vehic le to determine its position and orientation in the event of a GPS system failure, such as due to satellite shadowing.

VERDINO also features other sensors important to navigation that are used to reconstruct the environment. The vehicle is equipped with a set of five cameras. The cameras are mounted on a binocular head with two degrees of freedom. This permits the cameras to adjust their height and rotation, allowing them to see around curves and in sloping terrain. The main purpose of this visual system is to detect obstacles and the unpainted edges of roads. Two of the cameras have thermal sensors to allow for more efficient detection of pedestrians.

Obstacle detection is also accurately performed by a set of five range finders with a precision of 10 X 35 mm. One is a SICK LMS 221 X 30206, mounted in the front of the vehicle, that determines the position of any obstacle within 80 m in a 180 1 field of view.
The other four range finders are SICK LMS 111 X 10100 with a detection range of 20 m and a 270 1 field of view ( SICK, 2012 ). Two of these devices are in the front corners to cover the front and the two sides of the vehicle. Another range finder is in the back of the car. The last range finder is in the top front of the vehicle at an inclination angle of 30 1 so that it can make a 3D scan of the road around the vehicle as it moves forward. This range-finder detects small obstacles or irregularities in the asphalt, such as pot holes.
At this moment, VERDINO is able to navigate by using a predictive control system and gathering knowledge on the rela-tive position of the obstacles around the vehicle.

Regarding fleet management, the global schema of the proposed architecture is depicted in Fig. 2 . Each vehicle (verdino1, verdino2, verdinoN) has its own low-level control based on the ROS ( ROS project, 2012 ) software architecture developed in previous research.
Each Verdino uses wireless communications to send its posi-tion to the central system in a specific frequency (around 1 Hz).
The semantic application answers by commanding the vehicle to continue normally or to stop. If the communication fails or the semantic reasoner is delayed, local control avoids a collision by applying a conservative algorithm. Consequently, the semantic approach proposed tries to improve the performance of the fleet.
Real-time specifications are not needed because it is supported by low-level reactive algorithms. If the central system fails, the vehicles continue operating but the performance is degraded. 4. Semantic approach
Following a brief discussion of the concepts needed to develop the semantic approach presented in this article, we will focus on the proposed implementation. The goal is to define an ontology that can be accessed and shared by the various applications present in the VERDINO prototype, trying to take a deeper advantage from its use than the provided by the related work described in Section 2 . Like every ontology, it consists of concepts, relationships, instances (or individuals) and axioms. In its first stage, the ontology reflects only the representation of the paths to be taken by the VERDINO prototype as a set of segments, defined by its lengths and allowed direction of travel, and the connections and relationships between them. No information regarding geo-graphical orientation nor global position is provided. Each vehicle is represented at all times by its actual segment and position within the segment. This structure type is based on Regele X  X  (2008) proposal, the generality of which has proven useful for defining not only the relationships between the segments, but also for establishing the behaviors (defined, for example, by way of rules) associated with said segments (priority at intersections, for example). The structure is rather simple (that allows an effective real-time performance in the system) but powerful enough in order to represent any road configuration.

Fig. 3 shows an example of a segment configuration and its connections. In this example, the segments labeled as  X  X 1 X  X  and  X  X 2 X  X  end in the one labeled  X  X 3 X  X , at an intersection for which priority rules can be defined for the case when two vehicles reach the crossing at the same time. With respect to segments  X  X 4 X  X  and  X  X 6 X  X , both refer to the same road segment but indicate that it can be traveled in both directions. This allows a vehicle to stop in  X  X 3 X  X  before entering  X  X 4 X  X  if there is a car in  X  X 6 X  X .

The class structure in the ontology is very simple, and is typically known as a coarse-grain ontology. It is precisely this simplicity that is one of this approach X  X  greatest advantages, since it reduces the computational cost of the processing involved. The ontology consists mainly of the following concepts: Vehicle,
Segment, VehiclePosition (which determines, as we shall see later, the segment where the vehicle is and its distance with respect to the start of the segment) and Route, which defines an ordered set of segments that determine the route the vehicle wishes to take at that moment. The necessary axioms have also been defined, like the one stating that the PriorityIntersection, Opposition and Neighboring are disjoint and encompass the
RelationshipBetweenSegments concept. In everyday language, this means that a RelationshipBetweenSegments must necessarily be one (and only one) of the three types.

The onSegment relationship is a binary relationship whose domain (subject) is Vehicle and range (object) is VehiclePosition.
In turn, VehiclePosition is the domain of the relationships isO-nSegment and isAtDistance, which serve to uniquely identify the vehicle X  X  position. Also of note is the relationship hasRouteAvail-able (whose domain is Vehicle and range is Route). The Route is related to the individuals belonging to the SegmentOrder class through the relationship hasSegmentOrder. SegmentOrder is related with the segments and its order in the route with the corresponding relationships.

Completing the ontology are the individuals, or instances, of the concepts present in the ontology. This includes, on the one hand, the segments of the ontology with their relationships (one of the three types). Thus, in a configuration like that shown in
Fig. 3 , the intersection between Segment1 and Segment2 would be of the PriorityIntersection class (whose priority can be configured using the hasPrioritySegment and hasSecondarySeg-ment relationships), while Segment4 and Segment6 comprise a RelationshipBetweenSegments of the Opposition subclass. On the other hand, it also features an individual/instance for each existing vehicle. Every individual can be handled dynamically during the runtime (add, delete, modify the values of its relationships, etc.).

Ferna  X  ndez et al. (2009) show, in general lines, that there is no statistically significant information to assure that the existing measures are able to identify the best semantic content; in other words, there is no definitive test to prove that one ontology is better than another. Within this context, and though in preparing our ontology we followed the steps recommended in classical references such as Noy and McGuinness (2001) , authors like Cordi and Mascardi (2004) , Colomb and Weber (1998) , Fox and Gruninger (1997) , Cuenca Grau et al. (2012) refer to the problems stemming from the possible inconsistencies and incompleteness of the ontologies designed. In terms of the inconsistency, there are several powerful reasoners available, such as Oracle X  X  Semantic Data Store ( Wu et al., 2008 ), Sesame ( Broekstra et al., 2002 ), Jena ( McBride, 2001 ), OWLim ( Kiryakov et al., 2005 ), Minerva ( Ma et al., 2006 ). However, given the simplicity of the current state of our ontology, we thought it sufficient to use the reasoner included within the Prote  X  ge  X  tool: Pellet ( Sirin et al., 2007 ), which con-cluded that our ontology is consistent, as shown in Fig. 4 .
As regards the completeness of the ontology,  X  X  X rom a logical point of view, completeness is a property associated with combin-ing a procedure for constructing well-formed formulas, a definition of truth that relates to interpretations and models of logical systems, and a proof procedure that allows new well-formed formulas to be derived from old ones X  X  ( Cordi and Mascardi, 2004 ). Most ontology completeness checks involve a series of queries that the ontology must solve ( Colomb and Weber, 1998 ; Fox and Gruninger, 1997 ). In our work, the completeness test consists of whether or not behavior rules based on the terms contained in the ontology can be formulated.

The system X  X  behavior was implemented using a markup language that is compatible with the information contained in this ontology and defines the rules of that behavior. The language chosen was SWRL (Semantic Web Rule Language, another stan-dard issued by the W3C ( World Wide Web Consortium, 2012 )), with the rules being defined via the Prote  X  ge  X  tool. The rules defined in SWRL play the role of logical connectors, improving the semantic expressivity of OWL. These rules are ingrained in the ontology itself.

The authors have verified that only three rules are needed to define the desired behavior for the vehicle X  X  setting.
Rule on priority at intersections: P(priority segment, secondary segment) This rule states that if two vehicles approach the intersection of two segments, the vehicle on the secondary segment must go into hold mode. In the case of Fig. 3 , when two vehicles approach the ends of segments 1 and 2, the vehicle on segment 2 must stop. The relationships between segments are binary, meaning that wherever two or more segments intersect, relationships must be defined as combina-tions between segments. A more complex example is shown in
Fig. 5 , where the notation Route A ( x , y ) signifies that vehicle A is on segment x and the next segment on its route is segment y .In this case, the entrance order is defined as follows: segment 1, segment 2, segment 3.

Segment opposition rule: O(segment, segment). If a vehicle wishes to enter a two-way segment in which a vehicle is in the opposite segment, it must go into hold mode. Note that the way the ontology is defined, if O( x , y ) is defined, then so must the relationship O( x , y ). For the sake of simplicity, only one relationship between segments will be shown from now on, from which the inverse relationship is defined. For example in Fig. 3 we define O(4,6).

Safety distance rule: two vehicles moving in the same segment must maintain a predefined safe distance away between them.
Consequently, the following vehicle is commanded to stop if it is within the safe distance to the preceding one.

It is important to note that since the Verdino prototype moves in an unstructured environment of roads with a limited width, there are no rules involving proximity among segments in the same direction since there are no two parallel segments in the aforementioned environment. This rule (or others) can be easily added to the ontology if necessary, such as, for example, when dealing with other transportation networks, such as expressways.
The defined configuration yields a versatile system in which new rules can be quickly defined without the need to recompile code.
As example of these SWRL rules, the authors will briefly detail that related to segments with Opposition as value of the relation
RelationshipBetweenSegments. For that purpose, situation shown in Fig. 6 can be considered. Vehicle B is on segment 3 and its next segment in its route is segment 1. However, vehicle B has to wait, since there is another vehicle (A) on segment 2 (occupying the same physical space than segment 1). This situation occurs, for example, when the road is rather narrow but navigation is
V ehicle(?x) hasVehiclePosition(?x, ?c) isOnSegment (?c, ?y) isAtDistance (?c, ?z) hasDistance(?y, ?a) swrlb:subtract(?b, ?a, ?z) swrlb:lessThanOrEqual(?b, 50) 
V ehicle(?f) hasVehiclePosition (?f, ?g) isOnSegment (?g, ?e) hasRouteAvailable (?x, ?d) hasSegmentOrder (?d, ?h) hasOrder(?h, ?i) hasSegment(?h, ?y) hasSegmentOrder (?d, ?j) hasOrder(?j, ?k) hasSegment(?j, ?m) swrlb:subtract(?n, ?k, ?i) swrlb:equal(?n, 1) 
Opposition (?o) hasPrioritySegment (?o, ?m) hasSecondarySegment (?o, ?e) hasStatus(?x, Wait) hasDistanceToConflict (?x, ?b) 
This example also shows how the relationships between segments must be carefully defined. If the intersection rule between segments 2 and 3 is defined such that segment 3 has priority over segment 2, a deadlock would result since vehicle A would have to wait until vehicle B exited the intersection and vice versa. This situation is avoided by giving segment 2 priority over segment 3. In general, the segments involved in cases of opposi-tion should be given priority in their respective intersection relationships.

Going back to the example in Fig. 3 , the rule establishes a distance of 50 units to the intersection as the upper limit for the Wait state. The full SWRL code is shown in Fig. 7 , where x should match with Vehicle B, y with Segment 3, f with Vehicle A, e with Segment 2 and m with Segment 1.

The SWRL code may appear complex and non-intuitive, but it corresponds to an actual situation employed with the prototype in the environment described earlier. It is important to note that although the rules can be written using a plain-text editor, it is much simpler and more efficient to use the  X  X  X WRL Rules Tab X  X  on the Prote  X  ge  X  tool ( Fig. 8 ). This plug-in can be used to edit rules while avoiding syntax errors.

As noted earlier, the segment model designed lets us deal with any topological segment configuration. This does not, however, prevent undesired deadlock situations if the configuration chosen for the segment directions in the real system allows for deadlocks. Consider the example shown in Fig. 9 , where four vehicles are approaching an intersection whose four segments are too narrow and two-way traffic is defined on each segment. Such a badly designed situation will inevitably result in a deadlock. An interesting example is the traffic model for a regular X-crossing shown in Fig. 10 . This model consists of four 2-way roads (labeled in the figure as N, S, E and W) and a central intersection. The problem is solved by defining the 20 segments shown in the figure. The notation used distinguishes between the segments in each branch (labeled AB, where A denotes the branch and B the direction) and at the central intersection (labeled A2B, where A is the branch of origin and B the destination). By way of example, the segments EW (branch E heading W), EE (branch E heading E), N2E (branch N turning onto branch E), S2E (branch S turning onto branch E) and W2E (branch W crossing to branch E) are shown in Fig. 10 . This configuration is used to define the rules listed in Table 1 . As we can see, the segment opposition rule can be useful in situations other than those involving narrow segments.

Once the ontology and the rules of behavior are defined, they must be processed correctly as a whole. The authors have chosen a rule engine with proven efficiency: JESS (Java Expert System
Shell, ( JESS, 2012 )), which is reminiscent of CLIPS, though with several differences. Thus, the code must be transformed from
OWL and SWRL into JESS. The authors have used the OWL2JESS and SWRL2JESS tools. The OWL ontology, then, is processed into
JESS events and SWRL into JESS rules. The JESS engine is accessed from the VERDINO modules via a Java interface. The result is as shown in Fig. 11 .

This semantic approach provides a support system for the low-level configuration that is capable of handling any segment configuration. The system is scalable and dynamic and features the additional advantages offered by the use of ontologies: representation of real world information in a manner that is machine processable, suited for an evolutionary approach to the specification of requirements and domain knowledge and inter-operability c ( Happel and Seedorf, 2006 ). 5. Route determination
As noted earlier, a route is determined by the ordered set of segments which satisfy the condition of being connected. Prior to this latest research, the VERDINO prototype was able to follow pre-programmed routes by using the position sensors indicated earlier. A more ambitious goal is that of determining the optimal route between two pre-set points (the vehicle X  X  current position as the origin and the destination) using a semantic approach.
In order for the vehicle to be able to follow a route, a geographic reference must exist for the points that comprise each segment.
The first step is to geographically define and determine the segments in the environment within which VERDINO will travel.
This is done by planning a series of paths that encompass every possible segment. On each portion of road between inter-sections a segment must be defined for each direction of travel.
Segments must be defined at the intersections for each of the possible options. The information gathered by the sensors (posi-tion, orientation and speed) along these segments is stored in a file for subsequent processing. One of the data gathering paths is shown in Fig. 12 . It is important to remark that the authors have implemented the set of rules in order to obtain the shorter path between two points, from the structure in OWL and SWRL. The algorithm implemented is a simple branch-first-search in the graph of connected segments.

Using the data gathered, the necessary segments must then be defined. To this end we have devised a graphical editor into which the data from all the paths are input. Then, a mouse is used to cut up the paths, delete routes, etc, on the display until the necessary segments are defined. The relationships can also be defined: next segment, segments which have priority at intersections and segments in opposition. Fig. 13 shows an image from said editor.
A total of 54 segments had to be defined in order to cover every possible route in the environmental housing project. This procedure can be duplicated for any location in which VERDINO, or a fleet of vehicles, is to be used.

When the control application for the prototype is executed, the file with the segment definitions is read. The names of the segments, their length and their relationships (the only informa-tion required) are loaded into the ontology, while the geographical information is kept by the control application. When the user wishes to select the destination, he is shown a screen. When he clicks on a certain point, the geographical position of that point is known, and with it the segment and segment length corresponding to the chosen point. This information, along with the segment and length (within the segment) for the current vehicle X  X  position, which are known thanks to the GPS, is sent to the reasoner. The reasoner, in turn, will use the rules defined in the ontology to output a series of segments that comprise the minimum route to the destination. Joining the segments in order will provide the geographical trajectory to be followed by VERDINO. 6. Ontology updating
Once a route is captured, the vehicle navigates through it using the information provided by the GPS and the IMU. An estimated road width is calculated for the captured route. However, navigable road width may vary due to new obstacles or other unforeseen circumstances. Roads that were wide enough to be labeled as navigable in both directions simultaneously will have to be re-categorized as one way at a time if an obstacle is present.
Changes have to be made in the Route Planner in order to take this into account when constructing a route.

The vehicle detects the road using an Ant Colony Optimization (ACO) ( Dorigo and St  X  utzle, 2003 ; Denebourg et al., 1983 ; Dorigo and 2000 ) based system, which can determine in real time the effective width of the road on which the vehicle is traveling ( Arnay et al., 2009 , 2009b ; Broggi and Cattani, 2006 ; Sotelo et al., 2004 ). If new obstacles are present along the edges, the detected road width will decrease, as shown in Fig. 14 . When the variation exceeds a certain threshold, an ontology update becomes necessary.

Forexample,asshownin Fig. 15 A, on this stretch of road there were initially two separate segments, A and B, in the ontology. Due to obstacle detection, these segments are subdivided as shown in Fig. 15 B. While segments A1 X  X 3 and A3  X  X 1 remain independent, segments A2 X  X 2 are categorized as being in opposition, which means that they are not simultaneously navigable. When there is a vehicle in A1 and another vehicle is in B2, the first one must wait for B2 to be clear. The same waiting mechanism is applied if there is a vehicle in B1 and A2 is occupied by another vehicle.
Moreover, the geographical reference of the A2 segment must be updated in order to avoid the obstacle. This process is divided into two parts. The first part is from the current vehicle position ( x , y 0 ) to the avoidance point ( x f, y f ), where x f  X  x horizontal variation of the detected road center with respect to the GPS reference trajectory. y f  X  y 0  X  v y ;v y ; is a fixed distance, empirically determined to strike a balance between fast vehicle response and smooth trajectory variation.

The intermediate points are calculated through the third-degree polynomial function y  X  et x  X  at 3  X  bt 2  X  ct  X  1  X  with the following boundary conditions x  X  0  X  X  0 ; x  X  t f  X  X  x f ; y  X  0  X  X  0 ; y  X  t f  X  X  y f The second part is calculated analogously to connect with the A3 segment. An example of this is shown in Fig. 16 .

Both the ontological information and the geographical refer-ence of the new segments will be stored centrally for later use in route planning by all the involved vehicles. Subsequently, if a vehicle passes through this area and it does not detect an obstacle, perceiving the original width of the road instead, it restores the original information segment. 7. Results
In order to test the performance of the ontology in terms of priority management, updating times and route calculations, several road crossings configurations were simulated. Some of the routes are described for each simulation. The total number of simulated vehicles is evenly assigned to the incoming cross segments, queued due to the safety distance rule. The authors used an Intel Core 2 Duo @ 3.16 GHz CPU with 2.00 GB of RAM for these experiments. 7.1. Vehicle status updating
As the authors commented in Section 3 , the semantic application must be informed of every vehicle  X  X  position and then asked for the new status: if it needs to stop or if it can continue normally. Fig. 17 shows the semantic application r esponse time for different road crossings and numbers of vehicles. Table 2 shows the main characteristic of the crossing co nsidered and the number of the figure where the crossing is depicted. As can be seen, the response time increases with vehicle number and crossing complexity, though even in the worst case, it never exceeds two seconds, remaining below half a second in more typical cases. Due to the limited speed of the vehicles, under 4 m/s, these processing times are more than acceptable, especially considering that a low-level reactive system is in place to prevent any collisions. 7.2. Ontology updating time
When real-time road narrowing is detected, the ontology must be updated in order to consider the new condition of the segments, as described in Section 6 . The updating time is constant, less than 0.56 ms, as it does not depend on the configuration or complexity of the roads. Furthermore, this update will be taken into account when a second vehicle, different from the one that detects the obstacle, arrives at the same place, something that will normally happen a few minutes later. 7.3. Route calculation time
A powerful benefit of using a semantic approach to describe a road network is that it can calculate relatively large routes in a short time due to the fact that the spatial information is represented on a graph. Other methods based on 2-D grid maps, larger maps at a constant grid resolution. For example, for the
ARA n algorithm ( Likhachev et al., 2003 ), a maximum processing time parameter can be defined, and the algorithm will generate the best route that it has obtained so far, which will be likely sub-optimal though. Following these semi-optimal routes, however, generally requires the vehicle to execute complex maneuvers.
As a result, finding smooth trajectories entails elevated comput-ing times, on the order of 60 s for a 100 m route in a setting with a high number of obstacles.

In contrast, the time the ontology needs to compute a route remains almost constant, approximately one second. This time is the sum of finding the shortest path in a graph (4 ms) and the connect the vehicle X  X  initial and target position with the semanti-cally generated route (2 0.4 s). 8. Conclusions
A semantic approach was proposed for the purposes of route determination and several vehicles management in an environ-mental housing complex. This approach consisted of creating an
OWL-based ontology integrated with SWRL rules. Both elements have been adapted to allow their integration into an instance of the JESS rules engine, which was in turn integrated in a semantic centralized application that allowed operation of the VERDINO prototype.

The semantic approach provides a support system for a low-level application that is capable of handling any segment config-uration. The system is scalable and dynamic and features the additional advantages offered by the use of ontologies.
In order to test the performance of the ontology in terms of priority management, updating times and route calculations, several road crossings configurations were simulated. Some of the routes are described for each simulation. The results show that the route calculation times and the resolution of priorities at intersections allow the prototypes to navigate in real time.
The ontology can be dynamically updated, for example, in the event that obstacles are detected by any vehicle in the environ-ment. Specifically, the design can accommodate two-way roads which, due to the presence of an obstacle, cannot be traveled in both directions simultaneously. The updating feature is indepen-dent of the detection method utilized. Since finding obstacles along the sides of a road is common, an ACO-based method was used in light of its robustness in detecting the edges of a road. Acknowledgments This work was financed by project SAGENIA DPI2010-18349 of Spanish Government.

The authors are grateful to the Tenerife Technical and Renew-able Energies Institute (ITER) for their collaboration in carrying out this project.
 The work of researchers Jesu  X  s Espelos X   X  n Ortega and Rafael Arnay del Arco was funded in part by the Research Personnel Training Program of the Canaries Research, Innovation and
Information Society Office of the Government of the Canaries, 85% of whose funds are provided by the European Social Fund. References
