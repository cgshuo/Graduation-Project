 Data -driven approaches have been long applied for sp o-ken language technologies. Although a data -driven a p-proach requires time -consuming data annotation, the training is done aut o matically and requires little human supervision. These advantages h ave motivated the d e-velopment of data -driven dialog modeling s (Williams and Young, 2007, Lee et al., 2009) . In ge n eral, t he data -driven approaches are more robust and portable than traditional knowledge -based approaches . However , va r-ious knowledge sources are still used in many sp o ken dialog sy s tems that have been developed recently. These knowledge sources co n tain task model, domain model, and agenda which are powerful repr e sentation to reflect the hierarchy of natural dialog co n trol. In the spoken dialog systems, these are manually designed for various purposes including dialog modeling (Bohus and Ru d-nicky, 2003, Lee et al., 2008) , search space redu c tion (Young et al., 2007) , domain knowledge (Roy and Su b-ramaniam, 2006) , and user simulation (Schat z mann et al., 2007) .

We have p roposed an example -based dialog modeling (EBDM) framework using an age n da graph as prior knowledge (Lee et al., 2008) . This is one of the data -driven dialog mo d eling techniques and the next system action is determined by selecting the most similar dialog examples in dialog example database. In the EBDM framework for task -oriented dialogs, agenda graph is manually designed to address two aspects of a dialog management: (1) Kee p ing track of the dialog state with a view to ensuring steady progress towards tas k compl e-tion, and (2) Su p porting n -best recognition hypotheses to improve the robustness of dialog manager. However, manually building such graphs for various applications may be labor intensive and time consuming. Thus, we have tried to investigate how to build this graph aut o-matically. Consequently, we sought to solve the pro b-lem by automatica l ly building the agenda graph using clustering method from an annotated dialog co r pus. Clustering techniques have been widely used to build prior knowl edge for spoken dialog systems. One of them is automatic construction of domain model (or topic structure) which is one of the i m portant resources to handle user X  X  queries in call centers. Traditional a p-proach to building domain models is that the analysts manually generate a domain model through inspection of the call records. However, it has recently been pr o-posed to use an unsupervised technique to generate d o-main models automa t ically from call transcriptions (Roy and Subramaniam, 2006) . In addition, there has been research on how to automatica l ly learn models of task -oriented discourse structur e using dialog act and task information (Bangalore et al., 2006) . Discours e stru c-ture is necessary for dialog state -specific speech reco g-nition and language understanding to improve the performance by predicting the next possible dialog states. In addition, the discourse structure is essential to determine whether the current ut te r ance in the dialog is part of the current subtask or starts a new task.
More recently, it has been proposed stochastic dialog management such as the framework of a partially o b-servable Markov decision process (POMDP). This framework is statistically da ta -driven and theoretically principled dialog modeling. However, detailed dialog states in the master space should be clustered into ge n-eral dialog states in summary space to scale up POMDP -based dialog management for practical appl i-cations (Williams and Young , 2007) . To address this problem, an unsupervised aut o matic clustering of dialog states has been introduced and investigated in POMDP -based dialog manager (Lefevre and Mori, 2007) . 
In this paper, we are also interested in exploring m e-thod s that would automatically construct the agenda graph as prior knowledge for the EBDM framework. In this section, we begin with a brief overview of EBDM framework and agenda graph. The basic idea of the EBDM is that the next system action is predicted by finding semantically similar user u t terance in the dialog state space. T he agenda graph was adapted to take into account the robustness problem for practical applic a-tions. Agenda graph G is a simply a way of encoding the domain -specific dialog control to complete the task. G is represented by a directed acyclic graph (DAG) ( Fig ure 1 ) . An agenda is one of the su b task flows, which is a possible path from root node to terminal node. G is composed of nodes ( v ) which correspond to possible intermediate steps in the process of completing the sp e-cified task, and edges ( e ) which connect nodes. In other w ords, v corre s ponds to dialog state to achieve domain -specific subtask in its expected agenda. Each node i n-cludes three different components: (1) A preco n dition that must be true before the subtask is e x ecuted; (2) A description of the node that includes i ts label and ide n-tifier; and (3) Links to nodes that will be e x ecuted at the subsequent turn. In this sy s tem, this graph is used to rescore n -best ASR hypotheses and to interpret the di s-course state such as new task, next task, and new su b-task based on top o logical position on the graph. In the agenda graph G , each node holds a set of relevant dialog examples which may appear in the corresponding dialog states when a precondition of the node is true. To d e-termine the next system action, the dialog manager fi rst generates possible candidate nodes with n -best hyp o-theses by using a discourse interpretation algorithm based on the agenda graph, and then selects the focus node which is the most likely dialog state given the pr e-vious dialog state. Fina l ly the best e xample in the focus node is selected to d e termine appropriate system action.
H uman efforts are required to manually design the agenda graph to integrate it into the EBDM framework. However, it is difficult to define all possible precond i-tion rules and to a s sign the transition probabilities to each link based only on the discretion of the sy s tem developer. To solve these problems, we tried to co n-struct the agenda graph from the annotated dialog co r-pus using clustering technique. Each precondition has been manually defined to map relevant dialog examples into each node. To avoid this, the dialog examples are automatically grouped into the closest cluster (or node) by a node clustering. In this section, we explain a featur e e x traction and clustering method for constructing the agenda graph. Each dialog example should be converted into a feature vector for a node clustering. To represent the feature vectors, we first extract all n -grams which occur more fr equently than a threshold and do not contain any stop word as word -level fe a tures. We also extract utterance -level and di s course -level features from the annotated dialog corpus to reflect semantic and contextual info r-mation because a dialog state can be ch aracterized using semantic and contextual information deriv a ble from the annotations. The utterance is thus characterized by the set of various fe a tures as shown in Table 1.

Figure 1 : Example of an agenda graph for building gui d ance domain
Table 1 : List of feature sets
For a set of N dialog examples X= { x i |i= 1,..,N}, the binary feature vectors are re presented by using a set of features from the dialog corpus. To calculate the di s-tance of two feature vectors, we used a cosine mea s ure as a binary vector distance mea s ure: where x i and x j denoted two feature vectors. Ho w ever, each feature vector contains small number of non -zero terms (&lt;20 features) compared to the feature space (&gt;2000 features). Therefore, most pairs of utterances share no common feature, and their distance is close to 1.0. To address this sparseness problem, the d istance b e tween two utterances can be computed by checking only the non -zero terms of corresponding feature ve c-tors (Liu, 20 05) . After extracting feature vectors from the dialog corpus, we used K -means clustering algorithm which is the si m-plest and most commonly used algorithm employing a squared error criterion. At the initialization step, one cluster mean is ra n do mly selected in the data set and k -1 means are iteratively assigned by selecting the farthest point from pre -selected centers as the following equ a-tion: where each cluster c k is represented as a mean ve c tor u At the assignment st ep, each example is a s signed to the nearest cluster mean u k and dialog example x t .
The responsibilities r kt of each cluster c k are calc u-lated for each example x t as the fo llowing rule: where  X  is the stiffness and usually assigned to 1.
During the update step, the means are recomputed u s-ing the current cluster membership by r e flecting their responsibilities: From the node clustering step, node v k for cluste r c obtained from the dialog corpus and each node contains similar dialog examples by the node clustering alg o-rithm. Next, at the node linking step, each node should be connected with an appropriate transition probability to build the agenda graph whic h is a DAG (Figure 2) . This linking information can come from the dialog co r-pus because the task -oriented dialogs consist of seque n-tial utterances to complete the tasks. Using sequences of dialog examples obtained with the dialog corpus, rel a-tive freque n ci es of all outgoing edges are calculated to weight directed edges: alog examples having directed edge fr om v i to v j some edges are pruned when the weight falls below a pre -defined threshold  X  , and the cycle paths are removed by deleting minimal edge in cycle paths through a depth -first traversal. Finally the transition probability can be estimated by no r malizing relative frequencies with the remained edges.
A spoken dialog system for intelligent robot was deve l-oped to provide information about building (e.g., room number, room name, room type) and people (e.g., name, phone number, e -mail address). If the user s e lects a specific room to visit, then the robot takes the user to the desired room. For this system, we collect a human -human dialog corpus of about 880 user u t terances from 214 dialogs which were based on a set of pre -defined 10 subjects relating to building guidance task. Then, we designed a n agenda graph and integrated it into the EBDM framework. In addition, a simulated enviro n-ment with a us er s i mulator and an ASR channel (Jung et 
Figure 2 : No de Linking Algorithm al., 2008) was developed to e valuate our a p proach by simulating a realistic scen a rio .

First we measured the clustering performance to ver i-fy our approach for constructing the agenda graph. We used the manually clustered examples by a set of pr e-condition rules as the reference clu s ter s. Table 2 shows error rates when different fe a ture sets are used for K -means clustering in which K is equal to 10 because a hand -crafted graph i n cluded 10 nodes. The error rate was significantly reduced when using all feature sets.
We also evaluated the dialog system performance with the agenda graphs which are manually (HC -AG) or automatically designed (AC -AG). We also used 10 -best recognition hypotheses with 20% word error rate (WER) for a dialog manag e ment and 1000 simulated dialogs for an automatic evaluation. In this result, a l-though the system with HC -AG slightly outperforms the system with AC -AG, we believe that AC -AG can be helpful to manage task -oriented dialogs with less h u man costs for d e signing the hand -crafted agend a graph. In this paper, we address the problem of automatic knowledge acquisition of agenda graph to structure task -oriented dialogs. We view this problem as a first step in clustering the dialog states , and then in linking between each cluster based on the dialog corpus. The experiment results show that our approach can be appl i-cable to easily build the agenda graph for prior kno w-ledge.

There are several possible subjects for further r e-search on our app roach. We can improve the clustering performance by using a distance metric learning alg o-rithm to consider the correlation b e tween features . We can also discover hidden links in the graph by exploring new dialog flows with ra n dom walks.
 Thi s research was supported by the MKE (Ministry of Knowledge Economy), Korea, under the ITRC (Info r-mation Technology Research Center) support progra m supervised by the IITA (Institute for Information Tec h-nology Advancement) (IITA -2009 -C1090 -0902 -0045) .
Table 3 : Task completion rate (TCR) and ave r age user turn (AvgUserTurn) (WER=20%)
Table 2 : Error rates for node clustering ( K =10)
