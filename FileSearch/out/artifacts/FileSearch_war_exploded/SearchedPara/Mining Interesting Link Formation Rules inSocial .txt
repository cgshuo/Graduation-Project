 Link structures are important patterns one looks out for when modeling and analyzing social networks. In this pa-per, we propose the task of mining interesting Link For-mation rules (LF-rules) containing link structures known as Link Formation patterns (LF-patterns). LF-patterns cap-ture various dyadic and/or triadic structures among groups of nodes, while LF-rules capture the formation of a new link from a focal node to another node as a postcondition of exist-ing connections between the two nodes. We devise a novel LF-rule mining algorithm, known as LFR-Miner , based on frequent subgraph mining for our task. In addition to us-ing a support-confidence framework for measuring the fre-quency and significance of LF-rules, we introduce the notion of expected support to account for the extent to which LF-rules exist in a social network by chance. Specifically, only LF-rules with higher-than-expected support are considered interesting. We conduct empirical studies on two real-world social networks, namely Epinions and myGamma .Were-port interesting LF-rules mined from the two networks, and compare our findings with earlier findings in social network analysis.
 H.2.8 [ Database Management ]: Database Applications X  Data Mining ;J.4[ Computer Applications ]: Social and Behavioral Sciences X  Sociology Experimentation, Algorithms Social network analysis, Local structures, Frequent subgraph mining
Link structures in networks are an important piece of information that can help characterizing various types of network, understanding node (user) activities, identifying communities, detecting anomalies, and so on. In particular, dyadic and triadic structures ,alsoknownas local structures , have long been utilized for unde rstanding and predicting the dynamics of large and complex networks [16, 11, 3, 15, 14, 13]. In the area of trust prediction in social networks, for instance, the study in [12] analyzes the formation of trust links as a reciprocity effect. Several other studies examine trust propagation based on transitivity , assuming that trust values attached to links in a network would propagate along directed paths to various degrees (e.g. [4, 10]).

Previous social network research on local structures how-ever suffers from two common pitfalls. Firstly, they consider only the topological aspect of local structures and ignore the formation order of links in the network. Most research focuses on analyzing the statistical properties and distribu-tions of non-temporal structures in a network [16, 11, 3, 14]. Only recently, researchers have started to address the temporal order of links in specific triadic structures. For in-stances, Romero and Kleinberg [13] analyze links that might have been formed as a result of directed closure in Twitter, while Leskovec et al. [7] study link sign prediction between a node pair in a triad given different preexisting connections among the triad. Secondly, due to the enormous overheads of enumerating local structures, researchers usually shy away from identifying new interesting local structures that may exist in the networks to be studied and confine their work to simple structures such as dyads and triads, assuming that they are the only interesting ones.

Mining local structures beyond simple dyads and triads while considering time ordering of links is very important for understanding how new links and local structures emerge in different networks. In this study, we therefore propose to mine local structures for link formation from directed , tem-poral social networks. We formalize the notion of Link For-mation rule (LF-rule) to capture the formation of a new link from a focal node, called the start node, to another node, called the end node, as a postcondition of existing connec-tions between the two nodes. A LF-rule thus imposes a temporal constraint on the (partial) formation order of the links it contains. Specifically, the new link formed as a post-condition should be introduced to the social network at a later time point than all other links in the same rule. A LF-rule also follows certain structural constraints, defined as Link Formation patterns (LF-patterns). We aim to cap-ture LF-patterns containing multiple dyadic and/or triadic structures among groups of nodes , instead of simple dyads and triads in this work.
Fig. 1 summarizes our multi-step approach to mining in-teresting LF-rules. We first devise a new LF-rule mining algorithm based on frequent subgraph mining [5, 6, 17], and apply it on a given social network to obtain a set of LF-rules. To account for the extent to which LF-rules exist in the given network by chance, we conduct graph randomization on the original network so as to determine the expected sup-port of LF-rules. Finally, interesting LF-rules with higher-than-expected support are further evaluated manually.
We summarize our contributions as follows:
Our work is distinct from related studies in several as-pects. To the best of our knowledge, this is the first time a comprehensive approach is introduced to conduct link for-mation analysis in directed , temporal ( time-stamped )social networks with multiple edge labels . The Graph Evolution Rule Miner (GERM) proposed in [1] also mines frequent graph rules (with arbitrary st ructures) from a single, tem-poral graph, but does not consider link directions and la-bels. We are also not aware of any related work that con-siders expected support of local structures. Secondly, we take a subgraph mining approach to grow and discover com-plex patterns that satisfy the desired structural constraints, rather than predefining specific patterns to analyze (e.g. in [7, 13]). Lastly, we evaluate the interestingness of LF-rules with respect to the entire network by means of their sup-port, expected support and confidence. Our study serves as a macro-level analysis of local structures, and complements micro-level analysis on pattern occurrences (e.g. [7]).
The remainder of this paper is organized as follows. Sect. 2 formally describes our problem definition. Sect. 3 briefly in-troduces the mining principles of gSpan , and details the de-sign and implementation of our LFR-Miner algorithm. Sect. 4 describes the computation of expected support. Sect. 5 presents our empirical study on real-world datasets. Sect. 6 describes related work, and finally in Sect. 7, we conclude and outline possible extensions of this work.
 Notation Description
In this section, we describe relevant preliminary concepts and introduce Link Formation patterns (LF-patterns) as well as Link Formation rules (LF-rules). We then formally define the LF-rule mining problem.
We represent a social network as a directed , labeled and time-stamped graph, written as G =( V, E, L, l, T, t ). V is a set of vertices/nodes representing individuals in the network. E is a set of directed links/edges representing relationships between individuals. An element ( u, v )  X  E ,where u, v  X  is an edge from u to v . L is a finite set of node and edge labels. l : V  X  E  X  L assigns labels to elements in V and E . t : E  X  T is a mapping between edges and their timestamps. Without loss of generality, we represent timestamps as T = { t | i  X  0 } , such that  X  t i ,t j  X  T, t i &lt;t j iff i&lt;j . A graph may evolve with new nodes and edges joining at different time points. G can be viewed as a snapshot of the network taken at a certain time point t n , such that G contains nodes and edges that were formed at or before t n . We assume that edges once formed are not removed.

Table 1 summarizes other notations used in our discus-sions. For a given graph G , the geodesic distance from u to v , denoted by  X  ( u, v ), is the number of edges in the shortest path from u to v .  X  ( u, v )and  X  ( v, u ) may not be equal since G is directed.  X  ( u, v )=+  X  if there is no path from u to v .
We study link formation from a focal node s , called the start node, to another node e , called the end node, as a post-condition of existing connections between s and e .Givena link ( s, e ), we assume that s is the creator or sender of the link, as this is often the case in directed social networks such as Epinions X  web of trust. Further, we are only interested in patterns that are connected or weakly connected, i.e., there exists a path between any two nodes in the pattern, omitting link directions. This is reasonable since we seek to find the structures connecting s and e that may lead to the formation of a new link from s to e .

We use the patterns in Fig. 2 and the graph in Fig. 3 as the input graph G as examples throughout this section. For simplicity, all edges in our sample patterns and G carry the same label of  X 1 X , which is omitted in their graphical representation. Nodes marked with s and e in our patterns correspond to the start and the end nodes respectively, while those unlabeled are intermediaries.
 Link Formation Pattern. A LF-pattern encodes struc-tural constraints on the nodes it contains. This work focuses on patterns containing dyadic and triadic structures among groups of nodes as noted. Furthermore, a LF-pattern im-Figure 2: Examples of LF-patterns. s and e denote the start node and the end node respectively.
 Figure 3: The sample input graph G . For simplicity, all edges in this graph have the same label, which is omitted in the graph. t i denotes timestamp of edge creation. t i &lt;t j iff i &lt; j . plicitly encodes the temporal constraint that the link ( s, e ) is formed after all other links in the same pattern. Formally, a LF-pattern is defined as follows:
Definition 1 ( Link Formation Pattern) . ALinkFor-mation pattern, or LF-pattern, is a 4-tuple: p =( V p ,E p where V p is a set of vertices, E p is a set of edges, L is a finite set of labels, and l p : V p  X  E p  X  L assigns labels to elements in V p and E p . V p contains (i) a special subset S p = { where s and e are respectively called the start node and the end node of p ; (ii) a set of intermediaries I p between s and e . I p = V p \S p , and it may be an empty set ( I p =  X  theedgeset E p ,eachelement( u, v ) is a directed edge from u to v , u = v ,and( s, e )  X  E p . E p captures the connec-tivity among nodes in V p , such that either of the following conditions is true: 1. If I p =  X  ,then  X  u, v  X  X  p , X  ( u, v )=  X  ( v, u )=1 . 2. If I p =  X  ,then  X  u  X  X  p ,v  X  X  p , min(  X  ( u, v ) , X  ( v, u )) =
Condition 1 means that if V p contains only s and e ,thetwo nodes must be connected to each other to form a LF-pattern. Condition 2 requires every in termediary to be connected to both s and e , in any direction. Other than Conditions 1 and 2, we allow additional edges to be included in the pattern. Referring to Fig. 2, p 1 satisfies Condition 1, and p 2 to p satisfy Condition 2. Every LF-pattern is at least weakly connected by definition.

Definition 2 ( Isomorphism of LF-patterns) . An iso-morphism from a LF-pattern p to another LF-pattern q is a bijective function f : V p  X  V q , such that the following conditions are met: 1.  X  u  X  V p ,l p ( u )= l q ( f ( u )) . 2.  X  ( u, v )  X  E p , ( f ( u ) ,f ( v ))  X  E q ,and l p ( u, v )= l 3. f ( p.s )= q.s and f ( p.e )= q.e .
 A subgraph isomorphism from p to q is an isomorphism from p toasubgraphin q . p is a sub-pattern of q only if there exists a subgraph isomorphism from p to q , denoted by p  X  q . q is cal led a super-pattern of p .

Condition 3 above is specific to LF-patterns. Under this condition, p and q are treated as different LF-patterns if the special nodes s and e in the (subgraph) isomorphism from p to q have been changed.

Example 1. In graph terms, there exists a subgraph iso-morphism from p 1 to p 3 . In such an isomorphism, however, either node s or e in p 1 will be mapped to the intermediary in p 3 , violating Condition 3 above. Similarly, p 2 and p isomorphic in graph terms if we ignore the special nodes s and e , but are considered different LF-patterns. The ratio-nale behind this becomes obvious if we take away the ( s , e ) link from the two patterns: they encode different connectivity between s and e before the ( s , e )linkisformed.

Based on the assumption that an edge is formed by its sender, we propose the notions of ego-based occurrence and frequency of a given LF-pattern in a graph G :
Definition 3 ( Ego-based Occurrence) . Given a fo-cal node w , known as the ego, in a graph G ,anego-based occurrence, or simply occurrence, of a pattern p is a subgraph  X  p in G that is isomorphic 1 to p , such that  X  p.s = w ,andthe isfies the following temporal constraint: We write the set of ego-based occurrences of p having w as its start node as  X  p w .If |  X  p w | &gt; 0 , we say that p occurred w.r.t. w , and that w supports p .

Example 2. Consider p 1 and its occurrences in G .It is obvious that p 1 did not occur w.r.t. egos B and D . p occurred w.r.t. ego A ,with  X  p 1 .s = A and  X  p 1 .e = E . p occurred w.r.t. ego C ,with  X  p 1 .s = C and  X  p 1 .e = A .We cannot find an occurrence of p 1 w.r.t. ego E :ifwetake A as node e , then we have t ( E, A ) &lt;t ( A, E ) , which violates the temporal constraint above. p 1 therefore occurred w.r.t. egos A and C only.

After determining  X  p w for all nodes w  X  V in G ,wecan compute the ego-based frequency of p as follows:
Definition 4 ( Ego-based Frequency) . Given p ,and the set of  X  p w for all nodes w  X  V in G ,let: The ego-based frequency, or simply frequency, of p in G is given by: Example 3. Referring to Example 2, freq ( p 1 ,G )= 2.
In other words, freq ( p, G ) is the number of distinct nodes that acted as the start node of p at least once in G . This ego-based frequency measure is anti-monotone, such that given p and q ,if p  X  LF q , then the frequency of p will always be equal to or higher than that of q .

Property 1. Given two LF-patterns p and q ,if p  X  LF q , then freq ( p, G )  X  freq ( q, G ) .
The term  X  X somorphic X  here shall not be confused with Def-inition 2: here, the subgraph  X  p that is isomorphic to p is an actual occurrence of p in G , whereas Definition 2 is about isomorphism of LF-patterns.
Proof. We first point out that if  X  q occurred w.r.t. an ego w ,then  X  q contains at least one occurrence of p w.r.t. w since p  X  LF q .Given  X  p occurred w.r.t. w , however, does not necessarily imply that an occurrence  X  q that contains  X  p also occurred w.r.t. w . Now, let X  X  consider p 1 and p where p 1  X  LF p 2 ,and p 1 occurred w.r.t. egos A and C as discussed. We try to extend occurrences of p 1 to obtain those of p 2 . p 1  X  X  occurrence w.r.t. ego A can be extended to an occurrence  X  p 2 by taking D as the intermediary in p 2 case, we can ensure that  X  ( p 2 ,A )=1=  X  ( p 1 ,A ) based on Definition 4. p 1  X  X  occurrence w.r.t. ego C , however, cannot be extended to obtain an occurrence of p 2 :ifwetake B as the intermediary, then t ( C, A ) &lt;t ( C, B ), which violates Definition 3. In this case, we have  X  ( p 2 ,C )=0 &lt; X  ( p
We now conclude our proof. Given that p  X  LF q ,for every ego w with |  X  p w | &gt; 0, if  X   X  p,  X  p  X   X  p w be extended to  X  q ,then |  X  q w | &gt; 0and  X  ( q, w )=  X  ( p, w )=1. Otherwise, |  X  q w | =0,thus  X  ( q, w )=0and  X  ( q, w ) &lt; X  ( p, w ). Since  X  ( p, w )  X   X  ( q, w ), after summing up  X  ( q, w ) for all egos, we have freq ( p, G )  X  freq ( q, G )if p  X  LF q . Link Formation Rule. We can view the link ( s, e )inaLF-pattern p as the postcondition of the connections between s and e captured in E p \{ ( s, e ) } ,whichwecallthe precondition of p . We formalize such pre-and post-conditions of link formation as a Link Formation rule (LF-rule).

Definition 5 ( Link Formation Rule) . TheLinkFor-mation rule (LF-rule) of a LF-pattern p is defined as r ( p )= p a  X  p . p a is cal led the precondition of r ( p ) , with the vertex set V p a = V p ,andedgeset E p a = E p \{ ( s, e ) } .Theedge ( s, e )  X  E p is called the postcondition of r ( p ) .
We adopt the support-confidence framework to quantify the frequency and significance of a LF-rule r ( p )in G .The support of r ( p ) is the proportion of nodes in G w.r.t. which p occurred. The confidence of r ( p ) is the likelihood that ( s, e )existsgiventhat p a exists. It takes into account the frequency of p a in G .Notethat p a is not a valid LF-pattern due to the missing ( s, e ) link. Yet, we can still obtain its ego-based occurrences and frequency by viewing missing links in G as links that may emerge in the future. Conceptually, we may let the timestamp of a missing ( s, e ) link be +  X  ,so that an occurrence of p a will satisfy Definition 3. We now define the support and confidence of a LF-rule. We overload the notation freq ( p a ,G ) to denote the frequency of p
Definition 6 ( Support of LF-Rule) . The support of aLF-rule r ( p ) in a graph G is defined as:
Definition 7 ( Confidence of LF-Rule) . The confi-dence of a LF-rule r ( p ) in a graph G is defined as:
Example 4. Table 2 shows the LF-rule generated from p , and reports its support and confidence in G . G has 5 nodes, therefore | V | =5. p 2 occurred w.r.t. ego A only, therefore supp ( r ( p 2 )) = 1/5. p a 2 occurred w.r.t. egos A, C, E . Therefore, freq ( p a 2 ,G ) =3,and conf ( r ( p 2 )) = 1/3. Problem Definition. Given a directed, labeled, time-stamped graph representing a social network, a support thresh-old, and a confidence threshold, mine LF-rules that satisfy the given support and confidence thresholds. For trade-off between computational effort and the expressiveness of the mined rules, users could impose a limit on the size of the mined rules, in terms of maximum of nodes in each rule.
We develop our LF-rule mining algorithm, or LFR-Miner , by extending gSpan , a state-of-the-art subgraph mining al-gorithm based on Depth-First Search (DFS)[17, 18]. Our extensions address two major issues. Firstly, gSpan oper-ates on a database of undirected graphs , but we work with a single directed graph. We thus extend the mining principles in gSpan to consider edge directions in LFR-Miner .Further-more, the notion of ego we introduced to LFR-Miner essen-tially serves the purpose of a graph transaction in gSpan  X  X  setting. While gSpan enumerates a pattern X  X  occurrences in graph transactions to obtain its frequency, we enumerate the occurrences of it w.r.t. egos (nodes). Secondly, gSpan mines for all frequent patterns in the given graph database, while we are interested in LF-patterns, and intermediate patterns that can be grown into LF-patterns. We therefore exploit the structural constraints of LF-patterns and the properties of gSpan  X  X  pattern growth strategy to prune patterns that cannot be grown into LF-patterns.
 Another issue we have to address is the representation of LF-patterns. Our representat ion should allow easy enumer-ation of ego-based occurrence, which imposes a temporal constraint on the ( s, e ) link. It should also allow us to dis-tinguish between different LF-patterns that are topologically identical in graph terms.

We now give a brief overview of gSpan , and refer interested readers to [18, 17] for detailed descriptions. We then discuss the above issues and present our LFR-Miner algorithm. Pattern Representation by DFS Code. Given a pat-tern p , gSpan applies DFS subscripting to all nodes in p to encode the order in which they are traversed in a certain DFS tree. For two  X  X FS subscripted X  nodes v i and v j , i&lt;j iff v i is traversed before v j . Given a DFS tree, the first and the last nodes traversed are called the root and the right-most vertex respectively. A DFS traversal aims to traverse all nodes in p , and doing so may not require visiting all edges in p . An edge that is visited is called a forward edge , while one that is not visited a backward edge . The path from the root to the rightmost vertex, built upon forward edges, is called the rightmost path .

Every DFS tree of p canbemappedtoaDFScode,which comprises a DFS edge sequence . Each DFS edge corresponds to one edge in p . gSpan was designed to handle undirected graphs, but as mentioned in [19], a DFS edge with direction can be modeled as a 6-tuple: i, j, l i ,l ( i,j ) ,l j ,d j are DFS subscripts. The tuple represents a forward edge if i&lt;j , and a backward edge otherwise. l i and l j are the Table 3: DFS codes of p 2 and p 3 with s as v 0 , e as v 1 An asterisk (  X  ) denotes an empty label.

Edge p 2 ( a ) p 3 ( a ) p 3 ( b ) node labels of v i and v j respectively, l ( i,j ) is the edge label, and d ( i,j ) captures edge direction. We write d ( i,j ) the edge points from v i to v j ;and d ( i,j ) =  X  otherwise. gSpan defines a linear DFS lexicographic order among all DFS codes, determined based on the lexicographic order among DFS edges (details in [18, 17]). We extend such an order to include edge directions. We define  X  D to be the lexicographic order among d ( i,j )  X  X , and d ( i,j ) =  X  graphically smaller than d ( i,j ) =  X  .  X  D is essential in ex-tending gSpan to directed graphs: when two DFS edges have the same values of i, j, l i ,l ( i,j ) ,l j but different directions , is used to determine their lexicographic order.
 Minimum DFS Code &amp; Rightmost Extension. Apat-tern p can be represented by multiple DFS codes when there exist multiple DFS trees of it. gSpan defines the canonical label of p as its minimum DFS code , as determined by the DFS lexicographic order. Two patterns p and p are isomor-phic iff they have the same minimum DFS code. As proven in [18], minimum DFS codes can only be grown from another minimum DFS code by rightmost extension . The essence of this is that non-minimum DFS codes can be pruned while guaranteeing the completeness of mining results. gSpan starts mining with a frequent 1-edge pattern g (in DFS code representation). It then iteratively grows g into larger patterns in the DFS lexicographic order, by perform-ing rightmost extension on it and its children that are mini-mum DFS codes. A child pattern c of g is formed by adding oneedgeto g . Rightmost extension states that for c to be a valid DFS code, a backward edge can only grow from the rightmost vertex of g , while a forward edge can grow from vertices along the rightmost path [18].
Our DFS code representation of a LF-pattern always takes s as v 0 and e as v 1 ,thus X  X orcing X  X he( s, e ) edge to be the first DFS edge. For example, p 2 has one DFS code, denoted by p 2 ( a ) in Table 3. p 3 has two possible DFS codes, denoted by p 3 ( a )and p 3 ( b ) in the table, and p 3 ( a ) is smaller than p ( b ) due to  X  D . Note that our representation does not affect the correctness of minimum DFS code computation as all possible DFS codes are built in the same way.
The importance of our DFS code representation is three-fold. Firstly, it allows us to differentiate LF-patterns that are topologically identical, such as p 2 and p 3 .Using gSpan  X  X  original representation, p 3 ( a )and p 3 ( b ) will be pruned as their minimum form is p 2 ( a ). Secondly, it naturally cap-tures the notion of ego in our work. Since v 0 corresponds to node s ,everymatchfor v 0 in the actual graph is essen-tially an ego that supports the LF-pattern represented by the code. Lastly, by capturing the ( s, e ) link in the first DFSedge,wecanobtainthetimestamp t (  X  p.s,  X  p.e )oncewe start to enumerate an occurrence  X  p .Asweaddmoreedges to  X  p , we only need to consider those with timestamps smaller Figure 4: Patterns that cannot be grown into LF-patterns. Shaded nodes are disallowed to further connect to v 0 and/or v 1 by rightmost extension. than t (  X  p.s,  X  p.e ). Our representation therefore facilitates the process of enumerating LF -pattern occurrences.

To represent a precondition p a , we still take s as v 0 to construct the minimum DFS code of p a , but no longer fix e as v 1 since p a has no ( s, e ) link. Furthermore, we can ignore the temporal o rder among edges in p a when finding its occurrences in our implementation.
We would like to consider only LF-patterns, and interme-diate patterns that can be grown into LF-patterns in LFR-Miner . A naive approach to achieve this is to directly adopt gSpan  X  X  rightmost extension to obtain all frequent patterns as intermediate results, and t hen extract LF-patterns from them in a post-processing step. This approach is, however, undesirable as we would need to process invalid patterns that can never be grown into LF-patterns. Recall that Condition 2 in Definition 1 requires every intermediary to connect with both s ( v 0 )and e ( v 1 ). By exploiting this constraint and the properties of rightmost extension, we identify the following three cases where growing a DFS code c by a DFS edge z will produce a code (pattern) in which an intermediary is disallowed to connect with v 0 and/or v 1 . We can therefore prune such a code (i.e. we do not need to grow c by z ).
Case 1: If z =( v 0 ,v n )and n&gt; 1, then adding z to c will always exclude v 1 from the rightmost path. As a result, v will be disallowed to connect to v 1 by rightmost extension. We therefore do not need to grow c by z . Fig. 4(a) illustrates this case, in which v 2 is disallowed to link to v 1 .
Case 2: If z =( v m ,v n )and1  X  m&lt;n , then we check if all nodes in { v k | 1 &lt;k&lt;n } , if any, are connected with both v and v 1 in c . If not, we do not need to grow c by z .This is because after adding z to c to form a new DFS code c , v will become the rightmost vertex of c . Rightmost extension will disallow any node in { v k | 1 &lt;k&lt;n } to link to v in any child of c . In Fig. 4(b), for example, v 2 is disallowed to link to v 0 since v 3 is the rightmost vertex.

Case 3: If z =( v n ,v m )and2  X  m&lt;n ( z is a backward edge), we check if v n is connected with both v 0 and v 1 c . If not, we do not need to grow c by z to form c .The reason is that the two backward edges ( v n ,v 0 )and( v n are lexicographically smaller than z . They will therefore be disallowed to exist in any child of c ,sothat v n will not be able to link back to v 0 and v 1 . Fig. 4(c) illustrates this case.
In summary, LFR-Miner adopts the principles of rightmost extension for pattern growth, but prunes invalid patterns by addressing the above cases. We evaluate the amount of computational effort saved by the pruning, and more impor-tantly, the completeness of our results in Sect. 5.4.
We now describe the implementation of our LF-rule min-ing algorithm, LFR-Miner . In what follows, the term  X  X at-tern X  or  X  X ule X  means one in our DFS code representation.
LFR-Miner takes as input a graph G , a support threshold ( minS ), a confidence threshold ( minC ),andanoptional parameter that specifies the maximum number of nodes in a pattern ( maxV ). Algorithm 1 gives the overall flow of LFR-Miner . Similar to gSpan , it starts mining with 1-edge patterns, each of which corresponds to a ( s, e ) edge (line 3). It then invokes the MineRules procedure in Algorithm 2 to mine for larger patterns in DFS lexicographic order (lines 5-7). Given a pattern p , MineRules invokes the enumeration engine in Algorithm 3 to enumerate the occurrences of p to find the supporting egos of its valid children. Each frequent pattern is recursively grown in MineRules until all its possible valid children have been discovered. Further, LF-rules are generated from frequent LF-pa tterns. Those that satisfy the minC constraint are produced as output. We now detail Algorithms 2 and 3.
 Algorithm 1 LFR-Miner ( G, minS, minC, maxV ) Input :Graph G , minimum support minS , minimum Output :LF-rules R . 1: minSCnt = minS  X | V | ; 2: R  X  X  X  ; 3: S 1  X  all frequent 1-edge patterns in G ; 4: sort S 1 in lexicographic order; 5: for each p in S 1 do 6: p.W  X  supporting egos of p in G ; 7: MineRules ( p, minSCnt, minC, maxV, R ); 8: return R ; Algorithm 2 MineRules ( p, minSCnt, minC, maxV, R ) Input : p , minSCnt , minC , maxV ,LF-rules R .
 Output : LF-rules mined from p . 9: Q = GrowAndEnumerate ( p, minSCnt, maxV ); 10: for each q  X  Q do 11: if | q.W | X  minSCnt then 12: if q is a LF-pattern then 13: generate r ( q ); 14: if conf ( r ( q ))  X  minC then 15: add r ( q )to R ; 16: MineRules ( q, minSCnt, minC, maxV, R ); MineRules starts by passing the input pattern p to the GrowAndEnumerate procedure to obtain a set of child pat-terns Q . Each returned child q  X  Q is associated with its set of supporting egos ( q.W ). A frequent q is further pro-cessed as follows. If q is a LF-pattern, MineRules generates its LF-rule r ( q ) by constructing the minimum DFS code of q ,counting freq ( q a ,G ), and then computing conf ( r ( q )). It is obvious that the supporting egos of q also support q a we only need to try enumerating occurrences of q a w.r.t. nodes that do not support q and calculate freq ( q a ,G ). If r ( p ) satisfies the confidence threshold, then it is included in the output R (lines 12-15). At line 16, each frequent q is recursively grown by MineRules , until all of its children have been processed. Infrequent patterns are not further pro-cessed because their super-patterns must also be infrequent given Property 1.

Algorithm 3 describes the enumeration engine GrowAndE-numerate . It takes an input pattern p , determines its valid Algorithm 3 GrowAndEnumerate ( p, minSCnt, maxV ) Input : A pattern p , minSCnt , maxV .
 Output Children patterns Q grown from p . 17: Q  X  valid children of p that are minimum DFS codes; 18: if Q is empty then 19: return as p has no valid children; 20: set cnt = | p.W | ; //no. of nodes to be processed in p.W 21: for each w in p.W do 22: repeat: 23:  X  p = the next occurrence of p w.r.t. w ; 24: for each q  X  Q ,  X  q can be found given  X  p do 25: q.W  X  q.W  X  X  w } ; 26: if  X  q  X  Q , w  X  q.W then 27: break ;// skip to line 29 28: until all p  X  X  occurrences in w have been enumerated; 29: reduce cnt by 1; 30: remove all q  X  Q with | q.W | + cnt &lt; minSCnt ; 31: if Q is empty then 32: return as p has no frequent children; 33: return Q ; children Q , enumerates the occurrences of p , and based on which it tries to find the occu rrences of all children in Q to determine their supporting egos. Potential children of p are generated based on our rightmost extension strategy with pruning, in DFS lexicographic order. A generated child c is valid if: (i) its number of nodes is at most maxV ,ifspec-ified; and (ii) it is a minimum DFS code. The procedure returns if p has no valid child (lines 18-19).

Lines 21 to 27 show the steps for enumerating the occur-rences of p w.r.t. its supporting egos ( p.W ),basedonwhich occurrences of its children are discovered. For each w in p.W , line 23 enumerates  X  p , the next ego-based occurrence of p . Then, for each q whose occurrence(s) can be found based on  X  p , lines 24-25 record w as q  X  X  supporting ego. Note that we may not have to enumerate all occurrences of q w.r.t. w : only one occurrence is enough to conclude |  X  q w | &gt; 0. Lines 26-27 therefore state that we can stop processing w if all possible children in Q have already been discovered at least once w.r.t. w . Otherwise, the enumeration continues until all occurrences of p w.r.t. w have been processed (line 28).
Line 30 implements an early and safe pruning. It prunes a child q whose frequency upper bound is less than the thresh-old minSCnt , such that q and its possible children are guar-anteed to be infrequent. At any given w , the frequency upper bound of q is given by the sum of q  X  X  observed fre-quency ( | q.W | ) and the number of unprocessed egos in p.W (maintained by the counter cnt ). Line 31 then checks if any child still remains in Q after this early pruning. If not, the GrowAndEnumerate procedure returns. Otherwise, it contin-ues to process the next ego.
We introduce the notion of expected support of LF-rules to account for the extent to which they may exist by chance. We first point out that analogous notions regarding pattern occurrences exist in the literature. Sociology researchers proposed various statistical methods for estimating triad census (e.g. [16, 3]), but such methods do no consider the temporal order of links. The study in [13] derived an ap-proximation for the expected fraction of links that exhibit directed closure in a network. Apart from statistical approx-Figure 5: Swapping the destination of edges. (a) is successful if the new graph does not contain (C,D) and (E,B). (b) will fail due to the self-loop (A,A). imation, another approach is to compute such expected val-ues from randomized networks that preserve certain nodal properties of a given real network [11, 15]. For instances, the studies in [7, 13] shuffled the timestamps in a network for counting expected pattern occurrences.

Recall that support reflects the proportion of nodes acted as the start node of a LF-rule at least once in a network, but not the total number of occurrences of its corresponding LF-pattern. As such, the aforeme ntioned statistical approx-imation methods are not suitable for estimating expected support. We devise the following method for randomizing a graph, based on which the expected support of a rule is computed according to the notion of ego-based frequency. Given an input graph G ,let G = G . For each edge in G , we randomly pick another edge in it and try to swap the end nodes of the two edges. If swapping would result in self-loops or duplicated edges in G , we discard the swapping, and retry with another randomly picked edge. Otherwise, we swap the end nodes of the two edges and update G accordingly. Fig. 5 illustrates the swapping of edges. The randomized G preserves the degree, label and timestamp distributions of G . We define the expected support of a LF-rule r ( p )given G , denoted by supp ( p ), as its support in G . We further define the surprise value of the rule, denoted has a higher-than-expected support given G . The higher the surprise value of a rule, the more interesting it is. Note that we do not consider the expected confidence of r ( p ), as confidence is dependent upon another pattern p a .
As opposed to the randomization method in [7, 13], our method does not change the time points at which a node established links to other nodes in the original graph. If link formation does follow some rules, then we shall expect such rules to have higher support in the actual graph than in the graph with randomized destinations of links.
We applied LFR-Miner to two real-world datasets and re-port empirical findings in this section. Our objective is to discover interesting rules governing link formation in real-world social networks. We do not aim to study LFR-Miner  X  X  computational efficiency as its mining principles are based on gSpan . In what follows, we first describe our datasets, and then analyze some of the interesting LF-rules discov-ered. We also evaluate the pruning strategies incorporated into the rightmost extension of LFR-Miner .
Our two datasets, namely Epinions 2 and myGamma 3 , contain directed and time-stamped edges with two edge la-http://www.trustlet.org/wiki/Extended Epinions dataset http://www.buzzcity.com/f/mygamma bels, described as +ve and -ve edges/links. They are in-teresting for our study as Epinions represents a more formal network where users rely on others to find trustworthy infor-mation (product reviews), whereas myGamma is for social networking purpose with many informal links. We summa-rize dataset statistics in Table 4.

The Epinions dataset contains trust ( +ve )and distrust ( -ve ) links. About 69% of links come with an initial timestamp of 2001/01/10 ( t 0 ), which represents all timestamps on or prior to t 0 . The formation date and order of all links formed after t 0 are known. As temporal information is important in our work, we discarded a link ( u, v ) with timestamp t 0 both u and v were involved in at least one link formed after t . We also removed 577 erroneous self-assignment links as they are not permitted in Epinions. Note that one X  X  -ve links are not visible to others in Epinions. Hence, the likelihood of a user retaliating another user with a -ve link is low.
Our myGamma dataset consists of a friendship network with friend ( +ve )and foe ( -ve ) links. We are given the formation order of links. In myGamma, a user u is not fully aware of the foe list of another user v , unless u finds her messages to v rejected due to u being in the foe list of v . Since not many users may realize such message blockage, the likelihood of foe link retaliation should also be low.
Our study focuses on analyzing LF-rules in real datasets, rather than optimizing mining parameters for any specific dataset. We therefore applied LFR-Miner to both datasets with a reasonably low minS of 0.01, minC of 0 (for analysis purpose), and a maxV of 5 as in [15].

We generated 10 randomized graphs for each dataset to compute the expected support and surprise values of LF-rules. We observed consistent qualitative results across all randomized graphs for both datasets. Specifically, every r ( p ) has an actual support that is either higher than or lower than expected in all 10 randomized graphs of a specific dataset. We report the average expected support and surprise values of rules computed from the 10 randomized graphs.
We now analyze some interesting LF-rules. We only present rules with surprise values above 1.1 (i.e. occurred 10% more frequently than expected), although those with low surprise values may also worth studying. For better readability, we represent a LF-rule graphically by its corresponding LF-pattern, in which solid arrows and dashed arrows denote +ve and -ve edges respectively. We assign an ID to every rule in the form of R n to aid our discussions.

Fig. 6(a) depicts interesting basic dyads and triplets, which are the building blocks of LF-patterns. Fig. 6(b) presents 20 rules (due to space constraint) combining a triplet and reciprocal edges with high surprise values. We also mined a large set of rules with multiple intermediaries between s and e , since we used very low support and confidence thresh-(b) Top-20 rules containing a triplet and reciprocal edges with the highest surprise values.
 olds for mining. We manually examined our result set and present 9 of them in Fig. 6(c) for discussions. In Fig. 6(c), we use a bidirectional arrow to denote mutual links having the same label, except for those between s and e ,forbet-ter readability. Tables 5 and 6 report the interestingness scores of the LF-rules in Epinions and myGamma respec-tively. Each table only includes rules that are interesting in the corresponding dataset. We sort rules by their IDs, and assign ranks to them based on descending order of support values for easy comparison.
We first observe that our two datasets share the same top-4 LF-rules in terms of support, with R 5 (common trustee) topping both lists. Yet, the same rule can obtain very dif-ferent surprise values in the two datasets. An example is R (reciprocity), whose surprise value is 20.06 in myGamma and 7.76 in Epinions. Considering support, surprise and confi-dence values of rules collectively, results seem to suggest that R 1 is the most prevalent LF-rule in both datasets. Note that LF-rules generally have lower support in Epinions than in myGamma, partially caused by the incomplete timestamp information in Epinions.

LF-rules containing -ve links are uncommon, especially for those with more than 3 nodes. This is partially due to the skewed label (sign) distributions in the data. Although Epinions has a much larger proportion of -ve links, R 2 to R 4 are frequent only in myGamma. Among these rules, R 3 ID supp ( R n ) supp ( R n ) conf ( R n ) sur ( R n )Rank R 1 0.1172 0.0151 0.2234 7.76 4 R 5 0.1499 0.0985 0.2364 1.52 1 R 6 0.1489 0.0987 0.2439 1.51 2 R 7 0.0857 0.0678 0.2069 1.26 9 R 8 0.0259 0.0168 0.1884 1.54 28 R 9 0.0201 0.0152 0.0692 1.32 29 R 11 0.1259 0.0358 0.2224 3.52 3 R 12 0.0871 0.0164 0.3398 5.32 8 R 13 0.0787 0.0325 0.2018 2.42 10 R 14 0.0769 0.0142 0.3 5.42 11 R 15 0.0702 0.0066 0.2891 10.65 13 R 16 0.0662 0.0129 0.2837 5.13 14 R 17 0.0559 0.0121 0.2889 4.62 15 R 18 0.0551 0.0133 0.285 4.15 16 R 19 0.0542 0.0117 0.3011 4.63 17 R 20 0.051 0.0046 0.3087 11.04 19 R 21 0.0513 0.006 0.3001 8.61 18 R 22 0.0489 0.007 0.3177 7.04 20 R 23 0.0473 0.0046 0.3206 10.26 21 R 24 0.0439 0.0017 0.3219 25.23 22 R 25 0.0174 0.0031 0.0944 5.54 30 R 26 0.0131 0.0027 0.3065 4.89 32 R 27 0.0132 0.003 0.2691 4.41 31 R 28 0.0127 0.0018 0.2621 6.94 33 R 29 0.0111 0.0025 0.0455 4.51 35 R 30 0.0111 0.0018 0.2629 6.24 34 R 31 0.0972 0.0602 0.3244 1.61 5 R 32 0.0947 0.0579 0.3136 1.64 6 R 33 0.0924 0.0575 0.3153 1.61 7 R 34 0.0728 0.0425 0.3328 1.71 12 R 35 0.0304 0.0002 0.3552 152 26 R 36 0.0365 0.003 0.305 12.17 23 R 37 0.0356 0.0025 0.3455 14.24 24 R 38 0.0292 0.0004 0.3319 73 27
R 37 0.0346 0.0002 0.3534 173 25 captures a particularly interesting situation where s recip-rocates a +ve link from e with a -ve link. This can be due to  X  X nwanted friendships X  in myGamma as users block some other users who try to establish friendships to them. In Epinions, unwanted trustors is not an issue. Note that R and R 4 , among others, violate structural balance [2], which is the case when the product of edge signs in a group is +ve .
Another interesting observation is that mutual +ve links, which are consequences of reciprocity, between s and an in-termediary are more important than those between an in-termediary and e .Consider R 11 and R 12 ,aswellas R 13 and R 14 as examples. R 12 (resp. R 14 ) contains mutual links between s and an intermediary. Its confidence and surprise values in both datasets are significantly higher than those of R 11 (resp. R 13 ), in which the intermediary has mutual +ve links with e but not s . Furthermore, adding another link between e and the intermediary to R 12 and R 14 , resulting in R 15 , does not raise the confidence of link formation. The same observation can be made from rules R 20 to R 24 ,and R 36 to R 38 . It suggests that users rely more on mutually trusted friends in forming new links in social networks.
The last observation is about LF-rules containing multi-ple triads. R 32 and R 33 represent cases in which s forms a link to e based on double occurrences of the same precondi-ID supp ( R n ) supp ( R n ) conf ( R n ) sur ( R n )Rank R 1 0.2437 0.0122 0.3198 20.06 4 R 2 0.0336 0.0017 0.0442 19.76 28 R 3 0.0345 0.0001 0.1573 345 29 R 4 0.0138 0.001 0.0628 13.8 33 R 5 0.2891 0.2241 0.4322 1.29 1 R 6 0.2838 0.2237 0.431 1.27 2 R 7 0.2055 0.1149 0.2752 1.79 5 R 8 0.0176 0.0121 0.1207 1.45 32 R 10 0.0212 0.0144 0.0339 1.47 30 R 11 0.2542 0.1354 0.3915 1.88 3 R 12 0.1814 0.0133 0.4715 13.65 10 R 13 0.1901 0.0814 0.2577 2.34 8 R 14 0.1749 0.0122 0.4547 14.35 11 R 15 0.1613 0.01 0.4221 16.13 12 R 16 0.1202 0.0108 0.3881 11.17 14 R 17 0.1136 0.0094 0.3951 12.03 16 R 18 0.1157 0.0106 0.4027 10.88 15 R 19 0.1065 0.0097 0.3902 10.98 17 R 20 0.095 0.0028 0.4258 33.45 20 R 21 0.0983 0.0082 0.3807 12.05 19 R 22 0.0997 0.0077 0.4188 12.91 18 R 23 0.0902 0.0028 0.4268 32.45 21 R 24 0.083 0.0022 0.4202 37.39 22 R 25 0.0127 0.0003 0.0381 42.33 36 R 27 0.0131 0.0017 0.2182 7.75 35 R 28 0.0135 0.0004 0.2119 33.75 34 R 29 0.0196 0.0019 0.0513 10.48 31 R 30 0.0127 0.0004 0.2082 30.98 37 R 31 0.1941 0.1491 0.4328 1.30 6 R 32 0.1931 0.1484 0.419 1.30 5 R 33 0.1837 0.1566 0.4397 1.17 9 R 34 0.1525 0.1104 0.4221 1.38 13 R 35 0.0575 0.0013 0.3677 44.57 24 R 36 0.057 0.0065 0.3225 8.78 25 R 37 0.0548 0.0014 0.3794 39.42 26 R 38 0.0448 0.001 0.3645 44.8 27
R 37 0.0665 0.0022 0.4697 30.65 23 tion. In both datasets, about two-third of users who support R 5 also support R 32 , and similar for R 6 and R 33 4 .Almost half of the users who support R 5 also support R 34 ,whose precondition is a triple occurrence of R 5  X  X . These examples show that if a user s formed a link to another user based on a certain triadic effect, then there is a good chance (about two-third in our datasets) that s also formed a link based on multiple occurrences of the same triadic effect. Such mul-tiple occurrences, however, may not raise the confidence or surprise values of the rules as our empirical results show.
Our study provides a form of empirical evidence of so-cial phenomena in online social networks. Furthermore, it serves as a macro-level analysis of local structures, to com-plement micro-level analyses that focus on counting occur-rences of particular structures. For instance, the study in [7] reported that the joint endorsement pattern, in which
This is also true for R 7 (three-cycle), but the rule contain-ing two occurrences of R 7  X  X  precondition is uninteresting in both datasets and is therefore not reported.
 Table 7: Rightmost extension in LFR -Miner and gSpan . s and e received a link from a common node, is the most abundant type of triplet in Epinions. Although we have the same finding based on ego-based occurrences, such a pat-tern is found to be uninteresting in both of our datasets in terms of surprise values. Sociology research has suggested that a user would only require limited information about the network (users with a geodesic distance of 2) when creating social ties in practice [14]. The low interestingness of the joint endorsement pattern in our study may be explained by the fact that the intermediary in the pattern is unreachable by s .

A LF-rule X  X  support reflects its  X  X opularity X  in terms of the proportion of users who ado pted that rule in the entire network. One may observe that LF-rules in general have low support values, as the highest support recorded, i.e. support of R 5 in myGamma, is only 0.2891. This, together with the fact that a LF-pattern can have hundreds of thousands of occurrences in our data, reflect that LF-rules are repeatedly practiced by a relatively small group of users.
We described in Sect. 3.3 three pruning cases to consider in rightmost extension. We now evaluate the reduction of com-putational efforts achieved by the pruning, and more impor-tantly, the completeness of our result set by cross-checking the LF-rules produced by LFR-Miner and gSpan .Ourfocus is not to study the absolute performance of LFR-Miner or to compare it with gSpan as noted.

We implemented LFR-Miner in C#, and executed our ex-periments on a Windows server machine with four 3.16GHz 64-bit processors and 24GB of RAM. To conduct this exper-iment, we prepared a version of our algorithm in which we implemented the original rightmost extension in gSpan while keeping all other parts of the algorithm unchanged. We re-port results based on the Epinions dataset. We set minS = 0 to obtain the complete set of patterns, and maxV =4as growing 4-node patterns covers all three pruning cases.
Table 7 reports the runtime, to tal number of patterns pro-cessed, and the number of LF-patterns produced using right-most extension in LFR-Miner and in gSpan .Resultsshow that we achieved about 42% reduction in runtime and pro-cessed about 29% fewer patterns in total, while producing the complete set of LF-patterns. We expect the reduction in computational effort to increase with larger values of maxV .
Our work is generally related to the rich literature of fre-quent subgraph mining, as well as link and local structure analysis in social networks. We could however describe only some studies that are particularly related to our task due to space limitation.

Berlingerio et al. [1] proposed the problem of mining graph evolution rules from a single, undirected graph. Their Graph Evolution Rule Miner (GERM) considers the temporal order among edges in rules, and aims to extract rules with arbi-trary structures. Compared to our work, the main limitation of GERM is that it cannot handle multiple edge labels.
Other researchers also presented subgraph mining approaches to extracting small graph patterns in social networks. Sto-ica and Prieur [15] described a method for enumerating and counting small induced subgraphs in the neighborhood of in-dividual nodes. Their work only handles simple undirected graphs as in GERM, but does not consider temporal in-formation. Earlier studies by Leskovec et al. adopted a similar enumerate-and-count approach to information cas-cades extraction [9, 8]. Their approach, however, suffers from over-counting of pattern occurrences, resulting in cases where patterns could have higher frequencies than their sub-patterns [9]. Our work, in contrast, rigorously defines pat-tern frequency to guarantee the correctness and complete-ness of our results.

Some studies aimed to analyze a predefined, limited class of triadic structures in social networks. For instance, Romero and Kleinberg [13] focused exclusively on directed closure (i.e. R 6 in Fig. 6(a)). The focal users they studied are the receivers of links in Twitter. This might be counter-intuitive in the study of link formation as links in many on-line social networks, including Twitter, are actively created by their senders. Leskovec et al. [7] studied contextualized links ( c-links )insocialnetworks. Theconceptsof c-link and LF-pattern are similar, but a c-link is confined to exist in subgraphs with exactly three nodes. Besides, the study in [7] focused on sign prediction based on the social theories of status and balance, while we study interesting LF-rules capturing various dyadic and triadic structures.
We introduce the task of mining interesting LF-rules, each of which captures a new link being formed from a user to an-other user as a consequence of existing connections between them. We formalize the notions of LF-patterns and their corresponding LF-rules, and propose a frequent subgraph mining approach to our task. We also apply graph ran-domization technique to identify interesting LF-rules with higher-than-expected support for analysis. We conduct an empirical study on two real-world datasets, and report major observations made from the interesting LF-rules discovered.
This paper presents LF-rules with multiple edge labels but unlabeled nodes. Studying LF-rules with node labels, which can readily be used in LFR-Miner , may uncover inter-esting structures among nodes possessing various attributes, such as users X  age groups and nationalities. Extending LFR-Miner to consider arbitrary precondition structures (as in [1]) is also possible by revising the pruning made in right-most extension. Furthermore, we would like to analyze the computational complexity of LFR-Miner in our future work.
We conclude by highlighting extensions of this work. Know-ing that some rules are particularly interesting in some net-works, and that which users supported which rules at a cer-tain time point, we are working on link prediction based on LF-rules. Another interesting extension is to study multi-graphs that capture multiple relationships between nodes. For instance, in Epinions where users can rate items and product reviews, we may analyze how trust and distrust links are formed as postconditions of interaction patterns. This remains as a promising extension of our research.
The first author is grateful to Meiqun Hu for useful com-ments that help improve this paper. We would like to thank BuzzCity for providing the myGamma dataset, and National Research Foundati on (NRF) (NRF2008IDM-IDM004-036) for funding the work. [1] M. Berlingerio, F. Bonchi, B. Bringmann, and A. [2] J. A. Davis. Clustering and structural balance in [3] K. Faust. Very local structure in social networks. [4] R.Guha,R.Kumar,P.Raghavan,andA.Tomkins.
 [5] A. Inokuchi, T. Washio, and H. Motoda. An [6] M. Kuramochi and G. Karypis. Frequent subgraph [7] J. Leskovec, D. Huttenlocher, and J. Kleinberg. Signed [8] J. Leskovec, M. McGlohon, C. Faloutsos, N. Glance, [9] J. Leskovec, A. Singh, and J. Kleinberg. Patterns of [10] P. Massa and P. Avesani. Controversial users demand [11] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. [12] V.-A. Nguyen, E.-P. Lim, H.-H. Tan, J. Jiang, and A. [13] D. M. Romero and J. Kleinberg. The directed closure [14] T. A. B. Snijders, G. G. V. de Bunt, and C. E. G. [15] A. Stoica and C. Prieur. Structure of neighborhoods in [16] S. S. Wasserman. Random directed graph [17] X. Yan and J. Han. gSpan: Graph-based substructure [18] X. Yan and J. Han. gSpan: Graph-based substructure [19] X. Yan and J. Han. CloseGraph: Mining closed
