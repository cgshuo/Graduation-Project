 Query recommendation plays a critical role in helping users X  search. Most existing approaches on query recommendation aim to recommend relevant queries. However, the ultimate goal of query recommendation is to assist users to reformu-late queries so that they can accomplish their search task successfully and quickly. Only considering relevance in query recommendation is apparently not directly toward this goal. In this paper, we argue that it is more important to directly recommend queries with high utility, i.e., queries that can better satisfy users X  information needs. For this purpose,we propose a novel generative model, referred to as Query Utili-ty Model (QUM), to capture query utility by simultaneously modeling users X  reformulation and click behaviors. The ex-perimental results on a publicly released query log show that, our approach is more effective in helping users find relevant search results and thus satisfying their information needs. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Algorithm, Experimentation, Performance, Theory Query Recommendation, Utility, Generative Model, Query Logs
Nowadays, most users leverage search engines as an impor-tant tool to accomplish various information seeking tasks, e.g., finding particular Web pages, locating target resources, or accessing information of certain topics. However, it is often difficult for users to formulate a query that can de-scribe their information needs properly, and find the right results quickly. Therefore, how to assist users to better for-mulate queries becomes a valuable and challenging problem for modern search engines.

Query recommendation has been widely recognized as a key technique to alleviate users X  reformulation burden and improve the usability of search engines. A major approach on query recommendation is relevant query recommenda-tion, which focuses on providing alternative queries similar to a user X  X  initial query. However, the ultimate goal of query recommendation is to assist users to reformulate queries so that they can acquire their desired information successfully and quickly. Only recommending similar queries, as in rel-evant query recommendation approaches, is apparently not directly toward this goal.

Therefore, in this paper, we argue that it is more impor-tant and beneficial to directly recommend queries with high utility, i.e., queries that can better satisfy users X  informa-tion needs. Formally, query utility is defined as the infor-mation gain that a user can obtain from the search results of the query according to her original search intent .Byrec-ommending high utility query, we actually emphasize users X  post-click satisfaction , i.e., whether users will be satisfied by the recommendation after clicking it. We argue that users X  post-click satisfaction reflects the true effectiveness of query recommendation.

The central challenge in our recommendation problem is how to learn the query utility according to users X  original information needs. The basic idea is that users X  collective search behaviors, especially their reformulation and click be-haviors in search sessions, embed rich information on the usefulness of queries. Therefore, we propose a novel dy-namic Bayesian network, referred to as Query Utility Model (QUM), to capture query utility by simultaneously model-ing users X  reformulation and click behaviors. By learning query utility in hand, we can provide query recommenda-tions with high utility to help users better accomplish their search tasks.

To evaluate the performance of our approach, we com-pare it with the state-of-the-art query recommendation ap-proaches based on a publicly released query log. We pro-pose two evaluation metrics, namely Query Relevant Ratio (QRR) and Mean Relevant Document (MRD), to evaluate the effectiveness of recommendations with respect to users X  post-click satisfaction. The experimental results show that, by recommending high utility queries, our approach is far more effective in helping users find relevant search results and thus satisfy their information needs.
Query recommendation plays a core role for large indus-trial search engines. Traditional query recommendation ap-proaches usually focus on relevant query recommendation [2, 3, 9, 13, 14, 16, 17, 18]. For example, Wen et al. [16] at-tempted to find similar queries by clustering queries in query logs based on both query content information and user click-through data. Beeferman et al. [2] applied agglomerative clustering algorithm over the click-through bipartite graph to identify related queries for recommendation. Zhang et al. [18] first proposed to model users X  sequential querying be-haviors as a query graph and calculate query similarity based on search sessions for recommendations. Boldi et al. [3] fur-ther introduced the concept the query-flow graph by aggre-gating the session information of users, and then performed a random walk on this graph to find relevant queries. Based on the relevance query recommendation, some researchers also proposed to take into account diversity in query rec-ommendation [15, 8, 19]. Recently, some studies consider the utility in query recommendation [11, 1], and formalize query recommendation as a problem of optimizing a global utility function. However, the utility defined in these works is largely different from ours. For example, In [11], the util-ity actually refers to the diversity of the recommendations. While in [1], the query utility is defined as the possibility that users will be satisfied by its search results, and simply calculated by its click-through rate.

Our model is inspired by the click model [4, 5, 6, 7] in We-b search ranking, and the most related work to ours is the DBN model proposed in [4]. Our approach differs from DB-N in two significant ways: (1) The problem studied and the data set are completely different. Their goal is to estimate the relevance of URLs for Web search ranking based on the search results and clicks given a query, while we consider the problem of estimating the utility of queries for query recom-mendation based on the reformulations and clicks given an initial query. (2) The model is also different. In DBN, the satisfaction event only depends on the current state, while in our case, we assume that it is dependent on all previous states.
In our work, we propose to recommend high utility queries, i.e., queries that can better satisfy users X  information need-s, to users. The major problem is how to learn the query utility according to users X  original information needs. In this section, we first take a look at a typical users X  search session to show what reveals query utility, and give the def-inition of the query utility. We then introduce a novel dy-namic Bayesian network, referred to as Query Utility Model (QUM), to capture query utility by simultaneously modeling users X  reformulation and click behaviors. Finally, we show how to estimate the parameters in our model and infer the query utility.
Here we investigate search sessions to see what makes a query useful for users according to their original information needs. A search session, or session, is defined as the sequence of submitted queries and the corresponding clicked URLs within a time limit for a particular information needs [3]. A typical search session is illustrated in Figure 1. Given some information needs, a user submits an initial query to Figure 1: A typical user search session. Tick  X  denotes a user click on a document, and red color denotes the relevance of a document. the search engine, and obtains some returned results. Here the documents 1 which are relevant to the user X  X  information needs are shown in red, otherwise in black. The user then goes through the search results, and clicks the second and third results for further inspecting (i.e., denoted by ticks before the results) as they seem to be relevant. The user obtains some useful information from the third result but is not satisfied yet. Therefore, the user reformulates the second query and submits it to the search engine. However, this time she finds no results are related and thus no clicks are performed on the results. Therefore, the third query is generated by the user. From the returned results, she finds two possibly relevant results, i.e., the first and third results, and clicks them for further inspecting. The user then accumulates enough information she needs and finishes the search process.

From the above search session, we can see that the first and third queries are useful for the user according to her original information needs. It shows that the usefulness of a query should satisfy two conditions: 1) The query X  X  search results should be attractive to the user, so that she would like to click the results for further inspecting, such as the first and third queries. If the search results do not attract the user to click, as in the second query case, the query will not be useful for the user even it contains relevant search results. 2) The clicked search results can actually satisfy the user to some extent by providing relevant information to her original needs, e.g., the first and third search results under the third query. Otherwise, the user cannot obtain any useful information after clicking, e.g., the second search result of the first query.

Based on the above analysis, we further divide the util-ity of a query into two components. One is related to the attractiveness of the query X  X  search results before the user actually inspects the contents of the corresponding URLs, referred to as perceived utility , which models the probability that users click the search results of a query given their orig-inal needs. The other is related to the satisfaction from the clicked search results, referred to as posterior utility ,which captures the actual information gain users obtain from the clicked search results given their original needs. The query utility is then defined as the product of the two components, which is the expected information gain users obtain from the search results of the query according to their original infor-mation needs.

The remaining problem is how to learn the query utility automatically. From the above search session, we can see that the problem would be quite simple if we have observed
We use the terms URL and document interchangeably throughout this paper. Figure 2: Graphical model representation of Query Utility Model. Observed click and reformulation variables are shaded. all the search behaviors from users and the exact relevance labels of the search results. However, the true relevance la-bels are not observed in real search logs, which makes such a learning problem non-trivial. Without loss of generality, here we assume that a user will be more likely to click the search results of a query if she deems the results relevan-t to their information needs. We also assume that the user will acquire some useful information if the clicked results are relevant to their information needs, and will choose to refor-mulate the next query if she has not been satisfied. Based on these assumptions, we are able to infer queries X  utility from the collective search sessions automatically.
Based on the above analysis, we now introduce a novel dy-namic Bayesian network, referred to as Query Utility Model (QUM), to learn query utility based on users X  search behav-iors. Suppose there are N search sessions starting from the same information needs , and there are a total of T distinct reformulated queries occurring in these N search sessions, denoted by q t (1  X  t  X  T ).

For a particular search session, we define four binary ran-dom variables, R i , C i , A i and S i to model reformulation, click, attractiveness and satisfaction events at the i -th refor-mulation position: where the first two events are observable from search sessions and the last two events are hidden.

Figure 2 plots the graphical model of QUM for a particular search session. The full model specification that accompa-niesFigure2isasfollows:
The above equations describe our model in the following way: The user will reformulate queries sequentially, and stop reformulation if her information needs have been satisfied. There are some clicks on the search results of a reformulat-ed query if and only if the user reformulates the query and is attracted by the search results (1). The probability of the attractiveness only depends on the search results of the reformulated query (2), which is controlled by the variable  X   X  ( i ) , i.e., the perceived utility of the query at position Note here  X  ( i ) denotes the index of the query at the posi-tion i in a search session. After the user clicks and inspects the search results, there is certain probability she will be satisfied at the current position. The probability of user-s X  satisfaction at position i depends on how much utilities she has accumulated 2 from the previously clicked search re-sults (3). Note here C 1: i denote the vector ( C 1 ,C 2 ,  X  X  X  ,C  X   X  ( i ) denotes the posterior utility of the query at position I (
C k = 1) is an indicator function, and  X  ( x ) is the logistic function, i.e.  X  ( x )= 1 1+ e  X  x . Once the user is satisfied, she will not reformulate the next query (4).
 In our model, there are two parameters  X  t and  X  t (1  X  t  X  T ) related to the utility of a query. The first one models the perceived utility, as it reflects the attractiveness of a query X  X  search results (i.e., the probability that users click the search results of the query given their original needs). The second one models the posterior utility, since it captures the sat-isfaction of a user from the clicked search results (i.e., the information gain users obtain from the clicked search result-s given their original needs). As aforementioned, we define the utility of a query as the expected information gain users obtained from the search results of the query according to their original information needs, which is the product of the two facts: u t =  X  t  X   X  t .

So far as we know, this is the first dynamic Bayesian net-work which attempts to model the query utility from users X  sequential search behaviors. To simplify our query utility model, in this work we only consider whether the search re-sults of a reformulated query have some clicks or not, but do not specify which URL has been clicked. We may fur-ther extend our utility model to capture the specific clicked URLs for finer modeling. Moreover, we take a search session terminated with a user clicking some results as a successful session, otherwise a failure. It is clear that this assumption may not be realistic since users may also stop searching after clicking some results because of impatience. However, even under this simple assumption, we find our model can capture the utility of queries very well as shown in the experimental section. In the future work, we may further improve our model by introducing a persistent parameter to capture the impatience.
The overall log-likelihood of the N search sessions with the same search intent is: L =
We assume the utilities of a set of queries can be addictive. where N j is the number of reformulations in the j -th session. The click events C j i are observed in the j -th search session. If
C j i = 1, we can infer that the results of the reformulation at position i in the j -th session is attractive (i.e., A Otherwise, A j i = 0. Besides, based on our assumption, we have that S j 1: M  X  1 =0and S j M =1ifthe j -th search ses-sion ends with a user clicking some results (i.e., a successful search session); Otherwise, we have that S j 1: M =0. To obtain an estimate of the parameters  X  = {  X  t | 1  X  t  X  T } and  X  = {  X  t | 1  X  t  X  T } , we can maximize L with respect to  X  and  X  . Due to the space limitation, here we skip the details of the optimization process.
Based on the above query utility model, we finally obtain our high utility query recommendation approach. Given the original information needs, typically represented by an in-put query, we collect all the search sessions starting from the same given query to approximate the search behaviors from that information needs. All the queries in these search sessions other than the input query become the recommen-dation candidates. We then apply our query utility model and infer the utilities of the recommendation candidates ac-cording to the original information needs. Finally, we rank all the candidate recommendations according to their utili-ties and provide the top ranked ones to users.
In this section, we empirically evaluate the effectiveness of our proposed high utility recommendation method.
Dataset. Our experiments are based on a publicly avail-able dataset, namely UFindIt log data 3 , which was collected over a period of 6 months. We process the data by ignoring some interleaved sessions, where the participants search for multiple information needs in one search process. We also remove sessions which have no reformulations, and sessions started without queries. After processing, we obtain 1 , 298 search sessions, 1 , 086 distinct queries and 1 , 555 distinct clicked URLs. For each initial query, the average number of search sessions is 32 and the average number of distinct reformulated queries is 26. Figure 3: Comparison of the performance of al-l approaches (ADJ,CO,QF,CT,PCU,PTU,QUM) in terms of QRR and MRD.

Evaluation Metrics. In this paper, we resorted to us-ing the manually judgements for evaluation. Specifically, assessors browsed the content of each clicked document of a recommended query and determined whether it can provide http://ir-ub.mathcs.emory.edu/uFindIt/ useful information, i.e. relevant or irrelevant to the origi-nal query. Since this type of information has been kindly labeled in the UFindIt search logs, we will use it for our evaluation, and it is also easier for others to reproduce the results. With the manually labeled data, here we measure the quality of the recommendations with the following t-wo metrics:(1)Query Relevant Ratio (QRR), which and (2) Mean Relevant Document (MRD). For a specific information need, the metric QRR is defined as: where RQ ( q ) denotes the total frequency of query q with relevant results obtained(clicked) by users, and N ( q )denotes the total frequency of query q issued by users. This metric measures the probability that a user finds relevant results when she uses query q for her search task 4 .AhigherQRR means that a user will be more likely to find useful results with respect to the original information needs.

Moreover, for a specific information need, the metric MRD is defined as: where RD ( q ) denotes the total frequency of relevant results obtained(clicked) by users when they use query q for their search tasks, and N ( q ) denotes the total frequency of query q issued by users. This metric measures the average number of relevant results a user finds when she uses query q for her search task. A higher MRD means that a user will find more relevant results according to the original information needs. Baseline Methods. To evaluate the performance of our QUM method, we compare it with four baseline query rec-ommendation methods: (1)Adjacency (ADJ): given a test query q , the top frequent queries in the same session adjacent to q are recommended to users [12]. (2 )Co-occurrence (CO): given a test query q , the top frequent queries co-occurred in the same session with q are selected as recommendations [10]. (3)Query-Flow Graph (QF): it constructs a query-flow graph based on collective search sessions, and then a random walk is performed on this graph for query recommendation [3]. (4)Click-through Graph (CT): this method creates a query-URL bipartite graph by mining query logs [15]. It performs a random walk and employs the hitting time as a measure to select queries for recommendation. The former two methods can be regarded as frequency-based methods and the latter two methods can be regarded as graph-based methods. Besides, to further investigate the influence of the two component utilities (i.e., perceived utility and posterior utility) in our QUM method, we also use them separately to recommend queries as two baselines, namely Perceived Utility method (PCU) and Posterior Utility method (PTU).
Figure 3(a) and Figure 3(b) show the performance of top recommendations from different methods under the metric QRR and MRD, respectively. From Figure 3, we can see that the two frequency-based methods ADJ and CO per-form poorly under the two metrics. It shows that by sim-ply considering the most frequently adjacent or co-occurring
In our experiment, we use QRR ( q )=( RQ ( q )+1) / ( N ( 2) to reduce the influence of observing frequency in comput-ing QRR . Similarly for the metric MRD . queries in the same session with the given query (which are usually highly relevant), we can X  X  guarantee to recommend useful queries to satisfy user s X  information needs. The two graph-based methods, i.e., QF and CT, show better perfor-mance than the frequency-based methods. It indicates that by leveraging the local relationships (i.e., either the co-click or the reformulation relationship) between query pairs to collectively reveal the global relationships between queries, we are able to find better query recommendations.
The PCU method, which only relies on queries X  perceived utility for recommendation, presents a comparable perfor-mance with the two graph-based methods. As we know, the PCU method actually recommends queries according to the expected click-through rate over their search results (i.e., perceived utility). Since users are more likely to click the search results that they deem relevant, the perceived u-tility implicitly convey the utility information of the queries. However, only after inspecting the content of the clicked re-sults, users can decide whether the results are truly relevan-t. Therefore, the queries with high perceived utility are not necessary to be highly useful. That is the reason why the PCU method cannot always show high performance accord-ingtothetwometrics.

Moreover, the PTU method, which takes queries X  posteri-or utility for recommendation, shows better performance as compared to the above baseline methods under both metrics. It indicates that by simultaneously consider users X  reformu-lation and click behaviors, the learned posterior utility can better reflect the usefulness of the queries. Moreover, when compared with the PCU method, we can find that the P-TU method shows constantly better performance. It further demonstrates the importance to take into account users X  re-formulation behaviors (i.e., satisfaction event) to capture the utility of queries.

Finally, as we can see from Figure 3, our QUM method performs better than all the baseline recommendation meth-ods. We conduct t-test ( p -value &lt; =0 . 05) over the results and find that the performance improvements are significant as compared with both the frequency-based and graph-based baselines. It shows that by leveraging our query utility mod-el, we are able to infer and recommend high utility queries for users. Meanwhile, as compared with the two component utility methods (i.e., PCU and PTU methods), the QUM methods can also constantly outperform the two baselines. It demonstrates that to recommend high utility queries, we need to find those queries that can not only attract users to click their search results, but also provide useful infor-mation with the clicked search results. The two aspects are complementary and neither can be ignored for high utility recommendation.
This paper proposes a novel dynamic Bayesian network to infer query utility from users X  search behaviors for rec-ommendation. We evaluate the performance on a real query log, and the experimental results show that the proposed approach can outperform the state-of-the-art baselines in providing useful recommendations. This research work was funded by the National Natural Science Foundati on of China unde r Grant No. 60933005, No. 61173008, No. 61003166 and 973 Program of China under Grants N o. 2012CB316303. [1] A. Anagnostopoulos, L. Becchetti, C. Castillo, and [2] D. Beeferman and A. Berger. Agglomerative clustering [3] P. Boldi, F. Bonchi, C. Castillo, D. Donato, A. Gionis, [4] O. Chapelle and Y. Zhang. A dynamic bayesian [5] N. Craswell, O. Zoeter, M. Taylor, and B. Ramsey. An [6] G. Dupret and C. Liao. A model to estimate intrinsic [7] L. A. Granka, T. Joachims, and G. Gay. Eye-tracking [8] J. Guo, X. Cheng, G. Xu, and H. Shen. A structured [9] J.Guo,X.Cheng,G.Xu,andX.Zhu.Intent-aware [10] C.-K. Huang, L.-F. Chien, and Y.-J. Oyang. Relevant [11] A. Jain, U. Ozertem, and E. Velipasaoglu.
 [12] R. Jones, B. Rey, O. Madani, and W. Greiner. [13] L. Li, Z. Yang, L. Liu, and M. Kitsuregawa. Query-url [14] H. Ma, H. Yang, I. King, and M. R. Lyu. Learning [15] Q. Mei, D. Zhou, and K. Church. Query suggestion [16] J.-R. Wen, J.-Y. Nie, and H.-J. Zhang. Clustering user [17] X. Yan, J. Guo, and X. Cheng. Context-aware query [18] Z. Zhang and O. Nasraoui. Mining search engine [19] X. Zhu, J. Guo, X. Cheng, P. Du, and H.-W. Shen. A
