 This paper describes an algorithm for determining if an event oc-curs persistently within an interval where the interval is periodic but the event is not. The goal of the algorithm is to identify events with this property and also determine the minimum interval in which they occur. This solution is geared towards discovering human rou-tines by considering the triggering of simple sensors over a diverse set of spatial and temporal scales. After describing the problem and the proposed solution, in this paper we demonstrate using testbed data and simulations that this approach uncovers components of routines by identifying which events are parts of the same routine through their temporal properties.
 Categories and Subject Descriptors: I.5.1 [Pattern Recognition]: Models -Statistical.
 General Terms: Algorithms.
 Keywords: human routine discovery, periodic events recognition, macroscopic sensing composition, assisted living.
A number of sensor network systems have been deployed for monitoring a person X  X  whereabouts at varying levels of granularity ranging from home level monitoring to worldwide GPS monitor-ing. Such systems have demonstrated a lot of success towards the collection of high quality data that are now revealing a new set of challenges and opportunities for data processing and interpretation. One such challenge is using the sensor data to discover and monitor more abstract patterns that are not always very obvious in the orig-inal dataset. In this paper we explore the use of sensor data streams for discovering persistent human routines.

These routines are collections of actions that range from com-mon, easy to describe behaviors such as brushing teeth and getting dressed to more abstract rituals that take place over larger spaces extending over the entire home or a whole city. In each case the relevant time intervals are also specific to each person. Such rituals are hard to describe, they do not even have names and they tend to be vaguely described as a  X  X ag of things X . Guessing the internal structure of such rituals and how they would manifest themselves in sensor data is very challenging as event ordering and temporal scales may vary from instance to instance. Training over collected datasets is also not very practical since events produced by these rit-uals are embedded into longer data-streams and also most likely in-terleaved with other events that would render a model trained from raw data rather meaningless.

Instead, to find the desired rituals we wish to leverage a key timing property as the invariant for identifying persistent routines; the fact that these rituals are not themselves periodic but they oc-cur within an interval that is periodic. Our approach is based on the intuition that if sensors are properly placed, individual sensor events will share the same temporal properties as the actual rou-tines. Hence, if we are able to identify events from all sensors that have similar temporal properties, we can discover the routine from its components. One of the most intuitive examples that demon-strates this property in humans is the bedtime event (at the end of the day). Even when observing a human with extremely inconsis-tent bedtimes, one can determine that this event occurs over a fixed periodic twenty four hour interval. This intuition comes from the apriori principle in data mining, which in our case would imply that if a ritual has a certain temporal property then its individual com-ponents have a very similar property. This suggests that if sensors are properly deployed, it is possible to determine the components of persistent routines from temporal properties. Using this as the main motivator, in this paper we focus on how to identify this tem-poral property in the trace of one event with the goal to use it in the future as a building block for detecting more complex human rituals.

Our contribution is a new algorithm that can find events that per-sistently occur inside a periodic interval of unknown length by dis-covering the length of the interval. We show that we can determine that interval while tolerating gaps and missed events and demon-strate the outcomes using real data from datasets we have collected from our assisted living testbeds and our university X  X  shuttle sys-tem. The benefits of this result are twofold. First, it enables sensing systems to identify and observe very personalized rituals of individ-uals and make it possible to study how these rituals degrade with cognitive decline. The solution also has applications to security scenarios in detecting patterns hidden in larger data traces from the relevance of their components without prior knowledge of the pat-terns themselves. The second benefit is that it provides insight on how to define new forms of composing macroscopic sensors using collections of smaller sensors and the properties of the actual data.
The rest of the paper is organized as follows: Section 2 pro-vides the motivation for our work and Section 3 discusses related work. Section 4 introduces our problem statement followed by an overview of our approach in Section 5. Section 6 provides an al-gorithm for generating a set of all candidate periods for a type of events and section 7 provides the algorithm for discovering the min-imum valid period from the set of candidate periods. Finally, Sec-tion 8 presents our evaluation and Section 9 concludes the paper.
We illustrate the notion of a persistent routine using an example extracted from real data from one of our assisted living deploy-ments. In this deployment, an elderly lady lives by herself. In Figure 1(a) you can see the event  X  X ut of the house X  for a period of 25 days, detected using a combination of motion (PIR) sensors and door sensors. Each line segment represents the occurrence of the event. The left edge of each segment corresponds to the start time of the event and the right edge to its end time.

Although it is easy for a human to realize that the event repeats consistently approximately every 24 hours, due to the variations of the exact start time and end time (or equivalently duration) of the event, determining if an event is periodic is not an easy task. One might be tempted to resort to simple statistics or to consider events that are similar up to a threshold as part of the routine. However, such methods are bound to fail due to the highly stochastic nature of human behavior. The major difficulty has to do with the fact that what is periodic is not the actual events, but rather a time envelope that surrounds the events .

By splitting the entire time interval into the appropriate 24-hour windows (days) as shown in Figure 1(b), one can realize that most events align almost perfectly, the explanation for this being that our subject consistently visits a neighboring friend for a couple of hours every afternoon. In contrast to this, Figures 1(c) and 1(d) show the same data over 18 and 23 hour windows respectively but the data does not align as in the 24 hour window case. Furthermore, although many types of human routines commonly take place in 24 hour windows, there are additional windows with different periods that are not so intuitive and need to be discovered from the data. For example consider an activity that takes place every weekend (but not at a fixed time) or the normal frequency of bathroom visits, which is important in assisted living applications. By establishing a way of finding those periodic windows and the events that fol-low them, we can essentially define a new sensor that detects that specific routine without prior knowledge of its structure.
Drawing from our experiences with real data, an appropriate algorithm for discovering the aforementioned time windows also needs to tolerate gaps and sensing errors manifested as missing events. Furthermore, the events considered should meet a mini-mum repetition requirement before they can be declared as persis-tent routines.
Mining periodically occurring events is a well-known problem in data mining with applications towards inventory replenishment, market data analysis, data traffic analysis and telecommunications among others. The oldest category of algorithms [9, 14] empha-sizes, roughly speaking, on what we call  X  X xact periodicity X . Given a sequence of symbols with each symbol corresponding to an event, an event is exactly periodic with period k over the sequence if every k-th symbol corresponds to the event. Two representative classes of such problems are as follows. The first considers a sequence of event sets, and an event is considered periodic if for some integers l and o, the event occurs in every l-th set beginning with the o-th set in the sequence The main limitation of the approaches aiming at exact periodicity is that they fail when the sequence of events is interrupted. However, this is commonly the case in human rou-tines (e.g., person leaving for vacations) and when using sensor data (e.g., missing measurements).

The second type of periodicity attempts to solve these limita-tions by considering an event periodic with period k if there are a sufficient number of subsequences whose combined length ex-ceeds some user-specified support such that the event is exactly periodic in each subsequence with period k [4, 11, 16]. This is usu-ally reffered to as  X  X artial periodicity X . What makes discovering partial periodicity difficult is that noise in the form of extra events that are not part of the periodic sequence can significantly affect the correctness and complexity of the algorithm. However, noise is common in human routines both due to the stochastic nature of human behavior (e.g., person decided to do something completely outside of her schedule) and also due to sensing errors. In [11] the authors also consider the case where the occurence time of the events is partially shifted. In particular, they define a Chi-Squared test to discover events that although shifted up to a user-specified threshold  X  are considered part of the same sequence.

The periodicity we study is specifically tailored towards process-ing events comprising human routines and activities. The basic characteristic of these routines is that they almost never occur per-fectly periodically or even approximately periodically even within a small portion of the interval of observation. To give an example of a typical routine that we wish to discover, assume that a person is going to the gym almost every day but not always at a specific time (i.e., one day the person can go at 7am, another day at 8pm etc.). In this example, the actual  X  X ym X  events are not even approx-imatelly periodic and the use of a fixed  X  X itter factor X   X  would either make the discovery of such a routine impossible or it could corre-late events that might not be periodic (e.g., a gym visit at 2am could potentially be correlated with a gym visit at 9pm). However, most humans would agree that the gym visits are part of a routine that re-peats daily, namely the person visits the gym almost every 24 hours from say 6am to 9pm. Hence, in order to be considered periodic, an event itself need not be exactly periodic, or even exactly periodic within some specified "jitter factor", but rather it must be contained in some periodic envelope, that is itself partially periodic.
In [10] the authors consider a slightly different problem, where the events are modeled as lines in a 2-dimensional space represent-ing the start time and the duration of the events. Consequently, events are clustered together, so as to maximize the overlapping of the line segments that belong to the same cluster, minimizing at the same time the number of clusters. Although this approach can provide indications of periodicity by finding events that occur at approximately the same time and having the same envelope, it does so using pre-specified temporal windows and neglecting periodic-ity within these windows. Moreover, it is largely dependent on the duration of the events, and attempts to cluster the events in a way that minimizes the envelopes around them. On the contrary, the al-gorithm presented in this paper, attempts given a class of events to determine the optimal envelope around them. In fact, our method can be combined with the algorithm presented in [10] to achieve optimal selection of windows and, hence, clusters.

Other work [5, 6, 12 X 14] dealing with routines have based their approaches on information theoretic metrics such as minimum de-scription lengths, that heavily rely on repeating action subsequences. Although theoretically very elegant, our experiences and the na-ture of routines we would like to study include arbitrary combi-nations of actions that cannot be caught by those methods. Some simpler forms of finding periodicity as circadian rhythms, namely discretizing time in bins of fixed size and measuring the percent-age of events in these bins [15], can be used to provide a rough estimation of when these events occur. This approach is appealing due to its simplicity and the information it provides and it can be useful for identifying important events and deviations from a statis-tical point of view. However, it cannot provide enough resolution to identify events that share common properties and, thus, cannot be applied for identifying rituals. Finally, common approaches in signal processing as Fast Fourier Transform (FFT) [3] fail in our case, since the signal we consider is not actually periodic in the  X  X athematical X  sense.
We are given a sequence of n events where all the events in the sequence are of the same type, as well as an occurrence time and duration for each event. We make no assumptions about how we extracted the events, and these events could vary from events gen-erated from simple sensors (e.g., motion, door/window) to events that are the output of more complex sensors or algorithms. Let e denote the event type. We will consider events of the same type as equivalent, so for simplicity of notation, we will use event e to mean an event of type e .

Let p i denote the occurrence time of the i th event in the given sequence, and let P denote the set of all occurrence times. So p Figure 2: (a)A routine with parameters: S=0.7, F = 4, min p 2 &lt; ... &lt; p n and P = { p i | i  X  { 1 ,...,n }} . Let F and S be two user specified parameters where F determines whether events of type e occur frequently enough, and S is a real number between 0 and 1 which determines if events of type e occur over a significant enough fraction of the entire interval of observation. We call F and S the frequency and support respectively. Let the minimum repetition frequency min rep be a user-specified positive integer greater than or equal to two which determines when events of type e repeat in enough periodically occurring time intervals to qualify as a regularly reoccurring behavior.

Let L denote the length of the interval of observation. We as-sume the interval of observation has been discretized in the chosen time unit. So if the time unit is a minute, and the interval of obser-vation is thirty days, then the total length of the interval of obser-vation is L = 24  X  60  X  30 , and the set of all occurrence times is a subset of { 1 , 2 , 3 ,...,L } . We say that a time interval is an enve-lope of event e if an occurrence of event e begins and ends in the interval. Formally, we say that event e is a spatio-temporal routine (or just a routine ), and we symbolize it with { e } , if there exists a set T of envelopes, where all the envelopes have the same lengths, and the following hold: 1. The number of envelopes in T is at least F : |T| X  F .
 2. There is a partition C of T such that each set in C contains at 3. Let I ( C 0 ) denote the smallest time interval containing all the When the above hold, we call T a temporal property of the routine, and we call P the periodic partition of T . We call the period of the envelopes in each set of C a period of the routine. The spatial property of the routine are the events contained in the envelopes of T , where each event is indexed by its position in the given event sequence. A routine may have more than one temporal and spatial property pair associated with it. Note that in order for event e to be a routine, we only require that there exist (a sufficient number) of envelopes which are periodic. There may be a complete lack of periodicity or even approximate periodicity among the event occur-rence times themselves.

Figure 2(a) illustrates a routine { e } with period 12 hours, where e is the event of a garage visit with duration of an hour which we denote by { garage, 60 minutes } . The envelopes are denoted by the rectangles, and each envelope contains an event of the same type as event e . T is the set of all the envelopes, and is a tem-poral property of the routine. The spatial property are the events contained in the envelopes. The first three envelopes occur period-ically and the last three envelopes occur periodically, and there is a break in the periodicity of the envelopes between the third and fourth envelopes. A periodic partition of T contains two sets, the first of which consists of the first three envelopes, and the second of which consists of the last three envelopes. See Figure 2(b) for an illustration of the routine { e } with its temporal properties, periodic partition, period and spatial property labeled.

An aligned routine with period l is a routine of period l with at least one temporal property T where the distance between the left endpoints of any two intervals in T is a multiple of the period l . Figure 3(a) shows the temporal property of an aligned routine. For example, suppose a person visits the kitchen for an hour on most days in the time interval between 8am and 10am for breakfast. That the person does not visit the kitchen between 8am and 10am on Monday and Tuesday correspond to gaps or interruptions in the routine; however, when the person does eat breakfast on Wednes-day, one may reasonably assume he will still do so between 8am and 10am. In an aligned routine, once the routine is resumed after an interruption, it would be as if there had been no interruption. In this paper we consider only the case of aligned routines. An extension of our approach to the case of general routines, namely routines whose gaps are not necessarily multiples of the period is given in our more detailed technical report [8].

Given a sequence of occurrence times and user specified param-eters F,S and min rep , our aim is to determine if e is an aligned routine, and if so, find the smallest l such that e is a routine with period l . We call this the routine discovery problem . Towards this end, we present an algorithm for identifying a subset of those l which cannot be the periods of routine e , and thus generate a set of candidate periods which can be guaranteed to contain all l such that e is a routine with period l , assuming e is a routine. Secondly, given a candidate period l , we present an algorithm with complex-ity polynomial in |P| for determining if e is an aligned routine with period l , and if so, return a temporal property of the routine. The key challenge in this problem is that in a routine, there need not be periodicity, or even approximate periodicity, between the event occurrences. The periodicity is only required to occur between en-velopes (of unknown length) containing some significant enough portion of the event occurrences, and furthermore, the period of the periodically occurring envelopes are also unknown.
Given parameters F,S and min rep , the routine discovery algo-rithm determines if there is a routine with those parameters, and the smallest period l for which the event is a routine. The outline of the algorithm is as follows:
In order to extract the set of candidate periods required by step i, we eliminate from the set of all periods those that can be guaranteed to not be the period of routine e . To do so, we extend the distance-based pruning approaches considered in [11, 16] which are based on the observation that if an event is periodic with period l while satisfying a user-specified support, then there must be a sufficient number of event pairs for which the inter-event time is l . We extend this approach to the case where the periodicity is not between event occurrences but between envelopes of unknown length.

The challenges in step ii are that the occurrence times of event e need not be periodic or even approximately periodic in order for { e } to be a routine. Also, events occurring in periodically occurring envelopes can be interleaved with  X  X oise" events in the form of extra events in an envelope. Furthermore, there may be one or more  X  X aps" between sequences of periodically occurring envelopes with noise events possibly occurring in the gaps.

The algorithm for determining if { e } is a routine with a candidate period l is based on a sliding window sequence approach. In the next section, we will illustrate the intuition behind the basic sliding window algorithm.
Suppose the event type  X  X itchen visits that last approximately an hour X  is a routine. Figure 3(a) shows a temporal property of the routine. It is easy to observe that there is a sequence of contiguous time intervals, each of length l , such that each envelope in the rou-tine belongs to one of the time intervals, and no two envelopes are in the same interval.
 Figure 3: Spatio-temporal routine { ( kitchen, 60 mins ) } occurring
Let L denote the length of the entire interval of observation, and let t 0 denote the first time point on the interval. Let W denote a sequence of contiguous d L l e + 1 time intervals each of length l , and where t 0  X  l is the left endpoint of the first interval in the sequence: W = [ t 0  X  l,t 0 ] , [ t 0 ,t 1 ] , [ t 1 ,t 2 t  X  t i  X  1 = l for each i , as seen in Figure 3(b). Let t be the left endpoint of the earliest occurring envelope in the routine, and let  X  denote the distance between t and the left endpoint of the time interval in W containing t . If we  X  X lide" the entire sequence of time intervals in W to the right by  X  , as seen in Figure 3b, then we will discover a set of envelopes (of events with the same type as ( kitchen, 60 mins ) ) which make up a temporal property of a routine { ( kitchen, 60 mins ) } with period l . Since  X  is at most l , it follows that by sliding the sequence of time intervals in W to the right one time unit at a time, we will, after at most l time units, discover that ( kitchen, 60 mins ) is a routine of period l with parameters F = 4 , min rep = 2 and S = 0 . 6 . See Figure 3(c).
In this section, we present an algorithm that identifies all the can-didate periods for the set of occurrence times P in O ( | P | log ( L )) steps. Our algorithm is based on a set of constraints that eliminate values that cannot be valid periods. Apriori knowledge about the structure of the event sequence we consider can be integrated in this step, by either limiting the range of valid periods or by pruning candidate periods that are guaranteed to not be valid or for which the user is not interested (e.g., because they are not multiples of 24-hours).

It is easy to observe that the maximum possible period is ob-tained when our routine { e } reoccurs only F times over the entire interval of observation L , in which case the maximum possible pe-riod will be l max = L F . Similarly, the minimum possible period l min is obtained when all given occurrences of e are included in the routine, and the routine reoccurs over an interval of length SL : l min = SL |P| , where we remind that S is the support. In order e to be a routine with period l , where l min  X  l  X  l max , there have to be at least F l = max ( F, SL l ) envelopes in the temporal property of { e } , since we need to have more envelopes than our frequency F and we need to have at least one envelope in every set of the periodic partition of the temporal property.

A pair of envelopes in the temporal property are adjacent if the distance between their left endpoints is l . The number of adja-cent pairs of envelopes in a temporal property of the routine is minimized when there are only F l envelopes in the temporal prop-erty, and the number of envelopes in each set of the periodic parti-tion of the temporal property is min rep . Hence, there are at least Q ( l ) = max ( min rep  X  1 , b F l min cent envelopes in any temporal property of routine { e } with period each of the sets to contain at least min rep envelopes. The differ-ence between the occurrence times of any two non-identical events is called inter-occurrence time. Clearly, all inter-occurrence times of the events in two adjacent envelopes can range between 0 and 2 l .

These observations lead us to the following necessary condition for l to be a period of routine { e } :
C LAIM 1. If { e } is a routine with period l , then l min l max , and there are at least Q ( l ) inter-occurrence times t where 0 &lt; t &lt; 2 l .

Any l that satisfies Claim 1 is called a candidate period of spatio-temporal routine { e } . The cardinality of the candidate period set will depend on the given set of occurrence times and the param-eters F and S and will include all actual periods. Following, we introduce a procedure that uses Claim 1 to determine if l , l l  X  l max . The procedure checks if there are more than Q ( l ) inter-occurrence times that are in the range (0 , 2 l ) . The basic premise is that if the time between p j and p k , where j &lt; k , is greater than 2 l , then the inter-start time between p i and p k must be greater than 2 l for all i &lt; j . The procedure examines all times in P one by one beginning with p 1 . Let C ( l ) be the number of inter-start times we have found at each step of the procedure which are in the interval (0 , 2 l ) . To begin with, let i = 2 and let C ( l ) = 0 : Step 0: Step 1: If | p i  X  p i  X  1 |  X  2 l , then let i = i + 1 and go to step 0; else, let j = i  X  1 and goto Step 2.
 Q ( l ) , then stop, and return that l is a candidate period, else let j = j  X  1 and repeat Step 2. If | p i  X  p j |  X  2 l , then let i = i + 1 and goto Step 0.

The complexity of the procedure will be worst case linear in |P| + Q ( l ) . However, the procedure will have to be run for every l in (0 , 2 l ) . An additional observation that can help us drastically eliminate the times we need to run the above procedure is that if l is not a candidate period and, consequently, there are less than Q ( l ) inter-occurrence times that lie between 0 and 2 l , any number less than l cannot be a period since it will also have less than Q ( l ) inter-occurrence times inside (0 , 2 l ) . Using similar arguments, when l is a candidate period every number greater than l will also be a can-didate period. These observations are summarized in the following lemma: l  X  l max , is not a candidate period of routine { e } , then no l l &lt; l is a candidate period of routine { e } . Also, if l is a candidate period, then all l 0 where l max  X  l 0 &gt; l , are also candidate periods. Lemma 1, suggests a divide and conquer approach for determining efficiently the smallest l  X  [ l min ,l max ] that is a candidate period. This will allow us to consider as the set of candidate periods the in-terval [ l,l max ] . Our algorithm proceeds similarly to binary search and uses the procedure introduced before to check if the middle point of our current subinterval is a candidate period. If it is a can-didate period then the subinterval on its right is checked, otherwise the smallest candidate period is contained in the left subinterval. Based on this, we next give a procedure of complexity in the order of log ( l max  X  l min ) |P| for finding l . In the following, let U denote initially the interval [ l min ,l max ] : Step 0: Let a be the left endpoint of U and let b be the right end-point of U , and let l = b b  X  a 2 c + a . If l is a candidate period then goto Step 1; else goto Step 2.
 Step 1: If l  X  1  X  a , then let U = [ a,l  X  1] , and goto Step 0; else return l .
 Step 2: If l + 1  X  b , then let U = [ l + 1 ,b ] , and goto Step 0; else return l + 1 .
 The number of candidate periods which are generated is dependent on the routine parameters F , S , min rep and the given occurrence times. To prune further the set of candidate periods, the following is a necessary condition which candidate periods must satisfy in or-der to be an actual period of a routine e . If { e } is a routine with period l , then for i &gt; 1 , there are at least b F min inter-occurrence times in the interval (( i  X  1) l, ( i + 1) l ) . Modify-ing the procedure given above to take into acount this condition is straightforward.
In the previous section we provided an algorithm for extracting a set of candidate periods given our input sequence. In this section, we will continue by providing an algorithm that given each can-didate period determines whether the candidate period is an actual period of the routine { e } . The algorithm uses a sliding window approach to discover in time O ( | P | 2 ) one of the possible tempo-ral properties of the routine { e } given a period l , provided such a property exists. Note that there is nothing preventing the user from running the following algorithm with any set of candidate periods, which also implies that extending the algorithm to enumerate all possible candidate periods is straightforward.

Following, we say that a time interval (equivalently window, as we define later on) contains an occurrence of event e , or just event e , if the event is contained inside the given time interval. That is there is a p  X  X  such that the start time and end time of p are both contained in the interval. We say that a time interval ( a,b ] is a valid segment if all the following conditions hold: Hence, e is a routine with period l if and only if there are non-overlapping valid segments the sum of whose lengths is  X  where  X   X  SL , and  X  l  X  F . We remind that SL is the interval over which the routine reoccurs and F is the support.
 Based on these requirements, our algorithm proceeds by splitting L , the entire interval of observation, to a proper number of inter-vals or windows of length l and counting the number of adjacent windows that contain the event e . More specifically, given a candi-date period l , let N = d L  X  l l e be the smallest number of windows of length l whose total length is greater than L . Let W a sequence of N intervals each of length l , where  X  l is the left endpoint of the first interval in the sequence, namely W 0 sidered the occurrence time of the first event p 0  X  X  . However, the endpoints of the envelope including the events of routine { e } might not be both included in the same window of W 0 . Consequently, we will need to consider all possible shifts of W 0 . Hence, for any  X  where 0  X   X   X  l , let W  X  denote the sequence of time intervals ob-tained by shifting W 0 to the right by  X  time units: W  X  = (  X  l +  X , X  ] , (  X ,l +  X  ] , ( l +  X , 2 l +  X  ] , ... , (( N  X  2) l +  X , ( N  X  1) l +  X  ] . Also, let win  X  ( p ) = d p  X   X  + l l e indicate the window where p  X  P is contained. Clearly, win  X  ( p ) = i if p is contained in the i th window of W  X  unless p is the left endpoint of the i th interval of W (or equivalently, if p is the right endpoint of the ( i  X  1) th interval of W  X  ), in which case win  X  ( p ) = i  X  1 . To check for a routine our algorithm will go through all events in the sequence combining adjacent windows to form valid segments. A significant speed up of our algorithm can be achieved by not considering values of  X  that cannot lead to valid segments. If  X   X  ( p ) denotes the distance between p and the left endpoint of the interval of W  X  where p is contained, namely win  X  ( p ) , then it is easy to observe that there is no reason to increase  X  by values less than min p  X  X   X   X  ( p ) , since no window that didn X  X  already contain an event will start containing one.

Formalizing the above discussion, we now introduce a detailed algorithm. For ease of exposition, we will in the following assume there is an ordering q 1 ,q 2 ,...,q n of the given occurrence times in P where 0 &lt;  X  0 ( q 1 ) &lt;  X  0 ( q 2 ) &lt; ... &lt;  X  be outlined below can be easily generalized to the case where the previous condition does not hold, and the implementation of the algorithm is of the generalized version. Let V be any set of valid segments, and let T ( V ) denote the set of all windows contained in some valid segment. The algorithm for finding a temporal property of { e } given the set of candidate periods follows. As in the rest of this section, the algorithm assumes that the interval of observation begins at time 0: For k = 0 to n :
Clearly, { e } is an aligned routine with period l if and only if the output of the above algorithm T is not the empty set. In the latter case T will be a temporal property of routine e with period l . The complexity of each iteration of the above procedure is linear in n , where we remind that n = |P| , and since there are at most n iterations, we have that the complexity of the above algorithm is polynomial in n , the number of occurrence times.
 So far, we have silently assumed that our routines are aligned. In our technical report [8], we give a polynomial time algorithm with respect to |P| for general routines which may not be aligned. The algorithm for the general case is based on the algorithm for aligned routines given above, and the output of the algorithm is a set  X  V of non-overlapping valid segments. Our main result for the general case is the following. For any interval v , let len ( v ) de-note the length of v . If e is a routine with a temporal property  X  T with periodic partition P and period l such that: ( i ) For each P 0  X  P : I ( P 0 ) is a subinterval of a valid segment with length at P poral property of routine { e } with period l .
Our algorithm was evaluated with a mix of tests using artificially generated data as well as data collected by our deployed testbeds. First we stress test the algorithm using artificially generated data. Subsequently, we perform a sanity check for our algorithm using real data. In the final section we attempt to verify that components of a ritual present similar temporal characteristics with the ritual itself and can, thus, be used to detect it. Although, our example uses artificially generated data, it is largely based on our experience with more than 2 years worth of data from a number of assisted living deployments.
The first test we performed attempts to verify that our algorithm is able to discover routines in the presence of gaps and noise in our observations. In particular, we generated a number of sequences of event occurrence times which satisfy the requirements to be a routine with a specified period l and routine parameters F , S and min rep . Each artificial routine is composed of numerous valid seg-ments, where the  X  X aps" between the valid segments denoting rou-tine interruptions have lengths which are random integer multiples of the specified period.

In terms of human behavior, noise will manifest itself as the oc-currence of an event outside the expected form (i.e the occurrence of a bedtime event in the middle of the day that represents a very occasional nap). A noise parameter  X  , a real number between 0 and 1, determines how many of the event occurrence times are chosen uniformly randomly from the entire interval of observation; i.e., if  X  = 0 . 1 , then enough random event occurrence time are generated so that 10% of the event occurrence times are not generated specif-ically for the routine, but are chosen randomly from the interval of observation.

For evaluation purposes we generated routines where the finest time unit corresponds to 1 minute and the length T of the interval of observation is two months. The results for different specified periods l , where l = 180 , 740 , 2160 minutes, are shown in Figure 4. For each specified period l , we generate twenty different se-quences. The periods found by the period discovery algorithm are then averaged over the twenty trials to obtain a mean period. We find that the period discovery procedure is in general effective at determining the actual period of the routine when noise parameter  X  is less than or equal to 0 . 2 .

As a second experiment we generated events without using rou-tine parameters F , S and min rep , and thus more closely approx-imate how an actual sequence of event occurrence times are ob-tained. We take as the basic time unit 1 hour. We use four pa-rameters to generate a sequence of event occurrence times, namely l,T, X  and  X  . The parameter T is the length of the interval of ob-servation, and l specifies the period of the event. So if l = 3 , then beginning at some random offset  X  the event should ideally occur in each time interval [( i  X  1) l +  X ,il +  X  ] , for i = 1 , 2 , 3 ,... , over the entire interval of observation. For each of the intervals [( i  X  1) l +  X ,il +  X  ] , i = 1 , 2 , 3 ,... , the parameter  X  determines the probability that an event which should occur in the interval does not occur in the interval. Hence,  X  is the probability that either a sensor malfunctions and does not observe an event which took place, or that the routine is interrupted.

The results for different specified periods l , where l = 24 , 36 , 48 hours, and different settings for  X  and  X  , are shown in Figure 5. For each specified period l and the specified  X  and  X  , we generate 100 different sequences of event occurrence times. The periods found by the period discovery algorithm are averaged over the 100 trials to obtain a mean period. From this test, we find that the actual period of a routine can be closely approximated by the period discovery algorithm when the parameters  X  and  X  are less than or equal to 0 . 2 .

As a third and final test, we considered routines that have  X  X uilt-in" gaps. An example of a routine with a built-in gap is an event which (ideally) occurs in the six hour intervals [5 am, 11 am ] , [11 am , 5 pm ] , and [5 pm, 11 pm ] every day, but does not occur in the inter-val (11 pm, 5 am ) . The interval (11 pm, 5 am ) is the built-in gap of the routine, and the period of the routine is six hours. The rep-etition factor of the routine is three since each occurrence of the routine involves the event occurring in three consecutive intervals before a built-in gap occurs. To generate sequences of events corre-sponding to routines with a built-in gap we first select a period, say l = 6 , and also the time interval of the day over which the routine occurs, i.e., an event occurs in each of the intervals [5 am, 11 am ] , [11 am, 5 pm ] , and [5 pm, 11 pm ] everyday.

We first generated sequences of event occurrence times for a routine where the event occurs in the five intervals [5 am, 8 am ] , [8 am, 11 am ] , [11 am, 2 pm ] , [2 pm, 5 pm ] , and [5 pm, 8 pm ] every day (ideally), with a build in gap in the interval between 9pm and 6am of the next day. This routine has period l = 3 and repetition factor five. For each setting of  X  and  X  , we generate twenty se-quences of event occurrence times using the specified  X  and  X  , and after inputting each sequence into the period discovery procedure, we average the results over the 20 trials to obtain a mean period. We find that for  X   X  0 . 1 and  X  &lt; 0 . 4 , the mean period approximated closely the actual period of three hours. See Figure 6. We next generated sequences of event occurrence times for a routine where the event occurs in the three intervals [6 am, 12 pm ] , [12 pm, 6 pm ] and [6 pm, 12 am ] every day (ideally), with a build in gap in the in-terval between 12am and 6am. This routine has period l = 6 and repetition factor three. We obtain a mean period for each setting of  X  and  X  in the same manner as before. As in the case for l = 3 , we find that for  X   X  0 . 1 and  X  &lt; 0 . 4 , the mean period approximated closely the actual period.

We next considered a routine with a built-in gap and a repetition factor of two. More specifically, the routine is of an event which oc-curs in the intervals [8 am, 4 pm ] and [4 pm, 12 am ] , with a built-in gap of (12 am, 8 am ) . The repetition factor here is two. We found that even under ideal conditions where  X  = 0 and  X  = 0 , the period discovery routine determines a period of 12 hours, and not the ac-tual period of 8 hours. The problem here is that when the repetition factor is less than three, there are multiple ways to  X  X arse" the se-quence of event occurrences. In other words, an event which occurs within 24 hours in two consecutive intervals of 8 hours followed by a build in gap of 8 hours can also be said to occur every twelve hours with no built-in gaps. Without prior knowledge of whether built-in gaps are present or not, it is impossible for the period dis-covery procedure to choose between 8 and 12. Such alternative parsings are less likely when repetition factor is three or more.
In this section, we perform a sanity check to our algorithm using two types of data. The first concerns experiments using 3 month-long GPS data traces collected from our university X  X  shuttle system, and the second an application of the algorithm to real data from one of our assisted living deployments [2] (running continuously for more than 2 years) where an elder lives alone. Although in both cases we don X  X  have actual ground truth information, we have an estimate for the actual periods that the events should follow. In particular, for the case of the shuttles, we know the predefined schedule of each bus, whereas in the case of assisted living we can verify that the period discovered by the algorithm is reasonable for a  X  X ormal X  person.

Starting first from the case of the shuttles, we focused on a par-ticular bus stop and a particular line. Our data consisted from the entire trajectories of the buses sampled every 5 sec. Since a shuttle will not stop if there is nobody to pick-up or drop-off, our data con-tains gaps. The experiment we did was to attempt to look at events that correspond to the stops of line 19 at the  X  X chool of Manage-ment X  at around 9am for the period 02/13-05/15 2009 or for a total of 92 days. The bus line operates only on weekdays and the ac-tual stops where 66 out of the 71 expected (i.e., the bus missed 5 stops). The total number of detected events (i.e., stops of the bus) was 180, and the additional number of events is attributed to a traf-fic light that is near the stop. Because we know that the period of the routine of the bus is 24 hours, we select the various parame-ters in a way that demonstrates their importance. The results of our experiment appear in Table 1. Table 1: Discovered period for one of the stops of a bus line that oper-
Since the number of actual stops is 66, we expect that the support value can be at most 66 / 92 = 0 . 72 . Indeed, from Table 1 we get that for a fixed value of min rep = 2 and F = 66 the only value for which we get period 24 hours is S = 0 . 7 . When we consider larger support not enough events can be found and, hence, the period in-creases, whereas when we look at smaller support, noise (in the form of additional events) kicks in. By fixing S = 0 . 7 , we can then see the effect of F in the algorithm. Clearly, not considering noise, at most 66 events can be periodic with period 24 hours. However, due to additional events in the trace that are caused by noise, we are able to still find period equal to 24 hours for up to F = 71 . Finally, it is easy to observe, that the periodic partitions of any rou-tine will have cardinality at most 5. This can be verified using as min rep = 5 , in which case we find period 24 hours, as well as min rep = 6 , in which case we fail to find a routine. For a system-atic approach on how to select the parameters of the algorithm we refer the reader to our more detailed technical report [8].
As part of our research, we have developed a large online sys-tem [2] that can collect data from many different types of sensors. Our system consists of an embedded gateway that collects data and transmits them to a central location for further processing and shar-ing through a web portal. Types of supported sensors include mo-tion (PIR), door/window, temperature/humidity, dry contact, cam-eras, GPS and others. Besides simple binary sensors as PIR and door/window sensors that produce simple events by default, more complex events that are presented here, are extracted using hierar-chies of Probabilistic Context Free Grammars (PCFG). Moreover, events can be classified into different types using clustering algo-rithms, as the one described in [7, 10, 17]. Due to lack of space, here we chose to provide results only from a single person and fo-cusing on a period of one month, which allows us to visually verify the extracted periods. Since, most human activities repeat daily, we expect the discovered periods to be close to 24 hours (1440 min-utes). Also, we know that the set of events also contains  X  X oise X , which in our case will consist mainly from events that even though they were classified as having the same type as events in the routine, they are not part of the routine. In addition, we will have missing events that are caused due to either the person not performing the activity as usual or our inability to detect them.
 Table 2: Periods discovered for various activities of a person living
From our results in Table 2 we can infer that given a proper se-lection of parameters our algorithm can discover meaningful rou-tines. In particular we can see that the algorithm finds a routine of 24 hours for the case of the  X  X ut X  and  X  X reakfast X  activities. As you can see from Figure 1, that shows the events of the activity (but for part of the month) the support value S and the frequency F are smaller than 1.0 and 30 respectively, because of the missing events. In the case of the  X  X leeping X  activity, we can see that the activity repeats all 30 days of the month, since we were able to find a period for S = 1 . 0 and F = 30 . However, the period is only 19 hours instead of 24 hours that we would expect. This is caused by the fact that every actual sleeping instance consists usually from two events. In particular, the person usually wakes up in the middle of the night to visit the bathroom or the kitchen, something which results in two  X  X leeping X  events being recorded. Hence, the actual number of events in our trace is 58 instead of 30 that we would expect, explaining the smaller period that we are able to discover. Clearly, this is an artifact of the way we detect the  X  X leeping X  activ-ity in the sense that if we merge the two instances of the  X  X leeping X  event to form a single  X  X leeping X  event we are able to discover a period very close to 24 hours. A similar observation holds for the  X  X angout X  activity that represents spending time in the living room (with occasional visits to other places of the house). The person is known to perform the  X  X angout X  activity both in the morning after waking up and in the evening. Thus, when we try to determine if the activity repeats daily using S = 1 . 0 and F = 30 we get pe-riod of 20 hours. If we modify our parameters to look for a period that repeats approximately twice a day, we will get for S = 0 . 9 and F = 50 a period of about 12 hours, which verifies our results. Finally, similar results hold for the  X  X ath X  activity, where since the person visits the bathroom much more frequently than once a day, we where able to find that the person will definitely visit the bath-room at least once every 9 hours.

As an indication for the running time of our algorithm for the case of the shuttles, where we have L = 1440  X  92 and 180 events, we report here that we were always able to get an answer in less than 1 minute. Our algorithm was implemented in MATLAB and our experiments were performed on an Intel Core 2 Duo PC clocked at 1.6GHz and having 3Gb of memory. However, since the goal of this paper is to verify that discovery of human routines from traces of sensor events is possible, we leave detailed performance evalua-tion and improvements to our algorithm as future work.
Assume that a person follows a  X  X oing to sleep X  ritual every night. This ritual consists of taking her medication, drinking water, brushing her teeth, visiting the bathroom, putting her cell-phone to silent and finally getting to bed. Note that these events (besides the actual getting to bed) don X  X  need to happen in a particular order, and they might also overlap. Assuming a sensor that detects if some-one is on the bed, we should still be able to detect when a person is preparing to sleep just looking at the rest of the events. Even if not all events occur every time the person goes to sleep or some of these events occur occasionally during some other time of the day, we should be able to identify that all these events have similar periods. According to the apriori principle [1] all the elements of a persistent routine should be themselves periodic. Also, irrespective of the person, we should always be able to find a routine for the  X  X oing to sleep X  ritual, since unless a person has serious medical conditions, she will normally sleep within a 24-hour period. Con-sequently, all the events that make up the ritual will have to also be periodic and they will also have to be contained in the envelope of the more complex routine.
 Figure 7: Example of a ritual consisting of 5 events for a period of 10
Although the algorithm we proposed in this paper is only able to identify if a single event is periodic, our intuition is that by properly combining simple events with similar periods we should be able to discover more complex rituals. To provide some backup to our in-tuition, we attempted to verify through simulation that the events that make up a complex ritual have similar periods with the ritual itself. In particular, we considered a ritual that takes place every 24 hours and a time interval (envelope) [ t min ,t max ] , inside which all the events of the ritual are contained. Then inside this envelope we generated randomly a set of events that comprise the ritual. The Figure 8: Effect of noise (  X  ) and missing events (  X  ) to the absolute actual occurrence times of the events is chosen randomly and we consider for simplicity that all the events have a fixed constant du-ration D . Also, to make our simulation more realistic we use the parameters  X  and  X  as before to control the amount of noise (addi-tional events of each type that are not part of the ritual) and missing events respectively. An example of a ritual that takes place between 8pm and 10pm and consists of five events is shown in Figure 7. In this figure you can see with the thick lines the events E 1  X  E 5 that are part of the ritual (each event appears with a different color) and with the thin lines additional events of each type that are caused by noise and are not related to the ritual. The dotted lines denote the periodic envelope of the entire ritual (which will clearly also be a periodic envelope for all events that are part of the ritual).
In Figure 8 we can see the absolute error between the actual pe-riod of 1440 min (or 24 hours) and the period that our algorithm estimates. As we anticipate, for the case where we have no noise and gaps, namely  X  = 0 and  X  = 0 , our algorithm was able to identify that events E 1  X  E 5 are routines with period exactly 1440 minutes or 24 hours and envelope approximately contained in [8 pm, 10 pm ] . This implies the validity of the apriori principle in the case of rituals, namely that events that are part of a ritual are themselves routines. However, as we introduce noise and gaps in our sequence, the period discovered by the algorithm starts to differ from the actual period of the ritual. In particular, after about 10% of the events is caused by noise the difference between the discovered and the actual period becomes larger than the envelope of the ritual. Thus, to make macroscopic sensing composition possible, we need to develop methods that can robustly combine periodic events into sets that are themselves periodic. Given such a method, we will be able to learn to identify complex activities from simple binary events without assuming any prior knowledge for the events.
In this paper we have presented an algorithm for determining the period of a single event routine. Our evaluation used testbed data from our assisted living deployments and our university X  X  shuttle system have shown that the proposed algorithm is accurate with single event routines. Furthermore, our evaluations with single event routines illustrate how this algorithm could be used in the future as part of macroscopic sensor composition that would allow the detection of human routines and rituals that are hard to observe otherwise. In the immediate future, our plan is to apply the al-gorithm on our collected datasets, some of which spanning more than one year, to identify and study the components of routines that happen periodically. The outcomes of this analysis will be tar-geted to human behavior analysis in the study of depression and cognitive decline processes. We also plan to investigate other prop-erties that discover event interrelationships and can help identify the components of patterns without prior knowledge of the model patterns themselves. Ultimately we would apply these principles to the problem of macroscopic sensor composition to synthesize large sensors in situ that can sense abstract quantities from small compo-nents and according to the properties of the data and apply these to cognitive decline studies as well as security applications.
This work was partially funded by the National Science Founda-tion under projects IIS 0715180, CNS 0721632, and CNS 0448082. Any opinions, findings and conclusions or recommendation ex-pressed in this material are those of the author(s) and do not neces-sarily reflect the views of the National Science Foundation (NSF).
