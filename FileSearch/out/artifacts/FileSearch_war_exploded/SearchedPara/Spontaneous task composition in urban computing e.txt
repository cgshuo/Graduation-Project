 1. Introduction
Urban computing (UrbComp) is an extension of ubiquitous computing (Ubicomp). Similar to Ubicomp, the main goal of
UrbComp is to enable users to access services embedded in the infrastructure or in the Web anytime, anywhere ( Satyanarayanan, 2001 ; Weiser, 2003 ). However, UrbComp environments are den-ser in terms of the number of users, larger regarding physical settings, and more diverse in relation to the type of users and social groups ( Paulos and Goodman, 2004 ; Shklovski and Chang (2006) ). In such an environment, situational and planned users X  activities intermesh with each other ( Tamminen et al., 2004 ).
These situational activities consist of opportunities and draw-backs that alter the normal proceeding of users X  activities. For instance, the normal proceeding of a commuting task can be interrupted if a person misses the bus. This situation may trigger the opportunity of realizing sidestepping activities constrained to the time-window of the next bus. Among multiple other potential activities supported by the space, the user may: spontaneously see an advertisement for some product of her/his interest located in a nearby shopping area; receive a recommendation to meet a friend who is in the area; or receive a recommendation to play a video game, watch a TV stream or use a social network applica-tion on her/his smartphone. That is, diverse service requirements need to be tackled by opportunistically suggesting appropriate services to users to enable them to select or create their own light applications ( Balasubramaniam et al., 2008 ).

Nowadays, this vision is being made possible by an increasing number of enablers for quick rollout of situated software. For instance, end-users toolkits and languages like Marmite, Mash-Maker, and Anthracite; infrastructure to support reusability like
Yahoo Pipes and the Google Mashup Editor; and established standards for Web based and service oriented environments  X  XML, SOAP, REST, RSS, etc.

However, the diversity of service requirements in UrbComp environments hinders the creation of these new composites from applications fully established in predefined descriptions ( Paulos and Goodman, 2004 ). New, situated software needs to be created based on particular contexts to support ad hoc interactions of users in short-lived and transient ways. This requires appropriate composite services spontaneously configured and recommended during runtime. Nevertheless, providing users with reliable, meaningful, and understandable service functionality during runtime to create their desired applications is a challenging issue.
The sight of situated software in UrbComp environments lacks a previous step that would lie in first preparing service function-ality to reflect situational social and spatial context in a sponta-neous fashion. In addition, such recommended functionality needs to hide low-level system concerns from users. Therefore, spontaneous composite service coordination and recommenda-tion to end-users requires user-centricity and context awareness.
That is, (1) abstracting ubiquitous services to be prepared and delivered from the perspective of users X  goals rather than accord-ing to system elements, and (2) enriching these abstract service descriptions with the contextual information of ad hoc situations occurring in UrbComp environments, as well as the space semantics.

The approach of task-oriented computing ( Wang and Garlan, 2000 ) is a way to realize these requirements. In our previous work ( Huerta-Canepa et al., 2008 ; Jimenez-Molina et al., 2009 , 2010 ) we defined unit-tasks as the essential elements which, composed together, define a larger task. Each unit-task is a basic configura-tion of abstract services. In addition, unit-tasks are arranged by a subsuming of relationships in a hierarchical ontology. As general examples of unit-tasks we consider varieties of functionality like alarming specific locations , controlling appliances , controlling envir-onmental conditions , guiding and monitoring user activities , recom-mending social encounters , sharing audio/video contents , etc.
Considerable research has been devoted to demonstrating the influence of space and social behaviors in the deployment of ubiquitous services in urban environments. Particularly interest-ing is the work of Kostakos et al. (2009 ), which defines three dimensions of the urban ubiquitous infrastructure  X  the social structure of users X  routines, the spatial structure of the infrastruc-ture, and the temporal rhythms of users X  behaviors. In addition, nowadays it is feasible to conduct spontaneous social groupings on the large scale allowed by public places ( Quentin and Grandhi, 2005 ; Gupta et al., 2009 ; Bojic et al., 2010 ). Also, recently we have witnessed the rise of technologies to recognize activities by ubiquitous intelligence, which aggregates increasingly rich sen-sing information extracted from smartphones ( Ganti et al., 2010 ) and sensors embedded in the infrastructure, as well as from space semantics and personal schedules. These current technologies make it easier to measure the factors and properties derived from the above dimensions. This new state of technology provides a rationale for the definition of the three objects involved in the spontaneous generation of composite services: (1) social groups , (2) UrbComp environments , and (3) unit-tasks . The characteristics and interrelations of these objects are described by three essential aspects: social , spatial , and temporal . These aspects are a way of embedding the semantics of these objects.

Current technologies of placeness based context managers ( Lee, 2004 ) allow us to realize the detection of spontaneous, disruptive situations that affect the normal proceeding of tasks. Also, the identification of the context information attached to the place  X  called the placeness context  X  , and the identification of potential social groups that may be formed with the users that have co-presence in the UrbComp environment ( Paulos and Goodman, 2004 ) are possible (see Fig. 1 ).

The focus of this paper (see the dotted box in Fig. 1 ) is the provision of a unit-task selection mechanism and a unit-task composition mechanism. The former is realized by identifying the essential semantic elements that describe unit-tasks, UrbComp environments, and social groups, as well as their interrelations. In order to meet this aim, we have developed a semantic description model for each object based on the social, spatial, and temporal aspects. We have also extended a unit-task selection mechanism from our previous work. This mechanism systematically arranges the semantic elements of each object model to select appropriate unit-tasks. On the other hand, the composition mechanism is realized by a set of composability metrics based on the social, spatial, and temporal aspects. These metrics concern the mea-surement of the semantic interoperability and potential conflicts between unit-tasks or unit-task composites. This mechanism joins unit-tasks together in sequences, which are represented in BPeL ( The Business Process Execution Language, 2001 ), in accor-dance with their semantic information.
 Experimental results for a real dataset of tasks ( ATUS, The American Time-use Study, 2007 ) were obtained. These results show a suitable performance for the unit-task selection mechan-ism. In addition, a simulation of arrivals at a crowded space was utilized to measure the performance, throughput, and efficacy ratio of the composition mechanism.

The roadmap of this paper is as follows. Section 2 describes related work. Section 3 describes three aspects of identifying composability in UrbComp environments, coming out with a set of essential semantic elements. Section 4 describes the composa-bility metrics. Section 5 describes the spontaneous task composi-tion cycle, explaining the unit-task selection mechanism and the way the composability metrics are applied. Section 6 describes the mechanism implementation and the experimental results.
Section 7 concludes the paper. 2. Related work
Three major categories of related work are meaningful for this paper: (1) analysis of frameworks that make use of task-oriented computing to support users with available services in ubiquitous computing environments, (2) approaches from the service oriented computing area focused on the composition of services based on semantic modeling of services, and (3) approaches that consider the semantics attached to places as a way to support multiple users in urban environments. To the best of our knowl-edge, a spontaneous service composition leveraging specific facts of UrbComp environments has not yet been developed, and this is the major focus of our paper. 2.1. Task oriented frameworks
Research on task-oriented computing has tended to focus on fine-grained tasks that do not properly realize user-centricity, one of the requirements of Ubicomp and UrbComp. That is the case of the ABC framework, which provides a task-centered collection of applications, services, and data to dynamically adapt tasks to the available resources on heterogeneous computing devices ( Bardram, 2007 ); however, tasks are defined in a fine-grained way. In addition, there has been research focusing on statically binding user X  X  information against predefined applications. An example is the Gaia project, which created a user-centric, context-aware, location-aware and event-driven framework. Gaia focuses on interaction between users and active spaces. Users should make their data available even when they move across different active spaces. Therefore, a new application is selected by match-ing user X  X  data against a predefined application ontology (mobile polymorphic applications). Additionally, when users switch to another active space, a semantically similar application is selected ( Roman et al., 2002 ; Ranganathan et al., 2004 ). Additionally, there has been research focusing on providing solutions that directly select and then integrate services that are equivalent to the user X  X  task. An example in the ambient systems domain, which shares common characteristics with Ubicomp, is the IST AMIGO project.
This solution consists of a  X  X  X oS-aware dynamic composition of users X  tasks from networked services X  X  in the environment ( Mokhtar et al., 2005 ). It uses predefined applications, described as workflows, which represent users X  goals and could even be carried by the user in a mobile device. However, workflows are directly matched against services, without any mediating process or abstract layers, which produces a lack of flexibility and reusability of composition patterns. A similar example is the task-driven Aura project, which realized user-centricity by repre-senting users X  goals in coarse-grained tasks. These tasks are dynamically mapped to virtual services. However, there is still a lack intermediate layers that would allow improvements of flexibility and reusability ( Garlan et al., 2002 ). 2.2. Semantic services
Literature on dynamic service composition has tended to focus on leveraging available service templates ( Mennie and Pagurek, 2000 ; Garlan et al., 2002 ; Sheng et al., 2002 ; Sirin et al., 2002 ;
Minami et al., 2003 ). The general idea of these approaches is to fill a template by dynamically selecting services that are equivalent to the components of the template defined on an abstract level.
The major limitation of these approaches is the need to have templates in advance that embed service requirements.

Another category of work is based on combining input, output, preconditions, and effects (IOPE) with planning techniques ( Ponnekanti and Fox, 2002 ; Fujii and Suda, 2004 ), in order to generate an execution path of composites. However, this approach requires the explicit definition of a composition goal, which in a majority of cases needs to be defined by users.
In general, a huge challenge to the realization of automatic service composition is the necessity of bridging the gap between user-centric semantics and machine interpreted data. Semantic
Web technologies are a way to overcome this challenge; these technologies are a major effort as part of the OWL-S, which will enable automated service discovery, interoperation, composition, execution, and monitoring ( McGuinness and van Harmelen, 2004 ). OWL-S consists of a service ontology that provides a service description model by means of three perspectives: (1) a service profile that models the required inputs and generated outputs, (2) a service model that describes the behavior of the service operations, and (3) a service grounding that states the data and ways to actually invoke a service. Another work along the same lines is the Web Service Modeling Ontology (WSMO), which provides a conceptual model to describe services in a language-independent fashion. On top of the WSMO is the Web Service
Modeling Language (WSML) ( Brujin et al., 2008 ), which is a concrete way of realizing WSMO ontologies. WSML allows the representation of descriptions using either XML or RDF. The latter is specifically used to represent automated exchanges of descrip-tions. WSML is composed of three languages that describe the essential semantic elements of a service. The first language is a set of ontologies of terms and knowledge to be used in the service description. The second is concerned with the functional descrip-tion of services, while the third language is concerned with describing the behavioral perspective of services. That is, the behavior of a service is understood as the interactions among service interfaces. 2.3. Place based semantic approaches
P3 ( Quentin and Grandhi, 2005 ) is a location-aware informa-tion system that links social networks with geographical places (people-to-people-to-geographical-places). The aim of this sys-tem is to strengthen the relationships among places and social groups. That is, it enables users to leverage location information into engagement in new social groups, as well as reinforcing existing social ties within certain communities.
 MobiSoc ( Gupta et al., 2009 ) is a middleware used to develop
Mobile Social Computing Applications (MSCAs). Its goal is to enhance the conformation of new social opportunities in physical environments. The process leverages information about people, social relations, and physical spaces. MSCAs developed from
MobiSoc maintain the social state of physical communities in relation to a place. These applications also try to augment the social state of communities by applying geo-social patterns extracted from users X  historical location information.
Gupta et al. (2007 ) developed a clustering algorithm that identifies semi-permanent social groups of people and the places where they commonly meet. For instance, this algorithm identi-fies places where students spend time. This information may be used to recommend new users, allowing them to enhance their geo-social experiences. This clustering algorithm uses co-pre-sence historical information.

A major drawback of MobiSoc, P3, and the work of Gupta et al. (2007 ), is that although these systems are able to identify typical activities performed in a place, they do not enhance spontaneous interaction of users, and do not suggest a selection of appropriate tasks.

Kang et al. (2005) propose an algorithm to identify meaningful places to users by analyzing a trace of coordinates. The contribu-tion of this work is to extend the traditional concepts of coordinates or landmarks attached to a place to the meanings that individual users associate with those locations. For instance, this algorithm attempts to extract user-level notions of a place like  X  X  X y place of work X  X ,  X  X  X he place we live X  X , or  X  X  X y favorite lunch spot X  X . Although such a concept enriches our idea of placeness with meanings attached to a place, it does not use this informa-tion to identify the most appropriate user-centric tasks, and does not allow users to dynamically bridge the gap with available services. 3. Three aspects of identifying composability in urban computing environments 3.1. Semantic elements rationale
The rationale that guides the identification of the essential semantic elements required to describe unit-tasks is taken from two sources: first, from a real dataset of users X  activities in urban environments known as Time-use Studies ( ATUS, The American
Time-use Study, 2007 ); and second, from the essential variables that affect and govern spontaneous social interaction among users. Those variables have been taken from existing empirical ethnographic studies about users X  behavior in urban environ-ments ( Granovetter, 1973 ; Oldenburg, 1999 ; Knox and Ozolins, 2000 ; McCullough, 2001 ; Banerjee, 2001 ; Carmona et al., 2003 ; Tamminen et al., 2004 ; O X  X eill et al., 2006 ; Paay et al., 2009 ; Kostakos et al., 2009 ).

Time-use Studies are publically available datasets with records of humans X  daily activities in urban and private environments, reported by hundreds of thousands of participants over decades.
Partridge and Golle (2008) discovered that there are two essential combinations of variables that are effective for use in recognizing user activities. The first combination is composed of the character-istics of the urban environment itself, in conjunction with the phase of the day when the activity is carried out. Another combination is composed of the age range of the user or social group performing the activity, in addition to the day of the week . Filtering by these two pairs of variables allowed recognition of activities with up to 80% accuracy on the basis of the ATUS records.

Regarding the social interactions of users, of particular interest are some empirical studies carried out either by analyzing users X  feedback data, logs about co-presence history, or by engaging in field observations. It has been determined that social ties among users in an urban environment are in a great majority of cases preferably governed by three types of social contexts: familiarity type , profile similarity , and favorability type among users. 3.2. Semantic elements of UrbComp environments
Spatial aspect of UrbComp environments  X  two major factors are used to describe the spatial aspect of an UrbComp environment object: spatial availability and environmental con-straints . The former describes the UrbComp in terms of its place type and absolute location. Place type is an ontology arranged by subsumption relationships. One property of this ontology is the place potential . This property is concerned with the most likely user behaviors or tasks determined by urban designers while manipulating environment settings ( Carmona et al., 2003 ; Paay et al., 2009 ). Values used in this paper to define the domain of the place potential property are borrowed from
McCullough (2001 ). On the other hand, the place type ontology is also described by the place category . This property is concerned with the symbolic representation of the place based on commonly used terms  X  bar, restaurant, museum, park, plaza, cafe  X  , and subway  X  among several other categories.
Finally, the place type ontology is also described by the geo-containment type property. This property refers to the physical granularity of space in urban settings. It is divided into outdoor type and indoor type . The latter in its turn is made up of subcategories arranged by partOf relationships, like building, floor, corridor, stairs, room, etc. The absolute location property is represented by GPS longitude and latitude . On the other hand, the environmental constraints factor is represented by ranges  X  lower and higher  X  of temperature , humidity and brightness , defined for each place (see Fig. 2 ).

Social aspect of UrbComp environments  X  the social aspect of the Urbcomp object is described by its level of publicness .
This refers to the publicness spectrum of the public realm ( Banerjee, 2001 ). A general categorization of this publicness spectrum may consider places ranging from absolutely public external spaces; to internal public spaces; to quasi-public places (also known as nominally public places ), where someone retains rights of access control, like University campuses; to private places ( Carmona et al., 2003 ; see Fig. 2 ).

Temporal aspect of UrbComp environments  X  the temporal aspect of an UrbComp environment is described by the temporal pattern of use factor. This factor comprises the dynamic seman-tic information that reflects the multiple potentials that a place may have at different times ( Kostakos et al., 2009 ). It refers to the dynamicity of UrbComp environments, in the sense that they have their own daily, weekly, and even seasonal rhythms.
The property that characterizes the temporal pattern of use factor is a tuple composed of season , day of the week , phase of the day ,and place potential ( Carmona et al., 2003 ;see Fig. 2 ). 3.3. Semantic elements of social groups
Social aspect of social groups  X  a first factor for this aspect is the set of social relationship types  X  familiarity type , favor-ability type , profile similarity  X  among users that may partici-pate in a potential social group. Second, this aspect is described by a characterization of the social group type .As for the familiarity type , it is first described by the level of familiarity property. This denotes the strength of the social tie between two users. Two users may be familiar if they have previous social ties and know each other very well. In contrast, two users may be perfect strangers , or people who have never had any contact with each other in the past. Moreover, a certain degree of knowledge among users in a specific Urb-
Comp environment, like a bus stop or the corridors of a school, converts them into familiar strangers ( Paulos and Goodman, 2004 ). As for profile similarity , this is concerned with the degree of similitude between every property of users X  profiles, and is made up of, among other properties: (1) preferences , which we describe as an independent ontology, (2) age range , (3) belonging to a place , insider or outsider to a place, since not all places are open to everyone, (4) gender ; (5) interest similarity , computed through the semantic distance among individual interests in a preference ontology, and (6) occupa-tion. Favorability between two users may be obtained from users X  feedback information about the performed activities. In this sense, a social group is comprised of users of a specific familiarity level, with similar profiles and high favorability.
On the other hand, the social group type factor is described by two properties: spontaneity level and social encounter type .
The former is concerned with characterizing the social group as ad hoc (spontaneous) or pre-existent . The latter is concerned with describing the type of shared interaction users potentially would carry out based on their personal and social character-istics, and the above factors that govern social encounters (see Fig. 2 ).

Temporal aspect of social groups  X  this aspect is described by the encountering frequency factor. This aspect is concerned with the frequency that best characterizes the realization of some type of encounter for a determined type of social group.
Values can vary from first time , rarely , and occasionally ,to regularly . This frequency is not associated with an actual social group. On the contrary, it is general enough to cover different social groups that fit into a specific type (see Fig. 2 ).
Spatial aspect of social groups  X  in this aspect it is necessary to identify the usage of a place for a specific type of social group. This information is embedded in the place usage factor, which is described by two properties: place usage intensity , and belonging to the place . As a specific type of social group may use a place with a certain intensity, the property place usage intensity takes values like first time , rarely , occasionally , and regularly. As for the factor of belonging to the place, since in practice not all places are open to everyone, the values for this property are defined as insider ownership , insider ,or outsider ( Carmona et al., 2003 ; see Fig. 2 ). 3.4. Semantic elements of unit-tasks
Spatial aspect of unit-tasks  X  the spatial aspect of a unit-task is described by two factors: environmental effects and favorable place . The former is concerned with the physical effects that a unit-task may generate in an UrbComp environment if it is executed. Consistent with the environmental constraints attached to an UrbComp environment, these effects consist of variations of the place context caused by changes of temperature , brightness , and humidity . These properties are defined as positive or negative in accordance with the incre-ment or decrement of each effect. Another type of environ-mental effect is that of the type of delivered content . This is actually an independent ontology that is concerned with modifications of the environmental context due to the delivery of acoustic , visual , or other types of contents that affect the human senses. As for the favorable place factor, it is concerned with the most appropriate UrbComp environment  X  or multi-ple environments  X  for a specific unit-task (see Fig. 2 ).
Social aspect of unit-tasks  X  this aspect is described by two factors: the social effect and the favorable type of social encounter . The former comprises the output publicness level effect , the social formality effect , the input publicness authoriza-tion level , and the output publicness authorization level . The rationale is that it is necessary to attach a publicness level to the input information of a unit-task. That is, users may find certain types of private information sensitive. Therefore, when such private information is manipulated, there are authorization levels to respect. On the other hand, it is also appropriate to highlight the social formality effects that outputs may produce in the environment. In certain cases, the delivery of content may violate the social formality attached to a place. In regards to the factor favorable type of social encounter , a unit-task may be more appropriate to support either a physical or a social encounter (see Fig. 2 ).

Temporal aspect of unit-tasks  X  in regards to this aspect, a unit-task object is described by two factors: favorable time of execution and temporal availability . The former indicates the times when it is more convenient to execute a unit-task.
This factor is composed of the properties that indicate the season , day of the week , and phase of the day . As explained in the beginning of this section, the rationale for including these temporal properties was obtained from Partridge and Golle (2008 ), an analysis of the Time-Use Studies dataset ( ATUS, The
American Time-use Study, 2007 ). The temporal availability factor is composed of the following properties: (1) availability of delivered content , (2) execution time of delivered content , (3) input processing frequency ,and(4) output availability fre-quency . The first property indicates the duration of content delivery by a specific unit-task . The second property measures thetimerequiredfromthepointatwhichaunit-taskisinvoked until it starts delivering content ( Ardagna and Pernici, 2007 ). In turn, the input processing frequency refers to the number of processed inputs during an execution of a specific unit-task, while the output availability frequency is the number of generated outputs in the same time-frame (see Fig. 2 ).

Another set of properties that does not fit into the categories supposed by the three aspects are the inputs and outputs of a unit-task, as well as its preconditions and effects , and some primitive properties like unit-task name and unit-task URI. Inputs and outputs are described in an independent ontology. Nevertheless, these properties are directly linked to unit-tasks, and also to some properties of the spatial, social, and temporal aspects of unit-tasks. In addition, a unit-task is also described by a property known as its structural type ( Jimenez-Molina and Ko, 2010 ; see
Fig. 3 ). This property indicates if a unit-task is an encountering method recommender ,a cognitive information delivery ,oran envir-onmental effecter . The first type is concerned with the required functionality for recommending a social encountering method among users of a social group, and the general purpose of carrying out that interaction. The second type is concerned with delivering to users useful cognitive information associated with the purpose of the encounter. The third type considers the functionality that generates physical effects in the UrbComp environment, like audio content that produces noise, an adjustment of brightness or temperature, or movement of objects in the space  X  opening/ closing of windows or doors, etc. Fig. 4 shows multiple examples of unit-task hierarchically arranged by subsumption relationship. 4. Composability metrics
The aim of having composability metrics is to measure the suitability of two unit-tasks  X  or two unit-tasks composites  X  X o operate conjunctly on the basis of the three aspects. Composites consist of a coordination of composable unit-tasks. 4.1. Interoperability based on social effects Let C A and C B be two unit-task composites, with ( I A , O ( I , O B ) denoting their inputs and outputs (IO), respectively. In the case of outputs of C B semantically similar to inputs or outputs of C , the social effect of C B may violate the publicness authorization level associated with the IO of C A . In addition, the publicness level is specific for each IO in each unit-task or composite. Therefore, in order to check the interoperability of C A and C B in terms of social effects, it is necessary to identify and analyze the publicness associated with the IO of the composites involved in the composi-tion. The rationale is that the new composite generated by interoperating C A and C B may not fulfill the publicness authoriza-tion level given to the information exposed to the UrbComp environment.

Let I A  X  i A 1 , ... , i A n , O A  X  o A 1 , ... , o A m In addition, let sm I A , O B  X  X   X  I n A , O n B be the computation of the semantic similarity among the inputs of C A and the outputs of C . This similarity is calculated as an ontological semantic distance ( Jimenez-Molina et al., 2009 ). In this case, it is calculated among the nodes of the IO ontology.

The semantically similar inputs of C A and outputs of C B represented by I A + I n A  X f i n A  X  n 1 r n  X  4  X  n 1 r p  X  , with i n A j A o n B j  X 8 j  X  1 , ... , n ity. In an analogous way, it is possible to compute sm O A
A , O nn B , such that O A
A unit-task X  X  IO with a private publicness authorization level can be exposed in the UrbComp environment only by outputs of an interoperable unit-task with a private publicness level effect . Otherwise, the social effects would violate the IO authorization level of the first composite. Another example is that a quasi-public publicness authorization level cannot be exposed in a public way, and so on.

On the other hand, C A and C B need to have the same values for their social formality effect property because a place may support different types of social formalities for different configurations of placeness context. In this way, there will be different sets of interoperable composites  X  in terms of their social effects  X  consistent with each type of social formality. Therefore, the task candidates that may emerge from the joining of these composites will be coherent with each of the social formalities supported by the UrbComp environment. 4.2. Interoperability based on temporal availability
This interoperability measurement consists of checking the consistency among the temporal availabilities between the outputs of C A and the inputs of C B . That consistency is obtained for each pair  X  O n A , I B  X  . That is, outputs of C A that are semanti-cally similar to all the inputs of C B  X  and that will eventually be interoperable in terms of the social effect factor. This assumes that all the inputs of C B are mandatory for its execution. However, the analysis may be extended to the case of optional inputs as well. Therefore, this assessing of interoperability needs to be carried out by analyzing the output availability frequency and the input processing frequency of C A and C B , respectively. There are concrete cases of interoperability between different values of availability and processing frequency of C A outputs and C respectively. In fact, an input with a continuous processing frequency may process outputs that are generated either con-tinuously, in a single way, or in an iterative way. However, an input with a single processing frequency cannot process outputs generated in a continuous or iterative way. In addition, an input with an iterative processing frequency is not able to process outputs generated in a continuous or single way. However, such an input may interoperate with an output that is generated in an iterative way as well, but it will be constrained to the actual values of the frequencies. That is, the number of generated outputs during one execution of the first composite needs to be equal to the number of processed inputs during one execution of the second composite.

This interoperability measurement based on the temporal availability factor may be extended to cases of asynchronous input processing. In such a case, generated outputs, for instance, may be stored in a buffer. 4.3. Interoperability based on environmental effects
The three aspects, and in particular the environmental effect factor, allow the selecting of unit-tasks that individually do not violate the environmental constraints of the place. However, the aggregated environmental effects of the composed unit-tasks may conjunctly violate the constraints anyway, for instance, con-straints regarding temperature based on an energy saving policy.
This is the case for additive effects like heat, brightness, and humidity, for which the interoperability analysis between the two composites C A and C B needs to make use of physical magnitudes to measure each of those effects  X  calories, candelas, and percentage of humidity, respectively.

This interoperability measurement may be extended for cases of co-existence of tasks in the same place  X  currently executing tasks or newly composed ones that would co-exist. Thus, the analysis should be conducted considering the aggregated environmental effects of co-existent tasks. In addition, the description of unit-tasks may be enhanced by considering t he availability frequency of environmental effects. This would allow the creation of composites in which non-interoperable composites with the same type of effects would interleave, respectin g therefore the constraints. In such a case, an analysis similar to tha t conducted for interoperability based on temporal availability may be integrated with this inter-operability measurement based on environmental effects. 4.4. Conflict analysis based on delivered content and environmental effects
This analysis of possible conflicts is conducted for environ-mental effects and the type of delivered content. The former is concerned with unit-tasks or composites that have a structural type that matches the environmental effecter . Clearly, in the previous analysis  X  interoperability based on environmental effects  X  the composition ensures that the constraints attached to the place are not violated. Nevertheless, this could be due to unit-tasks that have effects that are opposite. For instance, on the one hand, C A may affect the environment by making a room warmer. On the other hand, C B may make it cooler. If the aggregate effect respects the constraint related to temperature, such interoperation would be valid in accordance with the previous metric. However, these conflicting situations need to be avoided and reduced from the composite candidates. There-fore, the analysis of conflict based on environmental effects is concerned with checking that the effect types are not actually opposite. For that reason, the effect properties were defined as positive or negative (see Section 3).

On the other hand, conflicts between delivered contents are concerned with unit-tasks or composites in which the structural type matches the cognitive information deliverer . The co-existence of delivered contents, in general, compromises users X  level of attention. It does not allow users to focus properly on the delivered content. However, these potential conflicts are not strict for all users or situations. For instance, there are users who might be willing to receive two TV streamings at the same time.
Moreover, they might like to partition the screen in different proportions in accordance with their level of interest in the contents. In addition, some users might be willing to receive visual content like a computer game while receiving acoustic content like background music. The implementation of this metric requires interaction with the user in order to obtain his/ her preferences.

As stated in Section 3, content may also be described by properties in the temporal aspect. The following properties for delivered content are included in this aspect: (1) availability of delivered content  X  which refers to the duration of the content delivery, (2) delivered content frequency , and (3) execution time of delivered content  X  which is a metric about the expected time required from the point at which a request is sent to the unit-task or composite until the content is actually delivered ( Ardagna and
Pernici, 2007 ). In accordance with these properties, C A not conflict in some cases, even though they cannot co-exist. The reason is that the two types of content, despite the impossibility of their co-existence, may not conflict if they are delivered asynchronously. If two types of content are delivered in a continuous way, they will not have a chance to interleave asynchronously. This case is extended to any situation in which at least one continuous content delivery is involved because when content is delivered in a continuous way by a composite, when-ever another composite delivers content in a single or iterative way, there will be a conflict. On the other hand, situations that involve either single or iterative content deliveries need to be checked individually. This checking is conducted by using the availability of delivered content and the execution time of delivered content properties . The analysis consists of checking that contents from both composites are able to interleave, i.e., there are no time-windows of co-existence. 5. Unit-tasks composites generation cycle
This section describes the unit-task selection mechanism and the composition mechanism fed by these selected unit-tasks. The whole cycle to generate unit-task composites is depicted in Fig. 5 . 5.1. Unit-tasks selection mechanism
The input of this mechanism consists of the placeness context associated with the situation (factors and properties of the spatial, social, and temporal aspects, as stated in Section 3). The input also includes a set of potential social groups or individual users identified by the place-aware context manager.

On the other hand, the output of the mechanism consists of a set of available unit-tasks that reflects the placeness context and user or social groups X  requirements and information  X  like the appropriate type of social encounter, users X  familiarity and favor-ability, and users X  profiles. These selected unit-tasks are suitable candidates for conducting the composition of a major task. Such a selection is realized by semantically matching the placeness context and the users X  requirements for the unit-task ontology. We introduced this semantic, priority based matchmaking mechanism in our previous work ( Jimenez-Molina et al., 2010 ).
As stated in Section 3, this ontology is structured as a hierarchy of nodes (unit-tasks) arranged by subsumption rela-tionships. The upper part of this ontology  X  the generalized level  X  consists of coarse-grained unit-tasks. Unit-tasks that are more specialized, in terms of their functionality, are allocated in a layer called the specialized level. These specialized unit-tasks are finer-grained. In accordance with these levels, the unit-task selection mechanism is further divided into two phases (the generalized unit-task selection and the specialized unit-task selection). 5.1.1. Generalized unit-tasks candidates
This phase is concerned with identifying a subset of general-ized unit-tasks from the upper level of the unit-task ontology. It is done by semantically matching a set of primary variables from the placeness context that are the best in predicting users X  activities  X  see Section 3 for a rationale. These variables consist of: (1) the place type property of the spatial availability factor in the spatial aspect of the UrbComp environment object, (2) the phase of the day , and the day of the week of the favorable time of execution factor in the temporal aspect of the unit-task object, and (3) the age range of the similarity profile factor in the social aspect of the social group object. Let Q  X  ( q 1 , q 2 ) be these primary variables, with q 1  X  ( place type , phase of the day ) and q the week , age range ). Let N be the set of generalized unit-tasks in the ontology. The primary variables in q 1 are first semantically matched against the set N . Resulting nodes are further matched against the primary variables in q 2 . The semantic matching function, denoted by Match ( Q , N ), is defined and described in Jimenez-Molina et al. (2010 ). In particular, it is selected from a subset of totally matched unit-tasks for each age range a subsets are further constrained by the properties of the environ-mental constraint factor Cu associated with the UrbComp environ-ment object. This creates a family T  X  t a 1 , t a 2 , ... , t subsets of unit-task candidates.

The next step consists of expanding the generalized unit-tasks by running the specialized unit-task selection mechanism. 5.1.2. Specialized unit-tasks candidates
As for the specialized unit-task selection phase, it is done by reflecting the identified user or social groups X  requirements and information. These requirements consist of factors such as the social aspect in the social group object  X  users X  familiarity and favorability types, and users X  similarity profile . In particular, a different version of the unit-task selection mechanism is run for each type of social group.

The place-aware context manager generates three different types of social groups in accordance with the familiarity , favor-ability , and similarity profile factors. It starts grouping familiar users into several subgroups Gf j . Then, it arranges subgroups Gfs of familiar stranger users, while remaining users are allocated into subgroups Gs j of strangers. Each subgroup in its turn is defined in a way such that users who belong to it share social factors of similarity and favorability. Further details about user grouping are beyond the scope of this paper.

Support to social groups of familiar users  X  social groups do not necessarily need to conform to a specific age range. Thus, the identification of generalized unit-task candidates is started by analyzing the age homogeneity of each social group Gf j .Inthecase of homogeneous users in terms of their age a i ,thesubset t the generalized unit-tasks is selected for specialization. On the contrary, in the case of heterogeneous ages, the whole set T is selected for specialization. Paulos and Goodman (2004) have empirically observed users X  soci al behavior in UrbComp environ-ments. Their findings suggest that  X  X  X amiliar users who are aware of their co-presence in an urban environment will be most likely to prefer an identity-awareness physical encounter X  X  ( Jimenez-where r 1 is the inferred social encounter type variable in accordance with the familiarity factor . In addition, let r 2 be the preferences property in the similarity profile factor in the social aspect of the social group object. Moreover, let M be the set of specialized nodes in the unit-task ontology. Therefore, into the subsumed nodes of t
A T the semantic matching Match t a i  X  r 1 , M  X  is checked against the social encounter type variable. The inferred value of this variable for familiar users corresponds to the identity-awareness physical encounte r. Only unit-tasks with exact matches are selected, and these are denoted W D M . These unit-tasks (1) recom-mend that users carry out an identity-awareness physical encounter , and (2) are able to support such a physical encounter. Let
P  X  X  p 1 , p 2 , ... , p f  X  be the values of the preferences property. The semantic similarity sm ( P , V ) of this value is computed against the preference ontology F O , which generates the nodes V D F similarity represents the closet semantic distance between each p and the preference ontology F O . Therefore, the subset W is restricted by selecting the node s that match with the preferences V by applying Match W  X  r 2 , V  X  . This process generates the subset S
D W of specialized unit-task candidates. The rationale of match-ing against semantically similar preferences is that it allows the expanding of the set of specialized unit-task candidates (see Table 1 ).

Support to social groups of familiar strangers  X  in the case of a social group Gfs j of familiar strangers, a similar unit-task selection mechanism is applied. The only difference is that the social encounter type may be multiple depending on the location of the users. As stated in Section 3, ethnography studies have identified that familiar strangers have their own particular social behavior in UrbComp environments. Basically, they behave as familiars if a social encounter eventually occurs in a place different from the place where they usually have co-presence. Therefore, in such a case it is meaningful to define an identity-awareness social encounter . However, familiar stran-gers always keep a social distance in the place where they usually have co-presence  X  like the bus stop, or subway plat-form every morning. In this last case, it is meaningful to define an anonymous physical encounter or an anonymous virtual encounter  X  like sharing music files or playing on-line games conjunctly on their mobile devices.

Support for social groups of strangers  X  in the case of a social group Gs j of strangers, it is unlikely to get such users engaged in a physical encounter. Therefore, the specialization is done based on anonymous virtual encounters. 5.2. Unit-tasks composition mechanism 5.2.1. Reduction of unit-task composable space
Let S be the set of available, feasible unit-tasks of the place identified by the specialized unit-task selection algorithm. As stated in Section 3, a place may have multiple potentials. In addition, according to the favorable place factor in the spatial aspect, a unit-task may be appropriate to support multiple potentials of a place. This appropriateness reflects on the place potential ( pt ) property of a unit-task object. Therefore, appropri-ateness is meaningful to group unit-tasks that are semantically closer in terms of their place potential property. For instance, one of these groups may be formed of unit-tasks appropriate to support business, commercial, and shopping place potentials .On the other hand, another group may consider entertainment, leisure, or eating place potentials . For each of these groups the place potentials are of the same semantic nature in accordance with the place type ontology. Additionally, the place potentials listed in these examples may belong to the same UrbComp place. this grouping. Since unit-tasks support multiple potentials of a place, these subsets are non-exclusive. That is, a unit-task may belong to more than one S i , i.e., [ n i  X  1 S i  X  S , and \ these S i subsets is used to generate its own unit-task composites (configurations of interoperable and non-conflicting unit-tasks). Eventually, these composites may be aggregated to create differ-ent task candidates.

On the other hand, the generic structure of a task is composed of three parts (see Section 3): (1) encountering method recommen-ders , (2) cognitive information deliverers , and (3) environmental effecters . These categories are embedded in the structural type property of a unit-task object. Therefore, in accordance with these categories, each subset S i is further partitioned into three exclu-filtered out by matching the values of the structural type property. In order to make the cognitive information deliverers more focused, subsets are further divided on the basis of the place category ( pc ) that they support. For instance, unit-tasks that deliver information regarding restaurants, bars, museums, libraries, or hair shops are focused on specific place categories .In this way, B i is divided into non-exclusive subsets B ij ,( i These subsets are obtained by matching the values of the place category property. The subsets C ij (environmental effecters), ( i
A pt ), ( j A pc ), are determined in an analogous way ( Table 2 ). 5.2.2. Composability and conflict analysis for cognitive information deliverers
This subprocess performs an analysis of composability for unit-tasks that belong to the subsets B ij ,( i A pt ), ( j each IO interoperable pair of unit-tasks  X  X  t k B factor is analyzed (see Section 4.1). Pairs that are not able to interoperate under this social composability check are rejected as invalid composites. When there is a successful social interoper-ability between t k B the temporal availability factor is analyzed (see Section 4.2). Again, pairs that fail to meet this temporal analysis are rejected as valid composites. For resulting interoperable unit-tasks, a conflict analysis in terms of the content that the pairs deliver is conducted (see Section 4.4).

This analysis of composability and conflicts results in a set of non-conflictable, interoperable unit-task composites. These com-posites are conformed by composable, cognitive information deliverer pairs of unit-tasks. This set is further refined by recur-sively applying interoperability and conflict measurement for the resulting composites. The refinement stops when it is no longer possible to get composable composites ( Table 2 ).
 5.2.3. Composability and conflict analysis for environmental effecters
This subprocess makes use of unit-tasks that belong to the subset Cij ,  X  i A pt  X  ,( j A pc ). That is, unit-tasks defined to produce environmental effects in the place. Therefore, for each IO inter-operable pair of unit-tasks  X  X  t k C an analysis of conflicts in terms of environmental effects and environmental constraints is conducted (see Section 4.3). If a case of effects conflict or constraints violation is identified, the pair is rejected as a composite candidate. The analysis is applied until no more composites can be generated ( Table 2 ). 5.2.4. Unit-task composite example
Let X  X  consider a user has a plenty of time for waiting in a bus stop. Let X  X  suppose the context manager has identified a social group of strangers, while the inferred social encounter type would correspond to a virtual encounter. In such a situation, Fig. 6 illustrates an appropriate unit-task composite.

In this example, matchMusicList&amp;Files , and PlayMusicOnSmart-phone are interoperable in terms of publicness effects. The reason is that (1) the publicness authorization level of the first unit-task input is set to private, since the music list can only be shared among the participants of the social group of strangers, (2) analo-gously, the publicness effect of the first unit-task output is set to private by the same reason, and (3) the publicness effect of the second unit-task output also is set to private, because the music stream is played on the smartphone, a personal mobile device.
In addition, executeGameOnSmartPhone , and PlayMusicOnS-martphone have non-conflictable delivered content. In fact, even though the availability of the delivered content is set to contin-uous for both unit-tasks, their types are different, that is, they consist of an audio content co-existing with a visual content. The rest of the unit-tasks of the composite are interoperable in terms of their input and outputs. Finally, Fig. 7 shows the composite definition in the Business Process Execution Language (BPeL). This definition represents the coordination of the unit-tasks using different control-flows and conditions. 6. Implementation and experimental results 6.1. Implementation
The task selection algorithm and the composition metrics were implemented in two modules called the task selector and the task composer, respectively. Both modules were contained in a major module called the task manager. These modules were embedded into the framework for service provision for Ubiquitous and UrbComp environments, which framework is described in
Jimenez-Molina et al. (2007 , 2009 , 2010 ). This framework is a part of the Ubiquitous and UrbComp Middleware shown in Lee (2004 ) and Huerta-Canepa et al. (2008 ). The algorithm and the framework were implemented in Java. The unit-task ontology and other ontologies were edited using Prote  X  ge  X  ( 2011 ). The semantic reasoning to select unit-tasks was developed using Jess ( 2011 ). The ontology data was represented in The OWL Web Ontology
Language (2011 ). 6.2. Experimental results
The aim of this section is to report a set of experimental results obtained from both the unit-task selection mechanism and the unit-task composites generation mechanism. Results were eval-uated separately by running them on a Windows XP platform with an Intel Pentium 4 (3.33 GHz) and 896 MB of memory.
In the first set of experiments, the performance of the unit-task selection mechanism was determined. It can easily be observed in
Fig. 8 that this performance depends on the number of nodes in the unit-task ontology. The mechanism was tested with different numbers of simulated nodes: 200, 300, 400, 500, 600, and 700 nodes. The input data was randomly chosen from 65,635 records of users X  tasks found in the 2007 ATUS Time-use Study ( ATUS, The American Time-use Study, 2007 ).

The algorithm was compared with that used in the case without discrimination between primary and secondary proper-ties (see Sections 5.1.1 and 5.1.2 for the rationale). Fig. 8 shows that the execution time is proportional to the number of nodes in the unit-task ontology. In addition, this figure shows the effec-tiveness of prioritizing the properties of tasks. The result indicates that the prioritization of the properties contributes to a significant decrease of the execution time of the algorithm because the number of candidate nodes of that the unit-task ontology must consider can be narrowed down quickly by using the primary properties, matching the secondary variables with a smaller set of candidates.

The remaining set of experiments was conducted through a simulation of a crowded space, in order to prove the effectiveness of the algorithm under realistic settings of UrbComp environ-ments. First a set of events was simulated that represented individual users and social groups that arrived at a specific place.
This set of arrivals was represented as an exponential probability distribution, with 170 events emerging each minute ( Yamada et al., 2005 ). The simulation was done to cover a peak period of 3 h, generating 30,600 logs. The values of the contextual informa-tion for each event were randomly assigned from the records of the 2007 ATUS Time-use Study in a subway station location. The logs generated by this initial simulation were utilized to test the composition mechanism under intense concurrency of events. In parallel, a set of 100 unit-tasks were simulated by randomly assigning values to their properties, respecting the domains stated in Section 3. A traditional Input/Output checking mechan-ism was selected as the baseline method to compare the compo-sition mechanism.

Having generated the required data, the second set of experi-ments consisted of a measurement of the performance of the composability algorithm. In that sense, the execution time for the generation of composites was evaluated with an increased number of execution threads. This metric is relevant to the qualifying of the composition algorithm X  X  scalability performance when all the threads work concurrently to fully utilize the system resources. Such a case is reasonable in urban environment settings with hundreds of users. This was done by grouping events with time between arrivals of less than 500 ms, in which each event represents a thread. Such a time period ensures that there will be a pool of threads containing events that are close enough in time to each other. Then, the average time for each group of threads was computed. Fig. 9 shows these results for the baseline method with a dotted line, and the composition algo-rithm with a solid line. It can be observed that, with the increase in threads, the performance in most cases goes up for both methods. However, the tendencies reveal that the composition algorithm is not particularly sensitive to the thread number. Its execution time remained steady for different numbers of applica-tion threads, with a reasonable execution time of less than 1 s in a majority of cases. In contrast, the baseline method shows perfor-mance degradation with an upward trend. This clearly is due to the fact that the baseline method does not reduce the composable space at the beginning with the place potential and structural type properties. Moreover, the baseline method performance decreases steeply after the pool with seven threads, but then it increases sharply to a normal value. This anomaly can probably be attributed to the increased overhead in thread synchronization and scheduling (see Fig. 9 ).

The third set of experiments evaluated the throughput of the composition mechanism measured as the number of transactions per second. That is, the intention was to inspect the evolution of the number of threads processed in concurrency against the simulation time, in order to verify the stability of the mechanism.
Fig. 11 clearly shows the superior throughput of the composa-bility mechanism, which remained steady during the entire simulation time. It is necessary to report that during the simula-tion one event was deleted from the graph data since the program experienced an out of memory event. However, this mishap occurred only one time, which shows the robustness of the mechanism to work under intense concurrency.

In the fourth set of experiments, we analyzed the efficacy ratio of the composability mechanism. This ratio is defined as the number of valid operations resulting for the total set of operations performed while checking the interoperability and conflicts of each generated composite. An operation is defined as any of the composability metrics. The composition algorithm shows an appropriate efficacy ratio due to the checking of all the compo-sability metrics. This ratio reaches 85% on average. However, this ratio cannot reach 100% since not all of the selected unit-tasks can be considered composable, which discrepancy generates a set of unit-tasks that needs to be rejected or suggested as partially valid to the users (see Fig. 10 ). 7. Conclusion
This paper leverages task-oriented computing to realizing the spontaneous composition of service sequences required by users or social groups in UrbComp environments. This task was accom-plished by describing the essential semantic elements of unit-tasks, social groups, and UrbComp environments in accordance with social, spatial, and temporal aspects. In addition, this paper describes a set of composability metrics to measure interoper-ability or to detect conflicts between unit-tasks or unit-tasks composites. These metrics are based on the three aspects men-tioned above, and correspond to: (1) interoperability based on social effects of unit-tasks, (2) interoperability based on temporal availability of unit-tasks, (3) interoperability based on environ-mental effects of unit-tasks, and (4) conflict analysis based on delivered content and environmental effects of unit-tasks. This paper also describes the spontaneous task composition mechan-ism, highlighting its major steps. First, this paper extends the semantically based unit-task selection mechanism that was proposed in our previous work. This mechanism is composed of two major phases in the selecting of unit-tasks, and makes use of the placeness context and the characteristics of social groups.
Then a reduction of the unit-task composable space based on place potentials and the structural types of unit-tasks was con-ducted. Having defined smaller and more focused sets of the unit-task, an analysis to check composability and potential conflicts among unit-tasks or unit-task composites was conducted.
A performance analysis for the unit-task selection showed an appropriate time-overhead for this mechanism. This analysis also confirmed the suitability of prioritizing the filtering by the primary properties that are best in predicting users X  activities (place type, phase day, day of week, and age range). Also, a simulation of arrivals at a crowded place showed a suitable performance for the unit-task composition mechanism in com-parison to the baseline method of traditional Input/Output checking, as well as the evolution of its throughput, and the efficacy ratio measured as the number of valid operations result-ing for the total set of operations.

This research is currently being extended to a task prediction mechanism based on users X  activities recorded on the ATUS Time-use Study ( ATUS, The American Time-use Study, 2007 ). The objective of this mechanism will be to extract users X  behavioral patterns, which may improve the effectiveness of the sponta-neous task composition mechanism. In addition, we are applying a cognitive resource aware approach to reconfigure and optimize the unit-task coordinations obtained by the unit-task composition mechanism reported in this paper.
 Acknowledgments
This work was supported by the IT R&amp;D program of MKE/KEIT under Grant KI001877 (Locational/Societal Relation Aware Social Media Service Technology). This research was supported by the
National IT Industry Promotion Agency (NIPA) under the program of Software Engineering Technologies Development. Multiple discussions with Gonzalo Huerta-Canepa have benefitted this research. We thank Juan Pablo Duarte and Gun-Woo Park. References
