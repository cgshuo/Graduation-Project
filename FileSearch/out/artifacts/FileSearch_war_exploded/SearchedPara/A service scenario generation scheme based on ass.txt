 Kyung Jin Kang, Borey Ka, Sung Jo Kim n 1. Introduction Recently, various experimental systems ( Hengstler et al., 2007 ;
Fleck and Strasser, 2008 ) in a smart home environment have been investigated to deal with monitoring dangerous situations or the health of the elderly and disabled people. As desirable features of these systems, Stanford (2002) proposed automated appliance control using smart home technology along with movement and health monitoring, remote call system for requesting helps, etc.
Nugent et al. (2008) proposed that future smart homes need to provide features which help daily life activities of the elderly people. Moreover, Chan et al. (2008) claimed that the investiga-tion is in need of identifying lifestyle and intention of home users in detail. Especially, a surveillance system for elderly should be devised so that home appliances operate more intelligently, since they tend to feel more uncomfortable in their movement than young people. Therefore, it is important for the surveillance system for elderly to provide not only surveillance services but also intrinsic smart home capabilities. Although many research-es( Lee and Kim, 2007 ; Moon et al., 2005 ; Kryvinska et al., 2010 ) have investigated how to support interoperability among home appliances using heterogeneous middleware on a home network system, there are few researches on automatic generation of service scenarios for their automated operations based on their usage patterns and preferences.

The purpose of a smart home is basically to provide home users with an automated environment, in which a pre-defined service scenario can be carried out according to the time and/or the status of a specific appliance. The service scenario can be regarded as a predefined sequence of operations which home appliances should follow without intervention of home users. The main goal of this paper is to propose a scheme to automate generation of service scenarios, since it is infeasible to prepare in advance all service scenarios that may be required by home users. Furthermore, it is not reasonable to regard a home environment as a genuine smart home environment as long as the users are obligated to construct or alter service scenarios by themselves. The most important fact to consider is that home appliances may operate more intelligently, if we automate generation of service scenarios from raw data, which can be obtained from a surveil-lance system.

Service scenarios can be classified into time, synchronization, or asynchronization context as in HOMI (Home network Middle-ware Interoperability) ( Lee and Kim, 2007 ). The time context is defined as automated operations of appliances performed at specific times, while the synchronization context is defined as operations of an appliance performed simultaneously when a certain appliance reaches a particular status. On the other hand, the asynchronization context defines operations of several appli-ances, which can be triggered independently when a certain appliance reaches a particular status. Scenarios based on the time context can be generated by the existing scheme proposed for similarity measure for sequence data ( Pandi and BehrouzMinaei, 2011 ; Kang and Yong, 2010 ) or usage pattern analysis scheme ( Kim and Son, 2009 ; Heierman and Cook, 2003 ). However, it is not appropriate to utilize the above schemes for automatic generation of scenarios based on the other contexts which are defined by the relationship between home appliances, because they do not depend on the time context, but on the other appliances.
This paper proposes a new scheme, which translates associa-tion rules mined from transactions, which are generated from snapshots to the statuses of all appliances periodically at a specific time interval in a smart home, to service scenarios.
However, it is difficult to grasp the dependence among the appliances, since existing association rule mining algorithms generate the rules by using simply the probability of items in a transaction. In order to resolve this problem, assuming that a status change of an appliance can be regarded as an event, this paper proposes a scheme to determine the level of independence among different events using hypothesis testing. Our scheme utilizes p-value ( Devore, 2011 ) used in hypothesis testing for calculating a confidence interval proposed by conventional asso-ciation rule mining algorithms. In our scheme, we generate association rules using dependency among a set of events if their p-value is less than or equal to a certain threshold value.
For performance comparison between an existing scheme used by AprioriHybrid algorithm(henceforth referred to as the AH algorithm) ( Agrawal and Srikant, 1994 ) and our proposed scheme utilizing hypothesis-test-based algorithm(henceforth referred to as the HT algorithm), we first compare test results using log data on appliance status generated by a home network simulator(-
Wang and Kim, 2008 ) with those utilizing a transaction database commonly used by association rule mining algorithms. We then check if the HT algorithm generates more useful association rules which specify dependency relations among appliances more clearly than the AH algorithm by adjusting confidence levels.
Even though performance degradation may occur due to change in the confidence level, its impact is not significant since service scenario generation is not a time-critical mission that can be deferred until the main control system such as a home gateway becomes idle.

Therefore, generation of service scenarios based on either synchronization or asynchronization contexts can be automated using our proposed scheme without intervention of home users in a future smart home environment. To be specific, a smart home system can be built conveniently for home users since its manufacturer may allow them to determine acceptance or rejec-tion for each of service scenarios generated by utilizing our proposed scheme at its initial installation.

More convenient smart home environments can be con-structed for the elderly people through a surveillance system, if automated services are supported on the system by using usage information of home appliances, which help home users to monitor their home. When our proposed scheme is applied to a surveillance system, we can also achieve automated operations of appliances in the system through service scenarios generated from log data by our proposed scheme, after adding an additional function to collect log data on status changes of appliances to a home gateway.

This paper proceeds as follows. After discussing previous works on automatic service scenario generation in Section 2 ,we propose a new scheme for service scenario generation in Section 3 . Section 4 compares the performance between the AH and HT algorithms in terms of the usefulness of generated association rules and the generation times of the rules. Finally, Section 5 concludes our work and suggests some future research directions. 2. Related works This section introduces user-pattern analysis method ( Kim and
Son, 2009 ) and episode discovery method ( Heierman and Cook, 2003 ) among related works on automatic generation of service scenarios based on their usage patterns and preferences. 2.1. User pattern analysis method
In order to provide intelligent services to home users, the user-pattern analysis method saves their behavior patterns in a tree structure and predicts their next behavior using histograms obtained from the frequency of the pattern occurrence. As shown in Fig. 1 , an ontology on objects corresponding to statuses and functions of sensors and appliances, activities that a home user may take at home, and services are described by OWL (Ontology
Web Language). The identifier (ID) of a home user activity, the ID of a service executed by the activity, and relevant object IDs are stored in a database in chronological order.

Once the IDs of the activities, services and objects have been saved in the database, the user pattern analysis module analyzes the patterns of a home user. Fig. 2 shows a conceptual diagram of the module, in which a i ( i  X  1, y , 11) of the RDF (Resource
Description Framework) model ( Suarez-Figueroa et al., 2011 ) represent user activities. The activity sequence generator builds the RDF model from an activity tree using the start and end time of each activity. Since the activities have been sorted into chronological order, they can be transformed into a tree by  X  X  X ext
Activity X  X  attribute of the RDF model. After the tree is built, the sequence histogram generator produces a histogram of user activities with respect to leaf nodes. The histogram represents how many times a series of user activities follows the same path from the root node to each leaf node.

Next, this module extracts patterns which have an activity pattern index ( Kim and Son, 2009 ) beyond a certain threshold.
Then, it checks if there is any pattern starting with an activity of a home user from the extracted patterns. If that is the case, appliances operate following their saved temporal order. How-ever, utilizing the frequency of an activity pattern to measure its significance is controversial, because users may not understand why a specific appliance gets started, unless they are familiar with the order of each pattern in advance. 2.2. Episode discovery method
This method is similar to user pattern analysis method in that it also tries to improve the convenience of a smart home environment by discovering regularly repeated usage patterns of appliances. Also, it is similar to our method in that it attempts to find service scenarios by analyzing appliance usage log data collected from a home network environment using an association rule mining algorithm. Using the procedure below, this method discovers an episode from a log stream S composed of m events e
E ( i  X  1, y , m ) that may occur sequentially for a given period of time, where E is a set of all events that may occur in a home; first, the entire log stream S is partitioned into a set of episodes { P each of which contains the largest number of events that may belong to a specific sliding window with a fixed time interval.
Fig. 3 shows an example of two episodes, P max 1 ( e 1 , e
P max 2 ( e 3 , e 4 , e 5 ), among all episodes partitioned from stream S ( e e , e 3 , y , e m ).

After stream S is partitioned into a set of episodes, association rule mining algorithms accept all events e i ( j  X  1 y m ) in episode P max and the episode itself as items and as a transaction, respectively. Heierman and Cook (2003) replaced the calculation method of the confidence level used by existing association rule mining algorithms with a new method which utilizes the number of transactions to which a specific episode belongs and the number of items in transactions, because as the number of transactions which contain the items in an association rule gets larger and as the number of items in the transactions approaches to that of the rule, the degree of importance of the rule becomes higher. If we adopt another method for calculating the confidence level of algorithms for association rule mining which is different from the method used in existing algorithms, some performance degradation should occur since we cannot utilize Apriori algo-rithm ( Srikant et al., 1997 ), which does not calculate unnecessary conditional probabilities for performance improvement based on the relationship between prior probabilities. In order to compen-sate performance loss to some extent that may occur due to not using Apriori algorithm, Heierman et al. do not calculate some of confidence levels based on the relationships between subsets and the superset of the items belonging to an association rule.
In fact, both user pattern analysis method and episode dis-covery method attempt to formalize the activities of a home user which are repeated on a daily or weekly basis. The formalized activities can be used to improve the level of automation of the smart home by using temporal information such as the start and end time of a pattern. Consequently, the two methods can be utilized for generating time contexts of HOMI ( Lee and Kim, 2007 ), but not for generating synchronization and asynchroniza-tion contexts which define dependence among appliances. 3. A new scheme for service scenario generation
In this section, we propose a scheme for translating association rules mined from transactions into service scenarios, after extracting them from appliance usage log data which can be collected from a smart home environment. Since it is inappropriate to apply the minimum confidence level ( Agrawal and Srikant, 1994 )usedby existing association rule mining algorithms to measuring confidence levels of association rules in a smart home environment, we show that the number of association rules generated by our proposed scheme can be controlled by utilizing p-value of a hypothesis test as an alternative way to adjust the confidence levels. 3.1. Translation between service scenario and association rules
This section shows that service scenarios can be translated into association rules. It also shows that the other way around is possible. A service scenario can be regarded as the operation of other appliance triggered when the status of a certain appliance reaches a specific state.  X  X  X entence 1 X  X  below is an example of asynchronization context written by HOMIL (HOMI Language) ( Lee and Kim, 2007 ).

Sentence 1. Execute deviceA.method1, deviceB.method2 if deviceC.state1  X  X  state X  X  X  X entence 1 X  X  implies that method1 of deviceA and method2 of deviceB can be triggered in random order if the status of deviceC X  X  state1 becomes state X . The only difference between synchroniza-tion context and asynchronization context is whether two or more methods are triggered sequentially one at a time or independently. Two types of contexts are identical in that they trigger a method of an appliance according to its status, resulting in its status change.

In general, association rules are represented in the form of  X  X  X entence 2 X  X  in order to imply that Y also occurs if X occurs. Sentence 2. X ) Y
Supposing that we know in advance that triggering of each method in  X  X  X entence 1 X  X  changes the status of a device as shown in Table 1 , called the Method-to-Status matching Table(MST),  X  X  X entence 1 X  X  can be replaced by  X  X  X entence 3. X  X  In other words, using the MST, we can determine which method triggers status changes of home appliances recorded in log data.

Sentence 3. deviceA.state1  X  state Y and deviceB.state2  X  stateZ if deviceC.state1  X  state X  X  X  X entence 3 X  X  can be rewritten in the form of association rules like  X  X  X entence 4. X  X  Since only the order of antecedents and consequents is different in both sentences, the other way around is also possible.

Sentence 4.  X  X eviceC.state1  X  state X  X  )  X  X eviceA.state1  X  state Y and deviceB.state2  X  stateZ X 
Therefore, when a smart home system is initially installed, if we can construct the MST in advance which contains status changes triggered by a method of each appliance, association rules mined from transactions can be translated into service scenarios by
Algorithm Translation as shown in Fig. 4 . The algorithm expects the ordered pair of association rules and the MST as its input. Note that an association rule consists of a set of antecedents and a set of consequents, while the MST consists of pairs of (method, status).
When association rules and the MST are input into the algorithm, we concatenate all methods, each of which triggers status changes in a set of consequent, one at a time into a single string(Step 2 5).
Next, the conditions used for triggering the methods are concate-nated one at a time at the end of the string (Step 7 X 9) in the algorithm. For example, assuming that association rules and the
MST are ({LivingRoomLight.Power  X  on, PressureSensorOnCouch.Sta-te  X  pressed}, {Tv.Power  X  on}) and (Tv.TurnOn, Tv.Power  X  on), respectively, the corresponding association rule can be translated into a synchronization context:  X  X  X xecute Tv.TurnOn if LivingRoom-
Light.Power  X  on and PressureSensorOnCouch.State  X  pressed X  X  3.2. Generation of association rules
An item used by an association rule mining algorithm and a certain status value of an appliance in a smart home are equivalent in the sense that both of them belong to a set. For example, one activity that a customer purchases a radio and put it into his or her shopping cart as an item and another activity that a home user changes the status of TV by turning it on can be regarded as being equivalent, since there is no difference between them in that they both belong to a set.

Log data which are generated from a smart home consists of status changes of appliances over time, and their structure is totally different from that of transactions needed for association rules mining. Since a transaction assumes a form of set, we need a set of status changes rather than a simple collection of individual status changes for association rule mining. Therefore, it is neces-sary to extract a set of data from log data.

We now explain the structure of log data on status changes of home appliances and how to construct a transaction database from the log data. 3.2.1. The structure of log data
Status changes of appliances over time can be recorded in log data as shown in Table 2 , each record of which consists of four fields such as time stamp, appliance name, status name, and status value; for example, a humidifier was operating at 4:03:17 a.m. on January 1, 2009.

In association rule mining algorithms, it is more important to identify whether or not a specific item belongs to a set than to know when the item is inserted into the set. This type of log data is suitable to analyze an event that a certain status of an appliance has been changed over time, but not sufficient enough to be used as transactions needed for generating association rules. As a set of selected items, a transaction is basically used to measure how many times each item has been selected. Therefore, it is necessary to generate transactions from log data on status changes of appliances over time. 3.2.2. Generation of transactions
A transaction in existing algorithms for association rules mining is a subset of a set of items at a given specific time.
Suppose that a customer purchased 10 products at a supermarket, in which 50 products are available for sale. Then, the set of items consists of the 50 products, while the 10 products purchased by a customer can be regarded as a single transaction. In a smart home environment, a set of items corresponds to statuses which either appliances or sensors may have, while transactions correspond to the statuses of appliances selected by a home user. It is not easy to use log data itself as transactions, because it is generated only once when the status of an appliance is changed. For example, the only item that a user selects is  X  X  X he power of TV is on X  X  from the time when the user turns on TV until the TV is off, since a log record is generated only once when the user turns on the TV. Therefore, in order to generate transactions from log data, since it is necessary to keep continuously the status of an appliance once it has been changed, transactions are to be saved in the form of snapshots of appliance statuses in a smart home environment.
Since transactions used by existing association rule mining algorithms consist of asynchronous events like product purchas-ing, transaction generation time is not important. However, since transactions should be generated periodically in the form of snapshots from log data, the transaction generation cycle greatly influences the item occurrence frequency. In other words, in case of an appliance of which status is changed frequently, the cycle should be short to reflect the status changes as correctly as possible; otherwise, we had better increase the cycle to get expected performance by reducing the number of generated transactions during a specific time period.

The criteria proposed in this paper to determine whether or not to generate an association rule is the item occurrence frequency and whether or not two distinct events are mutually independent. If the generation cycle is shorter than the duration time of a particular activity of a home user, it does not greatly affect performance for association rule generation since the status changes triggered by the activity will get reflected in a transaction. Accordingly, taking into account performance of a smart home system to be installed, transactions may be generated either every second or every minute. Fig. 5 shows the GenerateTransaction algorithm for generating transactions. Input log data for the algorithm consists of ordered quadruples of (time stamp, appliance name, status name, status value). A snapshot is a set of ordered pairs as (appliance name-status name, status value), where implies concatenation of two strings. Note that transaction T is a set of snapshots, and c is the transaction generation cycle.

The algorithm first attempts to find s from set S , whose first element is appliance name status name obtained in Step 03(Step 11). If found, s  X  is created by replacing the second element of s by the current status value of an appliance (Step 16); otherwise, a new snapshot is inserted into set S (Step 13). Starting from the second record of log data (Step 04), if the time interval between the current and previous log records is greater than cycle c (Step 05 06), it is necessary to insert one or more snapshots into T (Step 07 09) as many times as transactions are supposed to be generated during the corresponding interval. 3.3. Confidence level
Existing association rule mining algorithms generate associa-tion rules by using given minimum values of the confidence and support levels ( Agrawal and Srikant, 1994 ), which are represented by P ( Y ) and P ( Y 9 X ), respectively, for an association rule X ) Y , where X and Y are itemsets (all set of items). In other words, the confidence level for an association rule X ) Y is the probability that both status X of an appliance and status Y of the other one belong to a same transaction. The higher the confidence level for X ) Y , the higher the probability that both X and Y are likely to be included in a transaction at the same time; however, the level of dependence between the two appliances cannot be measured. For example, if the support level P ( Y ) is equal to the confidence level P ( Y 9 X ) for association rule X ) Y , since the hypothesis of condi-tional independence is satisfied, X and Y can occur independently regardless of P ( Y ) and P ( Y 9 X ). Consequently, it is hard to deter-mine if a status change of an appliance depends on the other appliance solely based on P ( Y 9 X ). Furthermore, while the number of items to be selected is always equal to the number of appliances according to the GenerateTransaction algorithm, var-ious numbers of items can be selected in existing association rule algorithms. Therefore, we attempt to measure the confidence level necessary for generating association rules based on depen-dence among appliances. In other words, only when two events are dependent on one another, association rules are to be generated. 3.3.1. The hypothesis for calculating confidence level
While existing association rule mining algorithms try to estimate what is the possibility that different items are selected at the same time, we attempt to predict how the status of an appliance is affected by the status change of the other appliance imposed by a user in a smart home environment. That is, our interest is not whether or not the statuses of appliances are changed at the same time, but whether or not the status change of an appliance affects the status of the other appliance.
In this respect, the confidence level in association rule mining can be redefined as the probability that the other item is selected after an item has been selected rather than as the probability that all of them are selected simultaneously. The probability that the status change of Y may occur after another status change of X has occurred is higher than the probability that the status change of Y may occur, if P ( Y 9 X ) is higher than the support level P ( Y ) for association rule X ) Y . We then conclude that the status change of a particular appliance of X triggers another status change of Y .
Therefore, we will define the confidence level appropriately using null hypothesis ( H 0 ) and alternative hypothesis ( H 1 ) as defined below:
H : P  X  Y  X  o P  X  Y 9 X  X 
H : P  X  Y  X  Z P  X  Y 9 X  X 
P-value , of which range is [0,1] among statistical values used in hypothesis testing, is defined as the probability to choose alter-native hypothesis even though null hypothesis is true. In other words, p-value is the cumulative probability that a normal random variable X is greater than or equal to P ( Y 9 X ) on a certain probability distribution with mean P ( Y ). Since the smaller the p-value is, the higher the possibility that null hypothesis is true, if (1 p-value ) is defined as the confidence level of null hypothesis, it is feasible to conclude that there is stronger dependence across two events as the confidence level gets higher and higher. 3.3.2. Calculation of confidence level
In order to generate association rules based on conditional independence between different events, this paper proposes a scheme for calculating the confidence level of association rules using a p-value threshold obtained from hypothesis testing for independence between items. In order to generate an association rule  X  X ) Y  X , we utilize p-value , which satisfies a hypothesis that
P ( Y 9
X ) is higher than P ( Y ) rather than utilizing a threshold value of conditional probability P ( Y 9 X ) as the confidence level as before.
For hypothesis testing for two probabilities, we need parameters such as the averages and the variances of them. Supposing that itemsets (i.e., status changes of appliances) follow the binomial distribution, we calculate the confidence level using a threshold value ( p-value ) needed for testing null hypothesis of P ( Y ) based on the normal distribution model. In the binomial distribu-tion, the average of E ( Y ) and the variance of S 2 ( Y ) for the probability P ( Y ) for event Y can be defined as Eq. (1) and (2), respectively, and the binomial distribution can be approximated by the normal distribution model for n , which is greater than 50[13]. Therefore, the confidence level C ( X ) Y ) for an association rule  X  X ) Y  X  can be normalized using with Eq. (3) E  X  Y  X  X  P  X  Y  X  X  1  X 
S  X  Y  X  X 
C  X  X ) Y  X  X  P  X  Y
Fig. 6 shows a hypothesis-based association rule mining algorithm derived from the AH algorithm. Table 3 shows defini-tion of notations used in the algorithm where X is an itemset, T is a transaction, which is a set of items, D is a set of transactions, and min_sup is the minimal support level. Large itemsets ( L k itemsets with the minimum support level and k -itemset is an itemset with k items. C k is a set of candidate k -itemsets, each of which can possibly become large k -itemsets. Finally, H m consequent m -itemsets, each of which support level is greater than min_sup .

The algorithm first generates universal item set I from D (Step 02), and large k -itemset L k for each k , where 1 o k o 9 utilizing a function itemset_gen , which generates large k -itemsets
L using the definition in Table 3 (Step 03 04). Next, it generates the initial consequent itemsets H 1 from element l of L k function consequent_gen , which generates consequent m -itemsets
H m as defined in Table 3 (Step 06), before invoking procedure ap-genrules (Step 07). Procedure ap-genrules finds the position hypo_minconf , of which lower tail area is equal to min_conf (i.e. 1 p-value )(Step 13), and calculates P( h ) and P( h 9 l h ), which are needed for hypothesis testing(Step 14 X 15). It then normalizes the probability P( h 9 l h ) for P( h ) with respect to the average (Step 16), and generates an association rule  X  l h ) h  X , only if normalized position of P( h 9 l h ) is greater than hypo_minconf (Step 17). Finally, the procedure generates a new consequent ( m  X  1)-itemset H m  X  1 (Step 19 20), before recursively calling itself(Step 21). 4. Experiments
In this experiment, we first show that our proposed scheme is more efficient in generating association rules from a transaction database obtained from log data occurring from a smart home system compared to the AH algorithm, and then analyze the time for generating large k-itemsets, which is critical to generate association rules. 4.1. Experimental environment
The experiments progress in two steps on a hardware platform, which consists of Intel Q6600 CPU and 4GB memory, with Windows Server 2003. At the first step, large k-itemsets are generated by applying the Bodon X  X  method ( Bodon, 2005 ) to a transaction database, which is generated by the home network simulator ( Wang and Kim, 2008 ) designed based on DEVS (Discrete Event System) ( Nutaro, 2008 ), and to another transaction database, which was used by the AH algorithm. At the second step, association rules are generated by utilizing the AH and HT algorithms.

We select T40I10D100K.dat ( Agrawal and Srikant, 1994 )asa transaction database which contains a relatively large number of itemsets among transaction databa ses frequently used by existing association rule mining algorithms. We also construct a transaction database ( HOME_EVENT.dat ) using log data generated by the simu-lator for a smart home environment. This database consists of a total of 100,000 transactions, each of which contains items. The transac-tions are produced by generating random numbers following a normal distribution with mean 40 and variance 10 out of 1000 items.
Even though it is desirable to obtain log data from appliances in a real smart home environment whenever their status changes are trig-gered, it is infeasible to collect such log data since not only is it hard to locate full featured smart homes but we need a transaction database of which size is as much large as an actual transaction database used by existing association rule mining algorithms for a meaningful test. For this purpose, we generate log data of 100,000 records through the simulator, whi ch features various home appli-ances. Boilers, air-conditioners, hum idifiers, dehumidifiers, tempera-ture sensors, and humidity sensors are home appliances which operate automatically according to measured temperature and humidity A refrigerator is also f eatured to represent an appliance which operates without interruption. A TV, electric lights, and illuminance sensors are also featured to represent appliances, which can operate independently of other appliances. We need to determine whether or not their operations are triggered at a specific time by generating random numbers following a uniform distribu-tion in the interval of [0,1]. All appliances have the power and operation statuses, while all sensors have the value status. Addi-tionally, the TV has the channel status, and both boilers and air conditioners provide internal temperature values as their status. The operations of boilers, air-condit ioners, humidifiers, and dehumidi-fiers are triggered by specific values of the sensors. 4.2. Association rule generation
Themostsensitiveperformancechangeoccursatthesupport level of 0.2 in the AH algorithm. Fig. 7 shows the number of association rules generated from two transaction databases ( T40I10D100K.dat and HOME_EVENT.dat ) using the AH algorithm for the support level, while the confidence level is incremented by 0.1 in the interval of [0.1, 0.9] and by 0.0 1intheintervalof[0.9,0.99].
Up to 312 association rules are generated out of T40I10D100K.-dat which consists of 1000 items in the confidence interval of [0.4, 0.8]. Approximately 7000 association rules are generated out of
HOME_EVENT.dat , which consists of 100 items, for the confidence level less than or equal to 0.99. This test result demonstrates that the AH algorithm is not suitable for discovering useful association rules for a smart home environment.
 Fig. 8 shows the number of association rules generated by the
AH algorithm, which utilizes the confidence calculation method based on conditional probability, and by the HT algorithm with respect to the same database ( HOME_EVENT.dat ). In the case of the AH algorithm, it can be seen that the number of generated association rules varies little once the confidence level reaches approximately 0.92. On the other hand, in case of the HT algorithm, the number of generated association rules constantly varies until the level reaches 0.98. Compared with Fig. 7 , while the number of association rules generated by the AH algorithm is not sensitive to the different confidence levels, the number of association rules generated by our proposed scheme is kept influenced by the different confidence levels. Consequently, we can discover association rules suitable to the requirements of home users by varying the confidence levels. 4.3. Generation times of large k-itemsets
As mentioned in Section 4.1 , scenarios are generated in two steps: the first step for large k -itemsets generation and the second step for association rule generation. We may ignore the proces-sing time of the second step, since the step can be batch processed because it does not require real-time processing. As a result, it is enough to compare only the processing times of the first step.
Fig. 9 shows the average generation time of large k-itemsets for each minimum support level after measuring it 30 times repeat-edly, which is the minimum number of samples that makes normal approximation possible.

In case of T40I10D100K.dat , the average and the standard deviation of generation times of large k-itemsets for the different minimum support levels are 2.24 and 0.333, respectively, and in case of HOME_EVENT.dat , 5.075 and 0.039, respectively. In the case of HOME_EVENT.dat , although the generation time of large k -itemsets is faster than that of T40I10D100K.dat only when the minimum support level is less than 0.02, the standard deviation of generation time of T40I10D100K.dat is quite greater than that of
HOME_EVENT.dat since its performance degradation is quite severe for the low minimum support level. In particular, it can be seen that performance gets worse sharply at around minimum support level of 0.02, since the average support level of items of each transaction in T40I10D100K.dat is close to 2%. In contrast, in case of HOME_EVENT.dat , while its overall performance may be degraded due to the relatively high support level of individual items, the probability that the generation time of large k -itemsets may vary with different support levels is very low, since its standard deviation is much smaller than that of T40I10D100K.dat .
Through a series of experiments, we demonstrate that more useful association rules can be generated based on the depen-dence among home appliances than existing algorithms while performance loss due to calculating different confidence levels is not significant. 5. Conclusion and future works
After identifying the similarities between association rules and service scenarios proposed in HOMI, this paper proposed a new scheme for translating association rules mined from log data into service scenarios. Since there are appliances which are always active like a refrigerator, and because of the property that service scenarios are generated based on the dependence in the sense that the status change of a certain appliance triggers the opera-tions of other appliances, it is not appropriate for existing association rule mining algorithms to use transaction databases generated by our scheme. In order to overcome this problem, we modified the confidence calculation method of association rules so that it utilizes p-value for hypothesis testing for independence. It was confirmed through the experiment that useful association rules can be discovered even using a wider range of the con-fidence levels. Our scheme also made it possible for a home user to select his or her service scenario by determining the desired confidence level, after reviewing a few feasible service scenarios extracted from log data. In addition, since a home user may determine acceptance or rejection for each of service scenarios generated when a smart home system is first installed, smart home environments can be constructed more flexibly and adaptively.

In our future work, we will derive criteria that can be used to determine the accuracy of service scenarios and investigate how to generate more useful service scenarios. We will also investigate how to construct enhanced surveillance system in a smart home by means of automating the selection of service scenarios based on selection history of service scenarios by a home user. Finally, since it will be also necessary to consider various probability distributions associated with status changes of home appliances such as the Poisson distribution and the Elrang distribution other than the binomial distribution, we will investigate which prob-ability model is the most appropriate for events that may happen in a smart home.
 Acknowledgment This research was supported by the Chung-Ang University Research Scholarship Grants in 2010.
 References
