 In this paper, we present a novel random-walk based node ranking measure, PathRank , which is defined on a hetero-geneous graph by extending the Personalized PageRank al-gorithm. Not only can our proposed measure exploit the semantics behind the different types of nodes and edges in a heterogeneous graph, but also it can emulate various recom-mendation semantics such as collaborative filtering, content-based filtering, and their combinations. The experimental results show that PathRank can produce more various and effective recommendation results compared to existing ap-proaches.
 H.3.3 [ Information Search and Retrieval ]: Information Search and Retrieval X  Information filtering, Retrieval Mod-els Graph, Network, Recommender systems, PageRank, Per-sonalized PageRank , Heterogeneity, Flexibility, Ranking
Recently, incorporating various types of information (e.g., location, time, metadata, etc.) into the recommendation procedure has become one of the important issues in the re-search field of recommender systems. A heterogeneous graph is a type of graph that consists of various types of nodes and edges, and it is a promising data model for dealing with het-erogeneous information due to its generality and expressive-ness. Motivated by the nice properties of the heterogeneous graph model, we define the recommendation as the prob-lem of ranking nodes on a heterogeneous graph that is con-structed from various data sources (e.g., log tables, rating matrices, contents metadata, etc.), where a recommendation request is represented by a set of query nodes. According to our problem definition, we need an effective node ranking measure for recommender systems. So far, a number of node ranking measures have been proposed; however, majority of node ranking measures such as Personalized PageRank [3], SimRank [4] are defined on homogeneous graphs, so they cannot utilize various semantics behind different types of nodes and edges. In this paper, we propose a novel random-walk based node ranking measure PathRank by extending the Personalized PageRank algorithm. As PathRank is de-fined on heterogeneous graphs, it can utilize the semantics of different types of nodes and edges. Our intuition is that we can find nodes with meaningful semantics by following cer-tain paths on a heterogeneous graph. PathRank is computed through a random walk process like the original measure Personalized PageRank , but additionally, it discriminates different paths on a heterogeneous graph during the random walk process by exploiting schema-level paths called path-guides . PathRank can produce effective and diverse recom-mendation results with various recommendation semantics such as collaborative filtering, content-based filtering, and their combinations by utilizing different sets of path-guides. To validate our method, we compare the recommendation accuracy of our proposed method with the other existing approaches.
Majority of two-dimensional recommender systems, which utilize USER and ITEM dimensions, are classified into two main categories Content-based Filtering (CBF) and Collab-orative Filtering [1] (CF). The algorithms in the CBF cat-egory are based on the assumption that a user would prefer items that have similar contents with the ones previously liked by the user. On the other hand, the algorithms in the CF category recommend items based on how similar users with an active user rated on the items. These two-dimensional approaches have been helpful to simplify the recommendation problem, but they have limitations in that they cannot incorporate heterogeneous information into the recommendation procedure. Recently, attention has been paid to the graph-based approaches to recommender sys-tems [10, 8, 7] in that the graph model is promising for dealing with heterogeneous information due to its generality and expressiveness. Most earlier approaches adopted node ranking measures defined on homogeneous graphs, such as Personalized PageRank [3], SimRank [4] and HITS [5], so they cannot fully utilize various semantics behind different types of nodes and edges in heterogeneous graphs. Lately, few measures defined on heterogeneous graph emerged and notice that paths, sequence of different types of edges, can expressively represent a wide range of semantic meanings. PathSim [9] presented a node ranking measure on heteroge-neous graph, especially focusing on similarity search; how-ever it is not suitable to be used for recommendation, be-cause it can X  X  be defined between the different types of nodes (e.g., USER and ITEM ) and it diminishs popularity of nodes that is an important feature in recommendation. Lao et al. [6] proposed a proximity measure Path-constrained Random Walk (PCRW), and it can be used to measure proximity between different types of nodes. Both PathSim and PCRW only exploit the given meta-path and do not exploit overall structure of given heterogeneous graph, although the overall structure of the graph implies useful information for recom-mendation (e.g., popularity of items, authority of users).
A heterogeneous graph is a graph that consists of various types of nodes and edges, where nodes and edges represent various types of entities and relationships between two en-tities. Following is the formal definition of a heterogeneous graph .

Definition 1. Heterogeneous Graph. A heterogeneous graph is defined as a directed graph G =( V , E , T V , T  X  , L ), where V is a finite set of nodes, E  X  V  X  V is a finite multi-set of edges , T V is a finite set of node types, and T E is a finite set of edge types.  X  V : V  X  T V is a node type mapping function and  X  E : E  X  T E is an edge type mapping function. Each node v i  X  V has a corresponding attribute-value list ` i  X  L that is a set of (attribute, value) pairs. A list ` i can have at most one pair for each attribute. Each edge e k ( v i ,v j ) has a corresponding weight value w We can express various kinds of datasets (e.g., Relational Data, XML, RDF Triples) using heterogeneous graph model. Once heterogeneous graph is constructed from one dataset, integrating with the other datasets is possible by identifying and mapping the same entities in the datasets.

Based on the defined graph model, we define the recom-mendation problem as a node ranking problem as follow.
Definition 2. Top-k Recommendation. For a heteroge-neous graph G =( V , E , T V , T E ,  X  V ,  X  E , L ), a recommenda-tion query is given as Q = ( N, X ,k ), where N = { q 1 ,...,q  X  V is a set of query nodes ,  X   X  T V is a target type, and k is the number of recommended items for the query. Let  X  be the set of all possible query node set N and  X  be the set of all target nodes v  X  V where  X  V ( v )=  X  . Then, we let u :  X   X   X   X  &lt; be a utility function that measures the usefulness of candidate nodes v  X   X  to given query set N  X  Q , where &lt; is totally ordered set. For a given recommendation query Q = ( N, X ,k ), nodes v  X   X  that have top-k highest utility scores u ( Q , v ) are selected as recommendation results.
We notice that lots of different paths exist on a heteroge-neous graph and they represent diverse semantics. Formally, a path on heterogeneous graph can be defined as follow.
Definition 3. Path A path p on heterogeneous graph is defined as a sequence &lt;pe 1 , pe 2 , ... , pe i , ... , pe  X  E S E  X  , and E  X  is a set of reversed edges 1 of all e  X  E . For readability, we denote path p as pn 1  X  E (pe 1 ) D E pn i and head ( pe i ) = pn i +1 for all 0 &lt;i  X  l , and an edge direc-tion mapping function D E : E S E  X   X  {  X + X , X - X  } is defined as D E ( pe i ) = X + X  if pe i  X  E and D E ( pe i ) = X - X  if pe
We use a path-guide to specify a set of paths satisfying certain constraints. Formally, a path-guide is defined as fol-low.

Definition 4. Path-guide A path-guide g is defined as ( F
N , F E ), where F N is a sequence of node filters &lt;nf path-guide g as follow: Node filter and edge filter are defined as follow.

Definition 5. Node filter A node filter nf j is defined as ( t k , C j ), where t k  X  T V and C j is a set of (attribute, condition) pairs. (e.g., nf = ( USER , { (age, &gt; 20), (gen-der, = X  X ale X ) } ). For simplicity, we denote the node filter nf j =( t k , C j ) as t k C j . We say that a node v i satisfies a node filter t k C j if the following condition is met; for every pair (at-tribute, condition) in C j , ` i , which is the v i  X  X  corresponding attribute-value list, has at least one pair (attribute, value) which satisfies the condition in the pair.

Definition 6. Edge filter An edge filter ef j is defined as ( t , d ), where t k is edge filter type and d  X  {  X + X , X - X  } is edge filter direction. For simplicity, edge filter ( t k ,  X + X  ) is denoted as t k + and edge filter ( t k ,  X - X  ) is denoted as t that e  X  E S E  X  satisfies ef j if following conditions are met;  X  E ( pe i ) = ef i .type , D E ( pe i ) = ef i .direction .
Once we have a path-guide, we can conclude whether a path satisfies a path-guide. We say that a path p = &lt;pe pe 2 , ... , pe i , ... , pe l &gt; satisfies a path-guide g = ( &lt;nf ... , nf i , ... , nf l +1 &gt; , &lt;ef 1 , ef 2 , ... , ef following conditions are met; for all 0 &lt;i  X  l , tail ( pe fies nf i , head ( pe l ) satisfies nf l +1 , and pe i satisfies ef example, we say that a path USER #1 like +  X  X  X  X  X  X  MOVIE #1  X  X  X  X  X  X  X  X  X  X  X  X  X  ACTOR #1 appearedIn +  X  X  X  X  X  X  X  X  X  X  X  X  X  MOVIE #2 satisfies a
Intuitively, we can understand that random walks of fol-lowing paths satisfying a path-guide represent a procedure of finding nodes with different semantics. For example, if we follow the paths satisfying a path-guide g 1 = USER  X  like MOVIE  X  like  X   X  X  X  X  X  X  USER  X  like +  X  X  X  X  X  X  MOVIE  X  from a user node, tthen we will find the nodes representing the movies that are preferred by the users who have similar taste with the
For an edge e from v i to v j , tail ( e ) = v i and head ( e ) = v If head ( a ) = tail ( b ) and tail ( a ) = head ( b ), then both a and b are reversed edges to each other user that the start node represents. In this case, we can say the path-guide g 1 represents a collaborative filtering proce-dure. On the other hand, following the paths satisfying g will let us find the movies that have similar tags with the user X  X  previously prefered movies. We can consider this pro-cess as a content-based filtering procedure. If needed, we can represent more detailed semantics by using node fil-
PathRank is the stationary probability of random walker X  X  being at each node after enough number of random walk iterations. At each interation, the random walker has three options: Transition and Restart are inherited from Personalized PageRank . Path Following functions to reflect the se-mantics represented by the given path-guides. Formally, PathRank is defined as follows.
 Definition 7. PathRank For a heterogeneous graph G =( V , E , T V , T E ,  X  V ,  X  E , L ) and a set of path-guides PG = { g 1 ,...,g m ,...,g | PG | } , PathRank vector ~r is defined as follow: where P  X  is a | V | X | V | transition matrix of the full graph G ignoring edge types, P g m is a | V | X | V | transition matrix teleport vector, and weights of all given path-guides sum up
Following the definition, we need to compute a transition matrix P  X  , transition matrix P g m for each path-guide g  X  PG , and teleport vector ~ t . Notice that a homogeneous graph can be represented as a single adjacency matrix. Yet, in the case of heterogeneous graph, more than one matrix are needed to represent different edge types. The edges in G are represented as a set of | V | X | V | weighted adcency matrix A = { A t 1 ,...,A t k ,...,A t | T { t 1 ,...,t k ,...,t | T E |} and A t k = { A t k ( i,j ) } is defined as follow: where A t k ( i,j ) is the element of the i -th row and the j -th column, and E 0 = { e | e  X  E  X   X  E ( e ) = t k  X  tail ( e ) = v  X  head ( e ) = v j } .

Then, we can derive a transition matrix P  X  from the ma-trix A  X  = P  X  t trix of the full heterogeneous graph G where edge types are ignored.

On the other hand, the transition matrix P g for the path-can be achieved by computing P g = P 1  X  ...P n ...  X  P l  X  n =1 P n where each P n is a transition matrix derived from a | V | X | V | adjacency matrix A n whose element of the i -th row and the j -th column A n ( i,j ) is defined as follow where A t k ( i,j ) is an element of A t k  X  A = { A t 1 ,...,A and A T t k ( i,j ) is an element of A T t k that is the transposed ma-trix of A t k .

When the recommendation query is given as Q = ( N = { q 1 ,...,q | N | } , X ,k ), we set up the teleport vector ~ t as: where ~ t ( i ) is i -th element of the vector ~ t . Once we compute the PathRank vector ~r , then we use ~r ( i ) that is the i -th element of ~r as the utility of node v i . Finally, we sort the nodes by its utility in descending order and choose top-k nodes as the ranking list for the query Q .
It is often useful to filter out elements in transition matri-ces in order to describe more detailed semantics (e.g., only k -nearest neighborhood users or items are generally used for collaborative filtering approaches) and achieve better perfor-mance in terms of processing time. For a given transition matrix P , for each i , we sort all elements P ( i,j ) in descend-ing order and generate a ranking list l i . Let  X  rank of the element P ( i,j ) in the ranking list l i . The non-normalized top- X  transition matrix [  X  P ]  X  for P is defined as follows.
Then, we derive the top- X  transition matrix [ P ]  X  by re-normalizing the rows of matrix [  X  P ]  X  to sum up to 1.
By using the concept, we can extend path-guides to have top- X  pruning filters. For example, we can define a path- X  X  X  X  X  X  X  X  X  X  X  X  X  MOVIE  X  ] 50 ] 30 . Then we compute a transi-tion matrix for path-guides with top- X  pruning filters by
For readability, if a node v satisfies a node filter nf , we denote nf ( v ) = true . If not, nf ( v ) = false . using pruned transition matrices. For example, the transi-P intuitively understand that transition matrices for the other path-guides with top- X  pruning filters can be computed in similar ways.
We conducted several experiments to validate our pro-posed method using the HetRec 2011 MovieLens dataset published by GroupLens research group 3 . The dateset is an extension of MovieLens dataset that is linked to Inter-net Movie Database (IMDb) 4 and Rotten Tomatoes movie review systems 5 . For evaluating top-k recommendation per-formance, we use similar testing methodology described in [2]. We sort the ratings by their timestamp and split them into two subsets that are probe set P (latest 10%) and train-ing set M (the rest 90%). From the probe set, we create a test set T that only contains 5-star ratings ( | T | =1000), so we can say that T includes the movies that are relevant to the corresponding users. For each user u , we randomly se-lect 1000 movies that are unrated by user u , and we assume that these 1000 movies are irrelavent to the user u . For each test case ( u,i )  X  T , we estimate the utility of the item i and the additional 1000 items for user u and make a rank-ing list by sorting them by descending order. Let p be the rank of the item i . If p  X  k , we have a hit, otherwise, a miss. The overall recall of the top-k recommendation performance is calculated as follow: recall ( k ) = # hits | T | where | T | is the number of tests.
 Based on the training dataset M and metadata from the HetRec 2011 MovieLens dataset, we create a heterogeneous graph. We consturct five types of nodes ( USER , MOVIE , DIRECTOR , ACTOR , TAG ). Then, we construct four types of edges. Using the positive ratings that are over personal average rating, like  X  X  X  X  edges are constructed between USER nodes and MOVIE nodes, and the respective users X  rat-ings are assigned as weights of the edges. Edges of directed  X  X  X  X  X  X  X  X  X  X  , and tagged  X  X  X  X  X  X  X  are constructed from DIRECTOR , ACTOR , TAG nodes to MOVIE nodes. Tag weights acheived from the original dataset are assigned to the tagged edges. The original dataset contains actor rankings for each movie, so we use n m  X  r ( a,m ) as weight for each a appearedIn edge, where n m is the actor numbers of the movie m and r ( a,m ) is actor a  X  X  ranking for the movie m . We assign weight 1 to all directed  X  X  X  X  X  X  X  edges. We also create reversed edges constructed graph consists of 116,900 nodes and 1,430,732 edges. For our experiments, we exploited several differ-ent path-guides defined on the constructed heterogeneous graph. We use the capital of the first letter of each node type name as its abbreviation ( U :USER, M :MOVIE, A :ACTOR, http://www.grouplens.org/node/462 http://www.imdb.com http://www.rottentomatoes.com D :DIRECTOR, T :TAG). Because there is only one edge type between different pairs of node types in the constructed graph, we can simply denote a path-guide without top- X  pruning filters as a sequence of node types (e.g., UMUM , UMTM ). Table 1 shows the path-guides with Top- X  prun-ing filters that we exploited for our experiments.
Let us assume a recommender system that provides movies that may be also interesting to the user, when a user selected a movie. We used the node representing the movie  X  Titanic  X  as a query node and computed PathRank scores of the other movie nodes to process the query with three different path-guides MAM , MDM and MTM ( w restart = 0 . 15 ,w trans = 0 . 25 ,w path = 0 . 65).

The results are shown in Table 1. In the case of MAM , movies that are played by actors who acted in  X  Titanic  X  are highly ranked. Note that the main actress of  X  Titanic  X , Kate Winslet , who also appeared in  X  The Kingdom  X ,  X  Little Chil-dren  X  and  X  The Life of David Gale  X . In the case of MDM , movies directed by the same director are highly ranked. For example, both  X  Titanic  X  and  X  Ghosts of the Abyss  X  are di-rected by  X  James Cameron  X . Movies that share similar tags are highly ranked with MTM . Tags expressively represent various aspects about movie contents, in this case,  X  Eternal Sunshine of the Spotless Mind  X , similar love story to  X  Ti-tanic  X , is ranked top-1. As we can see, exploiting different path-guides produces different ranking results with different semantics.
We compared the top-k recommendation performance of our method with following state-of-the-art methods.
Popularity-based (POP) : It generates a ranking list based on popularity (the number of ratings) of items. It is a non-personalized recommendation method, so the same ranking list is provided to all users.

Non-normalized Neighborhood CF (NNCF) : It is a modification of traditional k-nearest neighborhood (KNN) collaborative filtering, and it is known to perform better than traditional KNN CF for top-k recommendation [2]. We set n k = 25 for comparing with our method as it showed its best performance.

PureSVD (PSVD) : PureSVD [2] is one of the state-of-the art matrix factorization based collaborative filtering methods. It reduces the dimension of rating matrix using singular value decomposition, so the dimension number d should be decided. We empirically set the d = 30 for our experiments.

Personlized PageRank (PRANK) : It is also known as random walk with restart. It does not reflect path-guides into node ranking procedure. We can consider that it is a special case of PathRank by setting w path as zero.
Table 3 reports the performance comparison of PathRank and the other baseline methods in terms of recall ( k ). The results are generated by each method using empirically op-timized parameters. The same weights are given to all path-guides when exploiting more than one path-guide. We use the term PATH as the abbreviation of PathRank . PSVD show good performance among the baselines in general. The recall of PATH is affected by the exploited path-guides. Note that PATH shows significantly better performance than all the compared baselines at all k . Interestingly, we could obtain more enhanced the top-k accuracy by exploiting mul-tiple path-guides especially at k = 10 and k = 15. This implies that the effects of each path-guide could supplement the other one X  X  shortcomings and make positive synergy ef-fect.
In this paper, we propose a new node ranking measure, named PathRank by extending Personalized PageRank . Not only can it flexibly emulate various recommendation seman-tics by using different sets of path-guides, but also it has shown great recommendation accuracy on a real dataset. Note that widely used existing measures such as PageR-ank ( w restart &gt; 0, w path = 0, w trans &gt; 0, with a uni-form teleport vector), Personalized PageRank ( w restart &gt; 0, w path = 0, w trans &gt; 0), and Path-constrained Random Walk ( w restart = 0, w path = 1, w trans = 0, with a single pathguide) can be considered as special cases of PathRank , thus adopting PathRank can provide siginificant flexibility of exploiting different node ranking measures depending on needs.
This work was supported by the National Research Foun-dation of Korea(NRF) grant funded by the Korea govern-ment(MEST) (No. 20120005695).
