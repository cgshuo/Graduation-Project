 Niranjan Subrahmanya, Yung C. Shin n 1. Introduction
Process monitoring and fault detection methods may broadly be divided into two classes: signal-based methods and model-based methods, and a large number of applications may be found 2000 ). Signal-based methods ( Chen and Liao, 2002 , Qin, 2003 ) generally do not need mathematical models of the system but need data from faulty conditions to perform fault detection and diagnostics. This is desirable in many real world applications as the process may be too complex to model mathematically (as in manufacturing applications) or the effort required in developing a model may not be justifiable economically. Model-based methods et al., 2012 ) on the other hand make use of the fact that faults may change the nature of the relationship between the measured inputs and outputs and thus allow the detection of deviations in quantities that are not directly observed. Fault detection may usually be done without the need for data from faulty conditions.
Fault diagnosis, however, may, still require data from faulty conditions ( Uppal et al., 2006 ), which is usually difficult to acquire in many applications. Therefore, this paper proposes an approach that tries to retain the benefits of both signal-based and model-based methods by developing a hybrid data and model-based framework that can learn dynamic process models from historical data and diagnose a class of faults without the need for data from faulty conditions or complex physics-based models of the system.

For many industrial systems, approximate data-based dynamic process models can be developed fro m historical process data using techniques such as auto regressive models with exogenous inputs (ARX) and neural networks. Recur rent Neural Networks (RNN) in particular have been found to be very effective in modeling non-used to approximate any discrete dynamic system, which can be represented in the state space form, to any desired degree of accuracy ( Jin et al., 1995 ). This developed data-based model may then be used for fault detection and isolation (FDI).
Model based fault detection and isolation methods have also been called as analytical redundancy methods as they involve the comparison of measured signals with their estimates, based on models subject to the same input condition, to generate residuals.
Many model based methods have been proposed in the literature and a short survey of these methods is provided here. Diagnostic information may be extracted from these residuals using simple limit checks or statistical tests ( Montgomery, 2008 ). More robust methods of evaluating residuals including the use of adaptive threshold evaluation ( Patton et al., 2000 ) and non-linear classi-fiers ( Chen and Patton, 1999 ) have also been proposed. The generation of residuals, however, remains the focus of most model based FDI methods. Residuals can be generated using any of a number of different methods mentioned below. A direct comparison of measured outputs with physics based models way to generate residuals. Parity relation approaches generate the residual based upon consisten cy checking on system input and outputdataoveratimewindow( Gertler, 1997 ). Parameter estima-tion approaches directly make use o f system identification techni-ques to isolate changes in critical but unmeasurable system parameters ( Isermann, 1993 ). Observer based methods for determi-1997 ) and stochastic systems ( Tsai et al., 2007 ; Kobayashi and
Simon, 2006 ; Li et al., 2005 ; Xiong et al., 2007 ) can be used to estimate unmeasured system stat es/parameters and with suitably are robust to modeling uncertainties. A bank of dedicated observers
The problem of robust model-based FDI in non-linear process input all output, etc. can be used to isolate actuator, sensor and component faults ( Isermann, 1997 ). The parity relation based approach, the observer-based approach and the parameter estimation-based approaches ar e all related to each other and the correspondence between these approaches may be found in ( Chen training methods, the use of data -based models, such as the RNN, introduces additional uncertainty regarding model predictions and this should be given due consideration by any model-based fault detection and isolation scheme. Whilethereareanumberofnon-linear observers that can be considered for the task, such as the which explicitly accounts for model error and is robust to it ( Subrahmanya and Shin, 2009 ).

Most model-based methods for FDI developed so far assume the of the system are part of the model and may be estimated if necessary. Data-based dynamic models on the other hand may not system need to be estimated on-line (for the purpose of monitoring the process) from input X  X utput measurements, then special care has to be taken to ensure that these states are modeled explicitly. In be available and the data available for modeling would include inputs, outputs and selected states. The proposed framework then considers this important practical scenario, where there are three kinds of states in the system model: states that can easily be online but can be measured offline to generate training data, and states that cannot be measured at all. The motivation for such a (such as surface roughness in manufacturing or intermediate stream compositions in chemical processes) are not measurable without expensive equipments or offline analysis while some other states belonging to three classes  X  actuator faults (these are assumed to is assumed that these faults can be detected and diagnosed by may be a number of faults in complex systems, which affect multiple paper considering the combination of a data-based model-based FDI system with this practically important categorization of state variables.

A block diagram describing the architecture of the proposed framework is shown in Fig. 1 . The methods used in the three major blocks in Fig. 1 will be described in the following sections. It should be noted that our works on various individual modules in Fig. 1 have been reported elsewhere and the main contribution of this work is the combination of these individual modules and the validation of the entire data-based fault detection and diagnostics scheme. First, the use of recurrent neural networks is proposed for the purpose of learning the dynamics of a system and a suitable structure and training algorithm for the RNN model is given ( Subrahmanya and Shin, 2010 ). A description of the adaptive divided difference filter (ADDF), a robust stochastic non-linear observer for discrete-time systems ( Subrahmanya and Shin, 2009 ), is given next. This is followed by a section on the fault detection and isolation logic for input (actuator), state (compo-nent) and output (sensor) faults. Finally a couple of examples, one based on a synthetic state-space model and one based on the DAMADICS simulation benchmark ( Bartys et al., 2006 ), are given to demonstrate the feasibility of the proposed method. 2. System modeling using recurrent neural networks
Although a number of training methods have been proposed a considerable amount of parameter and structure tuning from an experienced user. In order to automate the process of structure and parameter learning for RNNs, the authors recently proposed a constructive training method for RNNs ( Subrahmanya and Shin, 2010 ). This method ensures the stability of an RNN with a single mance of the training method the reader is referred to Subrahmanya and Shin (2010) .

An RNN can be represented in the discrete state space form with all the measured variables (including the measured states of the original system) as outputs and the hidden node activations as the states. Assume that the discrete state space equation representing the system is x y  X  h  X  x k  X  X  1  X  the non-linear observa tion equation. Using the capability of feed forward networks with a single hidden layer of sigmoidal units to accuracy, the functions f and g may be replaced by equivalent feed forward networks as given below, where s denotes the tanh function f  X  x k , u k  X  X  V f s  X  W f x k  X  B f u k  X  h f  X  h  X  x k  X  X  V h s  X  W h x k  X  h h  X  X  2  X 
Here, W f ( W h ) and B f denote weights of a single-hidden layer neural network from the input layer to the hidden layer, h denotes the biases of the hidden nodes and V f ( V h ) denotes the weights from the hidden layer to the output layer to model f ( x dynamics described by (2) can be represented by the system of equations given in (3) . Eq. (3) represents a single hidden layer RNN with W , B , h and V as the weights and Z k as the hidden node activations, as shown in Fig. 2 ( Subrahmanya and Shin, 2010 ):  X  W s  X  Z k  X  X  B u k  X  1  X  h y  X  V s  X  Z k  X  1  X  X  3  X 
The constructive training algorithm for learning the structure and parameters of the network in Fig. 2 is now given. Let W l weight matrix W after l nodes have been added to the network. tion of W l 1 where, U 1 l 1 is an orthogonal matrix of left eigen-is a diagonal matrix of singular values. The matrices U 1 parametervectorgivenby( u 1 , s , u 2 ), where u 1 A R l 1 u A
R l 1 .Thematrix U 1 l is then derived as the orthogonal matrix obtained by using a QR decompos ition of the augmented matrix
U "#
W maybeobtainedas W l  X  U 1 l S l  X  U 2 l  X  T .Thisslightlycomplex thereaderisreferredto Subrahmanya and Shin (2010) for a more detailed discussion on this topic. 2.1. Constructive recurrent neural network training
Required inputs : (1) Measured inputs and outputs of the system. (2) Target training error or maximum number of nodes.
Initialization : set the number of nodes ( l )to0. W 0  X  [], B y  X  0 and V 0  X  []
The constructive training method overcomes many of the drawbacks of RNNs such as the need for expert knowledge for structure determination and model training and extremely high computational complexity. Finally, since the constructive proce-dure forces the RNN to be stable at all times, trying to approx-imate an unstable system with such a strategy may not give very good results. On the other hand, while RNNs are capable of modeling the dynamics of any system, one of the major problems encountered when trying to model unstable systems using unstable RNNs is the fact that the simulated dynamics would depend on the assumed initial conditions of the RNN (which are chosen randomly). In such cases, a good method to overcome this problem is to augment the input vector with the outputs at the previous time instant, i.e., u mod k  X  consider the structure of the RNN to approximate a non-linear observer for the dynamic system, and this can be assumed to be stable even though the original system itself is not. 3. Adaptive divided difference filter
The adaptive divided difference filter ( Subrahmanya and Shin, et al., 2000 ) and belongs to the class of robust, non-linear, derivative-free stochastic filters. This section summarizes imple-mentation details of the ADDF to make this document self contained. The interested reader is referred to ( Subrahmanya and Shin, 2009 ) for a detailed description and analysis of the
ADDF and its properties. The class of systems considered here is given below: x y  X  Hx k  X  v k  X  4  X  bounded modeling error is explicitly considered, which is repre-f is either a globally Lipschitz continuous function or that it is locally Lipschitz continuous with x k restricted to a compact domain D C R n . v k and w k are assumed to be independent, identically distributed Gaussian random variables with v k N (0, Q ( k )) and w k N (0, R ( k )).

The ADDF filter builds upon a derivative free covariance propagation method used by the divided difference filter ( Norgaard et al., 2000 ), and further considers the effects of modeling and approximation uncertainties by using upper bounds for the a priori and a posteriori covariance matrix esti-mates to ensure robustness of the filter. The following equations can be used to develop an ADDF for the system in Eq. (4) ( Subrahmanya and Shin, 2009 ). In the following equations, all the quantities with a  X  X  X ar X  X  denote a priori estimates (before the actual output is observed) while the quantities with a  X  X  X at X  X  denote a posteriori estimates (after the output is observed). Further, let S x  X  k  X  , S u x  X  k  X  , ^ S u x  X  k  X  , S w considering modeling and approximation errors), P u  X  k  X  (upper bound on a priori state covariance provided by ADDF), ^ P bound on a posteriori state covariance provided by ADDF), respectively, where B is considered a square root of A if BB Let x k denote the a priori state estimate and let ^ s u x , p ADDF is given in (5) : x
Here, h is a step size that can be set to estimation errors are Gaussian and unbiased ( Norgaard et al., 2000 ) and n is the number of elements in x k .

Define two temporary matrices S  X  1  X  x ^ x  X  k  X  and S  X  2  X  columns are computed as S S
Then the updated square root of the a priori state covariance matrix, S x  X  k  X  1  X  , is given by, S where HT (S) denotes a Householder transformation ( Golub and van theweightedupdaterulegivenbelow,where g  X  k  X  1  X  X  y k  X  1 Let r be a weighting factor such that 0 r r o 1:
P  X  k  X  1  X  X 
Next l k , which is a parameter required to calculate the upper bound of the state covariance matrix, is calculated using the following linear matrix inequality (LMI). Here a k and b k parameters that have to be tuned offline: l  X  min such that , o H P  X  k  X  1  X  H T  X  H  X  a k Trace  X  ^ P u  X  k  X  X 
Define A  X  H P  X  k  X  1  X  H T and B  X  P o y  X  k  X  1  X  H  X  a b I  X  H
T R  X  k  X  1  X  . Then, it may be noted that the above optimiza-tion problem involves finding a scalar o such that o A Z B and
Z 1. This does not require a specialized LMI toolbox and can easily be solved as l k  X  max  X  1 , e max  X  , where e max eigen value of A 1 B . The square root of the a priori state covariance matrix is then calculated as
S  X  k  X  1  X  X  HT
The gain matrix, K ( k  X  1), is calculated using (12) and the square root of the upper bound of the a posteriori state covariance matrix, ^ S u x  X  k  X  1  X  , is given by (13)
K  X  k  X  1  X  X  S u x  X  k  X  1  X  S u x  X  k  X  1  X  T H T  X  H S u ^
S  X  k  X  1  X  X  HT  X  I K  X  k  X  1  X  H  X  S u x  X  k  X  1  X  S v  X  k  X  1  X  a posteriori estimate: ^ x  X  x k  X  1 K  X  k  X  1  X  l  X  k  X  1  X  X  14  X  4. Fault detection and isolation logic
Three different modeling strategies, used to model the three assumed kinds of faults, are described below along with the reason behind choosing these strategies. The RNN model is assumed to have p outputs, m inputs and h hidden nodes. Assume that V  X  are column vectors. At this stage, it is assumed that an RNN model of the plant has been developed using the training method described in Section 2 and can be represented as given in (3) :
The actuator faults are then modeled as changes in parameter values of input gains as shown next: z  X  k  X  1  X  X  W s  X  z  X  k  X  X  X  f  X  k  X  1  X  X  f i  X  k  X  , i  X  1 , ... , m y  X  k  X  X  V z  X  k  X  X  15  X 
As already mentioned, one of the main goals of this work is to perform fault diagnostics to a certain extent without the need to collect data from faulty conditions. Moreover, it is assumed that the system being monitored is quite complex and hence it is either not possible or too difficult to develop fault models using expert knowledge. Since not a lot is usually known about the nature of the faults occurring in the absence of such information, each actuator fault is modeled as a gain factor for the corresponding command input, i.e., the term f i ( k )in b is given a non 0 value with its own dynamics. It may be noted that in the absence of any kind of fault f i ( k ) is expected to be 0.
Therefore, a significant deviation of the estimate of f i expected to signal a fault in the corresponding actuator. More-over, since nothing much is known about the dynamics of the fault, a random walk model, f i ( k  X  1)  X  f i ( k )  X  w f
Gaussian random variable, is assumed for this parameter by the observer. The advantages of using this kind of actuator fault modeling scheme are as follows:
It can approximately model many kinds of actuator faults without knowing the exact dynamics as will be shown in the simulation examples. Usually this is sufficient to diagnose the actuator that has degraded.

In some cases when the estimates of f i ( k ) are accurate enough, it is simple to extend the above scheme to perform fault tolerant control to accommodate minor actuator faults. observer (ADDF), confidence intervals are also available for these estimates. A fault is flagged in any of the actuators if the is not equal to 0. It may be noted that the threshold for the confidence intervals may be changed based on the cost of false positives versus false negatives. Since the confidence intervals keep changing over time based on the evolution of the system, they automatically provide a dynamic thresholding strategy for fault detection and diagnostics.

The next kind of fault considered is the component or state fault. Not all component faults can easily be modeled as changes in state values, but it is possible to monitor certain component faults by estimating the values of unmeasurable states and those are the ones being considered here. Hence it is assumed that the fault being monitored can be modeled as a state of the dynamic system and that the goal is to obtain estimates for these states using the observer. It is assumed that direct measurement of these states is not feasible during the actual process, but it is possible to measure their values in specially designed experi-ments while generating training data for RNN modeling. There are many applications such as manufacturing process monitoring (cases such as in-process tool wear monitoring and surface roughness monitoring during machining) and chemical process monitoring (cases such as estimation of the concentration and -0.2 0.2 0.4 0.6 Fault Value -0.2 0.2 0.4 0.6 Fault Value quality of products in a batch process) provide the motivation for considering this class of problems. Therefore, it is assumed that the states of the system fall into the following three categories: 1. States that can be measured both during model building and online implementation (Category M ). 2. States that can be measured only during the model building process (i.e., these states may require special sensors or offline measurement) (Category O ). 3. States which cannot be measured at all (Category H ).
In the proposed approach, it is assumed that an RNN is con-structed using the states from categories M and O as outputs. The dynamic hidden nodes of the RNN are expected to learn the role of states from category O now become the states of the new dynamic system and only the states from category M remain the outputs of the new model as shown below. It is assumed that the number of states belonging to category O is o and the number of states belonging to category M is p. If the actual dimension of the under-lying state space is n , this would then imply that there are n X  X  X  X  o  X  p outputs and h hiddennodes,withthe h hidden nodes approximating the dynamics of the n X  X  X  X  unmeasurable states. TheparametersobtainedfromtrainingsuchanRNNcanthenbe reformulated as shown in (16) to obtain a new model for online estimation of the state s belonging to Category O : z  X  k  X  1  X  X  W s  X  z  X  k  X  X  X  x  X  k  X  1  X  X  v p  X  j W s  X  z  X  k  X  X  X  f  X  k  X  1  X  X  f i  X  k  X  , i  X  1 , ... , m y  X  k  X  X 
This model is then used together with a non-linear robust observer to estimate the values of the states in category O during online implementation. It may be noted that this can still be combined with the parameter estimation scheme for actuator fault detection provided the overall system remains observable. The final model to be used, while simultaneously considering actuator and component fault detection, will be of the form shown in (16) . Once the estimated values of the states and their confidence intervals are available, faults may be flagged based on any standard statistical methods (such as the use of process control charts to flag deviations in surface roughness). Sensor fault modeling is actually not considered explicitly. This is because the performance of observers is critically depen-dent on the assumption that the output measurements are accurate and this is generally assumed to be true in most conditions when the sensors are functioning properly. If a sensor State systemmightfalselythinkofthisasanactuatororcomponentfault.
However, the most reliable method to detect sensor faults is by making use of analytical redunda ncies with a bank of observers ( Isermann, 1997 ). Each observer in the bank is dedicated to the estimation of the value of a singl e output (sensor reading) while along with its confidence intervals is compared to the observed readings to make a decision about the health of each sensor. The the one described for estimating states to detect component faults. between the estimated and observed values for a sensor and a sensor fault is flagged when the value of r l deviates from 0.
Of course, when a sensor fails, it affects the performance of all but one of the observers in the observer bank where the corresponding output is estimated (usually showing up as large model prediction error values for the observer to correct or sometimes wrongly as changes in gain parameters for the actuators. In either case a fault is detected by the corresponding observer). The observer which is estimating the output corre-sponding to the failed sensor however detects no fault, but sees a large discrepancy in the value of the residual, r l , calculated as mentioned before and can thus isolate sensor faults. 5. Examples
Example 1:. This section presents results based on applying the proposed framework to a synthetic example, which has specifi-cally been designed to test its capabilities. The dynamics of the system considered in this example is given by x  X  k  X  1  X  X  0 : 5tanh  X  x 1  X  k  X  x 3  X  k  X  X  X  2  X  x  X  k  X  1  X  X  3  X  tanh  X  2 x 1  X  k  X  X  u 2  X  k  X  x  X  k  X  1  X  X  x 2  X  k  X  1  X  tanh  X  4 x 2  X  k  X  X   X  x  X  k  X  1  X  X  0 : 1 x 1  X  k  X  X  y  X  k  X  X  x 1  X  k  X  x 2  X  k  X  x 3  X  k  X 
The training data was generated by using swept sine waves given by ( u 1 ( k )  X  sin(2 p k (0.015  X  ( k/ 1000 ) 0.015)), u -0.4 -0.2 0 0.2 0.4 Parameter Value -0.4 -0.2 0 0.2 0.4 Parameter Value -1.5 -0.5 0.5 1.5 State value the system. The test data included data generated using swept sine waves with frequencies outside the range used for training as well as step inputs. 2000 data points were used for testing. The data for RNN training was split into 3 batches to make the RNN robust to initial conditions. The constructive training algorithm generated an RNN with 2 inputs, 10 hidden nodes and 3 outputs. system where usually only a limited number of states can be measured easily, while some of th e other states require special measurement procedures and so me cannot be measured at all. The RNN model for this system is converted to the form given in (16) one output converted to state) and 2 outputs.

The system is now simulated for 3000 time steps and the following faults are introduced into the system:
A fault in actuator 1 occurs at time instant 1000. Since in reality actuator faults could have dynamics of their own (other than the simple gain fault modeled by (16) ), this fault was simulated by changing f 1 ( k ) as 0.3  X  max(min(sin(0.02 k ), 0.25), 0.25), i.e., the unmodeled actuator dynamics is a saturated sine function.
 A step fault is simulated in actuator 2 at time instant 2000. This was done by changing f 2 ( k ) from 0 to 0.4.

This represents a reasonably complex scenario with no faults in the first 1000 time steps, one fault in the next 1000 and 2 simultaneous actuator faults in the next 1000 time steps.
The results are presented in Figs. 3 and 4 . Fig. 3 shows that tracking performance of actuator faults is pretty good. Even in the presence of rapidly chaniging fault dynamics (like the simulated fault in actuator 1), it can be seen that the assumed fault parameters are able to track the actual fault severity pretty accurately. It should be noted that the exact fault values are available in this case only because this is a synthetic example. In any case, even an approximate tracking of actuator faults allows the system to track the value of { x 3 } more accurately in the presence of unmodeled actuator faults. This can be seen clearly from time step 2000 onwards when the combined effect of the two input faults causes a significant mismatch between the model and the actual system. The results presented in this section -0.4 -0.2 0.2 0.4 Parameter Value -0.4 -0.2 0.2 0.4 Parameter Value State value show that the proposed method for integrating observer design and data-based dynamic models can indeed provide significant diagnostic information using data from healthy conditions only.
Specifically, for certain types of faults (such as multiplicative actuator faults) it is possible to not only diagnose the actuator which is faulty, but also recognize the degree of the fault.
Example 2:. The second example considered here is closer to a real world application. This example makes use of a validated simulink model of an industrial actuator valve developed as part of the DAMADICS benchmark ( Bartys et al., 2006 ). The structure of the valve is shown in Fig. 5 . The benchmark model allows the simulation of a large number of faults. It should be noted that not all the faults considered in the benchmark fall under the cate-gories considered in this work and hence it may not be possible to diagnose all the faults in the benchmark without additional data from faulty conditions. The following fault situations are selected to demonstrate the capabilities of the proposed framework: Valve Clogging (Fault 1 in the benchmark).

Unexpected Pressure Drop across the valve (Fault 17 in the benchmark).
 Flow rate sensor fault.
 The system is modeled using 4 inputs (the control command  X  the inlet fluid temperature  X  X 1 0 ). The modeled system outputs primes in all the variables in Fig. 5 indicate measured values. The 4 inputs and 2 outputs considered here are readily available for measurement and are hence supposed to be used for benchmarking purposes ( Bartys et al., 2006 ).ThedataforRNNmodelingwas generated by varying the 4 inputs and simulating the system for 1000 s with a sampling time of 1 s. The learnt RNN model had of flow sensor faults and also demonstrate the capabilities of the proposed method to robustly estimate the flow in the presence of other unmodeled dynamics (other f aults), it was decided to use a model with only one output (the rod displacement), with flow being
RNN model used by the observer has 4 inputs, 6 states (5 hidden valve) and 1 output (the rod displacement).

The first results presented here compares the estimated values of the input gain parameters for the 4 inputs of the system when a -0.4 -0.2 0 0.2 0.4 Parameter Value -0.4 -0.2 0 0.2 0.4 Parameter Value -2 -1.5 -1 -0.5 0.5 1.5 State value medium level valve clogging fault and a medium level unexpected time t  X  100 s and remain till the end of the simulation at time t  X  500 s. The results are presented in Fig. 6 .Theestimated standardized (converted to 0 mean and unit standard deviation) flow values are presented in Fig. 7 . Similar results for the unexpected pressure drop case are given in Figs. 8 and 9 and those
First of all, comparing the two different input faults (control valve clogging and unexpected pressure drop), it can be seen from
Figs. 6 and 8 , that the corresponding parameters are correctly high for the control valve clogging case and the gain parameter corresponding to the downstream pressure P2 0 is high for the unexpected pressure drop case while all other gain parameters are not different from 0 when their confidence intervals are taken into account). This makes actuator fault diagnostics in this case straightforward. Moreover, even under these faulty conditions, when the system dynamics changes considerably as compared to rates by the ADDF is pretty accurate ( Figs. 7 and 9 ) whereas the estimation by the RNN model itself (shown in the legend as  X  X  X odel X  X ) is significantly in error. This shows that a combination of the RNN model and the robust observer is indeed necessary to wherein the flow rate sensor fault is considered show that none of the actuator gain parameters deviates from 0 ( Fig. 10 ) whereas a significant deviation between the estimated and observed values for the flow rates can be seen. Moreover, the estimated states concur with the model predictions indicating that a sensor fault is more likely. Overall the diagnostic results obtained using the proposed framework are extremely satisfactory in this case espe-of unmodeled dynamics but no data from the faulty conditions has been provided to the diagnostic module. 6. Conclusions
A novel framework for data-based process monitoring, fault detection and diagnostics of non-linear systems with partial state measurement was presented in this paper. The framework pro-vides specific guidelines for combining multiple modules in a systematic manner to achieve the desired results. The main advantages of the proposed framework are that it is a completely data-based method, which requires data from only normal operating conditions while still providing a certain degree of diagnostic information. The results presented based on synthetic and benchmark examples show that the proposed method for integrating observer design and data-based dynamic models can indeed provide significant diagnostic information using data from healthy conditions only. Specifically, it was possible to diagnose the actuator/input which was faulty using the proposed generic actuator fault model. The proposed method for estimating values of states that are only measurable during model development provides excellent results and also shows robustness in the presence of unmodeled system dynamics. Finally, sensor faults could also be detected using the estimated states. Overall the proposed framework seems to be very promising for monitoring of complex systems with little a priori information available.
A significant advantage of the proposed observer-based frame-work is that it is possible to extend the proposed strategy to make use of semi-mechanistic models (partly physics-based models and partly data-based models) and thus exploit any available information about the system.
 References
