 Ontology is added to knowledge management application design to enable knowledge sharing, reuse and fusion across knowledge communications [1]. To allow reliable knowledge exchange over the network, the on tology that holds the concepts needs to be defined explicitly and formally to the data in the knowledge management reposito-ries, whereby each data is associated with ontological concepts and their correspond-ing attributes. Intelligently managing ontological knowledge (concepts, properties and and facilitate knowledge reusability among knowledge seekers. 
In this paper, we propose an algorithmic framework for managing ontological knowledge that adds semantics to the data in the knowledge repository. The frame-work comprises of three methods: conceptual clustering, cluster-based identification and concept-based query for managing ontological knowledge. The algorithmic framework employs unsupervised data mining methods incorporating Formal Concept Analysis (FCA) [2], Self-Organizing Map (SOM) and K-Means [3] to intelligently manage ontological knowledge without prior knowledge; and lexical matching based knowledge retrieval in the knowledge repository [5]. 
The framework is able to capture ontological components, which form the meta-data schemas in the form of attributes. Therefore, it may be easier to modify and up-date metadata schemas ontologically when the need arises. In the framework, the ontology is conceptualized into a concept lattice to enable effective ontological knowledge management (edit, update and query) by capitalizing the formal context space of the ontological concept through semantic clusters generated by unsupervised clustering techniques without the need for prior knowledge [5]. The ontological con-cept can be effectively created and the meta data of existing ontological concepts can logical representation in concept lattice form offers a scalable or composited envi-ronment for visualization of concepts and its properties and instances. 
The rest of the paper is outlined as follow. Section 2 presents related work and Sec-tion 3 explains the definition of ontology and the clustering techniques used. The prototypical framework of ontological knowledge management is presented in Section 4. Meanwhile the ontological knowledge management tasks and algorithms of con-ceptual clustering method, cluster-based identification method and concept-based query method for managing ontological knowledge are presented in Section 5. Lastly, the paper is concluded with future work. According to [6], ontology management functions include facilities for browsing, searching, querying and managing ontologies and their instances. These functions are resembled in ontology editors. There are a lot of ontology editor tools, which can be found at [7]. However most of the tools provide environment for building ontologies but not functionalities for managing ontologies as stated by [6]. An existing tool that is closely related to our work is the Cmaptools Ontology Editor (COE) [8]. 
COE supports importing, editing and storing of OWL ontologies in the form of concept maps (Cmaps). COE incorporates agglomerative, hierarchical clustering algorithms to group similar OWL concepts into clusters based on similarity. It allows useful concepts, and locating clusters of cont extually relevant concepts in the existing ontology. COE employs a two-stage search algorithm to query the neighborhood of query based on simple substring comparisons. The second-stage finds the focus clus-ters in which the matching concepts have stabilized whereas the smallest clusters that fully contain the matching concepts. 
Our objective is to develop robust and scalable techniques to manage the knowl-edge repository X  X  ontology and its instances, especially for managing large ontologies to enable knowledge sharing and reuse among the knowledge seekers. Our work is different from the review tool, whereby the ontological concept adding, editing, up-dating and querying are performed through formal context or concept lattice derived from the specific-defined clusters, instead of managing the ontology directly from the ontological context. Managing ontological co ncepts and their elements directly from its ontological context is difficult and time-consuming when the ontology is huge and large. In addition, with our hybrid model, prior knowledge is not required. In this section, the definition of ontology is presented followed by the techniques used in ontological knowledge management. 3.1 Ontologies An ontology is an explicit specification of a shared conceptualization [9]. In general, cepts. Subconcept-superconcept is defined by the is-a relation. The subconcepts in-herit the attributes of the superconcepts. Hence, ontology can be formalized as a tuple the hierarchy of Concepts. The relationship between the concepts is defined by Rela-relationship between the concepts. I is instances of the concepts and A is axioms used to infer knowledge from existing knowledge. 3.2 Formal Concept Analysis Formal Concept Analysis (FCA) is an unsupervised learning technique and also a conceptual clustering tool used for discover ing conceptual structures of data. To allow concept lattice is depicted acco rding to the context to repr esent the conceptual hierar-context. Concept lattice can be used to discover the relationship between objects and its attributes through the conceptual hierar chy of the data. More extensive explanation on the formal context and concept lattice can be referred at [2]. 3.3 Self-organizing Map and K-Means The Self-Organizing Map (SOM) is an unsupervised neural network used to cluster the data set according to similarity. SOM compresses complex and high-dimensional data to lower-dimensional data, usually to a two-dimensional grid. The most similar data are grouped together in the same cluster. K-Means clustering is applied on the learnt SOM to reduce the problem size of the SOM cluster and visibly divided semantic contexts. K-means iteratively divides a data set to a number of clusters and minimizes the error function. To compute the optimal number of clusters k for the data set, the Davies-Bouldin Validity Index (DBI) is used. Refer [3] for the detail of the SOM and K-Means clustering algorithms. 3.4 Levenshtein Edit Distance Levenshtein edit distance is a well known edit distance method for measuring the minimum number of substitutions, deletions and insertions. Based on the Levenshtein edit distance, a Lexical Similarity Measure (LSM) for two entries of ontological elements,  X  elementA and  X  elementB is depicted in Eq. 1. The degree of similarity returned by LSM is in the range of 0 to 1. LSM = 0 means no similarity and LMS = 1 means perfect similarity. Our prototypical framework for the ontological knowledge management, reuse and sharing is depicted in Fig. 1. The framework consists of two core functionalities, which are semantic clustering generation and semantic query matching to facilitate ontological knowledge management tasks. Both functions are independent from each other. Hybrid unsupervised clustering FCA, SOM and K-Means are applied in the semantic clustering generation function, while the semantic query matching function incorporates Levenshtein edit distance to resolve lexical similarity between a user-supplied query and ontological concepts in the knowledge repository. 
The framework supports the adding, editing and updating of ontological concepts through conceptual clustering, cluster-based identification and concept-based query. Ontological concept editing includes changing the metadata of the concept, attribute and instance, and ontological concept updating includes adding new attribute, adding new query enables knowledge retrieval through ontology concept search and semantic clus-ter search. The algorithms for these tasks are explained in Table 1, Table 2 and Table 3. Ontological knowledge management tasks can be performed through conceptual clus-tering, cluster-based identification and concept-based query. The conceptual clustering method displays the formal context to the us er to create new onto logical concepts or concept lattice to the user for editing or updating ontological concepts. This method is effective and efficient for managing small ontologies. 
The cluster-based identification method displays semantic clusters to the user and if he or she chooses the desired cluster (looked-up cluster) from the semantic clusters, then the looked-up formal context associated with the looked-up cluster is returned to the user to create new ontological concepts. Meanwhile, the looked-up concept lattice associated with the looked-up cluster is retu rned to the user for editing or updating of ontological concepts and also to support knowledge retrieval. 
The concept-based query method allows the user to supply a keyword as a query for finding the match or the nearest match based on semantic associations. The se-mantic matching query function is adopted to find the match. The summarization of ontological knowledge management tasks is shown in Table 4. 5.1 Semantic Clustering Generation The ontology is conceptualized using FCA to a formal context, and then a concept mantic clusters. The concept lattice provides the visualization of ontological concepts to support ontological knowledge management and retrieval. Meanwhile, the semantic clusters provide a search context for the concept-based query matching task. The concept lattice and semantic clusters are stored in the database to facilitate ontological knowledge management and knowledge retrieval. Whenever the ontology is altered (e.g. add new ontological concepts, and update and edit the existing ontological con-cepts), the generation process will be triggered to regenerate a new concept lattice and semantic clusters. 
Clustering the ontology ( merged ontology or local ontology ) into numbers of k clusters using SOM and K-Means effectively reduces the search space for creating ontological concepts, updating metadata schema of documents and querying docu-concept space via the concept lattice can benefit and expedite ontological knowledge management and knowledge retrieval tasks. The graphical user interfaces (GUI) of the formal context, concept lattice and semantic clusters is illustrated Fig. 2. 
In general, the process of the concept lattice and semantic cluster generation con-sists of ontological contextualization and contextual clustering processes as shown in Fig. 1. The concept lattice is generated after applying step 1, and subsequently in step 2, the semantic clusters are generated as outlined in the semantic clustering generation algorithm below: Input : Ontology, O S . Step 1 : Ontological contextualization Output 1 : Concept lattice is formed based on the formal context. Step 2 : Contextual clustering Output 2 : Semantic clusters are formed. 
Fig. 3 illustrates clustering of the ontology into three clusters as determined by the most optimal Davies-Bouldin index of 0.5229 with sum of squared error 5.3379 as clusters the ontological concepts given the st ructural relations of ontological concepts. the concept lattice can be used as the knowledge context for ontology management and knowledge retrieval. 5.2 Semantic Query Matching The semantic query matching function is to facilitate the concept-based query match-ing task to support ontological knowledge management. A keyword-based query is adopted in the framework. 
Given the user-supplied query, U Q and ontological concept in each semantic clus-semantic cluster is j = 1, 2, 3, ..., n. Linguistic processing is applied to discover Lexi-cal Similarity Measure (LSM) between U Q and O C ij as depicted in Fig. 1. 
Commonly, terminology of ontological concepts and their elements can be defined in the form location , has_date , hasName , BookPart , 3days_visa and etc. In linguistic processing, string normalizations such as case normalization, digit normalization, link stripping, blank normalization, stopword filtering and namespace prefixes elimination are applied to normalize ontological concepts and user supplied query for Levenshtein most precise match between two strings as defined by the experimental result for mapping and merging ontologies in [4] using LSM. 
If the LSM  X  0.8, the relevant semantic cluster where the ontological concept is de-fined is looked-up. The formal context or concept lattice corresponding to the looked-up cluster is returned to the user accordi ng to the ontological knowledge management task specified by the user. In this paper, we have proposed an algorithmic framework for managing ontological knowledge and knowledge retrieval in the knowledge repository. Semantic clustering generation and semantic query matching are core functions in framework to facilitate ontological knowledge management and knowledge retrieval through unsupervised data mining techniques. The ontological knowledge can be managed through cluster-based identification, concept-based query and conceptual clustering methods. It al-lows the knowledge seeker to semantically retrieve knowledge from the ontological concept and looked-up concept lattice. 
