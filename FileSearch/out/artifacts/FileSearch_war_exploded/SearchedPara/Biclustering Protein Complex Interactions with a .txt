
Biclustering has many applications in text mining, web clickstream mining, and bioinformatics. When data entries are binary, the tightest biclusters become bicliques. We pro-pose a flexible and highly efficient algorithm to compute bicliques. We first generalize the Motzkin-Straus formal-ism for computing the maximal clique from L 1 constraint to L p constraint, which enables us to provide a generalized Motzkin-Straus formalism for computing maximal-edge bi-cliques. By adjusting parameters, the algorithm can fa-vor biclusters with more rows less columns, or vice verse, thus increasing the flexibility of the targeted biclusters. We then propose an algorithm to solve the generalized Motzkin-Straus optimization problem. The algorithm is provably convergent and has a computational complexity of O ( | E | where | E | is the number of edges. It relies on a matrix-vector multiplication and runs efficiently on most current computer architectures. Using this algorithm, we bicluster the yeast protein complex interaction network. We find that biclustering protein complexes at the protein level does not clearly reflect the functional linkage among protein com-plexes in many cases, while biclustering at protein domain level can reveal many underlying linkages. We show several new biologically significant results.
Biclustering refers to finding sub-blocks in a rectangular data matrix, such as a word-document matrix, a web click-stream matrix (users vs websites), DNA microarray expres-sion profiles, or the protein -protein complex interaction network. Biclustering can be viewed as simultaneous data clustering and feature selection, i.e., detection of significant clusters and the features that are uniquely associated with them. This is because not all features are relevant to certain clusters, for example, only a subset of websites are respon-sible for a subset of web users in the clickstream problem. Thus one needs to combine feature selection and clustering together.

The definition of biclusters varies significantly[14], but the most intuitive notion of biclusters are dense regions in the rectangle matrix. In many cases, the data entries are binary. In these cases, the simplest and most dense sub-blocks are bicliques.

At present, the most fruitful application of biclustering is in bioinformatics. In the following, we will focus on the protein interaction network problem as the target applica-tion. The algorithms developed for cliques and bicliques are completely general and can be applied to all bipartite graphs.

A bipartite graph has two types of nodes, a set R of r -nodes and a set C of c -nodes. In the adjacency matrix of the bipartite graph, r -nodes are represented by the rows and c -nodes are represented by the columns. A biclique is a subset ( R 1 ,C 1 ) where R 1  X  R and C 1  X  C such that every r-node in R 1 is connected to every c-node in C 1 .

Let B be the adjacency matrix of the bipartite graph. B is a rectangle matrix of | R | rows ( r -nodes) and | C | ( c -nodes). A biclique Z 1 =( R 1 ,C 1 ) implies that the ma-trix sub-block B R 1 ,C 1 is a block of all 1 X  X . A biclique Z is a maximal biclique if there exists no larger bicliques of which Z 1 is a subset. A biclique ( R 1 ,C 1 ) has | R 1 nodes and nm edges. Thus, there are two types of maxi-mum bicliques: maximum edge bicliques where the number of edges is maximum, and maximum node bicliques where the number of node is maximum. From the adjacency ma-trix point of view, the maximum node biclique selects the sub-block with the largest perimeter, while the maximum edge biclique selects the sub-block with the largest area. From the application point of view, the maximum edge bi-cliques are the interesting subgraphs that we wish to com-pute.

Biclustering is used to find a subblock in the 2D gene expression data (a rectangle matrix), where rows represent genes and columns represent either tissue samples or exper-imental conditions. The rationale is that a protein is only ex-pressed in (or changes expression in) a set of tissues (pheno-types). Therefore, when clustering tissues, there is no need to include all genes. Another motivation is that a protein may participate in several functions, and thus a mutually exclusive partitioning of proteins (as occurring in standard clustering) is not appropriate.

It is known that the maximum clique finding and the maximal biclique finding are NP-hard. It is also known that the maximum clique problem is hard to approximate: there exists an &gt; 0 such that no polynomial time algorithm can approximate the size within a factor of n 1  X  [6,3,10](see also [4]).
 In this paper, we use the algorithmic approach of the Motzkin-Straus theorem that relates clique finding to the optimization of a quadratic function with L 1 constraints (see  X  3). Our main contributions are the following. We first generalize the Motzkin-Straus formalism to use L p con-straints (see  X  4) and derive an iterative algorithm to com-pute the solution (see  X  5). We then generalize the Motzkin-Straus formalism with L p constraints to bipartite graphs and derive an iterative algorithm to compute the solution (see  X  6). We prove the correctness and convergence of these algorithms. These approaches can be directly extended to weighted graphs (see  X  7).

In  X  8, we give an illustrative example to show how the algorithm works. In  X  9, we further test the algorithm for graphs with cliques and bicliques embedded. In  X  10, we apply the biclique algorithm to protein complex interactions and discuss the data, procedure, and results in detail.
Our results in protein complex interaction biclustering show that biclustering protein complexes at the protein do-main level is able to reveal many functional linkages among protein complexes which are not observed when bicluster-ing the protein complex data at protein level.
In this section we outline the main biclique finding algo-rithm. Detailed analysis of the algorithm is explained in - X  7. Section  X  8 gives an illustrative example;  X  9 discusses experiments on random graphs;  X  10 discusses the applica-tion to protein complex interactions.

Let B be the adjacency matrix of the bipartite graph (the input data matrix). B is a rectangle matrix of n = | R | rows and m = | C | columns. Define the n-vector x on the r-nodes and the m-vector x on the c-nodes.
 Computing one biclique .
 Given initial ( x (0) , y (0) ) . [e.g., x (0) =(1  X  X  X  1) y (0) =(1  X  X  X  1) T .] Set  X  =  X  =1 . 1 . The iterative algo-rithm updates x , y using: Let x  X  =( x  X  1 ,  X  X  X  ,x  X  n ) T and y  X  =( y  X  1 ,  X  X  X  ,y the converged solution. Let R be the subset correspond-ing to nonzero elements in x : R = { i | x  X  i &gt; 0 C be the subset corresponding to nonzero elements in y : C = { j | y  X  j &gt; 0 } . Then ( R, C ) is a maximal biclique. Computing multiple bicliques .

Computing different bicliques are achieved by setting different initial starts: ( x (0) , y (0) ) . Wehavetwoap-proaches. (1) random starts. Setting ( x (0) , y (0) ) to random uniform distributions. (2) Masking. After a clique ( R, C ) is detected, we set the corresponding entries of B to a small value.
We approach the problem of detecting cliques through a theorem due to Motzkin and Straus [15] which relates maxi-mal cliques to the optimization of a quadratic function. The use of the Motzkin and Straus theorem has been in a number of studies [16, 8].

Let A be the adjacency matrix of an unweighted undi-rected graph. Computing the maximal cliques can be refor-mulated as the solution to the following optimization prob-lem: where A ii =0 .
 Theorem 1 [Motzkin and Straus]. Let G be an unweighted graph. and x  X  the optimal solution for the problem of Eq.(3). Let C = { i | x  X  i &gt; 0 } be the subset correspond-ing to nonzero elements. If nonzero elements have the same values, x  X  i =1 / | C | for  X  i  X  C (in this case x  X  is called a characteristic vector of a subset C ), C is a maximal clique in G .

Note that the feasibility constraint is the L 1 norm. We generalize the Motzkin-Straus formulation in two direc-tions. First we generalize the the feasibility constraint to use L p norm (for a vector x , it is governed by || [ n i =1 | x i | p ] 1 /p ). As long as p 1 , the optimal solution vector is sparse, i.e., many elements in x  X  are zero. Using L 1 constraint to enforce sparsity is well-known in statistics as used in LASSO [17, 11].

Second, we generalize the Motzkin-Straus formulation to bipartite graph. This enables us to use it to compute bi-cliques.
Let G ( B ) be a bipartite graph with a set R of r -nodes and a set C of c -nodes. Let B be the adjacency matrix of G ( B ) . B is a rectangle matrix of n = | R | rows ( r -nodes) and m = | C | columns ( c -nodes).

A maximal biclique is computed via the solution to the following optimization problem: where the feasible regions of x is defined by where  X  =1+ , 0 &lt; 1 , and the feasible regions of y is defined by
Let ( x  X  , y  X  ) be an optimal solution, R 1 = { i | x  X  be the subset of nonzero elements in x  X  , and C 1 = { j | 0 } be the subset of nonzero elements in y  X  .
 Theorem 2 [Generalized Motzkin-Straus Theorem for bi-partite graph]. Let  X  =1+ 1 , 0 &lt; 1 1 . and  X  =1+ 2 , 0 &lt; 2 1 . For an optimal solution ( x  X  , y  X  if nonzero elements of x  X  have same values, and if nonzero elements of y  X  have same values, then ( R 1 ,C 1 ) is a max-imum edge biclique in B . The objective function has the Proof . Assume subblock B R 1 ,C 1 is a maximal biclique. x must have the form if we index the r -nodes of R 1 first. y  X  must have the form if we index the c -nodes of C 1 first. The objective becomes Because 1  X  1 / X  &gt; 0 and 1  X  1 / X  &gt; 0 , | C 1 | and simultaneously maximized.
 Remark . We can adjust  X ,  X  to favor different shapes of the computed maximal biclique. For example , if  X &gt; X  , then 1  X  1 / X  &gt; 1  X  1 / X  . This favors maximal bicliques which has larger row sizes 1 . For example, if there exists two maximal cliques A, B in the graph with same num-large row size: | R A | &gt; | R B | , then | R A | 1  X  1 / X  | | R first.

We provide an iterative algorithm to compute the max-imum biclique. We prove its feasibility, correctness, and convergence. Given initial ( x (0) , y (0) ) , the iterative algo-rithm updates x , y using: This is the same update rules of Eqs.(1,2).
 Feasibility 0 , because and Correctness
We solve the constraint optimization problem. The La-grangian function incorporating constraint is where the Lagrangian multiplier  X  is for enforcing x in F and the Lagrangian multiplier  X  is for enforcing y in F  X  The nonnegativity of x is enforced by the complementarity condition,  X  X   X  X  Summing over index i , we obtain The nonnegativity of y is enforced by the complementarity condition,  X  X   X  X  Summing over index j , we obtain
We can easily verify that (a) the converged solution for x from Eq.(1) satisfies the KKT condition Eq.(10), using Eq.(11). (b) the converged solution for y from Eq.(2) satis-fies the KKT condition Eq.(12). These ensures the correct-ness of the algorithm, using Eq.(13).
 Convergence Theorem 3 . Under the update rule for x , y , the Lagrangian function L 2 of Eq.(9) is monotonically increasing (non-decreasing),
L Since J is bounded from above, the convergence of the it-erative algorithm is thus established.
 Proof . We use the auxiliary function approach. A function G ( x , x ) is an auxiliary function of L ( x ) if Now, we define By construction, we have L ( x ( t ) )= G ( x ( t ) , x ity of L ( x ( t ) ) . under the iterative updating rule of Eq.(15).
We first note that the inequality of z  X  1 + log( z ) for any positive z . There-fore, G ( x , y , x , y )= is a auxiliary function of L 2 ( x , y ) , because G (  X  , the condition Eq.(14): The first term in L 2 is always greater than or equal to the first term in G . The equality holds when x = x , y = y . The second and third terms are identical in G and L 2 .

The maximum for Eq.(15) is obtained by setting the gra-dient to zero, and These two equations can be re-written as According to Eq.(15), the variable relations for x are x ( t )  X  x and x ( t +1)  X  x . Substituting the Lagrangian multiplier  X  value of Eq.(11), we recover the update rule Eq.(1). Similarly, the variable relations for y are y ( t )  X  and y ( t +1)  X  y . Substituting the Lagrangian multiplier  X  value of Eq.(13), we recover the update rule Eq.(2).
To ensure the solution gives a maxima, we show that the second order derivatives (Hessian matrix) of G are negative definite. We have  X  2 G ( x , x , y , y )  X  2 G ( x , x , y , y )
Because  X   X  1 and  X   X  1 , this Hessian matrix is a diagonal matrix with negative quantities on the diagonals. Therefore G ( x , x , y , y ) is a concave function in x , y and has a unique global maximum. This complete the proof of Theorem 3.
 Case  X  =2 .
 Theorem 4 .For  X  =  X  =2 , the optimal solution ( x  X  , y  X  are given by the first singular vector pair of B .Letthe singular value decomposition B = k =1  X  k u k v T k . Then x  X  = u 1 , y  X  = v 1 .
 Proof . Restricting to  X  =  X  =2 . In this case, from Eqs.(11,13),  X  =  X  . Eqs.(10,12), become Clearly, setting x  X  = u 1 , y  X  = v 1 and  X  =  X  =  X  1 / 2 sat-isfy these KKT conditions. Furthermore, according to Per-ron Theorem, the elements of u 1 , v 1 must be nonnegative since B is nonnegative.
Cliques are only defined for unweighted graphs. For a weighted graph with edge weight W , we may threshold the weights with a threshold h : setting A ij =1 if W ij  X  h ; A ij =0 otherwise. We run the algorithm to compute cliques on A ( h ) .

We may compute cliques for several threshold h  X  X : h 1 &gt; h 2 &gt;  X  X  X  &gt;h k . The thresholded graphs A ( h ) clearly satisfy A ( h 1 )  X  A ( h 2 )  X  X  X  X  X  X  A ( h k ) .Let C ( h ) rep-resents the set of cliques on graph A ( h ) . Then we have C ( h 1 )  X  C ( h 2 )  X  X  X  X  X  X  C ( h k ) .
 A natural question then arise: which h we should set? Fortunately, using Motzkin-Straus Formalism, the edge weights in A are not required to be either 0 or 1. Thus we can directly set A = W and run the algorithm; and the nonzero entries correspond to the generalized cliques. This provides an operational definition of the generalized cliques on weighted graphs. We can similarly define generalized bi-cliques on weighted bipartite graphs.
We test the ability of the algorithm to detect maximum bicliques. We embed a known biclique into the standard random graphs (two nodes are joined with an edge with fixed probability p =0 . 3 ). We vary the size of the em-bedded cliques, while fixing the rectangle matrix to be 500x1000. We set  X  =  X  =1 . 05 . Wetestedon20bi-partite graphs with randomly generated adjacency matrices. The embedded maximum bicliques are readily detected in all cases.
Proteins interact with other proteins in many cellular processes, including metabolism, endocrine and exocrine, signaling, synthesis and transport. A protein complex is formed by two or more proteins that physically interact with each other, and is often called molecular machines of life. A systematic identification, characterization and understand-ing of these molecular machines will provide an essential knowledge base, and link proteome dynamics and architec-ture to cellular function and phenotype.

A number of experimental approaches provide genomic scale protein interaction data. The two-hybrid genetic screen [13, 18] yields binary interaction data. High through-put mass spectrometry methods [7, 12] combine tagged pro-teins and protein-complex purification schemes with mass spectrometric measurements to yield physiologically rele-vant data on intact multi-protein complexes.

However, these high-throughput experiments are often associated with large false-positive rates (30-50%). Protein interaction data obtained in two independent two-hybrid screening experiments [13] and [18] overlap by less than 4%. The overlap between two mass spectrometry methods [7, 12] is also around 5%. Therefore, using computational methods to predict protein interaction modules from these data is an important way to extract additional information.
The nature of protein complexes can be easily expressed as a bipartite graph, where p -nodes refer to protein com-plexes, and r -nodes refer to proteins. We are interested in discovering densely connected subgraphs in the bipar-tite graph which are likely candidates for protein interaction modules. In graphs, the most densely connected objects are cliques. Thus we wish to detect bicliques in the bipartite graph.

Previous analysis [12, 1, 5], of protein complex data were largely performed on the protein level, i.e., discov-ering protein functional modules etc. on the network of protein complex -protein. However, comparison of com-plexes at protein level is not able to reflect the function linkage among protein complexes in many cases. For ex-ample, the protein composition of the cytoplasmic riboso-mal large subunit and the mitochondrial ribosomal large subunit both function for protein synthesis. When compar-ing the protein composition of the two complexes, no sin-gle protein is found to present in both complexes. When we compare the two protein complex at domains level, 14 domains are found to share between the two complexes Be-cause different proteins with similar activities are likely to contain similar/same domains, there are multiple instances of the domains dispersed in the data sets, while there might be only a few copies of each protein. Analyzing com-plexes at the domain level has the advantages of provid-ing an enriched functional information[20, 19]. This also eliminates the need to model internal complex-protein and protein-domain connectivity. The domain-complex associ-ation demonstrates connections between the biological pro-cesses and what the domains facilitate.

Table 1. Protein domain composition of cy-toplasmic and mitochondrial ribosomal large subunits.
The relationship between protein complexes and do-mains is naturally modeled with a bipartite graph. A bi-partite graph has two types of nodes, and edges connect-ing nodes of different types. Let G ( C, D, E ) be the bi-partite graph representing protein complexes and their con-stitutional proteins, with C-type nodes representing protein complex c i and D-type nodes representing protein domain d . The adjacency matrix E is This simple graph model assign binary weights to the edges, i.e. 1 if a domain is present in the protein, 0 otherwise.
Protein complex data were obtained from MIPS Com-prehensive Yeast Genome Database [9]. The main part of the complex data consists of manually annotated protein complexes derived from literatures. But it also includes several hundred of complexes identified by high through-put experiments. The latter set of complex data are biased by bait selection and purification method. These complexes may only represent a population of different biological com-plexes with which the bait protein is associated. Therefore, for this task, we only use the protein complexes identified from literature. As a result, 267 complexes were used and 1237 unique proteins are contained in the set of complexes.
The domain definitions of the yeast proteins are accord-ing to Pfam [2], which contains hidden Markov model based profiles (HMM-profiles) of many common protein domains based on multiple sequence alignments. The Pfam database contains two parts: one is the curated part called Pfam-A and the other is automatically generated supplement called Pfam-B which represents small families taken from the PRODOM database that do not overlap with Pfam-A. Only Pfam-A families are used here. In total, 709 Pfam domains are defined on the set of complexes. Proteins without de-fined domains are disregarded.
We apply the biclique finding algorithm to the adjacent matrix E . Significant bicliques obtained are listed in Table 3. Complete results are available upon request.

The bicliques in the domain-complexes bipartite graph define modules in protein complexes, as domains in a bi-clique are highly affiliated with each other.

To see the importance of biclustering protein complex interactions at domain level, we define a score  X  to measure the ratio of the shared domains that are attributed to shared proteins. where # D is the number of domains in the biclique pat-tern, # D p is the number of domains resulted from shared proteins among the set of complexes in the biclique pattern. The ratio  X  ranges from 0 to 1, with  X  =1 indicating no pro-tein is shared among the set of complexes but they do share the set domains. About half of the bicliques discovered have  X  =1, suggesting/confirming the importance of analyzing the protein complexes at the domain level.
The bicliques represent groups of functionally-related domains as well as functionally-related protein complexes. For example, RNA polymerase I, RNA polymerase II, and RNA polymerase III are all DNA-dependent RNA polymerases responsible for the polymerization of ribonu-cleotides into a sequence complementary to the template DNA. These three forms of RNA polymerases transcribe different sets of genes and synthesize different RNAs. RNA polymerase I is located in the nucleoli and it synthesizes precursors of most ribosomal RNAs. RNA polymerase II occurs in the nucleoplasm and it synthesizes mRNA precur-sors. RNA polymerase III also occurs in the nucleoplasm and it synthesizes the precursors of 5S ribosomal RNA, the tRNAs, and a variety of other small nuclear and cy-tosolic RNAs. One discovered biclique contains the three RNA polymerases and a set of 19 domains, all of which are annotated as DNA-directed RNA polymerase activity (GO:0003899) by gene ontology. These 19 domains con-sist of a core set of domains necessary for RNA synthesis.
Another instance is the biclique of two types of riboso-mal large subunit and 14 domains. As discussed before, the two types of ribosomal large subunits share no proteins. The domain level analysis allows us to functionally link the cytoplasmic ribosomal large subunit and mitochondrial ri-bosomal large subunit based on their 14 shared domains. The set of 14 shared domains are mostly annotated by gene ontology for protein biosynthesis (GO:0006412). Similarly, we found 11 shared domains (annotated as protein biosyn-thesis) in the cytoplasmic ribosomal small subunit and mito-chondrial ribosomal small subunit. This allows us to func-tionally link the two types of ribosomal small subunit al-though they share no common proteins.

The replication complexes, DNA polymerase alpha (I) -primase complex, DNA polymerase epsilon (II), and DNA polymerase delta (III) are linked in a biclique together with their shared domains DNA pol E B, DNA pol B exo, and DNA pol B. These complexes all involves DNA synthesis and these three domains all have DNA-directed DNA poly-merase activity (GO:0003887).

The above examples show that the biclique finding method is able to simultaneously group domains as well as protein complexes. This grouping clearly indicates func-tional linkage among the set of protein complexes and do-mains.
In this paper, we propose a new algorithm for comput-ing bicliques in bipartite graphs. The algorithm is based on generalized Motzkin-Straus formalism for cliques. It has the flexibility to favor different shapes of targeted bicliques. The algorithm can be easily implemented; it can effectively and efficiently compute maximal bicliques.

We also show that biclique finding is similar to bicluster-ing of a bipartite graph. We provide a detailed case study on finding bicliques on the protein complex interactions. We show that biclustering at the protein domain level provides many more functional linkages than biclustering at the pro-tein level.
 This work is supported in part by U.S. Department of Energy, Office of Science, through a MAGGIE project in the GTL Program, under contract DE-AC02-05CH11231.
