 The goal of semantic role labeling (SRL) is to identify predicates and arguments and label their semantic contribution in a sentence. Such labeling defines who did what to whom , when , where and how . For example, in the sentence  X  X he kids ran the marathon X , ran assigns a role to kids to denote that they are the runners; and a role to marathon to denote that it is the race course.

Models for SRL have increasingly come to rely on an array of NLP tools (e.g., parsers, lem-matizers) in order to obtain state-of-the-art re-sults (Bj  X  orkelund et al., 2009; Zhao et al., 2009). Each tool is typically trained on hand-annotated data, thus placing SRL at the end of a very high-resource NLP pipeline. However, richly annotated data such as that provided in parsing treebanks is expensive to produce, and may be tied to specific domains (e.g., newswire). Many languages do not have such supervised resources ( low-resource languages ), which makes exploring SRL cross-linguistically difficult.

The problem of SRL for low-resource lan-guages is an important one to solve, as solutions pave the way for a wide range of applications: Ac-curate identification of the semantic roles of enti-ties is a critical step for any application sensitive to semantics, from information retrieval to machine translation to question answering.

In this work, we explore models that minimize the need for high-resource supervision. We ex-amine approaches in a joint setting where we marginalize over latent syntax to find the optimal semantic role assignment; and a pipeline setting where we first induce an unsupervised grammar. We find that the joint approach is a viable alterna-tive for making reasonable semantic role predic-tions, outperforming the pipeline models. These models can be effectively trained with access to only SRL annotations, and mark a state-of-the-art contribution for low-resource SRL.

To better understand the effect of the low-resource grammars and features used in these models, we further include comparisons with (1) models that use higher-resource versions of the same features; (2) state-of-the-art high resource models; and (3) previous work on low-resource grammar induction. In sum, this paper makes several experimental and modeling contributions, summarized below.
 Experimental contributions:  X  Comparison of pipeline and joint models for  X  Subtractive experiments that consider the re- X  Analysis of the induced grammars in un-Modeling contributions:  X  Simpler joint CRF for syntactic and semantic  X  New application of unsupervised grammar  X  Constrained grammar induction using SRL  X  Use of Brown clusters in place of POS tags
The pipeline models are introduced in  X  3.1 and jointly-trained models for syntactic and semantic dependencies (similar in form to Naradowsky et al. (2012)) are introduced in  X  3.2. In the pipeline models, we develop a novel approach to unsu-pervised grammar induction and explore perfor-mance using SRL as distant supervision. The joint models use a non-loopy conditional random field (CRF) with a global factor constraining latent syn-tactic edge variables to form a tree. Efficient exact marginal inference is possible by embedding a dy-namic programming algorithm within belief prop-agation as in Smith and Eisner (2008).

Even at the expense of no dependency path fea-tures, the joint models best pipeline-trained mod-els for state-of-the-art performance in the low-resource setting (  X  4.4). When the models have ac-cess to observed syntactic trees, they achieve near state-of-the-art accuracy in the high-resource set-ting on some languages (  X  4.3).

Examining the learning curve of the joint and pipeline models in two languages demonstrates that a small number of labeled SRL examples may be essential for good end-task performance, but that the choice of a good model for grammar in-duction has an even greater impact. Our work builds upon research in both seman-tic role labeling and unsupervised grammar in-duction (Klein and Manning, 2004; Spitkovsky et al., 2010a). Previous related approaches to se-mantic role labeling include joint classification of semantic arguments (Toutanova et al., 2005; Jo-hansson and Nugues, 2008), latent syntax induc-tion (Boxwell et al., 2011; Naradowsky et al., 2012), and feature engineering for SRL (Zhao et al., 2009; Bj  X  orkelund et al., 2009).

Toutanova et al. (2005) introduced one of the first joint approaches for SRL and demon-strated that a model that scores the full predicate-argument structure of a parse tree could lead to significant error reduction over independent clas-sifiers for each predicate-argument relation.
Johansson and Nugues (2008) and Llu  X   X s et al. (2013) extend this idea by coupling predictions of a dependency parser with predictions from a se-mantic role labeler. In the model from Johans-son and Nugues (2008), the outputs from an SRL pipeline are reranked based on the full predicate-argument structure that they form. The candidate set of syntactic-semantic structures is reranked us-ing the probability of the syntactic tree and seman-tic structure. Llu  X   X s et al. (2013) use a joint arc-factored model that predicts full syntactic paths along with predicate-argument structures via dual decomposition.

Boxwell et al. (2011) and Naradowsky et al. (2012) observe that syntax may be treated as la-tent when a treebank is not available. Boxwell et al. (2011) describe a method for training a se-mantic role labeler by extracting features from a packed CCG parse chart, where the parse weights are given by a simple ruleset. Naradowsky et al. (2012) marginalize over latent syntactic depen-dency parses.

Both Boxwell et al. (2011) and Naradowsky et al. (2012) suggest methods for SRL without supervised syntax, however, their features come largely from supervised resources. Even in their lowest resource setting, Boxwell et al. (2011) re-quire an oracle CCG tag dictionary extracted from a treebank. Naradowsky et al. (2012) limit their exploration to a small set of basic features, and included high-resource supervision in the form of lemmas, POS tags, and morphology available from the CoNLL 2009 data.

There has not yet been a comparison of tech-niques for SRL that do not rely on a syntactic treebank, and no exploration of probabilistic mod-els for unsupervised grammar induction within an SRL pipeline that we have been able to find.
Related work for the unsupervised learning of dependency structures separately from semantic roles primarily comes from Klein and Manning (2004), who introduced the Dependency Model with Valence (DMV). This is a robust generative model that uses a head-outward process over word classes, where heads generate arguments.

Spitkovsky et al. (2010a) show that Viterbi (hard) EM training of the DMV with simple uni-form initialization of the model parameters yields higher accuracy models than standard soft-EM Figure 1: Pipeline approach to SRL. In this sim-ple pipeline, the first stage syntactically parses the corpus, and the second stage predicts semantic predicate-argument structure for each sentence us-ing the labels of the first stage as features. In our low-resource pipelines, we assume that the syntac-tic parser is given no labeled parses X  X owever, it may optionally utilize the semantic parses as dis-tant supervision. Our experiments also consider  X  X onger X  pipelines that include earlier stages: a morphological analyzer, POS tagger, lemmatizer. training. In Viterbi EM, the E-step finds the max-imum likelihood corpus parse given the current model parameters. The M-step then finds the maximum likelihood parameters given the corpus parse. We utilize this approach to produce unsu-pervised syntactic features for the SRL task.
Grammar induction work has further demon-strated that distant supervision in the form of ACE-style relations (Naseem and Barzilay, 2011) or HTML markup (Spitkovsky et al., 2010b) can lead to considerable gains. Recent work in fully unsupervised dependency parsing has sup-planted these methods with even higher accuracies (Spitkovsky et al., 2013) by arranging optimiz-ers into networks that suggest informed restarts based on previously identified local optima. We do not reimplement these approaches within the SRL pipeline here, but provide comparison of these methods against our grammar induction approach in isolation in  X  4.5.

In both pipeline and joint models, we use fea-tures adapted from state-of-the-art approaches to SRL. This includes Zhao et al. (2009) features, who use feature templates from combinations of word properties, syntactic positions including head and children, and semantic properties; and features from Bj  X  orkelund et al. (2009), who utilize features on syntactic siblings and the dependency path concatenated with the direction of each edge. Features are described further in  X  3.3. We consider an array of models, varying: 1. Pipeline vs. joint training (Figures 1 and 2) 2. Types of supervision 3. The objective function at the level of syntax 3.1 Unsupervised Syntax in the Pipeline Typical SRL systems are trained following a pipeline where the first component is trained on supervised data, and each subsequent component is trained using the 1-best output of the previous components. A typical pipeline consists of a POS tagger, dependency parser, and semantic role la-beler. In this section, we introduce pipelines that remove the need for a supervised tagger and parser by training in an unsupervised and distantly super-vised fashion.
 Brown Clusters We use fully unsupervised Brown clusters (Brown et al., 1992) in place of POS tags. Brown clusters have been used to good effect for various NLP tasks such as named entity recognition (Miller et al., 2004) and dependency parsing (Koo et al., 2008; Spitkovsky et al., 2011).
The clusters are formed by a greedy hierachi-cal clustering algorithm that finds an assignment of words to classes by maximizing the likelihood of the training data under a latent-class bigram model. Each word type is assigned to a fine-grained cluster at a leaf of the hierarchy of clusters. Each cluster can be uniquely identified by the path from the root cluster to that leaf. Representing this path as a bit-string (with 1 indicating a left and 0 indicating a right child) allows a simple coarsen-ing of the clusters by truncating the bit-strings. We train 1000 Brown clusters for each of the CoNLL-Unsupervised Grammar Induction Our first method for grammar induction is fully unsuper-vised Viterbi EM training of the Dependency Model with Valence (DMV) (Klein and Manning, 2004), with uniform initialization of the model pa-rameters. We define the DMV such that it gener-ates sequences of word classes: either POS tags or Brown clusters as in Spitkovsky et al. (2011). The DMV is a simple generative model for pro-jective dependency trees. Children are generated recursively for each node. Conditioned on the par-ent class, the direction (right or left), and the cur-rent valence (first child or not), a coin is flipped to decide whether to generate another child; the dis-tribution over child classes is conditioned on only the parent class and direction. Constrained Grammar Induction Our second method, which we will refer to as DMV+C, in-duces grammar in a distantly supervised fashion by using a constrained parser in the E-step of Viterbi EM. Since the parser is part of a pipeline, we constrain it to respect the downstream SRL an-notations during training. At test time, the parser is unconstrained.

Dependency-based semantic role labeling can be described as a simple structured prediction problem: the predicted structure is a labeled di-rected graph, where nodes correspond to words in the sentence. Each directed edge indicates that there is a predicate-argument relationship between the two words; the parent is the predicate and the child the argument. The label on the edge indi-cates the type of semantic relationship. Unlike syntactic dependency parsing, the graph is not re-quired to be a tree, nor even a connected graph. Self-loops and crossing arcs are permitted.
The constrained syntactic DMV parser treats the semantic graph as observed, and constrains the syntactic parent to be chosen from one of the se-mantic parents, if there are any. In some cases, imposing this constraint would not permit any pro-jective dependency parses X  X n this case, we ignore the semantic constraint for that sentence. We parse with the CKY algorithm (Younger, 1967; Aho and Ullman, 1972) by utilizing a PCFG corresponding to the DMV (Cohn et al., 2010). Each chart cell al-lows only non-terminals compatible with the con-strained sets. This can be viewed as a variation of Pereira and Schabes (1992).
 Semantic Dependency Model As described above, semantic role labeling can be cast as a structured prediction problem where the structure is a labeled semantic dependency graph. We de-fine a conditional random field (CRF) (Lafferty et al., 2001) for this task. Because each word in a sentence may be in a semantic relationship with any other word (including itself), a sentence of length n has n 2 possible edges. We define a single L + 1 -ary variable for each edge, whose value can be any of L semantic labels or a special label indi-cating there is no predicate-argument relationship between the two words. In this way, we jointly perform identification (determining whether a se-mantic relationship exists) and classification (de-termining the semantic label). This use of an L + 1 -ary variable is in contrast to the model of Narad-owsky et al. (2012), which used a more complex Figure 2: Factor graph for the joint syntac-tic/semantic dependency parsing model. set of binary variables and required a constraint factor permitting AT -MOST -ONE . We include one unary factor for each variable.

We optionally include additional variables that perform word sense disambiguation for each pred-icate. Each has a unary factor and is completely disconnected from the semantic edge (similar to Naradowsky et al. (2012)). These variables range over all the predicate senses observed in the train-ing data for the lemma of that predicate. 3.2 Joint Syntactic and Semantic Parsing In Section 3.1, we introduced pipeline-trained models for SRL, which used grammar induction to predict unlabeled syntactic parses. In this sec-tion, we define a simple model for joint syntactic and semantic dependency parsing.

This model extends the CRF model in Section 3.1 to include the projective syntactic dependency parse for a sentence. This is done by includ-ing an additional n 2 binary variables that indicate whether or not a directed syntactic dependency edge exists between a pair of words in the sen-tence. Unlike the semantic dependencies, these syntactic variables must be coupled so that they produce a projective dependency parse; this re-quires an additional global constraint factor to en-sure that this is the case (Smith and Eisner, 2008). The constraint factor touches all n 2 syntactic-edge variables, and multiplies in 1 . 0 if they form a pro-jective dependency parse, and 0 . 0 otherwise. We couple each syntactic edge variable to its semantic edge variable with a binary factor. Figure 2 shows the factor graph for this joint model.

Note that our factor graph does not contain any loops, thereby permitting efficient exact marginal inference just as in Naradowsky et al. (2012). We
Table 1: Word and edge properties in templates. Table 2: Word positions used in templates. Based on current word position ( i ), positions related to current word w i , possible parent, child ( w p , w c ), lowest common ancestor between parent/child ( w lca ), and syntactic root ( w root ). train our CRF models by maximizing conditional log-likelihood using stochastic gradient descent with an adaptive learning rate (AdaGrad) (Duchi et al., 2011) over mini-batches.

The unary and binary factors are defined with exponential family potentials. In the next section, we consider binary features of the observations (the sentence and labels from previous pipeline stages) which are conjoined with the state of the variables in the factor. 3.3 Features for CRF Models Our feature design stems from two key ideas. First, for SRL, it has been observed that fea-ture bigrams (the concatenation of simple fea-tures such as a predicate X  X  POS tag and an ar-gument X  X  word) are important for state-of-the-art (Zhao et al., 2009; Bj  X  orkelund et al., 2009). Sec-ond, for syntactic dependency parsing, combining Brown cluster features with word forms or POS tags yields high accuracy even with little training data (Koo et al., 2008).

We create binary indicator features for each model using feature templates. Our feature tem-plate definitions build from those used by the top performing systems in the CoNLL-2009 Shared Task, Zhao et al. (2009) and Bj  X  orkelund et al. (2009) and from features in syntactic dependency parsing (McDonald et al., 2005; Koo et al., 2008). Template Creation Feature templates are de-fined over triples of  X  property , positions , order  X  . Properties , listed in Table 1, are extracted from word positions within the sentence, shown in Ta-ble 2. Single positions for a word w i include its syntactic parent, its leftmost farthest child ( etc. Following Zhao et al. (2009), we include the notion of verb and noun supports and sections of the dependency path. Also following Zhao et al. (2009), properties from a set of positions can be put together in three possible orders : as the given sequence, as a sorted list of unique strings, and re-moving all duplicated neighbored strings. We con-sider both template unigrams and bigrams, com-bining two templates in sequence.

Additional templates we include are the relative position (Bj  X  orkelund et al., 2009), geneological re-lationship, distance (Zhao et al., 2009), and binned distance (Koo et al., 2008) between two words in the path. From Llu  X   X s et al. (2013), we use 1 , 2 , 3 -gram path features of words/POS tags ( path-grams ), and the number of non-consecutive token pairs in 3.4 Feature Selection Constructing all feature template unigrams and bi-grams would yield an unwieldy number of fea-tures. We therefore determine the top N template bigrams for a dataset and factor a according to an information gain measure (Martins et al., 2011): where T m is the m th feature template, f is a par-ticular instantiation of that template, and x a is an assignment to the variables in factor a . The proba-bilities are empirical estimates computed from the training data. This is simply the mutual informa-tion of the feature template instantiation with the variable assignment.

This filtering approach was treated as a sim-ple baseline in Martins et al. (2011) to contrast with increasingly popular gradient based regular-ization approaches. Unlike the gradient based ap-proaches, this filtering approach easily scales to many features since we can decompose the mem-ory usage over feature templates.

As an additional speedup, we reduce the dimen-sionality of our feature space to 1 million for each clique using a common trick referred to as fea-ture hashing (Weinberger et al., 2009): we map each feature instantiation to an integer using a hash We are interested in the effects of varied super-vision using pipeline and joint training for SRL. To compare to prior work (i.e., submissions to the CoNLL-2009 Shared Task), we also consider the joint task of semantic role labeling and predicate sense disambiguation. Our experiments are sub-tractive, beginning with all supervision available and then successively removing (a) dependency syntax, (b) morphological features, (c) POS tags, and (d) lemmas. Dependency syntax is the most expensive and difficult to obtain of these various forms of supervision. We explore the importance of both the labels and structure, and what quantity of supervision is useful. 4.1 Data The CoNLL-2009 Shared Task (Haji  X  c et al., 2009) dataset contains POS tags, lemmas, morpholog-ical features, syntactic dependencies, predicate senses, and semantic roles annotations for 7 lan-guages: Catalan, Chinese, Czech, English, Ger--2008 Shared Task datasets provide English SRL annotation, and for cross dataset comparability we consider only verbal predicates (more details in  X  4.4). To compare with prior approaches that use semantic supervision for grammar induction, we utilize Section 23 of the WSJ portion of the Penn Treebank (Marcus et al., 1993). 4.2 Feature Template Sets Our primary feature set IG C consists of 127 tem-plate unigrams that emphasize coarse properties (i.e., properties 7, 9, and 11 in Table 1). We also explore the 31 template unigrams 5 IG B described by Bj  X  orkelund et al. (2009). Each of IG C and IG B also include 32 template bigrams selected by in-formation gain on 1000 sentences X  X e select a different set of template bigrams for each dataset.
We compare against the language-specific fea-ture sets detailed in the literature on high-resource top-performing SRL systems: From Bj  X  orkelund et al. (2009), these are feature sets for German, En-glish, Spanish and Chinese, obtained by weeks of forward selection ( B de,en,es,zh ); and from Zhao et al. (2009), these are features for Catalan Z ca . 6 4.3 High-resource SRL We first compare our models trained as a pipeline, using all available supervision (syntax, morphol-ogy, POS tags, lemmas) from the CoNLL-2009 data. Table 4(a) shows the results of our model with gold syntax and a richer feature set than that of Naradowsky et al. (2012), which only looked at whether a syntactic dependency edge was present. This highlights an important advan-tage of the pipeline trained model: the features can consider any part of the syntax (e.g., arbitrary sub-trees), whereas the joint model is limited to those features over which it can efficiently marginalize (e.g., short dependency paths). This holds true even in the pipeline setting where no syntactic su-pervision is available.

Table 4(b) contrasts our high-resource results for the task of SRL and sense disambiguation with the top systems in the CoNLL-2009 Shared Task, giving further insight into the performance of the simple information gain feature selection technique. With supervised syntax, our sim-ple information gain feature selection technique (  X  3.4) performs admirably. However, the orig-inal unigram Bj  X  orkelund features (B de,en,es,zh ), which were tuned for a high-resource model, ob-tain higher F1 than our information gain set us-ing the same features in unigram and bigram tem-plates (IG B ). This suggests that further work on feature selection may improve the results. We find that IG B obtain higher F1 than the original Bj  X  orkelund feature sets (B de,en,es,zh ) in the low-resource pipeline setting with constrained gram-mar induction (DMV+C). Table 5: F1 for SRL approaches (without sense disambiguation) in matched and mismatched train/test settings for CoNLL 2005 span and 2008 head supervision. We contrast low-resource ( ) and high-resource settings ( X ), where latter uses a treebank. See  X  4.4 for caveats to this comparison. 4.4 Low-Resource SRL CoNLL-2009 Table 4(c) includes results for our low-resource approaches and Naradowsky et al. (2012) on predicting semantic roles as well as sense. In the low-resource setting of the CoNLL-2009 Shared task without syntactic supervision, our joint model (Joint) with marginalized syntax obtains state-of-the-art results with features IG C described in  X  4.2. This model outperforms prior work (Naradowsky et al., 2012) and our pipeline model (Pipeline) with contrained (DMV+C) and unconstrained grammar induction (DMV) trained on brown clusters (bc).

In the low-resource setting, training and decod-ing times for the pipeline and joint methods are similar as computation time tends to be dominated by feature extraction.

These results begin to answer a key research question in this work: The joint models outper-form the pipeline models in the low-resource set-ting. This holds even when using the same feature selection process. Further, the best-performing low-resource features found in this work are those based on coarse feature templates and selected by information gain. Templates for these fea-tures generalize well to the high-resource setting. However, analysis of the induced grammars in the pipeline setting suggests that the book is not closed on the issue. We return to this in  X  4.5. CoNLL-2008, -2005 To finish out comparisons with state-of-the-art SRL, we contrast our ap-proach with that of Boxwell et al. (2011), who evaluate on SRL in isolation (without sense disam-biguation, as in CoNLL-2009). They report results on Prop-CCGbank (Boxwell and White, 2008), which uses the same training/testing splits as the CoNLL-2005 Shared Task. Their results are there-2005 dataset, which we can compare here.

There is an additional complication in com-paring SRL approaches directly: The CoNLL-2005 dataset defines arguments as spans instead of heads, which runs counter to our head-based syn-tactic representation. This creates a mismatched train/test scenario: we must train our model to pre-dict argument heads , but then test on our models ability to predict argument spans . 8 We therefore train our models on the CoNLL-2008 argument to spans using the conversion algorithm available are either from an MBR tree or an oracle tree. This gives Boxwell et al. (2011) the advantage, since our syntactic dependency parses are optimized to pick out semantic argument heads, not spans.
Table 5 presents our results. Boxwell et al. (2011) (B X 11) uses additional supervision in the form of a CCG tag dictionary derived from su-pervised data with (tdc) and without (tc) a cut-off. Our model does very poorly on the  X 05 span-based evaluation because the constituent bracket-ing of the marginalized trees are inaccurate. This is elucidated by instead evaluating on the ora-cle spans, where our F1 scores are higher than Boxwell et al. (2011). We also contrast with rela-vant high-resource methods with span/head con-versions from Johansson and Nugues (2008): Pun-yakanok et al. (2008) (PRY X 08) and Johansson and Nugues (2008) (JN X 08).
 Subtractive Study In our subsequent experi-ments, we study the effectiveness of our models as the available supervision is decreased. We in-crementally remove dependency syntax, morpho-logical features, POS tags, then lemmas. For these experiments, we utilize the coarse-grained feature set (IG C ), which includes Brown clusters. Across languages, we find the largest drop in F1 when we remove POS tags; and we find a gain in F1 when we remove lemmas. This indi-cates that lemmas, which are a high-resource an-notation, may not provide a significant benefit for this task. The effect of removing morphological features is different across languages, with little change in performance for Catalan and Spanish, Table 6: Subtractive experiments. Each row con-tains the F1 for SRL only (without sense disam-biguation) where the supervision type of that row and all above it have been removed. Removed su-pervision types (Rem) are: syntactic dependencies ( Dep ), morphology ( Mor ), POS tags ( POS ), and lemmas ( Lem ). #FT indicates the number of fea-ture templates used (unigrams+bigrams). Figure 3: Learning curve for semantic dependency supervision in Catalan and German. F1 of SRL only (without sense disambiguation) shown as the number of training sentences is increased. but a drop in performance for German. This may reflect a difference between the languages, or may reflect the difference between the annotation of the languages: both the Catalan and Spanish data orig-man data came from another source.

Figure 3 contains the learning curve for SRL su-pervision in our lowest resource setting for two example languages, Catalan and German. This shows how F1 of SRL changes as we adjust the number of training examples. We find that the joint training approach to grammar induction yields consistently higher SRL performance than its distantly supervised counterpart. 4.5 Analysis of Grammar Induction Table 7 shows grammar induction accuracy in low-resource settings. We find that the gap be-tween the supervised parser and the unsupervised methods is quite large, despite the reasonable ac-curacy both methods achieve for the SRL end task. Table 7: Unlabeled directed dependency accuracy on CoNLL X 09 test set in low-resource settings. DMV models are trained on either POS tags (pos) Table 8: Comparison of grammar induction ap-proaches. We contrast the DMV trained with Viterbi EM+uniform initialization (DMV), our constrained DMV (DMV+C), and our model X  X  MBR decoding of latent syntax (Marginalized) with other recent work: Spitkovsky et al. (2010a) (SAJM X 10), Spitkovsky et al. (2010b) (SJA X 10), Naseem and Barzilay (2011) (NB X 11), and the CS model of Spitkovsky et al. (2013) (SAJ X 13). This suggests that refining the low-resource gram-mar induction methods may lead to gains in SRL.
Interestingly, the marginalized grammars best the DMV grammar induction method; however, this difference is less pronounced when the DMV is constrained using SRL labels as distant super-vision. This could indicate that a better model for grammar induction would result in better perfor-mance for SRL. We therefore turn to an analysis of other approaches to grammar induction in Table 8, evaluated on the Penn Treebank. We contrast with methods using distant supervision (Naseem and Barzilay, 2011; Spitkovsky et al., 2010b) and fully unsupervised dependency parsing (Spitkovsky et al., 2013). Following prior work, we exclude punctuation from evaluation and convert the con-
The approach from Spitkovsky et al. (2013) (SAJ X 13) outperforms all other approaches, in-cluding our marginalized settings. We therefore may be able to achieve further gains in the pipeline model by considering better models of latent syn-tax, or better search techniques that break out of local optima. Similarly, improving the non-convex optimization of our latent-variable CRF (Marginalized) may offer further gains. We have compared various approaches for low-resource semantic role labeling at the state-of-the-art level. We find that we can outperform prior work in the low-resource setting by coupling the selection of feature templates based on informa-tion gain with a joint model that marginalizes over latent syntax.

We utilize unlabeled data in both generative and discriminative models for dependency syntax and in generative word clustering. Our discriminative joint models treat latent syntax as a structured-feature to be optimized for the end-task of SRL, while our other grammar induction techniques op-timize for unlabeled data likelihood X  X ptionally with distant supervision. We observe that careful use of these unlabeled data resources can improve performance on the end task.

Our subtractive experiments suggest that lemma annotations, a high-resource annotation, may not provide a large benefit for SRL. Our grammar in-duction analysis indicates that relatively low accu-racy can still result in reasonable SRL predictions; still, the models do not outperform those that use supervised syntax, and we aim to explore how well the pipeline models in particular improve when we apply higher accuracy unsupervised grammar in-duction techniques.

We have utilized well studied datasets in order to best understand the quality of our models rela-tive to prior work. In future work, we hope to ex-plore the effectiveness of our approaches on truly low resource settings by using crowdsourcing to develop semantic role datasets in other languages and domains.
 Acknowledgments We thank Richard Johans-son, Dennis Mehay, and Stephen Boxwell for help with data. We also thank Jason Naradowsky, Jason Eisner, and anonymous reviewers for comments on the paper.
