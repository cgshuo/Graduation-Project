 Active rules are used to provide reactive functionality in many areas, including active databases [1,2,3], workflow management [4], and XML documents [5,6]. 
Active rules are structured according to paradigm Event-Condition-Action. As the way to specify a rule set is unstructured, the termination problem (the rules execution can sometimes be infinite) of a rule set is known as an undecidable problem [7]. Many works propose some sufficient conditions allowing to guarantee termination. augments a TG with an activation graph (AG) where an edge will be removed unless [10,11] construct a stronger condition for termination decision than [9]. [12] proposes a sophisticated technique for building Activation Graphs, which complements nicely with the techniques presented in [2,3]. [13] translates ECA rules into deductive rules. However, proving termination requires the equivalence of translation from ECA rules uses large complex tables to examine all properties. [5,6] study ECA rules in the con-text of XML data. [5] does not focus on analysis of the rules X  behavior, while [6] de-scribes an ECA rule language for XML and offers the techniques for inferring trigger-ing and activation relationship between pairs of its XML ECA rules. 
In this paper, we exploit TG and AG to solve the rules termination problem. With [6,12]. The proposed approach in this paper is both practical and general because it is independent of the various rule languages. Moreover, it improves the techniques in-troduced by [2,3,9-11] and is more efficient and effective than methods in [13,14]. In execution semantics presented in section2, we observe two cases as follows. 
Case1: For a path in TG or in AG, if its formula constructed by methods in [9-11] while [2,3] do not consider this case at all. 
Case2: For any rule in a TG cycle, if no activation path can be synchronously and infinitely executed with it, it must be terminable. [2,3,9-11] do not consider this case. 
The remainder of this paper is structured as follows. Section2 introduces the pre-liminaries for our work; Section3 presents three motivating examples; Section4 pro-our algorithm for termination analysis; Section7 concludes the paper. 2.1 Active Rules The active rules are structured according to paradigm Event-Condition-Action. Event is either data operation event (inside of the Database system) or event reported to the system by the outside. Condition is a request on the database and is always expressed as database queries. Action is generally composed of a sequence of database updates, or a procedure containing database updates. 
Let r i and r j be two rules, we consider two different relations among rules. z r i triggers r j , if one of the r i  X  s actions has the corresponding event in r j ; These relations can be described with Triggering Graph (TG) and Activation Graph (AG), respectively. TG can be built by means of a syntactic analysis of rules [1], and AG can be built by the techniques provided by [12]. 
In this paper, all rules in a rule set should be self-disactivating rule, whose action X  X  execution falsifies its condition. Thus, the AG can provide additional information for termination analysis with respect to the TG [2,3]. [6] describes an ECA rule language for XML and offers the techniques of building TG and AG for these XML ECA rules. 2.2 The Rule Execution Model coupling), or the execution moment of the Action Part (C-A coupling). The most fre-quent modes are Immediate and Deferred . In this paper, E-C coupling and C-A cou-cuted) immediately after the event (condition). 
Cycle policy addresses the question of what happens when events are signaled by the evaluation of the condition or action of a rule. Database systems always support a recursive cycle policy for immediate rules. In this case, event signaled during condi-immediate rules monitoring the events can be processed at the earliest opportunity. 
The scheduling phase of rule evaluation determines what happens when multiple rules are triggered at the same time. In this paper, scheduling is All Sequential . Thus, the system fires all rule instantiations sequentially. from the triggered rules set. 
Details about the Rule Execution Model presented here can be seen in [15,16]. as Oracle X  X  triggers which are self-disactivating rules [2]. Example 1. Figure1 presents the triggering and activation graph for a rule set, where the solid arcs are triggering ones and the dashed arcs are activation ones. Since each rule is in a TG cycle and can be re-activated after a self-deactivation, [2,3] determine this rule set may be non-termination. { r 4 , r 5 }is the only cycle in both TG and AG. Ac-rule set [2,3]. This is because there are no two rules r a and r t that both can be reach-Example 2. Six triggers are defined on four tables: R (A, B, C, D), S (H, L), Q (I, F), T (E, G, M) and they are shown in Figure2. self-deactivation, [2,3] determine that this rule set may be non-termination. T.M is the removed from TG by [9-11], and the termination cannot be guaranteed. However, R  X  1 guaranteed to be re-activated after a self-deactivation. As a result, this rule set always and a path in AG at the same time, so they cannot detect such a termination case. Example 3. Six triggers are defined on four tables: R (A, B, C, D), S (H, L), Q (I, F), and an AG cycle R  X  1 { r 1 , r 2 , r 4 , r 3 }. end ; end; 
Under our assumption of rule execution semantics as above, R 1 and R 2 cannot be synchronously executed at the same time. When any rule in R 1 is triggered by the sys-tem, r 4 cannot be triggered at the same time. After a self-deactivation, the condition of r r same analytical result can be obtained when any rule in R 2 is triggered by the system. Thus, this rule set always terminates. 
All attributes in the conditions of this rule set are updatable and no finitely-updatable attribute can be detected by [11]; No edge can be removed from TG by [2,3]. So [2,3,9-11] cannot deal with such a termination case. From Example1, we can see the inadequacy of the notion in [2,3]. To improve them, we present Definition 1 and Definition 2. reachable from R , such that &lt; r t , r j &gt;  X  TG. reachable from R , such that &lt; r a , r j &gt;  X  AG. r , r 3 }, r 5 and r 6 are activation reachable from { r 1 , r 2 , r 3 }. end ; end ; ..., r n , r 0 &gt; is called as an AG cycle . Theorem 1. In the AG, if a rule r isn X  X  in an AG cycle and isn X  X  activation reachable from an AG cycle, r must be finitely executed. the conclusion holds. Such notions as activation path and activation path set are presented based on Theorem1 in order to accurately expres s the infinite activation relationship. r &gt;  X  AG can be defined as follows: 1. If r a is in a AG cycle R a , P a is denoted as R a ; in R a ; hold. cycle R  X  1 . For the rule r 6 , its activation path is ( R  X  1 , r 5 ). to its activation rules. It is denoted as Path-Set act ( r ). Theorem 2. All paths in AG, which can infinitely activate r , must be contained by the r  X  X  activation path set.
 Proof. It is intuitively followed by theorem1and definition5. 5.1 Considering Synchronous Execution of an Activation Path Definition 7. An Irreducible Active Rule Set is a subset of the active rule set R ob-tained by applying to R the Rule Reduction Algorithm in [2,3]. [2,3] have proved that all rules removed from an Irreducible Active Rule Set must be finitely executed. If no specific notice, all rules, TG cycles and AG cycles referred by following theorems are all in an irreducible rule set R . be non-termination. 
Obviously, theorem3 depicts a very simple case and its conclusion is intuitive. ways is an activation path P a of r and P a holds one of the following two properties: Thus, R T may be non-termination. execution sequence of R T . This can be done using the method [3] which exploits pri-vated in an execution sequence of R T , Theorem4 holds. trary activation path of r , which holds the following property: besides some rules that tained by P a cannot be triggering reachable from R T . Thus, the following conclusions can be obtained: (1) Those rules contained by P a , which cannot be triggering reachable from R T , must (3) If R  X  T is termination, R T must be termination. (4) If R T is non-termination, R  X  T must be non-termination. Proof. (a) Let r  X  be an arbitrary rule of P a which cannot be triggering reachable from R reachable from R  X  T . Otherwise, r  X  must be removed from R by the Rule Reduction Al-gorithm [2,3]. So conclusion (1) holds. (b) The conclusion (2) is proven by contradiction. Let r  X  be an arbitrary rule in R  X  T and assuming that r  X  can be triggering reachable from R T . According to the notion of must be triggering reachable from R T .This is in contradiction with the conclusion (1). By the assumption of theorem5, there must exist four cases as follows. finitely executed. By 1) and 2), R T must be termination. The conclusion (3) holds. tradiction with the conclusion (3). Th erefore, the conclusion (4) holds. R mination of R .Thus, we should firstly consider the termination of R  X  T . By the conclu-sions (3) and (4), R T can be always considered as terminable when deciding the termi-termination at the same time. So the conclusion (5) holds. 
Regarding a TG cycle, which satisfies the condition of theorem5, as terminable, a following conclusion can be made from theorem3-5. reachable from R T . Thus, R T may be non-termination. Otherwise, R T must be termina-tion. 5.2 The Formula Constructed for an Activation Path A TG cycle, which may be non-termination judged by corollary1, can be termination detected by the technique of constructing a formula for an activation path. when a user transaction triggers at least one rule in R T . All RESs belong to R T form a set denoted as RES-Set ( R T ). &gt;&gt; + , RES 2=&lt;&lt; r 1 , r 2 , r 4 , r 5 , r 6 , r 3 &gt;&gt; + , RES-Set ( R if Rules-Set (  X  )  X  Rules-Set ( P a ). 
From corollary1, it can be deduced that any rule in a non-termination TG cycle R T technique of constructing the formula for a path or a RES of R T . non-satisfiable path . A path P is a key non-satisfiable path with respect to a rule set R , if P is a non-satisfiable path and the end node of P belongs to R . satisfiable path with respect to a rule set in order to guarantee making a rule in R T or P terminable. Thus, R T or P a must be termination when  X  is performed. infinitely executed with  X  . Otherwise, if it is followed that for any RES  X  in RES-Set ( R T ), which contains P a , it must have a key non-satisfiable path with respect to Rules-formed by the system. Example 7. In Figure 3, there are two RESs of R 1 as shown in Example6. r 6 has the may be infinitely executed. 5.3 Effective Activation Path Definition 11. An AG cycle R A is an inhibited AG cycle , if R A is termination. Theorem 7. Let R A be an arbitrary AG cycle in an irreducible rule set R . If any rule in R termination. Otherwise, R A must be termination. Example 8. In Figure 3, Example7 has shown that only RES 2 of the TG cycle R 1 con-RES 2 should be only finitely executed. Thus, R  X  1 must be termination. executed. Theorem 8. Let r be an arbitrary rule and isn X  X  in an AG cycle. If r can be activation reachable from a AG cycle R A and both r and any rule in R A can be triggering reach-able from a TG cycle R T which holds the following property: ) ( T R Set RES  X   X   X   X  satis-wise, r must be finitely executed. activation rule is called as an effective activation path . ways is an effective activation path P a of r and any rule contained by P a can be trig-gering reachable from R T which holds the following property: ) ( T R Set RES  X   X   X   X  sat-must be termination. S ={ R A | R A is an AG cycle in R }. Theorem 10. Algorithm1. is correct and will terminate. Proof. Algorithm1 is guaranteed to be correct by theorem7-9. For TG cycles, RESs of a TG cycle, AG cycles, rules, activation paths in R , the numbers of them are finite, so algorithm1 can automatically terminate. Example 9. We analyze the motivating Example2 through the algorithm1. 1. In Figure 3, R 1 has two RESs as shown in Example6. Since Rules-Set be activation reachable from R  X  1 , so they are both inhibited. the only TG cycle, this rule set must be termination. 
The rule set in Example3 must be termination deduced by the algorithm1. As we analyzed in section3, [2,3,9-11] cannot determine these termination cases. We have described the idea of activation path and formula constructed for activation path. Moreover, we have proposed a new method to detect more termination situa-tions than previous works [2,3,9-11]. Since our methods are based on TG and AG, guage for XML to the trigger language in SQL: 1999 standard. 
