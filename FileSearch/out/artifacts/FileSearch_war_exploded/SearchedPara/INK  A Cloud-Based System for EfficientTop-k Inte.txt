 It is insufficient to search temporal text by only focusing on either time attribute or keywords today as we pay close attention to the evolution of event with time. Both tem-poral and textual constraints need to be considered in one single query, called Top-k Interval Keyword Query (TIKQ) . In this paper, we presents a cloud-based system named INK that supports efficient execution of TIKQs with appropriate effectiveness on Hadoop and HBase. In INK, an Adaptive In-dex Selector (AIS) is devised to choose the better execution plan for various TIKQs adaptively based on the proposed cost model, and leverage two novel hybrid index modules (TriI and IS-Tree) to combine keyword and interval filtra-tion seamlessly.
 H.3.4 [ Information Search and Retrieval ]: Search pro-cess; H.2.4 [ Database Management ]: System X  Query Pro-cessing Experimentation, Algorithms, Performance Top-k Interval Keyword Query; Adaptive Index Selector; Interval Inverted Index; Inverted Segment Tree
Given one Top-k Interval Keyword Query (a type of queries involving both textual and interval predicates), it is sup-posed to return a ranked set of temporal-textual objects in descending order of relevance scores, which are computed from two metrics: interval similarity and keyword relevance.  X  Corresponding author.
 Figure 1: Example Top-k Interval Keyword Query. (Hot tweets X  intervals depict the period when their hit rates exceed one given threshold)
Example 1 . Fig. 1 plots five hot tweets marked with intervals and contents. Given one top-1 interval keyword query : the most relevant hot tweet that contains the keyword  X  Obama  X  and exists during 8 o X  X lock . Accord-ing to the figure, the result should be t3 . Because it contains the word  X  Obama  X  with a relatively large weight, and has the maximum intersection ratio with the query interval.
In this demonstration, we design and present one system named INK to handle interval keyword search over large-scale temporal text effectively and efficiently:
First , two hybrid index structures (TriI and IS-Tree) are employed to integrate content predicates and temporal con-straint in a common data structure. TriI is highly suitable for queries with selective content predicates; while IS-Tree is good at processing queries with selective temporal con-straint.

Second , the two index methods deal with different kinds of queries, the system can determine the better search path for a specific query. So Adaptive Index Selector (AIS) is introduced in INK to estimate respective cost with little overhead and further improve the overall efficiency stably.
In addition , the design of our system is based on the cloud environment. Specifically, we choose open source im-plementation Apache Hadoop [1] and HBase [2] to guarantee high concurrency and scalability.

The rest of the paper is organized as follows. An overview of the system architecture is provided in Section 2. The user interfaces of INK for two query scenarios are demonstrated in Section 3. Concluding remarks are presented in Section 4 in detail.
INK can support four kinds of top-k queries: (i) keyword query, (ii) interval query, (iii) single keyword and interval query and (iv) multiple keywords and interval query.In INK, query execution involves three stages, whose order is deter-mined at runtime: Keyword Search , retrieving textual-ly relevant pages with respect to query keywords; Interval Filtration , obtaining temporally relevant pages which inter-relate with the given interval; Top-k Ranking , ranking the pages based on relevance scores to return top-k results. As shown in Fig. 2, INK is composed of six major components: User Interface , Pre-Processor , Adaptive Index Selector , Ex-ecutor , Metadata Manager and Cloud Storage . i. User Interface
Based on the B/S architecture, INK provides interactive and intuitive user interfaces. In addition, the graphical in-terface which includes several charts facilitates users to ob-serve query results from many perspectives: top-k scores, respective textual content and valid intervals etc. INK also indicates the estimated costs of chosen index module (TriI or IS-Tree) and the actual finished time. ii. Pre-Processor
INK supports ad-hoc TIKQs and batch request, which is stand-alone files comprised of statements. Given one user statement, for example,  X  X op-10 pages that contain  X  X bama X  in last three months X , using automatic IE techniques [3, 5], the Pre-Processor parses and transforms the statement into three parts: interval range I, query keywords Q and required number of results K, i.e., (I, Q, K). Then it determines the target internal scheme of TIKQ (e.g., { [10,100], (Obama), 10 } ). iii. Adaptive Index Selector(AIS)
AIS works as a middleware to uniformly process these preprocessed queries. It has two important functionalities. First , it can retrieve, cache and process batch all queries. Second , AIS can dynamically choose TriI or IS-Tree mod-ules to process a specific query according to cost model.
In detail, AIS relies on the statistics stored in the meta-data cache of Metadata Manager to estimate respective cost-s. Based on statistics, AIS measures the selectivity of each module for various queries ( S T riI and S IS  X  T ree ), we could roughly compare their response time and make the right choice. That is, if S T riI &gt;S IS  X  T ree , IS-Tree module is used to process the query. Otherwise, TriI would be exploited.
As in Fig. 2, AIS generates the final execution plan: { TriI, [10,100], (Obama), 10 } . INK deploys the AIS on multiple nodes to process the incoming workload parallelly. iv. Executor
The Executor checks the execution plan of one TIKQ and activates the corresponding index module to process query based on the early-termination top-k techniques [4]. INK provides two hybrid distributed index modules: Interval Inverted Index (TriI) that supports textually preferred queries and Inverted Segment Tree (IS-Tree) that supports temporally prior search.

Specifically, Fig. 2 shows that in the case of plan semantics as { TriI, [10,100], (Obama), 10 } , TriI is chosen to complete the three stages of the query execution and delivers top-10 pages to users. v. Metadata Manager
Ad-hoc measurement of selectivity for each query in AIS needs to take the statistics stored in the Metadata Manager into account; Meanwhile, metadata in this component serves for the final plan established in the Executor and facilitate the data access process. The goal of Metadata Manager is to improve the accuracy of the estimated costs for various queries dynamically and speed up the retrieval of the under-lying data. vi. Cloud Storage We make use of the Hadoop DFS system (HDFS) and HBase for the implementation and validation in the Cloud Storage component. Essentially, we treat them as underly-ing raw byte devices, rely on their built-in capacities of fault tolerance and load balancing to achieve high data scalability and availability.
In the demonstration, we present the online processing of two scenarios to prove effective and efficient execution of queries over Twitter dataset 1 . Each tweet in this dataset contains three parts: tweet id, textual content and the cre-ation time. In order to be compatible with subsequent queries, we add two synthetic attributes in all 2,000,000 tweets: an-http://snap.stanford.edu/data/twitter7.html Figure 4: Webpage Interface for Aggregation Win-dow Query.
 other time point (  X  = 21.58 and  X  = 26.19) which consti-tutes an interval with the creation time, the hit rate of the tweet (  X  = 8931 and  X  = 28.27). Table 1 summarizes the properties of this dataset.
Assume that one user wants to find the most relevant tweets which contain specified keywords and actively exist between certain interval. Based on the B/S architecture of INK, he or she can issue one TIKQ to get result feedbacks via the webpage interface.
 Fig. 3 is the interface presenting the query result of one TIKQ from three perspectives: top-k tweets ranking, rele-vance scores constitution and respective intervals.
Part A provides the interface for users to submit TIKQs, namely query keywords, interval range and required number of results. When users submit all query parameters, inter-nal representation of this query would be constructed prior to submitting. Part B displays one of the top-10 tweets, in-cluding the percentage of its relevance score, textual content and valid interval. Part C shows the proportion of keyword relevance and interval relevance in one score value. Take tweet 5 as example, the keyword relevance of 53 plus the interval relevance of 34 equals the score of 87, ranking the fifth. And Part D displays the distribution of all tweets X  in-tervals. Hence we demonstrate that INK can address single TIKQ within a time period of millionseconds.
Note that although TIKQ needs to specify two explicit interval endpoints, users may only confirm the interval size (i.e. window) and want to vary this window over the en-tire range of dataset. Here we introduce one novel query  X  aggregation window query. As users merely specify the window size, they can choose one particular interval with the same size at random. For instance, one user issues such aggregation window query: in one month (30 days), the top-10 tweets whose hit rate exceeds 10000 and textual content includes the keyword  X  X bama X .

A snapshot of INK system for aggregation window query is shown in Fig. 4, which consists of three parts.
Part A shows the user-defined area. As described before, aggregation window query has 4 constraints on the Webpage Interface: keywords, hit rate threshold, the window size and the top-k number. Part B presents the entire interval range of the dataset. This part can facilitate user to assign specific interval with the same window size. After the explicit inter-val is chosen, it would trigger INK to start query process and get relevant results. Part C displays one exemplary tweet in results. It describes the details why it appears in top-k re-sults. This part serves to show the results in a graphical way, and also help users to decide when to stop.
Efficient processing of interval keyword queries is critical for searching temporal-textual data. This demonstration presents a cloud-based system named INK to address the TIKQs. In INK, two index modules, TriI and IS-Tree, are utilized and an Adaptive Index Selector is used to identify the better query execution plan based on estimated costs for each particular query. Moreover, INK handles one kind of novel query  X  aggregation window query in an efficient and friendly manner.
This research was partially supported by the Fundamen-tal Research Funds for the Central Universities, the Re-search Funds of Renmin University of China(No. 14XN-H115), the National Key Basic Research Program (973 Pro-gram) of China(No. 2014CB340403), and the National 863 High Tech. Program of China(No. 2012AA011001). [1]  X  X pache hadoop X , http://hadoop.apache.org/. [2]  X  X pache hbase X , http://hbase.apache.org/. [3] O. Alonso, M. Gertz, and R. Baeza-Yates. On the value [4] J. B. Rocha-Junior, A. Vlachou, C. Doulkeridis, and [5] K. F. Wong, Y. Xia, W. Li, and C. Yuan. An overview
