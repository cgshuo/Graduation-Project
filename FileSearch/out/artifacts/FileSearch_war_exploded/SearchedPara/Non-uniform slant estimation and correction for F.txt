 ORIGINAL PAPER Majid Ziaratban  X  Karim Faez Abstract Slant correction is an important part of the nor-malization task in OCR applications. Due to some special specifications of Farsi and Arabic manuscripts, conventional deslanting methods proposed for other languages do not work properly. In this paper, a fast method is first introduced to estimate the overall tilt of a handwritten word based on direc-tional filters. After overall deslanting, a novel non-uniform slant estimation algorithm computes the remaining slant of each near-vertical stroke of the word, separately. Each candi-date stroke is traced and its slant is calculated. A non-uniform slant correction algorithm is also proposed to reduce the remaining slants of each candidate stroke keeping the dis-tortions of other strokes of the word at a minimum level. Thanks to the special characteristics of Farsi/Arabic scripts, slants are estimated in a specific strip of the written words. A comparison between our approach and three other preva-lent methods is drawn. Experiments show that the proposed overall slant estimation method not only represents the least estimation error, but is also the fastest algorithm. The best results are achieved using the proposed overall and non-uniform deslanting methods. It is concluded that successful results can be achieved by considering the special specifica-tions of these two languages.
 Keywords Non-uniform slant estimation  X  Slant correction  X  Farsi/Arabich and written words  X  Directional filters 1 Introduction One of the most important differences between machine-printed and handwritten texts is that in the former, all char-acters, words, text lines, dots, etc. follow some strict rules, while in the latter, there are many variations from the basic rules. These variations can occur in the shapes of handwritten characters and words, the locations of dots, and the writing paths. They befall not only when a text is written by different writers, but also for the same writer in different mental con-ditions. They cause too much diversity in written words and scripts and make classification very difficult. In this paper, we focus on reducing one type of variations usually seen in the shapes of handwritten Farsi/Arabic words, called slant. The slant is the deviation of the vertical strokes of words from the vertical direction.

The deslanting process can be applied to many applica-tions. It can aid the segmentation of italic machine-printed characters [ 1 ], and recognition of digits in natural scenes [ 2 ],
Since there is no slant invariant classifier or feature extrac-tion method, much research has been conducted to estimate and correct the slants of machine-printed and handwritten digits, characters, or words [ 1  X  22 ]. Most of the studies deal with Latin-based languages and some others with other lan-guages like Japanese [ 9 ] and Korean [ 20 , 21 ]. Some of them utilize approaches based on the vertical projection (VP) of a word image [ 1 , 5 , 6 , 10  X  13 ]. The idea behind them is that the alternation between peaks and dips of the VP of a non-slanted word is the sharpest [ 5 ]. They transform a word by a sheer transform with different angles and analyze the VPs of the transformed images. The angle for which the VP justifies a specific criterion is selected as the slant angle. Some of these criteria include the maximum peak [ 5 , 10 ] and variance [ 1 ] in VP, the maximum peak in generalized projection [ 11 , 12 ], and the maximum peak in Wigner-Ville distribution of VP [ 6 , 13 ]. These approaches need to transform a word with many different angles to detect the best one and are, hence, very time-consuming.

Other algorithms such as the methods based on chain transform [ 22 ], gradient direction [ 19 ], and a heuristic method [ 2 ] estimate the slant angle in a single stage with-out any iterations.

In the chain code-based method, the slant value is calcu-lated from the following equation.  X  = tan  X  1 n 1 where n 1 , n 2 and n 3 are the number of chain codes in direc-tions of 45  X  ,0  X  and  X  45  X  (relative to the vertical axis), respectively.

In [ 17 , 18 ] a non-uniform slant correction has been done using a VP-based method and dynamic programming.

To the best of our knowledge, only one study has been conducted on Arabic word deslanting [ 8 ]. It used the chain codes to detect near-vertical lines. The sum of the absolute differences between x -coordinates of the left (or right) end-points of five vertically consecutive runs was assumed to be the intrinsic slope of the endpoint. For example, if the current run was in row n , the points from the same contour on rows n  X  2 , n  X  1 , n , n + 1 , and n + 2 were taken and the four abso-lute differences among the x -coordinates of adjacent points were added. If the sum was below a threshold (in this case 5), the endpoints were assumed to be a part of a near-vertical line.

The most important drawback of this method and other algorithms is that the near-vertical lines are blindly detected and the slant angle is estimated based on them. These proce-dures cannot be used in Farsi or Arabic scripts because some characters in these languages are written originally in a tilted form.

Farsi/Arabic scripts are much different from other lan-guages. Hence, the performances of the above methods are not acceptable and, in many cases, they increase the slant of Farsi/Arabic words erroneously.

Figure 1 shows the results of two prevalent slant correc-tion approaches for a sample word. These approaches are VP-based and chain code-based slant estimation algorithms. ThewordinFig. 1 a has been written without any overall slant. Figure 2 a shows the peak values of vertical projec-tions (VPs) of each tilted word with  X  = X  60  X  to 60  X  .The maximum peak is obtained for  X  = X  43  X  . It means that the VP-based approach incorrectly estimates the slant angle as 43  X  . The numbers of chain codes of the sample word in four directions are shown in Fig. 2 b. The slant angle can be computed from ( 1 )as15 . 27  X  . Deslanted word resulted by VP-and chain code-based approaches are depicted in Fig. 1 b and c, respectively. These figures show an instance of Farsi and Arabic handwritten words, which is not properly desl-anted by these methods.

Some specifications of Farsi and Arabic scripts that make them so different from the other languages are as follows: 1. Alphabetic characters have at most four different shapes 2. About half of the characters have dots or additional small 3. Many characters have ascenders/descenders, but most of According to the above specifications, a new deslanting algo-rithm is proposed in this paper to be compatible with Farsi and Arabic handwritten words. The proposed algorithm finds the near-vertical strokes (NVSs) of subwords. The overall slant of a word is first corrected. Then, for each NVS in the desl-anted image, the remaining slant is estimated and corrected non-uniformly.

The rest of the paper is organized as follows: Sect. 2 describes the dot-removing method. The proposed overall slant estimation is introduced in Sect. 3 . The proposed non-uniform slant estimation and correction algorithms are discussed in Sects. 4 and 5 , respectively. Experimental results and parameter generalization are presented in Sect. 6 and, finally, the conclusions are drawn in Sect. 7 . 2 Dot removing Since our objective is to find the NVSs in the main body of subwords, some blobs such as dots and diacritics may cause some errors because they are written isolated from the main body of the word and play no role in the slant of words. Hence, dots and disconnected diacritics should be removed. In Farsi and Arabic scripts, dots are written at the top or bottom of the main body of a word and the main body is usually written on the baseline of the word [ 25 ]. In our experiments, a simple horizontal projection-based algorithm is used to estimate the baselines. In this approach, the row of a word image in which the sum of foreground pixels is greater than the other rows is considered as a baseline, y Baseline .

After baseline estimation, each blob satisfying one of the equations ( 2 )or( 3 ), is labeled as a dot or diacritic and must be deleted. Otherwise, it is considered as a main body (sub-word). y y y P In our paper, x and y are the spatial coordinates that increase eastward and upward, respectively. y b , min and y b , the minimum and maximum vertical coordinates of the b th pixels of the blob. P h ( y ) and W are the horizontal projection and the width of the word image I , respectively. d 1 and d are two constants. A description of selecting suitable values for them is given in Sect. 6.2 . Using this simple algorithm, more than 90% of dots are removed. 3 Overall slant estimation In the case of overall slant estimation, an efficient approach based on directional filters is proposed. In this approach, a word image is first filtered. The filter bank consists of a num-ber of filters in some specific directions. Then, each filtered image is thresholded to find the amount of conformity of the word image to the corresponding direction. Since a word may contain various slants, the overall slant value must be an aver-age of them. Thus, it can be calculated from the following equation:  X 
Equation 6 is a weighted average of the directions.  X  i and w i are the i th direction and its corresponding weight, respec-tively. The weight w i is the number of foreground pixels in the i th thresholded filtered image (TFI i ) and Z is the number of directional filters. More details about thresholds and the value of Z are provided in the following sections.

In Farsi and Arabic handwritten scripts, words usually have NVSs. NVSs are divided into the following two categories: 1. NVSs that must be written vertically in their original 2. NVSs that must be written non-vertically in their non-
In the section of experimental results, it will be shown that each word image in IFN/ENIT dataset has about 2.75 OVSs in average. This characteristic is used to estimate the slant value. In a slanted word, non-VSs may be incorrectly consid-ered as OVSs. This is the main problem of slant estimation in these languages which makes the conventional approaches ineffective. To have an accurate slant estimation, the algo-rithm should distinguish OVSs from non-VSs. To overcome this problem, two rules are suggested and described here. Rule 1 In the first rule, the estimation process is defined to be applied not on the whole word image but only on a special part of it.

In Farsi and Arabic languages, OVSs are often written at the top of the baseline of words. To have a better insight into the distributions of OVSs and non-VSs in y -coordinate, Fig. 5 has been presented. This figure plots the probability of occurrence of pixels in vertical coordinate relative to the baselines. The probability of occurrence of pixels which are the members of OVSs is shown with a solid line. Also, the one for non-VSs is drawn with a dashed line. They were obtained by studying 2,000 word images of set_ a of the IFN/ENIT database [ 26 ]. OVSs and non-VSs were detected manually. To reduce the misclassifications between OVSs and other strokes, a strip of the word image is chosen in which the probability of occurrence of OVS pixels is greater than non-VS pixels. Two intersection points in Fig. 5 are chosen as y and y 2 , respectively, as the bottom and the top boundaries of the selected strip because from Fig. 5 , between these inter-section points, OVSs occur more probable than non-VSs. On the contrary, for y &lt; y 1 or y &gt; y 2 , the probability of occur-rence of non-VSs is greater than undesirable OVSs. The esti-mation process is applied only on the selected strip. This also saves processing time, because the estimation area will be more limited.

From Fig. 5 by estimating the slant value in the selected strip, about 50% of non-VSs will be ineffective and cannot interfere with the estimation process. But still half of them remain. To reduce the effects of the remaining non-VSs, addi-tional processes are required.
 Rule 2 As mentioned earlier, OVSs may be written with various values of slants in a word. In TFIs, besides OVSs, non-VSs may also be detected. Usually the angles of non-VSs are far from the average slant of OVSs. Figure 6 shows the angle distributions of OVSs and non-VSs in the selected strips of 2,000 non-slanted words. From this figure, the inter-sections between the distributions are equal to  X  17  X  and 15 This means that more OVSs occur than non-VSs in the inter-val of  X  17  X  to 15  X  . Thus, in the directional filtering stage, TFIs for which the direction is outside the interval should not take part in the weighted averaging equation ( 6 ). On the other hand, the number of OVS pixels in TFIs is greater than non-VS pixels. Consequently, the overall slant value is usu-ally near a direction for which the corresponding TFI has the maximum foreground pixels.

All strokes between  X  45  X  and 45  X  relative to the vertical direction are considered as NVSs. According to the above statements, the filter bank is decided to consist of seven fil-ters in directions  X  45  X  ,  X  30  X  ,  X  15  X  , 0  X  , 15  X  , The direction, D J , for which the number of foreground pix-els in its corresponding TFI , TFI J , is greater than the other TFIs is determined as the central direction. To reduce the interference of non-VSs in calculating the overall slant, only three TFIs (TFI J  X  1 , TFI J , and TFI J + 1 ) are permitted to take part in ( 6 ). Hence, the overall slant value can be computed from the following equation:  X  3.1 Filter bank For vertical direction ( D 4 ), a 7  X  7 vertical Prewitt Filter [ 27 ] is selected. This filter is rotated with the angles of  X  ters. After filtering, the resulting image must be thresholded to obtain a binary image that includes the directional parts of the word. To find the suitable value of thresholds, some criteria must be considered. These criteria are 1. To have an accurate TFI that would include strokes with 2. Successive directional filters must cover all medial direc-Due to the above criteria, thresholds are selected so that each NVS is detected by two successive filters. Directional filters and obtained threshold values are reported in Table 1 . Filtered images and TFIs for a sample image are illustrated in Fig. 7 . In this figure, successive TFIs have about 50% correlation and the TFIs which are not successive have none.

After estimating the slant angle, the overall tilt of the input image is normalized using the following transformation [ 2 ]: 4 Non-uniform slant estimation After the overall deslanting stage, deslanted words still may have OVSs that are not exactly vertical because, in a word, there may be some OVSs with different slant values. The overall deslanting cancels only the average tilt of the word. It means that each OVS may still have its own remaining slant in the overall deslanted word. To reduce these types of slants, a non-uniform deslanting algorithm is required. This algorithm should find all OVSs and then the slant angle must be estimated separately for each. An algorithm is proposed here to estimate the remaining non-equal slants of OVSs. In this method, similar to the overall deslanting phase, dot-removing and strip-cropping stages must first be done. Then the strip is thinned to obtain its structure. In the thinned strip, OVSs are found and from their end points, they are traced. Some important information is extracted during the tracking of the stroke. An end point is a foreground pixel in a thinned word which has only one foreground pixel in its 8-neighbor-hood.

Different stages of the proposed overall and non-uniform deslanting algorithms are illustrated in Fig. 8 .

In the non-uniform slant estimation phase, a stroke can be considered as an OVS when satisfying all of the following three conditions: 1. To be in the strip. 2. To be in the range of  X  17  X  to 15  X  relative to the vertical 3. To be long enough to be useful for estimation. Under the first and second conditions (extracted from Rule I and Rule II, respectively), a NVS is more probable to be an OVS rather than a non-VS.
 To find OVSs, from each end point, the stroke is traced. The slant angle of the i th stroke is calculated by the following equations:  X   X 
T
H i ( t ) = Hist  X  i , t (12) t = {  X  45 ,  X  44 ,..., 45 } (13)  X   X  where  X  i , j is the angle of ss i , j relating to the vertical direc-tion. ss i , j is the j th sub-stroke of i th OVS and defined as an OVS part limited between pixels ( x i , j , y i , j ) and ( x y between the start and end of ss i , j and is equal to x i
The i th OVS consists of a number of sub-strokes. Thus, after tracking the OVS, some values for  X  i , j corresponding to ss ij are calculated. Our objective is to find the basic direc-tion, T i , of the stroke based on the angles of sub-strokes, but the OVS may include some sub-strokes for which the value of  X  i , j is not equal to T i . Hence, the basic angle of the stroke is first estimated by ( 11 ). Then, the final slant angle of the stroke is calculated from the sub-strokes which are in directions near the estimated basic direction of the stroke.
Briefly, the estimation algorithm for the basic angle is based on the most frequent  X  i , j in the i th OVS. Consequently, a histogram of  X  i , j among a range of angles is required. t is an array of the range of possible angles for  X  i , j and includes angles from  X  45  X  to 45  X  . Thus, it consists of 91 angle val-ues. In ( 16 ),  X  i , j has a non-integer value. To construct the histogram of computed angles, the values of  X  i , j rounded off.  X  i is the set of rounded values of  X  i , j for the i th OVS. Hist (  X  i , t ) is the histogram of  X  i and yields the frequency distribution of  X  i among t . H i ( t ) is the number of sub-strokes in the i th OVS for which the rounded value of the computed slant ( 6 ) is equal to t ( c ) . Simply speaking, H determines the number of sub-strokes in the i th OVS having the rounded angle equal to t ( c ) , where c = 1 , 2 ,..., argument corresponding to the maximum value in H i ( t ) is selected as the basic angle ( T i ) of the OVS. The final slant angle of the OVS is obtained by averaging the angles near the basic angle T i . Abs(x ) is the absolute value of x .The Mar-gin determines the neighborhood margin around T i . In other words, only the angles which are in the range of T i  X  Margin to T i + Margin are allowed to participate in ( 9 ).  X  i set of allowable angles. For very large values of Margin , some sub-strokes that are not near-vertical can participate in computing the slant angle and consequently cause errors. In our experiments, the Margin value is selected equal to 7. L is the length of the i th stroke. N determines the minimum admissible length for OVSs; that is, the strokes shorter than N pixels are not involved in the slant-estimation phase. M is the length of sub-strokes. Small values of M cause inaccurate calculated angles. On the other hand, it must be less than N to have at least ( N  X  M ) sub-strokes. From ( 9 )to( 16 )for the exact vertical lines, the value of  X  i is obtained equal to zero. This value is positive when the stroke is tilted to the right side of the vertical axis and negative when tilted to the left side.

The tracking procedure is terminated when one of the fol-lowing conditions is satisfied: 1. The tracking procedure deviates from the near-vertical 2. The procedure arrives at another end point. 3. The procedure arrives at a junction point in which none Farsi and Arabic are cursive writing languages. Their char-acters may connect together from one side (left or right) or both sides. Also, a character may be written isolated from the others. It depends on the kind of the character as well as its previous and next characters in the word.

The first above condition is satisfied if an OVS is a part of a character connected to another character from one side. In this case, the OVS connects to a horizontal part with a curved line and the tracking process will be entered into a curvature, which is not a near-vertical part. Therefore, the tracking must end. The angle between vertical and horizontal directions is selected to notify the procedure that it is deviating from the near-vertical direction. The angles  X  45  X  and + 45  X  are cho-sen to terminate tracking the OVS connected from its right side and its left side, respectively. After ending the procedure, since it has entered into a curvature, the last pixels are not valid as members of the OVS. Consequently, the last N 0 pix-els of the stroke are discarded and the rest is retained.
In the second condition, the OVS is a part of a character, which is not connected to other characters. Thus, the whole stroke is accepted as an OVS.

For the third condition, the procedure reaches a point in which the OVS is connected to other characters from both sides. Since the procedure does not deviate from the near-vertical direction until this point, the whole stroke is selected as an OVS.

In Fig. 9 , the tracking process for the first and fifth OVSs (from the right side) is ended because it reaches another end point. For the second and sixth OVSs, it is stopped because the first condition has been satisfied. For the third and fourth OVSs, the procedure arrives at a junction point. In the fourth OVS, tracking is continued because one of the branches is in the same direction of the current trajectory, but since none of the branches of the third OVS are in the same direction, the procedure cannot be continued.

As mentioned earlier, to find OVSs, the structure of a word is necessary. On the other hand, thinning algorithms are sensitive to noise. After thinning a noisy word image, some undesired branches will be created. These branches cannot cause errors in the tracking process, because one of the branches in a junction point is certainly in the same direc-tion of the current branch. Therefore, the procedure is not terminated in this junction point.

Since our non-uniform slant estimation method is based on the maximum value in the angle histogram, H i ( t ) , the basic angle T i is near the overall direction of the i th stroke, that is, the angle of most sub-strokes in the OVS. By selecting asmall Margin value, the algorithm automatically cancels the effects of other non-vertical parts that may be connected to the beginning or end of an OVS. According to ( 10 ), the parts, for which the computed angle is close to the basic angle, are only permitted to take part in the estimation of the slant angle of the OVS. Therefore, the robustness of our estimation method against undesired non-VSs connected to the OVS is guaranteed. Figure 10 shows the robustness of the proposed slant estimation algorithm for a complicated OVS. The OVS contains two non-VSs in its beginning and in its end. The algorithm estimates the correct slant value for this OVS. In Fig. 10 c, the maximum value of H i ( t ) , 32, and the computed basic angle,  X  16  X  , are in bold. From this figure, the sub-strokes for which the rounded angles are between  X  16  X  7 = X  23  X  and  X  16 + 7 = X  9  X  participate in ( 9 ) and are shaded in the figure. The slant value for the OVS is com-puted as  X  18  X  , which is equal to the correct slant value. If the slant angle is calculated with all sub-strokes of the OVS, its value is obtained as  X  10  X  , which is 8  X  greater than the correct value.

Due to this property of the proposed method (robustness against small non-VSs), to detect more OVSs, we can increase the width of the strip in which the estimation is applied. In the overall deslanting phase, the strip is selected between y = y uniform estimation phase, the strip is considered between y = 1 and y = y the bottom boundary of the strip because the tracking pro-cedure is terminated automatically by satisfying one of the three conditions discussed earlier. Nevertheless, only the end points in the top side of y Baseline + y 1 are allowed to be traced. In this way, all end points, for which y -positions are from y but the tracking procedure is carried on until it automatically terminates. 5 Non-uniform slant correction When particular slant angles for all OVSs of a word are estimated, the deslanting process can be performed for each OVS, proportional to its corresponding estimated angle. Generally, for columns between successive OVSs, slant angles can be calculated by an interpolation technique: for x k &lt; x  X  x k + 1 :  X ( x ) = k = 0 ,..., K (17) where x k , X  k and L k are the horizontal position, the estimated angle, and the length of the k th OVS, respectively. K is the number of OVSs. For the first and last columns of the image, we assume that there are two hypothetical OVSs (correspond-ing to x 0 = 1 and x K + 1 = W ) with slant angles equal to zero. p is the order of the interpolation equation. To have smoothed variations in the slant values of successive columns close to OVSs, the second-order interpolation has been utilized in our algorithm. From ( 8 ) and ( 17 ), the coordinates of the deslanted image pixels are calculated from: Figure 11 shows the results of the proposed non-uniform slant correction algorithm. All deslanted images except Fig. 11 f, show the ability of the algorithm to estimate and correct the slant of each part of the word. In Fig. 11 f, two problems can be observed. The first one is that two separated subwords in the original image are connected together erroneously after the slant correction phase. The other one is that the pixels of a subword are deslanted with very wide ranges of angles and, therefore, the subword is distorted and deformed. In our algorithm, the slant angle is estimated for each column sepa-rately. The angles between x k and x k + 1 are gradually varied from  X  k to  X  k + 1 . If the variation rate is too high, some suc-cessive columns in a part of the word may be deslanted with wide ranges of angles. To avoid this problem, a method for modifying the estimated angles is proposed. In this method, the slope of the line between two consecutive points in the  X   X  x plane is computed from: m = If the absolute value of m is greater than the allowable value ( m the new value of m is, at most, equal to m max (the value of m max will be discussed later). For example, if m has a positive value, then the values of  X  k + 1 and  X  k must be, respectively, decreased and increased by the amount of  X  1 and  X  2 .For the sake of simplicity, their values are assumed to be equal to  X  . Consequently, we have: if m &gt; 0 : if m &lt; 0 : From ( 19 ), the new value of m can be calculated as follows: m ( new ) = and the value of  X  obtained for the case of m &gt; 0isas follows:  X  = m The value of  X  for m &lt; 0 is calculated in the same way, equal to the value in ( 23 ) with a negative sign, and the maxi-mum value of m ( new ) is m max . Hence, in general,  X  k + and  X  k (new) are obtained from the following equations:  X  + 1 ( new ) =  X  k + 1 ( old )  X   X  ( new ) =  X  The slant angle modifying process is illustrated in Fig. 12 . To highlight distortions, we use a wider range of angles here (a range between  X  30  X  and 20  X  only in this figure). The pro-cedure is performed for six levels. In the first level, no angle is modified because of a great value of m max (equal to 1.6). The deslanted image has one unwanted connection and two main distortions. The value of m max is divided by 2 when the procedure enters the next level. In the second level, the connection problem is solved, but the distortions still remain. They are removed in the fourth level.

After each level, the angles are smoothed again; therefore, the deslanting procedure is not completely performed for the columns corresponding to the smoothed angles. On the other hand, since the modification is done by adding or subtracting a value (  X  ) with or from the angles, performing the proce-dure with a large number of levels may change the polarity of some angles. In other words, it may increase the slants of some columns of a word image. As an example, in the fifth level, m max is equal to 1 . 6 absolute value of the slope of the line between the third and fourth points in the first column of Fig. 12 h is greater than 0.1. From ( 21 ), to modify this slope, the value corresponding to the third and fourth OVSs (from the left side) is decreased and increased, respectively. The third point in this plot has a small positive value. By subtracting  X  from the third point, it will be negative in the sixth level (third point in the first column of Fig. 12 i); that is the polarity of the estimated slant angle of the third OVS is changed from a positive value in the fifth level to a negative value in the sixth level. It means that if the non-uniform slant correction is done with the modi-fied values obtained in the sixth level, the tilt of the third OVS will be increased, incorrectly. In these cases, we can say that an over-modification of the estimated angles occurs. Therefore, additional modification levels are not suitable and logical and, therefore, should not be done.

According to the above discussion and the experimental results, we decided to perform a four-level modification pro-cedure with the initial value of 1.6 for m max in our proposed non-uniform slant correction algorithm.

The procedure of the proposed two-stage deslanting algo-rithm for a sample word is illustrated in Fig. 13 . In this figure, a non-slanted word in Fig. 13 a is manually slanted by  X  25 and shown in Fig. 13 b. A strip of the slanted word is given in Fig. 13 c. In this strip, the overall slant angle is estimated by the proposed directional filter-based method. The numbers of foreground pixels in all seven TFIs are shown in Fig. 13 d. Maximum foreground pixels in TFI 2 corresponds to  X  30  X  . Therefore, only TFI 1 , TFI 2 and TFI 3 are used for overall slant estimation. The overall slant is computed as  X  25 . 57  X  .The overall deslanted word and the strip for non-uniform estima-tion phase are given in Fig. 13 e and f, respectively. In the selected strip, two OVSs are detected and traced to estimate their slant angles. The final two-stage deslanted word is illus-trated in Fig. 13 h. It can be observed that both OVSs of the deslanted word are completely vertical. 6 Experimental results Due to the differences in languages, datasets, and other exper-imental details, it is difficult to compare our study with others. To this end, some other methods were implemented and their results on the same dataset were obtained. In order to evalu-ate the proposed deslanting algorithm, four experiments were performed; set_ a of the IFN/ENIT database was used in our experiments. This set contains 6,537 word images with a res-olution of 300 dpi. Since there is no ground truth about the slants of the words in the database, some parts of the exper-iments could not be performed automatically. For example, the best slant angles of words were obtained manually. In this way, the primary overall slant angle  X  was first esti-mated by the proposed method and, then, the word was tilted with angles from  X  15 +  X   X  to 15 +  X   X  . The best desla-nted word was detected manually and its corresponding angle was stored and considered as the correct slant. The man-ually obtained slant value was used to be compared with other slants calculated by different approaches to compute the overall slant estimation errors. Therefore, for each word, 31 tilted words were checked to find the best one. The his-togram of manually obtained overall slant values is shown in Fig. 14 . The same procedure was performed to determine the slant of OVSs in words. Due to the difficulties of this part of the research, in our experiments, a subset of 2,000 word images of the set_ a were used. We named this set of handwritten word images as ssaIFN/ENIT (subset of set_ a of IFN/ENIT). Figure 14 indicates that most of the words in the ssaIFN/ENIT dataset have been written with negative overall slants.

Also, to have more accurate evaluations on a larger number of samples, a dataset of machine-printed Arabic words was constructed and used in our experiments. All 984 city names of the IFN/ENIT dataset were printed in six different fonts (Arial, Tahoma, Arabic Style, Zar, Traditional Arabic and Nazanin). All word images in all fonts were artificially tilted with five different slant templates. Consequently, the dataset contains 29,520 samples (984 city names  X  6 fonts  X  5 slant templates). We named the dataset as mpIFN/ENIT (machine-printed IFN/ENIT). A slant template consisted of two slant types: overall and non-uniform slants. To tilt a printed word, first, the OVSs of the word were detected. Assume that the word included P OVSs.Asetof P random slant values were produced in the interval of  X  15  X  to 15  X  with the mean value of zero. Then, the OVSs were tilted according to their cor-responding slant values. In this state, words contained only non-uniform slants, i.e., their overall slants were equal to zero. A random value in the interval of  X  40  X  to 40 generated as an overall slant value for each word. The non-uniform slanted word in the previous step was uniformly tilted with its corresponding random slant value. Hence, the mpIFN/ENIT consists of 29,520 manually tilted word images with known values of overall and non-uniform slants. 6.1 Comparison In the first and second experiments, five methods were imple-mented to estimate the overall slant, respectively, from the whole of the word images, and the selected strips. The results are shown in Fig. 15 , Tables 2 and 3 . Figure 15 presents histograms of overall slant errors caused by five different approaches. Each plot in this figure shows the number of words for which the overall slant error is equal to a spe-cific value in the horizontal axis. Figure 15 a and b present the estimation errors when the overall slants were estimated from word images as wholes, and the selected strips, respec-tively. Comparing the results in Fig. 15 a and b reveals that the estimation from the selected strip produced better results than the estimation from the whole of a word image. The overall slant estimation methods are
Chain code-based . The Chain code-based slant estima
VP 1 . A VP-based algorithm in which a deslanted word
VP 2 . A VP-based algorithm in which a deslanted word
Proposed 1 . The proposed overall slant estimation approach
Proposed 2 . The proposed overall slant estimation approach Results show that the Proposed 2 method presented the best estimation with minimum errors. The reason is that the VP-and chain code-based methods estimate the average slant of all strokes in an image, while the Proposed 2 method attempts to estimate only from OVSs.

Also, the Proposed 1 method caused more estimation errors than the Proposed 2 because by using Rule II (described earlier in Sect. 3 ), the latter reduces the effects of non-VSs in the estimation process more than the former.

Estimation errors obtained by the VP 2 method were fewer than those by the VP 1. It showed that the maximum variance of VP is a better criterion than the maximum peak value in VP-based methods in Farsi and Arabic languages.

The histogram of the remaining slants of the OVSs of over-all deslanted words is presented in Fig. 16 . Figure 17 presents the histogram after non-uniform deslanting in the third exper-iment. It shows that most OVSs are detected and deslanted correctly. The figures present the results on the ssaIFN/ENIT dataset. Since manual determination of the exact values of remaining slants in this dataset is very difficult, in Figs. 16 , 17 , the numbers of strokes corresponding to the angles around some deterministic angles were summed and considered as the number of strokes corresponding to the central angle.
The mean of absolute values (MA) of the remaining slants of OVSs before and after the non-uniform deslanting process have been reported in Tables 4 and 5 , respectively, for the ssaIFN/ENIT and mpIFN/ENIT datasets. The second row in these tables presents the MA of the slants of OVSs of the words, which have been only overall deslanted. The Pro-posed 2 method yielded the best results. After overall desla-nting with different approaches, the words were deslanted with the proposed non-uniform deslanting algorithm. The MA values of the remaining slants of the OVSs of these non-uniform deslanted words are listed in the third row of the tables. The last column in Table 5 shows that the average of the absolute values of slants, which have been manually applied on 81,370 OVSs of 29,520 words, is 5 . 0924 other words, if overall slants are completely removed, the MA value of slants of the OVSs in the words is obtained to be equal to 5 . 0924  X  in the mpIFN/ENIT dataset. ( a ) (b) 
The best results were obtained using the proposed non-uniform deslanting of the word, primarily deslanted by the Proposed 2 method. From the first column of these tables, it can be observed that the proposed non-uniform deslant-ing method reduced the MA of the slants of the OVSs in the words without overall deslanting. Hence, this method can also be used alone. The sixth columns in Table 4 and Table 5 demonstrate that it is much better to primarily deslant a word by an accurate overall deslanting method and then apply the nonuniform deslanting algorithm to it. But the results in Fig. 17 and the last rows of Table 4 and Table 5 show that slants were not completely removed after nonuniform deslanting. One reason is that some OVSs were not detected because they were not placed in the stripes.

Also, because of using the angle-modifying procedure in the non-uniform slant correction phase, some slant angles were modified and the correction was not completely per-formed for them.

Table 6 shows the processing times for different deslant-ing algorithms. All algorithms were developed with MAT-LAB 7.4 and executed on a 3.4 GHz Pentium 4 PC with 2 GB of RAM. The proposed overall slant estimation was the fastest algorithm and required less processing time than the other ones. The chain code-based method was also a very fast algorithm, but it could not estimate the overall slant of the Arabic words accurately. A comparison between the first and second rows of Table 6 demonstrates that the estimation from the selected strip was faster than the estima-tion from the whole word image.

Although the VP 2 method produced the estimation error slightly less than the Proposed 1 method (Tables 2 , 3 ), it was a very time-consuming approach because it needs to tilt a word with a lot of angles to determine the best one. In our implementation, a word was tilted with angles from  X  45  X  to + 45  X  by 1  X  increments, that is, 90 times for each word, while in the Proposed 1 method, an overall slant angle was estimated by directionally filtering a word image from  X  45 to 45  X  by 15  X  increments, that is, only seven times per word (instead of 90 times in the VP 1 method). Table 6 shows that the Proposed 1 method was approximately 30 times faster than the VP 1 method while their estimation errors were near each other.

The proposed non-uniform slant estimation was not a fast algorithm. This is due to the fact that the algorithm requires a structure of a word to find OVSs, and the thinning approaches are time-consuming. The required time for thinning a strip of a word image was calculated as 0.2065 s in average, that is, 77% of the time needed for all non-uniform estimation stages.

To demonstrate the improvement of the deslanting on the recognition rate of Arabic words, the fourth experiment was done. An approach based on the M-band packet wavelet transform proposed in [ 28 ], was used to recognize the words. In this approach, the extracted wavelet coefficients were rota-tion and scale invariant. A set of energy features was com-puted and extracted from each sub-band of these coefficients based on an energy criterion. The Mahalanobis classifier [ 29 ] wasusedin[ 28 ] for classification. Broumandnia et al. showed that their proposed approach presented better results than the other methods such as approaches based on Fourier-wavelet and Zernike moments in the recognition of Farsi handwritten words. In our experiments, the three-band wavelet transform and feature vectors of size 96 were used like [ 28 ]. Other detailed parameters were also chosen in the same way as in [ 28 ]. Further details about this word recognition algorithm can be found in [ 28 ].

In the IFN/ENIT dataset, set_ a , b , and c were used for training and set_ d was used for testing. Machine-printed words were recognized under the following two categories:
Category 1 . 984 city names  X  4 fonts  X  5 slant templates
Category 2 . 984 city names  X  6 fonts  X  3 slant templates The recognition rates obtained in the IFN/ENIT and mpIFN/ENIT datasets are reported in Tables 7 and 8 , respec-tively. The recognition rate for handwritten words in the IFN/ENIT was obtained as 75.42%. After an overall deslant-ing by Proposed 2, the accuracy reached 77.04% (1.62% improvement). The best rate in this dataset was achieved as 77.93% by using the proposed deslanting algorithm (Pro-posed 2 + non-uniform), i.e., 2.51% increment. The best improvements for Category 1 and Category 2 were 5.84 and 5.23%, respectively. Results show that the accuracy improve-ment in handwritten words was less than that of the machine-printed ones due to wide varieties of writing styles in handwritten words. In other words, if the deslanting pro-cess is completely done on both handwritten and machine-printed words, varieties among the deslanted handwritten words will be much more than those among the deslanted machine-printed ones.

The recognition rates in Category 2 were obtained lower than those in Category 1 because in the former only four fonts were trained, and the tests were performed on samples in two unseen fonts.

The improvements have been caused because of increas-ing the intra-class similarities after deslanting. To better understand the effect of deslanting on the intra-class simi-larity, some words are illustrated in Fig. 18 before and after being deslanted. The figure shows that the similarity between the same words has increased after the deslanting. In this fig-ure, deslanting has been performed with the proposed algo-rithm (Proposed 2 + non-uniform). 6.2 Parameter generalization In the proposed algorithm, some parameters were defined and assigned to obtain the best results. Here, the main and impor-tant question is how the parameter values can be obtained for different datasets?
Some experiments were done to determine the sensitiv-ity of our algorithm to the parameters variations and also to select an acceptable range for each parameter. Experiments were performed on the ssaIFN/ENIT and mpIFN/ENIT data-sets. Figures 19 , 20 , and 21 present the sensitivity of the (b) ( a ) performance of the Proposed 2 method, the dot-removing stage, and the proposed non-uniform deslanting algorithm (Proposed 2 + non-uniform) to the parameters, respectively. Nine parameters were investigated in the experiments. m max and Margin are independent of the size of the words or the scanning resolution, but the values of other seven parame-another one. m max , 0 is an initial value for m max in the mod-ifying procedure. Each plot in Figs. 19 and 21 was obtained when other parameters had their best values. Positive and negative values for y 1 in Fig. 19 correspond to the upper and lower positions relative to the baseline, respectively. Fig-ure 20 presents the rate of the elimination of dots and sub-words in the ssaIFN/ENIT and mpIFN/ENIT datasets, e.g., (filled circle) in Fig. 20 a and b shows the ratio of elimi-nated dots and diacritics relative to the total number of them which were located, respectively, at the bottom and top of the baseline in the ssaIFN/ENIT dataset. Also, (open diamonds) and (open triangles) show the rate of subwords which were incorrectly detected as dots and removed in the ssaIFN/ENIT and mpIFN/ENIT datasets, respectively. In the dot removing stage, we should have a maximum dot elimination rate with a minimum subword removing rate.

To determine suitable values for these seven parameters independent of datasets, a factor for each dataset is defined to obtain the values for the parameters according to that. The factor  X  y up is calculated by  X  y y where y max , q and y Baseline , q are the y -position of the upper-most foreground pixel and the baseline of the q th word image in a dataset, respectively. y up determines the height of the part of a word which is higher than y Baseline .  X  y up is the aver-age value of y up , q in a dataset. The values of  X  ssaIFN/ENIT and mpIFN/ENIT datasets were obtained as 79.84 and 107.16, respectively.

Due to the results on the ssaIFN/ENIT, the suitable ranges and the best values for the parameters have been determined in terms of the dataset factor and presented in Table 9 .For example, from Fig. 19 , the acceptable range for y 1 in the ssaIFN/ENIT dataset is from 5 to 16 which can be obtained from [ 0 . 06  X  y up , 0 . 20  X  y up ] where  X  y up = 79 The ranges were chosen so that the performance did not drop significantly.

Experiments showed that the ranges and the best val-ues in Table 9 were completely suitable for the other data-set (mpIFN/ENIT). It indicates that the values for all seven portional to the value of  X  y up of a dataset. 7 Conclusion In this paper, an algorithm for estimating and correcting over-all and non-uniform slants of handwritten Farsi and Arabic words was introduced. In the proposed method, the special specifications of these languages were considered. The pre-sented algorithm is based on NVSs. The tilt value of an input word was first estimated by the proposed overall slant esti-mation algorithm using directional filtering. Two rules were suggested to improve the estimation accuracy. By using these rules, the Proposed 2 method counteracted the effect of the strokes which were not written vertically in their non-slanted forms on the estimation process. After overall deslanting, an approach was presented to estimate the slant of each OVS of a word separately. Since the slant values of OVSs were not equal, in the proposed non-uniform slant correction algo-rithm, each column of a word image was deslanted by its own slant value. To protect the word from distortions caused by non-uniform deslanting, a method was proposed to smooth the slant variations between successive columns.

Experiments showed that performing the estimation on the specific strip of word images not only increased the estima-tion accuracy, but also decreased the required time. Further-more, the results indicated that the proposed overall slant estimation was an efficient and accurate algorithm. It was about 1.7 times faster than the chain code-based approach, and its estimation error was 65% of the VP-based method.
The proposed non-uniform deslanting algorithm can be used alone, but since it strongly depends on the OVSs, its performance will be decreased considerably if misclassifica-tions between OVSs and non-VSs occur.

The best results were obtained by applying the Proposed 2 method of overall deslanting followed by the proposed non-uniform slant correction method. However, it was not a fast algorithm, because of using the thinning stage in the non-uniform slant estimation phase.

Results in Tables 7 and 8 indicate that the deslanting algorithm improved the word recognition rate by increasing the intra-class similarities.
 References
