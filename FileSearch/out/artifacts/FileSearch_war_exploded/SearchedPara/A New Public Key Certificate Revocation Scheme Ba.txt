 To avoid attacks against our WEB applications, we need to provide them with the basic deployed to provide these services. Actually, Examples include security protocols such SSL (used in web browsers), IPSec (used in firewalls and desktop computers), S/MIME (a secure e-mail protocol), and SET (the electronic commerce cr edit card transaction protocol). binds the owner X  X  public key to his identit y. After a PKC has been created and circu-lated, however, due to various reasons, it may be necessary revoked prior to the expi-tocol (OCSP) [3]. Unfortunately, each of them has some drawbacks, which have lim-ited the growth and the practical use of PKI. 
In this paper, we propose a new efficient certification revocation scheme based on proposed new scheme is described in detail. In Section 3, we summarize the important drawn in Section 4. 2.1 OWHF and Hash Chain A one-way hash function (OWHF) H can map an input M of the arbitrary length to an output of the fixed length, which is called hash value h : ) ( M H h = , where the length of M is m -bits. 
OWHF H has the following properties[4]: OWHFs [5]. Definition 1: Let H be an OWHF and let r be a random number. Thus, a hash chain can be educed by iteratively hashing r , which can be written as: 
Where, r is regarded as  X  trust anchor  X  of the one-way hash chain. The hash chain 2.2 Working Principles The basic idea of our scheme is to divide the lifetime of public key certificate (PKC) and keeps the  X  X rust anchor X  confidential. E ach hash-chained element is related to an interval. To refresh the validity of the PKC, the corresponding hash-chained element is PKC at the end of current interval. For clarity, the working mechanism is illustrated in Figure.1. PKC status configuration and the PKC status verification. 2.2.1 Generation of the PKC Suppose all system clocks are synchronized. The lifetime T of every PKC is the same, so is the updating interval L . where, j L T = / ) 1 ( &gt; j . 
The PKC is generated as follows: 2.2.2 Configuration the PKC Status h at i D and erase the secret r and the remaining hash chain (see Fig.2 (b)). In some scenarios, the entity wants to temporarily suspend U PKC for m intervals, e.g. the time 
D + (see Fig.2 (c)). 
The hash values can be released through a public WEB server. That means the hash chain will be sent to the WEB server by individual entity. Note that every entity must inform the WEB server that 1 h should be securely eliminated at j D . On the other hand, verifiers. Either by secure email or by mobile SMS service, the appropriate hash values can be released. 2.2.3 Verification of the Status PKC U , he can take the following steps: 3.1 Security Analysis certificate status information. Our scheme relies on cryptographic primitive OWHF to cret r and the corresponding one-way hash chain, which will be used to confirm validity affirm that this hash value is released by an authentic entity. only two approaches to achieve it. First, he may get the preimage of k j h  X  . However, according to the properties of OWHF (see section 2.1), it X  X  computationally infeasi-hash value, the verifier will generate END h by hashing this hash value several times. Then, he will check whether END h is equal to j h . Therefore, he can detect any fraud attempt. Remarks: The secret r plays a significant role in guaranteeing security of our scheme. For example, r can be stored into an USB-Key . 3.2 Efficiency Analysis hash value is significantly quicker than verifying a digital signature. Thus, compared with the traditional schemes (CRLs or OCSP), the new scheme will save much com-putation cost. Our scheme shows certificate st atus information by releasing appropriate hash value, whose maximum length is 32 bytes. Apparently, the required bandwidth is much lower. 
As previously noted (Section 2.2.1), j h is defined and added into the certificate ex-tension field in our scheme. Here, j h is 20 bytes for SHA-1 algorithm or 32 bytes for SHA-2 algorithm. Since the traditional PKC already consists of a signature (at least 256 bytes long), a public key U PK (at least 128 bytes long) and other data, the additional hash value is negligible storage cost. 3.3 Flexibility Analysis Responder) to update certificate status information. However, for the certificate veri-fier, it X  X  a poor way to obtain single certif icate X  X  status, because communication load and computation load are high. Additionally, such centralized entity is very vulnerable uted revocation scheme is more flexible and robust than the traditional ones. The PKC is a powerful tool for security-concerned WEB applications. In this paper, we scheme, a secret parameter r and the corresponding one-way hash chain are key com-ponents, which enable individual entity to take charge of his certificate status. 
