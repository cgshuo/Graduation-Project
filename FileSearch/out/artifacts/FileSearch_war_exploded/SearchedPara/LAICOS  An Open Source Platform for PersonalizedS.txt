 In this paper, we introduce LAICOS, a social Web search engine as a contribution to the growing area of Social In-formation Retrieval (SIR). Social information and personal-ization are at the heart of LAICOS . On the one hand, the social context of documents is added as a layer to their tex-tual content traditionally used for indexing to provide Per-sonalized Social Document Representations. On the other hand, the social context of users is used for the query expan-sion process using the Personalized Social Query Expansion framework (PSQE) proposed in our earlier works. We de-scribe the different components of the system while relying on social bookmarking systems as a source of social infor-mation for personalizing and enhancing the IR process. We show how the internal structure of indexes as well as the query expansion process operated using social information. Categories and Subject Descriptors: H.3.3 [Informa-tion Systems]: Information Search and Retrieval General Terms: Algorithms, Experimentation.
 Keywords: Information Retrieval, Social networks. The Web 2.0 has strengthened end-users position in the Web through their integration in the heart of the ecosystem of content generation. This has been made possible mainly through the availability of tools such as social networks, so-cial bookmarking systems, social news sites, etc. impacting the way information is produced, processed, and consumed by both humans and machines. As a result, on the one hand, the user is no longer able to digest the large quantity of in-formation he has access to, and is generally overwhelmed by it. On the other hand, this abundance of information captures in general an explicit feedback of users and repre- X  T his work has been mainly done when the authors was at Bell Labs France, Centre de Villarceaux.
 sents an interesting opportunity for enhancing existing data management systems or proposing new ones.

Information Retrieval (IR) is performed every day in an obvious way over the Web [1], typically under a search en-gine. However, finding relevant information on the Web still becomes harder for end-users as: (i) usually, the user doesn X  X  necessarily know what he is looking for until he reaches it, and (ii) even if the user knows what he is looking for, he doesn X  X  always know how to formulate the right query to find it (except if in cases of navigational queries [7]). In ex-isting IR systems, queries are usually interpreted and pro-cessed using document indexes and/or ontologies, which are sarily relevant from an end-user perspective, in spite of the ranking performed by the Web search engine.

To improve the IR process and reduce the amount of irrel-evant documents, there are mainly three possible improve-ment tracks: (i) query reformulation using extra knowledge, i.e. expansion or refinement of the user query, (ii) post fil-tering or re-ranking of the retrieved documents (based on the user profile or context), and (iii) improvement of the IR model, i.e. the way documents and queries are represented and matched to quantify their similarities.

In this demonstration, we introduce LAICOS , an open source Personalized Social Web Search Engine prototype, in which social information and personalization are at the heart of the IR process. Actually, this prototype is relying on social bookmarking systems as a source of social information for personalizing and enhancing the IR process but can be extended to use any source of social metadata, i.e. tweets, comments, etc.
Figure 1 illustrates the different components of LAICOS , which are: (i) a set of connectors, crawlers, and a database storing the data, (ii) data indexing engines, and (iii) a query processing engine. In the following, we briefly describe some of these components.
LAICOS possesses two crawlers: (i) a crawler for web pages based on Heritrix 2 , which was specifically designed for web archiving and crawling. For each crawled web page, (ii) a folksonomy crawler engine will download all the annota-t ions that are associated to it through APIs 3 . Annotations are recovered from social bookmarking systems especially, the delicious website 4 .
Crawled web pages and their social annotations are stored into a repository. Two indexing engines are responsible for indexing and keeping up to date the following index struc-tures: (1) A textual content based index structure, which is based on indexing the collection of crawled documents using the inverted index structure. The Apache Lucene search en-gine leverages this part 5 . (2) A social based index structure, which is based on the crawled annotations assigned by users to web pages in social bookmarking websites. We imple-ment our own indexing engine and structure for this part. The textual-content based index structure is well described in [12]. Hence, we only describe the social-based index struc-ture of LAICOS. This index consists of the following seven main data structures (See Table 1 for the internal format and compression used for each structure): Table 1: Details on the format and compression u sed for each index data structure. The numbers in parenthesis are the size of each entry in bytes.
In IR systems, queries are usually pre-processed by being reformulated. This process includes either: (i) the reduction of queries, which is a technique to reduce long queries to more effective ones [11], or (ii) expansion of queries, which consists of enriching the user X  X  initial query with additional information [10].

In LAICOS , queries are interpreted and processed using the Personalized Social Query Expansion (PSQE) frame-work [5]. In order to achieve a social and a personalized expansions of a query, PSQE considers: (i) the semantic similarity between candidate terms and the query, and (ii) the extent to which the candidate terms are likely to be in-teresting to the user. The experiments performed on the PSQE framework in [5] show that it enhances web search significantly.
Modeling in IR consists of two main tasks [1]: (i) the def-inition of a conceptual model to represent documents and queries and (ii) the definition of a ranking function to quan-tify the similarities among documents and queries.
To model the textual content of documents, LAICOS is based on the Apache Lucene search engine. However, to model the social annotations associated to the corpus of documents, L AICOS uses the Personalized Social Document Representation (PSDR) framework described in [6].
Basically, PSDR is a framework that uses social informa-tion to enhance, improve and provide a personalized social representation of documents to each user. Briefly, when a user submits a query, the framework constructs, on the fly, a PSDR of all documents that potentially match the query based on other users X  experience (while considering both users that are socially close to the query issuer and rele-vant to documents). The experiments performed in [6] show that the PSDR framework enhances web search significantly.
In the classical non-personalized search engines, the rel-evance between a query and a document is assumed to be only based on the textual content of the document. How-ever, relevance actually dependents on each user [14]. Thus, only query terms matching with the textual content of doc-uments is not enough to generate satisfactory search results for various users.

In LAICOS , the ranking score for a document d that ap-pears in the results list obtained when a user u issues a query q is computed using the SoPRa [4] ranking function as follows: where,  X  and  X  are weights that satisfy 0  X  (  X ,  X  )  X  1, SES (  X  X  X  d ) is the Search Engine Score (SES) given to the doc-ument d ,  X  X  X  X  S d,u is the PSDR of the document d according to the user u , and  X  X  X  p u is the profile of u .

Inspired by the Vectorial Space Model, queries, profiles, documents and their PSDR are modeled as vectors. Hence, the similarities between these vectors are computed using the cosine measure. At the end of this process we obtain a list of ranked documents according to: (i) a textual content matching score of documents and the query, (ii) a social matching score of documents and the query, and (iii) the social interest score of the user to documents.
The on-line IR sub-process, which is illustrated in the right part of Figure 1 takes in charge the user query in LAICOS . The query is sent in the form of keywords using the main interface, which is similar to classical search engines. Then, the PSQE framework handles the query. The user is also able to activate and tune the parameters of the expan-sion process of PSQE through an interface as illustrated in Figure 2. As an output of this first step, PSQE returns an adapted user query as a vector of weighted terms, which is expected to be as close as possible to the user X  X  information needs.

Next, the new query is processed by a retrieval engine, which retrieves all documents that contain the query terms in their textual content. This process is based on the Apache Lucene search engine. Then, a ranking score is computed for each retrieved document as described in Section 2.5. The re-sulted list of documents is sorted based on this final ranking score from the most relevant to the less relevant one. Finally, the top ranked documents are formatted for presentation to the user as illustrated in Figure 3.

LAICOS has already been evaluated in an off-line study following the evaluation methodology proposed and used in [5, 8, 17] for assessing personalized search algorithms. Particularly, LAICOS has been compared to many social ranking algorithms including [2, 3, 9, 13, 15, 17]. As illus-trated in Figure 4, the results show significant benefits of the LAICOS social search engine compared to the closest state of the art approaches for ranking algorithms. Espe-cially, our approach outperforms the LDA-P approach and the Xu08 approach, which we consider as the closest works to the LAICOS ranking function (LDA-P is described in [6]).
Currently, the main complexity of LAICOS is in its ability to compute a PSDR for documents while processing a query. Actually, this complexity scales linearly with the number of retrieved documents, which indicates that this approach can be applied to a very large datasets. By using parallel compu-tation, we can easily and considerably reduce the execution time. This is part of our future work to improve L AICOS . As an illustration, Figure 5 shows the execution time needed for processing queries according to the number of documents that they match w.r.t. several parameters. The queries and the users were randomly selected 10 times independently, and we report the average results each time. As depicted in Figure 5, none of these parameters have an impact on the execution time. This latter still scales linearly with the num-ber of documents. The results are obtained on a MacBook Pro with a 2.8GHz Intel Core i7 CPU and 4GB 1333MHz DDR3 of RAM, running MacOS X Lion v10.7.4.
This demonstration is illustrated using documents indexed from a delicious dataset. This dataset is public, described LAICOS crawlers was the tagged web pages of this dataset. We setup the crawlers in such a way to remove all the non-english web pages, an operation performed using the Apache Tika toolkit. Note that all the web pages that return an http error code was considered as unavailable. Table 2 gives a de-scription of the resulted corpus of data after our cleansing and pre-processing:
In this demonstration, we show mainly the retrieval per-f ormances of LAICOS by comparing it to many retrieval algorithms. Hence, we illustrate mainly the following search scenario: 1. A user is asked to register his delicious account, which 2. The user is then asked to issue a query. The results are 3. The user can then process the same query over differ-4. Finally, the user can judge whether or not a document
This demo paper introduces LAICOS , a personalized so-cial web search engine that includes the social context of both users and documents in the IR process. On the one hand, the social context of documents is added as a layer to the textual content traditionally used to index a collection of documents to provide a personalized social representa-tion of documents using the PSDR framework. On the other hand, the social context of users is used for the query expan-sion process using the Personalized Social Query Expansion framework (PSQE) and for ranking purpose. The proto-type of LAICOS is implemented using the Apache Lucene IR platform and will be soon available for researcher un-der a GNU General Public License. A strong characteristic of LAICOS is the fact that it is a modular system that allows easily developing, integrating and evaluating SIR ap-proaches. In particular, eLAICOS is the module that is re-sponsible for this ease integration and evaluation of SIR ap-proaches, which is out of the scope of this paper. LAICOS is already available at http://159.217.144.88:8080/laicos-prototype/.
