 Off-policy methods have an important role to play in the larger ambitions of modern reinforcement their distribution does not match the dynamics of the process, particularly if the mismatch is due to the way actions are chosen. The prototypical example in reinforcement learning is the learning of the value function for one policy, the target policy, using data obtained while following another policy, the behavior policy. For example, the popular Q-learning algorithm (Watkins 1989) is an off-policy temporal-difference algorithm in which the target policy is greedy with respect to estimated action values, and the behavior policy is something more exploratory, such as a corresponding -greedy policy. Off-policy methods are also critical to reinforcement-learning-based efforts to model human-level world knowledge and state representations as predictions of option outcomes (e.g., Sutton, Precup &amp; Singh 1999; Sutton, Rafols &amp; Koop 2006).
 Unfortunately, off-policy methods such as Q-learning are not sound when used with approximations that are linear in the learned parameters X  X he most popular form of function approximation in rein-forcement learning. Counterexamples have been known for many years (e.g., Baird 1995) in which Q-learning X  X  parameters diverge to infinity for any positive step size. This is a severe problem in so far as function approximation is widely viewed as necessary for large-scale applications of rein-forcement learning. The need is so great that practitioners have often simply ignored the problem and continued to use Q-learning with linear function approximation anyway. Although no instances of absolute divergence in applications have been reported in the literature, the potential for instability is disturbing and probably belies real but less obvious problems.
 The stability problem is not specific to reinforcement learning. Classical dynamic programming methods such as value and policy iteration are also off-policy methods and also diverge on some problems when used with linear function approximation. Reinforcement learning methods are ac-tually an improvement over conventional dynamic programming methods in that at least they can be used stably with linear function approximation in their on-policy form. The stability problem is also not due to the interaction of control and prediction, or to stochastic approximation effects; the simplest counterexamples are for deterministic, expected-value-style, synchronous policy evaluation (see Baird 1995; Sutton &amp; Barto 1998).
 Prior to the current work, the possibility of instability could not be avoided whenever four individ-ually desirable algorithmic features were combined: 1) off-policy updates, 2) temporal-difference learning, 3) linear function approximation, and 4) linear complexity in memory and per-time-step computation. If any one of these four is abandoned, then stable methods can be obtained relatively easily. But each feature brings value and practitioners are loath to give any of them up, as we discuss later in a penultimate related-work section. In this paper we present the first algorithm to achieve all four desirable features and be stable and convergent for all finite Markov decision processes, all target and behavior policies, and all feature representations for the linear approximator. Moreover, our algorithm does not use importance sampling and can be expected to be much better conditioned and of lower variance than importance sampling methods. Our algorithm can be viewed as perform-ing stochastic gradient-descent in a novel objective function whose optimum is the least-squares TD solution. Our algorithm is also incremental and suitable for online use just as are simple temporal-difference learning algorithms such as Q-learning and TD(  X  ) (Sutton 1988). Our algorithm can be broadly characterized as a gradient-descent version of TD(0), and accordingly we call it GTD(0). In this section we formulate the off-policy policy-evaluation problem for one-step temporal-difference learning such that the data consists of independent, identically-distributed (i.i.d.) sam-ples. We start by considering the standard reinforcement learning framework, in which a learning agent interacts with an environment consisting of a finite Markov decision process (MDP). At each of a sequence of discrete time steps, t = 1 , 2 ,... , the environment is in a state s t  X  S , the agent chooses an action a t  X  A , and then the environment emits a reward r t  X  R , and transitions to its dent on the immediately preceding state and action. Rewards are stochastic and dependent on the preceding state and action, and on the next state. The agent process generating the actions is termed the behavior policy . To start, we assume a deterministic target policy  X  : S  X  A . The objective is to learn an approximation to its state-value function: where  X   X  [0 , 1) is the discount rate . The learning is to be done without knowledge of the process dynamics and from observations of a single continuous trajectory with no resets.
 In many problems of interest the state set is too large for it to be practical to approximate the value of each state individually. Here we consider linear function approximation, in which states are mapped to feature vectors with fewer components than the number of states. That is, for each state s  X  S there is a corresponding feature vector  X  ( s )  X  R n , with n |S| . The approximation to the value function is then required to be linear in the feature vectors and a corresponding parameter vector  X   X  R n : Further, we assume that the states s t are not visible to the learning agent in any way other than through the feature vectors. Thus this function approximation formulation can include partial-observability formulations such as POMDPs as a special case.
 ( s would do in that state, and for others it will not. We can discard all of the latter as not relevant to the target policy. For the former, we can discard the action because it can be determined from the state via the target policy. With a slight abuse of notation, let s k denote the k th state in which an on-policy action was taken, and let r k and s 0 k denote the associated reward and next state. The k th the reward on the transition, and the ending state of the transition. The corresponding data available to the learning algorithm is the triple (  X  ( s k ) ,r k , X  ( s 0 k )) .
 The MDP under the behavior policy is assumed to be ergodic, so that it determines a stationary state-occupancy distribution  X  ( s ) = lim k  X  X  X  Pr { s k = s } . For any state s , the MDP and target policy together determine an N  X  N state-transition-probability matrix P , where p ss 0 = Pr { s 0 k = s | s k = s } , and an N  X  1 expected-reward vector R , where R s = E [ r k | s k = s ] . These two together completely characterize the statistics of on-policy transitions, and all the samples in the in that there are temporal dependencies between the sample transitions. In our analysis we first consider a formulation without such dependencies, the i.i.d. case, and then prove that our results extend to the original case.
 In the i.i.d. formulation, the states s k are generated independently and identically distributed ac-cording to an arbitrary probability distribution  X  . From each s k , a corresponding s 0 k is generated according to the on-policy state-transition matrix, P , and a corresponding r k is generated according to an arbitrary bounded distribution with expected value R s k . The final i.i.d. data sequence, from k = 1 , 2 ,... Further, because each sample is i.i.d., we can remove the indices and talk about a single tuple of random variables (  X ,r, X  0 ) drawn from  X  .
 It remains to define the objective of learning. The TD error for the linear setting is Given this, we define the one-step linear TD solution as any value of  X  at which where A = E  X  (  X   X   X  X  0 ) &gt; and b = E [ r X  ] . This is the parameter value to which the linear TD(0) algorithm (Sutton 1988) converges under on-policy training, as well as the value found by LSTD(0) (Bradtke &amp; Barto 1996) under both on-policy and off-policy training. The TD solution is always a fixed-point of the linear TD(0) algorithm, but under off-policy training it may not be stable; if  X  does not exactly satisfy (4), then the TD(0) algorithm may cause it to move away in expected value and eventually diverge to infinity. We next present the idea and gradient-descent derivation leading to the GTD(0) algorithm. As dis-cussed above, the vector E [  X  X  ] can be viewed as an error in the current solution  X  . The vector should be zero, so its norm is a measure of how far we are away from the TD solution. A distinctive fea-ture of our gradient-descent analysis of temporal-difference learning is that we use as our objective function the L 2 norm of this vector: This objective function is quadratic and unimodal; it X  X  minimum value of 0 is achieved when E [  X  X  ] = 0 , which can always be achieved. The gradient of this objective function is This last equation is key to our analysis. We would like to take a stochastic gradient-descent ap-proach, in which a small change is made on each sample in such a way that the expected update is the direction opposite to the gradient. This is straightforward if the gradient can be written as a single expected value, but here we have a product of two expected values. One cannot sample both of them because the sample product will be biased by their correlation. However, one could store a long-term, quasi-stationary estimate of either of the expectations and then sample the other. The question is, which expectation should be estimated and stored, and which should be sampled? Both ways seem to lead to interesting learning algorithms.
 First let us consider the algorithm obtained by forming and storing a separate estimate of the first expectation, that is, of the matrix A = E  X  (  X   X   X  X  0 ) &gt; . This matrix is straightforward to estimate from experience as a simple arithmetic average of all previously observed sample outer products does not depend on  X  and would not need to be re-estimated if  X  were to change. Let A k be the is defined by along with the gradient descent rule: possibly decreasing over time. We call this algorithm A &gt; TD(0) because it is essentially conventional TD(0) prefixed by an estimate of the matrix A &gt; . Although we find this algorithm interesting, we do not consider it further here because it requires O ( n 2 ) memory and computation per time step. The second path to a stochastic-approximation algorithm for estimating the gradient (6) is to form E u 1 = 0 . The GTD(0) algorithm is defined by and computation is O ( n ) per time step. The purpose of this section is to establish that GTD(0) converges with probability one to the TD solution in the i.i.d. problem formulation under standard assumptions. In particular, we have the following result: Theorem 4.1 (Convergence of GTD(0)) . Consider the GTD(0) iteration (9,10) with step-size se-Further assume that (  X  k ,r k , X  0 k ) is an i.i.d. sequence with uniformly bounded second moments. Let tion of (  X  k ,r k , X  0 k ) does not depend on the sequence index k ). Assume that A is non-singular. Then the parameter vector  X  k converges with probability one to the TD solution (4).
 Proof. We use the ordinary-differential-equation (ODE) approach (Borkar &amp; Meyn 2000). First, we rewrite the algorithm X  X  two iterations as a single iteration in a combined parameter vector with where Let G = E [ G k ] and g = E [ g k ] . Note that G and g are well-defined as by the assumption the process {  X  k ,r k , X  0 k } k is i.i.d. In particular, Further, note that (4) follows from Now we apply Theorem 2.2 of Borkar &amp; Meyn (2000). For this purpose we write  X  k +1 =  X  k +  X   X  requires the verification of the following conditions: (i) The function h is Lipschitz and h  X  (  X  ) = difference sequence, and (ii-b) for some C 0 &gt; 0 , E k M k +1 k 2 |F k  X  C 0 (1 + k  X  k k 2 ) holds for P satisfies E [ M k +1 |F k ] = 0 and M k  X  F k , i.e., it is a martingale difference sequence. Condition (ii-b) can be shown to hold by a simple application of the triangle inequality and the boundedness of sequences  X  k ,  X  k . Finally, the last condition (iv) will follow from the elementary theory of linear differential equations if we can show that the real parts of all the eigenvalues of G are negative. First, let us show that G is non-singular. Using the determinant rule for partitioned matrices 1 we get det( G ) = det( A &gt; A ) 6 = 0 . This indicates that all the eigenvalues of G are non-zero. Now, let  X   X  C ,  X  6 = 0 be an eigenvalue of G with corresponding normalized eigenvector x  X  C 2 n ; that is, k x k 2 = x  X  x = 1 , where x  X  is the complex conjugate of x . Hence x  X  Gx =  X  . Let x x Re(  X  ) = Re( x  X  Gx ) =  X  x 1 = 0 , then from  X  = x  X  Gx we get that  X  = 0 , which contradicts with  X  6 = 0 .
 The next result concerns the convergence of GTD(0) when (  X  k ,r k , X  0 k ) is obtained by the off-policy sub-sampling process described originally in Section 2. We make the following assumption: Assumption A1 The behavior policy  X  b (generator of the actions a t ) selects all actions of the target policy  X  with positive probability in every state, and the target policy is deterministic. This assumption is needed to ensure that the sub-sampled process s k is well-defined and that the obtained sample is of  X  X igh quality X . Under this assumption it holds that s k is again a Markov chain by the strong Markov property of Markov processes (as the times selected when actions correspond to those of the behavior policy form Markov times with respect to the filtration defined by the original process s t ). The following theorem shows that the conclusion of the previous result continues to hold in this case: Theorem 4.2 (Convergence of GTD(0) with a sub-sampled process.) . Assume A1. Let the param-E state randomly drawn from  X  , and let s 0 be a state obtained by following  X  for one time step in the probability one to the TD solution (4), provided that s 1  X   X  .
 Proof. The proof of Theorem 4.1 goes through without any changes once we observe that G = E distribution  X  . Further, the aperiodicity and irreducibility of ( s k ) follows from the same property of the original process ( s t ) . For further discussion of these conditions cf. Section 6.3 of Bertsekas and Tsitsiklis (1996).
 With considerable more work the result can be extended to the case when s 1 follows an arbitrary distribution. This requires an extension of Theorem 2.2 of Borkar and Meyn (2000) to processes of the proof of Proposition 4.8 of Bertsekas and Tsitsiklis (1996)). The GTD algorithm extends immediately to the case of off-policy learning of action-value functions. For this assume that a behavior policy  X  b is followed that samples all actions in every state with positive probability. Let the target policy to be evaluated be  X  . In this case the basis functions are dependent on both the states and actions:  X  : S  X  A  X  R n . The learning equations are unchanged, except that  X  t and  X  0 t are redefined as follows: (We use time indices t denoting physical time.) Here  X  ( s,a ) is the probability of selecting action a in state s under the target policy  X  . Let us call the resulting algorithm  X  X ne-step gradient-based Q-evaluation, X  or GQE(0).
 Theorem 5.1 (Convergence of GQE(0)) . Assume that s t is a state sequence generated by follow-ing some stationary policy  X  b in a finite MDP. Let r t be the corresponding sequence of rewards E lim t  X  X  X  P ( s t = s 0 | s 0 = s ) =  X  ( s 0 ) exists and is unique. Let s be a state randomly drawn from  X  , a be an action chosen by  X  b in s , let s 0 be the next state obtained and let a 0 =  X  ( s 0 ) be the A is non-singular. Then the parameter vector  X  t converges with probability one to a TD solution (4), provided that s 1 is selected from the steady-state distribution  X  .
 The proof is almost identical to that of Theorem 4.2, and hence it is omitted.
 Our main convergence results are also readily generalized to stochastic target policies by replacing the sub-sampling process described in Section 2 with a sample-weighting process. That is, instead of including or excluding transitions depending upon whether the action taken matches a deterministic policy, we include all transitions but give each a weight. For example, we might let the weight w t for update rules (9) and (10) replaced by and Each sample is also weighted by w k in the expected values, such as that defining the TD solution (4). With these changes, Theorems 4.1 and 4.2 go through immediately for stochastic policies. The reweighting is, in effect, an adjustment to the i.i.d. sampling distribution,  X  , and thus our results equivalence to our original case if the target policy is deterministic. Another natural weighting is w solution (4) better matching the target policy X  X  value function (1). There have been several prior attempts to attain the four desirable algorithmic features mentioned at the beginning this paper (off-policy stability, temporal-difference learning, linear function approxi-mation, and O ( n ) complexity) but none has been completely successful.
 One idea for retaining all four desirable features is to use importance sampling techniques to re-weight off-policy updates so that they are in the same direction as on-policy updates in expected value (Precup, Sutton &amp; Dasgupta 2001; Precup, Sutton &amp; Singh 2000). Convergence can some-times then be assured by existing results on the convergence of on-policy methods (Tsitsiklis &amp; Van Roy 1997; Tadic 2001). However, the importance sampling weights are cumulative products of (possibly many) target-to-behavior-policy likelihood ratios, and consequently they and the cor-responding updates may be of very high variance. The use of  X  X ecognizers X  to construct the target policy directly from the behavior policy (Precup, Sutton, Paduraru, Koop &amp; Singh 2006) is one strat-egy for limiting the variance; another is careful choice of the target policies (see Precup, Sutton &amp; Dasgupta 2001). However, it remains the case that for all of such methods to date there are always choices of problem, behavior policy, and target policy for which the variance is infinite , and thus for which there is no guarantee of convergence.
 Residual gradient algorithms (Baird 1995) have also been proposed as a way of obtaining all four desirable features. These methods can be viewed as gradient descent in the expected squared TD error, E  X  2 ; thus they converge stably to the solution that minimizes this objective for arbitrary differentiable function approximators. However, this solution has always been found to be much inferior to the TD solution (exemplified by (4) for the one-step linear case). In the literature (Baird 1995; Sutton &amp; Barto 1998), it is often claimed that residual-gradient methods are guaranteed to find the TD solution in two special cases: 1) systems with deterministic transitions and 2) systems in which two samples can be drawn for each next state (e.g., for which a simulation model is available). Our own analysis indicates that even these two special requirements are insufficient to guarantee convergence to the TD solution. 2 Gordon (1995) and others have questioned the need for linear function approximation. He has proposed replacing linear function approximation with a more restricted class of approximators, known as averagers , that never extrapolate outside the range of the observed data and thus cannot diverge. Rightly or wrongly, averagers have been seen as being too constraining and have not been used on large applications involving online learning. Linear methods, on the other hand, have been Jussila 2001).
 The need for linear complexity has also been questioned. Second-order methods for linear approx-imators, such as LSTD (Bradtke &amp; Barto 1996; Boyan 2002) and LSPI (Lagoudakis &amp; Parr 2003; see also Peters, Vijayakumar &amp; Schaal 2005), can be effective on moderately sized problems. If the number of features in the linear approximator is n , then these methods require memory and per-time-step computation that is O ( n 2 ) . Newer incremental methods such as iLSTD (Geramifard, Bowling sification methods may reduce the complexity further, they do not help in the general case, and may apply to O ( n ) methods as well to further reduce their complexity. Linear function approximation is most powerful when very large numbers of features are used, perhaps millions of features (e.g., as in Silver, Sutton &amp; M  X  uller 2007). In such cases, O ( n 2 ) methods are not feasible. GTD(0) is the first off-policy TD algorithm to converge under general conditions with linear func-tion approximation and linear complexity. As such, it breaks new ground in terms of important, absolute abilities not previous available in existing algorithms. We have conducted empirical stud-ies with the GTD(0) algorithm and have confirmed that it converges reliably on standard off-policy counterexamples such as Baird X  X  (1995)  X  X tar X  problem. On on-policy problems such as the n -state random walk (Sutton 1988; Sutton &amp; Barto 1998), GTD(0) does not seem to learn as efficiently as classic TD(0), although we are still exploring different ways of setting the step-size parameters, and other variations on the algorithm. It is not clear that the GTD(0) algorithm in its current form will be a fully satisfactory solution to the off-policy learning problem, but it is clear that is breaks new ground and achieves important abilities that were previously unattainable.
 Acknowledgments The authors gratefully acknowledge insights and assistance they have received from David Silver, Eric Wiewiora, Mark Ring, Michael Bowling, and Alborz Geramifard. This research was supported by iCORE, NSERC and the Alberta Ingenuity Fund.
 References
