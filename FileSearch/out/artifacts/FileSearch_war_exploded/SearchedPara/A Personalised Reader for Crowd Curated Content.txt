 Personalised news recommender systems traditionally rely on content ingested from a select set of publishers and ask users to indicate their interests from a predefined list of top-ics. They then provide users a feed of news items for each of their topics. In this demo, we present a mobile app that automatically learns users X  interests from their browsing or twitter history and provides them with a personalised feed of diverse, crowd curated content. The app also continuously learns from the users X  interactions as they swipe to like or skip items recommended to them. In addition, users can discover trending stories and content liked by other users they follow. The crowd is thus formed of the users, who as a whole act as the curators of the content to be recommended. H.4.m [ Information Systems Applications ]: Miscella-neous Recommender system, crowd curation, social filter, mobile
Online content is growing at an unprecedented rate, with millions of news stories, blogs, videos, and a wide range of publisher and user generated content being added every day. Users typically navigate this space with the help of search engines, via social media, or through services like RSS feeds, content aggregators or recommender systems. With the proliferation of smart phones, access to this content is shifting away from search engines to consuming content di-rectly within apps. As a result, a number of mobile content apps have been developed, including well known commer-cial systems like Feedly, Prismatic or Pinterest 1 , as well as research prototypes like Focal [2], PEN [1] and others, e.g., [4, 3]. However, these apps rely on users manually defining their topics of interest, based on which articles from selected publishers can be pushed to them. feedly.com , getprismatic.com/news , uk.pinterest.com c  X  Figure 1: Full view of a recommended article and screenshots of user swipe actions to like or skip
Our system, called Lumi Social News 2 , is not limited to specific publishers, but aims to provide users a personalised feed of diverse, crowd curated content, including long tail and user generated content. It automatically learns users X  interests either from their public Twitter feed or from public pages in their browsing history. The generated user model is then matched against the stream of incoming content, consisting of public pages visited or tweeted by the crowd (the community of users) or ingested via RSS.

Instead of showing the user a list of recommendations that is typical in recommender systems, Lumi displays a single recommended item at any given time. This item is picked from a given time window of ingested content, where the selection is based on the item X  X  relevance to the user as well as its popularity on social media, i.e., Twitter and Facebook. Figure 1 shows an example recommended article.

The header image is picked based on image quality and positioning in the original text, which is followed by the title and the full text of the article. In the case of a video, the video itself is positioned at the top, followed by the title and any textual description if available on the original site. The top three users who liked the recommended item are listed below the content, ordered by similarity to the user. Finally a list of related articles are shown, based on content similarity.

To get to the next recommendation, the user needs to ei-ther like or skip the current item by swiping left or right on the screen, respectively (see Figure 1). All liked items are android.lumi.do saved by the system and can be accessed through the user X  X  profile area. The liked/skipped actions are used to continu-ally update the user X  X  model, thus learning more about the user X  X  evolving interests and filtering or boosting recommen-dations based on the user X  X  feedback actions.

Lumi also supports a social network, where users can fol-low each other and discover interesting content that was liked by those they follow. Recommendations on who to fol-low are based on the relevance of the suggested user X  X  liked items to the current user X  X  interests as well as based on ex-isting social links in the user X  X  Twitter network.
The system uses a graph processing architecture, simi-lar to that of Twitter X  X  Storm, where each node is a pro-cess and data is passed around from node to node. This is driven by a need for real-time processing, as opposed to processing offered by Hadoop-like tools. The topology of a graph is specified dependent on its function. For example, a bootstrapping graph is designed for real-time processing of large-scale browsing or twitter data at signup in order to create a user model as quickly as possible. The front-end is implemented for Android phones in Java, which connects to the back-end via an API. The main system components are: github.com/nltk, opennlp.apache.org/ cassandra.apache.org/ elastic.co/products/elasticsearch
At the time of writing, we are conducting online exper-iments with real users, using an A/B testing framework. Among others, we are experimenting with different recom-mender algorithms and trending story detection methods and different UI features. We are tracking the quality of our recommendations as reflected in likes, skips and reading times, averaged across users and plotted over time.
The presented system is the first in its class to provide personalised feeds by non-intrusively learning users X  inter-ests and responding to their feedback actions when reading recommended items. The assessment of how recommender systems may perform in this setting with noisy and sparse data and online user feedbacks is the key challenge to deliver this service.
Lumi is a result of the efforts of a great team, see https://lumi.do/about/team . [1] F. Garcin and B. Faltings. Pen recsys: A personalized [2] F. Garcin, F. Galle, and B. Faltings. Focal: A [3] A. Said, J. Lin, A. Bellog  X  X n, and A. de Vries. A month [4] M. Tavakolifard, J. A. Gulla, K. C. Almeroth, J. E.
