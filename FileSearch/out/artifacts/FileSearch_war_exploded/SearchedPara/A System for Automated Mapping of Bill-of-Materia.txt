 Part numbers are widely used within an enterprise throughout the manufacturing process. The point of entry of such part numbers into this process is normally via a Bill of Materials, or BOM, sent by a contact manufacturer or supplier. Each line of the BOM provides information about one part such as the supplier part number, the BOM receiver X  X  corres ponding internal part number, an unstructured textual part description, the supplier name, etc. However, in a substantial number of cases, the BOM receiver X  X  internal part number is absent. Hence, before this part can be incorporated into the receiver X  X  manufacturing process, it has to be mapped to an internal part (of the BOM receiver) based on the information of the part in the BOM. Historically, this mapping process has been done manually which is a highly time-consuming, labor intensive and error-prone process. This paper describes a system for automating the mapping of BOM part numbers. The system uses a two step modeling and mapping approach. First, the system uses historical BOM data, receiver X  X  part specifications data and receiver X  X  part tax onomic data along with domain knowledge to automatically learn classification models for mapping a given BOM part description to successively lower levels of the receiver X  X  part tax onomy to reduce the set of potential internal parts to which the BOM part could map to. Then, information about various part parameters is extracted from the BOM part description and compared to the specifications data of the potential internal parts to choose the final mapped internal part. Mappings done by the system are very accurate, and the system is currently being deployed within IBM for mapping BOMs received by the corporate procurement/manufacturing divisions. H.2.8 [ Database Management ]: Database Applications  X  Data Mining H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Keywords: Data mining, Bill of Materials, Part Number Mapping. Part numbers are widely used within an enterprise throughout the manufacturing process. For example, many companies require the use of a constant and uniform method to control and identify the millions of parts used throughout their manufacturing processes. The frequent and pervasive use of these numbers demands that they be accurately and quickly propagated through the system to ensure smooth operation. The point of entry of such part numbers into this process is normally via a Bill of Materials, or BOM, sent by a contact manufacturer or supplier. One of the main bottlenecks to accuracy and speed of entering part numbers exists at this point of the system. A BOM typically consists of several line items, each line item containing information on one specific part. This information includes, amongst other things, the supplier part number, the BOM receiver X  X  corres ponding internal part number for the part in question, an unstructured textual part description, the supplier name, pricing information, etc. However, in a substantial number of cases, the BOM receiver X  X  internal part number is absent. Moreover, it also often occurs that both the BOM receiver X  X  internal part number and the supplier part number are missing. In either case, it becomes imperative to map each such line item to an appropriate internal part number assigned to that part by the BOM receiver before it can be incorporated into the receiver X  X  manufacturing process. An important aspect of the BOM mapping problem is that the mapping has to be done primarily on the basis of the part description provided in the BOM. This description often has little structure to it. It consists mainly of words and phrases with little or no use of punctuation. Even part parametric information (regarding part specifications) that is often provided is in an unstructured form rather than as attribute-value pairs with attribute names seldom being mentioned. Examples of some actual descriptions include  X 2.2K chip rnw 2.2k 5% 4r/8p 1/16w * X ,  X 3k 1/16w1%1608 X , and  X 128mb sdram16mx64,np, (16*8mx8) 133mhz bus speed, cl=3, trac=5.4ns, 3.3v, dimm-168 X . This feature distinguishes this problem from classical NLP as well as problems involving completely structured data involving fully defined attribute-value pairs. Historically, this mapping process has been done manually which results in a highly time-consuming, labor intensive and error-prone process. Attempts at automating this process within various industries have been limited to simple string similarity methods, keyword searches or simple rule-based systems. These methods too have produced little improvement, since more often that not, these methods fail to produce appropriate mappings and the task has to be done manually once again. Often, this involves manual review of long lists of candidate part descriptions and comparison with known mappings as well as parametric part information before a decision can be made on an appropriate mapping. This paper describes a system for automating the mapping of BOM part numbers using data mining. Ours is the first attempt at using full-fledged data mining methods to automatically learn models for mapping BOM line items to internal part numbers by using the information about the part, such as part description and supplier information, present in the BOM. The system uses a two step hierarchical modeling and mapping approach. First, the system uses historical BOM data, receiver X  X  part parametric data and receiver X  X  part tax onomic data along with domain knowledge to automatically learn classification models for mapping a given BOM part description to successively lower levels of the receiver X  X  part tax onomy to reduce the set of potential internal parts to which the BOM part could map to. Then, parametric information is extracted from the BOM part description and compared to the parametric information of the potential internal parts to choose the final mapped internal part. The system is not meant to entirely replace manual processing completely Instead, the goal is to accurately map those BOM items that have sufficient information, such as parametric data, about the part in the BOM. In those cases where the BOM item cannot be mapped to a single part with a high degree of confidence since sufficient information is not present in the BOM, the aim is to propose a small (5-10) part candidate list that can then be processed manually, instead of the tens to hundred that would need to be processed without the automated mapping system. Moreover, it is often the case that the BOM item has no part description, or the description has no parametric data in it. In those cases, it is not possible, either humanly or using automated mapping, to map the BOM item accurately to the correct internal parts. The focus of the system is to accurately predict only those BOM parts that have sufficient information about the part. We do not care about parts that cannot be mapped under any circumstances. Finally, the system can be configured to work interactively with human intervention, with varying levels of human involvement, to correct or augment the mappings at various stages of the process. The system has been found to be fairly accurate in mapping unmapped BOM parts, and, thus, should greatly enhance the efficiency and accuracy of the BOM part number mapping process. It is currently being deployed internally within the IBM Corporation for mapping BOMs received by the corporate procurement/manufacturing divisions. described in this paper for BOM part number mapping in the electronics industry, they are equally applicable for part number mapping in other industries as well, e.g. automotive industry. In Section 2, we describe the part number mapping process and how the automated part number mapper fits into the process. We also describe the various characteristics of this problem which led us to choose the approach we did. Section 3 describes this process of automated part number mapping in detail, while Section 4 describes some results of evaluating the system on actual BOM data. Finally, Section 5 provides some concluding remarks. Figure 1 depicts an overview of the part-number mapping process. Typically, a Bill of Materials (BOM) received from a third-party, such as a Contract Manufacturer (C/M), consists of a set of BOM items. Each such item contains information about a single part. Before the BOM can be released to the general manufacturing process, the BOM receiver must evaluate all the BOM items, and make sure that the exact internal part number is known for each corresponding part. Each BOM item typically contains the supplier X  X  part number; however, the receiver X  X  internal part number is often missing. In some cases, even the supplier X  X  part number is missing. If the supplier X  X  part number is present in the BOM item, then a search is performed in a database of all known mappings between supplier part numbers and internal part numbers. If such a map is found, then the corresponding internal part number is assigned to the part in question. If, however, no such map is found, or if the supplier part number is also missing, then a suitable internal part number has to be determined and assigned to the part in question before the process can go forward. This is where the automated P/N mapper comes in. The P/N mapper uses all available information about the part from the corresponding BOM item, such as supplier name, part description, and supplier part number, to predict the most likely internal part number for the given part. For this purpose, the P/N mapper uses models built from historical BOM data, known mappings between supplier-and internal-part numbers, etc. The data as well as the process are described in more detail in Section 3. Figure 1: BOM Part Number Mapping Process Overview The part number mapping problem has a set of unique characteristics that necessitate the use of techniques that are significantly different from methods used to address seemingly similar problems. One main characteristic of the P/N mapping problem is that the main source of information about the part in the BOM, the supplier X  X  part description, consists of unstructured text. Even parametric information about the part is provided in unstructured form rather than as attribute-value pairs. Thus, in order to correctly map a BOM item to the corresponding internal part, parametric information has to be extracted from this description. A second characteristic of the P/N mapping problem is that the number of parts involved in the mapping exercise generally run in the millions. As such, the system has to select one part from amongst millions of parts primarily on the basis of the unstructured textual description of the part in the BOM. This is further complicated by the third characteristic that even the description provided is often incomplete  X  only some of the parametric specifications of the part are often provided, and attribute names are almost never provided. This leads to a stacking problem, i.e. even if the specifications are correctly extracted from the description, the set of potential candidate parts is still normally very large since only partial specifications were provided. Further compounding this problem is the fourth characteristic that the numeric parametric data is highly reflective [1], both for a particular part type as well as across different part types and classes. In the former case, reflectivity implies that the same numeric value may represent possible values for two or more different attributes for parts in a given class (e.g. 1 may represent both the tolerance as well as the resistance value of a resistor). In the latter case, reflectivity implies that the same numeric value may represent possible values for attributes of different classes of parts altogether (e.g. 3.3V may represent the supply voltage rating of some type of resistor, maximum voltage rating of some type of capacitor or voltage rating for some type of integrated circuit logic device. Moreover, numeric values provided in the description may differ from the parametric data available for that part since different units are used in the two places (e.g. operating frequency of a type of memory may be specified in the BOM part description as 133, assuming units of MHz, while its value may be given as .133 in the parametric database, assuming GHz as the unit). Both these problems imply that it is not enough to extract numeric data from the description and directly compare it to parametric data since not only will it match several different classes of parts, but also several, potentially hundreds, of parts within each class as well. Altogether, these four characteristics of the problem make it very difficult for a straightforward mapping process, such as the one described in [1], that goes from BOM data, such as part description, directly to the correct internal part number extremely difficult and erroneous. However, there are three features of this problem that can be taken advantage of to make the process easier. Firstly, information is available about parts taxonomy on the r eceiver X  X  side. The taxonomy breaks up the entire parts universe into commodity classes which are further broken up into part classes, each such part class containing a set of similar parts, each such part being described by the same set of attributes. Secondly, descriptions often have units specified along with numeric part data. By using such units, numeric values can be associated with the correct attribute within a class of products, and n ecessary value conversions can be done to facilitate correct matching. Thirdly, the exact set of values that can be taken by each attribute for a given part are known since these values are available in the part specifications data. However, the number of such attributes, as well as the number of possible values of each such attribute, run into the thousands. The process, however, can be made more manageable by first identifying the correct part class to which the given BOM item part belongs to, thus reducing the set of attributes and corresponding values which we need to focus on. Knowing the correct part class, we can use the set of possible values each parameter can take to extract and identify attribute-value pairs from the BOM part description, and eventually map it to the correct part. This entire process is discussed in detail in the following section. As described previously, the automated part number mapper (P/N mapper) uses data mining to automatically learn models for mapping BOM line items to internal part numbers by using the information about the part, such as part description and supplier information, present in the BOM. Given the problems (described in Section 2.2) with directly trying to map a given BOM item to an internal part, the P/N mapper uses a two step hierarchical modeling and mapping approach. First, the system uses historical BOM data, receiver X  X  part parametric data and receiver X  X  part taxonomic data along with domain knowledge to automatically learn classification models for mapping a given BOM part description to successively lower levels of the receiver X  X  part taxonomy to reduce the set of potential internal parts to which the BOM part could map to. Then, parametric information is extracted from the BOM part description and compared to the parametric information of the potential internal parts to choose the final mapped internal part. Section 3.2 describes the various types of data used by the P/N mapper, while Section 3.3 describes the details of the mapping process. Several different kinds of data are used by the P/N mapper. The primary source of data consists of historical BOM data, comprising of BOMs that have been submitted by various third parties over time, such as Contract Manufacturers and OEMs. Such BOM data provides information such as the supplier name, supplier part number as well as a description of the part in question. This data is joined with historical mapping data consisting of known mappings of internal part numbers to the part numbers of various third parties. Thus, each record in our historical data contains the supplier name, supplier part number, part description as well as the internal part number to which it refers. Another kind of data used consists of parametric data, indexed by the internal part number, that describes the various parts X  specifications in terms of parameters and their values (e.g., product A belongs to the resistor network class, has resistance of 12 ohms, tolerance of 5%, rated amperage of 1 milli-ampere, etc.). The fourth kind of data used consists of taxonomic data that describes a taxonomy over the entire part repository. The taxonomy consists of three levels, where the entire parts universe is divided into a set of commodity classes (e.g. AOP i.e. actives/optics/passives, CONNECTORS, MEMORY, LOGIC), each such commodity class further divided into a part type class (also referred to as leaf class) (e.g. AOP contains RESISTOR NETWORKS, RESISTORS, ALUMINIUM CAPACITORS, TANTALUM CAPACITORS, etc.), each such part type class containing a set of similar parts described by the same set of attributes (e.g. RESISTORS and similar part type classes have attributes such as POWER RATING, RESISTANCE VALUE, INDUCTANCE VALUE, INDUCTANCE SPEC FREQUENCY and TOLERANCE). Finally, the system also uses any domain specific expert knowledge that may be available from various sources and/or domain experts. This consists primarily of vocabulary, synonyms, abbreviations and jargon commonly used Due to these characteristics of the mapping problem, the P/N mapper uses a hierarchical modeling and mapping approach. First, the available BOM, mapping, and taxonomic data, along with any available expert knowledge and vocabulary, is used to create classification models for various levels of the part taxonomy that take a given BOM item (containing information such as part description and supplier name) and predict the class of products (at a given level in the taxonomy) the given part belongs to. As such, we build models for predicting the commodity class, based on the BOM part information, as well as models to predict the leaf class based on the commodity class as well as the BOM part information. Since, as the taxonomy is traversed downwards, each node corresponds to fewer and fewer parts, the P/N mapper is able to use the taxonomic data to enhance the quality of the mapping job done since it needs to discriminate between fewer parts. For example, once the commodity has been predicted for a given BOM part, only parts of that commodity class need to be examined to determine the correct internal part number for that BOM item, rather than the entire universe of parts belonging to all possible commodity classes. The further down the taxonomy is traversed, the smaller is the set of possible candidates for the part number the system is trying to predict. This is one salient advantage over current approaches where a BOM item data is processed and directly mapped to an internal part number, an increasingly difficult, computationally intensive, and more error prone task since it requires the mapping process to select one part directly from amongst millions of possible candidates. We use maximum-entropy [2] methods for learning these models using the open-source opennlp.maxent package [3]. One model is learned for classifying commodity classes, and one model is learned for each commodity class for predicting the leaf (part) class of the part in question using the BOM data, given the commodity class. The data consisting of description, supplier name and supplier part number is tokenized using a 3-gram as well as a simple regular expression based tokenizer. The union of both sets of tokens is then used to convert the data into a sparse, binary, feature matrix where the features corresponding to the tokens present in a case are assigned a value of 1, while all other features are assigned a value of 0 for that case. In order to reduce the complexity of the learning process, as well as improve the accuracy of the resultant models, feature selection is then carried out on the data using document frequency and chi-square feature selection metrics. After the creation of the classification models, extractors are created to extract parametric information about the part from the description provided in the BOM item. This description is in the form of unstructured text, often lacking even basic punctuation. However, this description contains various parametric data about the part it is describing which can, in turn, be used to identify the internal part, and hence the internal part number, in question. Two different types of extractors are created: 1) regular expression based extractors, and 2) string matching extractors. While the string matching extractors are used for enumerated, alphabetic attributes, regular expression extractors are created manually and used for numeric data. Since, once the leaf has been predicted, we know exactly the attributes we are looking for in the description, and the exact set of possible values which can exist for each such attribute, we can create fairly accurate regular expression extractors (such as resistances are real numbers followed by an optional unit such as OHM, or MOHM, and an optional word such as resistance, etc. For example, one such regular expression (in Perl5 format) we used for resistances was  X  X ealNumber+"((\\s*(K|M)(\\s|-)*(OHM|O)?)|(\\s*(K|M)?(\\s|-)*(OHM|O ))) X , where realNumber is also a regular expression. String matching extractors use simple text similarity methods (exact match and edit distances) to match non-numeric attribute-values against the part description to determine if the particular value exists or not. For example, certain logic devices have a Technology Family enumerated-type attribute whose value can be LVT, F, ABT, etc. Preliminary attempts at using methods, such as Generalized Winnow [4] and RAPIER [5], for learning models for extracting parametric data from the description did not meet with much success. Amongst the several reasons for this was a requirement of these methods of tagged data for training (which we had to create automatically using ad-hoc methods), the fact that the part description generally consists of an arbitrary collection of words, phrases and numbers (not proper natural language) and the fact that numeric values for the same attribute were often different in the description and the parametric database, often due to the use of different units. Nevertheless, we continue to explore these methods further to see how we can adapt and/or extend such methods to better meet our purpose. After the models are created, the actual mapping process is carried out in a hierarchical way. First, the classification models are used to predict the commodity to which the part in question belongs. Then, the corresponding leaf class prediction model for the predicted commodity is used to predict the leaf class for the part in question. For the predicted leaf class, the set of all possible attribute name-value pairs is retrieved from the parametric data. This set is used to validate the parametric data extracted from the BOM part description using the regular expression as well as simple text string extractors. This ensures that only valid values for various attributes are extracted by the extractors. The predicted leaf class, along with the supplier name (specified in the BOM), are used to generate a list of potential candidate parts. Finally, the extracted parametric data is matched to the data in the parametric data repository for all parts belonging to the candidate list to identify the part in question. A list of top ranked parts (with highest confidence) is then outputted. The confidence is essentially a score for each potential internal part that is computed as a function of how many of the parameters of the potential part are correctly extracted from the BOM part description. The greater the number of parameters extracted, the greater is the confidence that the internal part under consideration is in fact the correct map for the BOM part being mapped. The entire mapping process can be configured to work with human intervention, with varying levels of human involvement, to further improve the mapping process. For example, human inputs can be provided at any level of the taxonomy to fix the class of the product at that level of the taxonomy. This can also be done a-priori, or during the mapping process itself by allowing a human to override a prediction of the system. Not only does this help in reducing errors at lower levels of the taxonomy, it also helps in improving predictions in the future. We used a random sample of approximately 208000 cases from the historical BOM data joined with the historical mapping data. The fields in the data were internal part number, the commodity class and the part type (leaf) class of the part in question, as well as the supplier name, supplier part number and part description. The strategy used for training and testing the models was 10-fold cross validation. In this strategy, the data was randomly split into 10 approximately equal parts. Then, each of the 10 sets was successively used to test models learned from the remaining nine sets. Thus, models were learned from approximately 90% of the data and tested on the remaining 10% of the data in each case. The performance of the system was evaluated at every stage of the part number mapping process: at the commodity mapping level, at the leaf class mapping level as well as at the final part number mapping level These tests and the results obtained are described in more detail below. Approximately 97.5% of the cases were correctly classified in terms of their commodity class. Four commodity classes comprised the bulk of the data, with AOP (actives/optics/passives such as resistors and capacitors) accounting for approximately 64% of the cases, LOGIC for 16%, MEMORY for 13% and CONNECTORS for 7%. The remaining commodity classes accounted for less than 1% of the cases. For the four most frequent classes, precision and recall statistics were also calculated to further qualify these results. While precision (ratio of cases correctly predicted to belong to a particular commodity class to the actual number of cases predicted to belong to that class) measures the ability of the classification models to distinguish between the various commodity classes, the recall (ratio of cases correctly predicted to belong to a particular commodity class to the actual number of cases belonging to that commodity class in the data) measures the ability of the classification models to correctly identify cases belonging to a particular class. For the four major commodity classes in the data, both precision and recall were very high with AOP having precision=98.3%, recall=99.1%, LOGIC having precision=94.9%, recall=94.8%, MEMORY having precision= 97.0%, recall=97.1% and CONNECTORS having precision=97.7%, recall=97.2%. For the AOP commodity class, 93.7% of the leaf classes were correctly predicted. Of the 64 classes represented in the data for the AOP commodity class, the top 2 (Resistors with 33% and Dev-resistors with 17%) accounted for approximately 50% of the data cases, while the top 8 classes accounted for almost 80% of the records and were the only classes with more than 2% records each. For these classes, both precision and recall was relatively high, with the precision ranging from 92%-97% and recall ranging from 92% to 99%. This suggests that the more common classes were relatively easier to identify as well as more readily distinguishable from other classes. The classes with few cases were generally harder to identify with precision and recall often becoming fairly small for these classes. This was generally due to the misclassification of these class cases as being members of the more common classes. For the LOGIC commodity class, the 80 leaf classes represented in the data were relatively more uniformly distributed, with the most frequent class, ASICS (application specific integrated circuits), accounting for only 8% of the cases. Since the LOGIC commodity class was present in only 16% of the cases, this meant that relatively few cases were available for training models for all the leaf classes. This was borne out by the results that showed a classification accuracy of 72.4%. Both precision and recall of the various leaf classes were also generally lower than for the AOP class further suggesting that it is much more difficult to correctly identify members of this class due to its more uniform distribution. For the MEMORY commodity class, the results were much better with an accuracy of 92.4%. While MEMORY records acc ounted for only 13% of the dataset, two things in its favor included fewer leaf classes 9 (making it easier to distinguish between them) and a skewed distribution with 4 classes accounting for almost 98% of the cases (making it easier to identify the more frequent classes). As expected, the four most frequent classes had high precision and recalls (with the most frequent, dram, having precision/recall of 96.6 and 97.7, respectively). For the four less frequent classes, these statistics were much lower, especially the recall, as sufficient data was not available to be able to model these classes well. For the CONNECTORS commodity class, the relatively few number of cases (7% of the data) resulted in classification models with a fairly low overall accuracy of 42.1%. The most frequent leaf class, Dev-connectors, comprised just 2.8% of the overall population although it accounted for almost 38% of the connectors X  class. The precision and recall for this leaf class was 59.8% and 77.2%, respectively. However, for the remaining 5 leaf classes, both the precision and recall deteriorated significantly since each acc ounted for a very small fraction of cases in the entire dataset; hence models that could correctly identify the leaf class were very difficult to learn. In addition to the number of cases affecting the classification performance of various classes, both at the leaf class as well as the commodity class level, another factor that played an important part was the quality of the description. For a significant number of cases, the description was either missing or did not provide much information. As such, it was difficult to classify such cases. This was more so for classes that occurred less frequently which had an overwhelming majority of such weak descriptions. This was reflected in the most important statistic of all, the accuracy of predicting the correct part number for a given BOM item. While the part number prediction was much more accurate for parts belonging to the more frequent commodity classes, such as AOP, and more frequent leaf classes, such as Resistors and associated leaf classes, DRAM and Capacitor classes, it was much less for the less frequent ones, such as ASICs. As mentioned in Section 1, the goal of this system is to accurately map those BOM items that have sufficient information, such as parametric data, about the part in the BOM. In those cases where the BOM item cannot be mapped to a single part with a high degree of confidence since sufficient information is not present in the BOM, the aim is to propose a small (5-10) part candidate list that can then be processed manually, instead of the tens to hundred that would need to be processed without the automated mapping system. In the cases in which no description is given, or no parametric information is available in the description, it is not possible, either humanly or using automated mapping, to map the BOM item accurately to the correct internal parts. As such, we measured the ability of the system to accurately predict only those BOM parts that have sufficient information about the part, since we do not care about parts that cannot be mapped under any circumstances. For BOM parts which had an empty description, redundant descriptions (such as AS PER SPECIFICATIONS or UNKNOWN), or that had no parametric information, the system did not attempt to make any part predictions. Rather, the prediction was left at the leaf class level for the human user to consider further. For the parts for which the parametric information was available in the description, the system was able to correctly classify 73.9% of the cases. In these cases, a candidate list of length approximately 4.5 was returned each time with the correct internal part number in that list. If the supplier part number was used to construct a filter with wildcards to further restrict the search for potential parts, the accuracy of the system was further increased to approximately 81%. Thus, for the cases in which parametric information was available in the BOM data, the system was very accurate in using the BOM data to correctly predict the internal part number corresponding to the data. This paper describes a system for automating the mapping of BOM part numbers using data mining. Ours is the first attempt at using full-fledged data mining methods to automatically learn models for mapping BOM line items to internal part numbers by using the information about the part, such as part description and supplier information, present in the BOM. The system uses a two step hierarchical modeling and mapping approach. First, the system uses historical BOM data, receiver X  X  part parametric data and receiver X  X  part tax onomic data along with domain knowledge to automatically learn classification models for mapping a given BOM part description to successively lower levels of the receiver X  X  part tax onomy to reduce the set of potential internal parts to which the BOM part could map to. Then, parametric information is extracted from the BOM part description and compared to the parametric information of the potential internal parts to choose the final mapped internal part. The system is not meant to entirely replace manual processing completely Instead, the goal is to accurately map those BOM items that have sufficient information, such as parametric data, about the part in the BOM. In those cases where the BOM item cannot be mapped to a single part with a high degree of confidence since sufficient information is not present in the BOM, the aim is to propose a small (5-10) part candidate list that can then be processed manually. Moreover, the system can be configured to work interactively with human intervention, with varying levels of human involvement, to correct or augment the mappings at various stages of the process. The system has been found to be fairly accurate in mapping unmapped BOM parts, accurately classifying almost three-fourths of the BOM items which had descriptions containing parametric information. The system is currently being deployed internally within the IBM corporation for mapping BOMs received by the corporate procurement/manufacturing divisions. We plan to continue evaluating the performance of the system on new BOM data as it comes in, especially from suppliers that have never been seen before, as well as evaluate the need and intervals for relearning of the models. Also, we plan to continuously improve the quality of the regular expression based extractors to improve the performance even further. More specifically, we are exploring ways of automatically learning the regular expression extractors, given the fact that no data tagged with parametric values is available for training. [1] Agrawal, R. and Srikant, R. Searching with numbers. In [2] Nigam, K., Lafferty, J. and McCallum, A. Using Maximum [3] Baldridge, J., Morton, T. and Bierner, G. The [4] Zhang, T., Damerau, F. and Johnson, F. Text chunking based [5] Califf, M.E. and Mooney, R.J. Relational Learning of 
