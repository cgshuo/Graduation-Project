 Grid computing represents the fundamental computing shift from a localized resource computing model to a fully-distributed virtual organization with shared resources [1][2][3]. With the Grid, companies achieve a cost efficient and effective mechanism for building and deploying applications across a wide spectrum of devices. 
Several commercial obstacles, most nota bly security and accounting, have im-peded the widespread adoption of the Grid. Several projects around security and authentication have begun both within and outside the Grid community, enabling companies to confidently use Grid services. Accounting for these services has until recently, been a sparsely-addressed problem, particularly in practice. The Grid com-munity has yet to produce either framework or, better still, an implementation of Grid accounting [4][5]. 
We design and implement the accounting information gathering system. Imple-mented system is based on OGSA (Open Grid Service Architecture) [2], following GSAX (Grid Service Accounting Extension) framework [4] of RUS-WG (Resource Usage Service) in GGF. 
To provide end-to-end user identity of accounting information on each resource, we use a Grid access control system, called PGAM [6]. PGAM uses globus toolkit. PGAM tries to support site autonomy, a factor which encourages a site to get into the Grid environment, and provides template account mechanism. And the schema of accounting information is followed Usage Record Fields of UR-WG (Usage Record) in GGF. The system comprises of several modules which work independently from each other. In addition, the accounting information monitor-ing tool for the system management in the Grid environment is implemented. The area of Grid accounting has also been investigated by others [4][7]. Some of these have provided guidance in outlini ng the accounting information gathering sys-tem architecture. 
GSAX [4] is an extensible OGSA accountin g and logging framework. It is de-signed to provide a functionally modular accounting framework which can be ex-panded by adding or changing components, to allow use of accounting at many levels and service-level agreements into the accounting framework. This framework is not tied to Grid or OGSA and can easily be adapted to scale with the growth in account-able web services. 
DGAS (DataGrid Accounting System) [7] model, developed by DataGrid Project, envisions a whole new economic Grid market, where supply and demand of Grid utilized to the lowest possible price. But, DataGrid employs a centralized resource broker intercepting all job within the Grid . Such centralized solutions are not in agreement with the decentralized nature of the Grid. So, the system, designed in this paper, is follows GSAX framework. Designed and implemented system uses the globus toolkit as its middleware which is the most widely adopted grid middleware but is lack of end-to-end user identity. 3.1 Identity in Globus Toolkit Globus toolkit comprises a set of components that implement basic services for re-source management, information service, data management, grid security, etc. GRAM (Grid Resource Allocation Manager) is responsible for access to remote resources, co-allocation of distributed resources, and processing of heterogeneity of resource man-agement. The gatekeeper is an extremely simple component that responds to a request by doing three things: performing mutual authentication of user and resource, deter-mining a local user name for the remote user, and starting a job manager which exe-cutes as that local user and actually handles the request. 
Normally, when a request for access is received, the gatekeeper attempts to find the corresponding local username in the  X  X rid-mapfile. X  This file lists pairs of certificate subjects (e.g.,  X /O=Grid/O=Globus/OU=chonbuk.ac.kr/CN=hdg X ) and usernames (e.g., gw1). If no line is found for the current subject, access request is denied.
In the original syntax of this file, several certificate subjects can be mapped to one local username. But, this mechanism cannot guarantee end-to-end user identity: who is the owner of local process or job. If th e site administrator wants to trace the usage of local resource, he must deploy other sp ecial monitoring or tracing tool. Sharing of security problem, digging into privacy. 
To guarantee end-to-end user identity, we adopted PGAM. It uses only 1-to-1 map-load on the site administrator and local system. So, PGAM implements template ac-count mechanism [8] to reduce the burden of administrator and local system. 
When a grid user requests a right for access to local resource with his credential and local resource management policies (e.g., pool of available local usernames, client host policy, stage policy, personal information policy, local resource X  X  status policy). 3.2 Schema of Usage Record and Accounting Information Service Accounting in the grid environment is very different from that in the traditional computing environment, because the concept of the user is different from the local Accounting information in the grid envir onment is produced by the grid user. The We chose Usage Record format, proposed by UR-WG in GGF, as a common usage record format in the grid environment. 
Because of characteristics of the grid environment, most of grid programmers try to keep the autonomy of each site with minimum intrusion. Thus, the use of the output of the local accounting system is preferred. Designed accounting information service is independent from any other services or resources and to follow the GSAX. Each resource sends its accounting data to the acco unting information service. To obtain his or her accounting information, user uses a service call following OGSA. 3.3 Gathering Process Accounting Information each system. For the Linux, psacct package contains several utilities for monitoring This file contains information sufficient for Minimum Set of Usage Record. 
Figure 3 shows the architecture for gathering process accounting information. If a machine is structured as a cluster, AI_Collector is located in the front node only and creates NodeController for each slave node. For each slave node, NodePacct is cre-ated by the Monitoring Tool which may locate outside of this machine. NodePacct collects process accounting in formation from the file  X  X acct X  and interacts with NodeController. Process accounting informa tion in each NodeController is gathered by AI_Collector and sent to accounting information database in the Accounting In-formation Service. Configuration file  X  X rid-id.conf X  contains the list of local user-names that allocated to the grid user. Each NodePacct collects process accounting information which is produced by these users. 
We designed this architecture to be scalable. NodeController is created against each NodePacct in the slave node. So, if new slave node is added, NodeController is created automatically. That is, adding and controlling of slave node is very easy. 3.4 Gathering Accounting Information from Job Manager The system can collect accounting information produced by job manager. We applied to LoadLeveler, the job manager for IBM AIX machine. So, we use this accounting information of the machine to gather grid accounting information. Figure 4 shows the architecture for LoadLeveler. AI_Collector in Figure 4 is the same module in Figure 3. AI_Collector initiates LoadL_Acct to collect accounting information. LoadL_Acct extract accounting information from the histor y file of LoadLeveler. Application to PBS (Portable Batch System) or other Job Manager is very easy to achieve by devel-oping only the module, which plays the role for LoadLeveler. We implemented this system in the following environments. For the portability of this system, Java is selected. We use MySQL for DBMS. 
Figure 5 shows an example of gathered process accounting information. We can who creates these processes, utility for grid access control is needed. Also, we imple-ment the monitoring tool for process account ing (Figure 6). With this tool, the admin-istrator can manipulate NodePacct. This tool can be applied to job managers. In this paper, we design and implement the accounting information service. This ser-vice can integrate the accounting information of process and from job manager. This service follows the GSAX framework and the accounting information is formatted to follow Minimum Set of Usage Record. It is very easy to add or delete slave node. Because the architecture of the gathering system is layered, extension to other job very easy to achieve by developing only the module, which plays the role for LoadLeveler. But, for the future application, the native XML database would be used as DBMS. And more various kind of Job Manager would be considered. 
