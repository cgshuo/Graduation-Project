
Elena V. Epure 1, 2 , Charlotte Hug 1 , Rebecca Deneck X re 1 , and Sjaak Brinkkemper 2 Process Aware Information Systems (PAIS) form a category of information systems, highly adopted by organizations, defined by van der Aalst as  X  X oftware systems that manage and execute operational processes involving people, applications, and/or infor-mation sources on the basis of process models X  [3]. In flexible PAISs which support primacy of humans has been highly acknowledged [8, 18, 26]. The agency characteristic of process participants, entailing their freedom of decision making during process enact-sider an e-commerce application: when a net surfer adds a product to his basket, several choices are offered: he can select another product, handle his basket, create his customer account etc. Following the flexibility of the studied process, the decision making com-plexity can increase rapidly. An experienced process participant who is highly aware specific constraints or how to model a process fragment at run-time. In contrast, this can be very challenging for a less experienced process participant or for a process participant who faces a very dynamic and complex process environment [2, 23, 26]. If the resulting problem-prone situation is ignored, the adoption of flexible processes can instead have a negative impact on organizations. 
Consequently, in this paper, we focus on tackling the difficulties of process partici-pants when enacting flexible processes in PAISs by proposing FlexPAISSeer , a solution based on intention mining [12]. A PAIS enables the process discovery in a bottom-up manner by capturing events during enactment. Practically, this is realized by process mining, whose main goal is  X  X o discover, monitor and improve real processes X  by transforming the event logs data in valuable knowledge [3]. The mining result is most often a process model. Additionally, process mining has been used as a key technology in several approaches to support process participants during enact-ment [1, 22, 26]. While these solutions integrate process mining successfully, we consider the recommendations semantically not rich enough to support effective deci-sion making meaning effective criteria identification, development, and analysis of alternatives [13]. The recommendations are formulated based on the mined process models which are frequently represented as control flows of low level activities. Therefore, to semantically enrich the recommendations, the mined process models must be enriched. 
Through intention mining, we have the ambitious goal of extending process mining with a more suitable perspective for supporting humans in decision making, by mining the intentional process model from event logs and by using it for providing recommen-dations as intentions and confidence factors. We consider the intention a higher abstraction and a logical grouping of activities which captures their hidden goal: what the user wanted/want to achieve by following those activities. Human behavior is in-tentional by nature. Hence, making decisions based on intentions is closer to his natural reasoning mechanism. This topic has been extensively discussed in philosophy [4, 10], artificial intelligence [7, 16] and various areas of information systems, as requirements and enterprise engineering [15, 17, 18, 25, 31], and data mining [5, 27]. 
Once the process participant adopts an intention, he acts accordingly to achieve it [4]. Hence, the event log contains data about his intention. The research objectives regarding the unsupervised intention mining technique are: the identification of the data which provides information about intentions and the identification of the inten-tional cluster of events associated with an intention and its naming . We propose a general definition of IntentMiner , applicable for multiple systems while we also iden-tify domain-specific aspects as the cost f unction in clustering and the intention nam-ing. We propose IntentRecommender to predict a set of intentions based on the process model and the process participant trace, each having associated a confidence factor : a numerical value aggregating the proba bility of the past o ccurrence of the full or partial sequence of intentions (the trace and each predicted intention). 
We used design science [11] collaborating with 42windmills, a software company located in Leiden, the Netherlands. We chose this research method as it addresses the relevance and acceptance of our created artifacts in the application domain. Accordingly, this paper is organized as follows: Section 2 describes the FlexPAISSeer approach and its artifacts design, Section 3 presents the artifacts development and demonstration in the case study context, Section 4 details the artifacts evaluation. Finally, Section 5 presents the conclusions and future works. We identified the problem situation could be best tackled with a knowledge manage-ment approach. Thus, we chose the knowledge management cycle proposed by Wiig [28] for the FlexPAISSeer design which distinguished four phases: Build knowledge, Hold knowledge, Pool knowledge and Use knowledge. 
IntentMiner is the central component of the Build and Hold knowledge phases. It consists of the intention mining technique that creates and embeds knowledge as fol-lows: it mines all the existing event logs and generates the intentional process model enriched with meta-data regarding the frequencies of various process instances (steps 9, 4, 10-11 in Fig. 1); IntentMiner also transforms the current process instance in the intentional process instance to feed IntentRecommender, and uses it for updating the intentional process model (steps 1-5 in Fig. 1). 
IntentRecommender is the central component for the Pool knowledge phase: it as-sembles and reconstructs the intentional process instance and the process model as recommendations composed of intentions and confidence factors (steps 6-7 in Fig. 1). The Use knowledge phase concerns the Process Participant who can decide to enact considering the given recommendations (ste ps 8). However, the recommendations are not enforced, the Process Participant being free to enact the process differently when required by the situation at hand. 
Further, we present IntentMiner and IntentRecommender with a focus on our de-sign decisions and algorithms. The design decisions were created based on extensive literature review and interviews with the company before and during the project [9]. 2.1 IntentMiner The main design goal of IntentMiner is to discover the intentional process model from the traces of the process participants, by both mining their intentions and the flow between these intentions. We group these design decisions in the following catego-ries: input-related and algorithm-related design decisions. 
The input-related design focuses on the identification of the relevant data for min-ing the intentional process, a logging mechanism and a data extraction mechanism. After analyzing other process mining techniqu es [3], we decided to structure the event logs as in Table 1. Moreover, the mechanism extracting the data from the data source should produce event logs compliant with the XES standard for storing and exchang-ing logs [3] as it is the most used in the process mining domain. The algorithm-related design is built to mine elementary intentions. We plan to ex-tend IntentMiner to mine higher level intentions in the future. The IntentMiner algo-rithm consists of six steps, as shown in Fig. 2. 
We explain the IntentMiner algorithm by means of a semi-formal presentation. A specific PAIS. An intention I is said to be elementary if there exists a set of activities A = {a 1 , a 2 ... a t }, executed by a process participant p  X  P such that their consecutive execution leads to the achievement of I and only I . 
Each activity a i  X  A is associated to an event e i  X  E which is logged during its ex-logged during the consecutive execution of their corresponding activities A I = {a 1 , a ... a t } , which leads to the achievement of the elementary level intention I . Let L be a log of events ordered by time , recorded for a process participant p  X  P . Practically, L represents a series of events corresponding to a series of activities which were executed for realizing a series of intentions. Therefore, the log can be  X  tentional clusters and to extract the associated intention out of each cluster. 
As mentioned earlier, each event e is described by a set of attributes, AT e = {at ek : for some k, 1  X  k  X  m }. This data, contained in the event structure, gives information applied on two consecutive events for quantifying the similarity with regard to the  X  tion value. For example, two consecutive events that refer to the same entity instance have a much stronger correlation than two events that refer to the same entity type . 
This introduces the third step of the algorithm: discovering the intentional clusters [24] with syntactic analysis which consists in the application of the function f on each formed in a series of intentional correla tion values. Then, the normalization of the series is realized by subtracting from each correlation value the minimum correlation value discovered in the set, until this minimum becomes null. achievement of the intention [4, 7] is captured by the trend in the correlation values as follows: an increasing trend marks the progressive realization of an intention while a change in trend from increasing to decreasing or a null correlation value delineates two intentions. We analyzed multiple event logs of different applications and ob-served that two consecutive events belonging to an intention had a similar process low or null correlation value. The result is the discovery of the intentional clusters. 
Once the intentional clusters are identified, the further step is the intention extrac-predefined knowledge base is created as a decomposition tree (see example in Fig. 4) populated with a starting set of known intentions and activities. The activities are always positioned in leaves and they could belong to multiple intentions. An intention could be standalone or a sub-intention of another intention (high level intention). The base. The second implication is that a cl uster could represent a different intention which is not yet known and stored in the knowledge base. An expert as a process administrator being responsible for process definition and implementation should review the mined process instance and the intentional clusters to decide if the know-ledge base should be updated with new intentions or activities. The flow between intentional clusters describes the flow between intentions , thus obtaining the inten-tional process instance . 
The final step is the aggregation of the mined process instance in the intentional process model: new mined intentions and transitions are added, and the transitions frequencies are increased. Thus, we obtai n the updated intentional process model (step 5 in Fig. 1) that is further used by IntentRecommender for providing up-to-date recommendations to the process participants. 2.2 IntentRecommender The leading design decision of IntentRecommender was to provide recommendations process participants in making decisions. This enables a more effective support for the the analysis of the decision alternatives. 
The second design decision was to pr ovide recommendations according to the as-is intentional process model , discovered by IntentMiner instead of using a pre-defined process model which might not be exactly followed by the process participants in practice. Moreover, IntentMiner transforms the process participant X  X  partial trace of also used for updating the intentional process model. 
The third design decision was to provide recommendations that contain informa-tion about the behavior of other process participants in a similar or identical process enactment situation, through a confidence factor [6]. The confidence factor is a nu-merical value attached to the recommendation, which quantifies the match and the frequency of the current process participant log based on the known process data. 
Providing recommendations starting from a flow of intentions F = {I 1  X  ...  X  I n }, n  X  1 is a matter of prediction, having, as prior knowledge, the intentional process model. A recommendation is the next predicted intention, I predicted , which has attached the confidence factor CF Ipredicted . We focus further on describing the two main parts of IntentRecommender : the prediction and the conf idence factor computation. 
The prediction is the identification of the next intentions based on the input flow of intentions, F , and the process model. IntentRecommender consists of three steps:  X  intentional process model} .  X 
For each I predicted  X  SI predicted , create the set of predecessors consisting of the inten-n  X  1 . However, there are two possible issues. First, the path described by F cannot be fully found in the intentional process model. In this case, P Ipredicted is modified to in the intentional process model . Second, an intention could appear several times in list of predecessors, thus influencing its future occurrence; or (ii) the flow exposed different ways of achieving that intention. By invoking Occam X  X  razor [18], which specifies that the model with the simple assumptions should be selected, we chose the interpretation (ii). This implies another constraint on P Ipredicted : each intention in the sequence of predecessors must be unique and different from I predicted .  X  the possibility to tune it through the coefficients  X  and  X  , 0  X   X  ,  X   X  1. The process administrator can decide the frequency of a certain path is more important through  X   X  X  value, or the match of a certain path is more important, through  X   X  X  value. maintained in T I we compute the probabilities. The tree has a specific structure: a full discovered process instance that describes a path to I is stored in a leaf; then this path is recursively decomposed in shorter paths to I by removing one intention from the tail until there is nothing left to be removed. For example, let X  X  consider IntentMiner the root r = I k  X  null is reached. During the path decomposition, it might happen that a node is already in the tree in which case only the link is created and the node frequen-intention I , we have: We compute the confidence factor (1) by using (2-5) and create the recommendation. The computation is reali zed for each intention of SI predicted (step 7 in Fig. 1). 3.1 Case Study of an Enterprise Software Product To demonstrate the validity of our FlexPAISSeer approach, we conducted a revelatory single case study [30]. We selected the case company considering its suitability (the support of flexible processes through its software product): the Childcare system de-veloped by 42windmills used by several child day care centers in the Netherlands. Childcare is created with the company X  X  main product: a platform which generates software following a model driven approach. The platform together with a Web-based application designer enables the customers to design, preview, generate, re-design and deploy a wide variety of business applications. 
Even if some processes of the created business application can be automated, most of them are flexible, being enacted in a data-centered, human-driven manner. In a data-centered approach, the elements that influence the process enactment are entities, entity attributes and entity relationships (as shown in Fig. 3). A transition in the process enactment is triggered by a change in the entity state through user forms [23]. An exploratory interview reported that the high Childcare X  X  complexity combined with the flexible processes support created problems: inexperienced process partici-pants often enacted inefficiently the processes or made mistakes because of the scena-rio complexity. 
To ensure the research reliability, construct and internal validity, we defined a case study protocol beforehand and we used multiple sources of evidence which were care-fully documented in a case study database. We conducted exploratory interviews with the CTO, the Childcare consultant and the platform architect to deepen the under-standing of the problem the company was facing, to study more thoroughly the tech-The external validity, concerning the generalization of the results, is more difficult to guarantee after a single-case study. However, given the generic type of the adminis-trative application and the standard techno logy employed, we can consider the case settings as a good representative for an enterprise software product [29]. 
We developed prototypes for both IntentMiner and IntentRecommender using Mi-crosoft C#.NET language, Visual Studio 2012 and Microsoft SQL Server 2005. We choose these technologies to ensure an easier integration of the artifacts with the company X  X  product. Though generic, the prototypes are not officially released as they must be integrated and some parts still need improvements. 3.2 IntentMiner X  X  Demonstration IntentMiner is demonstrated for the Request child care process. In Fig. 3, we present a partial entity model involved in the registration process. As mentioned, the enactment of the Childcare X  X  processes is based on the entity states transitions. In Table 2a, we present a possible process instance of the Request child care process. We defined the intentional correlation function (used in Table 2b) to take into account the entity type and the entity Id (which is stored as contextual information): The intentional correlation for each pair of consecutive events is calculated ( syntactic clusters are formed ( trend analysis , Table 2c). 
Once we discover the intentional clusters, we identify the intention associated with each of them ( semantic analysis , Table 2d). For this, we pre-defined a knowledge base during the Childcare analysis. For each entity type, a decomposition tree based on Fig. 4 was created. The intention composition is generic for all the Childcare enti-ties because of the software X  X  nature, being model driven generated. 
The tree contains five elementary intentions (Create entity, Read entity, Read enti-ties, Update entity, and Delete entity) and seven activities (Update relation, Update field, Create relation, Search entity, Search entities, Show popup and Show report). 3.3 IntentRecommender X  X  Demonstration The IntentRecommender algorithm is also demonstrated further. The inputs consist (discovered with IntentMiner ). The process relates to the Childcare registration, as only this part was mined during the experiments. When the process participant invokes Inten-tRecommender , the input trace is extracted. The intentional process instance does not necessary match the intentional process model as our goal is process discovery and not conformance checking [3]. 
The first step of the algorithm consists in the identification of the last intention of manner. The evaluation of the artifacts consisted in an experiment with 10 participants, inte-racting with Childcare [9]. Previous experi ence was not required, though we provided express themselves in English and to have basic computer skills. An experiment lasted around two hours and consisted of two parts. In the first part, we evaluated IntentMiner . The process participants were asked to perform different tasks while they were verbalizing their intentions in the presence of the interviewer. The second part focused on the IntentRecommender  X  X  evaluation through structured interviews. 4.1 IntentMiner X  X  Evaluation We evaluated IntentMiner following the Confusion matrix approach, built on the concept of instances classification, realized by a classifier system [14]. In our context, the classifier system was IntentMiner and the instance was the discovery/existence of an intention. An intention discovery was classified as positive when IntentMiner dis-covered it from event logs and negative otherwise ( Classified instance, Table 4). An intention existence was positive if the process participant confirmed he had that inten-tion and negative otherwise ( Actual instance , Table 4). The participants verbalized 108 intentions out of which 105 (#TP) were correctly discovered by IntentMiner and 3 (#FN) were not. IntentMiner discovered 152 inten-tions out of which 47 (#FP) were negative as the process participants did not have those intentions. The number of true negative instances was always 0. Since a process participants had no intention and did not act accordingly, there were no logs based on which the intention could be mined. 
Given an intention discovered by IntentMiner , the average precision ( Precision = process participants X  intentions in 0.97 cases. This was measured by the average re-call ( Recall = #TP / (#TP + #FN) ). These results are very satisfactory for a first time use of our unsupervised intention mining technique. Khodabandelou et al. [12] reported an average recall of 0.93 and an average precision of 0.97 for their supervised inten-tion mining technique based on Hidden Markov Models. The precision was consider-ably better given the fact the classifier was trained in advance. 
For getting more insights into how we could improve IntentMiner , we analyzed thoroughly each log and noticed two recurring issues. First, IntentMiner discovered several intentions even if the activities behind them were not intended for that, but for higher intentions. For example, Explore the Childcare application was mined as read-ing different entities. Second, several activities were triggered by the system on behalf of the process participant thus were mined as process participant X  X  intention. Every time a new Child entity was created, an empty ChildPicker entity was also created by only one intention: Create Child entity . 
In conclusion, the functional requirements of IntentMiner were completely satis-fied as proved by its usage without errors in the experiments. IntentMiner can be used for mining intentional processes but a further review of the results by the process administrator is required as they might not be completely precise. 4.2 IntentRecommender X  X  Evaluation Unit tests were used for validating the IntentRecommender functionality. The non-functional evaluation of IntentRecommender was reduced to the following phases: 1. The non-functional evaluation of IntentMiner as the quality of the produced output (used as input for IntentRecommender ) influences the quality of the recommenda-tions. This was covered in section 4.1. 2. The analysis of the perceived effectiveness of recommendations as intentions and confidence factors on decision making support by the process participants. The second phase consisted in a structured interview based on a questionnaire. It had various conceptual scenarios inspired from Childcare which required the process par-ticipants to make decisions. Besides, ther e were also general and confidence factors-related questions. The hypotheses guiding the evaluation of IntentRecommender were: 
H1: The recommendations given as intentions improve the support for decision making by improving the support for the criteria identification . 
H2: The recommendations given as intentions improve the support for decision making by improving the support for the alternatives formulation . 
H3: The recommendations given as intentions improve the support for decision making by improving the support for the alternatives analysis . 
H4: The confidence factors included in the recommendations improve the support for decision making. In the first scenario, without any recommendations, the participants were asked to identify what they believed they should do next. The participants identified the high level intention (to update the child planning) without problems. When asked to give set of recommendations as activities was given, most of the participants chose the changed his intention from updating the child to updating the planning and the other stated that his new decision was based on the confidence factors. 
After the intention behind the recommended set of activities was revealed, 9 of 10 participants agreed that the decision making was easier in that case motivating the answer as follows: the intention helped to clarify the activities to be performed, helped to validate an intention adopted in advance and provided information about the context. One participant disagreed with the added value by invoking the efficiency in following activities without reasoning about intentions (step by step guidance). 
Consequently, it was shown that the recommendations as intentions improved the support for the criteria selection ( H1 ) in two ways: by the intention realization when the process participants adopted the sugges ted intention and made the decision accor-dingly; by the intention validation when the process participants checked if the sug-gested intention was the same with the one they already formulated in their mind. 
The aim of the next scenario was to compare the decision making support when recommendations were given as intentions and then as activities. 7 of 10 participants found the set of recommendations given as intentions helpful for supporting the deci-sion making while 3 disagreed: two preferred a step by step guidance and one found it hard to make the decision because there were too many recommendations in the set. Analyzing the collected data, we noticed that most of the participants wanted support in interacting with the application and preferred the recommendations as intentions to recommendations as activities. Thus, H2 and H3 seemed to be supported . 
The final questions were focused on the confidence factors. 6 of 10 participants disagreed that the numerical values attach ed to each recommendation influenced their decision. The main invoked reason was that there was no re-assurance the other par-ticipants enacted the process mo re efficiently or more effectively, to follow their be-havior. Nevertheless, the other 4 participants agreed with the usefulness of the confi-dence factors and mentioned that their decision was influenced completely (following Consequently, H4 could not be verified based on the existing data. In this paper, our main goal was to create an improved approach for supporting process participants during flexible processes enactment, by offering recommendation based on an intentional process model. As process mining captures accurately how real life processes are enacted, we created IntentMiner to discover intentional process models automatically from event logs. The intentional process model was integrated in IntentRecommender , which after the evaluation in a case study, demonstrated its contribution to the problem solving. To sum up with, we consider the largest contribu-tion of this research is the thorough study of the intentionality in the context of process enactment and its integration with process mining. 
We intend to improve the evaluation of th is approach as the evaluation of the arti-facts was realized for only one case study wi th 10 participants. According to Yin [30] a more accurate evaluation should include at least 3 case studies. We will then con-duct more case studies including other software products in different organizational settings. With more participants, we could do quantitative evaluation too. 
IntentMiner can be improved to mine more accurately the intentions. The semantic analysis can be supported by ontologies and semantic annotations of the event logs which should also enable the mining of the non-functional intentions. Moreover, other machine learning algorithms for clustering can be explored, as self-organizing maps or genetic algorithms. IntentMiner in its current form requires several adaptations for being re-used by other applications (selection of event attributes relevant for the syn-tactic analysis, redefinition of the correlation function according to the selected event attributes, adaptation of the hierarchy of intentions for semantic analysis). These changes  X  triggered by specific cases  X  should be formalized in a method and sup-ported by a tool to ease future adaptations. The intentional process models produced by IntentMiner are not as flexible as Map intentional process models [25]. We do not consider parallel intentions and refinement of intentions. Producing more complex intentional process models is one of our next steps. A ProM plugin for IntentMiner and IntentRecommender should be further developed. Official XES extensions also have to be proposed to integrate the concepts of process context and entity (Table 1). 
Finally, IntentRecommender can be extended with an inference mechanism based on the Dynamic Bayesian Network [21], a more suitable probabilistic model for processes. This would allow an intention to be in its list of predecessors when calcu-lating the confidence factors. The prototype sh ould be released in a stable version and integrated in a PAIS to allow its runtime evaluation. 
