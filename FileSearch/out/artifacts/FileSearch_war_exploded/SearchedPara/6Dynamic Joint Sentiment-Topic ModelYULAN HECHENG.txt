 The explosive diffusion of the Internet has facilitated the rapid development of a new social phenomenon, that of online communities, which exist in almost all areas of so-ciety, including social, business, scientific, and public service domains. People share their thoughts, express opinions, and seek for support in online communities. Sen-timent dynamics from online contents has been shown to have a strong correlation with fluctuations in macroscopic social and economic indicators in the same time pe-riod [Bollen et al. 2010b]. Sentiment time series extracted from Twitter messages has also been shown to strongly correlate with polling data on consumer confidence and political opinion [O X  X onnor et al. 2010]. Nevertheless, most existing work detects sen-timent in isolation of topic detection and simply records sentiments in different time granularity to form sentiment time series.
 In this article, we propose a dynamic Joint Sentiment-Topic model (dJST) [He and Lin 2012] which allows the detection and tracking of views of current and recurrent interests and shifts in topic and sentiment. The dJST model extends from the previously proposed Joint Sentiment-Topic (JST) model which is able to extract coherent and informative topics grouped under different sentiment [Lin and He 2009; Lin et al. 2012]. The only supervision required by JST learning is domain-independent polarity word prior information.

The proposal of the dJST model is motivated by two observations. First, the pre-viously proposed JST model assumes that words in text have a static co-occurrence pattern, which may not be suitable for the task of capturing topic and sentiment shifts in a time-variant data corpus. Second, when fitting large-scale data, the standard Gibbs sampling algorithm used in JST can be computationally difficult because it has to re-peatedly sample from the posterior the sentiment-topic pair assignment for each word token through the entire corpus at each iteration. The time and memory costs of the batch Gibbs sampling procedure therefore scale linearly with the number of documents analysed.

As an online counterpart of JST, the proposed dJST model addresses the aforesaid issues and permits discovering and tracking the intimate interplay between sentiment and topic over time from data. To efficiently fit the model to a large corpus, we de-rive online inference procedures based on a stochastic Expectation Maximization (EM) algorithm, from which the dJST model can be updated sequentially using the newly arrived data and the parameters of the previously estimated model. Furthermore, to minimize the information loss during the online inference, we assume that the genera-tion of documents in the current epoch is influenced by historical dependencies from the past documents. This is achieved by assuming that the current sentiment-topic-specific word distributions are generated from the Dirichlet distribution parameterized by the word distributions at previous epochs.

While the historical dependencies of past documents can be modeled in many possible ways, we have explored three different time-slice settings, namely, the sliding window , the skip model ,andthe multiscale model . As the influential power of the historical dependencies may vary over time, we have also investigated two strategies for setting the weights for the historical context at different time slices. These are: to use the exponential decay function and to estimate weights from data directly by EM using the fixed-point iteration method.

The major contribution of this work is fourfold.  X  X e proposed a dJST model where the generation of documents at the current epoch are influenced by documents at historical epochs in three possible ways: (1) sliding window where the current sentiment-topic word distributions are dependent on the previous sentiment-topic-specific word distributions in the last S epochs; (2) skip model where history sentiment-topic word distributions are considered by skipping some epochs in between; and (3) multiscale model where previous long-and short-timescale distributions are taken into consideration.  X  X e proposed two different weighting strategies to combine documents at historical epochs. One is using an exponential decay function wherein more recent documents would have a relatively stronger influence on the model parameters in the current epoch compared to earlier documents. Another is to estimate weights from data di-rectly by EM using the fixed-point iteration method [Minka 2003]. Our experimental results on the Mozilla add-on reviews show that using EM for weights estimation attains better performance than using the exponential decay function.  X  X e compared the performance of dJST with the two nondynamic versions of JST,
JST-one which only uses the data in the last epoch for training, and JST-all which uses all past data for model learning. The experimental results show that the dJST models outperform JST-one in both perplexity and sentiment classification accuracy which indicates the effectiveness of modeling dynamics. On the other hand, the dJST models have much lower perplexities than JST-all. Although they achieve similar sentiment classification accuracies as JST-all, they avoid taking all the historical context into account and hence are computationally more efficient.  X  X e explored the impact of different input features on the dJST performance. In particular, we performed Part-Of-Speech (POS) tagging and syntactic parsing and then removed less informative words based on their POS tags and augmented the bag-of-words features with nominal phrases. Our experimental results show that using the new input features improves the sentiment classification accuracy and the topics extracted are generally more meaningful than those from the bag-of-words representations.
 We proceed with a review of related work on sentiment and topic dynamics tracking. We then propose the dynamic JST model and describe its online inference procedures as well as the estimation of evolutionary parameters and the setting of hyperparam-eters. We demonstrate the effectiveness of our proposed approach by analyzing both sentiment and topic dynamics from review documents crawled from a Mozilla review site. Finally, we conclude our work and outline future directions. There has been little work on the automatic detection of sentiment dynamics. Mao and Lebanon [2007, 2009] formulated the sentiment flow detection problem as the prediction of an ordinal sequence based on a sequence of word sets using a variant of conditional random fields based on isotonic regression. Their proposed method has mainly been tested for sentence-level sentiment flow prediction within a document. Mei et al. [2007] employed a similar method as in Mei and Zhai [2005] where a Hidden Markov Model (HMM) is used to tag every word in the collection with a topic and sentiment polarity. The topic lifecycles and sentiment dynamics can then be computed by counting the number of words labeled with the corresponding state over time. Their method requires topic and sentiment of each word to be detected beforehand by a topic-sentiment mixture model.

In a recent study, Bollen et al. [2010b, 2010a] showed that public mood patterns from a sentiment analysis of Twitter posts do relate to fluctuations in macroscopic social and economic indicators in the same time period. However, they mapped each tweet to a six-dimensional mood vector (Tension, Depression, Anger, Vigour, Fatigue, and Confusion) as defined in the Profile Of Mood States (POMS) [McNair et al. 1992] by simply matching the terms extracted from each tweet to the set of POMS mood adjectives without considering the individual topic each tweet is about.

O X  X onnor et al. [2010] extracted tweets messages relevant to some specific topics and then derived day-to-day sentiment scores by counting positive and negative mes-sages which contain positive or negative words matched against the MPQA subjectivity lexicon 1 . Sentiment time series was generated by smoothing the daily positive versus negative ratio with a moving average over a window of the past k days. They showed that the smoothed sentiment time series strongly correlated with polling data on con-sumer confidence and political opinion.

In recent years, there has been a surge of interest in developing topic models to explore topic evolutions over time. The Dynamic Topic Model (DTM) [Blei and Lafferty 2006] uses a state space model, in particular, the Kalman filter, to capture alignment among topics across different time steps. The continuous-time Dynamic Topic Model (cDTM) [Wang et al. 2008] replaces the discrete state space model of the DTM with its continuous generalization, Brownian motion. While these models employ a Markov assumption over time that the distributions at the current epoch only depend on the previous epoch distributions, the Topic Over Time (TOT) model [Wang and McCallum 2006] does not make such an assumption, instead, it treats time as an observed contin-uous variable and for each document, the mixture distribution over topics is influenced by both word co-occurrences and the document X  X  timestamp.
 None of the aforementioned models takes into account multiscale dynamics. Nallapati et al. [2007] proposed the Multiscale Topic Tomography Model (MTTM) that employs nonhomogeneous Poisson processes to model generation of word counts and models the evolution of topics at various timescales of resolutions using Haar wavelets. More recently, Iwata et al. [2010] proposed Online Multiscale Dynamic Topic models (OMDT) which also models the topic evolution with multiple timescales but within the Dirichlet-multinomial framework by assuming current topic-specific distributions over words are generated based on the multiscale word distributions of the previous epoch.
Our work was partly inspired by the previously proposed multiscale topic mod-els [Nallapati et al. 2007; Iwata et al. 2010]. Nevertheless, we have successfully adapted the idea of multiscale modelling for use in the JST model. We have also additionally proposed another two variants of the dJST model, sliding window and skip model . Moreover, we have investigated two different ways of setting the weights of evolution-ary matrices by either using an exponential decay function or direct estimation from data. As will be discussed in Section 5, setting the weights using the latter method gives superior performance. In addition, both skip model and multiscale model achieve higher sentiment classification accuracies than sliding window although they have similar perplexity results.

Aside from extension of topic models, there have also been increasing interests in incorporating time dependencies into a Hierarchical Dirichlet Process (HDP) [Teh et al. 2006] for revealing topic dynamics from timestamped documents. One advantage over topic-model-based approaches is that HDP allows the automatic discovery of topic num-bers. Ren et al. [2008] proposed the dynamic Hierarchical Dirichlet Process (dHDP) model which imposes a dynamic time dependence so that the initial mixture model and the subsequent time-dependent mixtures share the same set of components. Pruteanu-Malinici et al. [2009] developed a simplified form of dHDP that assumes documents at a given time have topics drawn from a mixture model and the mixture weights over topics evolve with time. Zhang et al. [2010] proposed using a series of HDPs with time dependencies to the adjacent epochs being added to discover cluster evolution patterns from multiple correlated time-varying text corpora. This falls into evolutionary clus-tering [Chakrabarti et al. 2006; Chi et al. 2007, 2009; Ahmed and Xing 2008; Xu et al. 2008b, 2008a] which aims to generate clusters that fit the data at each epoch as much as possible and at the same time preserves the smoothness of clustering results over time. In a timestamped document collection, we assume documents are sorted in ascending order of their timestamps. At each epoch t where the time period for an epoch can be set of variable size M are received with their order of publication timestamps preserved. A document d at epoch t is represented as a vector of word tokens w t d = ( w t d where the bold-font variables denote the vectors. Our notations are summarized in Table I.

We assume that documents at the current epoch are influenced by documents in the past. Thus, the current sentiment-topic-specific word distributions  X  t l , z at epoch t are generated according to the word distributions at previous epochs. In particular, we define an evolutionary matrix of topic z and sentiment label l , E t l , z where each column streams received within the time slice specified by s which can be set in many different ways. Some of the possible settings are listed next. vian assumption that the current sentiment-topic word distributions are dependent on the previous sentiment-topic-specific word distributions in the last S epochs. topic word distributions into account by skipping some epochs in between. For exam-ple, if S = 3, we only consider previous sentiment-topic word distributions at epoch t  X  4, t  X  2, and t  X  1.  X  Multiscale model . We could also account for the influence of the past at different timescales to the current epoch [Nallapati et al. 2007; Iwata et al. 2010]. For exam-ple, we could set time slice s equivalent to 2 s  X  1 epochs. Hence, if S = 3, we would consider three previous sentiment-topic word distributions where the first distribu-tion is between epoch t  X  4and t  X  1, the second distribution is between epoch t  X  2 and t  X  1, and the third one is at epoch t  X  1. This would allow taking into considera-tion of previous long-and short-timescale distributions. This model, however, would take more time and memory spaces and hence effective approximation needs to be performed in order to reduce time/memory complexity.
 Figure 1 illustrates the three dJST variants proposed here when the number of his-distribution of topic z and sentiment label l within the time slice specified by s . with its components representing the weights that each time slice s contribute to s = 0 as a form of smoothing to avoid the zero probability problem for unseen words, where V is the number of unique words in the documents.

The Dirichlet prior for sentiment-topic word distributions at epoch t is
The current sentiment-topic word distributions  X  t l , z at epoch t are generated from we can ensure that the mean of the Dirichlet parameter for the current epoch becomes proportional to the weighted sum of the word distributions at previous epochs. current epoch t , the generative dJST model as shown in Figure 2 at epoch t is given as follows.  X  X or each sentiment label l = 1 ,..., L  X  X or each topic z = 1 ,..., T  X  X or each document d = 1 ,..., D t  X  X hoose a distribution  X  t d  X  Dir(  X  )  X  X or each sentiment label l under document d , choose a distribution  X  t d , l  X  Dir(  X  t )  X  X or each word n = 1 ,..., N d in document d We present a stochastic EM algorithm to sequentially update model parameters at each epoch using the newly obtained document set and the derived evolutionary parameters. At each EM iteration, we infer latent sentiment labels and topics using the collapsed Gibbs sampling and estimate the hyperparameters using maximum likelihood.
The total probability of the model for the document set W t at epoch t given the evolutionary parameters E t ,  X  t and the previous model parameter is For the first term on the right-hand side of Eq. (2), by integrating out  X  , we obtain where D is the total number of documents in epoch t , N t d , l is the number of times sentiment label l being assigned to some word tokens in document d at epoch t , N t d = For the second term, by integrating out  X  , we obtain where N t d , l , z is the number of times a word from document d being associated with topic z and sentiment label l at epoch t ,and N t d , l = z N t d , l , z .
 For the last term, by integrating out  X  , we obtain where N t l , z ,w is the number of times word w appeared in topic z and with sentiment label l at epoch t , N t l , z = w N t l , z ,w .

Gibbs sampling will sequentially sample each variable of interest, L t and Z t here, from the distribution over that variable given the current values of all other variables and the data. Letting the index x = ( d , n , t ) and the subscript \ x denote a quantity that excludes counts in word position n of document d in epoch t , the conditional posterior for z x and l x by marginalising out the random variables  X  ,  X  ,and  X  is There are two sets of evolutionary parameters to be estimated: the weight parameters  X  and the evolutionary matrix E . ting  X  t . These are using the exponential decay function and learning the weight directly from data using the fixed-point iteration method.

Exponential Decay Function. The weight parameters can be set in a way that more recent documents would have a relatively stronger influence on the model parame-ters in the current epoch compared to earlier documents. One possible setting is an exponential decay function which gives the same weight to all the elements in E t . In our experiments, we empiri-cally set the decay rate  X  = 0 . 5.

Fixed-point Iteration. It is also possible to estimate the weight vector  X  t directly from data by maximizing the joint distribution in Eq. (2) using the fixed-point iteration method [Minka 2003]. The update formula is where and (  X  ) is the digamma function defined by ( x ) =  X  log ( x )  X  x .

The detailed derivation of the update formula for  X  is presented in Appendix A. historical word distributions at different time slices. The derivation of E t therefore topic z , and sentiment label l at time slice s , which can be calculated as follows. Here C t l , z , s ,w is the expected number of times word w is assigned to sentiment label l and topic z at time slice s . For both the sliding window and skip model , each time slice  X  N , z ,w , that is, the expected number of times word w is associated with sentiment label l and topic z at epoch t , which can be calculated by where N t l , z ,w is the observed count for the number of times word w is associated with of word w associating with sentiment label l and topic z at epoch t recovered using Eq. (13). For the multiscale model , a time slice s might consist of several epochs. Therefore, C z ,w, s is calculated by accumulating the count for computing C t l , z ,w, s is where the value of s ranges from 1 to S , the total number of historical time slices to be accounted. The dJST models consist of three hyperparameters,  X  t ,  X  t and  X  t . We estimated  X  t from data using maximum likelihood as part of the online stochastic EM algorithm and set both  X  t and  X  t empirically.

Setting  X  t . A common practice for the implementations of topic models is to use symmetric Dirichlet hyperparameters. However, it has been found that an asymmetric Dirichlet prior over the per-document topic proportions has substantial advantages over a symmetric prior [Wallach et al. 2009]. So when first entering a new epoch, we initialize the asymmetric  X  t = (0 . 05  X  avgDocLength t / ( L  X  T ), where avgDocLength t is the average document length of epoch t and the value of 0.05 on average allocates 5% of probability mass for mixing. Afterwards for every 40 Gibbs sampling iterations,  X  t is learned directly from data using maximum-likelihood estimation [Minka 2003].
Setting  X  t . At epoch 1, the Dirichlet prior  X  of size L  X  T  X  V is first initialized as symmetric priors of 0.01 [Steyvers and Griffiths 2007], and then modified by a trans-formation matrix  X  of size L  X  V which encodes the word prior sentiment information.  X  is first initialized with all the elements taking a value of 1. Then for each term w  X  X  1 ,..., V } in the corpus vocabulary, the element  X  where the function f ( w ) returns the prior sentiment label of w in a sentiment lexicon, that is, neutral, positive, or negative. For example, the word  X  excellent  X  with index n in the vocabulary has a positive sentiment polarity. The corresponding row vector in  X  polarity. For each topic z  X  X  1 ,..., T } , multiplying  X  l w with  X  lz w , the value of  X  l much larger than  X  l drawn from the positive topic word distributions generated from a Dirichlet distribution with parameter  X  l
For subsequent epochs, if there are any new words encountered, the word prior polarity information will be incorporated in a similar way. But for existing words, their Dirichlet priors for sentiment-topic word distributions are obtained using Eq. (1).
In our work here, we incorporated word polarity prior information into model learn-ing where polarity words were extracted from the two sentiment lexicons, the MPQA subjectivity lexicon and the appraisal lexicon 2 . These two lexicons contain lexical words whose polarity orientations have been fully specified. We extracted the words with strong positive and negative orientation and performed stemming. Duplicate words and words with contradictory polarities after stemming were removed automatically. The final sentiment lexicon consists of 1,511 positive and 2,542 negative words.
Setting  X  t . We empirically set the symmetric prior  X  t = (0 . 05  X  avgDocLength t ) / L , where the value of 0.05 on average allocates 5% of probability mass for mixing.
The complete procedures for the online stochastic EM algorithm for the dJST model are given in Algorithm 1.
 We crawled review documents between March 2007 and January 2011 from the Mozilla add-ons Web site 3 . These reviews are about six different add-ons, namely Adblock Plus, Video DownloadHelper, Firefox Sync, Echofon for Twitter, Fast Dial, and Personas Plus. All text were downcased and non-English characters were removed. We further prepro-cessed the documents by stop-words removal based on a stop-words list 4 and stemming. The final dataset contains 9,114 documents, 11,652 unique words, and 158,562 word tokens in total.

The unit epoch was set to quarterly and there were a total of 16 epochs. We plot the total number of reviews for each add-on versus epoch number as shown in Figure 3(a). It can be observed that at the beginning, there were only reviews on Adblock Plus and Video DownloadHelper. Reviews for Fast Dial and Echofon for Twitter started to appear at Epoch 3 and 4 respectively. And reviews on Firefox Sync and Personas Plus only started to appear at Epoch 8. We also notice that there were a significantly high volume of reviews about Fast Dial at Epoch 8. As for the other add-ons, reviews on Adblock Plus and Video DownloadHelper peaked at Epoch 6 while reviews on Firefox Sync peaked at Epoch 15.

Each review is also accompanied with a user rating in the scale of 1 to 5. Figure 3(b) shows the average user rating for each add-on at each epoch. The average user rating across all the epochs for Adblock Plus, Video DownloadHelper, and Firefox Sync are 5-star, 4-star, and 2-star respectively. The reviews of the other three add-ons have an average user rating of 3-star. We evaluate the dJST model performance in terms of predictive perplexity and document-level sentiment classification accuracy, which are defined as follows.
Predictive Perplexity. Originally used in language modelling, perplexity measures a model X  X  prediction ability on unseen data. It is defined as the reciprocal geometric mean of the likelihood of a test corpus given a trained model X  X  Markov chain state M . Lower perplexity implies better predictiveness, and hence a better model. In the dJST experiments, we computed the per-word predictive perplexity of the unseen test set  X  D where as a function of the multinomial parameters { , , } of model M yields where  X  N t d , i is the number of times term i has appeared in the d th document of the test set. Using Eqs. (17) and (19), the perplexity of unseen documents can then be calculated given a trained dJST model.

Sentiment Classification. The document-level sentiment classification is based on the probability of sentiment label given a document P ( l | d ). For the data used here, since each review document is accompanied with a user rating, documents rated as 4-or-5 stars are considered as true positive and other ratings as true negative. This is in contrast to most existing sentiment classification work where reviews rated as 3-stars are removed since they are likely to confuse classifiers. Also, as opposed to most existing approaches, we did not purposely make our dataset balanced (i.e., with the same number of positive and negative documents) for training. In this section, we present the experimental results of the dJST model on the Mozilla add-on review dataset. dJST accounts for the historical context at previous epochs specified by a total number of S time slices. A larger number of time slices indicates a longer history period modeled by dJST. In order to investigate the influence of the historical time slice on the model performance, we vary S  X  X  1 .. 5 } and evaluate the model performance in perplexity. In our experiments, a model trained on the data at epoch t  X  1 is tested on the data of the next epoch t .

We compare the performance of dJST with different ways of incorporating historical context into model learning: sliding window , skip model ,and multiscale model . For all these models, the weights of the evolutionary matrices are set either based on a decay function ( -decay ) or estimated directly from data using Eq. (8) and denoted as -EM . We set the number of topics to 15 under each of the three sentiment labels, which is equivalent to a total of 45 sentiment-topic clusters.

Figure 4 shows the average perplexity over epochs with different number of time slices. It can be observed that increasing the number of time slices results in the decrease of perplexity values, although the decrease in perplexities becomes negligible when the number of time slices is beyond 4. Also, apart from time slice 1, models with their weights of the evolutionary matrices estimated from data using EM give lower perplexities than the models with weights set using the decay function. In all the subsequent experiments, we estimated the weight vector of the evolutionary matrix from data using EM unless otherwise specified.
 In order to evaluate the effectiveness of dJST in modelling dynamics, we compare the performance of the dJST models in terms of perplexity and sentiment classification accuracy with the nondynamic version of LDA and JST, namely, LDA-one, JST-one, and JST-all. LDA-one and JST-one only use the data in the previous epoch for training and hence they do not model dynamics, whereas JST-all uses all the past data for model learning. 5.2.1. Perplexity for Each Epoch. The average perplexity for each epoch with the number of time slices set to 4 and the number of topics set to 15 for the dJST-related models is shown in Figure 5. In addition, we also plot the perplexity results of LDA-one, JST-one, and JST-all. LDA-one and JST-one only use the data in the previous epoch for training and hence they do not model dynamics. JST-all uses all past data for model learning. We set the number of topics to 15 for both JST-one and JST-all. For LDA-one, the number of topics was set to 3 corresponding to positive, negative, and neutral sentiment labels. Word-polarity prior information was incorporated into LDA-one in a similar way as the dJST or JST models 5 .
Figure 5 shows that LDA-one has the highest perplexity values followed by JST-all and JST-one. The perplexity gap between JST-all and the dJST models increases with the increasing number of epochs. This suggests that the dependence of historical reviews varies over time with older reviews having less influence. The variants of dJST models have quite similar perplexities and they all outperform JST-one. 5.2.2. Performance vs. Different Number of Topics. In another set of experiments we studied the influence of the topic number settings on the dJST model performance. With the Figure 6(a) shows the average per-word perplexity over epochs with different number of topics. JST-all has higher perplexities than all the other models and the perplexity gap with the dJST models increases with the increased number of topics. All the variants of the dJST model have fairly similar perplexity values and they outperform both JST-all and JST-one.

Figure 6(b) shows the average document-level sentiment classification accuracy over epochs with different number of topics. dJSTs outperform, JST-one with skip-EM and multiscale-EM having similar sentiment classification accuracies as JST-all beyond topic number 1. Also, setting the number of topics to 1 achieves the best classification accuracy for all the models. Increasing the number of topics leads to a slight drop in accuracy though it stabilises at the topic number 10 and beyond for all the models. Nevertheless, the drop in sentiment classification accuracy by modelling more topics is only marginal (about 1% drop) for sliding-EM and skip-EM. 5.2.3. Computational Time. Figure 7 shows the average training time per epoch with the number of topics set to 15 using a computer with a duo core CPU 2.8 GHz and 2G memory. Sliding, skip, and multiscale decay models have similar average training time across the number of time slices. For the dJST EM models, estimating the weights of evolutionary matrices takes up more time, with its training time increasing linearly against the number of time slices. JST-one has less training time than the dJST models. LDA-one uses least training time since it only models 3 sentiment topics while others all model a total of 45 sentiment topics. JST-all takes much more time than all the other models as it needs to use all the previous data for training.

In conclusion, both skip model and multiscale model achieve similar sentiment clas-sification accuracies as JST-all, but they avoid taking all the historical context into account and hence are computationally more efficient. On the other hand, dJST mod-els outperform JST-one in terms of both perplexity values and sentiment classification accuracies which indicates the effectiveness of modelling dynamics.
 In the previous experiments, we preprocessed documents by removing stop-words from a stop-word list and used unigrams as input features to model learning. We further conducted another set of experiments by first performing Part-Of-Speech (POS) tag-ging and syntactic parsing, and then removing words based on their POS tags and augmenting the bag-of-word features with nominal phrases. We manually constructed a set of 19 POS tags to be ignored, such as PREP (preposition), DET (determiner), PUNC (punctuation), etc. Words with the POS tags falling into such a list were re-moved. We compare the performance of the dJST models using the original feature representation ( filtered by stopword list ), by removing words based on POS tags ( fil-tered by POS ), and augmenting the bag-of-words feature space with nominal phrases ( unigrams + phrases ). In the results presented in Figure 8, we set the number of time slices to 4 and topics  X  X  1 , 5 , 10 , 15 , 20 , 25 } .

The upper panel of Figure 8 shows the average per-word perplexity over epochs with different number of topics. It is observed that in general, increasing topic numbers results in lower perplexity values. dJSTs trained with features filtered by POS or augmented with nominal phrases ( unigrams + phrases ) give lower perplexities than the original feature representation ( filtered by stop-word list ).

We also plot the average document-level sentiment classification accuracy over epochs with different number of topics as shown in the lower panel of Figure 8. It can be observed that models trained with features filtered by POS outperform filtered by stop-word list under most topic settings. Augmenting the original bag-of-words feature space with nominal phrases ( unigrams + phrases ) further improves the classification accuracy for both the skip model and multiscale model . We list in Figure 9 the evolution of one positive sentiment topic and one negative sentiment topic extracted by dJST-multiscale with the number of topics set to 10 and the number of time slices set to 4. In Figure 10, we plotted the occurrence probability of these two topics with time, where the probability of a topic z occurring under a sentiment label l , over the document set D t in each epoch t is calculated as P ( z , l ) =
It was found in Figure 9 that the topics extracted from the input features com-prising both unigrams and phrases are generally more meaningful than those from the bag-of-words representations, as phases such as  X  good web experience  X  X nd  X  annoi ad  X  can deliver richer information. We also notice that the negative phrase  X  seriou pop-up problem  X  appears in the positive topic at Epoch 2. A manual examina-tion on the original review text reveals that it actually appeared in a positive review about Adblock Plus with a user rating of 5-stars,  X ...It X  X amazing!Iteven protected me on a graphics site that had got a serious pop-up problem. It X  X  a must have. . . .  X  .
Figure 9 shows that the positive sentiment topics are mainly dominated by topics about Adblock Plus and Video DownloadHelper, with only the topics from the last three epochs mentioning Persona Plus. This observation is inline with the dataset statistics shown in Figure 3 that only reviews on Adblock Plus and Video DownloadHelper receive an average user rating of over 4.5-stars over the entire epoch history. Figure 10 also shows the prominence of positive sentiment topics about Adblock Plus in the first five epochs.

On the other hand, more topic transitions are observed for the negative sentiment topics, that is, beginning with complaints about Web adverts, and then transitions to negative comments about Fast Dial. At Epoch 8, there were a significantly high volume of reviews about Fast Dial and the average rating is about 2-stars. Hence, the nega-tive sentiment topics about Fast Dial centered around Epoch 8. Negative topic transits to Echofon for Twitter at Epoch 11 and to Firefox Sync at Epoch 14. Such a phe-nomenon can also be observed in Figure 10 in that after Epoch 13, negative sentiment topics become more prominent than positive sentiment topics. This is consistent with what we have observed in Figure 3 that there were an increasing number of reviews about Firefox Sync after Epoch 13 and the average user rating of Firefox Sync is only 2-stars. In this article, we have proposed the dynamic Joint Sentiment-Topic (dJST) model which models dynamics of both sentiment and topics over time by assuming that the current sentiment-topic-specific word distributions are generated according to the word distributions at previous epochs. We studied three different ways of accounting for such dependency information: sliding window, skip model, and multiscale model, and demonstrated the effectiveness of dJST on a real-world dataset in terms of predic-tive likelihood and sentiment classification accuracy. Our experimental results show that while these three models give similar perplexity values, both the skip model and multiscale model generate slightly better sentiment classification results than sliding window. In future work, we plan to evaluate the model in other social media domains such as Twitter and further investigate the model for large-scale data processing. This appendix shows the derivation of the estimation of the weight vector  X  t of the dJST model.
 The weight vector  X  t is estimated by maximizing the joint distribution of dJST using the fixed-point iteration method described in Minka [2003]. We only need to focus the third term on the right-hand side of the joint distribution (Eq. (2)) as it is the only term that contains  X  t .

Taking the log-likelihood gives log P ( W t | L t , z t , E t  X  1 ,  X  t ) =
Terms T1 and T2 in Eq. (21) can be bounded using the following bounds [Wallach 2008].
Applying bounds (22) and (23) to Eq. (21) yields where term T3 in Eq. (24) can be further bounded using the following bound giving
Differentiating Eq. (24) with respect to  X  l , z , s gives  X  log P W t | L t , z t , E t  X  1 ,  X  t Setting the differentiation to 0 gives.
