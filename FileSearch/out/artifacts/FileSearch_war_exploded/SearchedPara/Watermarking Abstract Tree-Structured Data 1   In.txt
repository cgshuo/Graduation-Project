 have been extensively exploited and regarded as a potentially effective solution computer technique and the sharp increase of the capacity of storage, more and more pediently, which exerts tremendous pressure on data providers to allow users to search and access data remotely and to identify pirated copies of their data as well. So the ownership of digital assets has received many concerns. 
There is a rich body of literature on watermarking multimedia data. Most of these [6] and audio sources [7]. While more recent research has been extended to some new digital domains, such as relational data [8,9], software [10,11], natural language [15,16], categorical data [17], sensor streams [18] and so on. 
With the rapid development of Internet, copyright and integrity protection is be-coming the most urgent requirements for semi-structured data, such as XML docu-ments, complex hypertext content, etc. Semi-structured data can be represented as trees and graphs. Our work in this paper mainly focuses on tree-structured data. Nowadays, while the research work in watermarking semi-structured data [12,13,14] has achieved a lot, there are also new tech nical challenges due to tree-structured data and multimedia data differ in three important respects: 1) Securing Structural Information. Tree-struct ured data is composed of two parts, 2) Relatively Low Bandwidth. Most media watermarking techniques make use of 3) More Attacks on Structural Information. Semi-structured data may suffer more 
In this paper, we introduce a novel watermarking method for tree-structured data, which embeds watermarking not only in value-carrying nodes but also in tree struc-ture that  X  X lue X  all the nodes together. The proposed technique in the method is robust tree structural information. works. Section 3 sketches out the watermark model for tree-structured data. Section 4 for embedding and detecting watermarks. Section 5 shows our experiment evaluation. We conclude with some closing remarks in Section 6. court when these data are resold illegally by others, have received much attention and made some progresses. Agrawal et. al. [8] present an effective watermarking tech-nique geared for relational data. His technique ensures that some bit positions of some of the attributes of some of the tuples contain specific values, which is robust against viewed as node data here, but cannot protect structural information. Ng and Lau [13] extend Agrawal X  X  techniques on XML data by defining locators in XML in their se-lective approach which allows embedding non-destructive hidden information content over XML data. Similarly, it cannot protect structural information. They also present another different watermarking scheme: the compression approach, which takes ver-marking compression approach is only developed in their XQzip [19], which maybe vestigate the problem of watermarking XML databases while preserving a set of pa-aggregates of multiple types of content, such as multi-type/media documents, and represents them as graphs by characterizing the values in the structure and individual nodes. He also proposes a general watermarking algorithm that makes use of the en-coding capacity of different types of nodes. be watermarked by various node content, and embed the corresponding watermark in the nodes. While, the owner of these tree nodes can claim of the ownership by water-marks in these nodes, but cannot claim of the ownership of the tree structure. There-fore, the method is not so meaningful when facing the application that the tree struc-Node Watermarking (PNW) method, which can solve the crucial problems mentioned above by use of two value facets, tree structure and tree node content. The watermark model we propose here is described by some key definitions, its re-quirements to be met and common malicious attacks to tree-structured data. 3.1 Definitions Definition 1. Tree-structured Watermark 1) T is the tree-structured data to be marked. 2) M n is a set of tree-node watermarks inserted into the tree-structured data. 3)  X  is a gap of watermarking nodes in the tree-structured data. Correspondingly, 4)  X  is the significance level of the test for detecting a watermark. 5)  X  is minimum number of detected nodes required for a successful detection, 8) K is a key used for watermarks insertion and detection, which is known only to Definition 2. Tree-Node Watermark.
 Tree-node watermark embodies tree-structured watermark. Let a tree-node watermark M be a quintuple M = { t, d, s,  X , w }, where: 1) t is the type of the attribute of the node. 2) d is the content of the node. 3) S is the structural information of the node in the tree. 4)  X  , related to t closely, represents usability cons traints needed before and after the 5) w is the watermark information embedded in the node. 
For the convenience of the description in the algorithms below, table 1 states sev-eral key parameters used in our watermarking methods. Notation Meaning 
N Number of nodes in the tree.  X  Number of the least significant bits available for marking a node. 1 /  X  Fraction of marked nodes in the tree (the watermark ratio).  X  Number of marked nodes in the tree.  X  Significance level of the test for detecting a watermark.  X  Minimum number of detected nodes required for a successful detec-3.2 Malicious Attacks The tree-structured data watermark may suffer attacks as following: 
A . Node-content attacks . i.e. Adversary modifies node content within usability vi-cinity. Generally speaking, attack manners change with the type of the node content. etc. B . Tree-structure transformation Attacks, mainly including: B1: Adversary inserts some insignificant nodes to the tree. 
C . Subtractive (Subtree) Attacks. Adversary partitions a tree into many independ-ent usable trees, to meet the requirements of elimination of watermarks in the tree. 
D . Additive Attacks. In an additive attack, adversary inserts his own watermarks over the original document and claims the  X  X egal X  ownership of the data. We now present two watermark methods for abstract tree-structured data in this sec-only, while the second develops the PNW algorithm based on the value lying both in the tree structure and in the node content. The design of a mapping function to calcu-late the corresponding labels is at the heart of watermarking tree-structured data. It is of paramount importance that the function must have the ability to uniquely ascertain label value, and to  X  X ecognize X  the labeled node after the action of watermark embed-of the nodes within the usability vicinity). So, the main idea of designing the function is that we must have the label in accordance with the most valuable part (i.e. the us-ability of content will degrade greatly with minor changes to the part) in the tree node. The analysis of each scheme is given in the following. 4.1 Watermark Based on Tree Node Content Only As mentioned above, inspired by the relational watermarking algorithm proposed by Agrawal [8] we bring forward a tree-structured data watermarking method based on tree node content only. The algorithm accomp lishes effective protections for the value in the tree-structure X  X  nodes, which is robust against various attacks but short of pro-tecting the value pertaining to the tree structure itself. 4.1.1 Labeling the Tree Nodes Apparently, in this scheme, the node-labeling function that calculate the label for tree node content is closely related to the type of tree node content, the way of watermark embedding, and the form of envisioned attacks, which must be adaptive in our im-plementation. 
And more specifically, if the tree node is numeric data and the watermark embed-ding function is to set the  X  least significant bits to 0, we can use a linear combination of the high order bits of the tree node content to computer label. For image data, if the watermark method is based on frequency domain transforms like the DCT, the label could be a combination of the most significan t bits of its significant DCT coefficients. For video or audio data, feature extraction algorithms could be also explored as means to provide corresponding node-labeling functions. 4.1.2 Watermark Insertion owner. And let Label () be the node-labelling function. In this algorithm, markNode() is self adaptive and can be extended with the real type of the node. Here we only give paper length. The specific description of the insertion algorithm is as follows: 
Algorithm 1. The watermark insertion algorithm tree_wm_insertion (tree_node G, secret_key K ) 4.1.3 Watermark Detection In order to detect whether the data has originated from the original one, we have to find out the number of marked elements in the tree-structured data, denoted as MatchCount , and use a threshold function to calculate the smallest integer, denoted as  X  , such that if the MatchCount is larger than  X  , the owner can claim the ownership of the data with the confidence of (1- X  ) . According to Agrawal X  X  research [8], the thresh-probability p = 1/2 according to the markNum() . The specific description of t he detection algorithm is as follows: 
Algorithm 2. The watermark detection algorithm 4.1.4 Analysis of malicious attacks to the tree-structured data. However, if nodes content in whatever mer, for instance, is one of two or more substances with identical molecular formulas but different configurations, differing only in the arrangement of their component atoms. The two classes of hydrocarbon, shown in figure 1 and figure 2, are isomers. Obviously, if a chemist discovers a new structure with the same atoms of constituent elements, he cannot protect his discovery effectively by the watermark method men-tioned in the section, even though watermark is not the most effectual means to patent protection. 4.2 Path-Node Watermark data based on the technique mentioned above, which achieves comprehensive protec-tion for tree node content and structural info as well and overcomes the defects of the former method. Before the description of this method, we enunciate one basic prop-erty of tree, which is the theory foundation of the solution in the section. Property 1. All the nodes traversed from the node V tracing back to the root R of the tree determines identically the structural information of the tree node V . 
Naturally, the watermark insertion algorithm and detection algorithm are given in the following. 4.2.1 Watermark Insertion Compared with Algorithm 1, the nodes chos en to watermark insertion are not only based on the node content, but also on the path information (nodes traversed from the Watermarking (PNW). The array a [] stands for the  X  X eight X  of the node content and against various attacks. The markNode() here is the same as which in Algorithm 1. 
Algorithm 3. The PNW insertion algorithm based on combination information 4.2.2 Watermark Detection The Watermark detection algorithm is shown as follows, and the isMatchMark () here is the same as that in Algorithm 2: 
Algorithm 4. The PNW detection algorithm based on combination information 4.2.3 Analysis detection with 99% confidence against different watermark ratios. We can notice that the required proportion of correctly marked nodes decreases as the percentage of marked nodes increases  X  and also as the watermark ratio 1 /  X  in the relation increases. Similarly, we find the proportion is amazingly low in order to attain 99% confidence. For example, in a tree with 100,000 nodes, if 1% of the nodes are marked, only 62% of correctly detected marks are needed to provide 99% confidence. With the tree nodes and the watermark ratio increasing, the percentage can be made less than 51%, approaching to 50%. Definitely, the proportion must be more than 50%, to differenti-ate a watermark from a chance of random occurrence. 
From the analysis above, we can draw an important conclusion that: the aggrega-tive tree structure will  X  X mplify X  the resilience ability of the individual nodes; on the global view, the tree-structured data watermark method can maintain the detectability of the watermark, even if the individual nodes are fragile against many attacks. We developed and implemented the algorithms on a machine of the configuration as follows: CPU: PIV 2.4G, main memory: 512M, hard disk: 40G. 
For the convenience of experiments, we develop a Tree Random Generator (TRG) meric ones for simplify the experiments. above: Node-Content Attacks. We take  X  = 0.01,  X   X  1, a random tree-structured data with N set to 1,000,000 generated by the TRG, insert watermarks by various value of  X  , then choose tree nodes randomly for bit flipping attack, and finally count the probability of success of the above attack on the 1 million nodes (The watermark confidence under 99% means attack success). Figure 4 shows the probability of attack success de-destroying the watermark with modifying randomly 40% of the tree nodes. For  X  = 1000, there is only about 30% chance of destroying the watermark with modifying randomly 45% of the tree nodes. Still, the probability to destroy the watermark for  X  = almost indestructible against node-content attacks . The results in the figure 4 illustrate that the PNW algorithm has more resilience to the attacks on node content. Tree-Structure Transformation Attacks. The ability against attacks on tree struc-data. Immunity from attacks on tree structure transformation is the principal contribu-tion of the PNW algorithm: node as father node and insert a relatively insignificant node. Obviously, the addition does not influence any node content, and also not alter the path info from the original the watermarked nodes. Theoretically speaking, the PNW algorithm can identify the watermarked nodes accurately in addition attacks. 
For attacks on deletion of nodes to the tree, for example, we randomly select a leaf path info, and not affect identification of the rest watermarked nodes. The only way of termarked nodes excessive loss. We cannot detect the watermarks correctly if the degrade to subtractive (subtree) attacks in this condition. 
We eliminate tree nodes randomly to calculate the probability of success attack on the 1 million nodes with the former parameters remaining unchanged. In figure 5, we have plotted the proportion of watermark detected for various  X  . As expected, when  X  increases (i.e. less nodes are marked), we need a lower percentage for deletion to be about 0.3% subtrees remaining. And even for  X  = 10,000, the attacks for watermarks are failed in need of about 20% reserved su btrees. So the PNW algorithm is also resis-tant to the attacks on tree node deletion. many independent usable trees. In order to survive these attacks, the watermarks have divide a tree into many subtrees. The first is that the divided subtrees must include the able semantic information and even lead to the subtree useless. This case is equivalent to the node-deletion attack and the specific an alysis is given above. The second is that the root of the subtree is a common node in the original branches. To resist this kind the array a (used in Algorithm 3) to 0, according to the usability domains of all possi-ble tree partitions. The next analysis is a repetition to the above basically. So we can conclude that the PNW algorithm is also resilience to the subtractive attacks. Additive Attacks. In the additive attack, adversary simply inserts his own watermark in the watermarked data and claim ownership. The original ownership claim can be values of the marks conflict and determining which owner X  X  marks win. The winner later. Depending upon the significance level  X  chosen for the test, it is possible not to the overlapping regions by using a low watermark ratio such as 0.1% or 0.01%. Simi-increase the density of the watermarks. The main contributions in this paper can be reduced to the following: 1) give the for-malicious attacks to tree-structured data, especially those to tree structure; 3) propose a new watermark scheme for tree-structured data based on the combination of node content as well as path information, which gives a comprehensive protection for both data generated randomly. From the results, the PNW solution shows greater resilience to the malicious attacks mentioned above. 
In the future, we would like to extend the PNW technique to also mark non-tree structure, such as graph, and also focus on marking various types of nodes. 
