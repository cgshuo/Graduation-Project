 among which there exist dependent relations. And such relations become a new chal-lenge for Grid task scheduling. Currently, the research area of Grid task scheduling is focused on meta-task and batch task [2, 3]. Although such research efforts can solve tasks which can not embody the relations of data and prior constraints. And the tradi-tional DAG task graph only shows the computing quantity, communicating quantity and prior relations of tasks which can only be used for scheduling model in homoge-property of resources, not only is the computing ability of resources different, but also ing model based on DAG task graph is not suitable to Grid environment. paper uses a Task-Resource Assignment Graph, T-RAG in short, to relate dependent source which represent that the resource is assigned to the task. The arcs of this graph represent the data transportation quantity between two dependent tasks and the inter-net bandwidth between resources assigned to such two tasks. For a T-RAG, the sched-uling length of application can be obtained according to critical path of the graph. The minimum scheduling length of T-RAG is defined as Best T-RAG (BT-RAG). Aiming at shortest scheduling length, this paper proposes a dependent tasks scheduling model which is centered on generating BT-RAG. This scheduling model transforms the dependent task scheduling problem to the problem of generating BT-RAG. Finally, the heuristic algorithm for generating BT-RAG is implemented. Compared with HEFT algorithm [5], the dependent task scheduling algorithm based on proposed heuristic algorithm shows better performance in the situation of a large body of data transported among tasks. The aim of task scheduling is to assign resource for each task of the graph in order to basic idea of list algorithm is computing we ight of task node according to computing are assigned suitable resources. (1) Select the nodes with highest prior level from the list ;( 2) select suitable resource for such task. 
Currently, many heuristic algorithms are all based on this idea such as HLF (High-est Level First), LP (Longest Path), LPT (Longest Processing Time) and CP (Critical Path) [7-9]. The differences of these algorithms are how to compute the weight of task nodes and select strategies of these tasks. 
The list scheduling algorithm is proposed in the hypothesis of there not being communication costs among tasks in the homogeneous system [10]. In the traditional parallel computing system, after a short time, each processing machine returns some results, the hypothesis is true. But in the Grid, the differences of resources capability directly. 
In order to make the traditional list scheduling algorithm suitable to Grid environ-ment, some research efforts renew the traditional algorithm such as ILHA (Iso-Level Heterogeneous Allocation) algorithm proposed by Radulescu [11]. For the difference of capability of resources, this algorithm assigns tasks proportional according to com-has its disadvantage. 
Additionally, Haluk proposes a HEFT (Heterogeneous Earliest Finish Time) algo-rithm [5] which aims at extending scheduling of homogeneous environment to hetero-geneity system. When computing weights in this algorithm, it considers both the exe-cution time of tasks and communication time of tasks. The weight of nodes (rank (n i )) can be computed as (1). rithm is not suitable to Grid computing for during computing, average computing time and average communication time is used which hides the affection brought by differ-ence of resources. 
In short, for dependent task scheduling problem in the homogeneous system, for that there does not exist difference of computing capability and communication cost, the task scheduling algorithm is centered on task graph and mainly considers the prior constraints among tasks. For the difference of computing capability and communica-rithms modeled difference of computing capability (e.g. difference of communication cost) as an average value which can not show the difference of computing capability tions among tasks and differences of resources. expression model which describes the application X  X  structure and resource require-ments; (2) Grid resource model which describes the available resources of the appli-cation;(3) The goal function which describes the target of the scheduling process. 3.1 The Description of an Application task s u and s v . Nodes expressing task and directed edges between nodes expressing the Grid application can expressed as a Task Graph (Fig.1). 3.2 Grid Application Oriented Resource Description t represent the time of resources. dard time interval is the application relative time. paper, time is the application relative time.If the minimum capability of task required M
G = (m,w G ,t G ) , there exists ( w G &gt; w Tnin ) call m be the application available resources of application T. Definition 1 Grid Application Oriented Resource Description. GR=(T,M T ,CR T ) is M , cr ij is the network bandwidth between resource i and resource j . 3.3 Goal Function In this paper, based on the expression model of tasks and resources, with task-resource mapping regarding as node, the constraint relationship between tasks as edge, the bandwidth and the data transfer amount as the edge X  X  weight, a task-resource assignment graph is composed. Definition 2 Task-Resource Assignment Graph(T-RAG). T-RAG=&lt;V,E,WV,WE&gt; pendant tasks s u and s v are deployed . A T-RAG demo is shown in figure 2. Grid T-RAG has the characteristic of AOE network. of tasks execution time and communication time. s c width between resource m i and m j . Definition 3 Longest Task Reachable Path. The execution time T(g) is the max value of any Task Reachable Path Length of g in T-RAG G, this paper, the Longest Task Reachable Path of g is defined as the max Task Reach-able Path Length of g. Definition 4 Best Task-R esource Assignment Graph. The Best Task-Resource Assignment Graph (BT-RAG) of a Grid application T(BT-RAG T )is defined as the T-RAG which X  X  Longest Task Reachable Path is the shortest of all the T-RAGs. The scheduling target of application T is obtain a BT-RAG T , so, the target function of dependent task scheduling can described as: GR T = (T,M T ,CR T ), the Grid Application T  X  X  Scheduling Goal Function is defined as: 3.4 The Scheduling Process of Dependant Grid Tasks Based on BT-RAG The Scheduling process of dependant Grid tasks based on BT-RAG is showed in figure 3. The process is divided into 4 phases: ship between tasks and resource requirement of single task is described. 
Phases (2) (3) (4) are three phases of the application runtime, and executed one by source and expected finished time of Grid application can both make the description assignment and the execution order are both determined. Phase (4) is a phase to ana-lyze the BT-RAG and generate a schedule for executing engine. 
From the process of dependent task scheduling, it is known that the core of sched-sub-process, and in next section the BT-RAG generate algorithm is introduced. Assignment Graph BT-RAG T is through enumerating. From definition of T-RAG, it is is RAG will be increased exponentially. Thus, this paper proposes an effective heuristic proposed heuristic algorithm is introduced. Definition 5 Schedulable Task and Schedulable Task Set. The parent node of task schedulable task. And the set of schedulable tasks is the schedulable task set, signified Definition 6 Task Available Resou rce and Task Available Resource Set. If task s i the task available resource set, signified as TE( s i )={m|m  X  s i }. Definition 8 Task Pre-Scheduling. The process of pre-scheduling task s i is generat-scheduling of s i . is pre-scheduled task set, signified as PS. Definition 10 Weight of Pre-Scheduled Task Node. The weight of pre-scheduled task node is defined as a sum of computing time and data transportation time of pre-selected resource m u of pre-scheduled task ps i . 
Based on the parameters as above defined, the process of generating BT-RAG T in the proposed algorithm can be described as: (1) Obtain current schedulable task set SE of TG T ; (2) Pre-scheduling each schedulable task in SE to obtain pre-scheduled task set PS; (3) Select a pre-scheduled task ps i from PS to generate a node of BT-RAG T ; (4) Delete this task node from TG T , and if the number of nodes of TG T is above 0, goto (1), else, finish. 
In the above algorithm, the pre-scheduling process of (2) and the selection of pre-scheduled task from task set all adopt the heuristic idea. In the following, the heuristic rule and heuristic algorithm used in the proposed algorithm will be introduced. 4.1 Task Pre-scheduling Rule and Algorithm algorithm. Algorithm 1. Task Pre-Scheduling Algorithm X  X reTaskSchedule Input: Schedulabe Task s i ,GR T
Output: Pre-scheduled task ps i 1 Initialize: TE= {  X  }, Temp= {  X  }; 2 According to requirements of s i , generate task available resource set TE( s i ); 3 Compute the earliest finishing time EFT( s i , m u ) of each resource m u in TE; [ s , m u ,EFT( s i , m u )] into Temp; ment in Temp. 4.2 Pre-scheduled Task Selecting Rule and Algorithm The process of selection of pre-scheduled task is selecting a pre-scheduled task from uses the computing capability and cost of data transportation as the standard for selec-based on this rule implements the selection algorithm of pre-scheduled task. Rule 2 Pre-Scheduled Task Selecting Rule. In the pre-scheduled task set PS, select BT-RAG T . Algorithm 2. Pre-Scheduled Task Selecting Algorithm--PreTaskSelect Input: PS, TG T , GR T
Output: the node of BT-RAG T 1 Compute weight of all the pre-scheduled task ps i in PS; 2 Compare v(ps i ), select the pre-scheduled task ps i =( s i , m u ) which has maximum of v(ps i ) as the node of BT-RAG; 3 Delete ps i from PS; 4 Update GR T , modify the available time interval of resource m u ; 5 Delete s i from SE; 6 Delete pre-scheduled task from PS whose pre-selected resource is m u . grid environment, scheduling algorithm library and performance evaluation module. On the platform, first we simulate the tasks and resources, then we use algorithms in the scheduling algorithm library to generate schedule schema, in the last we use per-formance evaluation module to evaluate the performances of the algorithms and schedule plans. 5.1 Simulation Environment parameters: (1) K: the number of the tasks in the task graph. K is the initial value. (2)  X  : parameter of the shape of the task graph. The height of the task graph is gen-value of  X  k , the number of the tasks on each level of the graph is generated by the (3)  X  : the ratio of data transportation to computation in the task graph. Small value transportations.
 There setup three parameters: (1) n : resources in the Grid. value a , the value of the capability of computing is a random value in [  X  (3)  X  : deviation of the band width. Deviation of the band width stands for the range of the band width of the resources, for a random value b , the value of the band width of the resources is a random value in [  X 
By changing these parameters we can simulate different grid environments and tasks. 5.2 Results and Analysis the circumstances of the same capability of computing and same bandwidth. This experiment compares the impact of data transportation between tasks on sched-bandwidths. The result shows up in figure 4. 
In figure (a) shows the relationship between the schedule length and the task num-ference between the schedule lengths of the two algorithms. 
Experiment 1 shows that in the homogeneous environment, whether there are data transportations or not, by comparing with HEFT algorithm, BT-RAGHC algorithm is able to replace the HEFT algorithm, so th e algorithm purposed by us is feasible. algorithms under the circumstances of the different capability of computing and same ban widths. This experiment compares the impact of data transportation between tasks on sched-ule length of the two algorithms under the circumstances of the different capability of computing and different band widths. The result shows up in figure 5. 
The figure (a) shows the relationship between the schedule length and the task number when the maximum difference between the capabilities and bandwidths are 25 times. In figure (b) shows the relationship between the schedule length and the task number when the maximum difference between the capabilities and bandwidths are 100 times. From the figures above we can find out that with the increase of the trans-portation, obviously the BT-RAGHC algorithm is better than the HEFT algorithm. And with larger difference between the capabilities and bandwidths such advantage is even bigger. This is mainly because in HEFT when calculating the weight value of the capabilities are not considered. With the increase of the differences between the capa-result are not good. In BT-RAGHC resources are selected and scheduled according to there actual capabilities, thus the differences between the capabilities and bandwidths don X  X  have much impact on the results. 
Experiment 2 shows that in the environment where the differences between the ca-pabilities and bandwidths are large, with much data transportations, BT-RAGHC algorithm purposed by us is able to avoid the impact of the differences. Comparing to the HEFT algorithm, BT-RAGHC algorithm is able to remarkably shorten the sched-ule length, so it is very effective. 
Experiments above show that the BT-RAGHC algorithm purposed by this paper is more adaptable. BT-RAGHC solves the problem better when the capabilities and task schedule module based on task-resource assignment graph construction is sound and effective. This paper is researched on dependent task scheduling problem. A dependent task scheduling model is proposed which is centered on task-resource assignment graph and maps the task scheduling problem into a BT-RAG generating problem. Finally, a task scheduling algorithm based on this model is implemented. Compared with HEFT algorithm, the proposed algorithm shows better performance in the situation of a large body of data transported among tasks and the scheduling working in the heterogeneity environment. 
This paper only considers the bandwidth factor. The future work will consider other two factors--Network delay and the packet loss rate X  X hich affect the schedul-ing. Additionally, in the case of invalidation or exception of resources, how to provide pothesize that in the process of execution of tasks, there are no data transported. This hypothesis limits the range of task scheduling model. In the future, we will study the dependent task scheduling model with large body of transported data during the proc-ess of execution of tasks. 
