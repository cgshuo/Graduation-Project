 In search, given a query documents are retrieved and ranked according to their relevance, which can be represented by the matching score between the query and each of the documents, referred to as semantic matching in [ 9 ]. Traditional IR models, including Vector Space Model (VSM), BM25, and Language Models for Information Retrieval (LMIR) can be viewed as matching models for search, created without using machine learning. The models work well to some extent, but they sometimes suffer from mismatch between queries and documents. matching models in search, using machine learning and click-through data. The learned models can effectively deal with mismatch and outperform traditional IR models [ 9 ]. Among the proposed approaches, learning a latent space model for matching in search becomes the state-of-the-art. The class of semantic matching models, called latent matching models in this paper, map the queries and doc-uments from their original spaces to a lower dimensional latent space, in which the matching scores are calculated as inner products of the mapped vectors. Despite the empirical success of latent matching models, the problem of query document mismatch in search is still not completely solved. Specifically, it remains hard to effectively train a matching model which works well not only for frequent queries and documents, but also for rare queries and documents, because there is not sufficient click data for rare queries and documents. This in fact belongs to the long tail phenomenon, which also exists in many different tasks in web search and data mining. One way to conquer the challenge would be to incorporate additional semantic knowledge into the latent matching models. Specifically, semantic knowledge about synonyms and categories of queries and documents can make the latent space better represent similarity between queries and documents. Suppose that  X  X acramento X  and  X  X apital of California X  are syn-onyms and it would be difficult to observe their association directly from click information(e.g., a query and the title of clicked document), because both rarely occur in the data. If we can embed the knowledge into the learned latent space, then it will help to make judgment on the matching degrees between queries and documents containing the synonyms. The technical question which we want to address in this paper is how to incorporate semantic knowledge in the learning of latent space model in a theoretically sound and empirically effective way. In this paper, as the first step of the work, we propose a novel method for learning a linear latent matching model for search, leveraging not only click-through data, but also semantics knowledge such as synonym dictionary and semantic categories. The semantic knowledge can either be automatically mined or manually created. Specifically, we reformulate the learning of latent space model by adding regularization, in which way semantic knowledge can be nat-urally embedded into the latent space and be utilized in matching. The learn-ing problem becomes maximization of the matching degrees of relevant query document pairs as well as the agreement with the given semantic knowledge. Regularization is also imposed on the linear mapping matrices as well as their product in order to increase the generalization ability of the learned model. Without loss of generality, we take Regularized Mapping in Latent Space (RMLS) [ 13 ], one of the state-of-the-art methods for query document matching, as the basic latent matching model and augment it with semantic knowledge. We improve the optimization procedure of RMLS by introducing a new regular-ization term. We further develop a coordinate descent algorithm and a gradient descent algorithm to solve the optimization problem. The algorithms can be employed in different settings and thus the learning can be generally carried out in an efficient and scalable way. We conduct experiments on two large-scale datasets from a mobile app search engine. The experimental results demonstrate that our model can make effective use of the semantic knowledge, and signifi-cantly outperform existing matching models.
 Matching between queries and documents is of central importance to search [ 9 ]. Traditional information retrieval models based on term matching may suffer from term mismatch.
 representations of documents in the document collection, and can be used to deal with query document mismatch. Latent semantic indexing (LSI) [ 3 ] is one typical non-probabilistic topic model. Regularized Latent Semantic Indexing (RLSI) [ 12 ] formalizes topic modeling as matrix factorization with regularization of norm on topic vectors and document representation vectors. Probabilistic Latent Semantic Indexing (PLSI) [ 5 ] and Latent Dirichlet Allocation (LDA) [ 2 ] are two widely used probabilistic topic models. By employing one of the topic models, one can project queries and documents into the topic space and calculate their similarities in the space. However, topic modeling does not directly learn the query document matching relation, and thus its ability of dealing with query document mismatch is limited.
 in two different spaces and are mapped into the same latent space for matching degree calculation (e.g., inner product). The learning of the mapping functions is performed by using training data such as click-through log in a supervised fashion, and thus is more effective to deal with mismatch. Partial Least Square (PLS) [ 11 ] is a method developed in statistics and can be utilized to model the matching relations between queries and documents. PLS is formalized as learning of two linear projection functions represented by orthonormal matrices and can be solved by Singular Value Decomposition (SVD). Canonical Corre-spondence Analysis (CCA) [ 4 ] is an alternative method to PLS. The difference between CCA and PLS is that CCA takes cosine as the similarity measure and PLS takes inner product as the similarity measure. Bai et al. [ 1 ] propose Super-vised Semantic Indexing(SSI), which makes use of a pairwise loss function and learns a low-rank model for matching and ranking. Wu et al. [ 13 ]proposea general framework for learning to match heterogeneous objects, and a matching model called Regularized Mapping to Latent Structures (RMLS) is specified. RMLS extends PLS by replacing its orthonormal constraints with ularization. RMLS is superior to PLS in terms of computation efficiency and scalability.
 ple, Huang et al. [ 6 ] propose a model referred to as Deep Structured Semantic Model (DSSM), which performs semantic matching with deep learning tech-niques. Specifically, the model maps the input term vectors into output vectors of lower dimensions through a multi-layer neural network, and takes cosine simi-larities between the output vectors as the matching scores. Lu and Li [ 10 ]propose a deep architecture for matching short texts, which can also be queries and doc-uments. Their method learns matching relations between words in the two short texts as a hierarchy of topics and takes the topic hierarchy as a deep neural network. 3.1 Latent Matching Model Let y  X  X  denote the objects in the spaces. In search, x and y are a query vector and a document vector, respectively. Suppose that there is a latent space intend to find two mapping functions that can map the objects in both into
L . When the two mapping functions are linear, they can be represented as x and y is then defined as inner product of L x x and L y To learn the linear mappings, we need training data that indicates the match-ing relations between the objects from the two spaces. In search, click-through logs are often used as training data, because they provide information about matching between queries and documents. Following the framework by Wu et al. [ 13 ], given a training dataset of positive matching pairs learning problem is formalized as where H x and H y denote the hypothesis spaces for the linear mappings L and L y , respectively. This framework subsumes Partial Least Square (PLS) and Regularized Mapping to Latent Structure (RMLS) as special cases. For PLS, the hypothesis spaces are confined to matrices with orthonormal rows. RMLS replaces the orthonormal assumption with sparsity constraints on L More specifically, the hypothesis spaces in RMLS become: where l xu is the u -th column vector of L x and l yv is the v -th column vector of L . The column vectors are actually latent representations of the elements in the original spaces, for instance, the terms in queries and documents. norm, and both 1 and 2 areusedinRMLS.  X  x,p and  X  y,p are thresholds on the norms.
 We point out that RMLS is not very robust, both theoretically and empiri-cally. Wu et al. [ 13 ] prove that RMLS gives a degenerate solution with larization only. Specifically, the solution of L x and L y one and all the column vectors l xu and l yv will be proportional to each other. Wu et al. [ 13 ] propose addressing the problem with further and l yv . However, this does not solve the problem, which we will explain later in this Section, Our experiments also show that RMLS tends to create degenerate solutions.
 We notice that RMLS does not penalize the case in which any x in one space matches any y in the other space, which may happen even when L sparse. To cope with the problem, we introduce additional constraints on the matching matrix L T x L y , whose ( u, v )-th element corresponds to the matching score between the u -th basis vector from X and the v -th basis vector from Specifically, we add 1 and 2 norms on L T x L y as follows, which can limit the overall degree of matching any two objects.
 prevent the model from becoming a degenerate solution, and thus make the model more robust. With all of the constraints the hypothesis spaces of L L y become: Note that H x and H y are now related to each other because of the constraints on the interaction of the two mappings.
 LMM for short, as the following optimization problem: where  X  p ,  X  p and  X  p are the hyper-parameters for regularization. and thus we employ a greedy algorithm to conduct the optimization. Let F denote the corresponding objective function. The matching term in F can be element of the empirical cross-covariance matrix C = 1 n n regularization, i.e., set  X  1 =  X  1 =  X  1 =0.
 solved as: The parameters of L x and L y are updated alternatively until convergence. convergence rate is fast for the coordinate descent algorithm. However, the cal-culations at each step in Eq. 3 involve inversion of two d -dimension matrices, which could become a computation bottleneck when the dimension of latent space is high. Therefore, we can obtained a gradient descent algorithm for LMM as an alternative 1 , specifically for the case of high-dimensional latent space. The gradient descent algorithm has less computation at each step but generally needs more iterations to converge. Therefore, one always needs to consider selecting a more suitable optimization method in a specific situation. When Eq. 3 is applied to RMLS (by letting  X  2 = 0), the updates of para-meters in each iteration become L ( t +1) x = L ( t ) L (  X  2  X  2 )  X  1 C T C. They are equivalent to conducting power iteration on each row of L x and L y independently. Consequently, all rows of L the eigenvector (with the largest eigenvalue) of the matrix (  X  will be all rows of L y . Thus, the optimal parameters L  X  of rank one. This justifies the necessity of regularization on the matching matrix L L . 3.2 Incorporating Semantic Knowledge to Latent Matching Model A latent matching model trained with the method described in the previous section can perform well for head queries and documents, since it can capture the matching information from click-through data. However, for tail queries and documents, there is not enough click-through data, and it is almost impossible to accurately learn the matching relations between them. To alleviate this prob-lem, we propose incorporating semantic knowledge of synonyms and semantic categories into the learning of the latent matching model.
 Without loss of generality, we assume that in one space the semantic knowl-edge is represented as a set of pairs of similar objects (e.g., words or tags), the objects, and s i is a scalar representing their weight. Therefore, the matching degrees of the pairs become m i =1 s i ( w (1) i ) T L T Lw We extend the latent matching model ( 2 ) by incorporating the above  X  X eg-ularization X  term, for the two spaces X and Y respectively, into the objective function of learning: The hyper-parameters  X  and  X  control the importance of semantic knowledge from the two spaces.
 Similarly, coordinate descent can be employed to solve the optimization ( 4 ). The optimal values of l xu and l yv are then given by where r x,u,v and r y,u,v denote the ( u, v )-th elements of the empirical covari-ance matrices R x and R y respectively, where R x = 1 m R nate descent algorithm for latent matching model with semantic knowledge. An alternative algorithm using gradient descent can also be obtained 3.3 Acquisition of Semantic Knowledge Synonyms are obviously useful semantic knowledge for our matching task. A general dictionary of synonyms such as WordNet is usually not suitable for a real-world setting, however. The reason is that synonyms usually heavily depend on domains. Here we adopt an algorithm for mining synonym pairs by exploiting click-through data. Specifically, we first try to find clusters of queries from a click-through bipartite graph (cf., [ 7 ]). Queries in one cluster are regarded as synonyms. Next, for each cluster, we extract pairs of terms sharing the same context as candidates of synonym pairs (cf., [ 8 ]). Here the context refers to the surrounding text of a term in the query. For example, given a query  X  X ownload 2048 apk X , the context for term  X 2048 X  is  X  X ownload * apk X , where  X * X  is the wildcard character. Then we go through all the clusters and count the numbers of occurrences (called support) for all the candidate pairs. The candidate pairs with support above a certain threshold are chosen as synonym pairs. Algorithm 2 shows the detailed procedure.
 and w (2) x,i are the i -th pair of synonyms. s x,i is the corresponding weight for the pair, which is computed as the logistic transformation of the support. The knowledge about the synonym set for the query domain ( X ) is formalized as
In addition to synonyms, we also utilize categories or tags in a taxonomy as semantic knowledge for the document domain. For example, in our experiment of the mobile app search, apps are given various tags by users. An app named  X  X iny racing car X  is tagged  X  X ction, mario, racing, sports, auto, adventure, racing track X . For each tag, we have a list of associated documents. We represent the title of each document as a tf-idf vector and calculate the average vector of the tf-idf vectors for each tag. We select the top k terms in the average vector and view them as the relevant terms to the tag. A set of  X  X ag-term X  pairs is then obtained from all the tags and their relevant terms, and it is denoted as s is the corresponding average tf-idf value. We can formalize the knowledge for the document domain ( Y )as i j s y,ij ( w (1) y,i ) T function of learning of latent matching model. 4.1 Experimental Setup We take app search as example and use data from an app search engine. Each app is represented by its title and description and can be viewed as a document. Click-through logs at the search engine are collected and processed. We create two datasets from the click-through logs, one containing one week data and the other containing one month data. Table 1 reports some statistics of the two datasets. Each dataset consists of query-document pairs and their associated clicks, where a query and a document are represented by a term-frequency vector and a tf-idf vector of the title, respectively. The queries and documents are regarded as heterogeneous data in two different spaces, because queries and documents have different characteristics.
 different from that of training datasets, and take them as two test datasets. to the frequencies of them. In the following sub-sections, performance on the whole random test set as well as the head and tail subsets will be reported. For each query in the test sets, we collect top 20 apps retrieved by the app search engine and then label the query-app pairs at four levels of matching: Excellent, Good, Fair, and Bad.
 positions 1, 3, 5, 10 are used. We choose the conventional IR model of BM25 (with the parameters tuned for best performance in the training set), and two latent matching models of PLS (Partial Least Square) and RMLS (Regularized Map-ping to Latent Structures) as the baseline methods. Our basic model is denoted as LMM (Latent Matching Model) and our augmented models are denoted as LMM-X where X stands for the type of incorporated semantic knowledge. 4.2 Experimental Results Latent Matching Model: We conduct a series of experiments to test the performances of LMM, LMM-X and the baseline models. For RMLS, LMM, and LMM-X, the results with latent dimensionalities of 100 and 500 are reported. For PLS, only the performance with latent dimensionality of 100 is reported, due to its scalability limitation.
 through data, evaluated on the test tests: random queries, head queries and tail queries respectively. From the results, we can see that: (1) all the latent match-ing models significantly outperform the conventional BM25 model in terms of all evaluation measures; (2) among the latent space models with the same dimen-sion, LMM achieves the best performances in many cases. The improvements of LMM over BM25 and RMLS are statistically significant (paired t-test, p-value &lt; 0 . 05); (3) the improvements of LMM over the other baseline models are larger on tail queries than on head queries, which indicates that LMM can really enhance matching performance for tail queries; (4) for LMM, the performance increases as the dimensionality of latent space increases. Note that PLS requires SVD and thus becomes practically intractable when the dimension is large. In that sense, RMLS and LMM exhibit their advantages over PLS on scalability. Table 3 show the comparison results of models trained using one-month click-though data, evaluated on the tested random queries, head queries and tail queries respectively, which follows the same trends as that of one-week data, especially on tail queries.
 Incorporating Semantic Knowledge: Next, we test the performances of the LMM-X models which incorporate semantic knowledge into the model. The LMM-X models have the ability to leverage multiple sources of semantic knowledge by adding regularization terms to the objective function. We consider two methods of acquiring and utilizing semantic knowledge. In the first method we mine and use synonym pairs from the click-through logs, In the second method we collect and use over 50,000 tags in the app search engine, which are described in 3.3. We conduct experiments using LMM model and the two types of knowledge. We summarize the results in Table 4 for one-week data and Table 5 for one-month data evaluated on random queries, head queries and tail queries respectively. For each training dataset, we first separately train the LMM model augmented with the synonyms dictionary and the tag-term pairs, denoted as LMM-Synonyms and LMM-Tags, respectively. Then we train the LMM model augmented with both types of knowledge, denoted as LMM-Both. From the results we can see: (1) with knowledge embedded, the performances of the LMM model can be con-sistently improved; (2) the improvements of LMM-Both over LMM are statisti-cally significant (paired t-test, p-value &lt; 0 . 05) in terms of most evaluation mea-sures; (3) more significant improvements are made on tail queries than on head queries; (4) the improvements of semantic knowledge augmentation are slightly less when the latent dimensionality is high (500) than when it is low (100). rating synonym dictionary. The latent representations of some randomly selected words are plotted on a 2-D graph using the multidimensional scaling technique, in Fig. 1 . By comparing the distributions of words in Fig. 1 (a) and (b), we can clearly see that similar words are clustered closer in LMM-Synonyms than in LMM. This clearly indicates that knowledge about synonyms can be effectively incorporated into LMM-Synonyms and thus the model can further improve matching. For the latent spaces of LMMs learned with and without incorpo-rating category tags, we observe a similar phenomenon.
 cases, we find that the semantic relations embedded in LMM-X can indeed improve relevance ranking. For example, the terms  X  X est X ,  X  X ost X ,  X  X ardest X , and  X  X trongest X  are mined as synonyms from the log, and these terms are clus-tered together in the latent space induced by LMM-Synonyms. In search, for the query of  X  X est game in the history X , documents about  X  X ost popular game X ,  X  X ardest game X  and  X  X trongest game X  are promoted to higher positions, which enhances the relevance as well as the richness of search result. However, there are also some bad cases, mainly due to noises in the synonym dictionary. For exam-ple, in one experiment our mining algorithm identifies  X  X oogle X  and  X  X aidu X  as synonyms. Then for the query of  X  X oogle map X , a document about  X  X aidu map X  is ranked higher than a document about  X  X oogle earth X . Therefore, improving the quality of the mined semantic knowledge is one issue which we need to address in the future. In this paper, we have studied the problem of latent semantic matching for search. We have proposed a linear latent semantic model that leverages not only click-through data, but also semantic knowledge such as synonym dictio-nary and category hierarchy. The semantic knowledge is incorporated into the model by imposing regularization based on synonym and/or category informa-tion. We employ two methods to acquire semantic knowledge. One is to mine synonyms from the click bipartite graph, and the other is to utilize categories of documents. We have developed a coordinate descent algorithm and a gra-dient descent algorithm to solve the learning problem. The algorithms can be employed depending on the settings. We have conducted experiments on two large-scale datasets from a mobile app search engine. The experimental results demonstrate that our model can make effective use of semantic knowledge, and significantly outperform existing matching models.

