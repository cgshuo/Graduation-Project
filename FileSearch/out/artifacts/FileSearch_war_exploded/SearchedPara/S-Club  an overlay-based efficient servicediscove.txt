 REGULAR PAPER Chunming Hu  X  Ya n m i n Z h u  X  Jinpeng Huai  X  Yunhao Liu  X  Lionel M. Ni Abstract Information service plays a key role in grid system, handles resource discovery and management process. Employing existing information service ar-chitectures suffers from poor scalability, long search response time, and large traffic overhead. In this paper, we propose a service club mechanism, called S-Club, for efficient service discovery. In S-Club, an overlay based on existing Grid Information Service (GIS) mesh network of CROWN is built, so that GISs are organized as service clubs. Each club serves for a certain type of service while each GIS may join one or more clubs. S-Club is adopted in our CROWN Grid and the performance of S-Club is evaluated by comprehensive simulations. The results show that S-Club scheme significantly improves search performance and outperforms existing approaches.
 Keywords Grid computing  X  Information service  X  CROWN  X  Service discovery  X  Service club 1 Introduction In the past few years, the grid computing paradigm has emerged, promising to en-able resource sharing and collaborating across multiple domains [ 3 , 9 , 10 , 12 , 13 ]. In the research community, there has been an intense interest in designing and studying of such system. The main goal of our key project, CROWN (China R&amp;D Environment Over Wide-area Network), is to empower in-depth integration of re-sources and cooperation of researchers nationwide and worldwide. CROWN was started in late 2003. Up until mid 2005, eight universities and institutes across four cities in China have joined CROWN, with each contributing 50 X 100 computers. And more than 25 universities and institutes are invited to join CROWN Grid by the end of 2005. Lots of applications in different domains have been deployed into CROWN Grid, such as gene comparison in bioinformatics, climates pattern prediction in environment monitoring, etc. The long-range goal for CROWN is to integrate home user resources in a fully decentralized way with a robust, scal-able grid middleware infrastructure. Recently, with the evolution of Web services, the service-oriented architecture has become a significant trend for grid comput-ing, with OGSA/WSRF as the de facto standards [ 11 , 21 ]. CROWN has adopted the service-oriented architecture, connecting large amount of services deployed in universities and institutes.
 desired services. To this end, grid information services (GISs) are deployed to provide dynamic information of services. In general, there are one or multiple GISs deployed in each domain to provide information about services available within the domain. With the rapid growth of CROWN, more domains join and therefore there will be numerous GISs. Different GISs are connected according to different relations, such as affiliation and cooperation . The GISs comprise a mesh network according to predefined configurations. The evolvement of the mesh network is free and out of our control. To search for services across the existing mesh network, however, suffers from poor performance, i.e., long response time and huge traffic overhead. When users want to find desired services, they have no choice but to flood search request to all of the GISs in the grid network. puting. Some centralized approaches, such as MDS-1 [ 8 ], Hawkeye [ 15 ]andR-GMA [ 6 ], have been designed for small-scale grid systems. In these approaches, only one centralized server is deployed to provide information service. They have advantages of simplicity and ease to use, but as the scale of grids is large, they suffer from single-point-of-failure and low scalability. In large-scale grid systems, a large number of GISs are deployed. To provide information service for such grid systems, several solutions, such as MDS-2 [ 5 ] and GAIS [ 16 ], have been proposed. Most of the solutions have adopted a hierarchical architecture to organize GISs. To search services over the GISs, however, we have to traverse a partial of the hierar-chical architecture, which could cause long latency as well as huge search traffic. In summary, no existing approaches can provide efficient information service for CROWN Grid.
 service discovery, optimizing search performance in the GIS mesh network. The basic idea of S-Club is to build an overlay over the existing GIS mesh network of CROWN. Based on the observation that the end users always want to find services by a certain type or catalogue, an overlay network on existing GIS mesh network is built. We use MST as the overlay topology to get the minimum cost when we transmit messages in the overlay. In S-Club scheme, GISs are organized as service clubs. Each club serves for a certain type of service while each GIS may join one or multiple clubs. When a user wants to find a service, it first issues a query in clubs fails, the query will flood over the whole topology. Our later experimental results will show that S-Club significantly improves search response time as well as reduces traffic overhead incurred by search.
 overlay network is given. In Sect. 3 , some related work is introduced. Section 4 presents the design of S-Club and Sect. 5 discusses the implementation of S-Club in Resource Locating and Descripting Service (RLDS), the information service of CROWN Grid. Section 6 presents simulation methodology and the evaluation of the performance of S-Club. Section 7 concludes our work. 2 Overlay network Overlay technique is an effective way to support new applications as well as pro-tocols without any changes in underlying network layer. The basic idea of the overlay network is to build a new network over existing physical network nodes according to some selected logical rules. With the application of new protocols for the added upper network, the performance can be optimized. A typical overlay network is consisted of some overlay nodes and some connections between the overlay nodes, called overlay links. The overlay nodes are selected from the un-derlying physical network, while the overlay links are always composed of one or more physical links. The message passing between overlay links must be mapped into the physical layer, as shown in Fig. 1 . For example, when overlay node ON1 sends a message to ON2, the message will be transmitted along the path with small arrow.
 silient Overlay Network (RON) [ 2 ], Service Overlay Network (SON) [ 7 ], and OverQoS [ 23 ]. For example, RON uses overlay network to increase the reliability of Internet routing protocol by providing better overlay paths when default Inter-net paths get fault. SON purchases bandwidth with certain quality of service (QoS) guarantees from individual network domains via bilateral service level agreement to build an end-to-end service infrastructure on top of existing data transport net-work.
 basic procedure of overlay-based network enhancement technique. First, several physical nodes should be selected according to a set of selected rules; second, rated physical nodes into a graph with specified topology; third, a routing protocol should be designed to exchange messages alone the overlay network.
 ogy to connect all the overlay nodes. There several kinds of topologies which are widely used, such as fully-mesh, K-minimum spanning tree (KMST), topology-aware-KMST, and adjacent connection, etc. Li and Mohapatra [ 18 ] did a study on the impact of topology on overlay routing service. Result shows that the overlay topology has significant impact on the overlay routing in terms of routing perfor-mance and routing overhead. Moreover, the physical topology information may help a lot when constructing an efficient overlay topology. 3 Related work Monitoring and Directory Service (MDS-1) [ 8 ] is the information service of early Globus project [ 9 ]. Data in MDS-1 is organized as a directory information tree. Such a centralized solution may suffer performance bottleneck and single-point-of-failure.
 source Information Service (GRIS) and an aggregate directory component Grid Index Information Service (GIIS) in a service-oriented architecture [ 21 ]. It is a hierarchical infrastructure where each GIIS defines a scope within which search operations taking place, allowing users within a VO to perform efficient search. Response time of querying GIIS grows quickly with the increment of number of GRIS [ 26 ].
 resource in a global resource pool. It uses Condor ClassAd language to identify resources, and ClassAd Matchmaking to find available resources. Hawkeye uses a single component Manager , managing multiple Monitoring Agents . User first asks Manager for the address of one agent, then sends query to it. It is a fixed two-level hierarchical architecture and the Manager may become the single point of failure. GMA [ 24 ]. It is based on relational data model. Producers push resource informa-tion to RDBMS of the centralized GMA Registry. Consumers query the Registry to find out what types of information are available and to locate the corresponding Producers. It is also a centralized architecture.
 forms to flat and dynamic architecture. It introduces a P2P searching mechanism to exchange VO information between GISs. If the VO does not exist within the GAIS instance, the GAIS attempts to look it up with other GAIS instance using a flooding mechanism.
 a service-oriented grid framework focusing on QoS guarantee and resource reser-vation. It is used primarily as a registry to publish QoS attributes of services, and subsequently to search for services based on QoS attributes. In a specified service grid environment, only one UDDIe server is deployed and used to handle service registration and discovery requests.
 framework for wide area network. EDS adopts a hierarchical architecture to orga-nize multiple EDS servers and providing QoS aware service discovery.
 content location in peer-to-peer file-sharing applications such as Gnutella , Freenet and Napste . Iamnitchi et al. [ 17 ] analysis the correlations between content location in peer-to-peer environment and resource/service discovery in grid environment and proposed a peer-to-peer approach to resource location in grid environment. tecture with an unstructured topology. Each GIS keeps the information of services registered to it. To improve the performance, overlay is constructed dynamically and may be changed constantly with the self-organizations of service clubs. 4 Design of S-Club In this section, we first give an overview of our approach, S-Club, an overlay-based GIS topology protocol and then discuss on why a service has a certain type from the perspectives of both application requirement and implementation details. Third, we present service clubs construction in a decentralized manner, as well as dynamic club maintenance. Finally, we explain how users search for services with the help of service clubs built on top of the existing GIS mesh network. 4.1 Overview of S-Club The basic idea of S-Club is to build an overlay over the existing GIS mesh network. In such an overlay, GISs providing the same type of services organized into a service club. An example of such a club overlay is shown in Fig. 2 , where nodes C, D, E, G form a club. A search request could be forwarded to the corresponding club first such that search response time and overhead can also be reduced if the desired result is available in the club.
 be maintained dynamically because new GISs may join and some existing GISs may leave. Also, it is possible that some types of services become less popular after the club is built. Therefore, we have to be careful on the trade-off between not uniformly distributed. Some types of services can be very popular and others may not. When/how clubs are constructed/destroyed will be key issues in S-club scheme. 4.2 Service type In a grid application, a service is always deployed onto different hosts, i.e., there are several service instances which are deployed and distributed in the whole Grid environment. When a user wants a kind of service, it always wants to obtain a list of all (or part) of the available services in the grid. Service type is one of the important properties that the user has to specify before a search is performed. It can be either quite general or very specific.
 isting works on semantic grids and semantic web services focus on building uni-fied service ontology to enable service classification with semantics. Recently, OGSA/WSRF is evolving into the de facto standards for grid computing. OGSA allows us to define service templates formally, which introduces a standard inter-face definition mechanism for grid services to provide uniform service semantics. A service template is defined by specifying the required port types. Anyone who wants to provide this type of service can implement such service template. A ser-vice type is characterized by one or more specified port types. Another advantage of the template-based service type is that, if two service instances share the same type, they can be replaced smoothly without changing the code from client side. inition of service types are published in an information server for access by the public. Service providers who have common interest can implement and deploy services according to the type information obtained from the public server. 4.3 Selection of overlay topology To connect all the club members, we have to find out a proper topology with acceptable reliability and minimum service discovery cost. At the same time, a feasible distributed topology creation algorithm is also necessary for the selected topology. At this point, we choose the minimum spanning tree (MST) as the topol-ogy of S-Club.
 make sure that all the overlay nodes are connected; second, MST will get the min-imum cost when we transmit messages in the overlay. Secondly, although there is only one available link between any two linked overlay nodes, the absence of any node may divide the topology into two disconnected sub-graph and cause the partition problem, which makes the topology unstable. However, considering the scenario of S-Club, we always choose the RLDS as the S-Club overlay node. In a production grid, we can assume that the RLDS nodes are always severed by some stable grid nodes. So the overlay nodes of S-Club may have better reliability and availability and lower fault possibility than other nodes. Thirdly, a simple failure recovery algorithm (see Sect. 4.5 for details) may bring an acceptable reliability for MST topology. Li and Mohapatra [ 18 ] discuss the performance of different topology including fully-mesh, MST, 2MST, T2MST by considering the perfor-mance and reliability of the different topologies. Result shows that MST has the best per-node routing overhead and best recovery path hop penalty and acceptable failure recovery ratio when the node failure probability is below than 1% . And finally, MST has lot of distributed creation algorithm [ 1 ], which can be used in S-Club scenario without further modification. Based on these considerations, we choose MST as the overlay topology in the S-Club scenario. 4.4 Club construction In S-Club scheme, each GIS maintains usage frequency ( UF ) of registered service types locally. Given a GIS, UF of a service type, T ,isdefinedby where N ( S ) denotes the number of invocations on services of type T ,and M is the total number of invocations of services registered at this GIS. We require every service to report to the GIS where it is registered once it is invoked by users or in a periodical way. In general, UF(T) at a GIS indicates how often services of type T are invoked recently, relative to other types at the same GIS.
 process simultaneously. The asynchronism among GISs helps to avoid possible clubs for those service types which have highest UFs but not have a club yet. One key issue here is for how many service types the GIS should establish clubs. We introduce frequency threshold, denoted as  X  , ranging from 0 to 100. Each GIS tries to establish clubs for the top  X  % of the service types.
 there are in total T service types, and I GISs. We assume service types are uni-formly distributed among GISs. Then the expected number of exclusive types in a single GIS is [ T I ] . On average, each GIS can build at most [ T I ] X   X  % clubs. Therefore, the total number of clubs is bounded by ( [ T I ] X   X  % )  X  I .Alarger  X  results in more clubs. In S-Club,  X  is tuneable so that a good  X  can be selected for different network conditions.
 has not been established as a club, it attempts to initiate club establishing process. Forexample,ifGIS G tries to establish a club for type B . G floods an SETUP-REQUEST announcement for type B throughout the mesh network, consulting the other GISs whether to set up a club for type B . On receiving the announcement, a GIS with type B services first checks its local table. If UF(B) at this GIS is also within top  X  %, it replies  X  YES  X  X o G , otherwise, it replies with  X  NO  X . After a certain time, G gets all the replies, and then it calculates the support ratio  X  , where N(YES) is the number of YES replies, and N(NO) is the number of NO replies. In S-Club, we set a construction threshold .If  X  is greater than the thresh-old, G will build a club for type B ; otherwise, G gives up.
 to those GISs which replied previously and now club members. The SET-UP an-nouncement encloses the list of all members, and so we get a virtual complete graph, as illustrated in Fig. 3 a. The cost in this graph is probed by each member independently. The next issue is how these members are connected. The objective is to make the club robust while introducing as less maintenance overhead as pos-sible. In S-Club, we build a minimum spanning tree (MST) among club members. We employ the algorithm proposed in Abdel-Wahab et al. [ 1 ], where a collection of disjoint trees spanning all the group members is maintained. Every tree inde-pendently expands by joining the closest tree, until all nodes are connected in a single tree. It is proved that given a graph with n nodes, the distributed algorithm for constructing MST takes O ( n ) time. Using this method, a MST among all mem-bers is created ass shown in Fig. 3 b. G then sends a NEW-CLUB announcement to all GISs with full list of club members. 4.5 Club maintenance Clubs should be dynamically maintained. On one hand, GISs themselves are dy-namic. Some may become unavailable because of hardware failure. On the other hand, services registered in a GIS are also dynamic. Some services may be newly registered at the GIS, and existing services could be removed. The consequence is that GISs need to join or leave corresponding clubs.
 from single-point-failure. One node leaving the club may lead to topology discon-nection. To solve this problem, we employ a club member management protocol similar to Narada [ 4 ]. To this end, each club member maintains a full list of all the members, and every member X  X  list needs to be updated when a new member join or an existing member leaves. To disseminate the changes, we require that each member periodically generate a refresh message with monotonically increasing sequence number, which is propagated along the MST. On receiving a refresh message from neighbor j ,member i updates its table according to the algorithm in Chu et al. [ 4 ].
 there exists a club for this type. If yes, it sends a JOIN announcement using the address of the club, which will be flooded within the club. Each club member replies to the new GIS so that the GIS can get the list of the club members. Then the joining member selects a few club members from the list and sends them mes-sages requesting to be added as their neighbor. It repeats the process until it gets a response from one of them. Having joined, the member then starts exchanging refresh messages with its neighbors and propagates the changes of new member joining. Obviously, this method cannot assure the member topology to be a MST, but a spanning tree.
 ning tree, linking all its children to its parent. These changes will also be propa-gated through the exchange of refresh message to the entire club.
 each member receives refresh messages from its neighbor periodically. If a mem-ber does not receive refresh message from its neighbor for a certain period of time, the direct neighbor may be failed. The member sends an announcement to find the neighbor of the failed node along the underlying mesh network. Thus, abrupt fail-ure can be detected and the partition of spanning tree can be repaired. Changes can also be propagated through the exchange of refresh messages.
 ogy of the club members (i.e., the spanning tree) degraded. To rebuild the MST, the root need to initiate the distributed MST algorithm periodically and propagates the newest member through another NEW-CLUB announcement.
 of the members from the list as the address of the club. Once this member leaves the club, the GIS may ask their neighbors in underlying mesh network to get an-other member as the new address. With the periodically reconstruction of member topology, this GIS can refresh their club address constantly. Consequently, any GIS can find an available member as the entry to each service club. 4.6 Club deconstruction It is possible that a previously popular service type become unpopular. If the ser-vices of this type are rarely requested, the club maintenance cost may exceed the benefit the club brings. Therefore, in this case, we should close the club. Moreover, closing unpopular clubs allows us to dynamically control the number of clubs in an appropriate level.
 club. Each GIS periodically starts the deconstruction process. Once the process is started, the GIS will try to close clubs for those service types whose UF s are out of the top  X  %. We set the Deconstruction Threshold as  X  . If close support ratio  X  is greater than  X  , G will close the club; otherwise, the club remains. If G de-cides to close the club, it floods a CLOSE announcement throughout the network. For members of this club, they remove relevant club connections. And, for normal GISs, they remove the club record. 4.7 Service search with S-Club Here, we discuss how users search services with the availability of service clubs. To simplify our discussion, we assume a user simply wants to get the list of avail-able services of a specific type. However, the search model can be safely extended to more general cases; for example, the user can specify more constraints based on service properties.
 On receiving a search request for a specific service type, the GIS checks locally whether there has been a club for this type. If yes, the GIS forwards the request to the club, which will be flooded within the club only. Each club member then returns the information of the relevant services to the user. Since the request is strictly restricted within the club and no irrelevant GISs is involved, much traffic is saved. If there is no club for this type, however, the GIS has no choice but to flood the search request throughout the mesh network.
 But since it has at least one neighbor in the underlying mesh network, it can ask one of its neighbors for the information of existing clubs. Namely, it simply copies the information of clubs from its neighbor.
 viously, the address of a club is denoted by two members in this clubs. For one GIS, the problem arises if the two GISs become unreachable simultaneously. The GIS cannot reach the club when a user wants to search services of this type. In this case, we require that it firstly copy the address (i.e., IPs of two members) of the club from one of its neighbor. Next, it sends an ECHO announcement to the club, for which each club member will reply with its own IP. Then, with the list of club members, the GIS is able to select two best members in terms of round-trip time as the address of the club. 5 RLDS: an S-Club implementation in CROWN environment According to the protocol and search mechanism described above, we designed a modular grid information service architecture for our CROWN Grid, called Re-sources Locating and Describing Service (RLDS), which allows us to easily test and modify each component separately. This RLDS service is a WSRF service implemented in Java in order to take advantage of great number of code libraries available. Another advantage is this service can be deployed into a Globus Toolkit 4.0 compliant service container with little changes. The architecture of a RLDS (see Fig. 4 ) is constituted by the following basic modules. 1. Message Listener and Message Queue: This is the interface part of RLDS 2. Message Dispatcher: A module dispatches the message object in the queue to 3. Session Management: Maintain the search session. The RLDS will create a 4. Club Management Module: Manages all the service clubs which this RLDS 5. Club Search Module: Forward query messages in the overlay network defined 6. Local Search Module: Maintain all the information and registered services, 7. Logging Module: Log all the events into database. Use frequency is calculated 6 Performance evaluation To evaluate the performance of our proposed S-Club, we designed a simulation tool, in which a certain number of GISs is connected selectively to form an under-lying mesh network. 6.1 Simulation methodology To simulate the service discovery process, first we generate the underlying GISs topologies, and distribute service information into each GIS node. When simula-tion runs, a certain number of service discovery request R ( Ts , N ) is generated and sent to one of a GIS node, while Ts is the service type identifier, and N is the number of available services user wants to get. The request with the address of the first GIS node is propagated along the GISs network, the GIS which has available services of type Ts sends reply to the first GIS node. Finally, the first GIS node sends an available service list of N services to end user as the response.In studying the performance of our algorithms, we compare it to the MDS-like System with-out S-Club mechanism, which using the discovery protocol of MDS2. If a MDS server cannot answer the user request, it sends the request to its direct neighbors. i.e., request is flooded in the mesh network to find available services. ate topologies based on the AS Model.We generate 10 network topologies with 20,000 nodes. Since the GISs is deployed into some of nodes over internet, the mesh network topologies are generated with a number of nodes ranging from 100 to 1000 selected from the 20000 physical network topologies. We generate the GISs mesh topologies with average two edge connections, means there are four logical neighbors for each GIS. The bandwidth between every two GIS nodes is calculated according to the shortest path along the physical network topologies. cess, and the generation interval of requests is therefore exponentially distributed. In our simulation, each GIS node receives 6.42 queries per minute, which is cal-culated from the observation data shown in Smith et al. [ 22 ], i.e., 143,446 oper-ations, including 7710 query operations, were received by a single MDS server during 20 h.
 Distribution, which is defined as the probability of finding a certain type of ser-vice. Our observation in CROWN Grid shows that some types of service is much more popular than others. In our simulation, we assure about 70% of requests are searching for 20% type of services. Percentage of Requested Services (PRS) is used to control the required length of the available list. For example, if there are totally m services of type T deployed in the grid, a query request with PRS = k % means a list with at least m  X  k % available services should be returned. PRS dur-ing the simulation is ranging from 10% to 100%. 6.2 Metrics The kernel function of GISs is to answer the user request like  X  X here are available services of type A  X . In order to evaluate S-Club, we use following three perfor-mance metrics: average response time, total traffic overhead, and optimization ratio.
 users. We define response time of a query as the time period from when the query from end user is received by the first GIS node, and until when this node collects all the response results from other GISs and meets the end user X  X  demands. among GISs to answer the query. If S-Club is adopted, the traffic overhead of cre-ating, maintaining and deleting is also included. We have traced the real message in CROWN Grid, in which GIS is wrapped as an OGSA Grid Service using SOAP messages. Including the head of SOAP message, the size of all related messages is ranging from 1500 to 3000 bytes.
 to MDS-like system. The optimization ratio of average response time is defined as follows: while ART M is the average response time of MDS-like system and ART S is the average response time of S-Club system.
 6.3 Simulation result analysis In our first simulation, we study the effectiveness of frequency threshold  X  in S-Club. Figure 5 shows the frequency threshold affects the total number of clubs remarkably. In Figs. 6 and 7 , we see that with the increment of  X  , total traffic and average response time are not always improved. Intuitively, too many clubs may bring much maintenance overhead. There exists a best value of  X  to maximize the benefit of S-Club. For example, Fig. 6 shows that in this simulation, 0.5 is the best choice of  X  . In Fig. 8 , the parameter p stands for the percentage of requested services. We see that with the time elapses, average response time of all MDS-like systems is almost a constant while the average response time of S-Club systems is decreasing gradually and finally comes to a stable state. Figures 9 and 10 plot the benefit S-Club mechanism brings with the change of parameter p with a GIS network of 400 nodes. With the increment of p , total traffic and average response time increase together. We find that S-Club reduces the total traffic by 46% and average response time by around 7 X 26%.
 simulate three groups with scale of 100, 200 and 400 GIS nodes and compare with the MDS-like system. The simulation results in Figs. 11 and 12 show that S-Club reduces total traffic and average response time significantly. For example, when n = 200 and total number of requests is 60,000, S-Club reduces traffic by 55% and average response time by 27%.
 work increases. As illustrated in Fig. 13 , we simulate another three groups with scale of 100 X 1000 GIS nodes and comparison the average response time to MDS-like system. With the number of GIS servers increases, S-Club gives more benefit on average response time. Figure 14 shows the optimization ratio of average re-sponse time. Having 1000 GIS nodes, S-Club reduces about 27 X 35% response time.
 7 Conclusions Our key project, CROWN, holds the ambitious goal to integrate nationwide and worldwide valuable resources. Efficient information service is fundamentally im-portant in CROWN. In this paper, we proposed the S-Club scheme to improve the performance of information service in CROWN. We build an overlay over the existing mesh network of GISs. For those popular services, we establish service clubs, in which GISs providing the same type of services are closely connected. When a user wants to search a service, the search request is effectively restricted within the small club. Simulation results demonstrate that S-Club significantly improves service search performance and outperforms the existing approaches. S-Club has been successfully implemented in our CROWN Grid environment. References
