 Given the need for high-quality dependency parses in applications such as statistical machine transla-tion (Xu et al., 2009), natural language generation (Wan et al., 2009), and text summarization evalu-ation (Owczarzak, 2009), there is a corresponding need for high-quality dependency annotation, for the training and evaluation of dependency parsers (Buchholz and Marsi, 2006). Furthermore, pars-ing accuracy degrades unless sufficient amounts of labeled training data from the same domain are available (e.g., Gildea, 2001; Sekine, 1997), and thus we need larger and more varied anno-tated treebanks, covering a wide range of domains. However, there is a bottleneck in obtaining an-notation, due to the need for manual interven-tion in annotating a treebank. One approach is to develop automatically-parsed corpora (van No-ord and Bouma, 2009), but a natural disadvantage with such data is that it contains parsing errors. Identifying the most problematic parses for human post-processing could combine the benefits of au-tomatic and manual annotation, by allowing a hu-man annotator to efficiently correct automatic er-rors. We thus set out in this paper to detect errors in automatically-parsed data.

If annotated corpora are to grow in scale and re-tain a high quality, annotation errors which arise from automatic processing must be minimized, as errors have a negative impact on training and eval-uation of NLP technology (see discussion and ref-erences in Boyd et al., 2008, sec. 1). There is work on detecting errors in dependency corpus annota-tion (Boyd et al., 2008), but this is based on finding inconsistencies in annotation for identical recur-ring strings. This emphasis on identical strings can result in high precision, but many strings do not re-cur, negatively impacting the recall of error detec-tion. Furthermore, since the same strings often re-ceive the same automatic parse, the types of incon-sistencies detected are likely to have resulted from manual annotation. While we can build from the insight that simple methods can provide reliable annotation checks, we need an approach which re-lies on more general properties of the dependency structures, in order to develop techniques which work for automatically-parsed corpora.

Developing techniques to detect errors in parses in a way which is independent of corpus and parser has fairly broad implications. By using only the information available in a training corpus, the methods we explore are applicable to annota-tion error detection for either hand-annotated or automatically-parsed corpora and can also provide insights for parse reranking (e.g., Hall and Nov  X  ak, 2005) or parse revision (Attardi and Ciaramita, 2007). Although we focus only on detecting errors in automatically-parsed data, similar techniques have been applied for hand-annotated data (Dick-inson, 2008; Dickinson and Foster, 2009).

Our general approach is based on extracting a grammar from an annotated corpus and com-paring dependency rules in a new (automatically-annotated) corpus to the grammar. Roughly speak-ing, if a dependency rule X  X hich represents all the dependents of a head together (see section 3.1) X  does not fit well with the grammar, it is flagged as potentially erroneous. The methods do not have to be retrained for a given parser X  X  output (e.g., Campbell and Johnson, 2002), but work by com-paring any tree to what is in the training grammar (cf. also approaches stacking hand-written rules on top of other parsers (Bick, 2007)).

We propose to flag erroneous parse rules, using information which reflects different grammatical properties: POS lookup, bigram information, and full rule comparisons. We build on a method to detect so-called ad hoc rules, as described in sec-tion 2, and then turn to the main approaches in sec-tion 3. After a discussion of a simple way to flag POS anomalies in section 4, we evaluate the dif-ferent methods in section 5, using the outputs from two different parsers. The methodology proposed in this paper is easy to implement and independent of corpus, language, or parser. We take as a starting point two methods for detect-ing ad hoc rules in constituency annotation (Dick-inson, 2008). Ad hoc rules are CFG productions extracted from a treebank which are  X  X sed for spe-cific constructions and unlikely to be used again, X  indicating annotation errors and rules for ungram-maticalities (see also Dickinson and Foster, 2009).
Each method compares a given CFG rule to all the rules in a treebank grammar. Based on the number of similar rules, a score is assigned, and rules with the lowest scores are flagged as poten-tially ad hoc. This procedure is applicable whether the rules in question are from a new data set X  X s in this paper, where parses are compared to a training data grammar X  X r drawn from the treebank gram-mar itself (i.e., an internal consistency check).
The two methods differ in how the comparisons are done. First, the bigram method abstracts a rule to its bigrams. Thus, a rule such as NP  X  JJ NN provides support for NP  X  DT JJ JJ NN, in that it shares the JJ NN sequence. By con-trast, in the other method, which we call the whole rule method , 1 a rule is compared in its totality to the grammar rules, using Levenshtein distance. There is no abstraction, meaning all elements are present X  X .g., NP  X  DT JJ JJ NN is very similar to NP  X  DT JJ NN because the sequences differ by only one category.

While previously used for constituencies, what is at issue is simply the valency of a rule, where by valency we refer to a head and its entire set of arguments and adjuncts (cf. Przepi  X  orkowski, 2006) X  X hat is, a head and all its dependents. The methods work because we expect there to be reg-ularities in valency structure in a treebank gram-mar; non-conformity to such regularities indicates a potential problem. 3.1 An appropriate representation To capture valency, consider the dependency tree from the Talbanken05 corpus (Nilsson and Hall, 2005) in figure 1, for the Swedish sentence in (1), which has four dependency pairs. 2 (1) Det
On a par with constituency rules, we define a grammar rule as a dependency relation rewriting as a head with its sequence of POS/dependent pairs (cf. Kuhlmann and Satta, 2009), as in fig-ure 2. This representation supports the detection of idiosyncracies in valency. 3 1. TOP  X  root ROOT:VV 2. ROOT  X  SS:PO VV MA:AB NA:AB PL:AB 3. SS  X  PO 5. NA  X  AB 4. MA  X  AB 6. PL  X  AB
For example, for the ROOT category, the head is a verb (VV), and it has 4 dependents. The extent to which this rule is odd depends upon whether comparable rules X  X .e., other ROOT rules or other VV rules (see section 3.2) X  X ave a simi-lar set of dependents. While many of the other rules seem rather spare, they provide useful infor-mation, showing categories which have no depen-dents. With a TOP rule, we have a rule for every head, including the virtual root. Thus, we can find anomalous rules such as TOP  X  root ROOT:AV ROOT:NN, where multiple categories have been parsed as ROOT. 3.2 Making appropriate comparisons In comparing rules, we are trying to find evidence that a particular (parsed) rule is valid by examining the evidence from the (training) grammar.
 Units of comparison To determine similarity, one can compare dependency relations, POS tags, or both. Valency refers to both properties, e.g., verbs which allow verbal (POS) subjects (depen-dency). Thus, we use the pairs of dependency re-lations and POS tags as the units of comparison. Flagging individual elements Previous work scored only entire rules, but some dependencies are problematic and others are not. Thus, our methods score individual elements of a rule. Comparable rules We do not want to com-pare a rule to all grammar rules, only to those which should have the same valents. Compara-bility could be defined in terms of a rule X  X  depen-dency relation (LHS) or in terms of its head. Con-sider the four different object (OO) rules in (2). These vary a great deal, and much of the variabil-ity comes from the fact that they are headed by different POS categories, which tend to have dif-ferent selectional properties. The head POS thus seems to be predictive of a rule X  X  valency. (2) a. OO  X  PO
But we might lose information by ignoring rules with the same left-hand side (LHS). Our approach is thus to take the greater value of scores when comparing to rules either with the same depen-dency relation or with the same head. A rule has multiple chances to prove its value, and low scores will only be for rules without any type of support.
Taking these points together, for a given rule of interest r , we assign a score ( S ) to each element e i in r , where r = e 1 ...e m by taking the maximum of scores for rules with the same head ( h ) or same LHS ( lhs ), as in (3). For the first element in (2b), for example, S (DT:EN) = max { s (DT:EN, NN), s (DT:EN, OO) } . The question is now how we de-fine s ( e i , c ) for the comparable element c . (3) S ( e i ) = max { s ( e i , h ) , s ( e i , lhs ) } 3.3 Whole rule anomalies 3.3.1 Motivation The whole rule method compares a list of a rule X  X  dependents to rules in a database, and then flags rule elements without much support. By using all dependents as a basis for comparison, this method detects improper dependencies (e.g., an adverb modifying a noun), dependencies in the wrong overall location of a rule (e.g., an adverb before an object), and rules with unnecessarily long ar-gument structures. For example, in (4), we have an improper relation between skall ( X  X hall X ) and sambeskattas ( X  X e taxed together X ), as in figure 3. It is parsed as an adverb (AA), whereas it should be a verb group (VG). The rule for this part of the tree is +F  X  ++:++ SV AA:VV, and the AA:VV position will be low-scoring because the ++:++ SV context does not support it. (4) Makars Figure 3: Wrong label (top=gold, bottom=parsed) 3.3.2 Implementation The method we use to determine similarity arises from considering what a rule is like without a problematic element. Consider +F  X  ++:++ SV AA:VV from figure 3, where AA should be a dif-ferent category (VG). The rule without this er-ror, +F  X  ++:++ SV, starts several rules in the training data, including some with VG:VV as the next item. The subrule ++:++ SV seems to be reliable, whereas the subrules containing AA:VV (++:++ AA:VV and SV AA:VV) are less reliable. We thus determine reliability by seeing how often each subsequence occurs in the training rule set.
Throughout this paper, we use the term subrule to refer to a rule subsequence which is exactly one element shorter than the rule it is a component of. We examine subrules, counting their frequency as subrules , not as complete rules. For example, TOP rules with more than one dependent are prob-lematic, e.g., TOP  X  root ROOT:AV ROOT:NN.
 Correspondingly, there are no rules with three ele-ments containing the subrule root ROOT:AV.

We formalize this by setting the score s ( e i , c ) equal to the summation of the frequencies of all comparable subrules containing e i from the train-ing data, as in (5), where B is the set of subrules of r with length one less.
For example, with c = +F, the frequency of +F  X  ++:++ SV as a subrule is added to the scores for ++:++ and SV. In this case, +F  X  ++:++ SV VG:BV , +F  X  ++:++ SV VG:AV , and +F  X  ++:++ SV VG:VV all add support for +F  X  ++:++ SV being a legitimate subrule. Thus, ++:++ and SV are less likely to be the sources of any problems. Since +F  X  SV AA:VV and +F  X  ++:++ AA:VV have very little support in the train-ing data, AA:VV receives a low score.

Note that the subrule count C ( sub, c ) is differ-ent than counting the number of rules containing a subrule, as can be seen with identical elements. For example, for SS  X  VN ET:PR ET:PR, C ( VN ET:PR, SS ) = 2 , in keeping with the fact that there are 2 pieces of evidence for its legitimacy. 3.4 Bigram anomalies 3.4.1 Motivation The bigram method examines relationships be-tween adjacent sisters, complementing the whole rule method by focusing on local properties. For (6), for example, we find the gold and parsed trees in figure 4. For the long parsed rule TA  X  PR HD:ID HD:ID IR:IR AN:RO JR:IR , all elements get low whole rule scores, i.e., are flagged as po-tentially erroneous. But only the final elements have anomalous bigrams: HD:ID IR:IR, IR:IR AN:RO, and AN:RO JR:IR all never occur. (6) N  X  ar 3.4.2 Implementation To obtain a bigram score for an element, we sim-ply add together the bigrams which contain the el-ement in question, as in (7). (7) s ( e i , c ) = C ( e i  X  1 e i , c ) + C ( e i e i +1 Consider the rule from figure 4. With c = T A , the bigram HD:ID IR:IR never occurs, so both HD:ID and IR:IR get 0 added to their score. HD:ID HD:ID , however, is a frequent bigram, so it adds weight to HD:ID, i.e., positive evidence comes from the bigram on the left. If we look at IR:IR, on the other hand, IR:IR AN:RO occurs 0 times, and so IR:IR gets a total score of 0.
Both scoring methods treat each element inde-pendently. Every single element could be given a low score, even though once one is corrected, an-other would have a higher score. Future work can examine factoring in all elements at once. The methods presented so far have limited defini-tions of comparability. As using complementary information has been useful in, e.g., POS error de-tection (Loftsson, 2009), we explore other simple comparable properties of a dependency grammar. Namely, we include: a) frequency information of an overall dependency rule and b) information on how likely each dependent is to be in a relation with its head, described next. 4.1 Including POS information Consider PA  X  SS:NN XX:XX HV OO:VN, as illustrated in figure 5 for the sentence in (8). This rule is entirely correct, yet the XX:XX position has low whole rule and bigram scores. (8) Uppgift Uppgift om vilka orter som har utk  X  orning
One method which does not have this problem of overflagging uses a  X  X exicon X  of POS tag pairs, examining relations between POS, irrespective of position. We extract POS pairs, note their depen-dency relation, and add a L/R to the label to in-dicate which is the head (Boyd et al., 2008). Ad-ditionally, we note how often two POS categories occur as a non-depenency, using the label NIL, to help determine whether there should be any at-tachment. We generate NILs by enumerating all POS pairs in a sentence. For example, from fig-ure 5, the parsed POS pairs include NN PR 7 X  ET-L, NN PO 7 X  NIL, etc.

We convert the frequencies to probabilities. For example, of 4 total occurrences of XX HV in the training data, 2 are XX-R (cf. figure 5). A proba-bility of 0.5 is quite high, given that NILs are often the most frequent label for POS pairs. In evaluating the methods, our main question is: how accurate are the dependencies, in terms of both attachment and labeling? We therefore cur-rently examine the scores for elements functioning as dependents in a rule. In figure 5, for example, for har ( X  X as X ), we look at its score within ET  X  PR PA:HV and not when it functions as a head, as in PA  X  SS:NN XX:XX HV OO:VN.

Relatedly, for each method, we are interested in whether elements with scores below a thresh-old have worse attachment accuracy than scores above, as we predict they do. We can measure this by scoring each testing data position below the threshold as a 1 if it has the correct head and dependency relation and a 0 otherwise. These are simply labeled attachment scores (LAS). Scoring separately for positions above and below a thresh-old views the task as one of sorting parser output into two bins, those more or less likely to be cor-rectly parsed. For development, we also report un-labeled attachement scores (UAS).

Since the goal is to speed up the post-editing of corpus data by flagging erroneous rules, we also report the precision and recall for error detection. We count either attachment or labeling errors as an error, and precision and recall are measured with respect to how many errors are found below the threshold. For development, we use two F-scores to provide a measure of the settings to ex-amine across language, corpus, and parser condi-tions: the balanced F 1 measure and the F 0 . 5 mea-sure, weighing precision twice as much. Precision is likely more important in this context, so as to prevent annotators from sorting through too many false positives. In practice, one way to use these methods is to start with the lowest thresholds and work upwards until there are too many non-errors.
To establish a basis for comparison, we compare method performance to a parser on its own. 4 By examining the parser output without any automatic assistance, how often does a correction need to be made? 5.1 The data All our data comes from the CoNLL-X Shared Task (Buchholz and Marsi, 2006), specifically the 4 data sets freely available online. We use the Swedish Talbanken data (Nilsson and Hall, 2005) and the transition-based dependency parser Malt-Parser (Nivre et al., 2007), with the default set-tings, for developing the method. To test across languages and corpora, we use MaltParser on the other 3 corpora: the Danish DDT (Kromann, 2003), Dutch Alpino (van der Beek et al., 2002), and Portuguese Bosque data (Afonso et al., 2002). Then, we present results using the graph-based parser MSTParser (McDonald and Pereira, 2006), again with default settings, to test the methods across parsers. We use the gold standard POS tags for all experiments. 5.2 Development data In the first line of table 1, we report the baseline MaltParser accuracies on the Swedish test data, including baseline error detection precision (=1-LAS b ), recall, and (the best) F-scores. In the rest of table 1, we report the best-performing results for each of the methods, 5 providing the number of rules below and above a particular threshold, along with corresponding UAS and LAS values. To get the raw number of identified rules, multiply the number of corpus position below a threshold ( b ) times the error detection precision ( P ). For ex-ample, the bigram method with a threshold of 39 leads to finding 283 errors (455  X  .622).

Dependency elements with frequency below the lowest threshold have lower attachment scores (66.6% vs. 90.1% LAS), showing that simply us-ing a complete rule helps sort dependencies. How-ever, frequency thresholds have fairly low preci-sion, i.e., 33.4% at their best. The whole rule and bigram methods reveal greater precision in iden-tifying problematic dependencies, isolating ele-ments with lower UAS and LAS scores than with frequency, along with corresponding greater pre-cision and F-scores. The bigram method is more fine-grained, identifying small numbers of rule el-ements at each threshold, resulting in high error detection precision. With a threshold of 39, for ex-ample, we find over a quarter of the parser errors with 62% precision, from this one piece of infor-mation. For POS information, we flag 23.6% of the cases with over 60% precision (at 81.6).
Taking all these results together, we can begin to sort more reliable from less reliable dependency tree elements, using very simple information. Ad-ditionally, these methods naturally group cases together by linguistic properties (e.g., adverbial-verb dependencies within a particualr context), al-lowing a human to uncover the principle behind parse failure and ajudicate similar cases at the same time (cf. Wallis, 2003). 5.3 Discussion Examining some of the output from the Tal-banken test data by hand, we find that a promi-nent cause of false positives, i.e., correctly-parsed cases with low scores, stems from low-frequency dependency-POS label pairs. If the dependency rarely occurs in the training data with the partic-ular POS, then it receives a low score, regardless of its context. For example, the parsed rule TA  X  IG:IG RO has a correct dependency relation (IG) between the POS tags IG and its head RO, yet is assigned a whole rule score of 2 and a bigram score of 20. It turns out that IG:IG only occurs 144 times in the training data, and in 11 of those cases (7.6%) it appears immediately before RO. One might consider normalizing the scores based on overall frequency or adjusting the scores to ac-count for other dependency rules in the sentence: in this case, there may be no better attachment.
Other false positives are correctly-parsed ele-ments that are a part of erroneous rules. For in-stance, in AA  X  UK:UK SS:PO TA:AJ AV SP:AJ OA:PR +F:HV +F:HV, the first +F:HV is correct, yet given a low score (0 whole rule, 1 bigram). The following and erroneous +F:HV is similarly given a low score. As above, such cases might be handled by looking for attachments in other rules (cf. Attardi and Ciaramita, 2007), but these cases should be relatively unproblematic for hand-correction, given the neighboring error.

We also examined false negatives, i.e., errors with high scores. There are many examples of PR PA:NN rules, for instance, with the NN improp-Score Thr. b a UAS b LAS b
UAS None n/a 5656 0 87.4% 82.0% 0% 0% 18.0% 100% 30.5% 21.5%
WR 0 894 4762 64.7% 54.0% 91.7% 87.3% 46.0% 40.5% 43.0% 44.8%
Bi 0 56 5600 10.7% 7.1% 88.2% 82.8% 92.9% 5.1% 9.7% 21.0%
POS 0 54 5602 27.8% 22.2% 87.4% 82.6% 77.8% 4.1% 7.9% 17.0% erly attached, but there are also many correct in-stances of PR PA:NN. To sort out the errors, one needs to look at lexical knowledge and/or other de-pendencies in the tree. With so little context, fre-quent rules with only one dependent are not prime candidates for our methods of error detection. 5.4 Other corpora We now turn to the parsed data from three other corpora. The Alpino and Bosque corpora are ap-proximately the same size as Talbanken, so we use the same thresholds for them. The DDT data is approximately half the size; to adjust, we simply halve the scores. In tables 2, 3, and 4, we present the results, using the best F 0 . 5 and F 1 settings from development. At a glance, we observe that the best method differs for each corpus and depending on an emphasis of precision or recall, with the bigram method generally having high precision.

For Alpino, error detection is better with fre-quency than, for example, bigram scores. This is likely due to the fact that Alpino has the small-est label set of any of the corpora, with only 24 dependency labels and 12 POS tags (cf. 64 and 41 in Talbanken, respectively). With a smaller la-bel set, there are less possible bigrams that could be anomalous, but more reliable statistics about a whole rule. Likewise, with fewer possible POS tag pairs, Alpino has lower precision for the low-threshold POS scores than the other corpora.
For the whole rule scores, the DDT data is worse (compare its 46.1% precision with Bosque X  X  45.6%, with vastly different recall values), which could be due to the smaller training data. One might also consider the qualitative differences in the dependency inventory of DDT compared to the others X  X .g., appositions, distinctions in names, and more types of modifiers. 5.5 MSTParser Turning to the results of running the methods on the output of MSTParser, we find similar but slightly worse values for the whole rule and bi-gram methods, as shown in tables 5-8. What is most striking are the differences in the POS-based method for Bosque and DDT (tables 7 and 8), where a large percentage of the test corpus is un-derneath the threshold. MSTParser is apparently positing fewer distinct head-dependent pairs, as most of them fall under the given thresholds. With the exception of the POS-based method for DDT (where LAS b is actually higher than LAS a ) the different methods seem to be accurate enough to be used as part of corpus post-editing.
 We have proposed different methods for flag-ging the errors in automatically-parsed corpora, by treating the problem as one of looking for anoma-lous rules with respect to a treebank grammar. The different methods incorporate differing types and amounts of information, notably comparisons among dependency rules and bigrams within such rules. Using these methods, we demonstrated suc-cess in sorting well-formed output from erroneous output across language, corpora, and parsers.
Given that the rule representations and compar-ison methods use both POS and dependency in-formation, a next step in evaluating and improv-ing the methods is to examine automatically POS-tagged data. Our methods should be able to find POS errors in addition to dependency errors. Fur-thermore, although we have indicated that differ-ences in accuracy can be linked to differences in the granularity and particular distinctions of the annotation scheme, it is still an open question as to which methods work best for which schemes and for which constructions (e.g., coordination). Thanks to Sandra K  X  ubler and Amber Smith for comments on an earlier draft; Yvonne Samuels-son for help with the Swedish translations; the IU Computational Linguistics discussion group for feedback; and Julia Hockenmaier, Chris Brew, and Rebecca Hwa for discussion on the general topic. Afonso, Susana, Eckhard Bick, Renato Haber and
Diana Santos (2002). Floresta Sint  X  a(c)tica: a treebank for Portuguese. In Proceedings of LREC 2002 . Las Palmas, pp. 1698 X 1703.
 Attardi, Giuseppe and Massimiliano Ciaramita (2007). Tree Revision Learning for Dependency Parsing. In Proceedings of NAACL-HLT-07 .
 Rochester, NY, pp. 388 X 395.
 Bick, Eckhard (2007). Hybrid Ways to Improve Domain Independence in an ML Dependency Parser. In Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007 . Prague, Czech Republic, pp. 1119 X 1123.
 Boyd, Adriane, Markus Dickinson and Detmar
Meurers (2008). On Detecting Errors in Depen-dency Treebanks. Research on Language and Computation 6(2), 113 X 137.
 Buchholz, Sabine and Erwin Marsi (2006).
CoNLL-X Shared Task on Multilingual Depen-dency Parsing. In Proceedings of CoNLL-X . New York City, pp. 149 X 164.
 Campbell, David and Stephen Johnson (2002). A transformational-based learner for dependency grammars in discharge summaries. In Proceed-ings of the ACL-02 Workshop on Natural Lan-guage Processing in the Biomedical Domain .
 Phildadelphia, pp. 37 X 44.
 Dickinson, Markus (2008). Ad Hoc Treebank
Structures. In Proceedings of ACL-08 . Colum-bus, OH.
 Dickinson, Markus and Jennifer Foster (2009). Similarity Rules! Exploring Methods for Ad-Hoc Rule Detection. In Proceedings of TLT-7 . Groningen, The Netherlands.
 Gildea, Daniel (2001). Corpus Variation and Parser Performance. In Proceedings of EMNLP-01 . Pittsburgh, PA.
 Hall, Keith and V  X  aclav Nov  X  ak (2005). Corrective
Modeling for Non-Projective Dependency Pars-ing. In Proceedings of IWPT-05 . Vancouver, pp. 42 X 52.
 Kromann, Matthias Trautner (2003). The Danish
Dependency Treebank and the underlying lin-guistic theory. In Proceedings of TLT-03 .
 Kuhlmann, Marco and Giorgio Satta (2009). Tree-bank Grammar Techniques for Non-Projective
Dependency Parsing. In Proceedings of EACL-09 . Athens, Greece, pp. 478 X 486.
 Loftsson, Hrafn (2009). Correcting a POS-Tagged Corpus Using Three Complementary Methods.

In Proceedings of EACL-09 . Athens, Greece, pp. 523 X 531.
 McDonald, Ryan and Fernando Pereira (2006).
Online learning of approximate dependency parsing algorithms. In Proceedings of EACL-06 . Trento.
 Nilsson, Jens and Johan Hall (2005). Recon-struction of the Swedish Treebank Talbanken . MSI report 05067, V  X  axj  X  o University: School of Mathematics and Systems Engineering.
 Nivre, Joakim, Johan Hall, Jens Nilsson, Atanas
Chanev, Gulsen Eryigit, Sandra K  X  ubler, Sve-toslav Marinov and Erwin Marsi (2007). Malt-
Parser: A language-independent system for data-driven dependency parsing. Natural Lan-guage Engineering 13(2), 95 X 135.
 Owczarzak, Karolina (2009). DEPEVAL(summ): Dependency-based Evaluation for Automatic Summaries. In Proceedings of ACL-AFNLP-09 .
 Suntec, Singapore, pp. 190 X 198.
 Przepi  X  orkowski, Adam (2006). What to ac-quire from corpora in automatic valence ac-quisition. In Violetta Koseska-Toszewa and
Roman Roszko (eds.), Semantyka a kon-frontacja jezykowa, tom 3 , Warsaw: Slawisty-czny O  X  srodek Wydawniczy PAN, pp. 25 X 41.
 Sekine, Satoshi (1997). The Domain Dependence of Parsing. In Proceedings of ANLP-96 . Wash-ington, DC. van der Beek, Leonoor, Gosse Bouma, Robert Malouf and Gertjan van Noord (2002). The
Alpino Dependency Treebank. In Proceedings of CLIN 2001 . Rodopi. van Noord, Gertjan and Gosse Bouma (2009).
Parsed Corpora for Linguistics. In Proceed-ings of the EACL 2009 Workshop on the In-teraction between Linguistics and Computa-tional Linguistics: Virtuous, Vicious or Vacu-ous? . Athens, pp. 33 X 39.
 Wallis, Sean (2003). Completing Parsed Corpora.
In Anne Abeill  X  e (ed.), Treebanks: Building and using syntactically annoted corpora , Dordrecht: Kluwer Academic Publishers, pp. 61 X 71.
 Wan, Stephen, Mark Dras, Robert Dale and C  X  ecile
Paris (2009). Improving Grammaticality in Sta-tistical Sentence Generation: Introducing a De-pendency Spanning Tree Algorithm with an Ar-gument Satisfaction Model. In Proceedings of EACL-09 . Athens, Greece, pp. 852 X 860.
 Xu, Peng, Jaeho Kang, Michael Ringgaard and
Franz Och (2009). Using a Dependency Parser to Improve SMT for Subject-Object-Verb Lan-guages. In Proceedings of NAACL-HLT-09 .

Boulder, Colorado, pp. 245 X 253.
