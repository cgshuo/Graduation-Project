 Technological advances have enabled the deployment of large-scale sensor networks for environmental monitoring and surveil-lance purposes. The large volume of data generated by sen-sors needs to be processed to respond to the users queries. However, efficient processing of queries in sensor networks poses great challenges due to the unique characteristics im-posed on sensor networks including slow processing capabil-ity, limited storage, and energy-limited batteries, etc. Among various queries, top-k query is one of the fundamental op-erators in many applications of wireless sensor networks for phenomenon monitoring. In this paper we focus on evalu-ating top-k queries in an energy-efficient manner such that the network lifetime is maximized. To achieve that, we de-vise a scalable, filter-based localized evaluation algorithm for top-k query evaluation, which is able to filter out as many unlikely top-k results as possible within the network from transmission. We also conduct extensive experiments by simulations to evaluate the performance of the proposed algorithm on real datasets. The experimental results show that the proposed algorithm outperforms existing algorithms significantly in network lifetime prolongation.
 H.2.4 [ Database Management ]: Query Processing; C.2.4 [ Computer-Communication Networks ]: Distributed Ap-plication Algorithms, Experimentation, Performance Top-k query, Wireless sensor network, Energy optimization
Technological advances in recent years have enabled the deployment of large-scale sensor networks consisting of hun-dreds or thousands of inexpensive sensors in an ad-hoc fash-ion. Such networks now are used for a variety of environ-mental monitoring and surveillance purposes including mea-surements of meteorological data (e.g. temperature, pres-sure, humidity), noise levels, chemicals, etc [5, 22]. During this course, a large volume of sensing data generated by sensors is needed to be processed within the network to re-spond to queries from users. The wireless sensor network is thus treated as a virtual database by the database commu-nity [2]. Top-k query is a fundamental operation to search for the most important objects according to object ranking obtained by various ranking techniques. Efficient processing of top-k query is crucial in many applications [7]. Unlike those studies on top-k query in traditional databases, in this paper we focus on optimizing top-k query evaluation in resource-constrained wireless sensor networks (WSNs). Wireless sensor networks that support top-k queries can be used to not only monitor the data generated by sensors in no time but also perform further data analysis for decision making. For example, meteorologists make use of a wire-less sensor network to sense meteorological attributes such as temperature, humidity and rainfall in a region of inter-est. A top-k query in such a WSN can easily identify the k places suffering the high temperatures for statistic and anal-ysis purpose. Another scenario is that ornithologists who study various bird species in a given forest are interested to know where the birds are most likely to gather [24]. To do so, they place the bird feeders at various locations in the for-est and install a sensor at each feeder to count the number of birds on that feeder periodically. The result of this query can assist the ornithologists to determine where the birds are likely to be attracted. For example, a top-k query can inquire which feeders attract the maximum number of birds. Thus, the ornithologists can observe bird behaviors at a few places where the most attractive feeders are located.
Generally speaking, query processing in WSNs is essen-tially different from that in traditional databases due to the unique characteristics imposed on sensors [16], which can be seen from the following aspects. Firstly, to prolong network lifetime, the energy consumption rather than the query re-sponse time or the space used is the optimization objective for query evaluation, since the battery-powered sensors will quickly become inoperative if the large quantity of sensing data is transmitted to the base station through multi-hop relays, and the lifetime of a sensor network is closely tied to the energy consumption rate of its sensors. Secondly, a wire-less sensor network containing N sensors can be viewed as a distributed system of N nodes, while this special distributed system is different from the general distributed system, in which there is no any single powerful node serving as the col-lection center to collect data from all the sensors. Each sen-sor transmits its data to the base station through multi-hop relays, which consumes energy for each data transmission. This implies that it is more expensive to obtain the sensed data from the sensors far away from the base station than those near to it. Finally, as the major optimization objective for query processing in sensor networks, the network lifetime is determined not only by the total energy consumption of all sensors but also by the maximum energy consumption among the sensors. The sensors near to the base station consume more energy than the others, because they relay the data for the others and they will exhaust their batteries first. Once they run out of energy, the rest of sensors will be disconnected from the base station, no matter how much residual energy left the rest of the sensors. Consequently, the network is no longer functioning even if the total energy con-sumption per query is reasonably small. This implies that in terms of query optimization in WSNs, only minimizing the total energy consumption is insufficient. Minimizing the maximum energy consumption among sensors is also critical to prolong network lifetime. Hence, how to evaluate queries effectively and efficiently in WSNs poses great challenges.
The previous studies of top-k query in distributed systems mainly focused on the distributed top-k query, which is to find k objects with the highest scores, assuming that each object is distributed in multiple nodes. In each node, the object has a local score. The score of the object is combined from all of local scores by a given function [6, 14, 15]. In this paper, we deal with a different top-k query which is identical to the one proposed in [9, 24]. That is, each sensor senses one or multiple numerical values from its vicinity, and each value and its generator sensor is referred to as a point in the rest of this paper. A point p is represented by a tuple &lt; p.sid, p.value &gt; , where p.sid is the ID of sensor generating point p , and p.val is the sensed numerical value. The top-k query in WSNs is to return the k points with the highest sensed values. Due to the difference of distributed top-k query and top-k query in WSNs, the existing algorithms for distributed top-k query are inapplicable to the top-k query evaluation in sensor networks.
Top-k query has been extensively studied in centralized and distributed databases [6, 10, 11, 13, 14, 15]. As men-tioned, the proposed techniques and algorithms are inappli-cable to WSNs due to the unique characteristics imposed on sensors. Several studies investigated in-network process-ing in WSNs for query optimization, e.g., the algorithms in [1, 2, 20, 21] exploited for simple aggregation, while the others dealt with more complicated queries including order-statistics [3, 4], skyline query [23] and top-k query [8, 9, 24]. To evaluate a top-k query in WSNs, Silberstein et al [24] pro-vided several approximate solutions with high probability, based on a prediction model built on the samples of previous top-k query results. They demonstrated how to improve the accuracy of the top-k results under given energy constraints, by formulating the problem as a linear programming, and developed a series of top-k query planning algorithms. Wu et al [8, 9] exploited the semantics of top-k query and proposed a Filter-based maintenance algorithm (FILA) to maintain the top-k points by assigning a dedicated filter for each sen-sor. Given the current top-k points, each sensor is assigned an interval of values serving as its filter to suppress unnec-essary data from transmission. Meanwhile, the base station also maintains a copy of the filter at each sensor. However, the energy saving by their solution is based on an assump-tion that the probing messages broadcast by the base station can be heard by all sensors directly and the energy consump-tion of each sensor by receiving the probing messages is not taken into account, which is too restrictive and may not be realistic in the real world. Note that the work by Wu et al [8, 9] is the top-k results maintenance and they did not cope with top-k query evaluation efficiently and effectively. In addition, the proposed algorithms by both Silberstein et al [24] and Wu et al [8, 9] are centralized algorithms, which may not be suitable for the real distributed sensor networks.
In this paper we consider top-k query evaluation in WSNs to maximize the network lifetime through devising a capa-ble filter mechanism and striking the right balance between the total energy consumption and the maximum energy con-sumption among the sensors per query. The main contribu-tions are as follows.
The remainder of the paper is organized as follows. Sec-tion 2 introduces the cost model and problem definitions, followed by briefly introducing an existing top-k query eval-uation algorithm. Section 3 proposes an energy-efficient al-gorithm for top-k query evaluation and conducts theoretical analysis on the filtering capability of the devised filter. To evaluate the performance of the proposed algorithm, exten-sive experiments on real sensing datasets are conducted in Section 4, and the conclusions are given in Section 5.
We consider a sensor network consisting of N stationary sensors v 1 , v 2 , . . . , v N , randomly deployed in a region of in-terest, and a base station r with unlimited energy supply located at the center of the region. For the sake of simplic-ity, we assume that the topology of the sensor network is a spanning tree T rooted at the base station [2]. Otherwise, such a tree can be obtained by applying any spanning tree algorithm in the network like the one by T AG [1]. We fur-ther assume that the transmission ranges of all sensors are identical, and each sensor can communicate with the base station via one or multi-hop relays. In this paper, each sen-sor has a point p and p.sid as well as p.val is represented by 4 bytes. Thus, a point p is represented by 8 bytes in total. To transmit a message containing l bytes of data from a sensor to one of its neighboring sensors, the amount of transmission energy consumed at the sender is  X  t + R  X  l and the amount of reception energy consumption at the receiver is  X  r + r where  X  t and  X  r are the sum of energy overhead on hand-shaking between the two sensors and transmitting and re-ceiving the message header, R and r e are the amounts of transmission and reception energy per byte. We assume that the sensing and computation energy consumptions on sen-sors are not taken into account, because in practice they are several orders of magnitude less than that of wireless com-munication energy consumption. For example, the authors in [2, 16] claimed that the transmission of 1-bit data con-sumes as much energy as executing 1,000 CPU instructions. Therefore, unless otherwise specified, we only compare the communication energy consumption of different algorithms in the later performance evaluation.
Given a wireless sensor network, assume that P ( v i ) is the set of points generated at sensor v i , then P = S N i =1 the point set in the whole sensor network. A top-k query is to find the k points in P with the highest values, 1  X  k  X  N . If there are more than k points with the highest values, k of them are selected as the result, which is determined by the rank of the other attributes of the points like the IDs of their generator. The top-k query problem is defined as follows. Given a sequence of top-k queries with various k s issued at the base station, the problem is to propose an eval-uation plan for each incoming top-k query such that the en-ergy consumption in terms of the total energy consumption and the maximum energy consumption among the sensors for answering the query is minimized with the ultimate aim to maximize the network lifetime. The network lifetime is referred to as the time when the first sensor in the network exhausts its energy [12]. Before we proceed, we briefly review a popular algorithm Naive-k for top-k query evaluation by Silberstein et al [24], which will be served as the benchmark. Algorithm Naive-k computes the answer bottom-up in one pass over the net-work. In algorithm Naive-k , the leaf sensors forward their points to their parent. If a internal sensor contains k  X  points (including its own), then it forwards all the points to its parent. Otherwise, it forwards its top-k points to its parent. In the end, the base station obtains the top-k points from the collected points from its children and its own, which is the result of top-k query.
In this section we propose a novel filter-based algorithm for top-k query evaluation in WSNs. For a given set S of points, assume that the points in S are sorted in decreasing order of their values. The  X  -quantile of S is the point whose rank is  X   X  | S | X  and the value of the  X  -quantile is referred to as  X  -quantile value , where  X  is constant with 0 &lt;  X  &lt; 1. For example, given a set S = { p 1 , . . . , p | S | } with p p the  X  -quantile value of S .
 The basic idea of the proposed algorithm is as follows. Firstly, every sensor sorts its points in decreasing order of sensed values, and sends its  X  -quantile value to its parent. Secondly, the parent chooses one of the received  X  -quantile values as the filter and broadcasts the filter to all children. Finally the children send those points whose values are no less than the received filter to their parent. The chosen filter is called the quantile filter .

In the following we first provide the details of identifying the quantile filter, followed by analyzing the filtering capabil-ity of the quantile filter. We then analyze the energy saving by the quantile filter as well as the extra energy overhead on installing it. We finally present a quantile filter-based algorithm for top-k query evaluation and give the analysis of the proposed algorithm.
Consider a sensor v in the routing tree T with d v children u , 1  X  i  X  d v . L ( u i ) = { p ( i ) 1 , . . . , p ( i ) points at u i with p ( i ) j 1 .val  X  p ( i ) j 2 .val if j j Otherwise, l ( i ) = k . In other words, there are at most k top-k points from the children of v , and | S ( v ) | X  k  X  d  X  -quantile of L ( u i ) is point p ( i )  X   X l ( i )  X  and p ( i ) the  X  -quantile value of L ( u i ), which is also referred to the  X  -quantile value of sensor u i . The process of identifying a quantile filter that can filter out as many points in S ( v ) as possible from transmission is described as follows.
Each child u i sends a pair of values, p ( i )  X   X   X  l ( i )  X  l ( i ) to its parent v , 1  X  i  X  d v . The d v received  X  -quantile values at sensor v are sorted in decreasing order. Let q i . . . , q i d v be the sorted sequence, where q i j (= p ( i is the value sent by child u i j . The m th largest  X  -quantile value q i m in the sequence is chosen as the quantile filter by sensor v , if an integer m is found such that P m  X  1 t =1 k and P m t =1  X   X   X  l ( i t )  X   X  k , which guarantees that there are at least k points in S ( v ) whose values are no less than broadcasts the found quantile filter to each child u i , and u sends those points in L ( u i ) whose values are no less than the quantile filter to parent v , 1  X  i  X  d v . Denote by Send ( u the set of points sent by u i . Having received Send ( u from each child u i , sensor v obtains the top-k points by identifying the k points with the highest sensed values in S i =1 Send ( u i )  X  P ( v ) . Figure 1: The examples of the quantile filter for top-5 query.

In the following, we use two examples to illustrate the procedure of finding the quantile filter. Assume that sen-sor v has 6 children u 1 , . . . , u 6 , and the values of points at each sensor are sorted as shown in Fig. 1. Assume that a top-5 query is issued at the base station and broadcast to v and its children. Fig. 1(a) and (b) show different quantile filters identified when  X  = 0 . 4 and  X  = 0 . 5 re-spectively. In Fig. 1(a), the 0 . 4-quantile values of all chil-q =5 = 9, and q i 6 =6 = 8, while their 0 . 5-quantile val-q =4 = 6, and q i 6 =5 = 4, which are shown in Fig. 1(b). and  X  0 . 5  X  l (1)  X  +  X  0 . 5  X  l (2)  X  = 5  X  k , q i 3 q =2 = 10 are chosen as the quantile filters in Fig. 1(a) and Fig. 1(b), respectively. From the figures, we can see that the values of the points in the most left top corner regions (circled by the lines) are no less than the quantile filter. Because there are at least k points whose values are no less than the quantile filter, the points with the values smaller than the quantile filter will be impossible to be part of the final top-k results and therefore are safely filtered out. Compared with algorithm Naive-k in which the number of received points by v is | S ( v ) | , the quantile filter can filter out many points in S ( v ), and thus reduces the energy con-sumption by transmitting fewer points within the network.
As have been shown, the use of quantile filter can prune some points in S ( v ) from transmission, but the number of points filtered out depends on the choice of different  X  s. We now aim to prune as many points from S ( v ) as possible by identifying the optimal value of  X  . Consequently, we can reduce the transmission and reception energy consumptions of sensors significantly. What followed is to find such an optimal quantile filter. Figure 2: The partition of S ( v ) by the quantile filter.
Recall that sensor v has d v children u 1 , . . . , u d v shedding ratio of the quantile filter as the number of points filtered out by the quantile filter to the number of points in S ( v ). Assume that the points at the d v children of sensor v are arranged into d v columns, where L ( u i j ) occupies col-umn i j if its  X  -quantile value is ranked at the i j position, as shown in Fig. 2. We sort the  X  -quantile values of the children of v in decreasing order and let q i 1 , . . . , q sorted sequence, i.e., q i x = p ( i x )  X   X l ( i x )  X  .val and q For convenience, the elements in Fig. 2 represent the values of the corresponding points. Denote by c x,y the element lo-cated at the x th column and y th row. All the elements in the x th column are from child u i x , which are sorted in decreasing order, i.e., c x,y = p ( i x ) y .val and c x,y  X  c x,y +1 as the quantile filter, where m = min { w | P w t =1  X   X l ( i k, 1  X  w  X  d v } . From Fig. 2, we can observe that the set of all elements S ( v ) is divided into 4 subsets by element q m and the  X  -quantile values, i.e., S 1 ( v ), S 2 ( v ), S S ( v ). The values of points in S 1 ( v ) are no less than q while the values of points in S 4 ( v ) are smaller than q Because | S 1 ( v ) |  X  k , all the points in S 4 ( v ) are impossible to be top-k points. It cannot make sure that the values of the points in S 2 ( v ) and S 3 ( v ) are smaller than the quan-tile filter, and whether the points in S 2 ( v ) and S 3 ( v ) can be filtered out depends on the data distribution of the sensor network. In comparison with algorithm Naive-k , at least | S 4 ( v ) | points are filtered out from S ( v ) if sensor v broad-casts the quantile filter to all its children. | S 4 ( v ) | regarded as the shedding ratio of the proposed quantile fil-ter, where | S 4 ( v ) | = | S ( v ) | X  X  S 1 ( v ) | X  X  S 2 the following we derive the optimal value of  X  to maximize | S 4 ( v ) | . We thus have the following lemma.

Lemma 1. | S 4 ( v ) | X  (1  X   X  ) | S ( v ) | X  d v  X  1  X   X 
Proof. It is obvious that the sizes of S 1 ( v ) and S 2 ( v ) are | S 1 ( v ) | = P m t =1  X   X l ( i t )  X  and | S 2 ( v ) | = P respectively. Therefore, | S 1 ( v ) | + | S 2 ( v ) | = P have
Denote by | S 1 ( v )  X  | = P m  X  1 t =1  X   X l ( i t )  X  . If | S q will be chosen as the quantile filter. Thus, | S 1 ( v )  X 
The size of S 3 ( v ) is estimated as follows: while | S 1 ( v )  X  | X  k  X  1. | S 4 ( v ) | = | S ( v ) | X  X  S 1 ( v ) | X  X  S 2 ( v ) | X  X  S equalities (1) and (2), we have 2
Therefore, the shedding ratio of the quantile filter is
From inequality (4), it is clear that the shedding ratio of the quantile filter is determined by the value of  X  . When inequality (4) is maximized, and the filter thus is referred to as the optimal quantile filter . The shedding ratio of the optimal quantile filter is  X  ( v ) = 1  X  where  X  ( v ) is referred to as the shedding ratio of the optimal quantile filter. The optimal quantile filter can suppress at least | S 4 ( v ) | points from transmission in case the values of the points in S 2 ( v ) and S 3 ( v ) are larger than the quantile fil-ter. In many cases the values of the points in S 2 ( v ) or S may be smaller than the quantile filter and those points will be filtered out. Therefore, the actual shedding ratio of the quantile filter is much better than the conservative one based on the theoretical analysis.
Although installing quantile filters at the children of v may eliminate unlikely top-k points from transmission, it does incur extra energy overhead on the quantile filter finding as well as the filter broadcasting. We now analyze this extra energy overhead and energy saving by the filter. In the end we only install the filters at those sensors that the energy saving exceeds the overhead on the filter installation.
For a given sensor v , if no filter is installed at any of its children u i , u i sends its top-l ( i ) points to v as algorithm Naive-k does, 1  X  i  X  d v . As a result, the number of points transmitted to v is | S ( v ) | and the total energy consumption by transmitting and receiving all | S ( v ) | points is Recall that each point is represented by 8 bytes. Within equation (6),  X  t d v + | S ( v ) | 8 R is the total energy consumption of the d v children transmitting the | S ( v ) | points to sensor sensor v by receiving the | S ( v ) | points.

If the quantile filters are installed at the children of v , the shedding ratio induced by them is at least  X  ( v ), and the total energy consumption is where d v (  X  t + 8 R +  X  r + 8 r e ) is the total energy consump-tion of the children sending the  X  -quantile values and l ( i )s to sensor v and sensor v receiving the values from its chil-dren, while  X  t + 4 R + d v (  X  r + 4 r e ) is the energy consump-tion of broadcasting the quantile filter. d v (  X  t +  X  r  X  ( v )) | S ( v ) | 8( R + r e ) is the sum of energy consumption that each child sends the points passing through the quantile filter to sensor v . Note that for any leaf sensor v , E naive ( S ( v )) = 0 and E filter ( S ( v )) = 0 because | S ( v ) | = 0.
In the following, we investigate the extra energy overhead on the filter finding and the energy saving of a child of sensor v . If there is no filter installed at a child u i of v , u its top-l ( i ) points to sensor v and the energy consumption of u i is otherwise, the energy consumption of u i is
We assume that  X  ( v )  X  l ( i ) within equation (9) is the expected number of points filtered out by the quantile fil-ter at sensor u i . To guarantee that the installation of the quantile filter is beneficial, we must have E filter ( S ( v )) &lt; E naive ( S ( v )) and E filter ( L ( u i )) &lt; E naive ( L ( u while, the shedding ratio of the optimal quantile filter will be no less than 0 only when | S ( v ) |  X  d v 1  X   X  + k  X  1 equality (4). Combined with equations (6), (7), (8), and (9), we have | S ( v ) | &gt;  X  ( v )
The values of  X  ( v ) in inequality (10) and the shedding ra-tio  X  ( v ) in inequality (11) are determined by | S ( v ) | . Note that | S ( v ) | = P d v i =1 l ( i ), where l ( i ) = min { k, | L ( u practice, the value of l ( i ) is not known by v beforehand. A naive method for this is to employ an extra phase, in which each child u i sends its l ( i ) to sensor v and receives the optimal  X  from sensor v , this method however consumes additional energy. To this end, an approximation | S ( v ) | S ( v ) | is proposed to find the optimal  X   X  = q k  X  1 determine whether the quantile filters should be installed at the children of sensor v . | S ( v )  X  | is the number of points re-ceived by sensor v if algorithm Naive-k is applied for top-k query evaluation. Denote by desc ( v ) the set of descendants of sensor v in the routing tree. As mentioned, each sen-sor contains one point, and thus | desc ( v ) | is the number of points contained by the descendants of v . For each sensor v , | S ( v )  X  | = P d v i =1 min { k, | desc ( u i ) |} , where u In other words, if a child contains more than k descendants, it transmits its top-k points to v ; otherwise, the child trans-mits all points from its descendants to v . Obviously, | S ( v ) for each sensor v can be obtained when the routing tree is built. In the following, we prove that the | S ( v ) | = | S ( v ) the following theorem.

Theorem 1. Given a sensor network G ( V, E ) , | S ( v ) | = | S ( v )  X  | for each sensor v  X  V if the proposed optimal quantile filter strategy is applied in the network.

Proof. If v is a leaf sensor, | S ( v ) | = | S ( v )  X  | = 0; other-wise, assume that u 1 , u 2 , . . . , u d v are the children of v . We partition the children of v into three subsets, referred to as U , U 2 and U 3 , respectively. U 1  X  U 2 is the set of the children of v whose descendants are not installed the filters, where | desc ( u i ) | &lt; k if u i  X  U 1 , and | desc ( u i ) | X  k if u each sensor u i  X  U 1  X  U 2 , | S ( u i ) | = | S ( u i ) no filter installed at any descendant of u i and thus algorithm Naive-k is applied on the subtree rooted at u i . If u i | S ( u i ) | = | S ( u i )  X  | = desc ( u i ); otherwise, u k points, and | L ( u i ) | = k . U 3 is the set of the sensors that at least one descendant is installed a filter. Assume that u  X  desc ( u i ) is installed a quantile filter where u i  X  U is clear that | desc ( u i ) | &gt; | desc ( u  X  ) | &gt; | S ( u Thus, u i receives at least k points from its descendants, and consequently | L ( u i ) | = k . For each sensor v  X  V we have | S ( v )  X  | =  X  u  X  U 1 ( desc ( u )) + | U 2 |  X  k + | U and | S ( v ) | =  X  u  X  U 1 desc ( u ) +  X  u  X  U 2 | L ( u ) | +  X   X  u  X  U 1 ( desc ( u )) + | U 2 | X  k + | U 3 | X  k = | S ( v ) Having described the quantile filter, we now present the Quantile Filter-based algorithm (algorithm QF for short) as follows.

Suppose that sensor v has d v children u 1 , u 2 , . . . , u Each child u i sends the number of descendants | desc ( u . . . , | desc ( u d v ) |} to its children once. Having received a (10) or (11) is not satisfied, u i sends its top-l ( i ) points to sensor v directly, and no filter is installed at u i ; otherwise, a quantile filter will be installed at sensor u i . u i first sends the  X  -quantile value of L ( u i ) and l ( i ) to parent sensor v . Sen-sor v then sorts the received d v values and broadcasts the m th largest value as the quantile filter to its children, where m = min { w | P w t =1  X   X l ( i t )  X   X  k } , 1  X  w  X  d v u ter and then sends the points whose values are no less than the filter to parent v . The other children of sensor v have sent their top-l ( i ) points to v already. The pseudo-code of algorithm QF at each sensor is shown below. Note that each non-leaf sensor serves as both a parent and a child, while a leaf sensor only serves as a child.
 Algorithm 1 Child_Sensor ( u i , k, v, L ( u i )) begin end Algorithm 2 Parent_Sensor ( v, k, P ( v )) begin end
An illustrative example for the execution of algorithm QF is given in Fig. (3). Sensor v has 6 children, u 1 ,. . . , u each sensor contains several points as shown in Fig.3(a). A top-10 query is issued at the base station and broadcast to sensor v and its children. k = 10 and | S ( v ) | = 40, thus  X  = and consequently sensor u 4 with l (4) = 3 will send all of its points to sensor v . The other sensors send their  X  -quantile values to sensor v with  X  = 0 . 47. The circled points in Fig.3(b) are sent to sensor v in the first phase. The six received quantile values by sensor v are sorted in decreasing order and the sorted sequence is q i 1 =4 (= 25), q i 2 =3 q =6 (= 19), q i 4 =2 (= 16), q i 5 =5 (= 11), q i 6 =1 (= 6). The quantile filter q i 3 =6 = 19 is chosen, because  X  0 . 47  X  l (4)  X  +  X  0 . 47  X  l (3)  X  +  X  0 . 47  X  l (6)  X  = 10  X  k . Sensor v broadcasts q 3 to its children and all children except u 4 send the points with values no less than q i 3 to v . In Fig.3(b), all the points above the broken line are sent to v in the second phase. Figure 3: An example of algorithm Quantile-Filter .
In this section we analyze the filtering capability of algo-rithm QF by comparing the number of transmitted points of algorithms QF and Naive-k .

Recall that u 1 , . . . , u d v are the children of sensor v . If the quantile filters are installed at the children of v , the points in S 4 ( v ) are filtered out, and the number of points quantile filter finding, where 1  X  i  X  d v ; otherwise, | S ( v ) | points are sent to v . We thus partition the set of sensors V into two subsets V naive and V filter , where V naive is the set of sensors whose children are not installed quantile filters, and V filter is the set of sensors whose children are installed quantile filters. Let  X  be the ratio of the number of points transmitted within the network by algorithm QF to that by algorithm Naive-k , which is  X  = As different topologies of routing trees have different sets V naive and V filter , the analysis of the bound of  X  is generally difficult. In the following we thus analyze the bound of  X  on a special routing tree, a complete d -ary tree. Assume that the complete d -ary tree has h layers and includes d sensors. The base station is the root of the routing tree, which is located in the first layer, and the sensors located at the smaller layers are closer to the base station. Each sensor is the maximum layer at which the sensors have more than h 1 =  X  h  X  log d ( k ( d  X  1) + d )  X  + 1. In the realistic sensor network, the average number of neighbors of a sensor is a constant. Thus the routing tree can be treated as a complete d -ary tree on average. We have the following theorem.
Theorem 2. Given a sensor network G ( V, E ) , assume that the routing tree rooted at the base station is a d -ary tree, which includes all sensors. Algorithms QF and Naive-k are applied for top-k query evaluation.  X  ( d, h, k ) is defined as the ratio of the number of points transmitted in this network by algorithm QF to that by algorithm Naive-k . The bound of  X  ( d, h, k ) is where  X  ( v ) is the condition of installation of the quantile filter from inequality (10), h is the number of layers of the routing tree, h 1 =  X  h  X  log d ( k ( d  X  1) + d )  X  + 1 , and  X  = d  X  (
Proof. The definition of  X  ( d, h, k ) follows the previous definition of  X  and it is used to represent a special  X  on the d -ary routing tree of h layers. If algorithm Naive-k is applied for top-k query evaluation, | S ( v ) | = d  X  d h  X  i sensor v at the i th layer where i  X  h 1 , because d h  X  i while | S ( v ) | = d  X  k for a sensor v at the layer smaller than h And there are d i  X  1 sensors at the i th layer of a d -ary tree. Therefore, the number of transmitted points by algorithm Naive-k is
 X 
The threshold  X  ( v ) is used to determine whether the chil-dren of sensor v are installed quantile filters, which can be further divided into two cases as follows.
 is installed the filter because each sensor v in a d -ary tree has at most k points in L ( v ) and d  X  k points in S ( v ). Thus,  X  ( d, h, k ) = 1.
Case 2 : If  X  ( v ) &lt; d  X  k , quantile filters are installed at the children of each sensor v located at the layer smaller than h 1 . For such a sensor, | S ( v ) | = dk , and consequently  X  ( v ) = d +2 d  X  ( of all sensors with the filters are the same, and  X  is used to represent the value of this shedding ratio. Thus, the number of transmitted points by algorithm QF is
Denote by and
It is obvious that 0 &lt; w 1  X  1 and w 2 &gt; 0. Therefore, of w 2 , where h 1 =  X  h  X  log d ( k ( d  X  1) + d )  X  + 1, and  X  = d  X  (
In this section we evaluate the performance of the pro-posed algorithm QF in terms of the total energy consump-tion, the maximum energy consumption among sensors, the network lifetime, and the average energy consumption of sensors at different layers of the routing tree. The network lifetime is defined as the number of top-k queries answered before the first sensor exhausts its energy. In other words, the network having a longer lifetime can answer more top-k queries. In the following, algorithm QF with the optimal value of  X  and with fixed  X  = 0 . 3 and  X  = 0 . 5 are referred to as algorithm Optimal-QF , algorithm 0.3-QF and algorithm 0.5-QF , respectively. The performance of algorithm Naive-k in [24] will be used as benchmark for comparison purpose.
We assume that the sensor network is deployed to monitor a 100 m  X  100 m region of interest, in which N sensors are randomly deployed by the NS-2 simulator [19] and the base station is located at the square center. Assume that all the sensors have the same transmission range (5 meters in this paper). The initial energy at each sensor is 10 5 mJ . The topology of the sensor network is the T AG routing tree [1] (a B readth F irst S earch tree ). As mentioned, the energy consumption on wireless communication dominates all the other energy consumptions at a sensor, and we thus only take into account the radio energy consumption. In our ex-periments we adopt the transmission and reception energy consumption parameters of a real sensor MICA2 mote [17], where the energy consumptions on transmitting and receiv-ing a header and handshaking are  X  t = 0 . 4608 mJ and  X  r = 0 . 1152 mJ , and the energy consumptions of trans-mitting and receiving one byte are R = 0 . 0144 mJ and r = 0 . 00576 mJ , respectively [17]. The sensed points are drawn from a real dataset of temperature traces, collected by the Intel Berkeley Research Lab from February 28 to April 5, 2004 [18].
We first evaluate the performance of various algorithms for top-k query evaluation with the range of k being from 80 to 150. In our experiments, two instances of sensor networks consisting of 1,500 and 2,500 sensors are considered.
Fig. 4 shows the curves of various performance metrics. It can be seen that the total energy consumption and the max-imum energy consumption among the sensors by algorithms Optimal-QF , 0.3-QF and 0.5-QF are substantially less than those by algorithm Naive-k . Algorithm Optimal-QF out-performs algorithms 0.3-QF and 0.5-QF in terms of various performance metrics, which implies that the optimal quan-tile filter can filter out more points from transmission. The network lifetime by algorithm Optimal-QF is 1.25 times, 1.15 times or 1.4 times longer than that by algorithm 0.3-QF , 0.5-QF or Naive-k on average for both network instances.
Fig. 5 plots the curves of average energy consumption of sensors at different layers of the routing tree by various algo-rithms in the network instances consisting 1 , 500 and 2 , 500 sensors when k = 80, k = 100, and k = 120, respectively. A sensor at the i th layer is i -hop away from the base sta-tion and the sensors near to the base station play more im-portant roles in network lifetime prolongation. As shown in Fig. 5, the average energy consumption of sensors at the first 10 layers by algorithms Optimal-QF , 0.3-QF and 0.5-QF are less than that by algorithm Naive-k , while the average energy consumption of sensors in the first 3 layers by algo-rithm Optimal-QF is less than those by algorithms 0.3-QF and 0.5-QF . The curves imply that algorithm Optimal-QF efficiently balances the load among the sensors in the net-work, thereby reduces the energy consumption of the sensors near to the base station.
In this paper we have tackled the problem of processing top-k query in wireless sensor networks with objective to maximize the network lifetime. We proposed a filter-based localized algorithm for top-k query evaluation through the design of a novel filter which is capable to filter out as many unlikely top-k points as possible within the network from transmission, and we analyzed the filtering capability of the proposed algorithm. We conducted extensive experiments by simulations on real sensing datasets to evaluate the per-formance of the proposed algorithm. The experimental re-sults show that the proposed algorithm is efficient and can prolong the network lifetime significantly. [1] S. Madden, M. J. Franklin, J. M. Hellerstein, W. [2] S. Madden, M. J. Franklin, J. M. Hellerstein, W. [3] M. B. Greenwald, S. Khanna. Power-Conserving [4] N. Shrivastava, C. Buragohain, D. Agrawal, S. Suri. [5] I. F. Akyildiz, W. Su, Y. Sankarasubramaniam E. [6] B. Babcock and C. Olston. Distributed top-k [7] I. F. Ilyas, G. Beskales, M. A. Soliman. A survey of [8] M. Wu, J. Xu, X. Tang, W-C. Lee. Monitoring top-k [9] M. Wu, J. Xu, X. Tang, W-C. Lee. Top-k monitoring [10] R. Fagin, A. Lotem, M. Naor. Optimal aggregation [11] A. Marian, L. Gravano, N. Bruno. Evaluating top-k [12] J-H Chang and L. Tassiulas. Energy conserving [13] G. Das, D. Gunopulos, N. Koudas, N. Sarkas. Ad-hoc [14] D. Zeinalipour-Yaztia, Z. Vagenab, V. Kalogerakic, D. [15] D. Zeinalipour-Yaztia, Z. Vagenab, V. Kalogerakic, D. [16] G. J. Pottie, W. J. Kaiser Wireless Integrated [17] Crossbow Inc. MPR-Mote Processor Radio Board [18] http://db.csail.mit.edu/labdata/labdata.html [19] Network Simulator-ns2. [20] Y. Yao, J. Gehrke. The cougar approach to in-network [21] Y. Yao, J. Gehrke. Query processing for sensor [22] A. Mainwaring, J. Polastre, R. Szewczyk, D. Culler, J. [23] W. Liang, B. Chen, J. X. Yu. Energy-efficient skyline [24] A. Silberstein R. Braynard, C. Ellis, K. Munagala, J.
