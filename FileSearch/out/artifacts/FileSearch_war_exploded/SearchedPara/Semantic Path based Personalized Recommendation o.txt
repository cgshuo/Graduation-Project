 Recently heterogeneous information network (HIN) analy-sis has attracted a lot of attention, and many data mining tasks have been exploited on HIN. As an important data mining task, recommender system includes a lot of object types (e.g., users, movies, actors, and interest groups in movie recommendation) and the rich relations among object types, which naturally constitute a HIN. The comprehen-sive information integration and rich semantic information of HIN make it promising to generate better recommendations. However, conventional HINs do not consider the attribute values on links, and the widely used meta path in HIN may fail to accurately capture semantic relations among objects, due to the existence of rating scores (usually ranging from 1 to 5) between users and items in recommender system. In this paper, we are the first to propose the weighted HIN and weighted meta path concepts to subtly depict the path semantics through distinguishing different link attribute val-ues. Furthermore, we propose a semantic path based per-sonalized recommendation method SemRec to predict the rating scores of users on items. Through setting meta paths, SemRec not only flexibly integrates heterogeneous informa-tion but also obtains prioritized and personalized weights representing user preferences on paths. Experiments on two real datasets illustrate that SemRec achieves better recom-mendation performance through flexibly integrating infor-mation with the help of weighted meta paths.
 H.2.8 [ Database Management ]: Database applications-Data Mining c  X  heterogeneous information network, recommendation, simi-larity, meta path
In recent years, there is a surge of research on Hetero-geneous Information Network (HIN) in which objects are of different types and links among objects represent differ-ent relations [11]. The heterogeneity and rich relation of information network make it a better data representation in many scenarios. As a unique characteristics of HIN, the meta path [12, 15], connecting two objects through a se-quence of relations between object types, is widely used to exploit rich semantic information. Many meta path based data mining tasks have been done in the past couple of years, including similarity search [12, 10], clustering [13], and clas-sification [3] etc.

More recently, some works [2, 7, 15] have taken notice of the benefits of HIN for recommendation, where the objects and their relations in recommender system constitute a HIN. Fig. 1 shows such an example. The HIN not only contains different types of objects in movie recommendation (e.g., users and movies) but also illustrates all kinds of relations among objects, such as viewing information, social relations, and attribute information. Constructing heterogeneous net-works for recommendation can effectively integrate all kinds of informations, which can be potentially utilized for rec-ommendation. Moreover, the objects and relations in the networks have different semantics, which can be explored to reveal subtle relations among objects. For example, the meta path  X  X ser-Movie-User X  in Fig. 1 means users viewing the same movies, and can be used to find the similar users according to viewing records. If we recommend movies fol-lowing this meta path, it will recommend the movies that are seen by users having the same viewing records with the given user. It corresponds to the collaborative filtering model in essence. Similarly, the  X  X ser-Interest Group-User X  path can find the similar users with similar interests. This path corre-sponds to the member recommendation [16]. So we can di-rectly recommend items based on the similar users generated by different meta paths connecting users. Moreover, it can realize different recommendation models through properly Figure 1: The objects and relations in movie recom-setting meta paths. However, this idea faces the following two challenges.

Firstly, conventional HIN and meta path cannot be di-rectly applied to recommender system. As we know, con-ventional HIN and meta path do not consider the attribute values on links. However, this movie recommendation net-work can contain attribute values on links. Concretely, in recommender system, the users can provide a rating score to each movie viewed. The rating scores usually range from 1 to 5 as indicated on the link between user and movie in Fig. 1, where higher score means stronger preference. Ignoring the rating scores may result in bad similarity discovery on users. For example, according to the path  X  X ser-Movie-User X , Tom has the same similarity with Mary and Bob, since they view the same movies. However, they may have totally different tastes due to different rating scores. In fact, Tom and Bob should be more similar, since they both like the same movies very much with high scores. Mary may have totally differ-ent tastes, because she does not like these movies at all. The conventional meta path does not allow links to have attribute values (e.g., rating scores in the above example) [12, 15], and hence it cannot reveal this subtle difference. However, this difference is very important, especially in rec-ommender system, to more accurately reveal relations of objects. So we need to extend existing HIN and meta path for considering attribute values on links. Moreover, the new similarity measures are urgently needed for development.
Secondly, it is difficult to effectively combine informa-tion from multiple meta paths for recommendation. As we have said, different types of similar users will be generated through different meta paths, and these different types of similar users will recommend different items. A weight learn-ing method can be designed to combine these recommenda-tions and each path can be assigned with a learned weight preference. A good weight learning method should obtain prioritized and personalized weights. That is, the learned weights can represent the importance of paths, and each user should have personalized weights to embody his prefer-ences on paths. The prioritized and personalized weights are very important for recommendation, since they can deeply reveal the characteristics of users. Much more than this, it makes the recommendation more explainable, since meta paths contain semantics. For example, if a user has high weight preference on the  X  X ser-Interest Group-User X  path, we can explain that the recommendation results stem from movies viewed by users in the interest groups he joined in. Unfortunately, the personalized weights may suffer from the rating sparsity problem, especially for users with little rat-Figure 2: Network schema of weighted heterogeneous ing information. The reasons lie in that so many parameters are needed to be learned and rating information are usually not sufficient.

In this paper, we extend HIN and meta path for widely-existing attribute values on links in information networks, and firstly propose the weighted HIN and weighted meta path concepts to more subtly reveal object relations through distinguishing link attribute values. Instead of designing an ad hoc similarity measure for weighted meta paths, we de-sign a novel similarity computation strategy that can make existing path-based similarity measures still usable. Fur-thermore, the semantic path based personalized recommen-dation method SemRec is proposed to flexibly integrate het-erogeneous information through setting meta paths. In Sem-Rec, we design a novel weight regularization term to obtain personalized weight preferences on paths and alleviate the rating sparsity through employing the consistency rule of weight preferences of similar users. The datasets and codes can be downloaded from the web 1 . The major contributions of this paper are summarized as follows:
In this section, we describe notations used in this paper and present some preliminary knowledge. https://github.com/zzqsmall/SemRec
A HIN is a special type of information network with the underneath data structure as a directed graph, which either contains multiple types of objects or multiple types of links. Traditionally, HIN does not consider the attribute values on links. However, many real networks contain attribute values on links. For example, users usually rate movies with a score from 1 to 5 in movie recommender system, and the  X  X uthor of X  relations between authors and papers in bibliographic networks can take values (e.g., 1, 2, 3) which means the order of authors in the paper. In this paper, we formally propose the weighted heterogeneous information network concept to handle this condition.

Definition 1. Weighted Information Network . Given a schema S = ( A , R , W ) which consists of a set of ob-ject types A = { A } , a set of relations connecting object pairs R = { R } , and a set of attribute values on relations W = { W } , a weighted information network is defined as a directed graph G = ( V,E,W ) with an object type map-ping function  X  : V  X  A , a link type mapping function  X  : E  X  R , and an attribute value type mapping function  X  : W  X  W . Each object v  X  V belongs to one particular object type  X  ( v )  X  X  , each link e  X  E belongs to a particular relation  X  ( e )  X  R , and each attribute value w  X  W belongs to a particular attribute value type  X  ( w )  X  W . When the types of objects |A| = 1 and the types of relations |R| = 1 , it is a homogeneous information network . When the types of objects |A| &gt; 1 (or the types of relations |R| &gt; 1 ) and the types of attribute values |W| = 0 , the network is called unweighted heterogeneous information network . When the types of objects |A| &gt; 1 (or the types of relations |R| &gt; 1 ) and the types of attribute values |W| &gt; 0 , the net-work is called weighted heterogeneous information net-work (WHIN).

Conventional HIN is an unweighted HIN, where there are no attribute values on relations or we do not consider them. For a WHIN, there are attribute values on some relation types, and these attribute values may be discrete or contin-uous values.

Example 1. A movie recommender system can be or-ganized as a weighted heterogeneous information network, whose network schema is shown in Fig. 2(a). The net-work contains objects from six types of entities (e.g., users, movies, groups, actors) and relations between them. Links between objects represent different relations. For example, links exist between users and users denoting the friendship relations, between users and movies denoting rating and rated relations. In addition, the network also contains one type of attribute value on the rating relation between users and movies, which take values from 1 to 5.

Two objects in a HIN can be connected via different paths and these paths have different meanings. As an example shown in Fig. 2(a), users can be connected via  X  X ser-User X  (UU) path,  X  X ser-Group-User X  (UGU) path,  X  X ser-Movie-User X  (UMU) and so on. These paths are called meta paths that are the combination of a sequence of relations between object types. Although meta path is widely used to reveal semantics among objects [11], it fails to distinguish the at-tribute values between two objects in WHIN. For example, if ignoring the different rating scores of users on items in above movie recommendation, we may obtain incorrect re-sults. Consider a scenario that we use the UMU path to find the similar users of Tom according to their viewing records in Fig. 1. We can infer that Tom is very similar to Mary and Bob, since they have the same viewing records. However, it is obvious that Tom and Mary have totally different tastes. So the UMU path cannot subtly reveal the different ratings of users on the same movies. In order to effectively exploit semantics in WHIN, we extend the conventional meta path to consider attribute values on relations. Without loss of generality, we assume the attribute values on relations in WHIN are discrete. For continuous attribute values on re-lations, we can convert the continuous attribute values into discrete ones.

Definition 2. Extended meta path on WHIN . Ex-tended meta path is a meta path based on a certain attribute value constraint on relations, which is denoted as A 1  X  1 A A values on links, the attribute value function  X  ( R ) is a set of values from the attribute value range of relation R , else  X  ( R ) between A i and A i +1 based on the attribute values  X  The constraint C on attribute value functions is a set of cor-relation constraints among attribute value functions. If all attribute value functions in a meta path are empty set (the corresponding constraint C is also an empty set), the path is called an unweighted meta path , else the path is called a weighted meta path .

Note that, the conventional meta path is an unweighted meta path that can be considered as the special case of a weighted meta path.

Example 2. Taking Fig. 2(a) as an example, the rat-ing relation between users U and movies M can take scores from 1 to 5. the weighted meta path U 1  X  X  X  M (i.e., U (1) M ) means movies rated by users with score 1, which implies that users dislike the movies. The weighted meta path U M 1 , 2  X  X  X  X  U (i.e., U (1 , 2) M (1 , 2) U ) means users disliking the same movies as the target user, while the unweighted meta path UMU can only reflect that users have the same viewing records. Furthermore, we can flexibly set the correlation con-straints of attribute value functions on different relations in weighted meta paths. For example, the path U ( i ) M ( j ) U | i = j means users having exactly the same ratings on some movies as the target user. Under this path, we can easily find that, in Fig. 1, Tom is very similar to Bob, while they are totally dissimilar to Mary.
For a target user, recommender systems usually recom-mend items according to his similar users. In HIN, there are a number of meta paths connecting users, such as  X  X ser-User X  and  X  X ser-Moive-User X . Based on these paths, users have different similarities. Here we define the path based similarity as follows.

Definition 3. Path based similarity . In HIN, the path based similarity of two objects is the similarity evaluation based on the given meta path connecting these two objects.
After obtaining the path based similarity of users, we can recommend items according to the similar users of the tar-get user. More importantly, the meta paths connecting users have different semantics, which can represent different rec-ommendation models. As an example shown in Fig. 2(a),  X  X ser-User X  (UU) means friends of the target user. If we recommend movies according to the similarity of users gen-erated by that path, it will recommend the movies viewed by friends of the target user. Indeed, it is the social recommen-dation. Another example is that  X  X ser-Movie-User X  (UMU) means users who view the same movies with the target user. Following that path, it will recommend the movies viewed by users having the similar viewing records with the target user. it is collaborative recommendation in essential. Table 1 shows the other representative paths and the correspond-ing recommendation models. Based on the HIN framework, we can flexibly represent different recommendation models through properly setting meta paths.
Similarity measure on meta paths have been well stud-ied, and several path based similarity measures have been proposed on HIN, such as PathSim [12], PCRW [4], and HeteSim [10]. However, these similarity measures cannot be directly applied to weighted meta path, because they do not consider the attribute value constraint on relations. As we know, the essential of the path based similarity measure is to evaluate the proportion of the number of paths connect-ing two objects on all possible paths along the meta path [12], so the paths along a weighted meta path must satisfy the attribute value constraint. Moreover, the attribute value on relations may be a variable, even correlated. Taking the U(i)M(j)U | i = j path as an example, the attribute values i and j are variables from 1 to 5, and they satisfy constraint i = j . For this kind of paths, existing path based similarity measures cannot handle it.

In order to address the variable, even correlated, attribute value constraints in a weighted meta path, we extend the meta path concept and propose a general strategy to make existing path based similarity measure still usable, instead of proposing an ad hot similarity measure. Specifically, we can decompose the weighted meta path into a group of atomic meta paths with fixed attribute value constraint. For an atomic meta path, the existing path based similarity mea-sures can be used directly.

Definition 4. Atomic meta path . If all attribute value functions  X  ( R ) in a weighted meta path take a specific value, the path is called an atomic meta path . A weighted meta path is a group of atomic meta paths which contain all atomic meta paths that satisfy the constraint C .

Example 3. Taking Fig. 2(a) as an example, U (1) M (1) U and U (1) M (2) U both are atomic meta paths. The weighted meta path U ( i ) M ( j ) U | i = j is a group of five atomic meta paths (e.g., U (1) M (1) U and U (2) M (2) U ). Figure 3: PathSim similarity measure based on conven-
Since a weighted meta path is a group of correspond-ing atomic meta paths, the similarity measure based on a weighted meta path can be considered as the sum of the similarity measure based on the corresponding atomic meta paths. So the similarity measure based on a weighted meta path can be evaluated based on the following two steps: (1) evaluate the similarity based on each atomic meta path with existing path based measures; (2) sum up the similarities on all atomic meta paths in the weighted meta path. Note that, the similarity measure needs to consider the effect of the normalized term existing in some path based similarity measures, such as PathSim [12] and HeteSim [10]. Taking PathSim as an example, we illustrate its calculation process along conventional and weighted meta path in Fig. 3, where the rating matrix between 3 users and 2 movies are from Fig. 1. We know that PathSim counts the number of path instances connecting two objects along conventional meta path with a normalized term (shown in the upper half of Fig. 3), and thus it regards that the users all are the same. As shown in the lower half of Fig. 3, PathSim along weighted meta path firstly counts the number of path instances along each atomic meta path, and then sums up the the number of path instances along all atomic meta paths before nor-malization. And thus it can more accurately discover that only u 1 and u 3 are similar, since they have the same tastes in movies.
In this section, we proposed a Sem antic path based per-sonalized Rec ommendation method ( SemRec ) to predict the scores of items. Specifically, SemRec first evaluates the similarity of users based on weighted or unweighted meta paths, and then infers the predicted scores on items accord-ing to the rating scores of similar users. Under different meta paths, the users can obtain different recommendation results. How to effectively combine these recommendations generated by different meta paths is challenging. We need to put different preferences on the various meta paths. This results in assigning preference weight to each meta path. We abbreviate the preference weight as weight when the context is clear without confusion with the link weight in the weighted meta path. There are two aspects of difficul-ties on learning the weights. (1) Prioritized weights. That is, the weights learned should embody the importance of paths and reflect users X  preferences. However, the similarity evaluations based on different paths have significant bias, which makes path preference hard to reflect the path im-portances. For example, the similarity evaluations may all be high based on a path with dense relations, while the sim-ilarity evaluations may all be low based on another path with sparse relations. So the similarity evaluations based on different paths cannot reflect the similarity of two objects. SemRec designs a normalized rating intensity operation to eliminate the similarity bias, which makes the weight better reflect path importances. (2) Personalized weights. That is, it is better to learn weight preferences for each user. How-ever, personalized weight learning may suffer from the rating sparsity problem, since many users have little rating infor-mations. In order to alleviate the rating sparsity problem for personalized weight learning, we propose the consistency rule of weight preferences of similar users . That is, we as-sume that two similar users have consistent weight prefer-ences on meta paths. While it is reasonable, it is seldom used before. Two users are similar based on a path, which im-plies the path has similar impacts on these two users. That is to say, these users have the consistent preferences on the path. Following this principle, we design a novel weight reg-ularization term, which effectively alleviate rating sparsity in personalized weight learning.

In following sections, we firstly design the basic recom-mendation method based on a single path. And then we propose three levels of personalized recommendation meth-ods based on multiple paths: unified weights for all users, personalized weights for each user, and personalized weights with weight regularization.
Based on the path based similarity of users, we can find the similar users of a target user under a given path, and then the rating score of the target user on an item can be inferred according to the rating scores of his similar users on the item. Assume that the range of rating scores are from 1 to N (e.g., 5); P is a set of unweighted or weighted meta paths; R  X  R | U | X | I | is the rating matrix, where R u,i the rating score of user u on item i ; and S  X  R | U | X | U | the path based similarity matrix of users, where S ( l ) u,v similarity of users u and v under path P l . Here we define the intensity of user u rating item i with score r given path P Q u,i,r is determined by two aspects: the number of similar users rating the item i with score r , and the similarity of users. So we calculate Q ( l ) u,i,r as the sum of similarity of users rating i with r .
 where E v,i,r indicates whether user v rates item i with score r .

Under a meta path P l , the rating of a user u on an item i range from 1 to N with different rating intensity Q So the predicted rating score , denoted as  X  R ( l ) u,i item i under the path P l can be the average of rating scores weighted by corresponding normalized intensity. and  X  R ( l )  X  R | U | X | I | means the predicted rating matrix under path P l .

According to Eq. (2), we can predict the rating score of a user on an item under a given path, and then recommend the item with the high score for a target user. Moreover, the Eq. (2) has an additional advantage that it eliminates the similarity bias existing in different meta paths. As we know, the similarity of users under different meta paths have dif-ferent scales, which makes similarity evaluation and rating intensity incomparable among different paths. The normal-ized rating intensity in Eq. (2) is able to eliminate those scale differences.
Under different meta paths, there are different predicted rating scores. In order to calculate the compositive score, we propose three different weight learning methods corre-sponding to different levels of personalized weights of users.
For all users, we assign each meta path with a unified weight, which means the user preference on the path. This weight vector is denoted as w  X  R 1  X |P| , and w ( l ) means the weight on path P l . The final predicted rating score under all meta paths, denoted as  X  R u,i , can be the weighted sum of predicted rating score under each meta path.
Hopefully, the predicted rating matrix  X  R  X  R | U | X | I | be as close as to the real rating matrix R . So a direct op-timization objective can be defined as the square error be-tween the real scores and the predicted scores. where the notation is the Hadamard product (also know as the entrywise product) between matrices, and || X || p is the matrix L p -norm. Y is an indicator matrix with Y u,i = 1 if user u rated item i , and otherwise Y u,i = 0.
The above optimization objective has a basic assumption: all users have the same path preferences. However, in many real applications, each user has his personal interest prefer-ences. Unified weights cannot provide personalized recom-mendations for users. To realize personalized recommenda-tion, each user is assigned with weight vector on meta paths. The weight matrix is denoted as W  X  R | U | X |P| , in which each entry, denoted as W ( l ) u , means the preference weight of user u on path P l . The column vector W ( l )  X  R means the weight vector of all users on path P l . So the pre-dicted rating  X  R u,i of user u rating item i under all paths is as follow.
Similarly, we can define the optimization objective as fol-lows. where diag ( W ( l ) ) means the diagonal matrix transformed from a vector W ( l ) .
Although Eq. (6) consider user X  X  personalized weights, it may be hard to effectively learn weights for those users that have little rating information. There are | U | X |P| weight parameters to learn, while the training samples are usually much smaller than | U | X | I | . The training samples are usu-ally not sufficient for the weight learning, specially for those cold-start users and items. According to the consistency rule of weight preferences of similar users mentioned above, the path weights of a user should be consistent to that of his similar users. For users with little rating information, their path weights can be learnt from the weights of their similar users, since the similarity information of users are more available through meta paths. So we design a weight regularization term as follows, which compels the weights of a user consistent to the average of weights of his similar users. on path P l . For convenience, the weight regularization term can be written as the following matrix format. And thus the optimization objective is defined as follows. min s.t. W  X  0 .
The above optimization objective is a non-negative quadratic programming problem, a simple special case of non-negative matrix factorization. Projected gradient method for non-negative bound-constrained optimization [5] can be applied to solve this problem. The gradient of Eq. (9) with respect to W ( l ) u can be calculated as follows, W u can be updated as follows, where  X  is the step size and can be set according to [5]. Algorithm 1 shows the framework of this version of SemRec. Algorithm 1 Framework of SemRec
From the optimization objectives, we find that the unified weight learning method ( L 1 in Eq. (4)) is a special case of personalized weight learning ( L 2 in Eq. (6)), when the weights of all users on path P l (i.e., W ( l ) ) have the same value. Furthermore, they both are the special cases of per-sonalized weight learning with weight regularization. The objective L 3 converts to L 2 when  X  1 is 0, and L 3 converts to L 1 when  X  1 converges to +  X  . So the  X  1 parameter con-trols the personalized level in fact. The smaller  X  1 means the more personalized weights for users, while it may lead to more difficult learning task. So a proper  X  1 is needed to be set in real applications. Algorithm 1 is a flexible algorithm framework. Through setting different meta paths (weighted or unweighted), SemRec can flexibly realize different recom-mendation models and generate different recommendations complying with path semantics.

The time complexity of SemRec is analyzed as follows. As shown in Algorithm 1, SemRec includes two main parts: (1) Calculation of basic information (Lines 1-5). The main time-consuming component lies in similarity evaluation, while it can be done offline and many strategies [10] and parallel computing can speed it up. (2) Weight learning (Lines 6-11). It is an quadratic programming problem with complexity O (( | R | + | U | 2 )  X |P| ).
In this section, extensive experiments on two real datasets illustrate the traits of SemRec from five aspects. We first validate the effectiveness of SemRec, especially for cold-start problem. Then we thoroughly explore the meanings of weights learned and validate the benefits of the proposed weighted meta path. Finally, we illustrate the effect of  X  on performances.
In order to get more comprehensive heterogeneous infor-mation, we crawled a new dataset from Douban 2 , a well known social media network in China. The dataset includes 13367 users and 12677 movies with 1068278 movie ratings ranging from 1 to 5. The dataset includes the social re-lation among users and the attribute information of users and movies. Another dataset is the Yelp challenge dataset . This dataset contains user ratings on local business and attribute information of users and businesses. The dataset includes 16239 users and 14284 local businesses with 198397 ratings from 1 to 5. The detailed description of these two datasets can be seen in Table 2, and their network schemas are shown in Fig. 2. We can find that these two datasets have different properties. The Douban dataset has dense rating relations but sparse social relations, while the Yelp dataset has sparse rating relations but dense social relations.
We use two widely used metrics, Root Mean Square Error (RMSE) and Mean Absolute Error (MAE), to measure the rating prediction quantity.
 where R test denotes the whole test set. A smaller MAE or RMSE means a better performance. In order to show the effectiveness of the proposed Sem-Rec, we compare four variations of SemRec with the state of the arts. Besides the personalized weight learning method with weight regularization (called SemRec Reg ), we include three special cases of SemRec: single path based method (called SemRec Sgl ), unified weight learning method for all http://movie.douban.com/ http://www.yelp.com/dataset challenge/ users (called SemRec All ), and personalized weight learning method for individual user (called SemRec Ind ). As the base-lines, four representative rating predication methods are il-lustrated as follows. Note that the top k recommendation methods [15, 2] are not included here, since they solve dif-ferent problems.
We employ 5 meaningful meta paths whose lengths are not longer than 4 for both datasets, since the longer meta paths are not meaningful and they fail to produce good similarity measures [12]. Table 3 shows those paths which include the weighted and unweighted meta paths. For SemRec, we use PathSim [12] as the similarity measure to calculate the similarity between users. The parameter  X  0 in SemRec is 0.01 and  X  1 is 10 3 for the best performance. The parameters in other methods are set with the best performances on these datasets.
For Douban dataset, we use different training data set-tings (20%, 40%, 60%, 80%) to show the comparison results in different data sparseness. Training data 20%, for exam-ple, means that 20% of the ratings from user-item rating matrix is randomly selected as the training data to predict the remaining 80%. From Table 2, we can find that the Douban dataset has dense rating relations, while Yelp has very sparse rating relations. So we utilize more training data (60%, 70%, 80%, 90%) on Yelp. The random selection was repeated 10 times independently and the average results are reported in Table 4. Note that SemRec Sgl reports the best performances on these five paths.
 From the results, we can observe that all versions of Sem-Rec outperform other approaches in most conditions. Par-ticularly, SemRec Reg always achieves the best performances on all conditions. For example, on 20% training set of Douban, SemRec Reg outperforms PMF up to 19.55% on RSME and 15.89% on MAE. As compared to PMF, CMF improves the recommendation performances through inte-grating heterogeneous information with matrix factoriza-tion. However, its performances are much worse than the proposed SemRec on all conditions, especially on less train-ing set. As the most similar method to SemRec, HeteMF also has good performances, while its performances are still worse than the proposed SemRec Reg . These all imply that the proposed SemRec has better mechanism to integrate het-erogeneous information.

In addition, different versions of SemRec have different performances. Generally, SemRec with multiple paths (e.g., SemRec All , and SemRec Reg ) have better performances than SemRec with single path (i.e., SemRec Sgl ) except SemRec which indicates that the weight learning of SemRec can ef-fectively integrate the similarity information generated by different paths. Because of rating sparsity, SemRec Ind has worse performances than SemRec All on most conditions. In addition, the better performances of SemRec Rec over SemRec confirm the benefit of the weight regularization term. In all, SemRec Reg always achieves best performances in all condi-tions. The reason lies in that SemRec Reg not only realizes personalized weight learning for all users but also avoids the rating sparsity through the weight regularization in it. Figure 4: Performance improvements of three HIN methods against PMF on different levels and types of cold-start problems.

Furthermore, we record the average running time of these methods on the learning process. For two similarity based methods (e.g., SemRec and HeteMF), we do not consider the running time on similarity evaluation, since it can be done offline beforehand. For the four versions of SemRec, their running times increase when the weight learning tasks become more complex. Both SemRec Sgl and SemRec All are very fast, which can be applied for online learning. The running times of SemRec Ind and SemRec Reg are still accept-able when comparing to CMF and HeteMF. We can select a proper model through balancing the efficiency and effec-tiveness of SemRec in real applications.
 Figure 5: Analysis of clusters X  characteristics and path preferences of results returned by SemRec Reg on Douban dataset. C1-C5 represents the index of five clusters.
The above results also show that SemRec has more ob-vious superiority with less training set, which implies that SemRec has the potential to alleviate the cold-start prob-lem. In this section, we will exploit the ability of SemRec on alleviating the cold-start problem through observing its performances on different levels of cold-start users and items. We run PMF, CMF, HeteMF, SemRec Ind , and SemRec Reg on Douban dataset with users having the different numbers of rated movies. We select four types of users: three types of cold-start users with different numbers of rated movies (e.g., users with the number of rated movies no more than 5, denoted as  X  5 in Fig. 4) and all users (called ALL in Fig. 4). In addition, we also do the similar experiments on cold-start items and users&amp;items (contain both cold-start users and items). We record the RMSE performance improvement of other four algorithms against PMF in Fig. 4.

It is clear that SemRec Reg always achieves the best per-formance improvements on almost all conditions, and its su-periority is more significant for less rating information. On the contrary, CMF only achieves improvements on cold-start users and HeteMF X  X  improvements are only on items. We think the reason lies in that the collective matrix factoriza-tion of all relations in CMF may introduce much noises, es-pecially for items. HeteMF only utilizes the similarity infor-mation of items, ignoring that of users. Generally, integrat-ing heterogeneous information is helpful for alleviating cold-start problem (see Fig. 4(c)), while the integrating mech-anisms may have different impact on cold-start items and users. The overall performance improvements of SemRec Reg are attributed to multiple meta paths that not only con-tain rich attribute information but also provide comprehen-sive and complementary similarity evaluation of users and items. In addition, the better performances of SemRec Reg over SemRec Ind further validate that the weight regulariza-tion term employed in SemRec Reg is really helpful for the weight learning of cold-start users from similar users.
In this section, we illustrate the meanings of weights learned by SemRec through a case study. Based on the results of SemRec Reg on Douban dataset with 60% training data in the above experiments, we cluster users X  weight vectors into 5 groups using K -means, and then show the statistics in-formation of users in five clusters in Fig. 5(a). Moreover, the weight preferences of the five cluster centers on 5 meta paths are also shown in Fig. 5(b).

Let X  X  observe the relationship of the statistics information of users in different clusters and their weight preferences on paths from Fig. 5(a) and (b). As we know, Douban is a unique social media platform in China, in which the major active users are young people who love culture and arts. As the typical and major users in Douban, the users in C3 view a good number of movies, give relatively good rating scores, and have a moderate number of friends. So they also have close weight preferences on all paths. As the top movie fans, the users in C4 view a great many movies, tend to give lower rating scores due to critical attitude, and have many friends. And they obviously like to get recommendation from viewing records of other users (i.e., UMU) and interest group (i.e., UGU), but less paying attentions to movies X  content (e.g., UMTMU and UMAMU). In addition, the users in C1 and C2 are two types of inactive users, and they view few movies and have few friends. Because of not being fond of movies, these users tend to give much high or low rating scores. These users comparatively prefer to follow movie content (e.g., UMTMU and UMAMU). The picky users in C1 is more likely to get recommendation from interest group (i.e., UGU), while the idealess users in C2 give more preferences to viewing records of other users (i.e., UMU).

In all, the weights of paths learned by SemRec can re-flect the users X  path preferences, and these path preferences are able to reveal the users X  characteristics to a large ex-tent. More importantly, the meaningful weight preferences are very useful for recommendation explanation. We know that the meta path has semantics, so we can tell users the recommendation reason according to the path semantics of the high weight path. Although some weight learning meth-ods on paths have been proposed [7, 15], their weights fail to reflect users X  preferences on paths. We think two strate-gies adopted in RecSem contribute to its good properties. (1) We design the predicted rating score in Eq. (2), which can eliminate the similarity bias on different meta paths by the adoption of normalized rating intensity. (2) We employ the weight regularization term in Eq. (9) according to the consistency rule of weight preferences of similar users. The consistency rule makes similar users have similar weight pref-erences. In other words, weights also reveal users X  similarity and preferences.
In this section, we study the effectiveness of weighted meta path on improving the performances of SemRec through more accurately revealing relations among objects. For the meta path UMU, we design two weighted paths U(i)M(j)U | i = j and U(i)M(j)U || i  X  j |  X  1. U(i)M(j)U | i = j means users rating the exact same scores on the same movies, while U(i)M(j)U || i  X  j | X  1 means users rating close scores. Simi-larly, we design two corresponding weighted paths for UMDMU, UMAMU, and UMTMU. Based on the similarity generated by these meta paths, we employ SemRec Sgl to make recom-mendations. We compare the performances of SemRec Sgl with different paths and record the results in Fig. 6.
The experimental results on all four paths clearly show that SemRec with weighted meta paths (e.g., U(i)M(j)U | i = j and U(i)M(j)U || i  X  j |  X  1) significantly outperform Sem-Rec with unweighted meta paths (e.g., UMU). Let X  X  take the UMU path as an example to analyze the reasons. Fail-ing to distinguish the different rating scores of users on the same movies, UMU cannot accurately reveal user similar-ity, so it has bad performances. The path U(i)M(j)U | i = j and U(i)M(j)U || i  X  j |  X  1 not only consider the differ-ences of rating scores but also keep dense relations, so they can achieve better performances than UMU. Compared to U(i)M(j)U | i = j , the relatively bad performances of U(i)M(j)U || i  X  j | X  1 may be attributed to the noise introduced by some im-proper relation constraints (e.g., U(3)M(4)U, and U(4)M(3)U). The experiments illustrate that the weighted meta paths are really helpful to improve recommendation performances by more accurately revealing object relations.
Recently there are a lot of research on HIN in which ob-jects are of different types and links among objects represent different relations [11]. Many meta path based data mining tasks have been done in the past couple of years, includ-ing clustering [13], and classification [3] etc. Among these tasks, similarity measure in HIN is an important and basic function. Several path-based similarity measures have been proposed. For example, Sun et al. proposed PathSim [12] on symmetrical meta paths, and Shi et al. proposed a sym-metric measure HeteSim [10] on arbitrary meta paths. Con-ventional HIN does not consider the link attribute values, which makes that meta path fails to subtly and accurately capture the relation of objects.

Some researchers have began to be aware of the impor-tance of heterogeneous information for recommendations. Jamali and Lakshmanan [2] proposed HETEROMF to in-tegrate a general latent factor and context-dependent latent factors. Wang et al. [1] proposed the OptRank method to alleviate the cold start problem by utilizing heterogeneous information contained in social tagging system. Lippert et al. [6] proposed a collective matrix factorization method which shares the latent factor of same object types in differ-ent relations. Yu et al. [14] proposed a matrix factorization method with entity similarity regularization. More recently, Luo et al. [7] proposed a collaborative filtering-based so-cial recommendation method using heterogeneous relations. These methods usually focus on integrating heterogeneous information and only consider partial information available in HIN. The proposed SemRec considers more comprehen-sive information and focuses on exploiting path semantics.
The most similar work is HeteRec proposed by Yu et al. [15] which employs an implicit feedback recommendation model with systematically extracted latent features from heterogeneous network. However, it is different from Sem-Rec in many aspects. In order to solve the top k recom-mendation problem, HeteRec adopts the Bayesian ranking optimization technique to realize the personalized recom-mendation, and utilizes the meta path to capture path se-mantics. In order to solve the rating score prediction prob-lem, SemRec employs the novel weight regularization to real-ize personalized recommendation and avoid the rating spar-sity. More importantly, SemRec firstly applies the proposed weighted meta path to delicately depict the path semantics.
In this paper, we extend conventional HIN and meta path for information networks with attribute values on links, and apply them on recommender system. We propose weighted HIN and weighted meta path to more subtly depict ob-ject relations through distinguishing link attribute values, and put forwards the similarity measure strategy based on weighted meta path. Furthermore, we design a novel seman-tic path based personalized recommendation method Sem-Rec. The SemRec method not only flexibly integrates het-erogeneous information through setting meta paths, but also obtains the prioritized and personalized weights representing user preferences on paths. Extensive experiments illustrate the effectiveness of SemRec.
This work is supported in part by National Key Basic Re-search and Department (973) Program of China (No. 2013CB329606), the National Natural Science Foun-dation of China (No. 61375058, 71231002), the National High-tech R&amp;D Program (863 Program 2015AA050203, 2015AA050204), and the CCF-Tencent Open Fund. [1] W. Feng and J. Wang. Incorporating heterogeneous [2] M. Jamali and L. V. Lakshmanan. Heteromf: [3] M. Ji, J. Han, and M. Danilevsky. Ranking-based [4] N. Lao and W. Cohen. Fast query execution for [5] C. J. Lin. Projected gradient methods for [6] C. Lippert, S. H. Weber, Y. Huang, V. Tresp, [7] C. Luo, W. Pang, Z. Wang, and C. Lin. Hete-cf: [8] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King. [9] R. Salakhutdinov and A. Mnih. Probabilistic matrix [10] C. Shi, X. Kong, Y. Huang, P. S. Yu, and B. Wu. [11] Y. Sun and J. Han. Mining heterogeneous information [12] Y. Sun, J. Han, X. Yan, P. Yu, and T. Wu. Pathsim: [13] Y. Sun, B. Norick, J. Han, X. Yan, P. S. Yu, and [14] X. Yu, X. Ren, Q. Gu, Y. Sun, and J.Han.
 [15] X. Yu, X. Ren, Y. Sun, Q. Gu, B. Sturt, [16] Q. Yuan, L. Chen, and S. Zhao. Factorization vs.
