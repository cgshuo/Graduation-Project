 So-Young Park  X  Young-In Song  X  Hae-Chang Rim Abstract In this paper, we propose a segment-based annotation tool providing appropriate interactivity between a human annotator and an automatic parser. The proposed annotation tool provides the preview of a complete sentence structure suggested by the parser, and updates the preview whenever the annotator cancels or selects each segmentation point. Thus, the annotator can select the proper sentence segments maximizing parsing accuracy and minimizing human intervention. Experimental results show that the proposed tool allows the annotator to be able to reduce human intervention by approximately 39% compared with manual annota-tion. Sejong Korean treebank, one of the large scale treebanks, was constructed with the proposed annotation tool.
 Keywords Annotation tool Treebank Minimal human intervention Parsing 1 Introduction A treebank is a corpus annotated with syntactic information, and the structural analysis of each sentence is represented as a tree structure. This kind of corpus serves an extremely valuable resource for computational linguistics applications such as machine translation (Choi 2001 ), and is also proved to be useful in theoretical linguistics research (Kim and Kang 2002 ).

For the purpose of building a treebank, an annotator must spend considerable time and manual effort. Several annotation tools (Mitchell et al. 1993 ; Bohmova et al. 2001 ; Lim et al. 2004 ) have been developed in order to alleviate the burden of treebank construction. Most of them tend to combine human labor and machine automation, and can be classified into three types of approaches: (1) partial parsing, (2) post-editing, and (3) interactive.

Partial parsing approaches allow the annotator to reduce human intervention when constructing a sentence structure by assigning some unambiguous partial structures according to heuristic rules (Mitchell et al. 1993 ; Choi 2001 ). Because they automatically generate an unambiguous phrasal node (d) in Fig. 1 , an annotator builds three phrasal nodes, (a), (b), and (c), while a manual annotation tool is required to construct four new phrasal nodes, (a), (b), (c) and (d).

These partial parsing approaches are still inadequate to decrease human intervention because natural language is so ambiguous in itself. Besides, their accuracy is overly dependent on the heuristic rules written by grammarians (Hindle 1989 ). Moreover, modifying the heuristic rules, and changing the features used for constructing the heuristic rules is very difficult(Lim et al. 2004 ).

Post-editing approaches allow an annotator to confirm or correct a candidate sentence structure suggested by a parser instead of constructing a new sentence structure (Bohmova et al. 2001 ; Rambow et al. 2002 ) Given the correct structure in Fig. 1 , the annotator just confirms it. When the parser generates an incorrect reconstructs two phrasal nodes, (b) and (c).

As a result, given an obviously incorrect candidate, the number of human intervention significantly increase because they require the annotator both to cancel incorrect phrasal nodes in the candidate structure and to reconstruct correct phrasal nodes. Of course, the annotator can just accept the parser X  X  suggestions without any rigorous inspection (Kakkonen 2005 ).

Interactive approaches allow an annotator to interact with a parser by accepting or rejecting each suggested constituent in a bottom-up fashion (Plaehen and Brants 2000 ; Lim et al. 2004 ). As the number of human intervention increases, the parser can gradually reduce the number of possible candidate structures (Plaehen and Brants 2000 ). For example, these approaches can ask the annotator whether to accept  X  X  (VP eat cereal)  X  X  or not at the ambiguous point as shown in Fig. 1 . Because the answer is  X  X o, X  these approaches genera te the correct sentence structure in Fig. 1 .
However, the interactive approaches do not help the annotator imaging the complete sentence structure, resulting in greater human intervention because of some trivial mistakes. If an annotator accepts the incorrect phrase  X  X  (VP eat cereal)  X  X  without any rigorous inspection, he has to cancel two phrasal nodes (b 0 ) and (c 0 ), and reconstruct two phrasal nodes (b) and (c).

In this paper, we propose an annotation tool providing appropriate interactivity between a human annotator and an automatic parser for minimizing human intervention. For the purpose of reducing the annotator X  X  mistakes during the correction of sentence segments, it provides the preview of a complete sentence structure suggested by the parser, and updates the preview whenever the annotator cancels or selects each segmentation point. Given the incorrect segmented sentence  X  X  X  eat cereal/with milk. X  X , the annotator cancels and selects the segmentation points such as  X  X  X  eat/cereal with milk. X  X  Finally, the annotator confirms the correct sentence structure based on its preview.

The rest of this paper is organized as follows. Section 2 describes the proposed tree annotation tool using a segment-based parser, and Section 3 shows the extent to which it allows the annotator to be able to reduce human intervention in building a treebank. Finally, Section 4 concludes this paper. 2 Tree annotation tool The tree annotation tool using a segment-based parser is composed of the sentence segment annotation phase when dividing a sentence into segments, the inside-structure annotation phase when constructing the inside-structure of each segment, and the outside-structure annotation phase when constructing the outside-structure among all segments as shown on the left side of Fig. 2 . Besides, each phase consists of a generation step to show candidates suggested by the parser, a cancellation step to cancel incorrect constituents by an annotator, and a reconstruction step to reconstruct correct constituents. As described on the right side of Fig. 2 , the graphical user interface includes several tool boxes related to human intervention on the top. It also shows a part-of-speech tagged sentence and the sentence structure in the middle.
 2.1 Segment-based parser Although parsing accuracy is closely related to human intervention in the tree annotation tool, most automatic parsers still tend to show low accuracy on long sentences because some initial errors can propagate to a complete sentence structure (Li et al. 1990 ; Doi et al. 1993 ; Kim et al. 2000 ). In order to protect a parser from generating an obviously incorrect candidate, the proposed parser initially segments a sentence, and then an annotator confirms or corrects these sentence segments before generating a candidate sentence structure.

Figure 3 shows a sentence w 1 n divided into segments w seg 1 w seg 2 ; ... ; and w seg m where w seg i denotes a sequence of words belonging to the i th segment. These segments can be represented by each sentence segment state s i indicating either a segmentation point  X )( X  or null  X   X  /  X  as shown in Fig. 3 . Particularly, the first sentence segment state s 0 and the last sentence segment state s n always indicate  X ( X  and  X ) X , respectively. The full sentence structure T can be divided into some inside-structures T
Given a part-of-speech tagged sentence consisting of words w 1 n and their part-of-speech tags t 1 n , the segment-based parser estimates the probability of generating candidate sentence segments and a candidate sentence structure according to the previous equation. It then selects the best candidate with its highest probability. As described in this equation, the parsing problem of finding a complete sentence structure changes to three subproblems of sentence segmentation, inside-structure parsing, and outside-structure parsing. 2.2 Sentence segment annotation The sentence annotation phase is composed of three steps: the generation step, the cancellation step, and the reconstruction step. In order to allow the annotator to examine a complete structure in advance, the tree annotation tool provides the preview suggested by the segment-based parser in the generation step. In the cancellation step and the reconstruction step, it updates the preview satisfying new sentence segments whenever the annotator cancels incorrect segmentation points and selects new correct segmentation points. Therefore, the annotator can find the proper sentence segments to minimize human intervention and to maximize parsing accuracy based on the preview.

As illustrated on the top of Fig. 4 , the number of human interventions can vary according to sentence segments. Given the top left sentence structure (1), an annotator intervenes 22 times to cancel 11 incorrect phrasal nodes, (a) to (k), and reconstruct 11 phrasal nodes. Conversely, given the top right sentence structure (2), the annotator intervenes 10 times to cancel five incorrect phrasal nodes, (a 0 )to(e 0 ), and reconstruct five phrasal nodes. Therefore, the number of human interventions can be reduced from 22 to 17 by using the proposed tree annotation tool even if the tool additionally requires the annotator to cancel three incorrect segmentation points, (l) to (n), represented as very long horizontal lines, and select four new segmentation points, (f 0 )to(i 0 ). 2.3 Inside-structure annotation As shown on the middle left side (3) of Fig. 4 , given the correct sentence segments, the parser generates every candidate inside-structure, and the tool exhibits them in the generation step. In the cancellation step and the reconstruction step, the annotator cancels incorrect phrasal nodes, (a) to (c), and reconstructs correct phrasal nodes, (a 0 )to(c 0 ). 2.4 Outside-structure annotation In the generation step, the tool shows a candidate outside-structure based on correct inside-structures as described on the bottom left side (5) of Fig. 4 . Then, an annotator can cancel incorrect phrasal nodes, (a) and (b), and can reconstruct correct phrasal nodes, (a 0 ) and (b 0 ), to complete a correct sentence structure. 3 Experiments In order to examine how much the proposed annotation tool improves the annotating performance for building a Korean treebank, the tool with a segment-based parser is evaluated on 1,000 sentences in the Sejong Korean treebank where the parser is integrated with a segmentation model and a full parser (Park et al. 2004 ). Each sentence consists of 1 through 39 eojeols (a Korean spacing unit roughly corresponding to a word), and a sentence of the treebank is composed of 12.91 eojeols on average. 3.1 Prevention effect of error propagation For the purpose of finding out how much parsing accuracy is improved by correcting sentence segments before generating a complete structure, we compare the parsing accuracy of the two approaches: a fully automatic parsing approach ( Full Parsing ), and a segment-based parsing approach ( Total ) which allows an annotator to interact with an automatic parser. As represented in Table 1 , the segment-based parsing results are also evaluated in detail: the inside-structure parsing results ( Inside ) and the outside-structure parsing results ( Outside ). They are measured according to the following criteria: labeled precision ( LP ), labeled recall ( LR ), their harmonic mean ( F1 ), cross brackets per sentence ( CBs ), and exact matching ( EM ) (Goodman 1996 ). Besides, error rate is estimated by subtracting F1 from 100%.
Table 1 shows that Full Parsing allows some initial errors to propagate into more errors in a complete sentence structure. Roughly, the initial error rate 3.70% based on Inside  X  X  F1 increases up to 13.16% based on Full Parsing  X  X  F1 . On the other hand, the segment-based parsing prevents error propagation by interacting with an annotator. Therefore, the initial error rate 3.70% does not increase significantly as shown in the error rate 4.98% based on Total  X  X  F1 . Since the outside structures are so diverse, the parsing accuracy on Outside  X  X  F1 is not improved in comparison with Full Parsing although it generates candidate structures based on the given correct inside-structures. 3.2 Reduction effect of human intervention In order to examine how much the proposed annotation tool reduces manual effort, we compare the following three methods in terms of human interventions: a fully manual annotation tool ( Only Human ), the annotation tool using the fully automatic parsing method ( Full Parsing ), and the proposed annotation tool using the Segment-based Parsing method. For the purpose of clarifying the human intervention of each phase and each step, the human intervention is classified into six types as described in Fig. 5 where #Cancellations indicates the number of incorrect constituents cancelled by the annotator, and #Reconstructions indicates the number of constituents reconstructed by the annotator.
 As shown in Fig. 5 , Only Human involves expensive treebank construction costs. Compared with Only Human , the other two annotation tools can reduce roughly half of human intervention by using a parser although they require the intervention of canceling incorrect constituents. Compared with Full Parsing , which permits only post-editing, Segment-based Parsing 1 also decreases human intervention by up to 69.64% by allowing an annotator to correct the sentence segments before generating a candidate sentence structure. These results show that the interactivity between an annotator and an automatic parser is very useful in reducing the number of annotator X  X  interventions. 4 Conclusion In this paper, we propose an annotation tool consisting of the sentence segment annotation phase, the inside-structure annotation phase, and the outside-structure annotation phase. The proposed annotation tool, which can provide appropriate interactivity between an annotator and an automatic parser, has the following advantages.
 First, it can decrease human intervention by utilizing the segment-based parser. Experimental results show that the human intervention can be decreased by up to roughly 39% in the phrase structure framework because it allows an annotator to interact with a parser in three different phases during parsing.

Second, it can help the annotator select sentence segments to maximize parsing accuracy because it shows the preview of a candidate sentence structure suggested by the parser. Moreover, it updates the preview whenever the annotator cancels or selects each sentence segmentation point.

Third, it can prevent error propagation by correcting sentence segments in advance before generating the candidate sentence structure. Therefore, the initial error rate 3.70% does not increase significantly compared to the total error rate 4.98%.

For future work, we will develop a more elaborate sentence segmentation model to improve annotating efficiency, and a better annotation tool to help maintain the consistency of the treebank.
 References
