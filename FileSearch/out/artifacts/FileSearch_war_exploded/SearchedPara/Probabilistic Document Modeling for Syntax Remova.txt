 While the dominant problem in Information Re-trieval in the first part of the century was finding relevant information within a datastream that is ex-ponentially growing, the problem has arguably tran-sitioned from finding what we are looking for to sift-ing through it. We can now be quite confident that search engines like Google will return several pages relevant to our queries, but rarely does one have time to go through the enormous amount of data that is supplied. Therefore, automatic text summarization, which aims at providing a shorter representation of the salient parts of a large amount of information, has been steadily growing in both importance and popularity over the last several years. The summa-rization tracks at the Document Understanding Con-ference (DUC), and its successor the Text Analysis Conference (TAC) 1 , have helped fuel this interest by hosting yearly competitions to promote the advance-ment of automatic text summarization methods.
The tasks at the DUC and TAC involve taking a set of documents as input and outputting a short summary (either 100 or 250 words, depending on the year) containing what the system deems to be the most important information contained in the original documents. While a system matching human perfor-mance will likely require deep language understand-ing, most existing systems use an extractive, rather than abstractive, approach whereby the most salient sentences are extracted from the original documents and strung together to form an output summary. 2
In this paper, we present a summarization model based on (Griffiths et al., 2005) that integrates top-ics and syntax. We show that a simple model that separates syntax and content words and uses the content distribution as a representative model of the important words in a document set can achieve high performance in multi-document summariza-tion, competitive with state-of-the-art summariza-tion systems. 2.1 SumBasic Nenkova et al. (2006) describe SumBasic , a simple, yet high-performing summarization system based on term frequency. While the methodology underly-ing SumBasic departs very little from the pioneer-ing summarization work performed at IBM in the 1950 X  X  (Luhn, 1958), methods based on simple word statistics continue to outperform more complicated approaches to automatic summarization. 3 Nenkova et al. (2006) empirically showed that a word that ap-pears more frequently in the original text will be more likely to appear in a human generated sum-mary.

The SumBasic algorithm uses the empirical uni-gram probability distribution of the non-stop-words in the input such that for each word w , p ( w ) = n w N where n w is the number of occurrences of word w and N is the total number of words in the input. Sen-tences are then scored based on a composition func-tion CF (  X  ) that composes the score for the sentence based on its contained words. The most commonly used composition function adds the probabilities of the words in a sentence together, and then divides by the number of words in that sentence. However, to reduce redundancy, once a sentence has been chosen for summary inclusion, the probability distribution is recalculated such that any word that appears in the chosen sentence has its probability diminished. Sentences are continually marked for inclusion un-til the summary word-limit is reached. Despite its simplicity, SumBasic continues to be one of the top summarization performers in both manual and auto-matic evaluations (Nenkova et al., 2006). 2.2 Modeling Content and Syntax Griffiths et al. (2005) describe a composite gener-ative model that combines syntax and semantics. The semantic portion of the model is similar to La-tent Dirichlet Allocation and models long-range the-matic word dependencies with a set of topics, while short-range (sentence-wide) word dependencies are modeled with syntax classes using a Hidden Markov Model. The model has an HMM at its base where one of its syntax classes is replaced with an LDA-like topic model. When the model is in the semantic class state, it chooses a topic from the given docu-ment X  X  topic distribution, samples a word from that topic X  X  word distribution, and generates it. Other-wise, the model samples a word from the current syntax class in the HMM and outputs that word. Nenkova et al. (2006) show that using term fre-quency is a powerful approach to modeling human summarization. Nevertheless, for SumBasic to per-form well, stop-words must be removed from the composition scoring function. Because these words add nothing to the content of a summary, if they were not removed for the scoring calculation, the sentence scores would no longer provide a good fit with sentences that a human summarizer would find salient. However, by simply removing pre-selected words from a list, we will inevitably miss words that in different contexts would be considered non-content words. In contrast, if too many words are removed, the opposite problem appears and we may remove important information that would be useful in determining sentence scores. These problems are referred to as undercoverage and overcoverage , re-spectively.

To alleviate this problem, we would like to put less probability mass for our document set proba-bility distribution on non-content words and more on words with strong semantic meaning. One ap-proach that could achieve this would be to build sep-arate stopword lists for specific domains, and there are approaches to automatically build such lists (Lo et al., 2005). However, a list-based approach can-not take context into account and therefore, among other things, will encounter problems with poly-semy and synonymy. Another approach would be to use a part-of-speech (POS) tagger on each sentence and ignore all non-noun words because high-content words are almost exclusively nouns. One could also include verbs, adverbs, adjectives, or any combina-tion thereof, and therefore solve some of the context-based problems associated with using a stopword list. Nevertheless, this approach introduces deeper context-related problems of its own (a noun, for ex-ample, is not always a content word). A separate ap-proach would be to model the syntax and semantic words used in a document collection in an HMM, as in Griffiths et al. (2005), and use the semantic class as the content-word distribution for summarization. Our approach to summarization builds on Sum-Basic , and combines it with a similar approach to separating content and syntax distributions as that described in (Griffiths et al., 2005). Like (Haghighi and Vanderwende, 2009), (Daum  X  e and Marcu, 2006), and (Barzilay and Lee, 2004), we model words as being generated from latent distribu-tions. However, instead of background, content, and document-specific distributions, we model all words in a document set as being there for one of only two purposes: a semantic (content) purpose, or a syntac-tic (functional) purpose. We model the syntax class distributions using an HMM and model the content words using a simple language model. The princi-pal difference between our generative model and the one described in (Griffiths et al., 2005) is that we simplify the model by assuming that each document is generated solely from one topic distribution that is shared throughout each document set. This results in a smoothed language model for each document set X  X  content distribution where the counts from content words (as determined through inference) are used to determine their probability, and the syntax words are essentially discarded.

Therefore, our model describes the process of generating a document as traversing an HMM and emitting either a content word from a single topic X  X  (document set X  X ) content word distribution, or a syn-tax word from one of C corpus-wide syntax classes where C is a parameter input to the algorithm. More specifically, a document is generated as follows: 1. Choose a topic z corresponding to the given 2. For each word w i in document d Each class c i and topic z correspond to multinomial distributions over words, and transitions between classes follow the transition distribution  X  ( c i  X  1 When c i = 1 , a content word is emitted from the topic word distribution  X  ( z ) for the given doc-ument set z . Otherwise, a syntax word is emitted from the corpus-wide syntax word distribution  X  ( c i ) . The word distributions and transition vectors are all drawn from Dirichlet priors. A graphical model de-piction of this distribution is shown in Figure 1. A portion of an example HMM (from the DUC 2006 dataset) is shown in Figure 2 with the most proba-ble words in the content class in the middle and two syntax classes on either side of it. 3.1 Inference Because the posterior probability of the content (document set) word distributions and syntax class word distributions cannot be solved analytically, as with many topic modeling approaches, we appeal to an approximation. Following Griffiths et al. (2005), we use Markov Chain Monte Carlo (see, e.g. (Gilks et al., 1999)), or more specifically,  X  X ol-lapsed X  Gibbs sampling where the multinomial pa-rameters are integrated out. 4 We ran our sampler for between 500 and 5,000 iterations (though the dis-tributions would typically converge by 1,000 itera-tions), and chose between 5 and 10 (with negligible changes in results) for the cardinality of the classes set C . We leave optimizing the number of syntax classes, or determining them directly from the data, for future work. 3.2 Summarization Here we describe how we use the estimated topic and syntax distributions to perform extractive multi-document summarization. We follow the SumBasic algorithm, but replace the empirical unigram distri-bution of the document set with the learned topic distributions for the given documents. This models the effect of not only ignoring stop-words, but also reduces the amount of probability mass in the distri-bution placed on functional words that serve no se-mantic purpose and that would likely be less useful in a summary. Because this is a fully probabilistic model, we do not entirely  X  X gnore X  stop-words; in-stead, the model forces the probability mass of these words to the syntax classes.

For a given document set to be summarized, each sentence is assigned a score corresponding to the average probability of the words contained within it: Score ( S ) = 1 | S | P w  X  S p ( w ) . In SumBasic , p ( w i ) = n i N . In our model, SyntaxSum , p ( w i p ( w i |  X  ( z ) ) , where  X  ( z ) is a multinomial distribution over the corpus X  fixed vocabulary that puts high probabilities on content words that are used often in the given document set and low probabilities on words that are more important in other syntax classes. The middle node in Figure 2 is a true repre-sentation of the top words in the  X  ( z ) distribution for document set 43 in the DUC 2006 dataset. Here we describe our experiments and give quanti-tative results using the ROUGE automatic text sum-marization metric for unigram (R-1), bigram (R-2), and skip-4 bigram (R-SU4) recall both with and without (-s) stopwords removed (Lin, 2004). We tested our models on the popular DUC 2006 dataset which aids in model comparison and also on the more recent TAC 2010 dataset. The DUC 2006 dataset consists of 50 sets of 25 news articles each, whereas the TAC 2010 dataset consists of 46 sets of 10 news articles each. 5 For DUC 2006, summaries are a maximum of 250 words; for TAC 2010, they can be at most 100. Our approach is compared to using an a priori stopword list, and using a POS-tagger to build distributions of words coming from only a subset of the parts-of-speech. 4.1 SumBasic To cogently demonstrate the effect of ignoring non-semantic words in term frequency-based summa-rization, we implemented two initial versions of SumBasic . The first, SB-, does not ignore stop-words while the second, SumBasic , ignores all stop-words from a list included in the Python NLTK li-brary. 6 For SumBasic without stop-word removal ( SB-), we obtain 3.8 R-2 and 6.2 R-SU4 (with the -s flag). 7 With stop-words removed from the sentence scoring calculation ( SumBasic ), our results increase to 5.3 R-2 and 8.1 R-SU4, a significantly large in-crease. For complete ROUGE results of all of our tested models on DUC 2006, see Table 1. 4.2 POS Tagger Because the content distributions learned from our model seem to favor almost exclusively nouns (see Figure 2), another approach to building a seman-tically strong word distribution for determining salient sentences in summarization might be to ig-nore all words except nouns. This would avoid most stopwords (many of which are modeled as their own part-of-speech) and would serve as a simpler approach to finding important content. Neverthe-less, adjectives and verbs also often carry impor-tant semantic information. Therefore, we ran a POS tagger over the input sentences and tried selecting sentences based on word distributions that included only nouns; nouns and verbs; nouns and adjectives; and nouns, verbs, and adjectives. In each case, this approach performs either worse than or no bet-ter than SumBasic using a priori stopword removal. The nouns and adjectives distribution did the best, whereas the nouns and verbs were the worst. 4.3 Content and Syntax Model Finally, we test our model. Using the content dis-tributions found by separating the  X  X ontent X  words from the  X  X yntax X  words in our modified topics and syntax model, we replaced the unigram probabil-ity distribution p ( w ) of each document set with the learned content distribution for that document set X  X  topic,  X  ( z ) , where z is the topic for the given docu-ment set. Following this method, which we call SBH for  X  SumBasic with HMM X , our ROUGE scores in-crease considerably and we obtain 5.9 R-2 and 8.7 R-SU4 without stop-word removal. This is the high-est performing model we tested. Due to space con-straints, we omit full TAC 2010 results but R-2 and R-SU4 results without stopwords improved from SumBasic  X  X  7.3 and 8.6 to 8.0 and 9.1 , respectively, both of which were statistically significant increases. This paper has described using a domain-independent document modeling approach of avoiding low-content syntax words in an NLP task where high-content semantic words should be the principal focus. Specifically, we have shown that we can increase summarization performance by modeling the document set probability distribution using a hybrid LDA-HMM content and syntax model. We model a document set X  X  creation by separating content and syntax words through observing short-range and long-range word depen-dencies, and then use that information to build a word distribution more representative of content than either a simple stopword-removed unigram probability distribution, or one made up of words from a particular subset of the parts-of-speech. This is a very flexible approach to finding content words and works well for increasing performance of simple statistics-based text summarization. It could also, however, prove to be useful in any other NLP task where stopwords should be removed. Some future work includes applying this model to areas such as topic tracking and text segmentation, and coherently adjusting it to fit an n -gram modeling approach.
 William Darling is supported by an NSERC Doc-toral Postgraduate Scholarship. The authors would like to acknowledge the financial support provided from Ontario Centres of Excellence (OCE) through the OCE/Precarn Alliance Program. We also thank the anonymous reviewers for their helpful com-ments.

