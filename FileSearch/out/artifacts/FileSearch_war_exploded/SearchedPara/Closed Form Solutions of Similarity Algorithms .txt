 Algorithms defining similarities between objects of an information network are important to many IR tasks. SimRank algorithm and its variations are popularly used in many applications. Many fast algorithms are also deve loped. In this note, we first reformulate them as random walks on the network and express them using forward and backward transition probability in a matrix form. Second, we show that P-Rank ( SimRank is just the special case of P-Rank ) has a unique solution of ee T when decay factor c is equal to 1. We also show that SimFusion algorithm is a special case of P-Rank algorithm and prove that the similarity matrix of SimFusion is the product of PageRank vector. Our experiments on the web datasets show that for P-Rank the decay factor c doesn X  X  seriously affect the similarity accuracy and accuracy of P-Rank is also higher than SimFusion and SimRank . Categories and Subject Descriptors H.3.3 [ Information Systems ]: Information Search and Retrieval General Terms: Algorithms Keywords: Linkage Mining, Similarity Calculation SimRank [1] is a method of measuri ng linkage-based similarity between objects in a graph that models the object-to-object relationships for a particular domain. The intuition behind SimRank similar objects. However, SimRank only consider in-link information on the information network but in fact out-link information is also useful for the similarity calculation on the real network. Thus, P-Rank [2] extends SimRank intuition and consider both out-link and in-link information. The intuition of P-Rank is that  X  X wo objects are similar if (1) they are linked by the similar objects; and (2) they link the similar objects. X  We proceed to present the formula to compute P-Rank . Given a graph G ( V, E ) consisting of a set of nodes V and a set of links E , the computed recursively as follows: , where c is a constant decay factor, 0  X  c  X  1 and  X   X  [0, 1] is used to number of out-neighbor of node a. In addition, if  X  is equal to 1, P-Rank boils down to SimRank. A solution to P-Rank equation (1) can be reached by iteration to a fixed-point. For each iteration k , let S k similarity function and S k ( a , b ) be the iterative similarity score of pair ( a , b ) on k th iteration. The iteration process is started with S = I and iterate with Equation(2) is the sum of two items: the former item uses backward random walk to calculate the similarity score (i,e, walk in opposite direction of the hyperlinks) and the other item uses forward random walk to compute the similarity score(i,e, walk in direction of the hyperlinks). Theoretically, let L be the link matrix, i.e., L ij = 1 if there exists an edge pointing from node i to node j . Then, the backward transition probability B (1/| I ( i )|) L ij T and the forward transition probability T (1/| O ( i )|) L ij . Thus, we give the matrix expression of P-Rank . Lemma 1. Let T be the forward transition probability, B be the backward transition probability, I be identify matrix, S be the have S 0 = I, S k+1 = I +  X  ( cBS k B T ) offdiag A offdiag = A  X  diag ( A ) . We discuss the closed form solution of P-Rank, when c =1. Theorem 1. Let e = [1,1,...,1] n T and S the similarity matrix . If c = 1 , S = ee T is the unique result of P-Rank equation . Proof: When the iteration converges, S k = S k-1 =S. For c =1, We have S = I +  X  ( BSB T ) offdiag + (1- X  )( TST T is a transition matrix. Be definition Te=e . Thus e Te e T T T = ee T . Similarly, because B is a transition probability, Be e B T = ee T . Substituting S=ee T verifies that it is the solution . Also, diag( ee T ) = I satisfy the diagonal condition. Because of the diagonal dominance of the iteration, there is unique solution to the problem. Thus, if c = 1, S = ee T is unique solution of P-Rank .  X  According to theorem 1, if c = 1, similarity matrix will converged into ee T . Therefore, for the real world applications, we should choose the decay factor c less than 1. 
SimFusion [3] has been proposed as an effective in calculating the similarity score of objects in graphs. The motivation of SimFusion is similar to that of SimRank :  X  X he similarity between two objects can be reinforced by the similarity of related data X . SimFusion algorithm employs a non-negative, irreducible and row-stochastic matrix, denoted by P , to capture all the relationships between nodes. Each element P ij represents the relationship between objects i and j . In order to prevent similarity sinks, in SimFusion , for a node with no links to the other nodes in the graph, we set the elements in the corresponding row of relationship matrix P to 1/ n .( n is the number of nodes in the graph) SimFusion reinforcement equation is represented as follows: The iteration process starts with S 0 : S = I (3) To calculate S k+1 from S k , we have the following equation: S which contains all of ones , T is a forward transition matrix and  X  is a constant between 0 and 1 and set  X  = 0.85 in our experiment. This P is also identical to PageRank transition probability. If we don X  X  consider the el ements on the diagonals of the similarity matrix (in real world application we don X  X  care about that), SimFusion is the special case of P-Rank . When c = 1 and  X  = 0, P-Rank is reduced to SimFusion . According to the theorem 1, SimFusion algorithm will converge into ee T and that can X  X  be used for the real world application. That means SimFusion has some problems for its expression. Thus, we modify the SimFusion algorithm. The SimFusion score is computed with iterations as follow: The iteration process starts with S 0 : S = I (5) To calculate S k+1 from S k , we iterate using the equation: S = P T S k-1 P. (6) One of our main results of this paper is the following the closed-form solution of SimFusion : Theorem 2 . Let  X  be the stationary distribution of P. SimFusion scores S =  X  X  T . Proof: According to the definition of matrix P, P is a non-negative, irreducible and row-stochastic matrix. Thus,  X  T P =  X  T and P T  X  =  X  . Therefore , P T Thus , S =  X  X  T is the final similarity score .  X  According to theorem 2, we are eas y to see that similarity matrix of SimFusion is the product of PageRank vector. PageRank score of one node describes the possibility of a surfer staying at each node on the graph and SimFusion score of two nodes describes the possibility of two surfers meeting with each other starting respectively from these two nodes. Therefore, we can calculate PageRank vector first and then product these two PageRank vector together to get the finial similarity matrix. In this way, the time complex of this method is O ( Kn 2 ), but original SimFusion  X  X  time complex is O ( Kn 3 ). K is the iteration time and n is the number of objects. 
For evaluating our methods, we used WebKB datasets[4] and these web pages crawled from thes e four universities X  website are manually divided into seven classe s, such as students, faculty, staff, department, course, project and others. Considering that for a webpage w 1 in the graph, these algor ithms will return a rank list of relative pages. For each web page in the list, if this web page X  X  class is the same as page w 1 , these two pages are much related and grade 2 at that position; otherw ise grade 0. Then, we use the NDCG[5] to evaluate the performance of similarity ranking list. We calculate NDCG with in 10 related web pages for each object in each dataset and get the average score to evaluate the performance in the experiments. The detail information about datasets shows at tab. 1. this experiment, we vary c from 0.05 to 0.95. In fact, the effect of different decay factor c is not very obvious and the scope of for P-Rank . Fig.1 also shows that when c is between 0.25 to 0.45, SimRank will receive the highest scores and when c is between 0.55 to 0.9, P-Rank will get the highest scores for these datasets. We also test the accuracy of SimFusion algorithm. In tab. 2, it shows that the accuracy of SimFusion is lower than SimRank and P-Rank . 
In this paper, we presented the closed form solution of P-Rank ( c = 1) and SimFusion . Firstly, when c = 1, S = ee result of P-Rank equation. In addition, in our experiment, the effect of different decay factor c is not very obvious. Secondly, when c = 1 and  X  = 0, P-Rank is reduced to SimFusion . That means S = ee T is the final solution of SimFusion . Thus, we modify the SimFusion and give the closed form solution of SimFusion algorithm. Acknowledgements . Work supported by NSF-DMS-0915228, NSF-CCF-0939187, University of Texas Regent STARS Award. 
