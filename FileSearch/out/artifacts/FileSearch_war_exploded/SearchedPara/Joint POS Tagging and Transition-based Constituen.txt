 Constituent parsing is one of the most fundamen-tal tasks in Natural Language Processing (NLP). It seeks to uncover the underlying recursive phrase structure of sentences. Most of the state-of-the-art parsers are based on the PCFG paradigm and chart-based decoding algorithms (Collins, 1999; Charniak, 2000; Petrov et al., 2006). Chart-based parsers perform exhaustive search with dynam-ic programming, which contributes to their high accuracy, but they also suffer from higher run-time complexity and can only exploit simple local structural information.
 Transition-based constituent parsing (Sagae and Lavie, 2005; Wang et al., 2006; Zhang and Clark, 2009) is an attractive alternative. It utilizes a se-ries of deterministic shift-reduce decisions to con-struct syntactic trees. Therefore, it runs in linear time and can take advantage of arbitrarily complex structural features from already constructed sub-trees. The downside is that they only search a tiny fraction of the whole space and are therefore com-monly considered to be less accurate than chart-based parsers. Recent studies (Zhu et al., 2013; Zhang et al., 2013) show, however, that this ap-proach can also achieve the state-of-the-art perfor-mance with improved training procedures and the use of additional source of information as features.
However, there is still room for improvemen-t for these state-of-the-art transition-based con-stituent parsers. First, POS tagging is typically performed separately as a preliminary step, and POS tagging errors will propagate to the parsing process. This problem is especially severe for lan-guages where the POS tagging accuracy is rela-tively low, and this is the case for Chinese where there are fewer contextual clues that can be used to inform the tagging process and some of the tagging decisions are actually influenced by the syntactic structure of the sentence. This creates a chicken and egg problem that needs to be ad-dressed when designing a parsing model. Second, due to the existence of unary rules in constituen-t trees, competing candidate parses often have d-ifferent number of actions, and this increases the disambiguation difficulty for the parsing model. Third, transition-based parsers have the freedom to define arbitrarily complex structural features, but this freedom has not fully been taken advan-tage of and most of the present approaches only use simple structural features.

In this paper, we address these drawbacks to improve the transition-based constituent parsing for Chinese. First, we integrate POS tagging in-to the parsing process and jointly optimize these two processes simultaneously. Because non-local syntactic information is now available to POS tag determination, the accuracy of POS tagging im-proves, and this will in turn improve parsing ac-curacy. Second, we propose a novel state align-ment strategy to align candidate parses with dif-ferent action sizes during beam-search decoding. With this strategy, parser states and their unary extensions are put into the same beam, therefore the parsing model could decide whether or not to use unary actions within local decision beam-s. Third, we take into account two groups of complex structural features that have not been previously used in transition-based parsing: non-local features (Charniak and Johnson, 2005) and semi-supervised word cluster features (Koo et al., 2008). With the help of the non-local features, our transition-based parsing system outperform-s all previous single systems in Chinese. After integrating semi-supervised word cluster features, the parsing accuracy is further improved to 86.3% when trained on CTB 5.1 and 87.1% when trained on CTB 6.0, and this is the best reported perfor-mance for Chinese.

The remainder of this paper is organized as fol-lows: Section 2 introduces the standard transition-based constituent parsing approach. Section 3 describes our three improvements to standard transition-based constituent parsing. We discuss and analyze the experimental results in Section 4. Section 5 discusses related work. Finally, we con-clude this paper in Section 6. This section describes the transition-based con-stituent parsing model, which is the basis of Sec-tion 3 and the baseline model in Section 4. 2.1 Transition-based Constituent Parsing A transition-based constituent parsing model is a quadruple C = ( S,T,s 0 ,S t ) , where S is a set of parser states (sometimes called configurations ), T is a finite set of actions , s 0 is an initialization func-tion to map each input sentence into a unique ini-tial state , and S t  X  S is a set of terminal states . Each action t  X  T is a transition function to tran-sit a state into a new state. A parser state s  X  S is defined as a tuple s = (  X , X  ) , where  X  is a stack which is maintained to hold partial subtrees that are already constructed, and  X  is a queue which is used for storing word-POS pairs that remain un-processed. In particular, the initial state has an Figure 1: Two constituent trees for an example sentence w 0 w 1 w 2 with POS tags abc . The cor-responding action sequences are given below, the spans of each nodes are annotated and the head n-odes are written with Bold font type. empty stack  X  and a queue  X  containing the entire input sentence (word-POS pairs), and the terminal states have an empty queue  X  and a stack  X  con-taining only one complete parse tree. The task of transition-based constituent parsing is to scan the input POS-tagged sentence from left to right and perform a sequence of actions to transform the ini-tial state into a terminal state.

In order to construct lexicalized constituen-t parse trees, we define the following actions for the action set T according to (Sagae and Lavie, 2005; Wang et al., 2006; Zhang and Clark, 2009):  X  S HIFT ( sh ): remove the first word-POS pair  X  R EDUCE -UNARY -X ( ru-x ): pop the top  X  R EDUCE -BINARY -{ L / R } -X ( rl / rr-x ): pop
With these actions, our parser can process trees with unary and binary branches easily. For exam-ple, in Figure 1, for the input sentence w 0 w 1 w 2 and its POS tags abc , our parser can construct t-wo parse trees using action sequences given below these trees. However, parse trees in Treebanks of-ten contain an arbitrary number of branches. To
Type Feature Templates unigrams bigrams trigrams Table 1: Baseline features, where p i represents the i th subtree in the stack  X  and q i denotes the i th item in the queue  X  . w refers to the head lexicon, t refers to the head POS, and c refers to the con-stituent label. p il and p ir refer to the left and right child for a binary subtree p i , and p iu refers to the child of a unary subtree p i . process such trees, we employ binarization and debinarization processes described in Zhang and Clark (2009) to transform multi-branch trees into binary-branch trees and restore the generated bi-nary trees back to their original forms. 2.2 Modeling, Training and Decoding To determine which action t  X  T should the parser perform at a state s  X  S , we use a linear model to score each possible  X  s,t  X  combination: score ( s,t ) = ~w  X   X  ( s,t ) = where  X  ( s,t ) is the feature function used for map-ping a state-action pair into a feature vector, and ~w is the weight vector. The score of a parser state s is the sum of the scores for all state-action pairs in the transition path from the initial state to the current state. Table 1 lists the feature templates used in our baseline parser, which is adopted from Zhang and Clark (2009). To train the weight vec-tor ~w , we employ the averaged perceptron algo-rithm with early update (Collins and Roark, 2004).
We employ the beam search decoding algorith-m (Zhang and Clark, 2009) to balance the trade-off between accuracy and efficiency. Algorithm 1 gives details of the process. In the algorithm, we maintain a beam (sometimes called agenda ) to keep k best states at each step. The first beam 0 Algorithm 1 Beam-search Constituent Parsing Input: A POS-tagged sentence, beam size k . Output: A constituent parse tree. 1: beam 0  X  X  s 0 } . initialization 2: i  X  0 . step index 3: loop 4: P  X  X } . a priority queue 5: while beam i is not empty do 6: s  X  P OP ( beam i ) 7: for all possible t  X  T do 8: s new  X  apply t to s 9: score s new with E.q (1) 10: insert s new into P 11: beam i +1  X  k best states of P 15: i  X  i + 1 is initialized with the initial state s 0 (line 1). At step i , each of the k states in beam i is extended by applying all possible actions (line 5-10). For all newly generated states, only the k best states are preserved for beam i +1 (line 11). The decod-ing process repeats until the highest scored state in beam i +1 reaches a terminal state (line 12-14). To address the drawbacks of the standard transition-based constituent parsing model (de-scribed in Section 1), we propose a model to joint-ly solve POS tagging and constituent parsing with non-local features. 3.1 Joint POS Tagging and Parsing POS tagging is often taken as a preliminary step for transition-based constituent parsing, therefore the accuracy of POS tagging would greatly affec-t parsing performance. In our experiment (de-scribed in Section 4.2), parsing accuracy would decrease by 8.5% in F 1 in Chinese parsing when using automatically generated POS tags instead of gold-standard ones. To tackle this issue, we inte-grate POS tagging into the transition-based con-stituent parsing process and jointly optimize these two processes simultaneously. Inspired from Ha-tori et al. (2011), we modify the sh action by as-signing a POS tag for the word when it is shifted:  X  S HIFT -X ( sh-x ): remove the first word from With such an action, POS tagging becomes a nat-ural part of transition-based parsing. However, some feature templates in Table 1 become unavail-able, because POS tags for the look-ahead words are not specified yet under the joint framework. For example, for the template q 0 wt , the POS tag of the first word q 0 in the queue  X  is required, but it is not specified yet at the present state.
To overcome the lack of look-ahead POS tags, we borrow the concept of delayed features origi-nally developed for dependency parsing (Hatori et al., 2011). Features that require look-ahead POS tags are defined as delayed features. In these fea-tures, look-ahead POS tags are taken as variables. During parsing, delayed features are extracted and passed from one state to the next state. When a sh-x action is performed, the look-ahead POS tag of some delayed features is specified, there-fore these delayed features can be transformed in-to normal features (by replacing variable with the newly specified POS tag). The remaining delayed features will be transformed similarly when their look-ahead POS tags are specified during the fol-lowing parsing steps. 3.2 State Alignment Assuming an input sentence contains n words, in order to reach a terminal state, the initial state re-quires n sh-x actions to consume all words in  X  , and n  X  1 rl / rr-x actions to construct a com-plete parse tree by consuming all the subtrees in  X  . However, ru-x is a very special action. It on-ly constructs a new unary node for the subtree on top of  X  , but does not consume any items in  X  or  X  . As a result, the number of ru-x actions varies among terminal states for the same sentence. For example, the parse tree in Figure 1a contains no ru-x action, while the parse tree for the same in-put sentence in Figure 1b contains four ru-x ac-tions. This makes the lengths of complete action sequences very different, and the parsing model has to disambiguate among terminal states with varying action sizes. Zhu et al. (2013) proposed a padding method to align terminal states containing different number of actions. The idea is to append some IDLE actions to terminal states with shorter action sequence, and make sure all terminal states contain the same number of actions (including I-DLE actions).
 Algorithm 2 Beam-search with State Alignment Input: A word-segmented sentence, beam size k . Output: A constituent parse tree. 1: beam 0  X  X  s 0 } . initialization 2: for i  X  0 to 2 n  X  1 do . n is sentence length 3: P 0  X  X } , P 1  X  X } . two priority queues 4: while beam i is not empty do 5: s  X  P OP ( beam i ) 6: for t  X  X  sh-x , rl-x , rr-x } do 7: s new  X  apply t to s 8: score s new with E.q (1) 9: insert s new into P 0 10: for all state s in P 0 do 11: for all possible t  X  X  ru-x } do 12: s new  X  apply t to s 13: score s new with E.q (1) 14: insert s new into P 1 15: insert all states of P 1 into P 0 16: beam i +1  X  k best states of P 0 17: return the best state in beam 2 n  X  1
We propose a novel method to align states dur-ing the parsing process instead of just aligning ter-minal states like Zhu et al. (2013). We classify all the actions into two groups according to whether they consume items in  X  or  X  . sh-x , rl-x , and rr-x belong to consuming actions, and ru-x be-longs to non-consuming action. Algorithm 2 gives the details of our method. It is based on the beam search decoding algorithm described in Algorith-m 1. Different from Algorithm 1, Algorithm 2 is guaranteed to perform 2 n  X  1 parsing steps for an input sentence containing n words (line 2), and divides each parsing step into two parsing phas-es. In the first phase (line 4-9), each of the k s-tates in beam i is extended by consuming action-s. In the second phase (line 10-14), each of the newly generated states is further extended by non-consuming actions. Then, all these states extend-ed by both consuming and non-consuming action-s are considered together (line 15), and only the k highest-scored states are preserved for beam i +1 (line 16). After these 2 n  X  1 parsing steps, the highest scored state in beam 2 n  X  1 is returned as the final result (line 17). Figure 2 shows the states aligning process for the two trees in Figure 1. We find that our new method aligns states with their ru-x extensions in the same beam , therefore the parsing model could make decisions on whether using ru-x actions or not within local decision Figure 2: State alignment for the two trees in Fig-ure 1, where s 0 is the initial state, T 0 and T 1 are terminal states corresponding to the two trees in Figure 1. For clarity, we represent each state as a rectangle with the label of top subtree in the stack  X  . We also denote sh-x with  X  , ru-x with  X  or  X  , rl-x with % , and rr-x with &amp; . beams. 3.3 Feature Extension One advantage of transition-based constituen-t parsing is that it is capable of incorporating ar-bitrarily complex structural features from the al-ready constructed subtrees in  X  and unprocessed words in  X  . However, all the feature templates given in Table 1 are just some simple structural features. To further improve the performance of our transition-based constituent parser, we con-sider two group of complex structural features: non-local features (Charniak and Johnson, 2005; Collins and Koo, 2005) and semi-supervised word cluster features (Koo et al., 2008).

Table 2 lists all the non-local features we want to use. These features have been proved very help-ful for constituent parsing (Charniak and Johnson, 2005; Collins and Koo, 2005). But almost all pre-vious work considered non-local features only in parse reranking frameworks. Instead, we attempt to extract non-local features from newly construct-ed subtrees during the decoding process as they become incrementally available and score newly generated parser states with them. One difficul-ty is that the subtrees built by our baseline pars-er are binary trees (only the complete parse tree is debinarized into its original multi-branch form), but most of the non-local features need to be ex-tracted from their original multi-branch forms. To resolve this conflict, we integrate the debinariza-tion process into the parsing process, i.e., when a Table 2: Non-local features for constituent pars-ing. new subtree is constructed during parsing, we de-binarize it immediately if it is not rooted with an intermediate node 1 . The other subtrees for sub-sequent parsing steps will be built based on these debinarized subtrees. After the modification, our parser can extract non-local features incrementally during the parsing process.

Semi-supervised word cluster features have been successfully applied to many NLP tasks (Miller et al., 2004; Koo et al., 2008; Zhu et al., 2013). Here, we adopt such features for our transition-based constituent parser. Given a large-scale unlabeled corpus (word segmentation should be performed), we employ the Brown cluster al-gorithm (Liang, 2005) to cluster all words into a binary tree. Within this binary tree, words ap-pear as leaves, left branches are labeled with 0 and right branches are labeled with 1. Each word can be uniquely identified by its path from the root, and represented as a bit-string. By using various length of prefixes of the bit-string, we can produce word clusters of different granularities (Miller et al., 2004). Inspired from Koo et al. (2008), we employ two types of word clusters: (1) taking 4 bit-string prefixes of word clusters as replacements of POS tags, and (2) taking 8 bit-string prefixes as replacements of words. Using these two types of clusters, we construct semi-supervised word clus-ter features by mimicking the template structure of the original baseline features in Table 1. 4.1 Experimental Setting We conducted experiments on the Penn Chinese Treebank (CTB) version 5.1 (Xue et al., 2005): Articles 001-270 and 400-1151 were used as the training set, Articles 301-325 were used as the development set, and Articles 271-300 were used as the test set. Standard corpus preparation step-s were performed before our experiments: emp-ty nodes and functional tags were removed, and the unary chains were collapsed to single unary rules as Harper and Huang (2011). To build word clusters, we used the unlabeled Chinese Gigaword (LDC2003T09) and conducted Chinese word seg-mentation using a CRF-based segmenter.
 formance. The metrics include labeled precision ( LP ), labeled recall ( LR ), bracketing F 1 and POS tagging accuracy. We set the beam size k to 16, which brings a good balance between efficiency and accuracy. We tuned the optimal number of iterations of perceptron training algorithm on the development set. 4.2 Pipeline Approach vs Joint POS Tagging In this subsection, we conducted some experi-ments to illustrate the drawbacks of the pipeline approach and the advantages of our joint approach. We built three parsing systems: Pipeline-Gold system is our baseline parser (described in Sec-tion 2) taking gold-standard POS tags as input; Pipeline system is our baseline parser taking as input POS tags automatically assigned by Stan-ford POS Tagger 3 ; and JointParsing system is our joint POS tagging and transition-based pars-ing system described in subsection 3.1. We trained these three systems on the training set and evalu-ated them on the development set. The second, third and forth rows in Table 3 show the parsing performances. We can see that the parsing F 1 de-creased by about 8.5 percentage points in F 1 score when using automatically assigned POS tags in-stead of gold-standard ones, and this shows that the pipeline approach is greatly affected by the quality of its preliminary POS tagging step. Af-ter integrating the POS tagging step into the pars-ing process, our JointParsing system improved the POS tagging accuracy to 94.8% and parsing F 1 to 85.8%, which are significantly better than the Pipeline system. Therefore, the joint parsing ap-proach is much more effective for transition-based constituent parsing. 4.3 State Alignment Evaluation We built two new systems to verify the effective-ness of our state alignment strategy proposed in System LP LR F 1 POS Pipeline-Gold 92.2 92.5 92.4 100 Pipeline 83.9 83.8 83.8 93.0 JointParsing 85.1 86.6 85.8 94.8 Padding 85.4 86.4 85.9 94.8 StateAlign 86.9 85.9 86.4 95.2 Nonlocal 88.0 86.5 87.2 95.3 Cluster 89.0 88.3 88.7 96.3 Nonlocal&amp;Cluster 89.4 88.7 89.1 96.2 Table 3: Parsing performance on Chinese devel-opment set.
 Subsection 3.2. The first system Padding extend-s our JointParsing system by aligning terminal s-tates with the padding strategy proposed in Zhu et al. (2013), and the second system StateAlign ex-tends the JointParsing system with our state align-ment strategy. The fifth and sixth rows of Table 3 give the performances of these two systems. Com-pared with the JointParsing system which does not employ any alignment strategy, the Padding sys-tem only achieved a slight improvement on pars-ing F 1 score, but no improvement on POS tag-ging accuracy. In contrast, our StateAlign system achieved an improvement of 0.6% on parsing F 1 s-core and 0.4% on POS tagging accuracy. All these results show us that our state alignment strategy is more helpful for beam-search decoding. 4.4 Feature Extension Evaluation In this subsection, we examined the usefulness of the new non-local features and the semi-supervised word cluster features described in Sub-section 3.3. We built three new parsing system-s based on the StateAlign system: Nonlocal sys-tem extends the feature set of StateAlign system with non-local features, Cluster system extends the feature set with semi-supervised word cluster features, and Nonlocal&amp;Cluster system extend the feature set with both groups of features. Parsing performances of the three systems are shown in the last three rows of Table 3. Compared with the StateAlign system which takes only the baseline features, the non-local features improved parsing F 1 by 0.8%, while the semi-supervised word clus-ter features result in an improvement of 2.3% in parsing F 1 and an 1.1% improvement on POS tag-ging accuracy. When integrating both groups of features, the final parsing F 1 reaches 89.1%. Al-l these results show that both the non-local fea-tures and the semi-supervised features are helpful for our transition-based constituent parser. 4.5 Final Results on Test Set In this subsection, we present the performances of our systems on the CTB test set. The correspond-ing results are listed in the top rows of Table 4. We can see that all these systems maintain a simi-lar relative relationship as they do on the develop-ment set, which shows the stability of our systems.
To further illustrate the effectiveness of our systems, we compare them with some state-of-the-art systems. We group parsing systems into three categories: single systems, reranking sys-tems and semi-supervised systems. Our Pipeline , JointParsing , Padding , StateAlign and Nonlocal systems belong to the category of single system-s, because they don X  X  utilize any extra process-ing steps or resources. Our Cluster and Nonlo-cal&amp;Cluster systems belong to semi-supervised systems, because both of them have employed semi-supervised word cluster features. The pars-ing performances of state-of-the-art systems are shown in the bottom rows of Table 4. We can see that the final F 1 of our Nonlocal system reached 84.9%, and it outperforms state-of-the-art single systems by more than 1.6%. As far as we know, this is the best result on the CTB test set acquired by single systems. Our Nonlocal&amp;Cluster sys-tem further improved the parsing F 1 to 86.3%, and it outperforms all reranking systems and semi-supervised systems. To our knowledge, this is the
Table 5: Parsing performance based on CTB 6. best reported performance in Chinese parsing. All previous experiments were conducted on CTB 5. To check whether more labeled data can further improve our parsing system, we evaluat-ed our Nonlocal&amp;Cluster system on the Chinese TreeBank version 6.0 (CTB6), which is a super set of CTB5 and contains more annotated data. We used the same development set and test set as CTB5, and took all the remaining data as the new training set. Table 5 shows the parsing per-formances on CTB6. Our Nonlocal&amp;Cluster sys-tem improved the final F 1 to 87.1%, which is 1.9% better than the state-of-the-art performance on CT-B6 (Huang and Harper, 2009). Compared with it-s performance on CTB5 (in Table 4), our Nonlo-cal&amp;Cluster system also got 0.8% improvemen-t. All these results show that our approach can become more powerful when given more labeled training data. 4.6 Error Analysis To better understand the linguistic behavior of our systems, we employed the berkeley-parser-egorize the errors. Table 6 presents the average number of errors for each error type by our pars-ing systems. We can see that almost all the Worst numbers are produced by the Pipeline system. The JointParsing system reduced errors of all types produced by the Pipeline system except for the coordination error type (Coord). The StateAlign system corrected a lot of the NP-internal errors (NP Int.). The Nonlocal system and the Cluster system produced similar numbers of errors for al-l error types. The Nonlocal&amp;Cluster system pro-duced the Best numbers for all the error types. NP-internal errors are still the most frequent error type in our parsing systems.

Table 7 presents the statistics of frequent POS tagging error patterns. We can see that JointPars-ing system disambiguates { VV, NN } and { DEC, DEG } better than Pipeline system, but cannot deal with the NN  X  JJ pattern very well. StateAlign system got better results in most of the patterns, but cannot disambiguate { NR, NN } well. Non-local&amp;Cluster system got the best results in dis-ambiguating the most ambiguous POS tag pairs of { VV, NN } , { DEC, DEG } , { JJ, NN } and { NN, N-R } . Joint POS tagging with parsing is not a new idea. In PCFG-based parsing (Collins, 1999; Charniak, 2000; Petrov et al., 2006), POS tagging is consid-ered as a natural step of parsing by employing lex-ical rules. For transition-based parsing, Hatori et al. (2011) proposed to integrate POS tagging with dependency parsing. Our joint approach can be seen as an adaption of Hatori et al. (2011) X  X  ap-proach for constituent parsing. Zhang et al. (2013) proposed a transition-based constituent parser to process an input sentence from the character level. However, manual annotation of the word-internal structures need to be added to the original Tree-bank in order to train such a parser.

Non-local features have been successfully used for constituent parsing (Charniak and Johnson, 2005; Collins and Koo, 2005; Huang, 2008). However, almost all of the previous work use non-local features at the parse reranking stage. The reason is that the single-stage chart-based parser cannot use non-local structural features. In con-trast, the transition-based parser can use arbitrari-ly complex structural features. Therefore, we can concisely utilize non-local features in a single-stage parsing system. In this paper, we proposed three improvements to transition-based constituent parsing for Chinese. First, we incorporated POS tagging into transition-based constituent parsing to resolve the error prop-agation problem of the pipeline approach. Second, we proposed a state alignment strategy to align competing decision sequences that have different number of actions. Finally, we enhanced our pars-ing model by enlarging the feature set with non-local features and semi-supervised word cluster features. Experimental results show that all these methods improved the parsing performance sub-stantially, and the final performance of our parsing system outperformed all state-of-the-art systems. We thank three anonymous reviewers for their cogent comments. This work is funded by the DAPRA via contract HR0011-11-C-0145 entitled /
Linguistic Resources for Multilingual Process-ing 0 . All opinions expressed here are those of the authors and do not necessarily reflect the views of DARPA.

