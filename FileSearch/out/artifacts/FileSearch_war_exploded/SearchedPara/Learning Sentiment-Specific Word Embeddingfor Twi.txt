 Twitter sentiment classification has attracted in-creasing research interest in recent years (Jiang et al., 2011; Hu et al., 2013). The objective is to clas-sify the sentiment polarity of a tweet as positive, negative or neutral. The majority of existing ap-proaches follow Pang et al. (2002) and employ ma-chine learning algorithms to build classifiers from tweets with manually annotated sentiment polar-ity. Under this direction, most studies focus on designing effective features to obtain better clas-sification performance. For example, Mohammad et al. (2013) build the top-performed system in the Twitter sentiment classification track of SemEval 2013 (Nakov et al., 2013), using diverse sentiment lexicons and a variety of hand-crafted features.
Feature engineering is important but labor-intensive. It is therefore desirable to discover ex-planatory factors from the data and make the learn-ing algorithms less dependent on extensive fea-ture engineering (Bengio, 2013). For the task of sentiment classification, an effective feature learn-ing method is to compose the representation of a sentence (or document) from the representation-s of the words or phrases it contains (Socher et al., 2013b; Yessenalina and Cardie, 2011). Ac-cordingly, it is a crucial step to learn the word representation (or word embedding), which is a dense, low-dimensional and real-valued vector for a word. Although existing word embedding learn-ing algorithms (Collobert et al., 2011; Mikolov et al., 2013) are intuitive choices, they are not effec-tive enough if directly used for sentiment classi-fication. The most serious problem is that tradi-tional methods typically model the syntactic con-text of words but ignore the sentiment information of text. As a result, words with opposite polari-ty, such as good and bad , are mapped into close vectors. It is meaningful for some tasks such as pos-tagging (Zheng et al., 2013) as the two words have similar usages and grammatical roles, but it becomes a disaster for sentiment analysis as they have the opposite sentiment polarity.

In this paper, we propose learning sentiment-specific word embedding ( SSWE ) for sentiment analysis. We encode the sentiment information in-to the continuous representation of words, so that it is able to separate good and bad to opposite ends of the spectrum. To this end, we extend the ex-isting word embedding learning algorithm (Col-lobert et al., 2011) and develop three neural net-works to effectively incorporate the supervision from sentiment polarity of text (e.g. sentences or tweets) in their loss functions. We learn the sentiment-specific word embedding from tweet-s, leveraging massive tweets with emoticons as distant-supervised corpora without any manual an-notations. These automatically collected tweet-s contain noises so they cannot be directly used as gold training data to build sentiment classifier-s, but they are effective enough to provide weak-ly supervised signals for training the sentiment-specific word embedding.

We apply SSWE as features in a supervised learning framework for Twitter sentiment classi-fication, and evaluate it on the benchmark dataset in SemEval 2013. In the task of predicting posi-tive/negative polarity of tweets, our method yields 84.89% in macro-F1 by only using SSWE as fea-ture, which is comparable to the top-performed system based on hand-crafted features (84.70%). After concatenating the SSWE feature with ex-isting feature set, we push the state-of-the-art to 86.58% in macro-F1. The quality of SSWE is al-so directly evaluated by measuring the word sim-ilarity in the embedding space for sentiment lexi-cons. In the accuracy of polarity consistency be-tween each sentiment word and its top N closest words, SSWE outperforms existing word embed-ding learning algorithms.

The major contributions of the work presented in this paper are as follows.  X  We develop three neural networks to learn  X  To our knowledge, this is the first work that  X  We release the sentiment-specific word em-In this section, we present a brief review of the related work from two perspectives, Twitter senti-ment classification and learning continuous repre-sentations for sentiment classification. 2.1 Twitter Sentiment Classification Twitter sentiment classification, which identifies the sentiment polarity of short, informal tweets, has attracted increasing research interest (Jiang et al., 2011; Hu et al., 2013) in recent years. Gen-erally, the methods employed in Twitter sentiment classification follow traditional sentiment classifi-cation approaches. The lexicon-based approaches (Turney, 2002; Ding et al., 2008; Taboada et al., 2011; Thelwall et al., 2012) mostly use a dictio-nary of sentiment words with their associated sen-timent polarity, and incorporate negation and in-tensification to compute the sentiment polarity for each sentence (or document).

The learning based methods for Twitter sen-timent classification follow Pang et al. (2002) X  X  work, which treat sentiment classification of texts as a special case of text categorization issue. Many studies on Twitter sentiment classification (Pak and Paroubek, 2010; Davidov et al., 2010; Bar-bosa and Feng, 2010; Kouloumpis et al., 2011; Zhao et al., 2012) leverage massive noisy-labeled tweets selected by positive and negative emoticon-s as training set and build sentiment classifiers di-rectly, which is called distant supervision (Go et al., 2009). Instead of directly using the distant-supervised data as training set, Liu et al. (2012) adopt the tweets with emoticons to smooth the lan-guage model and Hu et al. (2013) incorporate the emotional signals into an unsupervised learning framework for Twitter sentiment classification.
Many existing learning based methods on Twit-ter sentiment classification focus on feature engi-neering. The reason is that the performance of sen-timent classifier being heavily dependent on the choice of feature representation of tweets. The most representative system is introduced by Mo-hammad et al. (2013), which is the state-of-the-art system (the top-performed system in SemEval 2013 Twitter Sentiment Classification Track) by implementing a number of hand-crafted features. Unlike the previous studies, we focus on learning discriminative features automatically from mas-sive distant-supervised tweets. 2.2 Learning Continuous Representations for Pang et al. (2002) pioneer this field by using bag-of-word representation, representing each word as a one-hot vector. It has the same length as the size of the vocabulary, and only one dimension is 1, with all others being 0. Under this assumption, many feature learning algorithms are proposed to obtain better classification performance (Pang and Lee, 2008; Liu, 2012; Feldman, 2013). However, the one-hot word representation cannot sufficient-ly capture the complex linguistic characteristics of words.

With the revival of interest in deep learn-ing (Bengio et al., 2013), incorporating the con-tinuous representation of a word as features has been proving effective in a variety of NLP tasks, such as parsing (Socher et al., 2013a), language modeling (Bengio et al., 2003; Mnih and Hin-ton, 2009) and NER (Turian et al., 2010). In the field of sentiment analysis, Bespalov et al. (2011; 2012) initialize the word embedding by Laten-t Semantic Analysis and further represent each document as the linear weighted of ngram vec-tors for sentiment classification. Yessenalina and Cardie (2011) model each word as a matrix and combine words using iterated matrix multiplica-tion. Glorot et al. (2011) explore Stacked Denois-ing Autoencoders for domain adaptation in sen-timent classification. Socher et al. propose Re-cursive Neural Network (RNN) (2011b), matrix-vector RNN (2012) and Recursive Neural Tensor Network (RNTN) (2013b) to learn the composi-tionality of phrases of any length based on the representation of each pair of children recursively. Hermann et al. (2013) present Combinatory Cate-gorial Autoencoders to learn the compositionality of sentence, which marries the Combinatory Cat-egorial Grammar with Recursive Autoencoder.
The representation of words heavily relies on the applications or tasks in which it is used (Lab-utov and Lipson, 2013). This paper focuses on learning sentiment-specific word embedding, which is tailored for sentiment analysis. Un-like Maas et al. (2011) that follow the proba-bilistic document model (Blei et al., 2003) and give an sentiment predictor function to each word, we develop neural networks and map each n-gram to the sentiment polarity of sentence. Un-like Socher et al. (2011c) that utilize manually labeled texts to learn the meaning of phrase (or sentence) through compositionality, we focus on learning the meaning of word, namely word em-bedding, from massive distant-supervised tweets. Unlike Labutov and Lipson (2013) that produce task-specific embedding from an existing word embedding, we learn sentiment-specific word em-bedding from scratch. In this section, we present the details of learn-ing sentiment-specific word embedding ( SSWE ) for Twitter sentiment classification. We pro-pose incorporating the sentiment information of sentences to learn continuous representations for words and phrases. We extend the existing word embedding learning algorithm (Collobert et al., 2011) and develop three neural networks to learn SSWE. In the following sections, we introduce the traditional method before presenting the details of SSWE learning algorithms. We then describe the use of SSWE in a supervised learning framework for Twitter sentiment classification. 3.1 C&amp;W Model Collobert et al. (2011) introduce C&amp;W model to learn word embedding based on the syntactic con-texts of words. Given an ngram  X  X at chills on a mat X  , C&amp;W replaces the center word with a ran-dom word w r and derives a corrupted ngram  X  X at chills w r a mat X  . The training objective is that the original ngram is expected to obtain a higher lan-guage model score than the corrupted ngram by a margin of 1. The ranking objective function can be optimized by a hinge loss, loss cw ( t,t r ) = max (0 , 1  X  f cw ( t ) + f cw ( t r )) where t is the original ngram, t r is the corrupted ngram, f cw (  X  ) is a one-dimensional scalar repre-senting the language model score of the input n-gram. Figure 1(a) illustrates the neural architec-ture of C&amp;W, which consists of four layers, name-ly lookup  X  linear  X  hTanh  X  linear (from bottom to top). The original and corrupted ngram-s are treated as inputs of the feed-forward neural network, respectively. The output f cw is the lan-guage model score of the input, which is calculat-ed as given in Equation 2, where L is the lookup table of word embedding, w 1 ,w 2 ,b 1 ,b 2 are the pa-rameters of linear layers. lookup linear hTanh linear softmax sentiment-specific word embedding. 3.2 Sentiment-Specific Word Embedding Following the traditional C&amp;W model (Collobert et al., 2011), we incorporate the sentiment infor-mation into the neural network to learn sentiment-specific word embedding. We develop three neural networks with different strategies to integrate the sentiment information of tweets.
 Basic Model 1 (SSWE h ). As an unsupervised approach, C&amp;W model does not explicitly capture the sentiment information of texts. An intuitive solution to integrate the sentiment information is predicting the sentiment distribution of text based on input ngram. We do not utilize the entire sen-tence as input because the length of different sen-tences might be variant. We therefore slide the window of ngram across a sentence, and then pre-dict the sentiment polarity based on each ngram with a shared neural network. In the neural net-work, the distributed representation of higher lay-er are interpreted as features describing the input. Thus, we utilize the continuous vector of top layer to predict the sentiment distribution of text.
Assuming there are K labels, we modify the di-mension of top layer in C&amp;W model as K and add a softmax layer upon the top layer. The neural network ( SSWE Softmax layer is suitable for this scenario be-cause its outputs are interpreted as conditional probabilities. Unlike C&amp;W, SSWE h does not gen-erate any corrupted ngram. Let f g ( t ) , where K denotes the number of sentiment polarity label-s, be the gold K -dimensional multinomial distri-bution of input t and itive/negative classification, the distribution is of the form [1,0] for positive and [0,1] for negative. The cross-entropy error of the softmax layer is : where f g ( t ) is the gold sentiment distribution and f h ( t ) is the predicted sentiment distribution. Basic Model 2 (SSWE r ). SSWE h is trained by predicting the positive ngram as [1,0] and the neg-ative ngram as [0,1]. However, the constraint of SSWE h is too strict. The distribution of [0.7,0.3] can also be interpreted as a positive label because the positive score is larger than the negative s-core. Similarly, the distribution of [0.2,0.8] indi-cates negative polarity. Based on the above obser-vation, the hard constraints in SSWE h should be relaxed. If the sentiment polarity of a tweet is pos-itive, the predicted positive score is expected to be larger than the predicted negative score, and the exact reverse if the tweet has negative polarity.
We model the relaxed constraint with a rank-ing objective function and borrow the bottom four layers from SSWE h , namely lookup  X  linear  X  hTanh  X  linear in Figure 1(b), to build the re-laxed neural network ( SSWE SSWE h , the softmax layer is removed because SSWE r does not require probabilistic interpreta-tion. The hinge loss of SSWE r is modeled as de-scribed below. the predicted negative score,  X  s ( t ) is an indicator function reflecting the sentiment polarity of a sen-tence, Similar with SSWE h , SSWE r also does not gen-erate the corrupted ngram.
 Unified Model (SSWE u ). The C&amp;W model learns word embedding by modeling syntactic contexts of words but ignoring sentiment infor-mation. By contrast, SSWE h and SSWE r learn sentiment-specific word embedding by integrating the sentiment polarity of sentences but leaving out the syntactic contexts of words. We develop a uni-fied model ( SSWE the sentiment information of sentences as well as the syntactic contexts of words. SSWE u is illus-trated in Figure 1(c).

Given an original (or corrupted) ngram and the sentiment polarity of a sentence as the in-put, SSWE u predicts a two-dimensional vector for tand for language model score and sentiment s-core of the input ngram, respectively. The training objectives of SSWE u are that (1) the original n-gram should obtain a higher language model score 0 ( t ) than the corrupted ngram f u 0 ( t r ) , and (2) the sentiment score of original ngram f u 1 ( t ) should be more consistent with the gold polarity annotation of sentence than corrupted ngram f u 1 ( t r ) . The loss function of SSWE u is the linear combination of t-wo hinge losses, where loss cw ( t,t r ) is the syntactic loss as given in Equation 1, loss us ( t,t r ) is the sentiment loss as described in Equation 9. The hyper-parameter  X  weighs the two parts. Model Training. We train sentiment-specific word embedding from massive distant-supervised tweets collected with positive and negative emoti-April 30th, 2013 with TwitterAPI. We tokenize each tweet with TwitterNLP (Gimpel et al., 2011), remove the @user and URLs of each tweet, and fil-ter the tweets that are too short ( &lt; 7 words). Final-ly, we collect 10M tweets, selected by 5M tweets with positive emoticons and 5M tweets with nega-tive emoticons.

We train SSWE h , SSWE r and SSWE u by taking the derivative of the loss through back-propagation with respect to the whole set of pa-rameters (Collobert et al., 2011), and use Ada-Grad (Duchi et al., 2011) to update the parame-ters. We empirically set the window size as 3, the embedding length as 50, the length of hidden lay-er as 20 and the learning rate of AdaGrad as 0.1 for all baseline and our models. We learn embed-ding for unigrams, bigrams and trigrams separate-ly with same neural network and same parameter setting. The contexts of unigram (bigram/trigram) are the surrounding unigrams (bigrams/trigrams), respectively. 3.3 Twitter Sentiment Classification We apply sentiment-specific word embedding for Twitter sentiment classification under a supervised learning framework as in previous work (Pang et al., 2002). Instead of hand-crafting features, we incorporate the continuous representation of word-s and phrases as the feature of a tweet. The senti-ment classifier is built from tweets with manually annotated sentiment polarity.

We explore min , average and max convolu-tional layers (Collobert et al., 2011; Socher et al., 2011a), which have been used as simple and effective methods for compositionality learning in vector-based semantics (Mitchell and Lapata, 2010), to obtain the tweet representation. The re-sult is the concatenation of vectors derived from different convolutional layers. z ( tw ) = [ z max ( tw ) ,z min ( tw ) ,z average ( tw )] where z ( tw ) is the representation of tweet tw and z ( tw ) is the results of the convolutional layer x  X  { min,max,average } . Each convolutional layer z x employs the embedding of unigrams, bigrams and trigrams separately and conducts the matrix-vector operation of x on the sequence represented by columns in each lookup table. The output of z x is the concatenation of results obtained from different lookup tables. z x ( tw ) = [ w x  X  L uni  X  where w x is the convolutional function of z x ,  X  L  X  tw is the concatenated column vectors of the words in the tweet. L uni , L bi and L tri are the lookup tables of the unigram, bigram and trigram embedding, respectively. We conduct experiments to evaluate SSWE by in-corporating it into a supervised learning frame-work for Twitter sentiment classification. We also directly evaluate the effectiveness of the SSWE by measuring the word similarity in the embedding space for sentiment lexicons. 4.1 Twitter Sentiment Classification Experiment Setup and Datasets. We conduct experiments on the latest Twitter sentiment clas-sification benchmark dataset in SemEval 2013 (Nakov et al., 2013). The training and develop-ment sets were completely in full to task partici-pants. However, we were unable to download all the training and development sets because some tweets were deleted or not available due to mod-ified authorization status. The test set is directly provided to the participants. The distribution of our dataset is given in Table 1. We train sentiment classifier with LibLinear (Fan et al., 2008) on the training set, tune parameter  X  c on the dev set and evaluate on the test set. Evaluation metric is the Train 2,642 994 3,436 7,072 Dev 408 219 493 1,120 Test 1,570 601 1,639 3,810 Table 1: Statistics of the SemEval 2013 Twitter sentiment classification dataset. Baseline Methods. We compare our method with the following sentiment classification algo-rithms: (1) DistSuper : We use the 10 million tweets se-lected by positive and negative emoticons as train-ing data, and build sentiment classifier with Lib-Linear and ngram features (Go et al., 2009). (2) SVM : The ngram features and Support Vec-tor Machine are widely used baseline methods to build sentiment classifiers (Pang et al., 2002). Li-bLinear is used to train the SVM classifier. (3) NBSVM : NBSVM (Wang and Manning, 2012) is a state-of-the-art performer on many sen-timent classification datasets, which trades-off be-tween Naive Bayes and NB-enhanced SVM. (4) RAE : Recursive Autoencoder (Socher et al., 2011c) has been proven effective in many senti-ment analysis tasks by learning compositionality automatically. We run RAE with randomly initial-ized word embedding. (5) NRC : NRC builds the top-performed system in SemEval 2013 Twitter sentiment classification track which incorporates diverse sentiment lexi-cons and many manually designed features. We re-implement this system because the codes are not publicly available 3 . NRC-ngram refers to the feature set of NRC leaving out ngram features.
Except for DistSuper , other baseline method-s are conducted in a supervised manner. We do not compare with RNTN (Socher et al., 2013b) be-cause we cannot efficiently train the RNTN model. The reason lies in that the tweets in our dataset do not have accurately parsed results or fine grained sentiment labels for phrases. Another reason is that the RNTN model trained on movie reviews cannot be directly applied on tweets due to the d-ifferences between domains (Blitzer et al., 2007). Results and Analysis. Table 2 shows the macro-F1 of the baseline systems as well as the SSWE-based methods on positive/negative sentimen-t classification of tweets. Distant supervision is relatively weak because the noisy-labeled tweet-s are treated as the gold standard, which affects the performance of classifier. The results of bag-of-ngram (uni/bi/tri-gram) features are not satis-fied because the one-hot word representation can-not capture the latent connections between words. NBSVM and RAE perform comparably and have Method Macro-F1 DistSuper + unigram 61.74 DistSuper + uni/bi/tri-gram 63.84 SVM + unigram 74.50 SVM + uni/bi/tri-gram 75.06 NBSVM 75.28 RAE 75.12 NRC ( Top System in SemEval) 84.73 NRC -ngram 84.17 SSWE u 84.98 SSWE u +NRC 86.58 SSWE u +NRC-ngram 86.48 Table 2: Macro-F1 on positive/negative classifica-tion of tweets. a big gap in comparison with the NRC and SSWE-based methods. The reason is that RAE and NB-SVM learn the representation of tweets from the small-scale manually annotated training set, which cannot well capture the comprehensive linguistic phenomenons of words.

NRC implements a variety of features and reaches 84.73% in macro-F1, verifying the impor-tance of a better feature representation for Twit-ter sentiment classification. We achieve 84.98% by using only SSWE u as features without borrow-ing any sentiment lexicons or hand-crafted rules. The results indicate that SSWE u automatically learns discriminative features from massive tweets and performs comparable with the state-of-the-art manually designed features. After concatenating SSWE u with the feature set of NRC , the perfor-mance is further improved to 86.58%. We also compare SSWE u with the ngram feature by inte-grating SSWE into NRC-ngram . The concatenated features SSWE u +NRC-ngram (86.48%) outperfor-m the original feature set of NRC (84.73%).
As a reference, we apply SSWE u on subjec-tive classification of tweets, and obtain 72.17% in macro-F1 by using only SSWE u as feature. Af-ter combining SSWE u with the feature set of NR-C , we improve NRC from 74.86% to 75.39% for subjective classification.
 Comparision between Different Word Embed-ding. We compare sentiment-specific word em-bedding (SSWE h , SSWE r , SSWE u ) with base-line embedding learning algorithms by only us-ing word embedding as features for Twitter sen-timent classification. We use the embedding of u-nigrams, bigrams and trigrams in the experimen-t. The embeddings of C&amp;W (Collobert et al., our models are trained with the same dataset and same parameter setting. We compare with C&amp;W and word2vec as they have been proved effective in many NLP tasks. The trade-off parameter of ReEmb (Labutov and Lipson, 2013) is tuned on the development set of SemEval 2013.

Table 3 shows the performance on the pos-itive/negative classification of tweets 5 . ReEm-b(C&amp;W) and ReEmb(w2v) stand for the use of embeddings learned from 10 million distant-supervised tweets with C&amp;W and word2vec, re-spectively. Each row of Table 3 represents a word embedding learning algorithm. Each column s-tands for a type of embedding used to compose features of tweets. The column uni+bi denotes the use of unigram and bigram embedding, and the column uni+bi+tri indicates the use of unigram, bigram and trigram embedding.
 Embedding unigram uni+bi uni+bi+tri C&amp;W 74.89 75.24 75.89 Word2vec 73.21 75.07 76.31 ReEmb(C&amp;W) 75.87  X   X  ReEmb(w2v) 75.21  X   X  WVSA 77.04  X   X  SSWE h 81.33 83.16 83.37 SSWE r 80.45 81.52 82.60 SSWE u 83.70 84.70 84.98 Table 3: Macro-F1 on positive/negative classifica-tion of tweets with different word embeddings.
From the first column of Table 3, we can see that the performance of C&amp;W and word2vec are obvi-ously lower than sentiment-specific word embed-dings by only using unigram embedding as fea-tures. The reason is that C&amp;W and word2vec do not explicitly exploit the sentiment information of the text, resulting in that the words with oppo-site polarity such as good and bad are mapped to close word vectors. When such word embed-dings are fed as features to a Twitter sentimen-t classifier, the discriminative ability of sentiment words are weakened thus the classification perfor-mance is affected. Sentiment-specific word em-beddings (SSWE h , SSWE r , SSWE u ) effectively distinguish words with opposite sentiment polarity and perform best in three settings. SSWE outper-forms MVSA by exploiting more contextual infor-mation in the sentiment predictor function. SSWE outperforms ReEmb by leveraging more senti-ment information from massive distant-supervised tweets. Among three sentiment-specific word em-beddings, SSWE u captures more context informa-tion and yields best performance. SSWE h and SSWE r obtain comparative results.

From each row of Table 3, we can see that the bigram and trigram embeddings consistently im-prove the performance of Twitter sentiment classi-fication. The underlying reason is that a phrase, which cannot be accurately represented by uni-gram embedding, is directly encoded into the n-gram embedding as an idiomatic unit. A typical case in sentiment analysis is that the composed phrase and multiword expression may have a dif-ferent sentiment polarity than the individual word-s it contains, such as not [bad] and [great] deal of (the word in the bracket has different sentiment polarity with the ngram). A very recent study by Mikolov et al. (2013) also verified the effective-ness of phrase embedding for analogically reason-ing phrases.
 Effect of  X  in SSWE u We tune the hyper-parameter  X  of SSWE u on the development set by using unigram embedding as features. As given in Equation 8,  X  is the weighting score of syntac-tic loss of SSWE u and trades-off the syntactic and sentiment losses. SSWE u is trained from 10 mil-lion distant-supervised tweets. Figure 2: Macro-F1 of SSWE u on the develop-ment set of SemEval 2013 with different  X  .
Figure 2 shows the macro-F1 of SSWE u on pos-itive/negative classification of tweets with differ-ent  X  on our development set. We can see that SSWE u performs better when  X  is in the range of [0.5, 0.6], which balances the syntactic context and sentiment information. The model with  X  =1 stands for C&amp;W model, which only encodes the syntactic contexts of words. The sharp decline at  X  =1 reflects the importance of sentiment informa-tion in learning word embedding for Twitter senti-ment classification.
 Effect of Distant-supervised Data in SSWE u We investigate how the size of the distant-supervised data affects the performance of SSWE u feature for Twitter sentiment classification. We vary the number of distant-supervised tweets from 1 million to 12 million, increased by 1 million. We set the  X  of SSWE u as 0.5, according to the experiments shown in Figure 2. Results of posi-tive/negative classification of tweets on our devel-opment set are given in Figure 3. Figure 3: Macro-F1 of SSWE u with different size of distant-supervised data on our development set.
We can see that when more distant-supervised tweets are added, the accuracy of SSWE u con-sistently improves. The underlying reason is that when more tweets are incorporated, the word em-bedding is better estimated as the vocabulary size is larger and the context and sentiment informa-tion are richer. When we have 10 million distant-supervised tweets, the SSWE u feature increases the macro-F1 of positive/negative classification of tweets to 82.94% on our development set. When we have more than 10 million tweets, the per-formance remains stable as the contexts of words have been mostly covered. 4.2 Word Similarity of Sentiment Lexicons The quality of SSWE has been implicitly evaluat-ed when applied in Twitter sentiment classification in the previous subsection. We explicitly evaluate it in this section through word similarity in the em-bedding space for sentiment lexicons. The evalua-tion metric is the accuracy of polarity consistency between each sentiment word and its top N closest words in the sentiment lexicon, where # Lex is the number of words in the senti-ment lexicon, w i is the i-th word in the lexicon, c ij is the j-th closest word to w i in the lexicon with co-sine similarity,  X  ( w i ,c ij ) is an indicator function that is equal to 1 if w i and c ij have the same sen-timent polarity and 0 for the opposite case. The higher accuracy refers to a better polarity consis-tency of words in the sentiment lexicon. We set N as 100 in our experiment.
 Experiment Setup and Datasets We utilize the widely-used sentiment lexicons, namely M-PQA (Wilson et al., 2005) and HL (Hu and Liu, 2004), to evaluate the quality of word embedding. For each lexicon, we remove the words that do not appear in the lookup table of word embedding. We only use unigram embedding in this section because these sentiment lexicons do not contain phrases. The distribution of the lexicons used in this paper is listed in Table 4.
 Table 4: Statistics of the sentiment lexicons. Join-t stands for the words that occur in both HL and MPQA with the same sentiment polarity.
 Results. Table 5 shows our results com-pared to other word embedding learning al-gorithms. The accuracy of random result is 50% as positive and negative words are ran-domly occurred in the nearest neighbors of each word. Sentiment-specific word embed-dings (SSWE h , SSWE r , SSWE u ) outperform ex-isting neural models (C&amp;W, word2vec) by large margins. SSWE u performs best in three lexicon-s. SSWE h and SSWE r have comparable perfor-mances. Experimental results further demonstrate that sentiment-specific word embeddings are able to capture the sentiment information of texts and distinguish words with opposite sentiment polari-ty, which are not well solved in traditional neural Table 5: Accuracy of the polarity consistency of words in different sentiment lexicons. models like C&amp;W and word2vec. SSWE outper-forms MVSA and ReEmb by exploiting more con-text information of words and sentiment informa-tion of sentences, respectively. In this paper, we propose learning continuous word representations as features for Twitter sen-timent classification under a supervised learning framework. We show that the word embedding learned by traditional neural networks are not ef-fective enough for Twitter sentiment classification. These methods typically only model the contex-t information of words so that they cannot dis-tinguish words with similar context but opposite sentiment polarity (e.g. good and bad ). We learn sentiment-specific word embedding (SSWE) by integrating the sentiment information into the loss functions of three neural networks. We train SS-WE with massive distant-supervised tweets select-ed by positive and negative emoticons. The ef-fectiveness of SSWE has been implicitly evaluat-ed by using it as features in sentiment classifica-tion on the benchmark dataset in SemEval 2013, and explicitly verified by measuring word similar-ity in the embedding space for sentiment lexicon-s. Our unified model combining syntactic context of words and sentiment information of sentences yields the best performance in both experiments. We thank Yajuan Duan, Shujie Liu, Zhenghua Li, Li Dong, Hong Sun and Lanjun Zhou for their great help. This research was partly supported by National Natural Science Foundation of China (No.61133012, No.61273321, No.61300113).
