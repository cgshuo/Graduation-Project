 communication technology, sensor hardware manufacturing ability is also improved. data processing and wireless communication functions [1]. Wireless sensor networks (WSNs) composed by a large number of sensor nodes deployed in the monitoring regions, are used to collect and pro cess information of perceived objects. 
The sensor nodes are usually battery-powered and deployed in harsh physical goal of data compression in wireless sensor networks (WSNs) is to reduce the energy consumption and prolong the network lifetime. Compare with the calculation, the communication between sensor nodes consume much more energy [2]. So the key transmission. 
In this paper, we focus on Topology-based Data Compression algorithm (TDC) for wireless sensor networks. Our TDC algorithm will minimize the amount of data during transmission, and the sink can obtain the accurate information. 
Our contributions are summarized as follows: The remainder of this paper is organized as follows. Section 2 summarizes related work. Section 3 introduces some assumptions. Section 4 describes the proposed TDC scheme in details. Section 5 presents experimental results. Section 6 concludes the paper. There are many compression algorithms in wireless sensor networks, such as wavelet compression algorithms [3] [4], Huffman encoding algorithms [5] [6], etc. 
Wavelet compression algorithms [3] [4] utilize the wavelet transformation to maintain a certain degree of accuracy. Wavelet compression algorithms will obtain a good approximation ability and high compression ratio. But the resulting values of the sink obtained are approximate and not completely accurate, which is not the same as transmission of useless data, and the data which the sink obtained are accurate. between Huffman encoding algorithms and our compression algorithm. The normalized data based on our compression algorithm can be encoded using Huffman encoding algorithms, which will further increase the compression ratio. In this paper, there are N sensor nodes randomly deployed in an area, which constitute communication radius R . 
We make the following assumptions: the flat routing protocols; LEACH [9], EEUC [10], HEED [11] and CCEDG [12] belong message to build the tree. The node si which received the building message may be its neighbors, and so on. The child node si also selects an optimal parent node to send Compression Algorithm based on the topology of TAG routing protocol, and it is also effective to other topologies: flat routing protocols and hierarchical routing protocols. 4.1 Overview of TDC Algorithm The sensory data usually consists of two parts. One part is common information, such as attributes. For example, in the real dataset [14], the common information include node id, routing tree in turn. As shown in Figure 1, if node 4 wants to send its data to the sink, sink. In this process, the useful information is the sensory attributes, and the common information transmitted to the sink only make the sink identifying the data belong to. information to the sink, the sink can also identify the owner of the sensory attributes information occupied are less than the common information. This method will reduce amount of packets transmitted and save the energy consumption. 
As shown in Figure 2, there is a data package of a node si . The data of descendant nodes will be encapsulated into the package. Every m ( m =4) data of descendant nodes forms a sub-package, and each sub-package has a sub-package number. If the + sizeof(attribute values)), otherwise denoted as 0. 
As shown in Figure 3, all nodes need to send their data to the sink. The leaf nodes in package in the data package and the sub-package number starts with 1. The intermediate nodes in the tree, such as node 6, 8, 9 etc, have one or more than one descendant nodes. The intermediate node 8 has two child nodes 6 and 7, and the node 6 has two child nodes 4 and 5. The number of descendant nodes of node 8 (including node 8) is 5. The order of the descendant nodes in the node 8 package is: 4, 5, 6, 7 and 8. 4.2 The Detailed TDC Algorithm (TDC) algorithm in this subsection. 1: initialize 2: si.PN = NULL;// Parent Node of si; 3: si.CS = NULL;//Child nodes set of si is null; 4: si.count = 0; //Number of descendant nodes of si (including itself); 5: si.CPSet = NULL; // The set of pair of child and parent node. 6: end-initialize 7: on_receiving_ TAG_Response (si. id, sj.id, sj.count, sj. CPSet)_message_from_sj ( ); 10: si.count= si.count+ sj.count; 11: sj.CCount = sj.count; //save the numbe r of descendant nodes of child node sj. 12: end _processing_ TAG_Response _message; 13: When_the_timer_t_expires ; //it is the time for si send TAG_Response message to its parent. 14: si.count= si.count+1;// Number of descendant nodes of si (including itself) 15: CSTemp = si.CS; 16: begin=1; 17: while (CSTemp_is_not_null) 18: find_sj  X  _which_ has_the_smallest_id_number_in_CSTemp; 19: find_sj_which_has_the_same_id_as_sj  X  _in_si.CS; 20: sj.CBegin= begin; 21: begin= begin+ sj.CCount; 22: delete_sj  X  _from_ CSTemp; 23: end-while 24: si.CBegin= begin; //The last ordinal position in the package of node si is reserved for itself. 25: find_a_suitable_node_as_its_parent(); //which is the same as TAG described. 26: send_ TAG_Response (si.PN, si.id, si.count, si.CPSet)_message_to_its_parent_node;
Terminologies : si.PN : Parent Node of si ; si.CS : Child nodes set of si ; si.id : Node id of si ; si.count : Number of descendant nodes of si (including itself); node si ; sj.CCount : The number of descendant nodes of child node sj (including sj ); construct the routing map. send back the TAG_Response message (Lines 13-26). In the TAG routing tree (Line 26). So the sink will know the whole network topology map. Finally, the sink will restore the compressed data according to the topology map. 
Next, we will show an example of computing the ordinal position of descendant nodes descendant nodes (including node 2) ( s2 .CCount=3). The starting position of descendant descendant nodes of node 2. As shown in Figure 4, the shadow lines parts represent the parent node 1. 
Steady phase: 1: if si receiving_ Data_Package _message_from_sj 2: if sj.id  X  si.CS 3: for (sj.CBegin to (sj.CBegin +sj.CCount)) 4: compute_the_corresponding_subpackage_number_and_subpackage_offset( ); 5: copy_data_of_sj_to_package_of_si( ); 6: end-for 7: end-if 8: end-if Next, we will describe the Data Package message transmission in the steady phase. parent node si will compute the corresponding sub-package number and sub-package corresponding location of node si package. 
Now, let us to describe the process of computing sub-package number and sub-package offset. We set the global offset to be o which starting from 1. We set the sub-child node 3 itself in the package of parent node 1 is 7 (Global offset o = 7). The sub-package number of child node 3 itself in the package of parent node 1 is 2 ( p=2 ). The sub-package offset of child node 3 itself in the package of parent node 1 is 3 ( q=3 ). descendant node sm will be copied to the location which is the p im th sub-package and the q im th sub-package offset of the package of parent node si . and 10 need to send their data to the sink. 4.3 Performance of the TDC Algorithm Now, we will analyze the performance of the TDC Algorithm. 
If node si has 3 data needed to send to the sink, there are 3 types of the package. The parameters are shown in the table 1. As shown in the Figure 6, type 1 has 1 sub-package, and the bits want to be transmitted is: 6*8+(4+(1+4*8)+(1+4*8)+(1+4*8)+1)=152; type than using TDC algorithm. want to be transmitted is: 48+(4+33+1+1+1)*n=48+40*n . If every sub-package is full, 4 != 0 , the bits want to be transmitted is: 48+((ceil (n/4))-1)*136+(n mod 4)*32+8 . The bits want to be transmitted using the Non-compression Algorithm is 80*n. Parameters: 
Number of data need to be transmitted 3 4 n 
If our TDC Algorithm is effective compare to the Non-compression Algorithm, the maximum bits transmitted should be less than the ones using Non-compression Algorithm is better than Non-compression Algorithm. every sub-package is full (exclude the last sub-package), the compression ratio is: 1-(48+(n/4)*136) /(80*n)  X  1-(34*n)/(80*n)=57.5% . Intel Berkeley Research Lab [14]. We use 1000 records from the real data set.
Another data set is a synthetic data set. We randomly deployed 300 homogeneous sensor nodes in the 400*400 m 2 rectangular region and sink is located at the center. 
Our scheme is based on the TAG [7] routing algorithm, and assume the packets transmitted, we define a sampling period as a round. 
The transmission range of sink node is usually greater than the transmission range of ordinary sensor nodes, so we assume that the transmission range of sink node can cover most regions of the monitoring networks. table 1. 
As mentioned above, energy consumption is a critical issue for wireless sensor networks and radio transmission is the most dominate source of energy consumption. Thus, we use the following two metrics to measure the performance in wireless sensor networks. The Average Number of Packets Sent: the average number of packets sent by each node each round. The Network Lifetime: the network lifetime refers to the number of rounds from the availability, the network lifetime is a more useful metric than the average number of consumed, the faster the node died, the shorter the network lifetime is. So we use the maximum number of packets sent to measure the network lifetime.

The maximum number of packets sent means that a node which sends the largest number of packets per round to the sink among all nodes in wireless sensor networks. 
Comparison of these two metrics, the maximum number of packets sent is more important than the average number of packets sent . their data to the sink. 
First, we will introduce the performance comparison in the real data set. As shown and average number of packets sent of TDC algorithm and Non-compression Non-compression algorithm. 
As described in section 4, the compression ratio fluctuates in the range 50%-encapsulated into a message packet, it will be sent in one message packet. Otherwise, maximum number of packets sent of TDC algorithm will reduce to 50% than Non-compression algorithm, which means the network lifetime will extend 50% than Non-compression algorithm. 
In summary, TDC algorithm is better than Non-compression algorithm, even the network size is small and where deployed few nodes. 
Next, we will show the performance comparison in the synthetic data set. As maximum and average number of packets sent of TDC algorithm and Non-compression algorithm increases too, and the performance of TDC algorithm is better than the Non-compression algorithm. In this paper, we proposed a Topology-based Data Compression algorithm (TDC) in wireless sensor networks. The goal of the scheme is to save the energy consumption network lifetime. 
In the future, we plan to extend the proposed Data Compression Algorithm to other aggregate functions, such as join , average, and sum. Acknowledgements. This research was supported by the National Natural Science Technology Specific Projects of China (2010ZX01042-001-002-002) and the Doctoral Fund of Ministry of Education of China.

