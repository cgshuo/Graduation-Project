 A recommender system is an important intelligent tool due to the huge volume of information on the Web. A recommender system overcomes the information overload problem by providing users with the personalized information, products or services (in this paper, we call them  X  X tems X ), which satisfy the user taste and preferences. In our daily lif e, typical applications of recommender systems includ-ing Amazon, Last.fm and MovieLens, recommend products, radios and movies, respectively. In addition, more and mo re e-commerce sites deploy recommender systems to attract public users, and therefore prompt their sale revenues.
Collaborative Filtering (CF) [1] is one of the most widely used techniques for building recommender systems with a great success in e-commerce for its high recommendation quality. CF algorithms recommend items (e.g., products and movies) based on the opinions of other users that have the similar taste or preferences, rather than the content o f items. However, CF algorithms suffer from the scalability problem [1].

Alternatively, content-based filter ing (CBF) [2,3] make recommendations by analyzing the content of users or items. Balabanovi  X  c et al. [2] and Melville et al. [3] have empirically shown that CBF techniques produce significant improvement against CF techniques in terms of the prediction quality. However, for CBF, it is hard to extract the reasonable features associated with items [1]. Moreover, CBF requires appropriate metrics to com pute the similarity between items. But the existing metrics are not well-defined and not effective [4]. In addition, CBF also faces the serious scalability problem. The computational complexity expo-nentially rises when the number of users and items increase dramatically.
In order to overcome those challenges and solve the above issues, in this pa-per, we propose a hybrid recommendation algorithm by combining collaborative filtering with content-based filtering techniques. Our method firstly partitions items into several item groups by using a coupled version of the k-modes clus-tering algorithm, where the similarity between items is measured by the Coupled Object Similarity (COS) [4], which considers the coupling relation between items [5]. Then, CF is used to provide recomme ndations for active users. The key con-tributions are as follows: (1) we capture the correlation among items based on COS , which has been evaluated to outperform other similarity measures (e.g., SMS [6], ADD [7]) for categorical data. By this means, we overcome the similarity measure problem in content-based filtering; (2) we apply an effective clustering algorithm to group items, and compute the prediction within a small range of the item neighborhood. By applying the clustering algorithm, we solve the scal-ability problem in recommender systems; (3) we evaluate our proposed method on MovieLens data set in terms of the scalability and recommendation quality. This paper is organized as follows. Section 2 briefly reviews the related work. The notations used in this paper are pres ented in Section 3. Section 4 describes the framework of our proposed hybrid recommendation algorithm combining the content-based with collaborative filtering techniques. The coupled similarity based k-modes clustering algorithm is pr oposed in Section 5. Experiments are evaluated in Section 6. Finally, we conclude this paper in Section 7. Generally, recommender systems can be classified into three classes [1]: collabo-rative filtering (CF) approaches, content-based filtering (CBF) approaches and hybrid approaches.

CF [8,9] approaches produce recommendations or predictions based on the assumption that similar users have similar tastes. The similarity between users is measured according to their history rating behaviors. CBF [2,3] approaches recommend items for users b y analyzing the content of items and the profiles of users. Typical CBF recommender system such as InforFinder [10]. However, pure content-based recommendation algorithms suffer from feature extraction problem [1].

Both CF and CBF approaches have limitations, since they make recommen-dations only relying on user-item matri x or features of users and items, respec-tively. Hybrid approaches by combining CF and CBF techniques help avoid certain limitations of CF with CBF approaches. For example, Balabanovi  X  cet al.[2] proposed the recommender system Fab, which maintains user profiles based on content analysis, and then use CF techniques to find similar users for col-laborative recommendation. Melville et al. [3] presented a content-boosted CF algorithm, which uses a content-based predictor to enhance existing user rating data and then makes prediction using a weighted person correlation-based CF algorithm. They are different from our proposed method, in which the similarity between items is measured through COS when a recommender system analyzes the content of items.

In addition, several clustering algorithms have been applied in recommender systems. Rashid et al. proposed CLUSTKNN [11], which uses a variant of ba-sic k-means algorithm to partition users into clusters, and then leverages a CF algorithm to produce recommendations. Xue et al. proposed CBSMOOTH [12], which uses the clusters as the computed groups and smoothes the unrated data for individual users. Unlike our focus here, these algorithms group users or items over a user-item matrix, while ours groups items over the set of items. Further-more, in order to group items, our hybrid recommendation algorithm adopts a coupled version of k-modes clustering al gorithm, which outperforms other vari-ants of k-modes clustering algorithms for categorical data sets. In a typical scenario, a recommender system consists of a set of n users U = { u 1 ,u 2 ,...,u n expresses his/her preferences by rati ng a subset of items on a scale from one to five. This set of items rated by the user u i is denoted as O u i ( O u i  X  O ). Each features extracted from all the items are categorical. For example, if the item set O represents a collection of mov ies, then the features, i.e., director, actor, genre etc., are extracted to express a mov ie item. In addition, those features have categorical values, such as  X  Koster  X , X  Grant  X  X nd X  Comedy  X  etc. for the feature genre.

Generally, user preferences on items are usually converted into a user-item matrix R , with n rows and m columns. Each element r ij of R represents the rating given by user u i on item o j . The integer value of ratings falls into [0,5], in which 0 indicates that the user has not rated the item. The higher rating corresponds to the better satisfactory.
In essence, the objective of recommende r systems is to predict the rating on the specified item o j for an active user u a , by leveraging all the various data mining and machine learning techniques. Our proposed approach is a hybrid recommendation algorithm by combining the content-based and collaborative filtering techniques. The framework of our proposed recommendation algorithm is presented in Fig.1. Our proposed recom-mendation algorithm consists of four major components: (1) Data Extraction: extract user-item matrix R and the set of items O from data source; (2) Item Neighborhood Formation: partition the set of items O into several clusters by applying a coupled version of k-modes clustering algorithm; (3) Model Building: compute the similarity between each pair of items in the same cluster and store these similarities in a model, namely a HashMap ; (4) Prediction Computation: based on the trained model, use a nearest neighbor algorithm to produce recom-mendations for active users. We describe these four components in detail below. Data Extraction In this component, our proposed hybrid recommendation algorithm extracts user-item matrix R and movie item set O from data source, which are used by movie item neighborhood formation and prediction computation component, respectively.
 Item Neighborhood Formation and Model Building 1. Randomly select k distinct items from O . 2. Conduct the CK-modes algorithm on the set of items O , until the loss 3. For each cluster, compute the similari ty between each pair of items according Prediction Computation Once the model with the coupled pairwise similarity has been built, the pre-diction method of the item-based collabo rative filtering is adopted to generate thepredictiononitem o i for an active user u . It takes the weighted sum of the ratings given by the active user u on the items similar to item o i as the pre-diction. Weight measures the coupled similarity between the target item o i and its similar item. Formally, the prediction P u,o i on item o i for active user u is computed by the following formula.
 where N is the intersection of items rated by the active user u and items grouped by the CK-modes algorithm, R u,N j represents the rating on item N j given by the user u . sim o i ,N j is the coupled similarity between item the o i and the item N j . r u is the average of the active user X  X  ratings. In this section, we presen t the coupled variant of k-modes clustering algorithm (CK-modes), which is used in our proposed recommendation algorithm to group items, by taking into account the coupling relationship among their features. In the recommender system, the features of items are categorical. For example, we use the categorical features (i.e. director, actor, genre and country) to represent a movie. K-modes [13], an extension of the basic k-means algorithm, is designed to deal with the categorical data sets. However, the similarity measure in k-modes is too rough to capture the closeness of two items. Hence, we decide to adapt the basic k-modes clustering algorithm to cluster items by incorporating the coupled similarity measure. The mai n difference between the basic k-modes algorithm and the adapted k-modes algorithm lies on the similarity measure and the method of updating modes. We further discuss these difference below. 5.1 Similarity Metric For two items described by the categorical features, the k-modes clustering algo-rithm employs the Simple Matching Similarity [6] ( SMS , which only uses 0 and 1 to distinguish similarities between distinct and identical categorical values) to compute the similarity feature values. However, SMS fails to capture the genuine relationship between categorical feature values. In contrast, we adopt the Cou-pled Object Similarity ( COS )  X  [0,1] to measure the similarity between items, which is more accurate than SMS . COS [4] considers both the intra-coupled sim-ilarity within a feature and the inter-co upled similarity between features, which has been evaluated to outperfor m other similarities (e.g. SMS [6], ADD [7]) in term of clustering quality.

Formally, the Coupled Object Similarity ( COS ) between categorical items X and Y is defined as follows.
 where X j and Y j are the values of feature j for X and Y , respectively; and  X  A j is Coupled Attribute Value Similarity( CAVS ).

The CAVS consists of the Intra-coupled Attribute Value Similarity (IaAVS) measure  X  Ia j ( X j ,Y j )andthe Inter-coupled Attribute Value Similarity (IeAVS) measure  X  Ie j ( X j ,Y j ) for feature j . The definition of CAVS between attribute values X j and Y j of feature j is as follows. IaAVS measures the feature value similarity by considering the feature value occurrence frequencies within a feature, while IeAVS measures the feature value similarity by taking the feature dependency aggregation into account [4]. 5.2 Updating Modes Let S be a cluster generated by the previous partition of k-modes algorithm. There are mm items described by categorical features { a j 1 ,a j 2 ,...,a j l } belonging to the cluster S .Amodeofthecluster S is a item vector Q =[ q 1 ,q 2 ,...,q l ]to maximize the sum of the similarity between each element of S and Q . The classic k-modes clustering algorithm updates the mode Q of cluster S by reassigning each component of Q with the corresponding feature value that occurs the most among all those values of the items in S .

In our proposed adapted k-modes algorithm, we update the mode of each cluster according to the following definition.
 Definition 1. The mode of item set S with mm items is a vector Q =[ q 1 ,q 2 , ...,q l ] that maximizes: Since the latter method needs to compute the similarity between each pair of items, it causes a high computation cost. The former method is more efficient than the latter one. However, in order to group items for recommender system, we have to select the latter way. In recommender system, a movie item always has more than one genres. We extend the features of the movie item with t additional genre features, if the total number of genres of all the movies is t . When a movie item has the genre g i (1  X  i  X  t ), we assign 1 to the corresponding value of the movie feature g i , and otherwise 0. After the extension of features, the former mode updating method does not work well. The reason is that sparsity of genres: one movie has several genres, but the number of genres of all the movies is rather large, which leads to the phe nomena that the occurrence frequency of 0infeature g i is much higher than that of 1. Hence, most of the corresponding mode values of g i (1  X  i  X  l ) are 0, resulting in the inaccurate description of the modes.

Therefore, we take advantage of the latter method formalized in Definition 1 in our proposed recommendation algorithm. 5.3 Coupled Similarity Based K-Modes By using the coupled similarity measure and the method of modes updating described in the above sections 5.1 and 5.2, we design the Coupled similarity based k-modes clustering algorithm (CK-modes) described in Algorithm 1. Algorithm 1. The Coupled Similarity Based K-modes Algorithm (CK-modes) In this section, we conduct several experiments to show the accuracy and the scalability of our proposed hybrid recommendation algorithm. 6.1 Data Set and Evaluation Metric We use MovieLens data set in our evaluation, which has been widely used in collaborative filtering research in the last decade. MovieLens data set contains 100,000 ratings from 943 users and 1,682 movies, and users with less than 20 ratings have been removed. MovieLens d ata set was converted into a user-item matrix R with 943 rows (users) and 1682 columns (movies).

Since our proposed approach is a hybrid of collaborative filtering and content based recommendation algorithm, we extract features of movie from MovieLens data set, and present each movie item as a feature vector o =( mid,director, actor,country,genre ). In addition, MovieLens data set lacks of director, actor and country etc. features, we onl y retain genre in feature vector o .Particularly, a movie item has several genres, such a s movie titled  X  X oy Story X  is both an animation and a comedy. In order to make use of these genres to group movie, we extend the features of movie item with t additional genre features, if the total number of genres of all the movies in data set is t . In other words, a movie item is described by features { g 1 ,g 2 ,...g t } . When a movie item has genre g i (1  X  i  X  t ), we assign 1 to the corresponding feature value g i , and otherwise 0.
We choose MAE to evaluate experimental results, as MAE metric is simple to calculate and intuitive to interpret. Formally, where p i and q i are the real rating and the corresponding prediction, respectively, and N denotes the total number of predictions generated for all active users. The lower the MAE , the better the recommendation algorithm generates the predictions for users. 6.2 Experimental Settings Benchmark Recommendation Algorithms. We evaluate several widely dis-cussed algorithms in the recommender system research, including user-based collaborative filtering algorithm [8], item-based collaborative filtering algorithm [9] and CLUSTKNN [11]. Each benchmark recommendation algorithm has been tuned to produce the best prediction quality according to the principles described in the corresponding literature.

We conduct a five-fold cross validation over the MovieLens data set by ran-domly extracting different training and test sets each time, which accounts for 80% and 20%, respectively. Finally, we use the average of MAE and the run time costs over the five folds to present the experimental results. 6.3 Experimental Results In this section, we firstly determine the sensitivity of some parameters of our proposed hybrid recommendation algorithm and then compare with other bench-mark recommendation algorithms. The parameters in our proposed algorithm include the number of clusters K and the number of neighbors that are selected to compute predictions for the target movie items.
 Sensitivity of the Number of Clusters K . We perform a group of exper-iments to evaluate the prediction quality on the number of clusters K , ranging from 5 to 150 with a step of 10. Fig.2 reports the results. We observe that the number of clusters K does have an impact on the prediction quality. As K in-creases from 5 to 20, the prediction quality downgrades. After that, the MAE fluctuates; and then the curve tends to be flat. The best prediction quality is MAE =0 . 73, when the number of clusters K equals to 5. Thus, we select K =5 as the optimal choice in our following experiments.
 Sensitivity of the Neighborhood Size. We conduct another group of ex-periments to assess the prediction quality on the size of neighborhood used to produce the recommendation, ranging from 5 to 40 with a step of 5. Fig.3 de-scribes that MAEs decrease as the number of neighbors increases from 5 to 30, and then MAEs remain stable. That is to say, our proposed method achieves a better prediction quality when more similar items are taken into account. Therefore, we select 30 as the o ptimum item neighborhood size.

From Fig.3, we observe that the more neighbors involved in making recommen-dation, the better the recommendation quality. There are two reasons: (1) the average size of neighborhoods decreases as the number of clusters K increases; (2) the intersection between the item n eighborhood generated by the CK-modes algorithm and the set of items rated by the active user becomes smaller as the value of K increases. As a result, our propo sed recommendation algorithm takes average of the active user X  X  ratings as the prediction value when there are no neighbors for the target item.
 Prediction Quality Comparisons. Once we determine the optimal parame-ters, we compare our proposed algorithm with those selected benchmark recom-mendation algorithms in terms of the prediction quality.

Table 1 presents the results of the best prediction quality by using different recommendation algorithms. It can be observed from Table 1 that the item-based algorithm outperforms other recommendation algorithms, and followed by CLUSTKNN recommendation algorithm. The prediction qualities of the user-based and our proposed hybrid recommendation algorithm are comparable to the item-based recommendation algorithms (i.e., MAE =0.73). However, The difference between our proposed algorithm and the item-based algorithm is small and is not statistically significant. In fact, our proposed hybrid recommendation algorithm depends on the features of items, and does not work not well when most of the important features are missing. Only the genres of movie has been extracted from the MovieLens data set, a nd other features, such as director, actor and country, are missing. Thus, the lacking of information limits of our proposed hybrid recommendation algorithm to some extent.
 Performance. Here, we focus on the overall performance of the system. We de-note the throughput as the number of recommendations generated per second. Fig.4 shows the throughputs of both our proposed recommendation algorithm and other benchmark recommendation algorithms. Note that the user-based rec-ommendation algorithm scans the whole user-item matrix R , its throughput do not change with the number of clusters. However, the throughput of the item-based recommendation algorithm varies wi th the number of neighbors selected to produce predictions. We plot the throughput of the item-based recommenda-tion algorithm when the number of neighbors is 30, where it generates the best prediction quality.

As we can clearly see from Fig.4, clustering based recommendation algorithms (i.e., CLUSTKNN and our proposed hybrid recommendation algorithm) outper-form both the user-bused and the item-based recommendation algorithms. The throughputs of both the CLUSTKNN and our proposed hybrid algorithm are substantially higher than other approaches at all values of the number of clusters. We can observe that for the number of clusters K = 20, our proposed recommen-dation algorithm produces a throug hput rate of 12492 while the user-based and the item-base recommendation algorithms produce only 1333 and 2564, respec-tively. In addition, increasing the number of clusters corresponds to scanning the decreasing movie item neighborhood. Fig.4 also shows that the throughput of our proposed method increases rapidly as the number of clusters goes up. By contrast, the throughput of CLUSTKNN drops down as the number of clusters grows. The reason is that the CLUSTKNN takes centroids of clusters as the neighbors of the active user. Then, it takes more neighbors into account as the number of clusters increases.
 We make the following conclusions from the above experimental evaluation. First, the CK-modes algorithm is applied to divide the set of items O into several clusters, and then the rating predictions are computed within a small neighbor-hood. Hence, our proposed recommendation algorithm is highly scalable, which gives a quick response for active users. Second, the prediction quality of the hybrid recommendation algorithm is comparable with other classic recommen-dation algorithms. Only a minor difference on the prediction quality is observed. Finally, only the genres of movie are available in the MovieLens data set. Lack-ing of features information limits the accuracy of our hybrid recommendation algorithm. We regard that this hybrid recommendation algorithm will produce a better prediction quality when more features of movie item are available. As a matter of fact, finding similar movie items by using the movies X  content is more reasonable and intuitive than by using the users X  rating behaviors. Recommender systems play an important role in e-commerce for both users and businesses. It provides personalized recommendations for better business revenue. In this paper, we propose a hybrid recommendation algorithm by com-bining the content-based and the collaborative filtering techniques. This hybrid recommendation algorithm firstly partitions the items into several groups by using the coupled version of k-modes clustering algorithm. Then it uses the col-laborative filtering technique to produce the recommendations for active users. Experimental results show that our proposed hybrid recommendation algorithm effectively solves the scalability issue of recommender systems with a comparable recommendation quality under the condition of lacking of most of the features.
We plan to extract more features of items to improve our proposed hybrid rec-ommendation algorithm. We will also exte nd other recent clust ering algorithms, such as spectral clustering algorithm, t o speed up the process of model building and improve the prediction quality.
 Acknowledgments. We would like to acknowledge the support for this work from the National Science Fo undation of Chin a (61035003, 61175042,61021062), the National 973 Program of China (2009CB320702), the 973 Program of Jiangsu, China (BK2011005), the Program for New Century Excellent Talents in Univer-sity (NCET-10-0476), the Australian Research Council Discovery Grant (DP1096218, DP130102691) and ARC Linkage Grant (LP100200774).

