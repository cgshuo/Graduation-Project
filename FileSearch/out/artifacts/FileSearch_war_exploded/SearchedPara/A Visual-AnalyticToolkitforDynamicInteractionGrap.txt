 In this article we describ e a visual-analytic tool for the inter-rogation of evolving interaction net work data suc h as those found in social, bibliometric, WWW and biological appli-cations. The tool we have dev elop ed incorp orates common visualization paradigms suc h as zooming, coarsening and l-tering while naturally integrating information extracted by a previously describ ed event-driv en framew ork for character-izing the evolution of suc h net works. The visual fron t-end pro vides features that are speci cally useful in the analysis of interaction net works, capturing the dynamic nature of both individual entities as well as interactions among them. The tool pro vides the user with the option of selecting multiple views, designed to capture di eren t asp ects of the evolving graph from the persp ectiv e of a node, a comm unit y or a subset of nodes of interest. Standard visual templates and cues are used to highligh t critical changes that have occurred during the evolution of the net work. A key challenge we address in this work is that of scalabilit y { handling large graphs both in terms of the eciency of the bac k-end, and in terms of the eciency of the visual layout and rendering. Tw o case studies based on bibliometric and Wikip edia data are presen ted to demonstrate the utilit y of the toolkit for visual kno wledge disco very.
 Categories and Sub ject Descriptors: H.2.8 Database Managemen t: Database Applications -Data Mining General Terms: Algorithms, Measuremen t Keyw ords: Graph Visualization, Visual Analytics, Dy-namic Interaction net works Con tact Author
In man y scien ti c domains, visual aids and interactivit y are often key to forming imp ortan t insigh ts, particularly when targeting hard problems. Giv en the nature of the kno wledge disco very pro cess with a human-in-the-lo op, a visual analytic interactiv e fron t-end is extremely bene cial for e ectiv e information syn thesis.

In this article, we presen t suc h a visual analytic toolkit tar-geted toward the analysis of dynamic interaction net works. Man y real world problems can be mo deled as complex in-teraction net works where nodes represen t entities of inter-est and edges mimic the relationships among them. Fueled by technological adv ances and inspired by empirical anal-ysis, the num ber of suc h problems and the div ersit y of do-mains from whic h they arise { physics, sociology , technology , biology , chemistry , metab olism and nutrition { is gro wing steadily . In a large num ber of suc h domains the net works governing interactions are kno wn to evolve or change { bib-liometric data, social net work data, epidemiology data, bi-ological net works, and the World Wide Web to name a few examples.

In suc h net works, the addition and deletion of edges and nodes can be used to represen t changes in the interactions among the mo deled entities. The challenge is to iden tify and localize the portions of the net work that are changing to help characterize the type of change and its poten tial causes, visual ly . A related challenge is to facilitate interactiv e in-terrogation, i.e., the user needs to be able to interactiv ely select and zoom down to clusters, entities of interest, as well as speci c dynamic interactions and events that govern the evolution of interaction net works over time.

To address these challenges, we introduce a visual toolkit speci cally designed to analyze dynamic graphs. Figure 1 pro vides a schematic represen tation of the comp onen ts of our prop osed visual analysis toolkit. The bac k-end of our toolkit leverages a previously dev elop ed event-detection framew ork for analyzing dynamic interaction net works [2]. This frame-work presen ts a metho dology to detect critical events af-fecting nodes and comm unities in suc h net works and of-fers a principled way to characterize their evolution through the comp osition of various incremen tally computable beha v-ioral indices suc h as stabilit y, sociabilit y and in uence. As sho wn in Figure 1, this information is tigh tly integrated with our fron t-end pro viding a highly interactiv e interface for the user.

To facilitate visual analysis, the fron t-end of the toolkit presen ts the user with the option of multiple views -a graph view whic h is a cum ulativ e snapshot represen tation of the graph at di eren t points in time, a community view whic h represen ts the cluster arrangemen ts of the snapshot graphs, an event view whic h demonstrates the transformations that have occurred over time, and a node view whic h details the evolutionary beha vior of individual entities. We allo w the user to pick the interv als of interest and drill down onto the corresp onding events and beha vioral measures within that time-frame. We use a weigh ting function to asso ciate di eren t beha vioral characteristics suc h as in uence and so-ciabilit y with nodes and imp ortance and recency (temp oral stabilit y) with edges. These weigh ts are then mapp ed onto e ectiv e visual cues to localize features of interest. Overall, the fron t-end conforms to the popular man tra { overview, zoom, lter and details on demand [6].

For exploratory visual analysis, timeliness of the compu-tation and presen tation is imp ortan t, particularly when con-sidering large real-w orld graphs suc h as social net works like Myspace and Flic kr. Even simple layout and plotting tools su er when the size of the graph is very large. For our toolkit, we mak e use of key optimizations to speed up com-putation in the bac k-end, and leverage the use of coarsening mec hanisms to pro vide scalable performance in the fron t-end to squeeze relev ant information in the available pixel space.
In short, the challenges that we address in our work are: 1. Identifying, tracking and representing inter esting be-2. Analysis and visualization of communities over time 3. Analysis and visualization of the relationships of a node 4. Ensur e scalability to large graphs and facilitate inter-We presen t two case studies on real evolving graph datasets to underline some of the bene ts of our toolkit for visual analysis.
Recen tly, there has been considerable interest in analyzing dynamic interaction graphs. Lesk ovec et al [15] studied the evolution of graphs based on various top ological prop erties, suc h as the degree distribution and small-w orld prop erties of large net works and prop osed the Forest-Fire graph genera-tion mo del. Bac kstrom et al [3] studied formation of groups and the ways they gro w and evolve over time. Chakrabarti et al [7] introduced evolutionary clustering whic h involves incremen tally obtaining high-qualit y clusters for a set of ob-jects. In the con text of event-based feature analysis Sam-taney et al [20] describ ed an approac h for extracting coher-ent regions from 2-dimensional and 3-dimensional scalar and vector elds for trac king purp oses. To study the evolution of these regions over time, they presen t certain evolution-ary events for objects. Event-based metho ds have also been applied on spatial data [22].

There has been considerable amoun t of work in visualiza-tion of social net works. Heer and Boyd [10] have dev elop ed the Vizster tool for visualizing online social net works. The authors use a graph represen tation for visualizing data col-lected from the Friendster online comm unit y. The toolkit can be used to explore comm unities, link age and supp orts keyw ord searc h. Perer and Schneiderman [17] have pre-sen ted a general social net work visualization toolkit. The toolkit supp orts ranking of nodes based on various prop er-ties of the graph like cen tralit y, cut-p oints etc. Ab ello and others [1] have presen ted a graph visualization toolkit called ASK{GraphView. The toolkit uses a clustering algorithm to construct a hierarc hy whic h is easy to bro wse. Henry and Fekete [11] have presen ted a dual represen tation for visual-izing social net works. The prop osed toolkit MatrixExplor er uses a sync hronized graph and matrix represen tation of the net work for visualization. A key di erence separating our work from the above metho ds is that they are designed to operate primarily on static interaction graphs.

Glo or and Zhao [9, 8] have dev elop ed iQuest , a visual toolkit to understand topics of discussion among actors in a seman tic web. Kumar and Garland [14] have presen ted algorithms to visualize a graph in hierarc hical fashion by exploiting existing correlations. Time-v arying graphs are handled by pro ducing animations comp osed of static snap-shots. Qeli et al. [18] have prop osed algorithms to visualize time-v arying matrices. The matrices used in the article rep-resen t clustering results. The authors generate a cum ulativ e matrix and use colors to denote changes in mem berships. The toolkit can also be used to nd a group of elemen ts whic h are part of the same cluster for an extended perio d of time. The comm unit y view presen ted in our work serv es a similar purp ose. We also pro vide views sho wing changes to nodes, neigh borho ods and comm unities across time. The tigh t integration of our event detection bac k-end is a key di erence from the above metho ds.
This section pro vides the reader with a synopsis of our previous work in order that this documen t be self con tained. Additional details can be found elsewhere [2]. We de ne a temp oral snapshot S i = ( V i ; E i ) of a graph G = ( V; E ) to be a graph represen ting only entities and interactions activ e in a particular time interv al [ T s i ; T e i ], called the snapshot interv al.
As the graph evolves, its dynamic behavior over time can be represented as a set of S non-overlapping temporal snap-shots. We use clusters of the graph to represent its structure at di erent snapshots. We believe that studying the evolu-tion of these clusters, in particular their formation, tran-sitions and dissolution, can be extremely useful for e ec-tively characterizing the corresponding changes to the net-work over time. Let C i and C i +1 denote the set of clusters over two consecutive time intervals respectively. The critical events we de ne are: 1) Continue: A cluster C j i +1 is marked as a continuation of C k i if V j i +1 is the same as V k i (i.e their vertex sets are the same). Note that we do not impose the constraint that the edge sets should be the same.
 2) -Merge: Two di erent clusters C k i and C l i are marked as merged if there exists a cluster in the next timestamp that contains at least % of the nodes belonging to these two clusters. The essential condition for a merge is : M erge ( C k i ; C l i ; ) = 1 i 9 C j i +1 such that tion will only hold if there exist edges between V k i and V in timestamp i + 1. We allow the user the option of varying the parameter in the visual interface. 3) -Split: A single cluster C j i is marked as split if % of nodes from this cluster are present in 2 di erent clusters in the next timestamp. The essential condition is that:
Split ( C j i ; ) = 1 i 9 C k i +1 ; C l i +1 such that 4) Form: A new cluster C k i +1 is said to have been formed if none of the nodes in the cluster were grouped together at the previous time interval i.e. no 2 nodes in V k i +1 existed in the same cluster at time period i .

F orm ( C k i +1 ) = 1 i 9 no C j i such that V k i +1 \ V Intuitively, a form indicates the creation of a new commu-nity or new collaboration. 5) Dissolve: A single cluster C k i is said to have dissolved if none of the vertices in the cluster are in the same cluster in the next timestamp i.e. no two entities in the original cluster have an interaction between them in the current time interval.

Dissolve ( C k i ) = 1 i 9 no C j i +1 such that V k i \ V
Intuitively, a dissolve indicates the lack of contact or inter-actions between a group of nodes in a particular time period. 6)Join: A node is said to join cluster C j i if it exists in the cluster at timestamp i and it was not present in a similar cluster in the previous timestamp.
 Join ( v; C j i ) = 1 i 9 C j i and C k i 1 such that C k 2 and v = 2 V The cluster similarity condition ensures that C j i is not a newly formed cluster. 7)Leave: A node is said to leave cluster C k i 1 if it no longer is present in a cluster with most of the nodes in V k i 1 Leave ( v; C j i ) = 1 i 9 C j i and C k i 1 such that C 2 and v 2 V The similarity constraint between the two clusters is used to maintain cluster correspondence.

We use the Join and Leave events, described above, to de ne four behavioral measures that can be incrementally computed at each time interval using the events discovered in the current interval.
 Stability Index: The Stability index measures the ten-dency of a node to have interactions with the same nodes over a period of time. Let cl i ( x ) represent the cluster that node x belongs to in the i th time interval. The Stability Index (SI) for node x over T timestamps is measured incre-mentally as: SI ( x; T ) = Sociability Index: A related measure is the Sociability Index, which is a measure of the number of di erent inter-actions that a node participates in. Let cl i ( x ) be the cluster that node x belongs to at time i . Then, the Sociability Index is de ned as: SoI ( x ) = and j Activity(x) j &gt; M in activity where Activity ( x ) = P T i =1 ( x 2 V i ) indicates the number of intervals that node x is active. The measure gives high scores to nodes that are involved in interactions with dif-ferent groups. The threshold M in activity corresponds to the minimum number of active intervals for a node to be In uence Index: The in uence index of a node is a mea-sure of the in uence this node has on others. The intuition is that, if a large number of nodes leave or join a cluster with high frequency when a certain node x does, it suggests that node x has a certain positive in uence on the move-ment of the others. Let Companions ( x ) represent all nodes over all timestamps that join or leave clusters with node x . The In uence for node x is given by: Here M oves ( x ) represents the number of Join and Leave events x participates in. Note that, this de nition by itself, does not measure in uence, since nodes that interact and move along with highly in uential nodes will have high In-uence score values as well. Such nodes are down-weighted accordingly as described previously[2]. 1 We used a M in activity value of 1 = 2 the number of time intervals, for our experiments. Popularit y Index: The Popularit y Index of a cluster at time interv al [ i; i + 1] is a measure of the num ber of nodes that are attracted to it during that interv al. It is de ned as: DBLP Dataset: We used a subset of the DBLP bibliogra-phy 2 to generate a co-authorship net work represen ting au-thors publishing in sev eral imp ortan t conferences in the eld of AI, databases and data mining. We chose all pap ers over a 10 year perio d (1997-2006) that app eared in 28 key con-ferences spanning mainly these three areas. We con verted this data into a co-authorship graph, where eac h author is represen ted as a node and an edge between two authors cor-resp onds to a join t publication by these two authors. We chose the snapshot interv al to be a year, resulting in 10 con-secutiv e snapshot graphs, con taining 23136 nodes and 54989 edges. It has been sho wn that collab oration net works dis-play man y of the structural features of social net works[13, 16]. Hence, this is a good represen tativ e dataset for this study .
 Wikip edia Dataset: The Wikip edia online encyclop edia is a large collection of webpages pro viding comprehensiv e in-formation concerning various topics. The dataset we emplo y represen ts the Wikip edia revision history and was obtained from Berb eric h [4]. It consists of a set of webpages as well as links among them. It comprises of the editing history from Jan uary 2001 to Decem ber 2005. The temp oral infor-mation for the creation and deletion of nodes (pages) and edges (links) are also pro vided. We chose a large subset of the pro vided dataset, consisting of 779005 nodes (webpages) and 32.5 M edges. We constructed snapshots of 3 mon th in-terv als, and considered the rst 6 snapshots for our analysis.
The event detection pro ceeds in an iterativ e manner, with every two successiv e snapshots analyzed to compute events among them. So, at eac h stage, we analyze the resp ectiv e clusters of T i and T i +1 and compute events between them. First, it is imp ortan t to note that, since we will be consider-ing only a pair of timestamps at a time, we do not need to consider all N nodes, since man y of the nodes may not be activ e over the time perio d. Hence, for event detection be-tween T i and T i +1 , we need to examine only the nodes activ e over either of the two timestamps. This greatly reduces the complexit y of the event detection algorithm. Table 2 gives the percen tage of activ e nodes, for both datasets. It can be observ ed that the percen tage of activ e nodes for a pair of snapshots nev er increases beyond 40% of the total num ber of nodes.

To facilitate exploratory visual analysis, we need to en-sure that event detection can be performed quic kly, as the events need to be sho wn to the user for further analysis. Our detection algorithm relies on nding intersections and unions of the cluster sets, as eviden t from the form ulae pre-sen ted in the previous section. When the num ber of clusters is large, nding these intersections and unions can be ex-pensiv e even with the bit matrix operations we describ ed in our earlier work[2]. Finding the intersection between k clusters of T i and k i +1 clusters of T i +1 has time complex-ity O ( k i k i +1 ); For most real-w orld graphs, the num ber of comm unities can be quite large ( k i * k i +1 &gt;N ). The num ber of clusters obtained for eac h timestamp of the DBLP and Wikip edia graphs are sho wn in Table 1.

To enhance the performance of the bac k-end, particularly when scaling to datasets like the Wikip edia data, we dev elop an optimization to calculate the cluster intersection matrix I in O ( M ) time, where M is the num ber of nodes activ e in either T i or T i +1 ( M &lt; = N ). The idea is as follo ws. We rst construct two cluster vectors (for the two timestamps con-sidered), to represen t the clusters (comm unit y) that a node belongs to in a timestamp. We then traverse these vectors sequen tially and update the cluster intersection matrix I , as sho wn in Algorithm 1.
 Algorithm 1 Intersection( C i ; C i +1 )
Input: Set of M activ e nodes for m = 1 to M do end for // We then traverse these cluster vectors from left to righ t. for m = 1 to M do end for
The cluster unions can be computed easily by taking the sum of the cluster sizes and subtracting the intersection ob-tained from I .

Note that all the beha vioral measures describ ed above can be computed incremen tally . We main tain a vector in mem-ory for eac h of the beha vioral indices. As the incremen ts are computed for eac h timestamp, the corresp onding values are updated. Thus, at any given time point, one can obtain the Index values in a straigh tforw ard manner. These measures are displa yed to the user as part of the node view, whic h will be describ ed in the next section.

The timing results for the event detection and index com-putation are given in Table 2. To emphasize the savings, we also presen t the performance of our earlier implemen ta-tion[2] on the Wikip edia dataset, without the above men-tioned optimizations (see Table 3). In a nutshell the opti-mizations are very e ectiv e and ensure that the bac k-end is signi can tly faster than before and is within very reasonable limits given the scale of the data being operated on.
In this section, we highligh t the key comp onen ts of the in-terface along with asso ciated user interaction features. We also motiv ate the bene ts of these comp onen ts with resp ect to the overall goal of kno wledge extraction from evolving graphs. The key comp onen ts of the toolkit are: Data Loader: This comp onen t is used for reading the in-put data and lab el les. The data to be read is in the form of temp oral snapshot graphs, as we describ ed in Section 3. Eac h graph corresp onds to one time step and is stored in an edge le format. Additionally , a lab el le is read whic h as-sociates eac h node in the graph with a unique iden ti er and name, if available. If clusters are already available, then we pro vide an option to read in the cluster le as well. If not, clustering can be performed online. We pro vide options for kMetis or MCL clustering. Once the data is read, pre-pro cessing is done to create the cluster vectors (describ ed in the previous section) for the rst two timestamps. View Mo de Selector: Once the data is ready , the user selects one of the four supp orted views and the relev ant parts of the interface get activ ated. Before detailing the views, we describ e our hierarc hical represen tation.
 Coarsening: To visualize large graphs on the screen, we choose to coarsen the graphs, using the cluster information to construct multi-level hier archies of nodes . This facilitates easy visual interpretation, since it pro vides the user the abil-ity to iden tify and drill down to sections of interest in the graph. The graph is initially clustered to pro duce base clus-ters 3 . These clusters are then further clustered internally by our coarsening algorithm into multiple levels. The kMetis algorithm is used for performing clustering. Eac h level con-sists of a graph of sup erno des, eac h of whic h represen ts a cluster of lower-lev el nodes. At the lowest level in the hi-erarc hy, we have the nodes and edges of the graph. Before coarsening, a new edge le is created by transferring edges between nodes of di eren t clusters to the corresp onding su-3 If cluster le is already presen t, we use it Figure 2: Illustration of coarsened high-lev el view. A perno des , represen ting these clusters. This edge le is used by kMetis to obtain the higher level sup erno des. The user is initially pro vided with a high level view in the form of con-nected sup erno des, represen ting di eren t regions, as sho wn in Fig 2. The physical sizes of the sup erno des in the inter-face re ect the sizes of the cluster they represen t. Clusters that con tain a large num ber of nodes can thus be di eren ti-ated from singleton clusters with ease. Dynamic beha vioral information about the nodes and clusters are also pro vided, as we will describ e below. At any level, the user can se-lect one or a group of interesting sup erno des to drill down and visualize the corresp onding section of the original graph. Graph View{ In this view, the entire dynamic net work is displa yed as a graph. As men tioned above, the graph is presen ted as a multi-lev el hierarc hy. The bottom-most level represen ts the graph itself in the form of nodes and edges. The level immediately above represen ts sup erno des, where eac h node is a cluster of the lowest-lev el nodes. Eac h su-perno de in this level is lab eled with the Popularity Index value of the cluster it corresp onds to. It is also color-co ded to re ect the strength of the Popularity Index values. The user can select an interesting set of clusters, and descend to the lower level to visualize the nodes in question. In our implemen tation, the sequence of colors for nodes (from low weigh t to high weigh t) is Dark Yellow, Light Yellow, Light Green, Dark Green . Similarly , for edges the sequence is Dark Red, Light Red, Light Blue, Dark Blue . The progression of colors for nodes and edges is sho wn in the bottom righ t cor-ner of the visual interface. At the lowest level, prop erties of nodes -sociability, stability and in uenc e are computed as describ ed in Section 3 to assign a weigh t. Finally , the weigh ts are normalized between [0,1] and are mapp ed to a color whic h is then used to render the graphs. We also pro-vide a facilit y for multi-w eigh ting a node, where we compute the weigh t taking into accoun t two of these beha vioral mea-sures. This is bene cial for disco vering correlations among prop erties of nodes. The relativ e imp ortance of eac h edge is primarily captured by its temp oral stability , i.e., for how man y consecutiv e time steps that particular edge is ob-serv ed. Note that, the imp ortance of an edge (interaction) in terms of these measures can be determined based on the nodes involved. For instance, the stabilit y of the edge can be represented as the product of the stability indices of the two nodes i.e SI ( x; y; T ) = SI ( x; T ) SI ( y; T ). Moreover, to give less importance to old edges (which are not observed recently), we use di erent line styles. For example, if an edge also occurred in the previous time stamp, we use a dashed line to represent temporal stability. Edges that were not observed recently are represented by a straight line. Community View{ This view displays various clusters or communities present in the network. Once the user selects this view, the system presents the user with the clusters that the nodes belong to. The membership of nodes to the clusters are taken into account by using the same color and same marker for rendering.
 Event View{ The event view is designed to provide infor-mation regarding transformations that occur in the graph over time. This view displays a set of all critical events that occur between the current and previous intervals. The user can choose di erent time intervals and observe the events that transpire among them. Figure 3 shows the set of events between clusters of timestamps 2 and 3. At the top of the GUI, there are three bars a , b and k which correspond to the , and parameters for the event detection algorithm described earlier. The user can vary these parameters and examine the critical events obtained. In the middle of the screen, the GUI provides a list of all critical events observed. The user can select one of these events, which provides de-tails on the nodes and clusters involved. We present an example of a Merge and a Split event in the Case Study sec-tion. The detailed representation of the event is visualized on the screen giving the user a representation of the nodes involved and the change that has occurred. For the Merge and Split events in the Event View, we also provide a Se-mantic Similarity ranking. This is of use for graphs that have associated category or term hierarchy information. To begin with, the Information Content (IC) of a term (cate-gory or keyword-set), using Resnik's de nition [19], is given as: where k i represents a term and F ( k i ) is the frequency of encountering that particular term over all the entire corpus. Here, F ( root ) is the frequency of the root term of the hi-erarchy. Note that frequency count of a term includes the frequency counts of all subsumed terms in an is-a hierar-chy. Also note that terms with smaller frequency counts will therefore have higher information content values (i.e. more informative). Using the above de nition, the Seman-tic Similarity (SS) between two terms (categories) can be computed as follows: where lcs ( k i ; k j ) refers to the lowest common subsumer of terms k i and k j . To de ne the semantic similarity between two clusters, one can employ an information theoretic mu-tual information measure. Given probabilities of terms m and n occurring in a cluster as p ( m ) and p ( n ) respectively, and their co-occurrence probability p ( mn ), the Semantic Mutual Information (SMI) between the two clusters C a i and C j can be given as: SM I ( C a i ; C b i ) = However, while this measure accurately captures similari-ties, it is not very scalable for graphs with large category hierarchies, due to the amount of computation required and memory consumed. In these cases, the semantic similarity between two clusters can be computed as: Note that, the semantic similarity values between terms are pre-computed, while computing the Inter SS() of clusters or of Inter SS(), can be expected to contain authors or web-pages with similar topics and thus merge events that com-prise of such clusters are semantically meaningful (Semantic Merges). Hence, the Merge events are ranked in decreasing order of the Inter SS() of the merging clusters. For the Split events, we compute the Inter SS() of the split clusters. We will illustrate both types of Semantic events in the next sec-tion. Note that our toolkit can output Semantic Similarity scores for clusters (not shown).
 Node View{ All the above-mentioned views deal with global properties of the network. The node view presents the user with localized information. Once the user chooses node view, the toolkit provides a list of nodes ranked in decreas-ing order of the properties available (sociability, stability and in uence). The user can then select a node from the node list for further observation. This prompts the correspond-ing neighborhood graphs of that particular node over time to be displayed to the user. The displayed graphs includes the chosen node and its neighborhoods over time. One can gain insight into changes occurring in the neighborhoods of the selected node. For instance, in the case of in uence, one can identify spheres of in uence for a node over time. We will demonstrate the bene ts of the node view in the case studies in the next section.
 Zoom Filters: As the name suggests, this feature is used to zoom into certain sections of the graph. The user can select the area of interest by drawing a rectangle using the mouse. merge and split events detected. The selected part is then zoomed into and displa yed. It is also possible to zoom out to a lower resolution. Figure 4(a)-(b) demonstrates the zoom feature on the DBLP dataset. The zoom feature can be used multiple times to increase the resolution.
 Time Bro wser: This functionalit y is used to observ e the net work across time. This pro vides the user the capabilit y to detect time instan ts when graph top ology has changed considerably . The Back and Forwar d buttons at the bottom of the GUI can be used by the user to con trol the time, moving through the di eren t time interv als.
 Keyw ord Searc h: In man y cases, one is interested in searc hing for particular nodes [12] and their evolution over time. As we describ ed above, we use a multi-lev el hierarc hy of sup erno des to visualize sections of the graph. We also store a multi-lev el index that allo ws the querying and ex-traction of speci c nodes of interest. If one is interested in a particular node and its beha vior, we can extract the exact location of the node and visualize the corresp onding section of the graph.
 Evolution of Neigh borho ods: We also pro vide the option of visualizing the evolution of node neigh borho ods. When the user is presen ted with a view of a region of the graph, she has the option of selecting a particular set of nodes or comm unities and viewing the evolution of the neigh borho ods of these nodes over time. Once a region is chosen, we trac k the neigh borho ods of all nodes in that region over time. Comm unit y-driv en Layout: An integral comp onen t of our visual framew ork is the layout comp onen t. Once we have a set of nodes and edges to render on the screen, we need to map them to suitable coordinates that represen t the relationships that exist among them. As a rst step we leveraged the Graph viz(h ttp://www.graph viz.org/) lay-out tool to obtain coordinates. However, since the graph is dynamically evolving, we observ ed that directly emplo y-ing Graph viz led to a loss in visual corresp ondence of nodes and more imp ortan tly comm unities across timesteps. Re-solving this problem is not straigh tforw ard since nodes and edges may not be activ e at all time points. To handle this corresp ondence problem, we compute a novel community-driven layout scheme. The cen tral idea is to ensure that comm unities that overlap across time steps are laid out in corresp onding regions in consecutiv e time steps, thus main-taining relativ ely stable coordinates over time. The heuris-tic pro cedure we adopt involves iden tifying the most stable comm unities (using the Continue and Stabil ity computa-tions describ ed earlier) and suitably ensuring that global coordinates for suc h comm unities from their formation un-til they change drastically , remain consisten t. This leads to the desirable prop erty of visual corresp ondence across time stamps. Note however that individual nodes that join or leave comm unities are moved around based on their beha v-ior, as are comm unities that change signi can tly.
In this case study , we demonstrate the e ectiv eness of our toolkit for visual data analysis on the DBLP dataset. Our tool pro vides us with a list of authors rank ed by beha vioral attributes suc h as Sociabilit y and In uence, as describ ed previously . Our tool also allo ws one to com bine informa-tion from multiple metrics by specifying an ane com bi-nation of these values (men u-driv en option not sho wn). For this study , we chose Dr Rak esh Agra wal, who unsurprisingly ranks highly on both sociabilit y and in uence (see Fig 5). We equally weigh ted the con tribution of eac h index. Up on insp ection, one can see that the neigh borho ods for Dr Agra wal di er signi can tly between successiv e snapshots From 1997 to 2002, one can mak e out the progression in his sociabilit y and in uence index, as con veyed by the grada-tion of the color of the node represen ting him 5 . After 2002, however, man y of his neigh bors (collab orators) remain fairly consisten t, the sociabilit y index is lower but the in uence, of collecting more neigh bors in the cluster he is in balances this out very nicely . This correlates with his interests shifting to the focused area of priv acy preserving data mining and trust and securit y applications of databases. His collab orators in the last few timestamps sho wn are primarily from this area and this area has also tak en o very nicely since Agra wal and Srik ant's seminal pap er in the area in 2001.
Also, one can readily see that 3 nodes in particular ap-pear quite frequen tly, namely R. Srik ant, R. Bayardo and J Kiernan (after 2001) represen ted by dashed edges. These are some of Agra wal's frequen t collab orators. Another inter-esting trend is that the graph also iden ti es quite naturally collab orators of Agra wal's who have a high sociabilit y and in uence index (i.e. Christos Faloutsos, Gerhard Weikum, Dimitrios Gunopulos, Johannes Gehrk e, Prabhak ar Ragha-van, and Sura jit Chaudhary).
In the next case study , we analyze the Wikip edia web-graph. In particular, we demonstrate the use of Seman tic analysis with event detection. In the event view, the toolkit pro vides us with a list of di eren t events. As we men tioned in the previous section, we have the facilit y of ranking the Merge and Split events in terms of seman tic meaningfulness. First, we will consider a Semantic Mer ge event, that had the highest Seman tic Similarit y, sho wn in in Figure 6(a). In the rst snapshot, there are 2 clusters of size 5 and 11, that have considerable seman tic similarit y, as can be ascertained from the lab els. The clusters deal with Logic and Philosophy and the Merge event is thus justi ably meaningful. The merged cluster is sho wn on the righ t.
 For a Split event, one would exp ect the two split clusters to be seman tically dissimilar. While, this is mostly true, there can be occurrences where interesting min ute di erences can cause clusters to split up. These kind of Split events can in-dicate subtle changes across snapshots, where a cluster splits into two parts due to a small seman tic di erence among the asso ciated categories. These splits can be interesting as they can rev eal di erences that may not be obvious. This can be considered akin to drilling down a hierarc hy to disco ver sub-tle specializations of a category . We can nd suc h interesting occurrences by considering split clusters with low Inter SS(). An example of suc h a Split event is sho wn in Figure 6(b). As can be observ ed, the original cluster whic h deals with the Berlin Wall, splits into two clusters on East and West Berlin resp ectiv ely. Understandably , these two split clusters had reasonably high Seman tic Similarit y values. 5 In 1997 this value is low simply because this is the rst data point in the dataset we use { an artifact of the exp erimen t.
We have presen ted a toolkit for visualizing and analyzing dynamic interaction graphs. Our toolkit pro vides multiple views of the data and is designed to incorp orate features for multi-scale and multi-resolution analysis and supp orts the overview, zoom, lter and details{on{demand paradigm .
We have sho wn how the toolkit can be emplo yed for esti-mating interesting beha vioral prop erties of nodes and com-munities in the graph, suc h as stabilit y and in uence. The node view also allo ws one to visualize trends in these prop-erties over time. Additionally , the graph and event views permit us to disco ver and characterize speci c changes that occur, with resp ect to other nodes and comm unities. We have sho wn how the incorp oration of seman tic con ten t can aid evaluation and ranking of events disco vered. Our novel comm unit y-driv en layout comp onen t can aid exploratory anal-ysis and handle the corresp ondence problem in plotting trends of nodes and comm unities over time.

To ensure scalabilit y to large graphs, we have presen ted optimizations that can pro vide speedup and facilitate inter-activ e visual analysis. The toolkit also supp orts visualizing the cum ulativ e graphs with di eren t scoring mec hanisms to assign color to eac h edge and node. The coloring scheme cap-tures beha vioral prop erties and pro vides useful visual cues to disco ver imp ortan t and interesting parts of the graph. We have sho wn how the toolkit can perform visual analysis by taking into accoun t the evolution of nodes and comm unities as well as key events over time. Using illustrations on the DBLP and Wikip edia datasets, we have sho wn how the in-teractiv e features aid the user in answ ering common queries about dynamic net works in an e ectiv e and ecien t manner.
As part of ongoing work we are curren tly investigating the use of piv ot-based algorithms[21] to further enhance the vi-sual corresp ondence of comm unities across timesteps, while also impro ving the scalabilit y of the layout pro cess. We are also looking to incorp orate the dense subgraph visu-alization algorithms from our above-men tioned work into the toolkit. To further impro ve scalabilit y of the seman tic similarit y computations, we will leverage min-wise hashing metho ds [5]. This work is supp orted in part by the DOE Early Career Principal Investigator Aw ard No. DE-F G02-04ER25611, NSF CAREER Gran t IIS-0347662 and NSF SGER Gran t IIS-0742999. We would like to thank Klaus Berb eric h and Ev-geniy Gabrilo vich for pro viding us with the Wikip edia dataset and the category hierarc hy resp ectiv ely. [1] J. Ab ello, F. van Ham, and N. Krishnan.
 [2] S. Asur, S. Parthasarath y, and D. Ucar. An [3] L. Bac kstrom, D. P. Huttenlo cher, and J. M.
 [4] K. Berb eric h, S. Bedath ur, T. Neumann, and [5] A. Z. Bro der, M. Charik ar, A. M. Frieze, and [6] S. K. Card, J. D. Mac kinla y, and B. Shneiderman. [7] D. Chakrabarti, R. Kumar, and A. Tomkins.
 [8] P. A. Glo or, R. Laubac her, S. B. C. Dynes, and [9] P. A. Glo or and Y. Zhao. Analyzing actors and their [10] J. Heer and D. Boyd. Vizster: Visualizing online social [11] N. Henry and J.-D. Fekete. Matrixexplorer: a [12] V. Kac holia, S. Pandit, S. Chakrabarti, S. Sudarshan, [13] D. Kemp e, J. Klein berg, and E. Tardos. Maximizing [14] G. Kumar and M. Garland. Visual exploration of [15] J. Lesk ovec, J. M. Klein berg, and C. Faloutsos. [16] M. Newman. Clustering and preferen tial attac hmen t [17] A. Perer and B. Shneiderman. Balancing systematic [18] E. Qeli, W. Wiec hert, and B. Freisleb en. Visual [19] P. Resnik. Seman tic similarit y in a taxonom y: An [20] R. Sam taney , D. Silv er, N. Zabusky , and J. Cao. [21] N. Wan, S. Parthasarath y, K. Tan, and A. K. Tung. [22] H. Yang, S. Parthasarath y, and S. Meh ta. Mining
