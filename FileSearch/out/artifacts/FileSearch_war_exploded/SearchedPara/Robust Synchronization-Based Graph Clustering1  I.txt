
Junming Shao 1 , Xiao He 2 , Qinli Yang 2 , Claudia Plant 3 , and Christian B  X  ohm 2 As a data format, graphs are characterized as a set of interconnected units. These units, often called nodes or vertices, are linked to each other by edges expressing their relationships. In recen t years, the study of graph clustering has attracted a huge attentions and many techniques have been developed based on different partitioning criteria, e.g. betweenness, modularity and clique. Although established approaches have already achieved some success, finding the real and intrinsic clusters in graphs is still a big challenge [7]. Moreover, previous studies of graph clustering mainly focused on unweighted graphs. A fresh and increasingly challenging care is to study weighted graphs where each link is associated with a large heterogeneity in the capacity and intensity.

In view of these challenges, in this pap er we consider graph clustering from a different perspective: synchronization . Synchronization is a prevalent phe-nomenon in nature that a group of events spontaneously come into co-occurrence with a common rhythm through mutual interactions. A paradigmatic example of synchronization phenomena is the synchronous flashing of fireflies observed in some South Asian forests. Briefly, synchronization means adjustment of states of oscillators due to weak interaction so that their states can coincide. To bet-ter illustrate the concept of synchronization, let us take social networks as an example. People in a social network with similar characteristics, e.g. common in-terest, friends, or similar calling behaviors from phone companies tend to group together. In such network, for a certain problem, in the beginning, each person may has his/her own opinion. As time evolves, people tend to be affected by their friends and change opinion gradually. In principle, the closer relationship they are, the higher influence between each other. Through the discussion, fi-nally people with similar characteristics tend to achieve the same opinion. The dynamic process of opinion formation in the social network can be reviewed as a common synchronization phenomenon. From this example, what makes us interested is that the process of opinion formation in the social networks (a dy-namic process towards synchronization) is very similar to a dynamic clustering process. More importantly, the interactions among vertices during the process of synchronization are completely governed by the intrinsic structural of the graph.
Therefore, inspired by natural synchronization phenomena and established models, for graph clustering, a new intuitive idea is to consider it as a dynamic process towards synchronization. We consider each vertex as an oscillator and it interacts with other vertices relying on its intrinsic connection information. The graph clustering is thus transformed into investigating the dynamics of vertices during the process towards synchronization. A graph cluster is finally defined as the vertices which can finally group together after synchronization.
The remainder of this paper is organized as follows: in the following section, we briefly survey related work. Section 3 presents our algorithm in detail. Section 4 contains an extensive experimental evaluation and we finally conclude the paper in Section 5. During the past several decades, many approaches have been proposed for graph clustering. Due to space limitation, we only provide a very brief survey on graph clustering related to our work.
 Spectral Clustering: These approaches refer to a class of well-known tech-niques which rely on the Eigenvector decomposition of a similarity matrix to partition objects into disjoint clusters. The algorithm proposed by [14] allows detecting arbitrarily shaped clusters by considering the clustering problem from a graph-theoretic perspectiv e. A cluster is obtained by removing the weakest edges between highly connected subgraphs, which is formally defined by the normalized cut or similar objective functions. To over come the difficulty of parametrization, Zelnik-Manor and Perona [18] proposed a new method to estimate the number of clusters by investigating the structure of the Eigenvectors.
 Multi-Level Clustering. Metis is a set of serial of multi-level partitioning techniques proposed by Karypis and Kumar [11]. For graph partitioning, an initial clustering is performed on the coarsest graph, and then, a sequence of successively finer graphs is constructed level by level. At each level, an iterative refinement algorithm such as Kernighan-Lin (KL) or Fiduccia-Mattheyses (FM) is used to further improve the bisection. In all, these methods are fast and give high-quality partitions in most cases. However, like spectral clustering, a suitable number of k clusters has to be set for the algorithm. In addition, these multilevel algorithms restrict to detect cl usters of nearly equal size.
 Markov Clustering. The Markov Cluster algorithm (MCL) is a popular al-gorithm used in life sciences for fast clu stering of weighted graphs. MCL [6] simulates a flow on the graph by calculating successive powers of the associ-ated adjacency matrix. At each iteration, an inflation step is applied to enhance the contrast between regions of strong or weak flow in the graph. The process converges towards a partition of the graph, with a set of high-flow regions (the clusters) separated by boundaries with no flow. The value of the inflation pa-rameter strongly influences the number of clusters.
 MDL-Based Clustering. The key idea of these methods is to detect clus-ters by using a model of probability density functions (PDFs) to describe the data structure and link the clustering problem to data compression. One of fun-damental techniques in this line is Cross-Association [5] approach, which finds groups in unweighted graphs by loss-less compression with Minimum Descrip-tion Length (MDL). Similar to Cross-Association, the algorithm called PaCCo [13], is proposed for weighted graph, which combines the MDL principle with a bisecting k-Means strategy. The MDL principle provides a good way to qualify the clustering results and thus avoids the parameter setting.
 Synchronization. Arenas et al. [1] apply the Kuramoto model for network anal-ysis, and study the relationship between topological scales and dynamic time scales in complex networks. From bioinformatics, Kim et.al. [4] propose a strat-egy to find groups of genes by analyzing the cell cycle specific gene expression with a modified Kuramoto model. Recentl y, Shao et.al proposed an extension of the Kuraomto model for clustering and outlier detection [15], [2], [16] on vector data based on the concept of synchronization and MDL principle. In this section, we introduce RSGC algorithm, which consider graph clustering as a dynamic process. In the following, we start with the vertex feature represen-tation and then introduce an interaction model for graph clustering. In Section 3.3 we discuss the algorithm RSGC in detail. 3.1 Vertex Feature Representation Given an undirected graph G , the only information we can gain is its connectivity patterns. In this study, we first compute the proposed Transitive distance of any two vertices and then transform them in to a feature vector space. Each vertex is finally mapped as a feature vector to repr esent its initial phase. Before that, let us first introduce some necessary definitions.
 Definition 1 (Jaccard distance). Given any two vertices u and v in Graph G , the Jaccard distance Jd ( u,v ) of two vertices u and v is defined as: where  X  ( u,v ) is the Jaccard coefficient [10] between vertices u and v , Here  X  (  X  ) is neighbors of one vertex. Relying on Eq. (1), the Jaccard distance of the pairs of non-neighbor vertices is always 1, which is insufficient to represent the similarity of any two vertices effect ively. Therefore, we further define Transitive distance as follows.
 Definition 2 (Transitive distance). Given two vertices u and v have no common neighbors, { S 1 ,  X  X  X  ,S N } are all shortest paths between vertices u and v and S k = { u,w k 1 ,  X  X  X  ,w k | S tween vertices u and v is defined as the minimal Jaccard distance of these paths. Figure 1 gives an example to illustrate the Transitive distance computation from vertex 1 to all other vertices. Based on Tr ansitive distance, the distance matrix for all vertices can be computed. Finally, we map it into points in a feature vector space and each vertex is represen ted as a feature vector. Here, we apply the well-known method, called FastMap [8], to transform the distance matrix in a metric space into a feature vector space. In this study, we simply map each vertex into a 2-dimensional feature spa ce. In principle, the higher dimensional feature space is selected, the less connect ion information among vertices is lost. However, the difficulty of clustering in high dimensional space is also increased. 3.2 Interaction Model Currently, one of the most successful approaches to explore the synchronization phenomena is Kuramoto Model [12]. It describes the dynamics of a large set of phase oscillators by coupling the sine of their phase differences. Formally, the Kuramoto model (KM) consists of N phase oscillators where the phase of the i -th unit, denoted by  X  i , evolves in time according to the following dynamics: where  X  i stands for its natural frequency and K describes the coupling strength between units. sin (  X  ) is the coupling function.

The KM describes the global synchronization behavior of all coupled phase oscillators. However, in real-world graphs or networks, the connectivity among vertices are often not full but partial, which indicates that only a local ensemble of vertices are connected. T herefore, it is necessary to extensively reformulate Eq. (4). The natural and intuitive way is to model the interactions in graph with its intrinsic connection patterns.
 Definition 3 (Interaction Model). Let u be a vertex in the graph G .  X  ( u ) are the neighbors of vertex u and u i is the i  X  th feature of vertex u .The interaction range R u of vertex u is the maximal distance to these neighbors, according to Eq.(4), the dynamics of i  X  th phase u i of vertex u is governed by: where W ( v,u ) is the edge weight between vertices u and v .The  X  ( u,v )isused to check whether the vertex v should interact with the vertex u , which is defined as: Then, let dt =  X t , the Equation (5) can be further written as: Here, without knowing external knowledge, all vertices (oscillators) are assumed having the same frequency w .Theterm  X t  X   X  i is thus the same for each vertex and ignored.  X t  X  K = C is a constant and fixed as 1. Finally the dynamics of i  X  th phase u u ( t +1) = u i ( t )+ The vertex u at time step t =0: u (0) represents the initial phase of the vertex (original feature vector). The u i ( t + 1) describes the renewal phase value of i -th phase of vertex u at the t =(0 ,...,T ) time evolution.
In order to investigate local dynamic effects so that the clusters of synchro-nized vertices can be discovered, we define a graph order parameter r g ,measuring the coherence of the local oscillator population in graphs.

Definition 4 ( Graph Order Parameter ) The graph order parameter r g characterizing the degree of local synchronization in graphs is provided by: The more vertices are synchro nized together, the value of r g will become much smaller. The dynamics of all vertices will terminate when the r g converges, which indicates that the vertices in clusters synchronize together (in phase). 3.3 The RSGC Algorithm Generally, the process of the graph clustering based on synchronization involves three steps: (1) Vertices Feature Representation; (2) Dynamics on Graph and (3) Clusters Discovering. For illustration, we introduce a simple weighted graph in Figure 2(a). Figure 2 (b) plots the edge weights distribution of the graph. With Transitive distance and FastMap, each v ertex is projected into a feature space, which is indicated in Figure 2(c). After that, the dynamics of all vertices can be simulated according to Eq. (7). Figure 3(f) displays the dynamic movement of all vertices during the process towards synchronization. Figure 3 (a)-(c) further depict the detailed states of vertices at time step t =0to t = 8. The process of synchronization will be terminated when the graph order parameter r g converges, which indicates in Figure 3(e). The result of graph partitioning is shown in Figure 3(f). Finally, the pseudocode of RSGC algorithm is further described in Algorithm 1.
 Algorithm 1. RSGC algorithm To extensively study the performance of RSGC , we conduct experiments on several synthetic and real-world data sets. We compare RSGC to representatives of various graph clustering paradigms: Metis , MCL and two parameter-free weighted graph clustering approaches: information-theoretic clustering PaCCo [13] and the spectral clustering approach [18] (named Spectral in the following). All experiments have been performed on a workstation with 2.0 GHz CPU and 8.0 GB RAM. 4.1 Evaluation Criteria To provide an objective comparison of eff ectiveness, we evaluate the graph clus-tering algorithms in two ways. If class label information is available, three information-theoretical measures: normalized mutual information (NMI), ad-justed mutual information (AMI) and adjusted variation information (AVI) [17] are directly applied for clustering comparison. For the comparison of different algorithms on the real data sets without class-label information, we evaluate thembasedonameasurecalled modularity [9], which is applied to quantifies the quality of a division of a network into modules or communities. 4.2 Proof of Concept Intrinsic Cluster Structure Discovery. We first evaluate the performance of RSGC to discover natural graph partitioning in difficult settings, starting with subgraphs of arbitrary size. The data set displayed in Figure 4(a) consists of 4 clusters with different sizes, ranging from 20 to 80. The intra-connection is approximately 40% and the distribution of edge weights is Gaussian. RSGC suc-cessfully detects all clusters without any edge weights distribution assumptions. Moreover, we generate four c lusters with different densities. For each cluster, it includes 20 vertices and the probabilities of intra-connection of each cluster vary from 20% to 80%, see Figure 4(b).
 Outliers Handling. Inherit from the concept of synchronization, RSGC algo-rithm allows detecting outliers, where these vertices in graphs are difficult to synchronize with other vertices and have different dynamics. As displayed in Figure 4(c), the outliers are found by exploring these vertices which are out of synchronization. 4.3 Synthetic Data For comparison, we further create a graph consisting of four clusters with dif-ferent settings to evaluate their effectiv eness. The number of vertices per cluster varied from 25 to 100. Meanwhile, the prob abilities of intra-connection of each cluster ranging from 20% to 80% and the inter-connection among clusters is randomly interlinked with 10% . The weig hts of all connections are generated with Gaussian distribution. In addition, 6 nodes are randomly inserted into the graph with very few connections. The quality of clustering results based on dif-ferent clustering approaches is illustrated in Table 1. RSGC successfully find all 4 clusters and irregular nodes automatically. The experiment shows that RSGC outperforms Metis and is also comparable to algorithms of MCL , Spectral and PaCCo . 4.4 Real World Data In this section, we evaluate the performance of RSGC on several real-world data sets. Due to space limitation and difficult parametrization, we limit the comparison to the parameter-free graph clustering algorithms RSGC , Spectral and PaCCo . We obtain five author-collaboration networks from different com-munities: Network Theory (Netsci), PhD Student Network in Computer Science (CS-PhD), Computational Geometry (Geom), Arxiv General Relativity (CA-GrQc), Erdos Research (Erdos) 12 ; three Protein-Protein Interaction networks from three species, which are S. cerevisiae (Scere) , Escherichia coli (Ecoli) and C.elegans (Celeg) and a Autonomous Systems network of routers comprising the Internet (As) 3 .

Table 2 shows the clustering results in terms of modularity score .Itisobvious that RSGC perform well on all these data sets, which obtain the best modularity scores for all experiments except the Spectral algorithm on As data set. For the algorithm of PaCCo , it can not yield good partition results for most data sets, especially for the unweighted graphs. The reason behind it is that PaCCo tends to fail if the weight distribution does not correspond to the cluster model. Like PaCCo , Spectral also obtain relatively few clusters except for the CS-PhD and As data sets.
 Case Study : To further evaluate the performance of RSGC , we illustrate it on a case study on a protein-protein interaction (PPI) network. Here, we use the latest version of PPI network of C.elegans (Celeg), which contains 2880 proteins and 4812 known interactions. We analyze this interaction network with RSGC and also compare its performance to PaCCo and Spectral . RSGC discovers 32 clusters, while PaCCo and Spectral produce only 2 clusters, respectively. In the context of biology, we can evaluate the biological significance of obtained clus-ters with the help of the Gene Ontology database, which provides the ontology of defined terms representing gene product properties on three vocabularies of annotations: Molecular Function, Biological Process and Cellular Component. Researchers can apply P-value to demonstrate the biological significance, which is defined as the probability to observe by chance at least x elements at the intersection between the query set and the reference set [3].

Under the evaluation with Molecular Function annotations, RSGC finds three clusters which are enriched for three molecular functions. In contrast, PaCCo and Spectral only obtain one biological significance cluster for molecular func-tions. In addition, for all three approaches, they find a significant cluster enriched for the function structural constituent of ribosome , where the P-values are 1.2e-17, 2.3e-9 and 1.3e-19 for RSGC , PaCCo and Spectral respectively. In addition, RSGC finds another two clusters enriched for protein binding (P-value = 2.5e-03), acetylcholine receptor activity (P-value = 3.1e-06). Therefore, RSGC can detect more clusters which make sense bi ologically. Similarly, we also evaluate the clusters using biological processing annotations. Here, RSGC successfully obtains 9 significant clusters which are enriched for biological processing while PaCCo and Spectral have two and one significant clusters respectively. All of RSGC , PaCCo and Spectral methods discover one significant cluster which is enriched for the term reproduction with the P-values of 2.8e-11, 3.7e-20, 3.1e-37 respectively. Moreover, RSGC also reveals another 8 significant clusters enriched for different biological process, such as embryo development , multicellular organ-ismal reproductive process , morphogenesis of an epithelium , etc. Please refer to Table 3 for details. 4.5 Runtime For runtime comparisons, we generated several synthetic data sets, where the number of clusters k varied ranges from 10 to 50 and each cluster contained 100 vertices. Approximately 30 % of the i ntra cluster edges were connected and 5% inter cluster edges were linked. To obtain more accurate runtime results, for each method, each data set was processed for 10 times and then found the mean of the 10 rounds. Fig. 5 clearly shows that RSGC is faster than Spectral and PaCCo . However, RSGC is slightly slower than the parameter dependent approach MCL and Metis . In this paper, we introduce RSGC , a natural graph clustering algorithm based on synchronization. The key idea is to consider the graph clustering as a dynamic process towards synchronization. The extensive experiments demonstrate that RSGC algorithm has several desirable properties: RSGC provides a natural way for graph clustering, where the proposed interaction model well fits the real-world networks, such as the interaction weights and range. Relaying on the proposed interaction model, RSGC allows discovering graph clusters with arbitrary size and density without any data distribution assumption. RSGC is robust against noise vertices or outliers.
 Acknowledgments. Junming Shao is supported by the Alexander von Humboldt-Foundation.

