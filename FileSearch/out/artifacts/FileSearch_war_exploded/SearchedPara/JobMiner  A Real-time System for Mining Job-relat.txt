 The various kinds of booming social media not only provide a platform where people can communicate with each other, but also spread useful domain information, such as career and job market information. For example, LinkedIn pub-lishes a large amount of messages either about people who want to seek jobs or companies who want to recruit new members. By collecting information, we can have a bet-ter understanding of the job market and provide insights to job-seekers, companies and even decision makers. In this pa-per, we analyze the job information from the social network point of view. We first collect the job-related information from various social media sources. Then we construct an inter-company job-hopping network, with the vertices de-noting companies and the edges denoting flow of personnel between companies. We subsequently employ graph min-ing techniques to mine influential companies and related company groups based on the job-hopping network model. Demonstration on LinkedIn data shows that our system Job-Miner can provide a better understanding of the dynamic processes and a more accurate identification of important entities in the job market.
 H.2.8 [ Database Management ]: Data Applications X  Data Mining Design, Experimentation, Human Factors Social media, temporal network, influence analysis, graph mining, job market
Social media has become one of the most popular web and mobile applications, which provides a platform for Internet Figure 1: Examples from Twitter and LinkedIn about job mark et information. users sharing messages and communicating with others. Ac-cording to a study, hundreds of millions of Internet users spend about 20% to 25% of their time on social media web-sites like Facebook, Twitter, Youtube and Flickr in a day [3]. Online social media platforms also play a critical role in spreading useful domain information such as job-related messages either about newly employed people or new job opening. For example, companies actively maintain pages on Twitter to interact with online users and post a lot of tweets about new job openings like  X  X ooking for an exciting new Graphics or Animation job? We are hiring! X  by Adobe. A more typical social media platform is LinkedIn, the largest professional social network. Besides that, we can often see personnel flow information from Twitter like:  X  X ohn Smith joined Amazon as a software engineer, previously in Wal-mart X  or  X  X ebecca Wheeler joined Goldman Sachs as a vice president, previously in Accenture X . Figure 1 shows an ex-ample of a list of posted messages about job opening infor-mation on Twitter and LinkedIn, respectively.

Laid with such rich information about job market, social media provides us with a new way to view and analyze it, driven by commercial marketing interests and online users X  needs. How to effectively and efficiently discover job-related patterns from social media data is of great importance to increase product-marketing performance. Moreover, with the help of knowledge discovery techniques, we could detect the latent company activities and user behaviors on the job market instead of merely summarizing the statistics.
We propose a system called JobMiner to mine the job-related patterns of both individuals and companies on the job market using social media data. With the help of API, two kinds of information are collected from Twitter, Linkedin and Facebook: (1) job opening information by companies in real-time and (2) person X  X  job-hopping information among companies. W e monitor these information and detect re-lated company groups and rank influential companies based on job-hopping network model. The major contributions of this work are: (a) we introduce a method to detect the job-related patterns from social media data; (b) we propose a network based modeling of job market; (c) we present data mining algorithms to estimate representativeness and com-pany influences and to find related company groups; and (d) we implement a working system to demonstrate the ef-fectiveness of the proposed approaches.
As shown in Figure 2, JobMiner works as follows: (1) download job related content from social media; (2) gener-ate a temporal network model for user job-hopping behavior; (3) perform graph mining based on the job-hopping tempo-ral networks; and (4) provide the web interface for brows-ing, category-based company ranking and interest-based rec-ommendation, such as recommending jobs or companies to users who may be interested in them.
For LinkedIn data, we use the stream API to download all possible job-related information without violating users X  privacy. For example, for each LinkedIn company wall, we keep all public comments,  X  X ikes X , and public user profiles.
JobMiner monitors multiple channels of social media. These channels include over 10,000 LinkedIn company profiles. For most of these sources, we have all the posted job and per-sonal job changing information to date since 2009 or its inception. These information is generally organized and shown in time order. We keep our data synchronized with the source media in real time. Figure 3 shows an exam-ple of posted job information for two specific companies: Microsoft and IBM, from April 2012 to March 2013. The red points represent the number of jobs posted by Microsoft while the blue ones represent the number of jobs posted by IBM. The JobMiner system allows users to keywords-search for job openings including job titles such as  X  X oftware en-gineering X  or job locations such as  X  X reat Chicago Area X .
To model the job-hopping activities between different com-panies, we employ a weighted directed graph G = ( V, E, t ),
Figure 4: Job-hopping network for three time stamps. where V is the set of nodes representing different organiza-tions or companies, and E is the set of edges, representing personnel flows between pairs of different companies. The weight of edge e u,v represents the number of job-hopping activities from company node u to company node v .
Figure 4 shows an example of such network within three time stamps. The directions of the arrows represent the per-sonnel flow directions. For example, there are people switch jobs from IBM to Google or from LinkedIn to Facebook at time stamp t . Generally, the time stamp interval should be set by balancing both network density and real time per-formance. For simplicity, we currently set the time stamp window as 1 month in our system.
The activities of some highly influential companies would affect the other related companies on the job market. For ex-ample, if one company has some new job openings with high salaries, the employees at its peer companies might consider switching jobs. The task of ranking the influential compa-nies on the job market is based on the generated job-hopping network model. The results can be used for recommending top-ranked companies to the job-seekers who are interested in them.
 We mine such knowledge from two different viewpoints. First, given the posted jobs information, we can rank the companies in the given company category or the jobs of the corresponding topic, e.g., the system would rank the compa-nies based on the number of posted jobs as  X  X oftware engi-neer X . Second, we generate the directed job-hopping graphs and identify influential entities by mining the job-hopping temporal network. Identifying influential entities has be-come an essential part of analyzing and understanding net-worked systems with application to a wide range of fields and applications. In this study, we assume that the time during which a network is observed is finite. We measure the influential of nodes based on: temporal degree, tempo-ral closeness and temporal betweenness [5]. User can rank the influence of companies based on different measurements. We can further use the result to find a small set of influence entities in the network on a given topic based on influence maximization [6].
Given a company, we define its  X  X elated companies X  as a group of companies that have dense connections in its gener-ated job-hopping network. A simple approach to find these companies is to detect temporal communities [2] in the net-works. We introduce a method that aims to find a good par-tition in a given network snapshot by exploiting the knowl-edge of the community structure in the previous snapshot. The rationale behind the method is that any system tends to maintain some temporal contiguity in its features as it evolves.

More formally, given network snapshots G t  X  1 , G t and the partition P t with respect to t , the problem is to find a parti-tion that solves the following constrained optimization prob-lem: where Q is a quality function for the community structure in a snapshot, P denotes the space of all partitions, and E is a measure of distance or dissimilarity between the community structure at times t and t  X  1. The formulation above is based on the intuition that temporal communities can be detected by optimizing for quality in the current snapshot while ensuring that the distance from the past community structure is limited to a certain amount, as specified by the parameter  X  , where the parameter  X  is between 0 and 1. We set  X  as 0.5 in our experiments. To measure Q , we use modularity [7], a widely studied and tested quality function, which is defined as follows: w here w uv is the weight of e u,v , M is the total number of edge weighs, C u is community which node u belongs to, k u is the total degree of node u , and  X  ( i, j ) is 1 if and only if i = j , and 0 otherwise.

To measure partition distance E , we first introduce the definition of E . Given network snapshots G t  X  1 , G t and par-tition P t  X  1 , P t , an edge e ( u,v ) in G t is said to be estranged if edge l u 6 = l v , given that u and v were neighbors in G and l u = l v in P t  X  1 . E is now defined as the fraction of estranged edges in G t and can be written as: cency matrices of G t  X  1 , G t , respectively.

Greedy local optimization methods used for modularity maximization cannot be directly used to solve the constrained optimization problem [8, 10]. Once this method of comput-ing the Lagrange dual has been determined, we solve the dual problem of finding the best Lagrange multiplier by us-ing Brent X  X  method [1] and adapting a hierarchical version of the Lab el Propagation Algorithm [9].
The JobMiner system collects large amount of data from social media. For example, in LinkedIn, there are nearly 4,000,000 posted jobs and 3,500,000 job-hopping activities from 10,000 companies from June 2012 to Dec. 2012. Such big data presents a number of challenges due to its complex-ity. One key challenge is how we can store the data, and how we can analyze and understand it given its size and our com-putational capacity. JobMiner is designed to be a data min-ing system that is (almost) always available, highly durable, and easily scalable for big data. JobMiner contains a clus-ter of several transactional databases and high-dimensional data warehouses. Each social channel of JobMiner (e.g., LinkedIn) updates in real time. More importantly, JobMiner can discover knowledge from cross-platform heterogeneous information and therefore give end-users timely and unbi-ased insights. To meet the needs of data mining tasks [4], we enable free text search in our system through multiple scalable indexing /searching solutions. Figure 6: Top ranked companies in the management con-sulting categor y.

Figure 7: The related companies information of IBM.
We collect data from LinkedIn (http://www.linkedin.com/) from March 2011 to March 2013 to demonstrate the us-age of JobMiner. Table 1 shows the details of the used data which consists of two parts: job opening data and job hopping data. Figure 5 shows the home page of our Job-Miner system. The website is supported by Apache and MySQL and the user interface is supported by PHP and HTML. Some packages like Gephi (https://gephi.org/) and YUI (http://yuilibrary.com/) are used for data visualiza-tion. The user can log into the system from the main page. This page allows users to make search and/or query oper-ations with specific keywords, such as a company category  X  X nformation Technology and Services X , a job location  X  X an Francisco Bay Area X , or a job title X  X ystems Architect X . Job-Miner also provides information about the top ranked com-panies in each corresponding category. Figure 6 shows the top ranked companies returned by JobMiner system when the user uses  X  X anagement consulting X  as the keyword to search for jobs. Then the user is likely to check these com-panies to see if there are any suitable jobs available. Thus, the user chooses one company that he/she is interested in, like IBM and wants to find a job there. Unfortunately, Job-Miner indicates that there is no job opening at IBM at that time. The system guides him/her to the LinkedIn activity page and finds him/her some other related companies on the job market as shown in Figure 7. The user could find other job opportunities with the help of this useful information. As mentioned in subsection 2.2, the JobMiner system helps users to monitor the posted jobs in real-time and provides a way for users to search jobs in the data stream. In this paper, we have demonstrated a system called Job-Miner to mine the latent behavior and relationships of peo-ple and companies on the job market using social media data. Possible application scenarios of JobMiner could be job recommendation system for both job-seekers and em-ployers, or an auxiliary tool to analyze the job market infor-mation as well as its societal impact.

Note that this demo has used LinkedIn data as an illustra-tive example since it is currently the most professional so-cial media websites for job hunting. However, the technique proposed can be applied/extended to other job-related so-cial media data, such as Twitter and Facebook, or we can combine all these information together to form a hybrid job-related source system, which we intend to pursue in the fu-ture. [1] R. P. Brent. Algorithms for Minimization Without [2] Z. Chen, W. Hendrix, and N. F. Samatova.
 [3] Y. Cheng, Y. Xie, K. Zhang, A. Agrawal, and [4] Y. Cheng, K. Zhang, Y. Xie, A. Agrawal, W.-k. Liao, [5] H. Kim and R. Anderson. Temporal node centrality in [6] L. Liu, J. Tang, J. Han, M. Jiang, and S. Yang. Mining [7] M. E. Newman. Modularity and community structure [8] U. N. Raghavan, R. Albert, and S. Kumara. Near [9] T. Yang, Y. Chi, S. Zhu, Y. Gong, and R. Jin. [10] Y. Yang, J. Wang, and A. E. Motter. Network
