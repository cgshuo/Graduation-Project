 1. Introduction can use tools for XML schema visualization, e.g. Altova XML Spy [8] . these cases, a designer needs to create many conceptual schemas not explicitly related to each other. of their introduced conceptual model. tually consistent . and more readable. 5. They do not sufficiently study the problem of designing integrity constraints for XML. language.
 sults presented in this paper are fully implemented in a new tool eXolutio.
Particular contributions of this work are outlined in Fig. 1 . It shows the two MDD levels the described properties formally.
 schemas with simpler ones ( optimization ).
 approaches and Section 9 discusses related open issues. Section 10 summarizes the work and concludes. 2. Motivation
In this section, we present a real-world example of a portal of the Czech government contract.
 element estim_price.
 all XML schemas are bound to the conceptual schema. 3. Preliminary notation and de fi nitions relationship between regular tree grammars and current XML schema languages. 3.1. Common notation
We use L to denote an infinite set of string labels . D denotes a finite set of data types . A data type D data values. D denotes the union of all considered data types ( D (i.e. set of all considered data types) and we, therefore, do not introduce specific data types. C ={ m..n : m  X  ( m  X  n  X  n = * )} denotes an infinite set of cardinality constraints ,whereIN And, 2 x and 2 ( x ) denote the set of all subsets and ordered subsequences of a set X , respectively. Last but not least we need to formally define the notion of regular expressions.
De fi nition 3.1. A regular expression re over a set N is an expression generated by the following rule RE : choice or content model , respectively. 3.2. XML data model
De fi nition 3.2. An XML tree  X  is an expression with structure described by the following rule T : where () is an empty expression, v  X  D * and l  X  L . A sub-expression  X  @ l [v] is called XML attribute with a name l and value v,  X  l [v] is called XML element with a simple content with name l and simple content v. Example 3.1. A sample XML tree is depicted in Fig. 3 (b). Fig. 3 (a) shows the corresponding XML document.
Definition 3.2 unifies the notion of XML tree and XML element ment at the same time. This XML element is called root XML element of of  X  is also XML tree on its own. We will call it XML sub-tree of not allowed. This is restrictive but not fundamental for our work. 3.3. Regular tree grammars the XML schema languages should be used.

De fi nition 3.3. A regular tree grammar is a 4-tuple G=(N, T, S, P), where:  X  N is a finite set of non-terminals.  X  T p L is a finite set of terminals.  X  P is a set of production rules of one of the following forms:  X  S p N e is a set of XML element declarations called initial non-terminals . PCDATA borrowed from DTD.
 with a simple type, and non-terminal Code1 is an XML attribute declaration. competition of non-terminals.

De fi nition 3.4. Let us have a regular tree grammar G=(N, T, S, P). Two non-terminals Z
De language if it is generated by a local tree grammar.

De fi nition 3.6. A single-type tree grammar is a regular tree grammar such that  X  for each production rule, non-terminals in its content model do not compete with each other, and  X  start symbols do not compete with each other.
 A tree language is a single type tree language if it is generated by a single type tree grammar. matches re .

De fi nition 3.7. Let G=(N, T, S, P) be a regular tree grammar, re a regular expression, and ordered sequence of non-terminals from N). We say that Z matches re (  X  re=Z  X  N  X  Z =Z,  X  re=re  X  m..n  X  Z = Z 1 ... Z k  X  m  X  k  X  n  X  (  X  1  X  i  X   X  re=( re  X  )  X  Z  X  L ( re  X  ),  X  re= re 1 , re 2  X  Z = Z 1 Z 2  X  Z 1  X  L ( re 1 )  X  Z 2  X   X  re= re 1 | re 2  X  ( Z  X  L ( re 1 )  X  Z  X  L ( re 2 )), or  X  re={ re  X  }  X  (  X  permutation Z  X  of members of Z )( Z  X   X  used to specify operator priority. An expression re  X  m .. n
An expression re 1 , re 2 specifies that a sequence matching the expression starts with a sequence matching re quence matching re 2 . A sequence matching re 1 |re 2 must match re which may be reordered so that it matches re  X  .

Z = Login Nm Phone Email Phone and a regular expression re = Login , Nm ,{ Phone { Phone 1..* , Email 0..1 }, because its reordering Phone Phone Email matches Phone Phone 1..* and Email matches Email 0..1 .
 exists, the XML tree belongs to L(G) . We extend this definition in Definition 3.8 .
De fi element and attribute x of  X  to a non-terminal from N, denoted I  X  If x is the root element, then I rtg ( x )  X  S.  X  If x= l [ v ], then ( I rtg ( x )  X  l [ D ])  X  P s.t. D  X  If x=@ l [ v ], then ( I rtg ( x )  X  @ l [ D ])  X  P s.t. D  X  If x=l [{ x 1 , ... , x m
We will call I rtg ( x ) interpretation of x against G. We will say that x is valid against I terpretations of its XML attributes (in any order) which matches the regular expression of the production rule.
Example 3.4. Our sample XML tree depicted in Fig. 3 (b) has an interpretation I depicted in Fig. 4 . I rtg is intuitive and we do not list it here. Finally, we borrow the definition of validity of an XML tree against a regular tree grammar from [61] .
De fi nition 3.9. Let G=( N , T , S , P ) be a regular tree grammar. The XML language generated by G is the set L(G)={ tree with an interpretation against G }. We say that an XML tree 4. Conceptual model for XML in the platform-specific model (PSM schema) . We introduce PSM in Section 4.2 . 4.1. Platform-independent model (PIM)
There are two possible approaches to expressing a PIM schema supported by software-engineering case tools which is not the case of OWL. modeling for XML in this paper. Still, OCL is worthy of study and we mention possible directions in Section 9 . working on and it deserves a separate paper especially in our environment of multi-level modeling. they are formed by different association ends.

De fi nition 4.1. A schema in the platform independent model (PIM schema) is a 9-tuple S =  X S ipant, card), where:  X  S c and S a are sets of classes and attributes , respectively.  X  S r is a set of binary associations . S e is a set of association ends . A binary association is a set R={ E  X  type : S a  X  D assigns a data type to each attribute.  X  class : S a  X  S c assigns a class to each attribute. For A  X  participant : S e  X  S c assigns a class to each association end. For R={ E  X  card : S a  X  S e  X  X   X  C assigns a cardinality to each attribute and association end. The members of S c , S a , and S r are called components of S .
 1..1, it is not displayed (in case of attributes as well as associations). istics are modeled by the attributes A login , A name 1 , A one has a cardinality 1..  X  . Similarly, a class C Purchase date and status modeled by the attributes A code 1 , A date 1 classes havingthe same nameas in the case of A name 1 and A
R one and only one customer.
 According to Definition 4.1 , the components of our sample PIM schema are as follows: Formally, each class is given a name by the function name, e.g. name ( C bute is associated with its class by the function class, e.g. class ( A type ( A email 1 )=string, card ( A email 1 )=1..  X  .

Each association is a set of two association ends, e.g. R { E ordered  X  1 , E ordered  X  2 }. An association is given an optional name by the function name, e.g. name ( R ship function participant, e.g. participant ( E bill  X  to  X  1 )= C ciation end is given a cardinality by function card, e.g. card ( E 4.2. Platform-speci fi c model (PSM) of the PIM schema.

In general the key constructs of PSM schemas have the following characteristics: child classes model initial non-terminals (i.e. root XML elements).
De fi nition 4.2. A schema in a platform-specific model (PSM schema) 15-tuple S participant  X  , card  X  , cmtype  X  , pos  X  , repr  X  ), where  X  S c  X  , S a  X  , and S m  X  are sets of classes, attributes, and content models , respectively.  X  C  X  name  X  : S c  X   X  S a  X   X  L resp. name  X  : S r  X   X  L  X   X   X  type  X  : S a  X   X  D assigns a data type to each attribute.  X  class  X  : S a  X   X  S c  X  assignsaclasstoeachattribute.For A  X  participant  X  : S e  X   X  S c  X   X  S m  X  assigns a class or content model to each association end. For R  X  card  X  : S a  X   X  S e  X   X  C assigns a cardinality to each attribute and association end.  X  pos  X  : S a  X   X  S r  X   X  IN assigns a position to each attribute or association. For an attribute A  X  repr  X  : S c  X   X  C  X  S  X   X  S c  X   X  C  X  S  X  assigns a class C with one of its trees rooted in the schema class C S  X   X  . Members of S
To distinguish PIM and PSM constructs, we supplement PSM constructs with the structs are strictly referred to without that symbol (e.g. PIM class C with @ if xform  X  ( A  X  )=a. Moreover, for a structural representative C tinguish sequence, choice and set we display ... , |, or {} in the rectangle, respectively.
We will also use two auxiliary functions: and modeled XML schemas formally.
 schemas. In particular, Fig. 6 (a) models the XML schema from Fig. 4 . sents a part of the PIM schema in Fig. 5 comprising classes C grammar. According to Definition 4.2 , the components of the PSM schema are as follows: with the schema class C  X  PurchRQSchema . Classes may be structural representatives of other classes, e.g. repr repr name  X  ( C  X  PurchRQSchema )= PurchRQSchema , name  X  ( C  X 
Each attribute is associated with its class, e.g. class  X  data type and cardinality. Moreover, it has an XML form, e.g. name xform  X  ( A  X  date )=aand name  X  ( A  X  email )= email , type
Each association has an (optional) name and cardinality, e.g. name  X  , card  X  ( R  X  Item  X  M  X  )=1..1. Association ends have participants, e.g. participant
And, participant  X  ( E  X  M  X   X  1 )= participant  X  ( E  X  M  X   X  2 as their parent), e.g. content  X  ( M  X  )=( R  X  M  X   X  ItemAmount 4.3. Working with PIM and PSM schemas direction. We also call this direction forward-engineering . The designer initiates the following steps: 1. The application domain is studied and described in a form of a PIM schema. 2. XML schemas which will be required in the system are identified. 3. For each identified XML schema: PIM schema.
 we want to use in our system. In that case, the designer: 2. maps the obtained PSM schema to the existing PIM schema.

Again, the advantage is that (s)he works with UML class diagrams lem in Section 9 as an open problem. 5. Formalization of conceptual and grammatical perspective sive power of the general regular tree grammars. 5.1. Conceptual perspective schema to the PIM schema. The mapping specifies the semantics of the PSM schema in terms of the PIM schema. the PSM class C  X  Purchase is mapped to the PIM class C Purchase is C Purchase . Similarly, the PSM attribute A  X  date of C
R  X 
There are also components which are not mapped. These are depicted in gray color. E.g, the schema class C class C  X  Items are not mapped. Also, a PSM attribute A  X  ponents have no semantics in the sense of the PIM schema.

De fi nition 5.1. Let R={ E 1 , E 2 }  X  S r be an association. An ordered image of R is an ordered pair R will use S r  X  to denote the set of all ordered images of associations of S
PSM schema specified by the interpretation. For example, suppose class C ma. The PSM class is correctly mapped by the interpretation to the PIM class C perspective, belongs to C Product . On the other hand, suppose that A cannot be arbitrary.

De fi nition 5.2. An interpretation of a PSM schema S  X  against a PIM schema S is a partial function I : S
For X  X   X  S  X  c  X   X  S  X  a  X  S  X  r  X  ,wecall I ( X  X  ) interpretation of X that X  X  does not have an interpretation . Let a function classcontext  X  I : S c  X   X  S a  X   X  S r  X   X  that I ( classcontext  X  I ( X  X  ))  X   X  . The following conditions must be satisfied:
The interpretation I ( X  X  ) of a component X  X  in the PSM schema determines the semantics of X conceptual perspective. The other components are not considered.
 Let us discuss the consequences of the conditions (1)  X  (5) given by the definition on this sample PSM schema:
PSM schema and does not model any data. Therefore, it is also not reflected in the PIM schema. In our example, C schema class and, therefore, I ( C  X  PurchRQSchema )=  X  .

Condition (2) requires that a structural representative C words, it requires that both C  X  and repr  X  ( C  X  ) have the same semantics. This is because C repr would break this rule. In our example, C  X  Address and its two structural representatives C C
Address . Both representatives acquire the attributes A
Condition (3) requires that the interpretation of an attribute A pretation of C  X  . In our example, the interpretation of A
I ( C  X  aclassof C Purchase ). On the other hand, it would also mean that it is not an attribute of C vious conclusion.

The explanation does not work when a class C  X  does not have an interpretation. In that case, A spective, belong to C  X  . Instead, it belongs to the closest ancestor class of C preted class context of C  X  . If the context does not exist, A attribute A of the interpretation of the context. In our example, this is the case of, e.g., the attribute A does not have an interpretation. Therefore, we need the interpreted class context of C C . Therefore, the interpretation of A  X  amount must be an attribute of C has no interpretation because its child, C  X  Items , has no interpretation. Since C the PIM schema connecting C Purchase with a semantic equivalent of C its connection to its parent C  X  Purchase .

Condition (5) is similar to (3) but ensures consistency of associations. It is applied when a child C interpretation. In that case it is necessary to specify the semantics of the connection of C interpretation of C  X  . In our example, the interpreted class context of the association R dition (4) requires that the interpretation of R  X  shipto pretations of C  X  Purchase and C  X  ShipAddr are, respectively, the classes C condition. A case where I ( R  X  shipto ) does not connect C of R  X  shipto specifies the semantics of connection between C C
Purchase and C Address . Another interesting example is the association R The interpretation of R  X  item must, therefore, be an association in the PIM schema connecting C
R contains which is also correct.

In general, the interpretation does not necessarily need to be so intuitive. pretation I is as follows: 5.2. Grammatical perspective components of the PSM schema.

De fi nition 5.3. Let G =( N , T , S , P ) be a regular tree grammar and S card  X  , cmtype  X  , pos  X  , repr  X  ) be a PSM schema. Let S tains each class which is a child of an association with a given name. An interpretation of G against S  X  :N  X  S c  X  names  X   X  S a  X  which satisfies the following conditions:
We say that a regular expression re corresponds to a component X conditions are satisfied:  X  For class X  X   X  S c  X  s.t. attributes  X  ( X  X  )=( A  X  1  X  For attribute X  X   X  S a  X  :re= Z card ( X  X  )  X  ( Z , X  X  For association X  X   X  S r  X  s.t. child  X  X  X   X  X   X  S c  X   X  For association X  X   X  S r  X  s.t. child  X  X  X   X  X   X  S c  X   X  For content model X  X   X  S m  X  s.t. content  X  ( X  X  )=( R must have the same structure as the content models in the content of the class.
Having a regular tree grammar G , PSM schema S  X  and interpretation I eled by S  X  . In particular, having a non-terminal Z from G and a component X
PSM component. Surjective means that each PSM component from S different PSM components. Also, a PSM component may model more and different non-terminals. resents a part of a complex content of an XML element declaration with a complex content. if C  X  is a structural representative of another class repr  X  ( C
Next, re corresponds to an attribute A  X  if it is a non-terminal with an interpretation A it corresponds to an association R  X  with a specified name if it is a non-terminal with an interpretation R and enriched with the cardinality of R  X  . And, finally, re corresponds to a content model M expressions which correspond to the associations in the content of M lected production rules of the right-hand side grammar.  X  Pur is an initial non-terminal. Its interpretation is class C  X  GPS is an XML element declaration with a simple content. Its interpretation is attribute A  X  Finally, Pur is an XML element declaration with a complex content. Its interpretation is class C proof, we exploit Lemma 1 which is introduced after the theorem.

Theorem 5.1. Let S  X  be a PSM schema and G 1 , G 2 be regular tree grammars modeled by S
Proof. We have G 1 =( N 1 , T 1 , S 1 , P 1 )and G 2 =( N
We can prove that an arbitrary XML tree T valid against G
The basic idea of the proof is to inductively construct an interpretation of T against G against G 1 . The proof exploits the fact that I  X  1 and I details of this idea. We suppose an interpretation I 1, rtg
First, let x = l [ v ] be an XML element with a simple content. Then I
Definition 3.8 . From Definition 5.3 and the fact that I  X  type  X  ( A  X  )= D  X  name  X  ( A  X  )= l  X  xform  X  ( A  X  )=e. Again from Definition 5.3 and because I (  X 
Z 2  X  N 2 )(( Z 2 , A  X  )  X  I  X  2  X  ( Z 2  X  l [ D ])  X  P 2 ilarly, we construct an interpretation of each XML attribute in S
Second, let x = l [{ x 1 , ... , x m where ( Z 1  X  l [ re 1 ])  X  P 1 s.t. I 1, rtg ( x  X  (1) ) child XML elements. Let I 2, rtg ( x 1 ), ... , I 2, rtg ( x there must be a class C  X   X  S  X  c s.t. ( Z 1 , C  X  )  X  I  X 
From Definition 5.3 and because I  X  2 is surjective, we have that ( shows that in that case I 2, rtg ( x  X  (1) ) ... I 2, rtg of Definition 3.8 .

Finally, we need to show that if x is the root XML element of T ,then I ( x )and Z 2 = I 2, rtg ( x ). From Definition 3.8 , Z 1  X  ( Z )= I  X  2 ( Z 2 )and I  X  2 ( Z 2 ) is, therefore, a child of the schema class of S
Z in its regular expression. According to Definition 5.3 , I
Z more readable. The recursive construction of the interpretation I against G 1 resulted into the fact that any pair of two non-terminals with the same interpretation against S the same sequences of XML elements and XML attributes.

Lemma 5.1. Let S  X  be a PSM schema and G 1 ,G 2 be two regular tree grammars with interpretations I an XML tree with interpretations I 1, rtg and I 2, rtg of T against G same set of valid XML elements and XML attributes. Then, for each component X
N and N 2 , respectively, s.t. re 1  X  X  X  and re 2  X  X  X  :
Proof. We will use Z 1 and Z 2 to denote I 1, rtg ( x 1 ) direction, the opposite direction is symmetrical. We can distinguish different situations:  X  Let X  X  be an attribute. From Definition 5.3 , re 1 = Z  X  Let X  X  be an association. Suppose firstly that name  X  ( X  X  Let X  X  be a class with attributes A  X  1 , ... , A  X  n  X  Let X  X  be a sequence, choice or set content model. In this case, we can prove that Theorem 5.1 allows for the following definition of an XML language modeled by a PSM schema.
De fi nition 5.4. A PSM schema S  X  unambiguously determines an XML language denoted L S
G is a regular tree grammar with an interpretation against S fore, the expressive power of our PSM is of the class of general regular tree grammars. 6. Translations fined correctly and are mutually consistent (i.e. their composition does not influence the specified XML schema). 6.1. PSM schema normalization ma which contains redundancies is called relaxed PSM schema .
 remove them when translating the PSM schema to a regular tree grammar.
De fi nition 6.1. L et S  X  = S c  X  , S a  X  , S r  X  , S e  X  , S m
We call S  X  normalized PSM schema when the following conditions are satisfied:
If S  X  does not satisfy any of the conditions, it is called relaxed PSM schema. anywhere.
 does not have a structural representative and, therefore, breaks condition (5). (c) Normalized PSM schema (d) Regular tree grammar modeled by 10(c) iterative application of the normalization rules until the PSM schema is normalized. tree grammar modeled by the normalized PSM schema and its interpretation. leads to a normalized PSM schema. We omit a formal proof in this paper. the normalized PSM schema models the same XML schema as the original relaxed PSM schema. rules. Then L S  X   X  X  = L S  X  .

Proof. Let G be a regular tree grammar with an interpretation I
S  X  , we can construct a regular tree grammar G with an interpretation I by Definition 5.4 .  X  The empty name association normalization rule (see Fig. 11 (c)) removes an association R  X  The content model association normalization rule (see Fig. 11 (c)) removes an association R  X  The root content model normalization rule (see Fig. 11 (e)) removes a root content model M 6.2. PSM schema optimization schema .
 result more readable.
 can be merged by the rule in Fig. 12 (a) as shown in Fig. 13 (b).
 ity is 1..1. Therefore, the content model can be removed by the rule in Fig. 12 (b) as shown in Fig. 13 (b). 6.3. Translating a PSM schema to a regular tree grammar
First, we show how a normalized PSM schema S  X  may be translated to regular tree grammar G modeled by S function psm-2-rtg which takes S  X  as an input and outputs regular tree grammar G modeled by S and optimization rules, each translation rule has two parts. The upper part specifies preconditions on S
The rule in Fig. 14 (a) generates an XML element declaration with simple content for each attribute A ilarly, the rule in Fig. 14 (b) generates an XML attribute declaration for A element declaration with complex content for each class C class of the schema class.
 specified in the lower part is returned.

The rules specifying the formal semantics of function psm-2-rtg also generate a mapping I to S  X  . The following theorem shows that I  X  is an interpretation of G against S correctly.

Theorem 6.2. Let S  X  be a PSM schema. Let G be a regular tree grammar and I result of applying function psm-2-rtg on S  X  . Then I  X  is an interpretation of G against S an interpretation of G against S  X  . In particular:  X  Let Z  X  S . Z was put to S by the rule in Fig. 14 (d) onthebasis of anassociation R  X  Let Z  X  t [ D ]  X  P . It was generated by the rule in Fig. 14 (a) on the basis of an attribute A  X  Let Z  X  @ t [ D ]  X  P . The case is similar to the previous one.  X  Let Z  X  t [ re ]  X  P . It was generated by the rule in Fig. 14 (c) on the basis of an association R ation going to a class. No other terminals in addition to the mapped ones were generated and, therefore, I in Fig. 16 (c).
 6.4. Translating a regular tree grammar to a PSM schema
Second, we show how regular tree grammar G may be translated to a normalized PSM schema S function rtg-2-psm which takes G as an input and outputs S rewrite-up is applied.
 put to a new auxiliary class C  X  and an association R  X  going to C rule of Z . The rule returns a new association R  X  with C cardinality constraint re 1 m .. n to an association R  X  which is the result of rewriting re child.

The rewriting rules specifying the formal semantics of rewrite-up also generate a mapping I interpretations of classes. The following theorem shows that I algorithm is correctly defined.

Theorem 6.3. Let G be a regular tree grammar. Let S  X  be a PSM schema and I result of applying function rtg-2-psm on G. Then I  X  is an interpretation of G against S an interpretation of G against S  X  . In particular:  X  Let Z  X  S . Then from the rules in Figs. 17 and 18 (c) we get R  X  Let ( Z  X  t [ D ])  X  P . Then from the rule in Fig. 18 (a) we get that if ( Z , A  X  Let ( Z  X  @ t [ D ])  X  P . The case is similar to the previous one.  X  Let ( Z  X  t [ re ])  X  P . Then from the rule in Fig. 18 (c) we find that if ( Z , C
I terminals were generated and, therefore, I  X  is surjective for the range S interpretation of the grammar against both PSM schemas. 7. Implementation
The results presented in this paper are implemented in a new tool eXolutio. changes which would break conditions given by Definition 5.2 . the algorithms for translating PSM schemas to regular tree grammars as described in Section 6.3 . tion of PIM and PSM schema. However, this is beyond the scope of this paper. (a) XML element declaration with simple content rewriting rule (b) XML attribute declaration rewriting rule PSM schemas.
 8. Related work the case when more XML schemas need to be designed which was the motivation for our work. designed XML schemas, e.g. rules for naming and design rules (NDR) [17] . 8.1. Top-down approaches according to the needs of the system.

We can divide the top-down approaches into three groups. First, there are approaches based on the ER model (e.g. interrelated.
 their modeling power is similar to the ER-based approaches.

Object-Role Modeling (ORM) [38] exist [56] . 8.2. Bottom-up approaches not interrelated; neither mutually, nor with an existing conceptual schema. made by a human expert. 8.3. General schema mapping approaches Section 4.2 ) are very close to motivations of general schema mapping. [47] .
 different schemas. This is, however, beyond the scope of this paper. 9. Open problems and further research. A list of the key issues can be specified as follows: 10. Conclusions showed that a conceptual schema in a platform-independent model (PIM schema) may be designed and the XML schemas adjusted so that it is more transparent for a human designer but still models the same regular tree grammar. complexity, currently omitted aspect.
 Acknowledgment This work was supported by the Czech Science Foundation (GA P202/10/0573.

References
