 Huge amount of stream data implicating primitive or composite events can be gener-ated in many scenarios such as RFID (R adio Frequency Identification), sensor network and stock analysis. Consequently, the events will shape into rapid and time-varying event streams [1, 2]. Different from the general data stream, the data of event numeric values. Furthermore, event stream is more flexible and abundant in semantics and the data in the event stream can be corr elated for the advanced pattern match [3]. Just like data stream processing, event stream processing needs incremental online analysis and real-time response. The existing studies mainly focus on the temporal pattern match of event stream [4, 5, 6] rather than the advanced analysis and mining. stream, has not been tackled. Without effective similarity analysis, further clustering, classification, frequent pattern and novelty detection can not be executed. Also, with the prior knowledge obtained from similarity analysis, we can build some inherent and valuable rules in lots of complicated applications. 
Emphatically, the event definition and transformation are closely related to specific application scenarios. For example, the dram atic increase of the stock price measured by some threshold level can be defined as an event, the situation when an object enter a logic area monitored by RFID or video can be modeled as an event, and each access of websites of interests can be transformed as an event. In this paper, we only propose a general similarity analysis framework for all kinds of event streams. The semantics be conducted among these logic event streams to potentially reflect the relationships of target objects. Furthermore, our proposed similarity measurement model is intui-tive and efficient. It is intuitional that the distance between two event streams should utilize edit distance as our similarity measurement guideline, which is commonly used in similar strings pattern matching and comparison of biological sequences. 
The basic method for similarity analysis is to compare all pairs of event streams and output the results once the similarity conditions are evaluated true. However, we note only quite a few fraction of the whole has potential similarities in the real-world applications. When the number of event streams or event type is huge and only a few pairs of event streams can satisfy the similarity condition, too much computation cost by putting forward the notion of sharing extent , which approximately reflects the proportion of shared sub-sequence of event streams. The sharing extent is on the assumption that two similar event streams must have  X  X nough X  shared sub-sequences. Compared to the pair-wise method, the computation of sharing extent is very efficient due to one pass scan. 
Figure 1 represents the processing procedure of similarity analysis. Firstly, we com-pute the sharing extent of each event stream pair, and then discard the dissimilar ones to construct the candidate set according to certain threshold. Secondly, we can compute the as follows: z A concept of sharing extent is introduced, which is easily computed and can Section 3 introduces necessary definitions. Section 4 presents the method for the computation of sharing extent . Section 5 proposes the algorithms for similarity analy-sis. Section 6 evaluates the results of the experiments and section 7 concludes the paper. As for similarity analysis over event sequences, H. Mannila et al. [7] propose a simi-complexity of this method is very high. DR et al. [8] focus on the probabilistic charac-distinguished by different characters, so the approximate string matching technique may be helpful for our model. L. Gravano et al. [10] develop a technique of approxi-mate string joins, which relies on matching q-gram, taking into account of both posi-propose an exact algorithm for set similarity joins, which can give a precise perform-from ours. Their methods perform on static data, while we aim at efficient similarity analysis on dynamic event streams and consider the problem of cost optimization as well. 
Also, many recent event processing systems [1, 6] offer relatively simple event languages and stream-based processing. They detect the complex event from real-time event streams based on known rule, but none of them consider the similarity analysis of event streams. In summary, to the best of our knowledge, what we focus on is an original and valuable topic of event stream processing. An event stream is composed of continuous arrival events. An event can be classified into primitive event (e.g., a product attached with RFID tag is detected at some reader) and composite event (e.g., a theft event takes place at a store, which is defined as the sequence of product detected at shelf, detected at the exit and un-detected at the counter). The composite event is the composition of primitive events using event operators, such as OR, AND, NOT, SEQ etc. timestamp respectively. And the event type set is 12 { , ,..., } m EE E  X  = , where i E  X   X  .
The occurrence time of events is not uniform, which may burst occasionally. For each logic event stream, we assume that no more than one event will happen at each symbol  X # X  to represent a special  X  X ull X  event type. Note that each event type has its own weight, which is defined according to the prior knowledge. The more important event type has higher weight, and the  X # X  type has the minimun weight. Especially, we need to compare the event streams in the cu rrent sliding window to reflect the recent situation. We will illustrate our problem definition as follows.
 Problem Definition. Given m event streams ES 1 , ES 2 ,..., ES m , with the window size similar in the current window and update the results automatically and incrementally. 
According to the characteristi cs of event streams and the demands of applications, the similarity analysis over event streams should satisfy the following requirements: (1) Reasonable Similarity Measurement. The choice of similarity measurement is the key problem which needs to reflect the change trend and temporal feature of event streams. (2) Efficient way. In practice only a few pairs of event streams have similarities, so pair-wise method will have tremendous cost which is unnecessary especially when the amount of event streams is huge. How to search the similar event streams in an efficient way is highly necessary for fast on-line stream processing. In this section we will give the definition of similarity measured by distance function between event streams. Firstly, the distance function should support the local time completely in the distributed system. Secondly, different event types have different measurement of similarity. of current sliding window, then the similarity coefficient of these two event streams is Where WED ( ES i , ES j ) is the weighted edit distance between two event streams. Let the have similarity. 
Next we will introduce the computation of WED ( ES i , ES j ), which is a common dis-tance measurement for the string match and comparison of biological sequences. The deletion and substitution operations. Given two event streams ES 1 and ES 2 , denoted as ( e obtained by the dynamic programming algorithm. We use r ( i , j ) to denote the minimal The basic conditions and the recurrence relation for the value r ( i , j ) are respectively, and m = n = N (sliding window size), we have The computation of weighted edit distance has high time complexity and the pair-wise comparison is not feasible. We will introduce a much more efficient method combined with the features of event stream in the next section. In many applications, only a few parts of event streams have similarity. There will be huge computation cost by naive method which compares every two event streams. To pair-wise-way computation. We utilize this technique to quickly discard most of the dissimilar event stream pairs, and then compute the similarity coefficient to get the accurate similar event stream pairs in a smaller candidate set. 5.1 ES-Sequence The sharing extent technique relies on matching ES-sequences ( ESS ) of length q , which are subsequences composed with adjacent events. The intuition behind the use large number of ES-sequences in common. 
We generate ES-sequence from continuous event streams by sliding the window of size q ( q &gt;1). The ES-sequences are generated on the fly and we need to consider the number of each distinct ES-sequence for each event stream. For some event stream ES with length of | ES |, then the number of ESS is | ES| +1-q . and the length of ES-sequence is defined as 3, then the ES-sequences generated from ES ES-sequences. 
The generation of ES-sequence borrows the idea from the q-gram technique in character string matches, but they have totally different semantics. Each event belongs to some event type and has an occurrence time, and the ES-sequence reflects the state change of system or represents some composite events. Meanwhile, since each event has different impact on the system, the ES-sequence has different weights too. We define the weight of ES-sequence as the summation of involed events X  weights. That is The length q of ES-sequence is selected accordin g to the prior knowledge. The effect of filtration and the semantics of event composition should be taken into account. How to choose the most suitable value of q is our future work. 5.2 Sharing Extent extent is defined as follows: where C denote the count of k ESS appearing in the event stream i ES and j ES respec-tively. And k SN denotes the count of shared k ESS in i ES and j ES , as the equation (7) shows. The ( ) k WESS denotes the weight of k ESS . Next we use an example to illustrate the computation process. For n event streams ES 1 , ES 2 ,..., ES n , all distinct ES-sequences are stored in q event streams and the columns represent ES-sequences at the q  X  set. The value of each cell represents the count of ES-sequence appearing in this event stream. When a shown in table 1, the value in row 1 &amp; column 1 is 2, which means that ESS 1 appears twice in ES 1 . SE based similarity algorithm is given in algorithm 1. 5.3 Update Mechanism of Sharing Extent We adopt the sliding window model to process the continuous and infinite event streams. The sharing extent is computed based on the current sliding window. Because of the limitation of the sliding scope, compared to the previous sliding window, most events in the current sliding window will not be changed. We will design an incremental maintenance strategy reusing middle results to avoid the repeated computations. 
We partition the whole window into h hops with each size N/h . When the window is updated, the oldest hop is dropped and a new one enters. In this way, we revise the computation process. The sharing extent will be computed at each hop, denoted as H_SE and then be accumulated to obtain the final sharing extent. The process is illus-trated in figure 2. When the window slides, we just simply compute the H_SE of the newly arriving hop, and the value of sharing extent can be dynamically maintained by the addition of new hop H_SE and deletion of the oldest hop H_SE. The update algorithm is given in algorithm 2. arriving event streams  X  ES 1 ,  X  ES 2 ,...,  X  ES n with one hop size 
There are several benefits to partition the sliding window into several hops: (1) Compared with the basic method, this update mechanism considers the posi-(2) Saving the computation time. When the window slides, we can reuse the H_SE 5.4 Threshold of Sharing Extent sharing extent based methods. sequences and the weight value of shared ES-sequences. It is based on two facts: similar event streams share more identical ES-sequences, and the weight of shared ES-sequence influences the value of similarity coefficient. 
The sharing extent resembles the intuitional idea of edit distance but with simple computations. We can acquire a much smaller candidate set by comparing sharing compact candidate set under the precision requirement, so how to define the value of  X  is the key problem of sharing extent method. 
Firstly we give a simple observation: suppose each length of two event streams in the current sliding window is N . If there is only one different event, their ES-sequence sets almost have q differences (the length of ES-sequence is q ). If they have two dif-than k , the same ES-sequences are at least N +1-( k+ 1)* q . event stream to another. Assuming the weight of each event is 1, then (1 ) * kN  X  = X  , approximately we have (1 ) * * / ( ) avg tNWE  X  X  = X  to represent the number of different parameter. Based on the observation ahead, the number of the same ES-sequences is at least 1((1 )* * / ()1)* avg NNWEq  X  X  + X   X  + .

According to the definition of sharing extent and the factor of different events weights, we can use the number of the same ES-sequences to divide the total number of ES-sequences and acquire the corresponding threshold of sharing extent as follows: event streams. 5.5 Complexity Next, we will compare the time complexity of sharing extent based similarity analysis method and the exact method. Assuming m event streams arrive simultaneously and the size of sliding window is N , we analyze the time complexity in the current window. The main cost of exact method comes from the computation of the edit distance. Computing the edit distance tremendous cost if m or N is very large.

The execution process of sharing extent method contains two parts: generation of the candidate set and exact computation over the candidate set. The time cost of first part comes from the generation of ES-distribution-table and the computation of shar-resembles the exact algorithm. Suppose the size of candidate set is l , then the cost is reduced dramatically. method and SE method. All the experiments were conducted on a PC with 2.5G Pen-tium processor and 512 MB main memory. We design experiments to evaluate the efficiency and precision of these two methods. All these experiments were performed on synthetic datasets. 
In the real world, the data implicating the occurrence of events usually conform to the normal distribution. Thus, we first simulate 1000 event streams with attrib-utes following the normal distribution. Then, event values are divided into five ranges: (- X  ,-2],(-2,-1],(-1,1],(1,2],(2,+  X  ), and each range represents an event type corresponding event type according to the range it belongs to. Based on the prop-68.24%, and the other event types have smaller probability. For simplicity, we assume the event occurrence time is uniform with the same interval. In practice, defined as 0.6, 0.8, 0.5, 0.8, 0.6 respectively and the length of event streams can be represented by the number of events. 
The basic parameters are set as follows. The threshold is 0.8, the adjusting parame-ter  X  of SE is 0.35, the length of event stream is 600, the sliding window size is 40 and the hop number in each window is 4. Figure 3 compares the execution time of SE and exact method with different number of event streams. With the increase of the number of streams, the execution time of exact method increases rapidly, while the SE method is much better than the exact pair-wise method in terms of execution time. 
Figure 4 shows the effect of sliding window size on the execution time. The execu-size, but the SE method achieves a dramatic reduction in computation time. 
As shown in Figure 5, the execution time of SE is divided into two parts: genera-set, the time consumed by similarity detection is much less because the candidate set is smaller than the raw event stream set. 
From the previous section, we know that the SE threshold  X  is very important for the precision and efficiency of the SE method, which is influenced by the ad-justing parameter  X  . We test the size of candidate set, the execution time and the precision of SE method among 500 event streams with different thresholds and adjusting parameters. 
According to the theoretical analysis, we know that the SE threshold  X  will be in-creased with the decreasing of  X  . Consequently, the performance of SE will be varied that the size of candidate set decreases with  X  , and the execution time is correspond-ingly reduced as well. However, the precision decreases from 100% to a smaller value as shown in figure 8. There will be a tradeoff between the precision and the efficiency with different thresholds. We will choose the most suitable threshold range to get efficient processing time with high accuracy. In this paper, we introduce a suitable measurement for similarity analysis over event streams. To improve the processing efficiency, we propose the concept of sharing extent and the SE method. The sharing extent implicates the proportion of shared ES-sequence and the weight influences of compared event streams, which can be simply computed and reflects the similarity extent of event streams approximately. We utilize then compute the similarity using exact method in a smaller candidate set. By the SE method, we can obtain great efficiency and expected precision by adjusting the pa-adaptively to achieve best effectivene ss according to differ ent applications. The research was partially supported by NSF of China under Grants Nos. 60773220, 60873009 and 60773222. 
