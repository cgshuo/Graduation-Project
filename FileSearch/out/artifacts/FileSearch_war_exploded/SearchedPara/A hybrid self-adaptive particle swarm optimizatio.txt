 1. Introduction
In the radially distribution system, the configuration may be varied to obtain a new network structure to reduce power loss, increase system security and enhance power quality. In these system there are many switches that they are divided into two types: sectionalizing-switch (normal closed) and tie-switch (normal open). The change (reconfiguration) in distribution system is performed by opening sectionalizing and closing tie switches so that the radiallity of the network is maintained and all of the loads are energized. The discrete nature of the switch values and radiallity constraint prevent the use of classical optimization techniques to solve the distribution feeder reconfiguration (DFR) problem. Therefore, the most of the algorithms in the literature are based on heuristic search techniques.

In recent years, considerable research has been conducted for loss minimization in the DFR. Kim et al. (1993) proposed a neural network-based method to identify network configurations corre-sponding to different load levels. Taylor and Lubkeman (1990) presented an expert system using heuristic rules to shrink the search space. Kashem et al. (1999) proposed  X  X  X istance measurement technique algorithm X  X  that finds a loop first, and then, to improve the load balancing, a switching scheme was determined in that loop. Jeon incorporated the simulated annealing algorithm with Tabu search for loss reduction in Jeon and Kim (2000 ). The Tabu search attempted to determine a better solution in the manner of a greatest-descent algorithm, but it could not give any guarantee for the convergence property. Lin et al. (2000) presented a refined genetic algorithm (RGA) to reduce losses. Morton and Mareels (2000 ) presented a brute-force solution for determining a minimal-loss radial configuration. The graph theory involving semi-sparse transformations of a current sensitivity matrix was used, which guarantees a globally optimal solution but needs an exhaustive search. Goswami and Basu (1992) proposed a power-flow-minimum heuristic algorithm for DER problem. Lopez and Opaso (2004) proposed a method for online reconfiguration. Das (2006) presented a fuzzy multi-objective approach to solve DFR. Niknam, 2009a, 2009b presented two approaches based on norm2 for multi-objective distribution feeder reconfiguration. Niknam, 2009b proposed a hybrid approach based on DPSO, ant colony optimization and fuzzy system for reconfiguration of distribution system. Liu and Chen (2000) proposed a fuzzy genetic algorithm for DFR problem. Bi et al. (2002) proposed a refined genetic algorithm for distribution network reconfiguration. Shirmohammadi proposed the reconfiguration in electric distribution networks for resistive line loss reduction ( Shirmohammadi and Hong, 1998 ).
Li et al. (2007) proposed a hybrid particle swarm optimization approach for DFR problem. Yu et al. (2009) presented an improved genetic algorithm with infeasible solution disposing for DFR problem. Chiou proposed a method-variable scaling hybrid differential evolution (VSHDE) for solving the network reconfi-guration for power loss reduction and voltage profile enhance-ment of distribution systems ( Chiou et al., 2005 ). Su proposed a method for reducing power loss and enhancing the voltage profile by the improved mixed-integer hybrid differential evolution (MIHDE) method for distribution systems ( Su and Lee, 2003 ).
Cheng and Kou (1994) used simulated annealing for network reconfiguration in distribution system. Raju proposed an algo-rithm based on sensitivity and heuristics for minimum loss reconfiguration of distribution system ( Viswanadha Raju and
Bijwe, 2008 ). Ahuja proposed an AIS X  X CO hybrid approach for multi-objective DFR problem ( Ahuja et al., 2007 ).

In the distribution system, since there are many candidate switching combinations, the DFR problem is modeled as a complicated combinatorial, non-differentiable, constrained opti-mization problem. Therefore, it is difficult to solve the problem by conventional approaches and most optimal algorithms cannot effectively solve this kind of problem and they usually achieve local optimal solutions rather than global optimal solutions.
In this paper, a new hybrid algorithm is presented to find the optimal operating condition of the distribution networks.
The algorithm is based on the combination of self-adaptive particle swarm optimization (SAPSO) and modified shuffled frog leaping algorithm (MSFLA).

The PSO algorithm has been recently proposed and proved as a powerful competitor to the other well-known algorithms in the field of optimization ( Niknam, 2009b, c ). Although PSO eventually determines the desired solution, its convergence rate is slow.
Proper selection of parameters may increase the performance efficiency by itself. However, as in other evolutionary algorithms (EA), appropriate adjustment of its parameters is cumbersome and usually requires a lot of time. Thus, in this paper a self-adaptive framework is proposed for adjusting PSO algorithm X  X  parameters. In this paper, the algorithm X  X  parameters are coevolved with the particles. In proposed paper the (SAPSO) composed of two parts: 1. Self-adaptive discrete particle swarm optimization (SADPSO) which determines the status of sectionalizing switch number. 2. Self-adaptive binary particle swarm optimization (SABPSO) used for determining the status of the tie switches (open or close).

The SFLA which is a population-based optimization algorithm can be used for solving many complex optimization problems, which are nonlinear, non-differentiable and multi-modal.
In this paper, a new frog leaping rule is proposed to improve the local exploration of the SFLA. The main idea behind the new frog leaping rule is to extend the direction and the length of each frog X  X  jump by emulating frog X  X  perception and action uncertainties. The modification widens the local search space, thus helps to improve the performance of the SFLA. The most prominent profit of MSFLA is its fast convergence speed ( Elbeltagi et al., 2005 ). However, some limitations in MSFLA may slow down the convergence speed and even cause premature convergence.
 Taking advantage of the compensatory property of SAPSO and
MSFLA, we propose a new algorithm that combines the evolu-tionary natures of both algorithms (denoted as SAPSO X  X SFLA).
The robustness of proposed algorithm will be tested on two distribution test feeders and the results are compared with those obtained by other methods. 2. Distribution feeder reconfiguration problem objective problem optimization problem. In the multi-objective
DFR, there are many different objectives such as loss minimiza-tion, balancing load on transformers, balancing load on feeders, maximum load on feeders and deviation of voltages from their nominal values. In this paper, loss minimization has been considered as the main objective while the others are formulated in the constraints. The DFR problem is described as: 2.1. Objective function minimize the power losses, which is calculated as follows: f  X  X  X  X  X  X  X  Tie 1 ; Tie 2 ; ... ; Tie N tie ; Sw 1 ; Sw 2 ; ... ; Sw where R i and I i are resistance and actual current of the i th branch, respectively. N br is the number of the branches. X is the vector of corresponding to open and close states, respectively. Sw i sectionalizing switch number that forms a loop with Tie i the number of the tie switches. 2.2. Constraints where M is the number of branches, N bus is the number of nodes and N f is the number of sources.

Transformers limits 9
I t ; i 9 r I max t ; i i  X  1 ; 2 ; ... ; N t  X  7  X  where 9 I t ; i 9 and I max t ; i are the current amplitude and its maximum allowable value of the i th transformer, respectively.
N t is the number of transformers.

Feeders limits 9
I where, 9 I f ; i 9 and I max f ; i are the current amplitude and its maximum allowable value of the i th feeder, respectively.
N feeder is the number of feeders. 3. The original PSO
The particle swarm optimization (PSO) algorithm was first proposed by Eberhart and Kennedy ( Carlisle and Dozier, 2001 ;
Sakthivel et al., 2009 ; Taylan and Das, 2009 ) and has been deserved some attention during the recent years in the global optimization field. PSO is based on the population of agents or particles and tries to simulate its social behavior in optimal exploration of problem space.

In this paper the vector of control variables are composed of two parts 1.  X  Tie 1 ; Tie 2 ; ... :; Tie N tie 2.  X  Sw 1 ; Sw 2 ; ... :; Sw N tie
If the status of the tie switch is open, all sectionalizing switches are close and if the tie switch is close, a sectionalizing switch that forms a loop with the tie switch is open. For example, assume that
X is [1 0 1 0 1 4 0 3 0 9] where T ie 1  X  1, S w 1
T  X  0, S w 2  X  0. It means that switch number 4 must be open ( T  X  1) and S w2  X  0 means that the switch must remain close ( T  X  0). In this paper Tie i is obtained by BPSO and Sw i is obtained by DPSO. In following section, BPSO and DPSO algorithms are briefly explained. 3.1. The original DPSO
In DPSO, each particle moves in the search space with a velocity according to its own previous best solution ( Pbest ) and the best global position of the swarm ( Gbest ). The dimension of the search space can be any positive integer. Each particle updates its position and velocity with the following two equations:
X i  X  round  X  X
V i  X  WV
X
V
Pbest
Gbest  X  X  Gbest 1 ; Gbest 2 ;::: Gbest Ntie  X 
Eq. (10) determines the direction in which the i th particle should be taken along. In this equation, i  X  1,2, y , N swarm index of each particle, N swarm is the number of the swarms, t is the iteration number and rand 1 (0) and rand 2 (0) are random numbers between 0 and 1. Constants C 1 and C 2 are learning factors of the stochastic acceleration terms, which determine the influence of personal best Pbest i and global best Gbest , respectively. Authors have introduced the parameter W into the DPSO X  X  equation to control the impact of the previous history of velocities on the current velocity to improve its performance.

Fig. 1 presents a graphical depiction of the basic idea of the particle swarm optimization. 3.2. The original BPSO
In the binary version of PSO (BPSO) the particles are characterized by a binary solution representation and the velocity must be transformed into the change of probability for each binary dimension to take a value of one. Basically, BPSO updates the velocity according to Eq. (11). Furthermore, the velocity is constrained to the interval [0,1] by using the Eq. (12) V i  X  V X V
In Eq. (12), S  X  V t i  X  denotes the probability of bit V range of velocity. Typically, V max is often set at 4 such that
A  X  4 ; 4 and each bit of particles, at each time step, changes its current position according to Eq. (13) X 3.3. Self-adaptive PSO (SAPSO)
In this paper, a self-adaptive framework is proposed to improve the robustness of the PSO. In proposed method, two tuning parameters C 1 , C 2 are considered as two new variables that are incorporated with control variables vector X i . The new control variables vector for particles in this paper will be X  X  X  Tie 1 ; Tie 2 ; ... ; Tie N tie ; Sw 1 ; Sw 2 ; ... :; Sw
Also, Pbest i , Gbest and V i , which represent the best previous position of the swarm, best global position of the swarm and velocity respectively, increase their dimension.

In this case each particle will be additionally endowed with the ability of adjusting its parameters by aiming at both the parameters it had when it got its best position in the past and the parameters of the leader, which managed to bring this best particle to its privileged position. As a consequence, particles not only use their cognition of individual thinking and social cooperation to improve their positions, but also to improve the way they do it by accommodating themselves to the best known conditions: namely, their conditions when getting the best so far position and the leader X  X  conditions.
 The role of the inertia weight, ( W ), is considered critical for the
PSO algorithm X  X  convergence behavior. Although the inertia weight was initially constant, it may vary from one cycle to the next. As it balances global and local searches, it has been suggested to have it decrease linearly with time, usually in a way to first emphasize global search and then, with each cycle of the iteration, prioritize local search. A significant improvement in the performance of PSO with the decreasing inertia weight over the generations is achieved using an equation proposed in He and Wang (2007 ).
 where t max and t are the maximum number of iteration and the current iteration number, respectively. W max and W min are the maximum and minimum of the inertia weight, respectively. 4. Shuffled frog-leaping algorithm (SFLA)
SFL algorithm, originally developed by Eusuff and Lansey (2003) and Zhang et al. (2008) . The SFL algorithm is a memetic meta-heuristic that is designed to seek a global optimal solution by performing an informed heuristic search using a heuristic function. It is based on evolution of memes carried by interactive individuals and a global exchange of information among the population. The SFL algorithm progresses by transforming  X  X  X rogs X  X  in a memetic evolution. In this algorithm, frogs are seen as hosts for memes and described as a memetic vector. Each meme consists of a number of memotypes. The memotypes represent an idea in a manner similar to a gene representing a trait in a chromosome in a genetic algorithm. The SFL does not change the physical characteristics of an individual rather it progressively improves the ideas held by each frog in a so-called virtual population. The frogs can communicate with each other, and can improve their memes by infecting (passing information) each other. Improvement of memes results in changing an individual frog X  X  position by adjusting its leaping step size. Based on this abstract model of virtual frogs, the SFL algorithm draws on PSO as a local search tool and the idea of competitiveness and mixing information from parallel local searches to move toward a global solution.
 this paper X i  X  X  Tie 1 ; Tie 2 ; ... ; Tie N tie ; Sw 1 ; Sw is the number of the tie variables (switches) is considered as a frog. The steps of the algorithm are as follows: randomly.
 SFLA _ Population  X  X i  X  X  Tie 1 ; Tie 2 ; ... ; Tie N tie ; Sw 1 ; Sw 2 ; ... ; Sw k  X  p q into p memplexes each holding q frogs such that k  X  p q . The division is done with the first frog going to the first memplex, second one going to the second memplex, the p th frog to the p th memplex and the p+l th frog back to the first memplex. other frogs X  ideas; hence they experience a memetic evolution.
Memetic evolution improves the quality of the meme of an individual and enhances the individual frog X  X  performance towards a goal. Below are details of memetic evolutions for each memeplex: and will be compared with the total number of memeplexes p . Set y 1  X  0 where y 1 counts the number of evolutionary steps and will
Updating particle X  X  velocity and position be compared with the maximum number of steps ( y max ), to be completed within each memeplex.
 Step 3-2. Set p 1  X  p 1 +1.
 Step 3-3. Set y 1  X  y 1 +1.

Step 3-4. For each memplex, the frogs with the best fitness and worst fitness are identified as X w and X b , respectively. Also the frog with the global best fitness X g is identified. Then the position of the worst frog X w for the memplex is adjusted as follows:
B  X  rand  X  :  X  X  X b X w  X  X  16  X  new X w  X  old X w  X  B i  X  B where rand ( . ) is a random number between 1 and 0 and B maximum allowed change in the frogs position. If the evolutions produce a better frog (solution), it replaces the older frog.
Otherwise, X b is replaced by X g in (16) and the process is repeated. If non improvement becomes possible in this case a random frog is generated which replaces the old frog.
Step 3-5. If p 1 o p , return to step 3-2. If y 1 o y max 3-3. Otherwise go to step 2.

Step 4. Check the convergence. If the convergence criteria are satisfied, stop. Otherwise, consider the new population as the initial population and return to the step 2. The best solution found in the searchprocessisconsideredastheoutputresultsofthealgorithm. 4.1. Modification of the frog leaping rule
In this section, a new frog leaping rule is proposed to improve the local exploration of the SFLA. The main idea behind the new frog leaping rule is to extend the direction and the length of each frog X  X  jump by emulating frog X  X  perception and action uncertain-ties. The modification widens the local search space, thus helps to prevent premature convergence and improves the performance of the SFLA. The new frog leaping rule is expressed as changing frog position vector is calculated as follows:
X
X  X  where t is number of iteration. randperm (.) is a randomly chosen are random numbers between zero and one.

If the performance of the generated frog is better than the worst frog, it replaces the worst frog. Otherwise a new solution is randomly generated to replace the worst frog. 5. Hybrid self-adaptive PSO and modified SFLA (SAPSO X  X SFLA)
The goal of integrating self-adaptive particle swarm optimiza-tion (SAPSO) and modified shuffled frog-leaping algorithm (MSFLA) is to combine their advantages and avoid disadvantages,
For example, MSFLA is a very efficient procedure but in the MSFLA exist limitations that these limitations might not only slow down the convergence speed, but also cause premature convergence.
Furthermore SABPSO, SADPSO algorithms belong to the class of global search procedures but require much computational effort also accuracy of SABPSO and SADPSO is not very high, but with combination these algorithms (SAPSO and MSFLA) we obtain a new algorithm (SAPSO-MSFLA) that not only it is not sensitive to the choice of initial points but also it has faster rate and more accurate convergence than SAPSO and MSFLA and other algorithms. This section starts from recollecting the procedures of SAPSO and MSFLA that will be used for DFR problem. The origins and literatures of these algorithms can be found in Sections 3 and 4.
Fig. 2 depicts the schematic representation of the proposed hybrid SAPSO-MSFLA. The population size of this hybrid SAPSO X  X SFLA approach is set at 3 N when solving an N -dimensional problem. The initial 3 N particles are randomly generated and sorted by fitness, and the top N particles are then fed into the MSFLA method to improve the ( N ) particles. The other 2 N particles are adjusted by the SAPSO method .The procedure of adjusting the 2 N particles in the SAPSO method involves selection of the global best particle, selection of the neighborhood best particles and finally velocity updates. The global best particle of the population is determined according to the sorted fitness values. The neighborhood best particles are selected by first evenly dividing the 2 N particles into N neighborhoods and designating the particle with the better fitness value in each neighborhood as the neighborhood best particle. By Eqs. (9) X (13) velocity and position updates for each of the 2 N particles are then carried out. The global best particle of the population is determined according to the sorted fitness values. The 3 N particles are sorted again in preparation for repeating the entire run.

To apply the SAPSO X  X SFLA algorithm in the DFR, the following steps have to be taken:
Step 1: In this step, the input data including the network configuration, line impedance and status of switches, number of memplexes ( p ). Number of frogs in each memplex ( q ), number of iteration and the number of population are defined.

Step 2: Transfer the constraint optimization problem to an unconstraint one.

In this step, a constraint optimization problem must be transferred to an unconstraint optimization problem, that this operation performed by (20) F  X  X  X  X  f  X  X  X  k 1 f ( X ) is the objective function values of the DFR problem. N N ueq are the number of equality and inequality constraints of the DFR constraints, respectively. k 1 and k 2 are penalty factors. Due to the constraints should be met; the value of the k 1 and k 2 parameters should be high. In the paper, thes e values are 100,000,000. The augment objective function value is calculated as follows:
Distribution load flow is run for the control variables vector (status of the tie and sectionalizing switches). The objective function value ( f ( X )), equality and inequality constraints are calculated and based on the results of distribution load flow. Then the augment objective function is calculated by using the values of objective function, constraints and penalty factors. Step 3: Generate the initial population.
 The population is at following form: Population  X  X  X  X  Tie 1 ; Tie 2 ; ... ; Tie N tie ; Sw 1 ; Sw 2 ; ... :; Sw i  X  1 ; 2 ; ... ; 3 N where Tie i is the statues of the i th tie switch which is zero or one and Sw i is the switch number of the i th sectionalizing switch and
C 1 , C 2 i are tuning parameters in PSO algorithm.

Step 4: Calculate the augmented objective function value for each individual by using results of the distribution load flow. objective function values.
 objective function value for the MSFLA and select the 2 N remained generated population for the SAPSO.
 discard all previous trial solutions and go to step 6 until convergence criteria met. 6. Simulation and results solve the DFR for problem. Two networks from different distribution systems were used to evaluate the approach proposed. Due to we use the self adaptive rule to determine the
PSO X  X  parameters and the new frog leaping rule, there is not any assumption to apply the algorithm. 6.1. Case study 1 having two substations, four feeders, 70 nodes and 78 branches (including tie branches) is shown in Fig. 3 . The system data are given in Niknam (2009b ). Before reconfiguration, the initial loss is 227.53 kW.
 other methods in terms of computational efficiency and performance. It is observed that the obtained result by proposed method is better than other methods.
 have important rule in performance of algorithm. In Table 2 to illustrate the important of these parameters; simulation is done for different values of C 1 and C 2. According to the results of
Table 2 , the simulation results of the original PSO depend on the
One of the most advantages of the proposed algorithm is that results of the algorithm do not depend on the number of initial population. Table 3 reveals the simulation results of the proposed algorithm, MSFLA and SAPSO for different number of population.
According to Table 3 the results obtained by SAPSO X  X SFLA are not sensitive to the number individuals in the population. That means the run time of the algorithm is less than the others.
Table 4 illustrates the results of the proposed SAPSO X  X SFLA, the original SAPSO, and original MSFLA for 50 random trials. As shown in the table, the average value, the best solution and the worst solution obtained by the proposed algorithm is much better than those of obtained by the others. Also the algorithm converges to global solution in 49 times while the SAPSO and MSFLA reach to the best solution in 35 and 38 times, respectively. We can conclude that the algorithm is robust.

Table 5 illustrates the simulation for three different loading levels. According to Table 5 in all loading level, after reconfiguration the power losses decrease highly. In the 3rd row of Table 5 we calculate the saving cost for each three levels. To calculate the cost we assume that the electrical energy losses for light, normal and heavy levels are 0.04, 0.045 and 0.05 ($/KWh), respectively.

Fig. 4 shows the comparisons between the proposed algorithm (SAPSO X  X SFLA) with SAPSO and MSFLA methods in the convergence process for the case study 1 which illuminates the relationship between the iteration times and the values of best objective functions. It is obvious the value of objective function for the proposed algorithm decreases faster than the others. It means that we can reduce the maximum iteration number for the proposed algorithm.
 6.2. Case study 2
Lee, 2003 ). It is a three-phase, 11.4-kV system .The system consists of 11 feeders, 83 normally closed switches and 13 normally open switches. Three-phase balanced and constant loads are assumed. The single line diagram of this system is shown in
Fig. 5 . The normally open switches, s84 X  X 96, are illustrated by doted lines. The normally closed switches, s1 X  X 83, are represented by solid lines. Before reconfiguration, the initial loss is 531.99 kW.
 algorithms in terms of computational efficiency and performance. power losses [MW]
It is seen that the proposed algorithm leads to the global optimum configuration.

Table 7 illustrates the effect of different values of C 1 and C 2on simulation for case study 2. The simulation results reveal that the original PSO converges to different values.

The simulation results for different population have been shown in Table 8 for case study 2. According to Table 8 the obtained results by SAPSO X  X SFLA are the same for different value of population.
 Table 9 provides the results using the proposed SAPSO X  X SFLA, SAPSO, and original MSFLA for 50 random trials. In 48 trials the proposed algorithm achieves the best solution.

In Table 10 the simulation is done for three different loading levels for case study 2. According to the table in all loading level, after reconfiguration the power losses decrease significantly. Fig. 6 compares the proposed algorithm (SAPSO X  X SFLA) with SAPSO and MSFLA methods in the convergence process for case study 2. From Fig. 6 , it is obvious that the proposed algorithm converges to the global solution faster than the others. On the other hand, the figure demonstrates that the proposed algorithm converges to the global optimal solution after 17 iterations while the SAPSO and MSFLA algorithms converge to local solutions after 38 and 47 iterations, respectively.
 7. Conclusion
This paper proposes a hybrid evolutionary algorithm based on the combination of SAPSO and MSFLA, called SAPSO X  X FLA, to optimally reconfigure radial distribution systems. In the SAPSO, learning factors of BPSO and DPSO, are coevolved with the particles during optimization process also a new frog leaping rule is considered for modification of SFL algorithm. In this paper, power loss minimization is considered as the objective function and load balancing on the transformers and feeders, maximum load on feeders and the deviation of voltages from their nominal values are considered as the constraints. According to simulation results on two distribution networks the proposed algorithm reaches a much better optimal solution in comparison with the others, indeed simulation result have proved the feasibility of the proposed method. Furthermore, the proposed method can also be used to solve other complex problems. The major deficiency of the proposed algorithm is that its run time increases when the number of control variables increase.
 References Power losses (MW)
