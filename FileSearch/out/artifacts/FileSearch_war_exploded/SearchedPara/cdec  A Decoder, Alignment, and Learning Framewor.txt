 The dominant models used in machine transla-tion and sequence tagging are formally based on either weighted finite-state transducers (FSTs) or weighted synchronous context-free grammars (SCFGs) (Lopez, 2008). Phrase-based models (Koehn et al., 2003), lexical translation models (Brown et al., 1993), and finite-state conditional random fields (Sha and Pereira, 2003) exemplify the former, and hierarchical phrase-based models the latter (Chiang, 2007). We introduce a soft-ware package called cdec that manipulates both classes in a unified way. 1
Although open source decoders for both phrase-based and hierarchical translation models have been available for several years (Koehn et al., 2007; Li et al., 2009), their extensibility to new models and algorithms is limited by two sig-nificant design flaws that we have avoided with cdec . First, their implementations tightly couple the translation, language model integration (which we call rescoring ), and pruning algorithms. This makes it difficult to explore alternative transla-tion models without also re-implementing rescor-ing and pruning logic. In cdec , model-specific code is only required to construct a translation for-est (  X  3). General rescoring (with language models or other models), pruning, inference, and align-ment algorithms then apply to the unified data structure (  X  4). Hence all model types benefit im-mediately from new algorithms (for rescoring, in-ference, etc.); new models can be more easily pro-totyped; and controlled comparison of models is made easier.

Second, existing open source decoders were de-signed with the traditional phrase-based parame-terization using a very small number of dense fea-tures (typically less than 10). cdec has been de-signed from the ground up to support any parame-terization, from those with a handful of dense fea-tures up to models with millions of sparse features (Blunsom et al., 2008; Chiang et al., 2009). Since the inference algorithms necessary to compute a training objective (e.g. conditional likelihood or expected BLEU ) and its gradient operate on the unified data structure (  X  5), any model type can be trained using with any of the supported training 7 criteria. The software package includes general function optimization utilities that can be used for discriminative training (  X  6).

These features are implemented without com-promising on performance. We show experimen-tally that cdec uses less memory and time than comparable decoders on a controlled translation task (  X  7). The decoding pipeline consists of two phases. The first (Figure 1) transforms input, which may be represented as a source language sentence, lattice (Dyer et al., 2008), or context-free forest (Dyer and Resnik, 2010), into a translation forest that has been rescored with all applicable models.

In cdec , the only model-specific logic is con-fined to the first step in the process where an input string (or lattice, etc.) is transduced into the unified hypergraph representation. Since the model-specific code need not worry about integra-tion with rescoring models, it can be made quite simple and efficient. Furthermore, prior to lan-guage model integration (and distortion model in-tegration, in the case of phrase based translation), pruning is unnecessary for most kinds of mod-els, further simplifying the model-specific code. Once this unscored translation forest has been generated, any non-coaccessible states (i.e., states that are not reachable from the goal node) are re-moved and the resulting structure is rescored with language models using a user-specified intersec-tion/pruning strategy (  X  4) resulting in a rescored translation forest and completing phase 1.

The second phase of the decoding pipeline (de-picted in Figure 2) computes a value from the rescored forest: 1-or k -best derivations, feature expectations, or intersection with a target language reference (sentence or lattice). The last option generates an alignment forest , from which a word alignment or feature expectations can be extracted. Most of these values are computed in a time com-plexity that is linear in the number of edges and nodes in the translation hypergraph using cdec  X  X  semiring framework (  X  5). 2.1 Alignment forests and alignment Alignment is the process of determining if and how a translation model generates a  X  source, tar-get  X  string pair. To compute an alignment under a translation model, the phase 1 translation hyper-graph is reinterpreted as a synchronous context-free grammar and then used to parse the target sentence. 2 This results in an alignment forest , which is a compact representation of all the deriva-tions of the sentence pair under the translation model. From this forest, the Viterbi or maximum a posteriori word alignment can be generated. This alignment algorithm is explored in depth by Dyer (2010). Note that if the phase 1 forest has been pruned in some way, or the grammar does not de-rive the sentence pair, the target intersection parse may fail, meaning that an alignment will not be recoverable. Recent research has proposed a unified repre-sentation for the various translation and tagging formalisms that is based on weighted logic pro-gramming (Lopez, 2009). In this view, trans-lation (or tagging) deductions have the structure of a context-free forest , or directed hypergraph, where edges have a single head and 0 or more tail nodes (Nederhof, 2003). Once a forest has been constructed representing the possible translations, general inference algorithms can be applied.
In cdec  X  X  translation hypergraph, a node rep-resents a contiguous sequence of target language words. For SCFG models and sequential tag-ging models, a node also corresponds to a source span and non-terminal type, but for word-based and phrase-based models, the relationship to the source string (or lattice) may be more compli-cated. In a phrase-based translation hypergraph, the node will correspond to a source coverage vec-tor (Koehn et al., 2003). In word-based models, a single node may derive multiple different source language coverages since word based models im-pose no requirements on covering all words in the input. Figure 3 illustrates two example hyper-graphs, one generated using a SCFG model and other from a phrase-based model.

Edges are associated with exactly one syn-chronous production in the source and target lan-guage, and alternative translation possibilities are expressed as alternative edges. Edges are further annotated with feature values, and are annotated with the source span vector the edge corresponds to. An edge X  X  output label may contain mixtures of terminal symbol yields and positions indicating where a child node X  X  yield should be substituted. 8 designated with a double box.
 In the case of SCFG grammars, the edges corre-spond simply to rules in the synchronous gram-mar. For non-SCFG translation models, there are two kinds of edges. The first have zero tail nodes (i.e., an arity of 0), and correspond to word or phrase translation pairs (with all translation op-tions existing on edges deriving the same head node), or glue rules that glue phrases together. For tagging, word-based, and phrase-based mod-els, these are strictly arranged in a monotone, left-branching structure. The design of cdec separates the creation of a translation forest from its rescoring with a lan-guage models or similar models. 3 Since the struc-ture of the unified search space is context free (  X  3), we use the logic for language model rescoring de-scribed by Chiang (2007), although any weighted intersection algorithm can be applied. The rescor-ing models need not be explicitly represented as FSTs X  X he state space can be inferred.

Although intersection using the Chiang algo-rithm runs in polynomial time and space, the re-sulting rescored forest may still be too large to rep-resent completely. cdec therefore supports three pruning strategies that can be used during intersec-tion: full unpruned intersection (useful for tagging models to incorporate, e.g., Markov features, but not generally practical for translation), cube prun-ing, and cube growing (Huang and Chiang, 2007). Semirings are a useful mathematical abstraction for dealing with translation forests since many useful quantities can be computed using a single linear-time algorithm but with different semirings. A semiring is a 5-tuple ( K ,  X  ,  X  , 0 , 1) that indi-cates the set from which the values will be drawn, K , a generic addition and multiplication operation,  X  and  X  , and their identities 0 and 1 . Multipli-cation and addition must be associative. Multi-plication must distribute over addition, and v  X  0 9 tion limit of 1 (right). must equal 0 . Values that can be computed using the semirings include the number of derivations, the expected translation length, the entropy of the translation posterior distribution, and the expected values of feature functions (Li and Eisner, 2009).
Since semirings are such a useful abstraction, cdec has been designed to facilitate implementa-tion of new semirings. Table 1 shows the C++ rep-resentation used for semirings. Note that because of our representation, built-in types like double , int , and bool (together with their default op-erators) are semirings. Beyond these, the type prob t is provided which stores the logarithm of the value it represents, which helps avoid under-flow and overflow problems that may otherwise be encountered. A generic first-order expectation semiring is also provided (Li and Eisner, 2009). Table 1: Semiring representation. T is a C++ type name.

Three standard algorithms parameterized with semirings are provided: I NSIDE , O UTSIDE , and I
NSIDE O UTSIDE , and the semiring is specified us-ing C++ generics (templates). Additionally, each algorithm takes a weight function that maps from hypergraph edges to a value in K , making it possi-ble to use many different semirings without alter-ing the underlying hypergraph. 5.1 Viterbi and k -best extraction Although Viterbi and k -best extraction algorithms are often expressed as I NSIDE algorithms with the tropical semiring, cdec provides a separate derivation extraction framework that makes use of a &lt; operator (Huang and Chiang, 2005). Thus, many of the semiring types define not only the el-ements shown in Table 1 but T::operator&lt; as well. The k -best extraction algorithm is also pa-rameterized by an optional predicate that can filter out derivations at each node, enabling extraction of only derivations that yield different strings as in Huang et al. (2006). Two training pipelines are provided with cdec . The first, called Viterbi envelope semiring train-ing, VEST , implements the minimum error rate training ( MERT ) algorithm, a gradient-free opti-mization technique capable of maximizing arbi-trary loss functions (Och, 2003). Rather than computing an error surface using k -best approximations of the decoder search space, cdec  X  X  implementation performs inference over the full hypergraph structure (Kumar et al., 2009). In particular, by defining a semiring whose values are sets of line segments, having an addition op-eration equivalent to union, and a multiplication operation equivalent to a linear transformation of the line segments, Och X  X  line search can be com-puted simply using the I NSIDE algorithm. Since the translation hypergraphs generated by cdec may be quite large making inference expensive, the logic for constructing error surfaces is fac-tored according to the MapReduce programming paradigm (Dean and Ghemawat, 2004), enabling parallelization across a cluster of machines. Im-plementations of the BLEU and TER loss functions are provided (Papineni et al., 2002; Snover et al., 2006). 6.2 Large-scale discriminative training In addition to the widely used MERT algo-rithm, cdec also provides a training pipeline for discriminatively trained probabilistic translation models (Blunsom et al., 2008; Blunsom and Os-borne, 2008). In these models, the translation model is trained to maximize conditional log like-lihood of the training data under a specified gram-mar. Since log likelihood is differentiable with respect to the feature weights in an exponential model, it is possible to use gradient-based opti-mization techniques to train the system, enabling the parameterization of the model using millions of sparse features. While this training approach was originally proposed for SCFG-based transla-tion models, it can be used to train any model type in cdec . When used with sequential tagging models, this pipeline is identical to traditional se-quential CRF training (Sha and Pereira, 2003).
Both the objective (conditional log likelihood) and its gradient have the form of a difference in two quantities: each has one term that is com-puted over the translation hypergraph which is subtracted from the result of the same computa-tion over the alignment hypergraph (refer to Fig-ures 1 and 2). The conditional log likelihood is the difference in the log partition of the translation and alignment hypergraph, and is computed using the I NSIDE algorithm. The gradient with respect to a particular feature is the difference in this fea-ture X  X  expected value in the translation and align-ment hypergraphs, and can be computed using ei-ther I NSIDE O UTSIDE or the expectation semiring and I NSIDE . Since a translation forest is generated as an intermediate step in generating an alignment forest (  X  2) this computation is straightforward.
Since gradient-based optimization techniques may require thousands of evaluations to converge, the batch training pipeline is split into map and reduce components, facilitating distribution over very large clusters. Briefly, the cdec is run as the map function, and sentence pairs are mapped over. The reduce function aggregates the results and per-forms the optimization using standard algorithms, including LBFGS (Liu et al., 1989), RPROP (Ried-miller and Braun, 1993), and stochastic gradient descent. Table 2 compares the performance of cdec , Hi-ero, and Joshua 1.3 (running with 1 or 8 threads) decoding using a hierarchical phrase-based trans-lation grammar and identical pruning settings. 4 Figure 4 shows the cdec configuration and weights file used for this test.
 The workstation used has two 2GHz quad-core Intel Xenon processors, 32GB RAM, is running Linux kernel version 2.6.18 and gcc version 4.1.2. All decoders use SRI X  X  language model toolkit, version 1.5.9 (Stolcke, 2002). Joshua was run on the Sun HotSpot JVM, version 1.6.0 12. A hierar-chical phrase-based translation grammar was ex-tracted for the NIST MT03 Chinese-English trans-lation using a suffix array rule extractor (Lopez, 2007). A non-terminal span limit of 15 was used, and all decoders were configured to use cube prun-ing with a limit of 30 candidates at each node and no further pruning. All decoders produced a BLEU score between 31.4 and 31.6 (small differences are accounted for by different tie-breaking behavior and OOV handling).
 Table 2: Memory usage and average per-sentence running time, in seconds, for decoding a Chinese-English test set.

Decoder Lang. Time (s) Memory cdec C++ 0.37 1.0Gb Joshua ( 1  X  ) Java 0.98 1.5Gb Joshua ( 8  X  ) Java 0.35 2.5Gb
Hiero Python 4.04 1.1Gb Figure 4: Configuration file (above) and feature weights file (below) used for the decoding test de-scribed in  X  7. cdec continues to be under active development. We are taking advantage of its modular design to study alternative algorithms for language model integration. Further training pipelines are un-der development, including minimum risk train-ing using a linearly decomposable approximation of BLEU (Li and Eisner, 2009), and MIRA train-ing (Chiang et al., 2009). All of these will be made publicly available as the projects progress. We are also improving support for parallel training using Hadoop (an open-source implementation of MapReduce).
 This work was partially supported by the GALE program of the Defense Advanced Research Projects Agency, Contract No. HR0011-06-2-001. Any opinions, findings, conclusions or recommen-dations expressed in this paper are those of the au-thors and do not necessarily reflect the views of the sponsors. Further support was provided the Euro-Matrix project funded by the European Commis-sion (7th Framework Programme). Discussions with Philipp Koehn, Chris Callison-Burch, Zhifei Li, Lane Schwarz, and Jimmy Lin were likewise crucial to the successful execution of this project.
