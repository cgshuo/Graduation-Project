 Emails continue to remain the most important and widely used mode of online communication despite having its ori-gins in the middle of last century and being threatened by a variety of online communication innovations. While sev-eral studies have predicted the continuous growth of volume of email communication, there is little innovation on im-proving the search in emails, an imperative part of the user experience. In this work, we present a lightweight email application codenamed InLook , that intends to provide a productive search experience.
 Email, search, productivity
Email is the oldest modes of online communication and is used by more than 2.5 billion users today. Studies have predicted its continuous growth over the next few years [1]. Email search is an integral part of the user X  X  experience. Studies also report that users search their mail data fre-quently and spend significant amount of time searching and re-searching [15].

Despite being an important activity, Email Search has not seen significant innovation in comparison to, say, Web Search. Web Search has evolved over the past decade from ten blue links to a more rich and task-oriented experience. Though email search has similar objectives to Web Search, there are some important distinctions:  X  Currently working at Microsoft Research, Redmond, WA, USA
In this work, we present InLook, a light-weight email search tool, which is an amalgamation of different bodies of research related to email search. The underlying objec-tive is to enhance the search experience of Email users.
The rest of the paper is structured as follows: Section 2 summarizes the various related work in the area of email search. Sections 3.1 through 3.3 show the varied features in InLook search experience. Section 4 describes the ranking algorithm used in InLook. We describe InLook application design in Section 5. Section 6 reports preliminary results of our user study of InLook. Section 7 briefly compares InLook with other email applications.
Email search can be tedious and frustrating experience, especially for older mails [13]. Researchers have tried var-ious approaches to alleviate the problems related to email search. These can be broadly bucketed into following cate-gories: Organizing emails: Contrary to the popular belief, or-ganizing emails into multiple folders might offer little help in search [20]. An alternative approach tries to organize emails into fewer categories like Social, Travel and Promo-tions [14] [3].
 Email actions: Aberdeen et al [4] [8] predict the impor-tance of an email based on the probability that it will be acted upon. A recent work by Dotan Castro et al [12] tries to predict actions on emails based on past user behavior. The actions considered in this work are: read, reply, delete and delete-without-read.
 Order by relevance: To the best of our knowledge, there are only a handful of published research works in the area of email relevance. AbdelRahman et al [7] employ different fea-tures like email content, subject and sender to assign a score to an email. Ogilvie and Callan [18] use a language model based approach to rank emails. A recent work by Carmel et al [11] discuss the area of email relevance in great detail. The authors employ a wide range of features to rank emails, in a learning to rank framework. The features include text simi-larity, folder information, attachments and sender behavior. Popular email applications like Google Inbox [4] and Thun-derbird [6] display search results by relevance. But, these offerings have not divulged any related algorithmic details.
Other research areas in the context of emails search in-clude generating suggestions [9] and spell-corrections [10] in the absence of query logs. This section details the email search experience offered by InLook. Some of the ideas below have been tried out before; InLook stitches them together in one application.
One of the main contributors to the success of Web Search is guided search. In InLook we provide guided search for email users by means of the following search features: 1. Auto-Completion and Spelling correction : We employ 2. Fuzzy Search of People names : We employ hashing-
Figure 1 shows guided search instances in InLook.
In InLook, we present a mix of relevance and recency re-sults for search queries. Showing results with either of the sort orders solely might not suffice for all queries. InLook introduces a notion of  X  X ntent pane X  which displays the best three emails based on relevance for a particular query. Rest of the mails in the result are shown in a traditional date or-der, we call this as the  X  X ecency pane X . Intent pane can be thought of as analogous to an  X  X ntity card X  in Web Search. Section 4 describes the ranking model used. Additionally, this pane is not restricted to email results. It can also show relevant attachments, contact cards or links. Figure 2 shows Intent pane in action in InLook.
We take inspiration from web browsers and introduce the notion of tabs in InLook. This allows users to make multi-ple searches at the same time. We also provide a mechanism to pin a query to a tab. This becomes like an active chan-nel or a standing query and the tab gets refreshed for this query periodically. Also, one can tear and dock tabs just like browsers and put them in multiple workspaces. This provides a very intuitive notion of segregating and search-ing through emails. Figure 3 shows InLook tabs in action. We plan to perform a detailed study on usage of tabs in the context of email search.

We introduce a notion of command box in InLook with an objective of faster task completion. The functionality of search box is over-ridden so that it morphs into a powerful command box. Users can think of this to be a shell on top of their email data. All these commands are powered by autocomplete to make it very easy to use. Some of the commands that can be executed are  X  #compose @person mailbody X ,  X  #chat @person X  and  X  #template parameters X .
Emails in the intent pane are ordered by relevance. Col-lecting training data for training email ranking models is a difficult task. It is tedious for a user to mark relevant mails for each query. Instead, we rely on a user X  X  click log to give us partial relevance judgments and use it for ranking [16]. Also, it is much more plausible to infer that a particular mail is better than the other, instead of an absolute judgement. The learning to rank algorithm we discuss below is similar to the ranking discussed in [11].
 For instance, let X  X  say a user clicks on mails 1, 3 and 5. Given that the mail snippets are sufficiently informative, this gives some indication of the user X  X  preferences. In this case, we may infer that the email at position 5 is more relevant than mails at positions 2 and 4. Likewise, we may infer that mail at position 3 is more relevant than the mail at position 2. We call such pairs of mails as discordant pairs, represented as mail j &lt; r mail i , which implies mail i relevant to user than mail j . The sequence of clicks doesn X  X  impose any ordering on mails 1, 3 and 5. We aggregate click logs from all users and train our ranking model using this data. For a given user, the logs consist of set of queries and for each query, the click sequence of mails. We log only the feature values as the mails can contain confidential information. We use a model based on logistic regression for our training. The objective function looks like:
Obj = min where n is the number of discordant mail pairs ( i,j ) and mail i and mail j are the corresponding mails. w represents the weight vector we want to learn. This loss equation con-sists of a regularizer and sums up the loss over all the dis-cordant pairs. Loss ( mail i ,mail j ) can be written as The score for i th mail s i is P w i  X  f i where f i is the feature value and w i is the weight we want to learn. The optimal weights for the above optimization problem can be estimated using an algorithm like LBFGS [5]. Table 1 lists some of the features we use in ranking.

The above ranking model which we refer to as the global model is trained on click logs of multiple users. As the user interacts with the system, we build a local ranking model which makes it more personalized.
InLook 1 is engineered as a C# WPF desktop application using a MVC framework. Figure 5 depicts the design of InLook. All the searches get routed by the mail manager to the appropriate stores. Caches are built-in at each stores to speed-up the retrieval. The index is built using Lucene.Net. Our design allows pluggable algorithms for Autocomplete, Spell correct and Ranking.

In addition to providing a fast and productive email ex-perience, InLook also provides a test bed for new algorithms and experiences related to emails. InLook X  X  modular design helps us experiment with other algorithms ranging from sub-ject line auto-completion to varied UX experiences using the same code base. InLook provides us with an easy way to conduct user studies with emails and get their feedback.
We instrument InLook and log various metrics like query response time, auto-complete usage and click positions. These metrics were collected from 50 users over a period of one month.
 Average response time 792 ms Auto-complete benefit (% key strokes saved) 50.8% Intent pane had one mail /  X  recency pane 65% Clicks on mail in intent pane /  X  recency pane 58% While these numbers are encouraging, the scale of experi-ment is small. We plan to dogfood with a larger audience. We are exploring different UX layouts to remove any uncon-ditional click bias. We compare InLook with following commercial offerings: Gmail [2], Inbox by Google [4] and Thunderbird by Mozilla [6]. None of these provide all the features we described in one place.

Gmail provides guided search but does not provide Fuzzy name search and relevance results. Google Inbox provides relevance pane (though not for all queries) but provides min-imal guided search. Thunderbird provides relevance results and minimal guided search. Thunderbird client makes uses Feature Name Feature Description Subject-Phrase-Match Tokens matched a phrase in the subject of a mail URL-Match Token matched a link in a mail Filename-Prefix Token matched prefix of a file name in an attachment Content-Match Token matched a word in one of the attachments of a mail Mail-Freshness Decay feature which penalizes older mails of tabs to display search results and emails. But, the algo-rithms employed in these offerings are not disclosed publicly making it hard to compare with quantitatively.
In this work, we presented InLook: a lightweight and pro-ductive email search experience. We have incorporated var-ied facets of email search into one single application. Specif-ically, we have incorporated guided search and have intro-duced an Intent pane for showing decorated/relevant results. Initial results suggest that a mix of relevant and time or-dered mails is a good way to show search results. As future work, we plan to release InLook to a broader audience, to understand user behavior in detail. Exploring alternate UI layouts for displaying relevant and recent mails is an inter-esting future direction we want to pursue.
We thank all our colleagues who helped dogfood InLook and gave us value feedback. [1] Email statistics. http://www.radicati.com/wp/ [2] Gmail. https://mail.google.com. [3] Gmail tabs. https: [4] Google X  X  inbox. [5] Lbfgs. https: [6] Thunderbird. [7] Samir AbdelRahman, Basma Hassan, and Reem [8] Douglas Aberdeen, Ondrej Pacovsky, and Andrew [9] Sumit Bhatia, Debapriyo Majumdar, and Prasenjit [10] Abhijit Bhole and Raghavendra Udupa. On correcting [11] David Carmel, Guy Halawi, Liane Lewin-Eytan, [12] Dotan Di Castro, Zohar Shay Karnin, Liane [13] David Elsweiler, Morgan Harvey, and Martin Hacker. [14] Mihajlo Grbovic, Guy Halawi, Zohar Shay Karnin, [15] Morgan Harvey and David Elsweiler. Exploring query [16] Thorsten Joachims. Optimizing search engines using [17] Shaishav Kumar and Raghavendra Udupa.
 [18] Paul Ogilvie and Jamie Callan. Experiments with [19] Raghavendra Udupa and Shaishav Kumar.
 [20] Steve Whittaker, Tara Matthews, Julian A. Cerruti,
