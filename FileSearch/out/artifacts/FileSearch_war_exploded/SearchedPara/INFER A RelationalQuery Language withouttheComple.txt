 The INFER query language allo ws users to express queries without referencing relations or specifying joins. Since the INFER syn tax is similar to but less restrictiv e than SQL, users can easily write highly expressiv e queries that are auto-matically completed by INFER's inference engine. INFER's SQL-based syn tax is familiar to curren t database users, and its impro ved ranking and query explanation system mak es it easier to use.
 Categories and Sub ject Descriptors: H.2.3[Query Lan-guages]:Relational Databases General Terms: Language, Human Factors Keyw ords: Query Inference, Joins, SQL, Logical Indep en-dence
A query language should cover the range of queries ex-pressible by SQL without requiring the understanding of the speci c details of a schema. While state of the art database interfaces, including keyw ord searc hes [1], and conceptual queries [4], succeed at remo ving the burden of understanding the relational schema from users, either the expressiv eness of the query language is limited or the language requires the construction and main tenance of a conceptual mo del.
One of the ma jor challenges in generating queries for the relational mo del is using joins to connect attributes located in di eren t relations. Languages that do not require the full speci cation of joins to relate the attributes of a query must determine the joins automatically to complete the query . INFER uses the AutoJoin inference engine [2] to generate query interpretations for partially speci ed queries by auto-matically determining the joins.

INFER can be describ ed as a language that accepts fully speci ed or partially formed SQL queries and completes any missing relationships (joins) between the attributes. It uses the same syn tax as SQL, as that is familiar to users and de-velop ers. The language supp orts the automatic creation of related through the relation participating in two roles. Lossy interpretations are rank ed after all lossless interpretations.
The concatenation of the relation name with the attribute name pro vides a unique name for eac h database attribute. Attribute names unique to a database do not require the speci cation of the relation name. Additional seman tics may be declared by specifying the role [3] of an attribute in a query . This allo ws attributes to be speci ed in INFER, whic h map to a single query interpretation.
INFER matc hes the scop e of SQL by allo wing the speci-cation of SQL queries in addition to partially formed SQL queries. The partially speci ed queries are passed through the inference engine to determine the speci c query interpre-tation. The purp ose of INFER is to remo ve the burden of schema kno wledge. Since INFER automatically completes the relationships of the attributes, a desired cross pro duct must be speci ed in the FROM clause , with the SQL syn tax for a CROSS JOIN .
Attribute-only SQL -Simple attribute-only queries may be speci ed in the SELECT clause to specify the attributes in the nal result. The WHERE clause permits selection conditions required of the output tuples. The FROM clause is optional for simple attribute-only queries, as INFER au-tomatically maps the attributes to the relations during in-ference.

Speci ed Join or Role -A join or role may be included in an INFER query to specify a relationship between the attributes. The WHERE clause may specify join conditions along with the selection conditions of the query . In addition, the FROM clause may be used to specify Outer, Natur al, or Cross Joins on relations .

Aggregates, Grouping, and Ordering -The aggre-gate functions Count, Sum, Avg, Min, and Max may be speci ed as expressions with the same functionalit y as SQL. Results may be group ed using the Group By clause and con-strained by the Having clause.

Union, Intersection and Di erence -Multiple queries may be related using Union, Interse ction, Di er ence, Ex-cept, and Minus . Eac h of the multiple queries have their query interpretations generated separately and com bined through the speci ed operator in the nal query .

Tuple Variables -In order to allo w speci cation of com-plex queries in INFER, a metho d to specify tuple variables is required. The From clause is used to specify a second cop y of a relation in order to relate attributes in di eren t tuples. This requires tuple variables to relate the attributes of two instances of the same table. INFER mo di es the join graph to include a second relation node and generates query interpretations to meet the speci ed conditions.

Sub queries -INFER supp orts the speci cation of sub-queries . As with other INFER queries, a sub query may be speci ed with attributes only . The paren thesis around sub queries pro vide a precedence order for inference. The most deeply nested sub queries are inferred rst. All of the sub queries at the lowest level are inferred prior to pro cess-ing sub queries at a higher level. The interpretations of the nested sub queries pro vide details to infer the next level of sub query . Correlated sub queries require a tuple variable to be speci ed in an outer query to the correlated sub query .
