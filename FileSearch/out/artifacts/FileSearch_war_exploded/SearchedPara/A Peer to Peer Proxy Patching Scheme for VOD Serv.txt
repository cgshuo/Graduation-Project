 Video-on-Demand (VOD) service is one of the most important technologies for many multimedia applications, such as home entertainment, digital video libraries, distance learning, electronic commerce, and so on. A typical VOD service allows that a num-ber of remote clients playback a desired video from a large collection of videos stored in one or more video servers. The main bottleneck for a VOD service is the storage bandwidth of the VOD server and the network bandwidth connecting to the VOD server to the client due to the high bandwidth requirements and long-lived nature of digital video. 
Many previous researches have shown that VOD server can be greatly improved through the use of multicast or broadcast scheme. Patching is one of the most efficient techniques to capitalize on the benefits of multicast for VOD services [1], [9]. The patching is a dynamic multicast scheme for extending the capability of standard mul-ticast to support true VOD services by jo ining new users to an existing multicast stream. This technique allows requests to be served immediately without having to wait for next multicast by using additional channels to transmit a prefix stream to cli-ents. However, the performances of the existing patching schemes, such as Grace Patching and Optimal Patching in [3], are restricted within the limited patching win-dow size and the client buffer size. Recently peer-to-peer (P2P) media streaming schemes have been introduced in the several papers [6], [8]. An important advantage of P2P media streaming is to carry system scalability out with a large number clients' stream sharing. But since the behavior of clients is unpredictable in P2P network, failure recovery mechanism is required for the departure of clients. 
In this paper, we propose a new patching scheme, called P2P proxy patching, for improving the typical patching technique by jointly using prefix caching in proxy and regular stream caching in P2P proxy. In our system, clients arriving close in time within patching window size form a group, and then the typical proxy prefix patching is carried out for the clients in the group. Except for the first client in a group who re-ceives the entire stream from the server or other client peer, all other clients will miss the prefix to all clients requiring the patch in a group. When the first client in a group client buffer. As soon as the buffer is full, the stream is forwarded into other clients in multicast manner. As a result, the output stream from the client is delayed as much as the buffer length in time from the original input stream of the client. Each client sys-tem plays an important role as a proxy caching server for regular stream to reduce the server bandwidth usage. This can drastically reduce the server bandwidth require-ment. In the performance study, we show that our patching scheme can reduce the server bandwidth requirements compared with the existing patching techniques. 
The remainder of this paper is organized as follows. Section 2 describes the related work to the patching scheme and P2P approaches for VOD systems. In section 3, we represent our P2P proxy patching scheme. Section 4 analyzes the performance of the proposed patching scheme. Finally, we conclude this paper in section 5. During the past decade, there has been a large amount of research works on the topic of VOD systems. We first investigate the related research works for VOD systems, especially focused on the techniques for re ducing server bandwidth requirement. Al-though a VOD server has high capacity of computation and storage resources, the per-formance of VOD system can be constrained by increasing more clients. In order to overcome several drawbacks caused by limited server bandwidth, many techniques based on multicast have been proposed, such as patching [1] and batching [7]. Re-cently, peer-to-peer (P2P) media streaming techniques, in which each client plays a role in a peer that brings computation and storage resources into the system to reduce the workload placed on the server, have been studying [6], [8]. 
A VOD system adapted standard multicast has a response delay waiting to regular stream start. The patching technique extends the capability of the standard multicast to support true VOD services by joining new clients to an existing multicast stream by use of additional patching channel [1]. This technique allows requests to be served immediately without having to wait for next multicast by using additional channels to transmit a prefix stream to clients. In patching scheme [2], Greedy Patching has at most one regular channel at any time. In contrast, Grace Patching starts a new regular channel whenever a client arrives more than B time units, where B is a client buffer patching channel is only used to patch the missing prefix portion of a service, thus the patching scheme is very efficient due to using two channel only for reducing server load. However, according to each new regular channel is generated in every patching window, it can give heavy load to VOD server. 
Another efficient technique for enhancing the performance of VOD services is proxy caching. Because the VOD server needs the high server bandwidth and QoS re-quirements of video data, it is necessary to di stribute server side load into local proxy servers. Moreover, since a remote server has a long-term response time and network jitter, proxy caching can be a good solution of these problems. Due to these advan-tages a proxy prefix caching scheme has been proposed [3], [4], which minimizes the network bandwidth by serving initial part of popular streams stored in proxy and thus provides high-quality video to its clients with low playback delay. 
Recently peer-to-peer (P2P) media streaming schemes have been introduced in the several papers [6], [8]. P2P consumes the bandwidth of source peer efficiently by capitalizing the bandwidth of a client to provide services to other clients. An impor-tant advantage of P2P media streaming is to carry system scalability out with a large number clients' stream sharing. But the behavior of clients is unpredictable; they are free to join and leave the service at any time, thus abandoning their descendant peers. To prevent this drawback, it is necessary failure recovery by clients' departure. Chain-rooted at the source and including all and only the clients. This technique re-transmits stream to clients through the delivery tree. A similar approach, called P2CAST, has been proposed in [6]. P2Cast extended th e IP multicast patching scheme to the uni-cast-only network by exploring the idea of P2P network. In P2Cast, the entire video is streamed over the application-level multicast tree, so that it can be shared among cli-part can be retrieved from the server or other clients. But this technique demands ad-ditional server load due to constituting regular channel periodically between server and clients in every session. 3.1 Overview of P2P Proxy Patching In this section, we describe our proposed P2P proxy patching scheme which com-bines prefix caching in proxy and regular stream caching in P2P proxy to improve the typical patching technique. We first illustrate the overall system architecture for the proposed scheme in Fig. 1. The architecture of our VOD system is similar to the typical VOD system with proxy server. The system consists of a central VOD parts of popular videos (called prefix), and multiple clients that are connected to the closest proxy through LAN. 
In our system, clients arriving close in time within patching window size form a server or other client peer, all other clients will miss the initial part of the stream and the patch in a group. When the first client in a group starts to play a video stream, the client caches the recent part of video stream in the client buffer. The size of buffer is the same as the patching window size. As soon as the buffer is full, the stream is for-warded into other clients in multicast manner. As a result, the output stream from the client is delayed as much as the buffer length in time from the original input stream of the client. Each client system plays an important role as a proxy caching server for regular stream to reduce the server bandwidth usage. 
In the typical patching scheme, all clients within the same patching window re-ceive one regular multicast stream from VOD server. A multicast stream is periodi-cally created in each unit time of patching window size, because the patching window size is limited by client buffer size in many cases, i.e. Grace Patching. In our scheme, a proxy server in a LAN can maintain multiple patching groups, which are served by one regular multicast stream from a server. This can drastically reduce the server bandwidth requirement. 
In P2P proxy patching scheme, the departure of a client or an underlying network failure, such as link breakdown or available bandwidth fluctuation, can disrupt the de-proposed scheme provides failure recovery by replacing the failure client to another client in the same group or the central VOD server. In order for the failure recovery we need a stable system to maintain and to manage the information for clients and patching group states. The proxy server is used as an index server to maintain the in-formation. Therefore, a proxy server plays roles of both the prefix caching and infor-mation provider in a LAN environment. In the next section, we describe the functions of the proxy server to maintain the information for failure recovery in detail. 3.2 Proxy Server Architecture In the typical VOD system using proxy server, the proxy has to maintain its session information and update the session state to send a video stream to a client. For exam-ple, in the proxy prefix patching scheme [3], the proxy server manages the informa-serves the prefixes for the popular videos for patching. In this paper, we reorganize the information to index each client and group state for the P2P prefix patching. The proxy server plays role of an index server for P2P clients, and thus it manages a client list and controls failure recovery mechanism. 
Fig. 2 describes the information structure in a proxy server. It is a simple index structure representing clients and groups. The index includes information to identify real clients, e.g., IP address or host name. It should be synchronized with the real cli-sion information between the proxy and clients in a LAN. In Fig. 2, a patching group is represented as the shade circle, and a client participated in a patching group is rep-resented as the white oval. Suppose that each client of C1, C2, ..., and C8 requests the same video stream at time t1, t2, ..., and t8, respectively. Each patching group of G1, G2, G3, and G4 is generated whenever the cached stream size is exceeded to prefix size. Each group has own regular stream from a central VOD server or the previous patching group. 
When the first client request C1 arrives at time t1, the VOD server creates a patch-ing group and then a regular channel between the server and the client is established. As soon as the channel is set up, the client starts to receive the regular stream from the into the first patching group G1. All clients in the same patching group receive a regu-lar stream through the same regular channel and then store into their buffers. For a client C4 the proxy server creates a new patching group G2, because the difference patch a prefix from the proxy server. In this case, the proxy server selects one client among clients in the previous patching group G1 as a transmitter of the regular stream for a new group G2. Therefore, a VOD server needs not to create additional channel to transmit a regular stream for patching group G2. In case of a patching group G3, however, clients cannot receive the regular stream from the previous group G2 be-cause the difference between the last stream stored in previous patching group G2 and a request time of clients C6 is larger than the patching window size. Therefore, the patching group G3 should receive their regular stream from a VOD server. 3.3 New Client Admission When a client requests to play a video through its proxy server, first the proxy server looks for its prefix. If a prefix stream is stored in the proxy, it sends the prefix to the client. Otherwise, it requests the prefix from the central VOD server. Concurrently, the proxy server updates its information structure to manage its multicast group and registers this session information to its index structure. Moreover, the proxy server should decide whether a regular stream come from a VOD server or the previous patching group consisting of near by clients. 
In this process, a proxy server uses its index information to find the last patching group and the most recently regular stream in its client buffer. Then, the system de-new patching group for this client. It also decides whether a VOD server dedicates an additional regular channel for this new patching group or it can receive a re-transmitted regular stream buffered in a client of the previous group. If the difference smaller than the prefix size, this client will join into the existing group. Otherwise, if the difference is larger than the prefix size, a new patching group is generated and this client joins into the new group. For example, when client C3 requests a video stream at time t3 in Fig. 2, the client C3 joins into the existing group G1 because the difference between the current patching group G1's initial time t1 and the request time t3 is smaller than the prefix size. In other case, when the client C4 requests a video stream at time t4, the client C4 participates in a new patching group G2 because the difference of the init time of the previous patching group G1 and the request time t4 is larger than the prefix size. Similarly, the client requests C6 and C8 generate each patching group G3 and G4, respectably. Finally, when a new patching group is generated, a proxy decides where a regular stream comes from. In Fig. 2, the patching groups G2 and G4 receive regu-lar streams from the previous patching groups G1 and G3. In this case, each differ-ence between the requests time and the most recent stream buffered in the previous patching group G3 cannot receive its regular stream from the previous patching group. It receives the stream from a VOD server because the difference between its initial time t6 and the most recent stream in the previous group G2 is larger than the prefix stream size. 3.4 Client Caching and Re-transmission In the typical prefix patching scheme, a client performs caching a regular stream as large as prefix size, which is the same as the difference between a request time and a regular stream's start time. In P2P proxy patching scheme, a client stores the constant size of its video stream as large as its patching window size. Although a part of stream has been played already, a client should maintain the stream waiting to retransmit. This mechanism makes sure that all clients in the same patching group maintain the same video stream in their buffer. It means that a client can be replaced with another client in the same patching group. 
Fig. 3 illustrates a process of our cached re-transmission from the previous patch-ing group to the next group. All clients in the same patching group cache their regular streams, and one of them retransmits the stored stream to the next patching group in our scheme, because a client maintains its video stream in the client buffer although it has been played already, the cached stream is divided into 3 categories; wait-to-transmit stream, wait-to-play stream, and current-playing point. In Fig 3, solid line represents a wait-to-transmit stream in the buffer and dashed line represents a wait-to-play stream in the buffer, and current-playing point is placed at the boundary of them. Therefore, through a process of cached re-transmission, a video stream in the buffer passes 3 steps: wait-to-play, current-playing, wait-to-transmit. 3.5 Failure Recovery Since we use unstable client system as a cached re-transmitter for regular stream, a re-transmitter may leave its patching group by irregular behavior of the client. In this Otherwise, a proxy server should request the remainder of video stream to a central VOD server with an additional channel. In order to recover the failure we use index information managed in a proxy server. 
Fig. 4 illustrates regular stream recovery process, which is caused by departure of a client. In this section, we discuss failur e recovery process to provide a continuous not participate in a re-transmission, has left the patching group. In this case, the client sends a teardown signal to their proxy server. Then, the proxy server updates its index information and the client session is removed. In Fig. 4, (b) represents a case that a re-transmitter leaves. In this case, a proxy server updates its session state to index infor-mation, and then searches this index to find a new re-transmitter. As a result, if there is another client in the group it decides and transmits signal. In Fig. 4, (c) represents that there is no client in the group since all clients leave. In this case, a proxy server should send a request for the remainder of the stream to a VOD server. In this section, we evaluate the performance of the P2P proxy patching scheme through simulation experiments. We then compare the performance of our scheme with the existing patching technique. The parameter used in the simulation study is shown in Table 1. In our simulation model, we suppose that a proxy server stores a prefix portion of most popular 10% videos and the default prefix size stored in a proxy is 10 minutes. Also, we assume that client request rate to VOD server follows the Poisson distribution with the default request frequency  X  . We suppose that access pattern to videos follows Zipf-like distribution with skew factor  X  and the default skew factor for our simulation is 0.271. A uniform distribution corresponds to the value of 1, and a value of 0 represents a highly skewed distribution. The request prob-ability to video i obtains by the following formula, 1 c i
Fig. 5 represents the effect of a prefix size in proxy server for the mean server bandwidth requirements. We assume that a proxy server stores only 10% of most popular videos, and the mean request interval time in default is 10 seconds. The prefix size in a proxy is equivalent to the patching window size. Fig. 5 shows that our pro-posed scheme decreases the mean server bandwidth requirement compared to the typical proxy prefix patching schemes [1], [3]. It shows that the larger prefix size re-quires the lower server side bandwidth in our proposed scheme. But the effect of pre-fix size in the typical patching scheme is smaller than that of our proposed scheme. 
Fig. 6 represents the effect of mean request interval time for the mean server bandwidth requirements. We assume that the default prefix size in the proxy server for the popular 10% video is 10 minutes. Fig. 6 shows that proposed scheme requires the network bandwidth significantly less than that of the typical patching scheme along with the mean request interval is shorter. 
Fig. 7 represents the effect of skew factor  X  for the mean server bandwidth re-quirements. We suppose that a video access pattern follows the Zipf-like distribution that our proposed patching scheme requires the lower bandwidth than the typical pre-fix patching scheme significantly. It shows also that the mean server bandwidth re-quirement is lower when the access pattern is highly skewed. The main bottleneck for a VOD service is the storage bandwidth of the VOD server and the network bandwidth connecting to the VOD server to the client due to the high bandwidth requirements and long-lived nature of digital video. Patching is one of the most efficient techniques to overcome the bottleneck of the VOD system through the use of multicast scheme. In this paper, we proposed the P2P proxy patching scheme which combines the prefix caching in proxy and the regular stream caching in P2P proxy to improve the typical patching technique. In our proposed scheme, each client same video stream. 
In the typical patching scheme, all clients within the same patching window re-ceive one regular multicast stream from VOD server. A multicast stream is periodi-cally created in each unit time of patching window size, because the patching window size is limited by client buffer size. In our scheme, a proxy server in a LAN can main-tain multiple patching groups, which are served by one regular multicast stream from server. This can drastically reduce the server bandwidth requirement. In the perform-ance study, we show that our patching scheme can reduce the server bandwidth re-quirements compared with the existing patching techniques. 
