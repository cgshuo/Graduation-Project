 Noun phrase coreference resolution is the problem of clustering noun phrases into anaphoric sets. A standard machine learning approach is to perform a set of independent binary classifications of the form  X  Is mention a coreferent with mention b ? X 
This approach of decomposing the problem into pairwise decisions presents at least two related diffi-culties. First, it is not clear how best to convert the set of pairwise classifications into a disjoint cluster-ing of noun phrases. The problem stems from the transitivity constraints of coreference: If a and b are coreferent, and b and c are coreferent, then a and c must be coreferent.

This problem has recently been addressed by a number of researchers. A simple approach is to per-form the transitive closure of the pairwise decisions. However, as shown in recent work (McCallum and Wellner, 2003; Singla and Domingos, 2005), bet-ter performance can be obtained by performing rela-tional inference to directly consider the dependence among a set of predictions. For example, McCal-lum and Wellner (2005) apply a graph partitioning algorithm on a weighted, undirected graph in which vertices are noun phrases and edges are weighted by the pairwise score between noun phrases.

A second and less studied difficulty is that the pairwise decomposition restricts the feature set to evidence about pairs of noun phrases only. This re-striction can be detrimental if there exist features of sets of noun phrases that cannot be captured by a combination of pairwise features. As a simple exam-ple, consider prohibiting coreferent sets that consist only of pronouns. That is, we would like to require that there be at least one antecedent for a set of pro-nouns. The pairwise decomposition does not make it possible to capture this constraint.

In general, we would like to construct arbitrary features over a cluster of noun phrases using the full expressivity of first-order logic. Enabling this sort of flexible representation within a statistical model has been the subject of a long line of research on first-order probabilistic models (Gaifman, 1964; Halpern, 1990; Paskin, 2002; Poole, 2003; Richard-son and Domingos, 2006).

Conceptually, a first-order probabilistic model can be described quite compactly. A configura-tion of the world is represented by a set of predi-Figure 1: An example noun coreference graph in which vertices are noun phrases and edge weights are proportional to the probability that the two nouns are coreferent. Partitioning such a graph into disjoint clusters corresponds to performing coreference res-olution on the noun phrases. cates, each of which has an associated real-valued parameter. The likelihood of each configuration of the world is proportional to a combination of these weighted predicates. In practice, however, enu-merating all possible configurations, or even all the predicates of one configuration, can result in in-tractable combinatorial growth (de Salvo Braz et al., 2005; Culotta and McCallum, 2006).

In this paper, we present a practical method to per-form training and inference in first-order models of coreference. We empirically validate our approach on the ACE coreference dataset, showing that the first-order features can lead to an 45% error reduc-tion. In this section we briefly review the standard pair-wise coreference model. Given a pair of noun phrases x ij = { x i , x j } , let the binary random vari-able y ij be 1 if x i and x j are coreferent. Let F = { f k ( x ij , y ) } be a set of features over x ij . For exam-ple, f k ( x ij , y ) may indicate whether x i and x j have the same gender or number. Each feature f k has an associated real-valued parameter  X  k . The pairwise model is where Z x settings of y ij .

This is a maximum-entropy classifier (i.e. logis-tic regression) in which p ( y ij | x ij ) is the probability that x i and x j are coreferent. To estimate  X  = {  X  k } from labeled training data, we perform gradient as-cent to maximize the log-likelihood of the labeled data.

Two critical decisions for this method are (1) how to sample the training data, and (2) how to combine the pairwise predictions at test time. Systems of-ten perform better when these decisions complement each other.

Given a data set in which noun phrases have been manually clustered, the training data can be cre-ated by simply enumerating over each pair of noun phrases x ij , where y ij is true if x i and x j are in the same cluster. However, this approach generates a highly unbalanced training set, with negative ex-amples outnumbering positive examples. Instead, Soon et al. (2001) propose the following sampling method: Scan the document from left to right. Com-pare each noun phrase x i to each preceding noun phrase x j , scanning from right to left. For each pair x , x j , create a training instance  X  x ij , y ij  X  , where y is 1 if x i and x j are coreferent. The scan for x j ter-minates when a positive example is constructed, or the beginning of the document is reached. This re-sults in a training set that has been pruned of distant noun phrase pairs.

At testing time, we can construct an undirected, weighted graph in which vertices correspond to noun phrases and edge weights are proportional to p ( y ij | x ij ) . The problem is then to partition the graph into clusters with high intra-cluster edge weights and low inter-cluster edge weights. An example of such a graph is shown in Figure 1.

Any partitioning method is applicable here; how-ever, perhaps most common for coreference is to perform greedy clustering guided by the word or-der of the document to complement the sampling method described above (Soon et al., 2001). More precisely, scan the document from left-to-right, as-signing each noun phrase x i to the same cluster as the closest preceding noun phrase x j for which p ( y ij | x ij ) &gt;  X  , where  X  is some classification threshold (typically 0.5). Note that this method con-trasts with standard greedy agglomerative cluster-ing, in which each noun phrase would be assigned to the most probable cluster according to p ( y ij | x ij Choosing the closest preceding phrase is common because nearby phrases are a priori more likely to be coreferent.

We refer to the training and inference methods de-scribed in this section as the Pairwise Model. We propose augmenting the Pairwise Model to enable classification decisions over sets of noun phrases.

Given a set of noun phrases x j = { x i } , let the bi-nary random variable y j be 1 if all the noun phrases x i  X  x j are coreferent. The features f k and weights  X  k are defined as before, but now the features can represent arbitrary attributes over the entire set x j . This allows us to use the full flexibility of first-order logic to construct features about sets of nouns. The First-Order Logic Model is where Z x j is a normalizer that sums over the two settings of y j .

Note that this model gives us the representational power of recently proposed Markov logic networks (Richardson and Domingos, 2006); that is, we can construct arbitrary formulae in first-order logic to characterize the noun coreference task, and can learn weights for instantiations of these formulae. How-ever, naively grounding the corresponding Markov logic network results in a combinatorial explosion of variables. Below we outline methods to scale train-ing and prediction with this representation.
As in the Pairwise Model, we must decide how to sample training examples and how to combine inde-pendent classifications at testing time. It is impor-tant to note that by moving to the First-Order Logic Model, the number of possible predictions has in-creased exponentially. In the Pairwise Model, the number of possible y variables is O ( | x | 2 ) , where x is the set of noun phrases. In the First-Order Logic Model, the number of possible y variables is O (2 | x | ) : There is a y variable for each possible el-ement of the powerset of x . Of course, we do not enumerate this set; rather, we incrementally instan-tiate y variables as needed during prediction.
A simple method to generate training examples is to sample positive and negative cluster examples uniformly at random from the training data. Positive examples are generated by first sampling a true clus-ter, then sampling a subset of that cluster. Negative examples are generated by sampling two positive ex-amples and merging them into the same cluster.
At testing time, we perform standard greedy ag-glomerative clustering, where the score for each merger is proportional to the probability of the newly formed clustering according to the model. Clustering terminates when there exists no addi-tional merge that improves the probability of the clustering.
 We refer to the system described in this section as First-Order Uniform. In this section we propose two enhancements to the training procedure for the First-Order Uniform model.

First, because each training example consists of a subset of noun phrases, the number of possible training examples we can generate is exponential in the number of noun phrases. We propose an error-driven sampling method that generates training ex-amples from errors the model makes on the training data. The algorithm is as follows: Given initial pa-rameters  X  , perform greedy agglomerative cluster-ing on training document i until an incorrect cluster is formed. Update the parameter vector according to this mistake, then repeat for the next training docu-ment. This process is repeated for a fixed number of iterations.

Exactly how to update the parameter vector is ad-dressed by the second enhancement. We propose modifying the optimization criterion of training to perform ranking rather than classification of clus-ters. Consider a training example cluster with a neg-ative label, indicating that not all of the noun phrases it contains are coreferent. A classification training algorithm will  X  X enalize X  all the features associated with this cluster, since they correspond to a negative example. However, because there may exists subsets of the cluster that are coreferent, features represent-ing these positive subsets may be unjustly penalized.
To address this problem, we propose constructing training examples consisting of one negative exam-Figure 2: An example noun coreference factor graph for the Pairwise Model in which factors f c model the coreference between two nouns, and f t enforce the transitivity among related decisions. The number of y variables increases quadratically in the number of x variables. ple and one  X  X earby X  positive example. In particular, when agglomerative clustering incorrectly merges two clusters, we select the resulting cluster as the negative example, and select as the positive example a cluster that can be created by merging other exist-ing clusters. 1 We then update the weight vector so that the positive example is assigned a higher score than the negative example. This approach allows the update to only penalize the difference between the two features of examples, thereby not penaliz-ing features representing any overlapping coreferent clusters.

To implement this update, we use MIRA (Mar-gin Infused Relaxed Algorithm), a relaxed, online maximum margin training algorithm (Crammer and Singer, 2003). It updates the parameter vector with two constraints: (1) the positive example must have a higher score by a given margin, and (2) the change to  X  should be minimal. This second constraint is to reduce fluctuations in  X  . Let s + ( X  , x j ) be the unnormalized score for the positive example and s  X  ( X  , x k ) be the unnormalized score of the neg-ative example. Each update solves the following Figure 3: An example noun coreference factor graph for the First-Order Model in which factors f c model the coreference between sets of nouns, and f t en-force the transitivity among related decisions. Here, the additional node y 123 indicates whether nouns { x 1 , x 2 , x 3 } are all coreferent. The number of y variables increases exponentially in the number of x variables. quadratic program:
In this case, MIRA with a single constraint can be efficiently solved in one iteration of the Hildreth and D X  X sopo method (Censor and Zenios, 1997). Ad-ditionally, we average the parameters calculated at each iteration to improve convergence.
 We refer to the system described in this section as First-Order MIRA. In this section, we describe the Pairwise and First-Order models in terms of the factor graphs they ap-proximate.

For the Pairwise Model, a corresponding undi-rected graphical model can be defined as P ( y | x ) = where Z x is the input-dependent normalizer and fac-tor f c parameterizes the pairwise noun phrase com-patibility as f c ( y ij , x ij ) = exp( P k  X  k f k ( y ij Factor f t enforces the transitivity constraints by f (  X  ) =  X  X  X  if transitivity is not satisfied, 1 oth-erwise. This is similar to the model presented in McCallum and Wellner (2005). A factor graph for the Pairwise Model is presented in Figure 2 for three noun phrases.

For the First-Order model, an undirected graphi-cal model can be defined as where Z x is the input-dependent nor-malizer and factor f c parameterizes the cluster-wise noun phrase compatibility as f ( y j , x j ) = exp( P k  X  k f k ( y j , x j )) . Again, factor f t enforces the transitivity constraints by f (  X  ) =  X  X  X  if transitivity is not satisfied, 1 other-wise. Here, transitivity is a bit more complicated, since it also requires that if y j = 1 , then for any subset x k  X  x j , y k = 1 . A factor graph for the First-Order Model is presented in Figure 3 for three noun phrases.

The methods described in Sections 2, 3 and 4 can be viewed as estimating the parameters of each fac-tor f c independently. This approach can therefore be viewed as a type of piecewise approximation of exact parameter estimation in these models (Sutton and McCallum, 2005). Here, each f c is a  X  X iece X  of the model trained independently. These pieces are combined at prediction time using clustering al-gorithms to enforce transitivity. Sutton and McCal-lum (2005) show that such a piecewise approxima-tion can be theoretically justified as minimizing an upper bound of the exact loss function. 6.1 Data We apply our approach to the noun coreference ACE 2004 data, containing 443 news documents with 28,135 noun phrases to be coreferenced. 336 doc-uments are used for training, and the remainder for testing. All entity types are candidates for corefer-ence (pronouns, named entities, and nominal enti-ties). We use the true entity segmentation, and parse each sentence in the corpus using a phrase-structure grammar, as is common for this task. 6.2 Features We follow Soon et al. (2001) and Ng and Cardie (2002) to generate most of our features for the Pair-wise Model. These include:  X  Match features -Check whether gender, num- X  Mention type (pronoun, name, nominal)  X  Aliases -Heuristically decide if one noun is the  X  Apposition -Heuristically decide if one noun is  X  Relative Pronoun -Heuristically decide if one  X  Wordnet features -Use Wordnet to decide if  X  Both speak -True if both contain an adjacent  X  Modifiers Match -for example, in the phrase  X  Substring -True if one noun is a substring of
The First-Order Model includes the following fea-tures:  X  Enumerate each pair of noun phrases and com- X  Use the output of the Pairwise Model for each  X  Cluster Size indicates the size of the cluster.  X  Count how many phrases in the cluster are
In addition to the listed features, we also include conjunctions of size 2, for example  X  X enders match AND numbers match X . 6.3 Evaluation We use the B 3 algorithm to evaluate the predicted coreferent clusters (Amit and Baldwin, 1998). B 3 is common in coreference evaluation and is similar to the precision and recall of coreferent links, ex-cept that systems are rewarded for singleton clus-ters. For each noun phrase x i , let c i be the number of mentions in x i  X  X  predicted cluster that are in fact coreferent with x i (including x i itself). Precision for x i is defined as c i divided by the number of noun phrases in x i  X  X  cluster. Recall for x i is defined as the c i divided by the number of mentions in the gold standard cluster for x i . F 1 is the harmonic mean of recall and precision. 6.4 Results In addition to Pairwise, First-Order Uniform, and First-Order MIRA, we also compare against Pair-wise MIRA, which differs from First-Order MIRA only by the fact that it is restricted to pairwise fea-tures.

Table 1 suggests both that first-order features and error-driven training can greatly improve perfor-mance. The First-Order Model outperforms the Pair-Table 1: B 3 results for ACE noun phrase corefer-ence. F IRST -O RDER MIRA is our proposed model that takes advantage of first-order features of the data and is trained with error-driven and rank-based methods. We see that both the first-order features and the training enhancements improve performance consistently. wise Model in F1 measure for both standard train-ing and error-driven training. We attribute some of this improvement to the capability of the First-Order model to capture features of entire clusters that may indicate some phrases are not coreferent. Also, we attribute the gains from error-driven training to the fact that training examples are generated based on errors made on the training data. (However, we should note that there are also small differences in the feature sets used for error-driven and standard training results.)
Error analysis indicates that often noun x i is cor-rectly not merged with a cluster x j when x j has a strong internal coherence. For example, if all 5 men-tions of France in a document are string identical, then the system will be extremely cautious of merg-ing a noun that is not equivalent to France into x j , since this will turn off the  X  X ll-String-Match X  fea-ture for cluster x j .

To our knowledge, the best results on this dataset were obtained by the meta-classification scheme of Ng (2005). Although our train-test splits may differ slightly, the best B-Cubed F1 score reported in Ng (2005) is 69.3%, which is considerably lower than the 79.3% obtained with our method. Also note that the Pairwise baseline obtains results similar to those in Ng and Cardie (2002). There has been a recent interest in training methods that enable the use of first-order features (Paskin, 2002; Daum  X  e III and Marcu, 2005b; Richardson and Domingos, 2006). Perhaps the most related is  X  X earning as search optimization X  (LASO) (Daum  X  e III and Marcu, 2005b; Daum  X  e III and Marcu, 2005a). Like the current paper, LASO is also an error-driven training method that integrates predic-tion and training. However, whereas we explic-itly use a ranking-based loss function, LASO uses a binary classification loss function that labels each candidate structure as correct or incorrect . Thus, each LASO training example contains all candidate predictions, whereas our training examples contain only the highest scoring incorrect prediction and the highest scoring correct prediction. Our experiments show the advantages of this ranking-based loss func-tion. Additionally, we provide an empirical study to quantify the effects of different example generation and loss function decisions.

Collins and Roark (2004) present an incremental perceptron algorithm for parsing that uses  X  X arly up-date X  to update the parameters when an error is en-countered. Our method uses a similar  X  X arly update X  in that training examples are only generated for the first mistake made during prediction. However, they do not investigate rank-based loss functions.
Others have attempted to train global scoring functions using Gibbs sampling (Finkel et al., 2005), message propagation, (Bunescu and Mooney, 2004; Sutton and McCallum, 2004), and integer linear pro-gramming (Roth and Yih, 2004). The main distinc-tions of our approach are that it is simple to imple-ment, not computationally intensive, and adaptable to arbitrary loss functions.

There have been a number of machine learning approaches to coreference resolution, traditionally factored into classification decisions over pairs of nouns (Soon et al., 2001; Ng and Cardie, 2002). Nicolae and Nicolae (2006) combine pairwise clas-sification with graph-cut algorithms. Luo et al. (2004) do enable features between mention-cluster pairs, but do not perform the error-driven and rank-ing enhancements proposed in our work. Denis and Baldridge (2007) use a ranking loss function for pro-noun coreference; however the examples are still pairs of pronouns, and the example generation is not error driven. Ng (2005) learns a meta-classifier to choose the best prediction from the output of sev-eral coreference systems. While in theory a meta-classifier can flexibly represent features, they do not explore features using the full flexibility of first-order logic. Also, their method is neither error-driven nor rank-based.

McCallum and Wellner (2003) use a conditional random field that factors into a product of pairwise decisions about pairs of nouns. These pairwise de-cisions are made collectively using relational infer-ence; however, as pointed out in Milch et al. (2004), this model has limited representational power since it does not capture features of entities , only of pairs of mention. Milch et al. (2005) address these issues by constructing a generative probabilistic model, where noun clusters are sampled from a generative process. Our current work has similar representa-tional flexibility as Milch et al. (2005) but is discrim-inatively trained. We have presented learning and inference proce-dures for coreference models using first-order fea-tures. By relying on sampling methods at training time and approximate inference methods at testing time, this approach can be made scalable. This re-sults in a coreference model that can capture features over sets of noun phrases, rather than simply pairs of noun phrases.

This is an example of a model with extremely flexible representational power, but for which exact inference is intractable. The simple approximations we have described here have enabled this more flex-ible model to outperform a model that is simplified for tractability.

A short-term extension would be to consider fea-tures over entire clusterings , such as the number of clusters. This could be incorporated in a ranking scheme, as in Ng (2005).

Future work will extend our approach to a wider variety of tasks. The model we have described here is specific to clustering tasks; however a similar for-mulation could be used to approach a number of lan-guage processing tasks, such as parsing and relation extraction. These tasks could benefit from first-order features, and the present work can guide the approx-imations required in those domains.

Additionally, we are investigating more sophis-ticated inference algorithms that will reduce the greediness of the search procedures described here.
