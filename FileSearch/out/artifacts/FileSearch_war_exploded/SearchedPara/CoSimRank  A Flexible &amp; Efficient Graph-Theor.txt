 Graph-theoretic algorithms have been successfully applied to many problems in NLP (Mihalcea and Radev, 2011). These algorithms are often based on PageRank (Brin and Page, 1998) and other central-ity measures (e.g., (Erkan and Radev, 2004)). An alternative for tasks involving similarity is Sim-Rank (Jeh and Widom, 2002). SimRank is based on the simple intuition that nodes in a graph should be considered as similar to the extent that their neighbors are similar. Unfortunately, SimRank has time complexity O ( n 3 ) (where n is the num-ber of nodes in the graph) and therefore does not scale to the large graphs that are typical of NLP. graph-theoretic algorithm for computing node similarity that combines features of SimRank and PageRank. Our key observation is that to compute the similarity of two nodes, we need not consider all other nodes in the graph as SimRank does; in-stead, CoSimRank starts random walks from the two nodes and computes their similarity at each time step. This offers large savings in computa-tion time if we only need the similarities of a small subset of all n 2 node similarities.

These two cases  X  computing a few similari-ties and computing many similarities  X  correspond to two different representations we can compute CoSimRank on: a vector representation, which is fast for only a few similarities, and a matrix repre-sentation, which can take advantage of fast matrix multiplication algorithms.

CoSimRank can be used to compute many vari-ations of basic node similarity  X  including similar-ity for graphs with weighted and typed edges and similarity for sets of nodes. Thus, CoSimRank has the added advantage of being a flexible tool for dif-ferent types of applications.

The extension of CoSimRank to similarity across graphs is important for the application of bilingual lexicon extraction: given a set of corre-spondences between nodes in two graphs A and B (corresponding to two different languages), a pair of nodes ( a  X  A,b  X  B ) is a good candidate for a translation pair if their node similarity is high. In an experimental evaluation, we show that CoSim-Rank is more efficient and more accurate than both SimRank and PageRank-based algorithms.

This paper is structured as follows. Section 2 discusses related work. Section 3 introduces CoSimRank. In Section 4, we compare CoSim-Rank and SimRank. By providing some useful extensions, we demonstrate the great flexibility of CoSimRank (Section 5). We perform an exper-imental evaluation of CoSimRank in Section 6. Section 7 summarizes the paper. Our work is unsupervised. We therefore do not review graph-based methods that make extensive use of supervised learning (e.g., de Melo and Weikum (2012)).
 Since the original version of SimRank (Jeh and Widom, 2002) has complexity O ( n 4 ) , many ex-tensions have been proposed to speed up its calcu-lation. A Monte Carlo algorithm, which is scalable to the whole web, was suggested by Fogaras and R  X  acz (2005). However, in an evaluation of this al-gorithm we found that it does not give competitive results (see Section 6). A matrix representation of SimRank called SimFusion (Xi et al., 2005) im-proves the computational complexity from O ( n 4 ) to O ( n 3 ) . Lizorkin et al. (2010) also reduce com-plexity to O ( n 3 ) by selecting essential node pairs and using partial sums. They also give a useful overview of SimRank, SimFusion and the Monte Carlo methods of Fogaras and R  X  acz (2005). A non-iterative computation for SimRank was intro-duced by Li et al. (2010). This is especially useful for dynamic graphs. However, all of these meth-ods have to run SimRank on the entire graph and are not efficient enough for very large graphs. We are interested in applications that only need a frac-tion of all O ( n 2 ) pairwise similarities. The algo-rithm we propose below is an order of magnitude faster in such applications because it is based on a
Apart from SimRank, many other similarity measures have been proposed. Leicht et al. (2006) introduce a similarity measure that is also based on the idea that nodes are similar when their neigh-bors are, but that is designed for bipartite graphs. However, most graphs in NLP are not bipartite and Jeh and Widom (2002) also proposed a SimRank variant for bipartite graphs.

Another important similarity measure is cosine similarity of Personalized PageRank (PPR) vec-tors. We will refer to this measure as PPR+cos . Hughes and Ramage (2007) find that PPR+cos has high correlation with human similarity judg-ments on WordNet-based graphs. Agirre et al. (2009) use PPR+cos for WordNet and for cross-lingual studies. Like CoSimRank, PPR+cos is efficient when computing single node pair simi-larities; we therefore use it as one of our base-lines below. This method is also used by Chang et al. (2013) for semantic relatedness. They also experimented with Euclidean distance and KL-divergence. Interestingly, a simpler method per-formed best when comparing with human simi-larity judgments. In this method only the entries corresponding to the compared nodes are used for a similarity score. Rao et al. (2008) compared PPR+cos to other graph based similarity mea-sures like shortest-path and bounded-length ran-dom walks. PPR+cos performed best except for a new similarity measure based on commute time. We do not compare against this new measure as it uses the graph Laplacian and so cannot be com-puted for a single node pair.

One reason CoSimRank is efficient is that we need only compute a few iterations of the random walk. This is often true of this type of algorithm; cf. (Sch  X  utze and Walsh, 2008).
 LexRank (Erkan and Radev, 2004) is similar to PPR+cos in that it combines PageRank and cosine; it initializes the sentence similarity matrix of a document using cosine and then applies PageRank to compute lexical centrality. Despite this superfi-cial relatedness, applications like lexicon extrac-tion that look for similar entities and applications that look for central entities are quite different.
In addition to faster versions of SimRank, there has also been work on extensions of SimRank. Dorow et al. (2009) and Laws et al. (2010) ex-tend SimRank to edge weights, edge labels and multiple graphs. We use their Multi-Edge Extrac-tion (MEE) algorithm as one of our baselines be-low. A similar graph of dependency structures was built by Minkov and Cohen (2008). They applied different similarity measures, e.g., cosine of de-pendency vectors or a new algorithm called path-constrained graph walk, on synonym extraction (Minkov and Cohen, 2012). We compare CoSim-Rank with their results in our experiments (see Section 6).

Some other applications of SimRank or other graph based similarity measures in NLP include work on document similarity (Li et al., 2009), the transfer of sentiment information between lan-guages (Scheible et al., 2010) and named entity disambiguation (Han and Zhao, 2010). Hoang and Kan (2010) use SimRank for related work sum-marization. Muthukrishnan et al. (2010) combine link based similarity and content based similarity for document clustering and classification.
These approaches use at least one of cosine sim-ilarity, PageRank and SimRank. CoSimRank can either be interpreted as an efficient version of Sim-Rank or as a version of Personalized PageRank for similarity measurement. The novelty is that we compute similarity for vectors that are induced using a new algorithm, so that the similarity mea-surement is much more efficient when an applica-tion only needs a fraction of all O ( n 2 ) pairwise similarities. We first first give an intuitive introduction of CoSimRank as a Personalized PageRank (PPR) derivative. Later on, we will give a matrix formu-lation to compare CoSimRank with SimRank. 3.1 Personalized PageRank Haveliwala (2002) introduced Personalized Page-Rank  X  or topic-sensitive PageRank  X  based on the idea that the uniform damping vector p (0) can be replaced by a personalized vector, which depends on node i . We usually set p (0) ( i ) = e i , with e i be-is 1 and all other entries are 0. The PPR vector of node i is given by: where A is the stochastic matrix of the Markov chain, i.e., the row normalized adjacency matrix. The damping factor d  X  (0 , 1) ensures that the computation converges. The PPR vector after k
To visualize this formula, one can imagine a random surfer starting at node i and following one of the links with probability d or jumping back to the starting node i with probability (1  X  d ) . Entry i of the converged PPR vector represents the prob-ability that the random surfer is on node i after an unlimited number of steps.

To simulate the behavior of SimRank we will simplify this equation and set the damping factor d = 1 . We will re-add a damping factor later in the calculation. Note that the personalization vector p (0) was elim-inated, but is still present as the starting vector of the iteration. 3.2 Similarity of vectors Let p ( i ) be the PPR vector of node i . The cosine of two vectors u and v is computed by dividing Figure 1: Graph motivating CoSimRank algo-rithm. Whereas PPR gives relatively high similar-ity to the pair (law,suit), CoSimRank assigns the pair similarity 0. the inner product  X  u,v  X  by the lengths of the vec-tors. The cosine of two PPR vectors can be used as a similarity measure for the corresponding nodes (Hughes and Ramage, 2007; Agirre et al., 2009):
This measure s ( i,j ) looks at the probability that a random walker is on a certain edge after an un-limited number of steps . This is potentially prob-lematic as the example in Figure 1 shows. The PPR vectors of suit and dress will have some weight on tailor , which is good. However, the PPR vector of law will also have a non-zero weight for tailor . So law and dress are similar because of the node tailor . This is undesirable.

We can prevent this type of spurious similarity by taking into account the path the random surfer took to get to a particular node . We formalize this by defining CoSimRank s ( i,j ) as follows: where p ( k ) ( i ) is the PPR vector of node i from Eq. 2 after k iterations. We compare the PPR vec-tors at each time step k . The sum of all similarities is the value of CoSimRank, i.e., the final similar-ity. We add a damping factor c , so that early meet-ings are more valuable than later meetings.
To compute the similarity of two vectors u and v we use the inner product  X  X  ,  X  X  in Eq. 4 for two reasons: 1. This is similar to cosine similarity except that 2. Without expensive normalization, we can Later on, the following iterative computation of CoSimRank will prove useful: 3.3 Matrix formulation The matrix formulation of CoSimRank is: We will see in Section 5 that this formulation is the basis for a very efficient version of CoSimRank. 3.4 Convergence properties As the PPR vectors have only positive values, we can easily see in Eq. 4 that the CoSimRank of one node pair is monotonically non-decreasing. For the dot product of two vectors, the Cauchy-Schwarz inequality gives the upper bound: where k x k is the norm of x . From Eq. 2 we get know from elementary functional analysis that the 1-norm is the biggest of all p-norms and so one more slowly than a geometric series and converges if | c | &lt; 1 :
If an upper bound of 1 is desired for s ( i,j ) (in-stead of 1 / (1  X  c ) ), then we can use s 0 : The original SimRank equation can be written as follows (Jeh and Widom, 2002): r ( i,j ) = where N ( i ) denotes the nodes connected to i . SimRank is computed iteratively. With A be-ing the normalized adjacency matrix we can write SimRank in matrix formulation: where the maximum of two matrices refers to the element-wise maximum. We will now prove by in-duction that the matrix formulation of CoSimRank (Eq. 6) is equivalent to: and thus very similar to SimRank (Eq. 7).
 step:
S
Comparing Eqs. 7 and 8, we see that SimRank and CoSimRank are very similar except that they initialize the similarities on the diagonal differ-ently. Whereas SimRank sets each of these en-tries back to one at each iteration, CoSimRank adds one. Thus, when computing the two similar-ity measures iteratively, the diagonal element ( i,i ) will be set to 1 by both methods for those initial it-(i.e., before applying either max or add). The methods diverge when the entry is 6 = 0 for the first time.
 Complexity of computing all n 2 similarities. The matrix formulas of both SimRank (Eq. 7) and CoSimRank (Eq. 8) have time complexity O ( n 3 ) or  X  if we want to take the higher efficiency of computation for sparse graphs into account  X  O ( dn 2 ) where n is the number of nodes and d the average degree. Space complexity is O ( n 2 ) for both algorithms.
 ities. In most cases, we only want to compute k 2 similarities for k nodes. For CoSimRank, we compute the k PPR vectors in O ( kdn ) (Eq. 2) and compute the k 2 similarities in O ( k 2 n ) (Eq. 5). If d &lt; k , then the time complexity of CoSimRank is O ( k 2 n ) . If we only compute a single similar-ity, then the complexity is O ( dn ) . In contrast, the complexity of SimRank is the same as in the all-similarities case: O ( dn 2 ) . It is not obvious how to design a lower-complexity version of SimRank for this case. Thus, we have reduced SimRank X  X  cu-bic time complexity to a quadratic time complex-ity for CoSimRank or  X  assuming that the aver-age degree d does not depend on n  X  SimRank X  X  quadratic time complexity to linear time complex-ity for the case of computing few similarities.
Space complexity for computing k 2 similarities is O ( kn ) since we need only store k vectors, not the complete similarity matrix. This complexity can be exploited even for the all similarities appli-cation: If the matrix formulation cannot be used because the O ( n 2 ) similarity matrix is too big for available memory, then we can compute all sim-ilarities in batches  X  and if desired in parallel  X  whose size is chosen such that the vectors of each batch still fit in memory.

In summary, CoSimRank and SimRank have similar space and time complexities for comput-ing all n 2 similarities. For the more typical case that we only want to compute a fraction of all sim-ilarities, we have recast the global SimRank for-mulation as a local CoSimRank formulation. As a result, time and space complexities are much im-proved. In Section 6, we will show that this is also true in practice. We will show now that the basic CoSimRank algo-rithm can be extended in a number of ways and is thus a flexible tool for different NLP applications. 5.1 Weighted edges The use of weighted edges was first proposed in the PageRank patent. It is straightforward and easy to implement by replacing the row normal-ized adjacency matrix A with an arbitrary stochas-tic matrix P . We can use this edge weighted Page-Rank for CoSimRank. 5.2 CoSimRank across graphs We often want to compute the similarity of nodes in two different graphs with a known node-node correspondence; this is the scenario we are faced with in the lexicon extraction task (see Section 6). A variant of SimRank for this task was presented by Dorow et al. (2009). We will now present an equivalent method for CoSimRank. We denote the number of nodes in the two graphs U and V by | U | and | V | , respectively. We compute PPR vec-spondences. The analog of CoSimRank (Eq. 4) for two graphs is then: The matrix formulation (cf. Eq. 6) is: where A and B are row-normalized adjacency ma-trices. We can interpret S (0) as a change of basis. A similar approach for word embeddings was pub-lished by Mikolov et al. (2013). They call S (0) the translation matrix. 5.3 Typed edges To be able to directly compare to prior work in our experiments, we also present a method to integrate a set of typed edges T in the CoSimRank calcula-tion. For this we will compute a similarity matrix for each edge type  X  and merge them into one ma-trix for the next iteration: This formula is identical to the random surfer model where two surfers only meet iff they are on the same node and used the same edge type to get there. A more strict claim would be to use the same edge type at any time of their journey:
S We will not use Eq. 12 due to its space complexity. 5.4 Similarity of sets of nodes CoSimRank can also be used to compute the sim-ilarity s ( V,W ) of two sets V and W of nodes, e.g., short text snippets. We are not including this method in our experiments, but we will give the equation here, as traditional document similarity measures (e.g., cosine similarity) perform poorly on this task although there also are known alter-natives with good results (Sahami and Heilman, 2006). For a set V , the initial PPR vector is given by: We then reuse Eq. 4 to compute s ( V,W ) : In summary, modifications proposed for Sim-Rank (weighted and typed edges, similarity across graphs) as well as modifications proposed for PageRank (sets of nodes) can also be applied to CoSimRank. This makes CoSimRank a very flex-ible similarity measure.

We will test the first three extensions experi-mentally in the next section and leave similarity of node sets for future work. We evaluate CoSimRank for the tasks of syn-onym extraction and bilingual lexicon extraction. We use the basic version of CoSimRank (Eq. 4) for synonym extraction and the two-graph version (Eq. 9) for lexicon extraction, both with weighted edges. Our motivation for this application is that two words that are synonyms of each other should have similar lexical neighbors and that two words that are translations of each other should have neighbors that correspond to each other; thus, in each case the nodes should be similar in the graph-theoretic sense and CoSimRank should be able to identify this similarity.

We use the English and German graphs pub-lished by Laws et al. (2010), including edge weighting and normalization. Nodes are nouns, adjectives and verbs occurring in Wikipedia. There are three types of edges, corresponding to three types of syntactic configurations extracted from the parsed Wikipedias: adjective-noun, verb-object and noun-noun coordination. Table 1 gives examples and number of nodes and edges.
 relation entities description example amod a, v adjective-noun a fast car dobj v, n verb-object drive a car ncrd n, n noun-noun cars and busses Table 1: Edge types (above) and number of nodes and edges (below) 6.1 Baselines We propose CoSimRank as an efficient algorithm for computing the similarity of nodes in a graph. Consequently, we compare against the two main methods for this task in NLP: SimRank and exten-sions of PageRank.
 We also compare against the MEE (Multi-Edge Extraction) variant of SimRank (Dorow et al., 2009), which handles labeled edges more effi-ciently than SimRank: where A  X  is the row-normalized adjacency matrix for edge type  X  (see edge types in Table 1).
Apart from SimRank, extensions of PageRank are the main methods for computing the similar-ity of nodes in graphs in NLP (e.g., Hughes and Ramage (2007), Agirre et al. (2009) and other pa-pers discussed in related work). Generally, these methods compute the Personalized PageRank for each node (see Eq. 1). When the computation has converged, the similarity of two nodes is given by the cosine similarity of the Personalized PageRank vectors. We implemented this method for our ex-periments and call it PPR+cos. 6.2 Synonym Extraction We use TS68 , a test set of 68 synonym pairs pub-lished by Minkov and Cohen (2012) for evalua-tion. This gold standard lists a single word as the PPR+cos 20.6% 52.9% 0.32 SimRank 25.0 % 61.8% 0.37 CoSimRank 25.0 % 61.8% 0.37
Typed CoSimRank 23.5% 63.2 % 0.37 PPR+cos 32.6% 73.5% 0.48 SimRank 45.6 % 83.8 % 0.59 CoSimRank 45.6 % 83.8 % 0.59 Typed CoSimRank 44.1% 83.8 % 0.59 Table 2: Results for synonym extraction on TS68. Best result in each column in bold. correct synonym even if there are several equally acceptable near-synonyms (see Table 3 for exam-ples). We call this the one-synonym evaluation. Three native English speakers were asked to mark synonyms, that were proposed by a baseline or by CoSimRank, i.e. ranked in the top 10. If all three of them agreed on one word as being a synonym in at least one meaning, we added this as a correct answer to the test set. We call this the  X  X xtended X  evaluation (see Table 2).
 Synonym extraction is run on the English graph. To calculate PPR+cos, we computed 20 iterations with a decay factor of 0 . 8 and used the cosine sim-ilarity with the 2-norm in the denominator to com-pare two vectors. For the other three methods, we also used a decay factor of 0 . 8 and computed 5 it-erations. Recall that CoSimRank uses the simple inner product  X  X  ,  X  X  to compare vectors.

Our evaluation measures are proportion of words correctly translated by word in the top position (P@1), proportion of words correctly translated by a word in one of the top 10 posi-tions (P@10) and Mean Reciprocal Rank (MRR). CoSimRank X  X  MRR scores of 0.37 (one-synonym) and 0.59 (extended) are the same or better than all baselines (see Table 2). CoSimRank and SimRank have the same P@1 and P@10 accuracy (although they differed on some decisions). CoSimRank is better than PPR+cos on both evaluations, but as this test set is very small, the results are not signif-icant. Table 3 shows a sample of synonyms pro-posed by CoSimRank.

Minkov and Cohen (2012) tested cosine and random-walk measures on grammatical relation-keyword expected extracted movie film film modern contemporary contemporary demonstrate protest show attractive appealing beautiful economic profitable financial close shut open Table 3: Examples for extracted synonyms. Cor-rect synonyms according to extended evaluation in bold. ships (similar to our setup) as well as on cooccur-rence statistics. The MRR scores for these meth-ods range from 0.29 to 0.59. (MRR is equivalent to MAP as reported by Minkov and Cohen (2012) when there is only one correct answer.) Their best number (0.59) is better than our one-synonym result; however, they performed manual postpro-cessing of results  X  e.g., discarding words that are morphologically or semantically related to other words in the list  X  so our fully automatic results cannot be directly compared. 6.3 Lexicon Extraction We evaluate lexicon extraction on TS1000, a test set of 1000 items, (Laws et al., 2010) each con-sisting of an English word and its German transla-tions. For lexicon extraction, we use the same pa-rameters as in the synonym extraction task for all four similarity measures. We use a seed dictionary of 12,630 word pairs to establish node-node corre-spondences between the two graphs. We remove a search keyword from the seed dictionary before calculating similarities for it, something that the architecture of CoSimRank makes easy because we can use a different seed dictionary S (0) for ev-ery keyword.
 Both CoSimRank methods outperform Sim-Rank significantly (see Table 4). The differ-ence between CoSimRank with and without typed edges is not significant. (This observation was also made for SimRank on a smaller graph and test set (Laws et al., 2010).)
PPR+cos X  X  performance at 14 . 8% correct trans-lations is much lower than SimRank and CoSim-Rank. The disadvantage of this similarity mea-sure is significant and even more visible on bilin-gual lexicon extraction than on synonym extrac-tion (see Table 2). The reason might be that we are not comparing the whole PPR vector anymore, CoSimRank 61.1% 84.0 % Typed CoSimRank 61.4 % 83.9% Table 4: Results for bilingual lexicon extraction (TS1000 EN  X  DE). Best result in each column in bold. but only entries which occur in the seed dictionary (see Eq. 9). As the seed dictionary contains 12,630 word pairs, this means that only every fourth entry of the PPR vector (the German graph has 47,439 nodes) is used for similarity calculation. This is also true for CoSimRank, but it seems that CoSim-Rank is more stable because we compare more
We also experimented with the method of Fog-aras and R  X  acz (2005). We tried a number of differ-ent ways of modifying it for weighted graphs: (i) running the random walks with the weighted ad-jacency matrix as Markov matrix, (ii) storing the weight (product of each edge weight) of a random walk and using it as a factor if two walks meet and (iii) a combination of both. We needed about 10,000 random walks in all three conditions. As a result, the computational time was approximately 30 minutes per test word, so this method is even slower than SimRank for our application. The ac-curacies P@1 and P@10 were worse in all experi-ments than those of CoSimRank. 6.4 Run time performance Table 5 compares the run time performance of CoSimRank with the baselines. We ran all exper-iments on a 64-bit Linux machine with 64 Intel Xenon X7560 2.27Ghz CPUs and 1TB RAM. The calculated time is the sum of the time spent in user mode and the time spent in kernel mode. The ac-tual wall clock time was significantly lower as we used up to 64 CPUs.

Compared to SimRank, CoSimRank is more than 40 times faster on synonym extraction and six times faster on lexicon extraction. SimRank is at a disadvantage because it computes all similarities in the graph regardless of the size of the test set; it is particularly inefficient on synonym extraction because the English graph contains a large number PPR+cos 2,228 2,195 SimRank 23,423 14,418 CoSimRank 524 2,342 Typed CoSimRank 615 6,108 Table 5: Execution times in minutes for CoSim-Rank and the baselines. Best result in each column in bold. of edges (see Table 1).

Compared to PPR+cos, CoSimRank is roughly four times faster on synonym extraction and has comparable performance on lexicon extraction. We compute 20 iterations of PPR+cos to reach convergence and then calculate a single cosine similarity. For CoSimRank, we need only com-pute five iterations to reach convergence, but we have to compute a vector similarity in each itera-tion. The counteracting effects of fewer iterations and more vector similarity computations can give either CoSimRank or PPR+cos an advantage, as is the case for synonym extraction and lexicon ex-traction, respectively.

CoSimRank should generally be three times faster than typed CoSimRank since the typed ver-sion has to repeat the computation for each of the three types. This effect is only visible on the larger test set (lexicon extraction) because the gen-eral computation overhead is about the same on a smaller test set. 6.5 Comparison with WINTIAN Here we address inducing a bilingual lexicon from a seed set based on grammatical relations found by a parser. An alternative approach is to in-duce a bilingual lexicon from Wikipedia X  X  inter-wiki links (Rapp et al., 2012). These two ap-proaches have different strengths and weaknesses; e.g., the interwiki-link-based approach does not require a seed set, but it can only be applied to comparable corpora that consist of corresponding  X  although not necessarily  X  X arallel X   X  documents.
Despite these differences it is still interesting to compare the two algorithms. Rapp et al. (2012) kindly provided their test set to us. It contains 1000 English words and a single correct German translation for each. We evaluate on a subset we call TS774 that consists of the 774 test word pairs that are in the intersection of words covered by the Wintian 43.8 % 55.4%  X  CoSimRank 43.0% 73.6 % Table 6: Results for bilingual lexicon extraction (TS774 DE  X  EN). Best result in each column in bold.
 WINTIAN Wikipedia data (Rapp et al., 2012) and words covered by our data. Most of the 226 miss-ing word pairs are adverbs, prepositions and plural forms that are not covered by our graphs due to the construction algorithm we use: lemmatization, re-striction to adjectives, nouns and verbs etc.
Table 6 shows that CoSimRank is slightly, but not significantly worse than WINTIAN on P@1 (43.0 vs 43.8), but significantly better on P@10 Rank is a more effective algorithm than WIN-TIAN; but the different initializations (seed set vs interwiki links) or the different linguistic represen-tations (grammatical relations vs bag-of-words) could also be responsible. 6.6 Error Analysis The results on TS774 can be considered conserva-tive since only one translation is accepted as being correct. In reality other translations might also be acceptable (e.g., both street and road for Stra X e ). In contrast, TS1000 accepts more than one cor-rect translation. Additionally, TS774 was created by translating English words into German (using Google translate). We are now testing the reverse direction. So we are doomed to fail if the original English word is a less common translation of an ambiguous German word. For example, the En-glish word gulf was translated by Google to Golf , but the most common sense of Golf is the sport. Hence our algorithm will incorrectly translate it back to golf .

As we can see in Table 7, we also face the prob-lems discussed by Laws et al. (2010): the algo-rithm sometimes picks cohyponyms (which can still be seen as reasonable) and antonyms (which are clear errors).

Contrary to our intuition, the edge-typed vari-ant of CoSimRank did not perform significantly better than the non-edge-typed version. Looking keyword gold standard CoSimRank arm poor impoverished erreichen reach achieve gehen go walk direkt directly direct weit far further breit wide narrow reduzieren reduce increase Stunde hour second Westen west southwest Junge boy child Table 7: Examples for CoSimRank translation er-rors on TS774. We counted translations as incor-rect if they were not listed in the gold standard even if they were correct translations according to www.dict.cc (in bold). at Table 1, we see that there is only one edge type connecting adjectives. The same is true for verbs. The random surfer only has a real choice between different edge types when she is on a noun node. Combined with the fact that only the last edge type is important this has absolutely no effect for a ran-dom surfer meeting at adjectives or verbs.

Two possible solutions would be (i) to use more fine-grained edge types, (ii) to apply Eq. 12, in which the edge type of each step is important. However, this will increase the memory needed for calculation. We have presented CoSimRank , a new similar-ity measure that can be computed for a single node pair without relying on the similarities in the whole graph. We gave two different formaliza-tions of CoSimRank: (i) a derivation from Person-alized PageRank and (ii) a matrix representation that can take advantage of fast matrix multipli-cation algorithms. We also presented extensions of CoSimRank for a number of applications, thus demonstrating the flexibility of CoSimRank as a similarity measure.
 We showed that CoSimRank is superior to SimRank in time and space complexity; and we demonstrated that CoSimRank performs bet-ter than PPR+cos on two similarity computation tasks.

Acknowledgments. This work was supported by DFG (SCHU 2246/2-2).
