 1. Introduction responsible for establishing a data-access policy in order to maintain con
In this paper, we present a formal access-control framework that enables organizations to de records (EHRs).

The US Health Insurance Portability and Accountability Act (HIPAA) [1] , which established the protecting the privacy of health information, de fi nes con or disclosed to unauthorized persons or processes  X  . Following this de authorization to access particular data resources. One of the signi cannot be considered a solution, as access may not always be appropriate and may violate the con scenarios. Rather, it offers a new model whose expressive power is derived from a speci (including dimensions of context) and relationships. Speci
Patient, Data-Requestor, Task, Legal-Authorization, EHR, and Response); their Re required to share data.
 contextual Situations, consisting of abstractions for entities, re knowledge model ,or ontology . An ontology speci fi es commonly agreed, content-speci an ontology was natural.
 (represented via Situation classes); and (2) OWL has a built-in classi
Situation class) as a member of a data-access rule class, from which the appropriate is equal to the data requestor's department).
 explicitly stated. To this end, the incoming data-access requests have to be con which is a powerful tool for real-time evaluation of incoming data-access requests. design principles and methods. The evaluation and results of our research appear in Section 4 . We discuss the and conclude in Section 6 . 2. Background and related works languages and reasoning tools we used in creating the knowledge framework, and brie the SitBAC model. 2.1. Ontology languages and reasoning tools used in this research individuals (representing the incoming data-access requests). 2.1.1. Web Ontology Language (OWL) all the statements and de fi nitions in the ontology are mutually consistent, and can also recognize which concepts de specify facts that must be satis fi ed by an individual for it to be a member of the class. DL, which is based on Description Logics (DL) [11] .

DL is a family of logic-based knowledge representation formalisms. DL is a decidable therefore amenable to automated reasoning. DL Basics includes:  X 
Concepts  X  unary predicates/formulae with one free variable (e.g., Person, Doctor, and HappyParent);  X 
Roles  X  binary predicates/formulae with two free variables (e.g., hasChild and loves );  X 
Individuals  X  constants (e.g., John, Mary, Italy ); and  X  Operators  X  for forming restricted concepts and roles.

The smallest propositionally closed DL consists of:  X 
Concepts constructed using Booleans:  X  ,  X  , I (i.e., intersection, union, and compliment) and restricted quanti
Values-From, Some-Values-From)  X  Only atomic roles 2.1.2. Description Logics (DL) reasoner set of Description-Logics inference services , such as: 1. Consistency checking : ensuring that a knowledge model does not contain any contradictory facts. 2. Classi fi cation : computing the classes' subclass relations to create a complete class hierarchy. 3. Realization: fi nding the most speci fi c classes that an individual is a member of.
In our work we used the Pellet reasoner [14] , which is integrated into Prot X g X . 2.1.3. Closed-world reasoning we cannot assume something does not exist until it is explicitly stated. For example, assume we know that in directory  X  Files  X  . From this information we cannot infer that these three
However, the goal of the SitBAC inference method is to provide a knowledge framework, creating complete knowledge is achieved by various methods, including Section 3.6 for more details about closing individuals in OWL).
  X  based classi fi cation using existing monotonic OWL reasoners. 2.1.4. Semantic Web Rule Language (SWRL) read as: if all the atoms in the antecedent are true, then the consequent must also be true. The following is a SWRL rule expressing the inference that a person with a male sibling has a brother. time and thus an alert individual should be produced [20] . 2.2. Related works Section.
 2.2.1. Access-control models
Role-Based Access Control (RBAC) model, proposed by Sandhu et al. in 1996 [2,3] . This model is based on the role is associated with a number of privileges (e.g., read, write, append, delete, create, etc.).
Since Sandhu proclaimed his model, the issue of access control has been discussed in a wide range of warehouse with different levels of sensitivity. Although there exist mechanisms to de 2.2.2. Context-based access-control models According to Baldauf and Dustdar [22] , these contexts are classical characteristics of context-aware systems. data-access rule is de fi ned by the 5-tuple b Role, Privilege-Type, Operation, Object, Authorization-Type tuple b Secretary, +, View, Identi fi cation-Section, strong context variables connected via logical operators. The logical expression  X  model and re fi ned its representation ability. However, modelers experienced dif expressions for modeling complex data-access rules [24] .
 they terminate as logic programs with NP complete run time. Con ensuring the consistency and completeness of policies.
 access healthcare data. 2.2.3. Representation formats for context-based access control models
We start with XML-based works and continue with DL-based works.
Markup Language (XACML) [27] , developed by OASIS (a non-pro addresseshowaccesscontrolcanbeenforcedbyprovidingsyntaxformanagingauthorizationdecisions.TheXACMLsyntaxenables,to using the b SubjectAttributeDesignator N and b ResourceAttributeDesignator b de Decision Point (PDP). PEP governs access control by making decision requests and enforcing authorization decisions. of their contributions relates to the healthcare-speci fi using declarative predicate-based syntax, that specify temporal and nontemporal contextual constraints. de fi database. The policy reasoner reasons over a set of prede infers whether the current query is compliant with the de compliant, it is forwarded to the database for execution; otherwise the policy result and justi RDF.
 what motivated Agarwal and Sprick [32] to use DL for representing their Certi to web services. According to the authors, their work addresses the need for machine-understandable speci policies. As they use DL for policy representation, any DL reasoner can be used for maintenance of CA. (c) requester is granted limited access.
 and actions. On top of this basic ontology, an additional domain-speci aspects of the RBAC model, such as static separation of duty and dynamic separation of duty constraints, they de separation of duty and prerequisite constraints outside the OWL ontology.
Another important work is KAoS [36] . KAoS services and tools allow for the speci relation to various aspects of some situation. Changes or additions to policies may result in con the KAoS developers implemented an algorithm for policy con entity in which this entity operates  X  , similarly to the SitBAC knowledge framework. Policies de attribute values.
 time an incoming data-access request (the individual) as a member of one of the SitClasses. based, 2) speci fi cation language, 3) support contexts and extensions, 4) tools for policy speci collection of health data access scenarios for stakeholders. 2.3. The conceptual Situation-Based Access Control (SitBAC) model consisting of six Entities along with their Re fi neables and Relations, as shown in Fig. 1 .
The Entities include: 1. Data-Requestor  X  the (human) entity requesting access to the patient's data. 2. Patient  X  the (human) entity who is the subject of the requested data. 3. EHR  X  the section of the Electronic Health Record where the patient's data is maintained. in order to approve payment. We discuss the legal-authorization entity in the next paragraph). 6. Response  X  the data-access decision made with respect to the situation in question: approved or denied. entity is needed for such scenarios, many of which were identi represents all of the required factors of the application.
 Re fi neables and Relations are de fi ned as follows:
Re fi neables: The conceptual SitBAC model explicitly de fi nes the set of properties instance, the patient entity has the re fi neable age , and the data-requestor entity has the re organized hierarchically. A re fi neable may be assigned a value. For instance, the re value 1/1/1989 .

Relations: A SitBAC relation can exist either between two entities or between two re of-patient ) . The two types of SitBAC relations are discussed below. 1.
 case the relation type is record-of; and b) the data requestor doctor-of-patient , gynecologist-of-patient , etc. 2.

Re fi neable-to-Re fi neable Relation (R2R)  X  relationships between two re re fi neable can be related via an equal-to relation type to a data-requestor's workplace re
Re fi neable-to-Re fi neable relations (e.g., Organization representation of the competing model. In that model, contextual relationships are speci hierarchies. The two models were compared in terms of (1) speci created. The results showed that understanding and synthesis of data-access scenarios was signi
SitBAC model for complex data-access scenarios. 3. Design principles and methods process for the SitBAC ontology and inference method ( Section 3.1 ). In the next principles by which we constructed the knowledge model, including the creation of OWL-based basic ontology-classes new mandatory knowledge regarding the individuals ( Section 3.5 ), and the process of formulated to be minimal, complete, and non-con fl icting. We end this Section by brie request decision ( Section 3.8 ). 3.1. Development process for the SitBAC ontology and inference method
One of our design concerns is the nature of the inference method. Our incoming request. However, such an approach is problematic because of the dif be declared similar to an existing Situation. For example, suppose that we de the inpatient's data while he is at home. The question is: is the incoming request similar to the de regarding an incoming data-access request turns out to be a Classi data-access request as an individual of a Situation class, and outputs an
The design principles by which we developed the SitBAC knowledge framework can be summarized as follows: the SitBAC ontology, we de fi ned basic classes to represent the SitBAC model abstractions [4] : Entities, Re
These basic classes are described in detail in Section 3.2 . details.
SitFly has no value for its response element. More details about SitFlies appear in Section 3.4 .
More details about SWRL rules appear in Section 3.5 . ontology. 6. We end this Section by describing the composition of the inference method in Section 3.8 . 3.2. Formalizing the conceptual SitBAC abstractions as OWL-based concept classes used the following design principles. 1. We de fi ned the three basic SitBAC abstractions (i.e., Entity, Re since all SitBAC abstractions were de fi ned in [4] as types of these basic abstractions. The respective de
Entity , Re fi neable , and Relation . 2. We de fi ned the six SitBAC entities as subclasses of the super-class and Legal_Authorization . 3. We de fi ned the re fi neables as subclasses of the Re properties. OWL supports two types of properties: object property and data-type property . Consequently, some re associated with their respective entities via object properties (e.g., properties (e.g., hasDateOfIssue ) . The following are examples of de entities: a. For Data_Requestor class: hasRole , hasWorkplace , hasShiftType b. For Patient class: hasAge , hasStatus , hasInsurance , and c. For Task class: hasEHRSection and hasAction . d. For Legal_Authorization class: hasLegalAuthorizationType e. For EHR class: hasOwnership . (a) Some allowed values are subclasses of their respective re re fi neable. For example, the various options of patient status (e.g., PatientStatus and outPatientStatus ) are de fi ned as individuals of the is de fi ned as a subclass if it can inherit re fi neables or relationships from another allowed value (e.g., Secretary is-a Medical_Secretary , and so can inherit access privileges of the it as an enumeration. 6. Following the SitBAC conceptual model de fi ned in [4] , the various SitBAC relations are de subclasses of the Relation super-class. The SitBAC relations are grouped into two main subclasses: a)
Relation (E2E_Relation for short) and b) Re fi neable_2_Re are subclasses of E2E_Relation: i) DataRequestor_2_Patient_Relation following as subclasses of R2R_Relation: i) EHR_Relation , ii) iv) Time_Relation . More speci fi c SitBAC relations are de R2Rl.DR.Location.IsEqualTo.Patient.Location is an individual of the that the data requestor's location is equal to the patient's location. 3.3. Formalizing data-access scenarios into situation classes forming a hierarchy
SitBAC model, and primarily from its reasoning requirements. the following object properties: hasDataRequestor , hasE2ERelation hasR2RRelation , hasTask , and hasResponse . class includes a necessary and suf fi cient condition  X  hasTask min 1, to include at least one task. subclasses of the class  X  AbstractSituation_RoleInShift  X 
The classes that de fi ne common property values without de the pre fi x Abstract . Fig. 2 exhibits (B) the AbstractSituation_RoleInShift  X  hasDataRequestor some ((hasRole some Role) and (isInShift has Yes)).
 de fi ned, which impose further restrictions on other properties. which implications are derived. In our case the implications are always the
An example of a set of typical conditions appears in Table 2 , which refers to a SitClass named the right side of the rule (see part 2 of Table 2 ), is  X  3.4. Formalizing incoming data-access requests into SitClass individuals request. The incoming request is represented via an individual ( this individual Situation-on-the-Fly, or SitFly for short.

The structuring of a SitFly goes through three steps: situationclass(e.g.,thecreationofan Organization_Relation found in Section 3.5 . Section 3.6 .
 new data-access request that has to be realized to the most speci 3.5. Adding R2R_Relation individuals to a SitFly using SWRL rules department where the patient is hospitalized, the SWRL engine will infer an to the SitFly. 3.6. Closing the SitFlies (individuals) for closed-world reasoning is realized as a member of the SingleSitClass , or (b) the SitFly cannot be realized as a member of the has to be realized as a member of the complimentary class.

Suppose the SitFly is identical to SingleSitClass except for one element
Medical_Secretary, while the SitFly includes Senior_Researcher do not have a superclass  X  subclass relation, the reasoner cannot realize the SitFly as a member of the the reasoner cannot infer the opposite fact, namely that the SitFly is not a member of world assumption, the reasoner may assume that the SitFly is incomplete, and that in the future it may include the Medical_Secretary value.
 individual (i.e., the SitFly) by adding the restriction hasRole exactly 1 de fi nitely infer that the SitFly cannot be realized as a member of the class, since this class is de fi ned as the negated class of
The task of closing an individual involves adding the  X  exactly hasPatient exactly 1 and hasR2Relation exactly 2 .
 necessary implication about the response. 3.7. Formulating a minimal, complete, and non-con fl icting SitBAC knowledge base model ontology such that there is always a single answer for any given SitFly. By saying complete , and by saying  X  single answer  X  we mean that it is non-con
Situation islands  X  , as presented in Fig. 5 . The islands are permission granted (approved). The sea represents all the complementary ( response is to deny access.
 complete, and non-con fl icting SitBAC ontology. 3.7.1. Formal de fi nitions Consider two SitClasses Sci and Scj, and a Situation individual Sfk.
 We denote Sci Scj, if Sci can be classi fi ed under Scj.
 We denote Sfk Sci, if Sfk is an inferred individual of Sci (realized as Sci).
De fi nition 1. Complete SitBAC ontology
Consider a SitBAC ontology, a SitClass Sci, and a Situation individual Sfk. The SitBAC ontology is Complete if  X  SitBAC ontology and Sfk Sci.

De fi nition 2. Minimal SitBAC ontology
Consider a SitBAC ontology and an ordered pair of SitClasses (Sci, Scj). The SitBAC ontology is Minimal if following conditions hold:  X 
Sci, Scj  X  SitBAC ontology, and Sci is different from Scj; and  X  Sci not Scj.

De fi nition 3. A con fl icting SitBAC ontology
Consider a SitBAC ontology and two SitClasses Sci, Scj, and a Situation individual Sfk. A SitBAC ontology is con following conditions hold:  X 
Sci, Scj  X  SitBAC ontology, and Sci is different from Scj; and  X 
Sci is assigned an approved response, while Scj is assigned a denied response; and  X 
Sfk Sci and Sfk Scj. 3.7.2. A methodology for creating a minimal, complete, and non-con positive SitClasses, then it has to be realized as a member of the complementary class ( class is associated with a denied-value response.
 emergency room, the SitFly will be realized as a member of both SitClasses. However, no con associated with an approved-value response. Our method makes sure that only one non-con the realization may be to more than one SitClass.
 Ref. [40] provides a list of the guidelines that we formulated for achieving a complete SitBAC ontology. 3.7.2.2. Non-con fl icting requirement. According to the con to facilitate maintenance. To this end, we use one of the DL reasoner services. The reasoner can infer subclass does not hold a response value, and exists only for the clari 3.8. Computing the decision result maintained within the SitBAC ontology, which is minimal, complete, and non-con method for evaluating SitFlies, and for providing an  X  approved/denied chains are supported by OWL 2.0, we used SWRL operators (e.g., GreaterThan) that are not supported by OWL 2.0. to the department where the patient is hospitalized, the SWRL engine will infer an
Pellet is the SitClass that the SitFly is realized as a member of. The is the response value, inferred from the realized SitClass. 4. Evaluation and results predicting the scalability of our framework for large organizations. 4.1. Evaluating the SitBAC knowledge framework and its ability to support reasoning tasks care unit.
 classes, 120 cardinality classes, 1 minCardinality class, and 57 hasValue classes. a meaningful name that implies its content. For example: SitFly01-ExpertPhysician.DocumentEncounter.InShift. documenting an encounter with a patient who is considered an outpatient.
We de fi ned various SitFlies to check and evaluate various issues: 1. The hierarchical role structure, which represents role policy inheritance. For example, we have a SitClass named status. In such a case the data requestor is allowed to view the patient's medical information. The SitFly:
ViewPrescriptionl.NotInShift.EmergencyStatus was realized as a member of the above SitClass. The SitFly indicates emergency status.
 The reasoner realized this SitFly as a member of the above SitClass because the reasoner's decision.
OrdinaryHCA.ViewDemographic.InShift.InPatient indicates a data-access request by a data requestor assigned the named  X  SitClass.HCA.InPatient  X  (see Table 2 .) response-value; thus, they could not be realized as members of these SitClasses. the knowledge we have about their property values is all the knowledge that exists. created a corresponding SitFly to check its realization against the SitClass. 4.2. Run-time tests that we created based on more than 100 data-access scenarios identi Situation classes, while large organizations may need up to a few hundred. All the tests were performed on a 2.2 GHz Notebook with 2 GB memory, using Prot X g X  version 3.4 beta. execution time is an average of three sequential executions with the same knowledge base and SitFly. (in our view, the expected size of a typical Situation knowledge base for healthcare organizations). 5. Discussion access scenarios and to use SWRL and a DL reasoner for realizing incoming data-access requests and providing an which is a robust model that was developed after long and intensive qualitative research. Our implementation speci community of bioinformatics researchers uses ontologies to de infrastructure.

In the rest of this Section we discuss the limitations of our approach and future work. 5.1. Limitations
The OWL-based SitBAC knowledge framework that we suggest provides con only in cases where an approved response cannot be calculated.

Another limitation concerns the complexity of the DL-reasoner. The DL-reasoner Pellet and the SWRL engine have high
We evaluated the theoretical complexity of reasoning only with the speci However, this remains to be shown in practice.

Other researchers have optimized the DL-reasoner for the features of their speci purpose reasoner, if better performance becomes a necessity when we implement our framework within a healthcare organization.
 based ontology that corresponded to the SitBAC conceptual model [24] . 5.2. Future work
Prior to developing the OWL-based SitBAC knowledge framework, a frame-based implementation of the conceptual SitBAC model has been developed. The frame-based implementation was selected mainly because of the ease of de with OWL may make it easier for users to comprehend and specify SitBAC policies when compared to using OWL alone. 6. Conclusion patient con fi dentiality concerns, it can be adapted to other domains that require customer con formulating them into a knowledge base that offers minimality, completeness, and non-con Appendix A. SitClass descriptions a qualitative study at Carmel Medical Center [9] . The formal OWL de bioontology.org/ontologies/42728
References
