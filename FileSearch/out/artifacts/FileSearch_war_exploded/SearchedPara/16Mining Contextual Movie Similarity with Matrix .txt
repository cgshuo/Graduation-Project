 YUE SHI, MARTHA LARSON, and ALAN HANJALIC , Delft University of Technology Recently, context-aware recommendation has experienced an upsurge of interest in the recommender systems community [Said et al. 2010]. The interest has been spurred by a growing awareness of the potential of contextual information, if available, to improve the quality of recommendations [Adomavicius et al. 2005; Burke 2002]. Such information can include, for instance, relationships among users in social media sites, tags of products, introduction about products or timestamps of user actions. One of the most promising potential contributions of contextual information is its ability to alleviate the problem of data sparseness in the original user-item matrix. Contextual information can be exploited to more reliably estimate relationships between items compensating for cases in which the information in the original user-item matrix is insufficient.

In addition to relying on information sources beyond the conventional user-item matrix, context-aware recommendation also differs from traditional recommendation in the sense that its purpose is more specific, for instance, movies are recommended specifically for the week of Christmas [Gantner et al. 2010; Liu et al. 2010], or for a specific mood that they should elicit in the user [Shi et al. 2010b]. Accordingly, the re-search challenge in the area of context-aware recommendation involves two aspects. It is expected that the new recommendation technique/model retains the benefits of con-ventional recommender approaches, such as collaborative filtering (CF) [Adomavicius and Tuzhilin 2005], which infers the recommendation from a user-item matrix, while also allowing contextual information to steer the recommendation process towards results suitable for a given use case (purpose).

In this article, we address the recommendation task formulated in the Moviepilot mood track of the context-aware movie recommendation (CAMRa) challenge [Said et al. 2010], henceforth referred to as the Moviepilot challenge, in which the task is to recom-mend movies to a user given a specific mood. For this purpose, not only the user-item matrix is provided, capturing general preferences of the users for different movies, but also the contextual information consisting of various movie metadata, such as mood tags, plot keywords, movie locations and intended audience.

In order to maximize the benefit of the given contextual information and optimally address the two aspects of context-aware recommendation defined above, we propose a novel recommendation model, based on a joint matrix factorization (JMF), that factor-izes the user-item (user-movie) matrix, while also exploiting the contextual information as additional regularization terms. Specifically, for generating context-based links be-tween movies, we propose a set of contextual movie similarities, each of which steers the recommendation process and contributes to JMF in a specific fashion. From the contextual information available within the setting of our task, we deploy mood tags and plot keywords (PK). The potential of plot keywords to improve mood-based rec-ommendation lies in the assumption that if mood-based movie similarity is difficult to infer reliably from the mood tags, then movies with similar moods might still be linked together if they have similar plots. Although we focus only on two types of con-textual information, the proposed JMF model could be easily expanded to integrate other contextual information.

The novel contribution of this article can be summarized as follows. We propose a novel context-aware movie recommendation algorithm that extends the basic matrix factorization (MF) model to take into account context-induced links between movies. Furthermore, we propose a set of contextual movie similarities that evaluate the relationships between movies in view of specific contextual information, that is, mood-specific movie similarity and PK-based movie similarity, and integrate these simi-larities in our recommendation model. Finally, we apply these in the setting of the Moviepilot challenge for evaluation, demonstrating that the proposed algorithm outper-forms a wide range of state-of-the-art approaches for context-aware recommendation.
The remainder of the article is structured as follows. In the next section, we present an overview of the Moviepilot challenge. Then, in Section 3, we summarize related work and position our approach with respect to it. The proposed contextual movie similari-ties and JMF model are described in detail in Section 4, after which, in Section 5, we present experimental evaluation on the Moviepilot challenge dataset. The last section sums up the key aspects of the proposed algorithm and briefly addresses the direction for future work. The task of the Moviepilot challenge can be defined as follows: Based on both the user-movie rating matrix and other provided contextual information, recommend a list of movies that have a specific mood property to each target/test user [Said et al. 2010]. In other words, the task is to design a model that takes the user-movie rating matrix, the contextual information and a specific mood as input, and outputs a list of movies with the specific mood for each target user. The recommendation list should contain as many relevant movies as possible, which are also ranked as high as possible. Note that within this challenge a movie is considered to be  X  X elevant X  to a user if it has been rated by that user and if it is characterized by the prespecified mood. In addition to user-movie ratings, the dataset provided for this challenge contains various types of contextual information, for instance, movie-emotion (mood) assignments, movie-PK assignments, and the release date of each movie. Note that all the data are provided in the form of identifiers and the real identities of the underlying entities are not made known to the public due to privacy considerations. For example, we do not have access to direct knowledge concerning the identity of the movie with identifier 10, or the mood with identifier 5. In this section we discuss the characteristics of this challenge that make it distinctive from the traditional CF problem.

First, the evaluation of the recommendation performance is not based on the rating prediction error rate, for instance, as done in the Netflix contest 1 , but on the recom-mendation list, the quality of which is assessed using metrics for the evaluation of ranked results lists, for instance, precision at N and mean average precision. As re-cently suggested in Liu et al. [2009] and Shi et al. [2010b], these evaluation criteria are more sensible, since the ultimate goal of a recommender system is to generate a list of recommended items for a user, rather than only provide the predictions of relevance scores for different items.

Second, the evaluation focuses on the recommended movies characterized by the prespecified mood, which requires a different approach to designing recommendation mechanisms, compared to the traditional, mainly CF-based practice. In view of such a focus, one could namely first apply a known recommendation approach based on an analysis of the user-item matrix to generate the initial recommendation and then re-move those movies not having the desired mood. This approach is, however, likely lead to a recommendation performance being far short of what is targeted, as is demon-strated later during our experiments. A priori, a basis for this expectation could also be drawn from the distribution of ratings in the dataset, shown in Figure 1. The distribution reveals that many movies in the provided validation set (i.e., a set pro-vided for tuning the parameters) have low ratings. Note that low-rated movies are significant in the Moviepilot challenge, since if the number of movies of the target mood is limited, these movies come into consideration as the most appropriate ones to recommend to the user. As a consequence of this discrepancy between the rating predic-tions generated by the user-item matrix and the contextual information, the number of movies resulting from an initial traditional recommendation step and having the proper mood characteristics may be too small. Instead, one should conceptualize the recommendation process as not only involving the movies that the user would generally be interested in, but also simultaneously emphasizing the movies with the specified mood. In other words, context awareness of the recommendation is not likely to emerge from a simple filtering step of the initial recommended item list, but rather through letting the contextual information actively steer the recommendation process.
Finally, other alternatives for approaching collaborative recommendation, such as the ranking-oriented approaches [Liu et al. 2009; Rendle et al. 2009a; Shi et al. 2010a], are also expected not to perform well within this challenge, since both a pair-wise rank-ing approach and a list-wise ranking approach require training examples annotated with explicit or implicit item ratings. However, the value of ratings would not influence the evaluation according to the challenge setting. This section briefly summarizes the existing related research in CF, context-aware rec-ommendation and tag-aware recommendation, in order to position the recommendation approach we propose in this article. CF approaches are usually categorized as memory-based or model-based [Adomavi-cius and Tuzhilin 2005; Breese et al. 1998; Herlocker et al. 2004]. Memory-based approaches can be further categorized as user-based or item-based, depending on whether the recommendation for a user is aggregated from users with similar preference, for instance, the work of [Herlocker et al. 1999; Shi et al. 2009; Zhang and Pu 2007], or from items that are similar to those he already liked, for instance, the work of [Deshpande and Karypis 2004; Linden et al. 2003; Sarwar et al. 2001]. The key drawback of memory-based CF approaches lies in the expensive computation for similarities among all users or items, which does not scale with the typically large numbers of users and items in real-world recommender systems. Compared to memory-based approaches, model-based approaches first employ statistical and machine learning techniques to learn a prediction model from a training set of user-item matrix data and then apply that model to generate recommendations, such as Gaussian mixture model [Kleinberg and Sandler 2008] and latent semantic model [Hofmann 2004]. Among different model-based approaches, matrix factorization (MF) techniques have attracted much research attention, due to the advantages of scalability and accuracy [Koren et al. 2009; Salakhutdinov and Mnih 2008], especially for large-scale data, as exemplified by the Netflix contest. Generally, MF techniques learn latent features of users and items from the observed ratings in the user-item rating matrix. These latent features are further used to predict unobserved ratings. Rather than targeting the rating prediction problem, recent research started to exploit possibilities for ranking-oriented CF approaches that focus on the quality of recommendation lists, for instance, EigenRank [Liu and Yang 2008], CoFiRank [Weimer et al. 2007], probabilistic latent preference analysis [Liu et al. 2009], Bayesian personalized ranking [Rendle et al. 2009a], and ListRank [Shi et al. 2010a].
The joint matrix factorization (JMF) is an extension of MF. The designation  X  X oint X  makes reference to the simultaneous factorization of more than one matrix. JMF is for-mulated similarly to relational learning, as defined by [Singh and Gordon 2008], which also factorizes multiple matrices from related domains. It has been widely applied e.g., for fusing document content and graph link information for document retrieval or web page classification [Deng et al. 2009; Zhu et al. 2007], or for fusing geographical loca-tion features and people activity correlation for location-based recommendation [Zhu et al. 2010]. In this article, we exploit JMF to fuse contextual movie similarities, that is, the mood-specific movie similarity and the plot-keyword-based movie similarity, with the user-movie rating matrix. The difference between our work and the aforementioned previous work on JMF is twofold. First, compared to the work of [Deng et al. 2009; Singh and Gordon 2008; Zhu et al. 2007], we exploit the available contextual information in the form of contextual movie similarities rather than original movie contextual infor-mation. By this means, we maintain the advantage of using contextual information for learning latent movie features, namely alleviating data sparseness in the user-movie rating matrix, while at the same time eliminating unnecessary learning for additional latent features representing other entities, for instance, movie mood and plot key-words. Second, above and beyond this body of existing work [Deng et al. 2009; Singh and Gordon 2008; Zhu et al. 2010; Zhu et al. 2007], we propose a new mood-specific movie similarity that explicitly addresses the recommendation bias of the Moviepilot challenge and propose a method to integrate this similarity into the JMF framework. We note that our work is consistent with the contemporary trend of new work in the area, falling into the category of approaches extending matrix factorization [Gantner et al. 2010; Liu et al. 2010]. Some of the earliest work on context-aware recommendation was done by Adomavicius et al. [2005], who deployed contextual information, for instance, time and place, to gen-erate additional dimensions in the user and item rating vectors. Anand and Mobasher [2007] exploited users X  preference information from both long-term memory and short-term memory in the recommendation process. Baltrunas and Ricci [2009] proposed to take into account the context, for instance, user age and gender, to split item ratings as a preprocessing step for CF approaches, in order to improve CF accuracy. Application of context-aware recommendation approaches in specific use cases has been explored in work exploiting contextual information for travel recommendation [Carolis et al. 2009], news recommendation [Cantador and Castells 2009], and music recommendation [Su et al. 2010]. Compared to this previous work, our proposed approach has the advantages of being adaptive to any application domain and being able to handle large-scale datasets.
 Specifically concerning the context-aware movie recommendation tasks in the Moviepilot challenge, in addition to the mood-specific recommendation task other tasks have been addressed as well, such as recommending movies for a specific week (such as a holiday week) and recommending movies by exploiting social relation-ships [Said et al. 2010]. For week-based movie recommendation, timestamps of users ratings have been made available as the contextual information. Approaching this task, [Gantner et al. 2010] extended a pair-wise interaction tensor factorization model [Rendle and Schmidt-Thieme 2010], which was originally designed for tag recommen-dation, to factorize the { user, time, movie } ternary data for movie recommendation in a given week. [Liu et al. 2010] investigated both tensor factorization and sequential matrix factorization to integrate time-dependent characteristics of users and items into the recommendation process. In addition to the work presented in the Moviepilot chal-lenge, [Koren 2009] has proposed to include temporal dynamics into neighbor-based CF and matrix factorization for improved performance in the Netflix contest.
On the other hand, regarding the task targeting the integration of social relationships into recommendation, Liu et al. [2010] investigated both collective matrix factorization (equivalent to the work of Ma et al. [2008]) and network-regularized matrix factor-ization (equivalent to the work of Ma et al. [2009]) for this purpose. However, they found that including social relationships into MF leads to only a small improvement compared to basic matrix factorization. We also point out that our work on context-aware recommendation is related to tag-aware recommendation. [Tso-Sutter et al. 2008] proposed a fusion method to incorporate tags into traditional user-based CF and item-based CF for item rating prediction. Wetzker et al. [2009] proposed exploiting probabilistic latent semantic analysis [Hofmann 2004] to unify user-item relations and item-tag relations into one model, resulting in improved item recommendation performance. A similar principle was presented by Wang et al. [2006], but from a more fundamental perspective.
More recently, another group of state-of-the-art approaches has emerged that makes use of tensor factorization techniques, for instance, the work of Kolda and Sun [2008]. Under such approaches, latent features are learned from the { user, tag, item } triplet/ternary data directly for item recommendation [Karatzoglou et al. 2010], tag recommendation [Rendle et al. 2009b; Rendle and Schmidt-Thieme 2010; Symeonidis et al. 2008], or both [Symeonidis et al. 2010]. However, tensor factorization is known to be computationally expensive, that is, usually being cubic in the number of latent dimensions. In addition, in the Moviepilot challenge, where the mood tags and plot keywords of movies are not associated with users, there is no ternary data actually available for either exploiting or comparing with tensor factorization techniques.
Another way of benefiting from the relations among users, tags and items for the purpose of recommendation is to deploy a graph-based approach. For instance, Konstas et al. [2009] proposed a recommendation framework that infers the item preferences of the users from a hyper-graph including different types of nodes and links, which captures user-user, tag-user, tag-item and user-item relations. Preferences are inferred using a random-walk-with-restarts method. While the method was proved effective conceptually, it requires the availability of rich contextual information in order to result in significant recommendation benefits in a practical use case. Graph-based approaches are not suitable for our task, which mixes binary information (mood-movie relation) with scale information (user ratings). In Konstas et al. [2009], the links in the hyper-graph are assumed to be binary, which represents a radical simplification of the relationships between the nodes. For integrating user-item ratings and other contextual information into a hyper-graph, it would also be necessary not only to impose this simplification, but also to impose it in a way that retains the balance between the mix of different information types without information loss, which could be introduced during the simplification step. For this reason, graph-based approaches are not an obvious choice for application in our work. In this section, we introduce our proposed algorithm for the context-aware movie recom-mendation task of the Moviepilot challenge. The flow chart of the proposed algorithm is given in Figure 2. While the use case and rationale behind our general approach have been discussed in Section 1, we focus in this section on the analysis of three key components of the algorithm, namely the mood-specific movie similarity and the simi-larity based on plot keywords, and the joint matrix factorization model. Then, we also perform a complexity analysis of the proposed algorithm. According to the traditional item-based CF, item-to-item similarity can be computed as the cosine similarity between two item rating vectors [Deshpande and Karypis 2004]. Similarly, given the movie-mood (binary) matrix M (consisting of N movies and K 1 mood tags), we can compute mood-based similarity between movie j and movie n as: Here, M jk = 1 indicates that the movie j has the mood tag k , otherwise M jk = 0. The mood-based similarity in Equation (1), however, only indicates general closeness of two movies in terms of all their mood properties. For example as shown in Figure 3, two movies ( A and B ) sharing different mood properties could be equally similar to another movie ( D ). If the required mood of a movie is specified, this similarity fails to differentiate between movies A and B .

In view of the above, we expect that an accurate approach would involve adjusting the movie-to-movie similarity in a way to make it more biased towards a particular mood in case movies with that mood need to be recommended. We therefore propose a novel mood-specific similarity measure to address this issue. Although we focus on the Moviepilot challenge that targets mood-specific movie recommendation, the concept of mood-specific similarity can easily be generalized for recommendation with different contextual constraints.

Instead of evaluating the consistency of mood tags between two movies, as in Equa-tion (1), we can also compute the normalized cooccurrence of the mood i and mood k in the movie collection as: Once the mood cooccurrence matrix S ( Mood ) is obtained, we can generate a mood-specific movie-mood matrix that is biased towards a given mood m , as expressed in Equation (3): While preserving the original movie-mood matrix values in the column corresponding to the mood m , the values in the matrix as in Equation (3) for any other mood k are replaced by the values of the similarities in Equation (2), implicitly indicating to which extent mood k is informative about mood m . Note that the mood-specific movie-mood matrix M ( m  X  spec ) is not binary. Then, we define the mood-specific movie similarity biased towards a given mood m as: In order to illustrate the effect of this similarity, we again focus on the example in Figure 3 and assume that there is specific demand for movies corresponding to the mood  X  X nxious. X  In the search for all movies satisfying this recommendation criterion, we can derive the mood-specific movie similarity for the mood  X  X nxious. X  In contrast with the case where general mood-based similarity in Equation (1) is computed, the mood-specific movie similarity now indicates movie D to be more similar to movie A than to movie B. This is because movie A has mood tags ( X  X ad X  and  X  X pset X ) that are more informative about  X  X nxious X  than the mood tags of the movie B . In this way, the movie-specific movie similarity steers the movie comparison towards the target mood and helps the context-aware recommendation. Similar to the mood-based movie similarity, we also define the similarity between movies in terms of movie plot keywords (PKs). Since PKs represent the movie content, this similarity can improve the mood-based links between movies. Since both PKs and moods potentially reflect the underlying movie content, it is reasonable to expect that movies having similar plots could evoke similar emotions in users. We first create a binary movie-PK matrix P consisting of N movies and K 2 PKs, where P jk = 1ifthe movie j has the PK k ,and P jk = 0 otherwise. Then, the PK-based similarity between movie j and movie n can be defined as: The basic MF [Koren et al. 2009] can be formulated as in Equation (6): Given the user-item rating matrix R consisting of K users and N items, the MF represents the user-item rating matrix R by two low-rank matrices, U and V .A d -dimensional set of latent features is deployed to represent both users (in U )anditems (in V ). Note that we use U u to denote a column d -dimensional feature vector of user u , V j is a column d -dimensional feature vector of movie j ,and R uj denotes the user u  X  X  rat-ing on movie j . I R uj denotes an indicator function that is equal to 1 when R uj &gt; 0, and 0 otherwise. U F and V F are the Frobenius norms of U and V , that contribute to alle-viating overfitting.  X  U ,  X  V are regularization parameters for which we set  X  U =  X  V =  X  to simplify the model in this article.

In view of the discussion in the previous section, we now require that the movies being similar to each other with respect to the mood-specific similarity criterion in Equation (4) share similar latent movie features. For this purpose, we formulate a context-aware loss function L 1 ( V ) as shown in Equation (7).
 otherwise.

Furthermore, we also assume that the movies similar to each other with respect to the PK-based similarity as in Equation (5) should also share similar latent movie features, implying that the similarity of the plots is informative for mood-specific movie recommendation. Therefore, we formulate another context-aware loss function L 2 ( V ) as shown in Equation (8).
 otherwise.

Taking into account the context-aware loss functions as regularization terms in the basic MF model, a joint matrix factorization (JMF) model can be formulated as: In this model,  X  and  X  are the trade-off parameters for weighting the contributions of regularization by the mood-specific movie similarity and by the PK-based movie similarity, respectively. Note that when both  X  = 0and  X  = 0, the JMF model converges to the basic MF model. For notation convenience, we use JMF-MS-PK to indicate the case that both  X &gt; 0and  X &gt; 0 and JMF-MS to indicate the model with  X &gt; 0and  X  = 0. Furthermore, we use JMF-MB to indicate the model with  X &gt; 0and  X  = 0 that exploits general mood-based movie similarity instead of the mood-specific movie similarity. A more elaborate investigation of the variations of the proposed JMF model is given in Section 5.

In summary, the advantage of the JMF model is two-fold: First, the additional contex-tual information, that is, mood-specific movie similarity and PK-based movie similarity, alleviate the usual deficiencies of the rating matrix R , that is, data sparseness, since latent features of movies could be learned from contextual movie similarity matrices as well as from the rating matrix. Second, the mood-specific movie similarity could contribute to biasing recommendations towards movies with the specific mood.
Minimization of the objective function in Equation (9) can be solved by gradient descend with alternatively fixed U and V . This process results in a local minimum solution. The gradients of L ( U , V ) with respect to U and V can be computed as: Note that in Equation (11) we exploit the symmetry of S ( m  X  spec ) and S ( Mov  X  PK ) . The JMF-MS-PK algorithm is described in detail in Algorithm 1. The complexity of computing the contextual movie similarity matrices is normally quadratic to the number of movies, thta is, O ( N 2 ). In the case that a new movie appears, the complexity of updating each contextual movie similarity matrix is linear in the number of current movies, that is, O ( N ). However, this computation could be carried out completely offline, since it is independent of learning latent features in JMF. By exploiting the data sparseness, the computation of the objective function in Equation (9) the number of observed ratings in a given user-movie rating matrix, | S ( m  X  spec ) | the number of non-zero similarities in the mood-specific similarity matrix, and | S ( Mov  X  PK ) | the number of non-zero similarities in the PK-based similarity matrix. The complexity d | that is, the number of observed ratings is much larger than both the number of users and the number of movies in a collection, the total complexity in one iteration is O ( d | R |+ d | recommender systems, for instance, the Netflix dataset involves around 480K users and around 18K movies (www.netflixprize.com), and the MovieLens dataset involves around 72K users and around 11K movies (www.grouplens.org/node/73). Therefore, the number of contextual links between movies could be much lower than user-movie links algorithm could approximate to O ( d | R | ), which is linear with the number of observed ratings in the user-movie matrix. This analysis indicates that the proposed algorithm is computationally efficient and can be applied to large-scale cases. In this section, we present the experiments we conducted to evaluate the proposed algorithm. The research questions that need to be answered through the experiments can be formulated as follows. (1) Does minimizing the objective function in Equation (9) contribute to improving (2) Can the proposed algorithm JMF-MS-PK outperform other state-of-the-art (3) How does the mood-specific movie similarity contribute to the performance of (4) What is the contribution of integrating the PK-based movie similarity in addition 5.1.1. Dataset. Our experiments are conducted on the dataset of the  X  X oviepilot mood track, X  which consists of around 4.5M ratings (scale 0-100) assigned by around 105K users to a collection of around 25K movies. The data sparseness of the user-movie rating matrix is around 99.83%. Apart from the user-movie rating matrix, various contextual information is provided, for instance, gender and age of users, production year of movies, intended audience of movies, etc. The detail of statistics of the dataset is presented at Said et al. [2010]. As mentioned in the introduction, we only exploit the mood tags of movies and the plot keywords of movies in this work. The movie-mood tag (binary) matrix consists of around 25K movies and 16 mood tags, which in total involves 6712 mood tag assignments on movies. The movie-PK (binary) matrix consists of around 25K movies and 5683 PKs, which in total involves 92124 PK assignments to movies. 5.1.2. Evaluation Metrics. We use the precision of top-N recommendation list (P@N) and the Mean Average Precision (MAP) as the evaluation metrics for measuring the quality of the recommendation list [Gunawardana and Shani 2009; Herlocker et al. 2004]. The P@N reflects the average ratio of the number of relevant movies over the top-N recommended movies for all test users. The definition of MAP is given as: where K ts is the number of users for testing, and N u denotes the number of recom-mended movies for the user u . rel u ( j ) is a binary indicator, which is equal to 1 if the movie of rank j is relevant to user u , and is equal to 0 otherwise. P u @ j is the precision of the top j recommended movies for the user u , that is, the ratio of movies in the top j recommendation that are relevant to the user u . Since it is required that relevant movies are recommended as early as possible, usually a small value of N is chosen for P@N. In our experiments, we evaluated in the cases of N = 1, 5, 10. In addition, MAP reflects the quality of the entire recommendation list by considering the posi-tions of all the relevant movies. Higher values for P@N and MAP indicate a better recommendation performance. 5.1.3. Experimental Protocol. The Moviepilot challenge dataset contains three prede-fined subsets: a training set, a validation set and a test set. The training set involves all users and all movies. The training set is used to generate recommendations. The validation and test sets involve a small number of users, that is, 160 and 80 users, respectively, whose ratings are disjoint with their ratings in the training set. The val-idation set is used to tune the parameters in the proposed algorithm. The parameters in the baseline approaches, as discussed in Section 5.4, are also tuned to the validation set. Performance is reported based on recommendations for all the users in the test set, as demonstrated in Section 5.4. Moreover, according to the requirement in the Moviepilot challenge (cf. Section 2), the evaluation only concerns the movies with a specific mood tag (i.e., the mood with identifier 16) to be potentially relevant for the users. Recommended movies that are in the validation/test set, but do not have the specified mood tag, are counted as irrelevant for the target users, that is, they do not contribute to improvement in recommendation as reflected by the evaluation metrics.
Note that in the proposed JMF algorithm, we set the dimensionality of latent features to be 10. Although the variation of dimensionality of latent features could influence the performance, we notice that, just like in a common MF technique [Weimer et al. 2008], a further increase in the number of latent features would not introduce a large improvement, while requiring more computational cost (cf. section 4.4). The regular-ization parameter  X  is set to 1 based on the observation of the performance of the basic matrix factorization, which is also discussed in section 5.4. The stopping condition in the learning process is set to 0.0001 in our experiments. The trade-off parameters  X  and  X  in the proposed algorithm influence the relative contributions from the contextual movie similarities. By using the validation set, we investigate the impact of the trade-off parameters by varying their values and mea-suring the recommendation performance in terms of P@5 and MAP. We first set  X  = 0 and investigate the impact of  X  , as shown in Figure 4. It can be seen that for both P@5 and MAP, the optimal value of  X  lies around 0.1. It also indicates that by only in-troducing the mood-specific movie similarity, additional improvement can be achieved over the basic MF model, that is, the case when  X  = 0. Then, we further investigate the impact of  X  , and keep the value of  X  fixed as  X  = 0 . 1, as shown in Figure 5. It can also be seen that for both P@5 and MAP, the optimal value of  X  is nearly 0.1. This indicates that in addition to the mood-specific movie similarity, there is still potential to further improve the recommendation performance by incorporating the PK-based movie similarity. Moreover, we can observe that the additional improvement stemming from the PK-based movie similarity is only slight compared to the case when only the mood-specific movie similarity is used, that is,  X  = 0 in Figure 5. This implies that the mood-specific movie similarity makes the major contribution among the used contextual information.
 We further investigate the research question (1), namely to what extent the minimiza-tion of the objective function in Equation (9) contributes to the improvement of the recommendation. To this end, we demonstrate the variation of the output of the ob-jective function (normalized for demonstration purposes) and evaluation metrics, that is, P@5 and MAP on the validation set, simultaneously during the iterations of the optimization process, as shown in Figure 6. Note that in this experiment the trade-off parameters used are the optimal values from the previous section, that is,  X  = 0 . 1and  X  = 0 . 1. The results show that the recommendation performance generally increases monotonically with the minimization of the objective function, allowing us to give a positive answer to the first research question. In this section, we compare the performance of the proposed algorithm JMF-MS-PK with a set of alternative recommendation approaches listed below. The performance is reported based on the test set. The trade-off parameters are the optimal ones deter-mined using the validation set as stated in Section 5.2.  X  PopRec . Movies are recommended to users based on their popularity, which is defined in terms of the number of users who rated them in the training set. This approach constitutes a non-personalized and naive baseline since every test user will receive the same recommendation, that is, a list of movies ranked in a descending order according to the number of their ratings in the training set.  X  RWR . This algorithm is a state-of-the-art recommendation approach that uses ran-dom walk with restarts (RWR) [Konstas et al. 2009] on a graph encoding the relations between the users and items. Here, we set the restart probability to 0.8 based on the optimal performance achieved in the validation set.
  X  MF . This algorithm represents a basic state-of-the-art matrix factorization approach as in Koren et al. [2009], which is also equivalent to Equation (6). The dimensionality of the latent user and movie features is also set to 10. The regularization parameter  X  is set to 1, which is tuned to achieve the optimal performance on the validation set.
Note that the same corresponding parameters are used in the proposed algorithm as well.  X  JMF-MB . This algorithm is a joint matrix factorization approach that incorporates the general mood-based movie similarity rather than mood-specific movie similarity.
It also shares the same corresponding parameters as used in MF. In addition, we set the trade-off parameter to 0.01 to again give the best performance on the validation set. The JMF-MB is used to compare with the proposed algorithm especially for validating the usefulness of the mood-specific movie similarity.  X  JMF-MS . This algorithm is a joint matrix factorization approach that incorporates the mood-specific movie similarity as in Equation (9). Note that in both JMF-MB and JMF-MS we do not use the PK-based movie similarity, that is,  X  = 0.

The results of the comparative analysis are shown in Table I, from which we can see the relative improvement achieved by the proposed algorithm JMF-MS-PK in terms of P@1, P@5, P@10, and MAP.

First, we can see that the JMF-MB approach outperforms non-context-aware ap-proaches, that is, PopRec, RWR, and MF, by over 5% in terms of P@1, P@5 and P@10. This improvement is statistically significant (based on Wilcoxon signed rank signifi-cance test, p &lt; 0.05) in all cases and indicates that the contextual information indeed has the potential to help improve the recommendation performance. By incorporating both the mood-specific movie similarity and the PK-based movie similarity, the pro-posed algorithm JMF-MS-PK outperforms the non-context-aware approaches by over 10% across all the evaluation metrics, also with constant statistical significance. This gives an affirmative answer to the research question (2). In addition, the improvement of JMF over the basic MF approach also empirically indicates that exploiting contextual information via the JMF model could indeed contribute to alleviating data sparseness problem in the user-movie rating matrix.
 Second, we observe that the JMF-MS achieves around 3% X 5% improvement over the JMF-MB in most of the evaluation metrics, indicating that the mood-specific movie similarity is more beneficial for the mood-specific recommendation purpose compared to the general mood-based movie similarity. This observation provides an affirmative answer to the third research question.

Third, by further incorporating the PK-based movie similarity in addition to the mood-specific movie similarity, the JMF-MS-PK achieves around 3% significant im-provement over the JMF-MS with respect to P@10, which results in an affirmative answer to the last research question. It can also be seen that the mood-specific movie similarity makes the major contribution under the mood-specific recommendation pur-pose, while other contextual movie similarities, for instance, the PK-based movie sim-ilarity, can be exploited via the JMF approach to make further enhancements of the recommendation performance.

Finally, we investigate the performance of the proposed algorithm with respect to users with varying numbers of rated movies, such as the results reported for P@10 in Table II. Since the non-context-aware approaches perform generally worse than the proposed JMF algorithm as indicated before, we only select MF to represent the non-context-aware approaches. As can be seen from Table II, the JMF algorithms outperform the basic MF across all users with various numbers of rated movies. We also notice that the users with relatively fewer rated movies (i.e., with no more than 100 rated movies) benefit most from the mood-specific movie similarity (i.e., from JMF-MS and JMF-MS-PK) compared to the general mood-based movie similarity (JMF-MB). We conjecture that the difference arises due to the following effect. Under mood-specific similarity less orthogonal pairs of movies exist in the set than under mood-based similarity. Effectively, the structure of the movie similarity space as defined by pair-wise relationships between movies is smoothed by the use of mood-specific similarity. Users who have rated large numbers of items do not benefit from this smoothing since their profiles already contain enough information for reliable estimation of predictions. Users who have rated fewer items, however, effectively are able to cast a wider net if more pairs of movies are similar.

In real-world systems, users with limited numbers of rated movies are usually the majority in the community as reflected in the typically high data sparseness encountered by recommender systems. Our results indicate that exploiting the mood-specific movie similarity has the potential to benefit these users in particular. Compared to the JMF-MS, the JMF-MS-PK could be more beneficial for the users who rated relatively more movies. This observation may imply that the latent movie features that are learned from PK-based similarity can be better leveraged if there are more available ratings on those movies. If the user rates more movies, she could raise the chance that some of her rated movies are similar to other movies with respect to PK-based similarity, which could be recommended even if they are rated by few users overall within the collection. This observation also implies an affirmative answer to our last research question, that is, the additional information introduced using PKs serves to improve recommendations in the case of users rating many movies. In this article, we present a novel context-aware recommendation algorithm that in-tegrates contextual movie similarity, that is, mood-specific movie similarity and PK-based movie similarity, together with the user-movie rating matrix into joint matrix factorization for the purpose of mood-specific movie recommendation, as defined in the Moviepilot challenge. The proposed algorithm is analyzed to be scalable for large-scale use cases. Our experiments at the Moviepilot challenge dataset show that the proposed algorithm outperforms several other state-of-the-art recommendation ap-proaches. Substantial improvement can be achieved by exploiting contextual movie similarities, among which the mood-specific movie similarity is shown to make the ma-jor contribution to the recommendation performance and the PK-based movie similarity could further enhance contribution. In addition, we specifically validate the usefulness of the mood-specific movie similarity compared to general mood-based movie similarity, which indeed leads to a substantial performance improvement. We also show the JMF with both mood-specific movie similarity and movie similarity in terms of plot key-words could be the most beneficial option for users across profiles containing different numbers of rated movies, compared to other variants.

We note that the algorithm proposed in this article could be generally applicable to other recommendation purposes, for instance, recommending movies with a specific actor, recommending music with a specific style. Exploiting contextual item similar-ity that is related to the specific recommendation purpose could be a way to make recommender systems context-aware.

Our future work will involve further exploration of the use of context-based informa-tion for recommendation. In particular, note that the Moviepilot challenge dataset was issued in an encoded form: we do not have direct knowledge of the identities of moods or plot keywords, rather these are represented within the dataset as codes. In the future, we would like to experiment on a dataset where we do have access to this informa-tion in order to compare our approach to approaches informed by external knowledge sources that could add explicit information on the relationship between the sources. We are also interested in moving beyond moods and plot keywords and understanding the suitability of our approaches for exploiting other sources of knowledge. In particular, we will address the question of what characteristics of a knowledge source must hold in order to be successfully exploited by our approach for the purpose of context-aware recommendation.

