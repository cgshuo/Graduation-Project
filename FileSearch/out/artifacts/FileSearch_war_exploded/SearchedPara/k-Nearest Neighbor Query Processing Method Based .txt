 The k-nearest neighbor ( k -NN) query is one of the most important query types for location based se rvices (LBS). Various methods have been proposed to efficiently process the k -NN query. However, most of the exis ting methods suffer from high computation time and larger memory requirement because they unnecessarily access cells to find the nearest cells on a grid index. In this paper, we propose a new efficient method, called Pattern Based k -NN (PB-k NN) to process the k -NN query. The proposed method uses the patterns of the distance relationships among the cells in a grid index. The basic idea is to normalize the distance relationships as certain pattern s. Using this approach, PB-k NN significantly improves the overall performance of the query processing. It is shown through various experiments that our proposed method outperforms the existing methods in terms of query processing time and storage overhead. H.2.4[Systems]: Query processing Algorithms, Performance Location based services, k -Nearest Neighbor queries, query processing methods 
The Location Based Service (LBS) provides users or other objects with their position related information. Accordingly, the LBS can be applied to various valu e-added services such as taxi, delivery, and rental services that require the tracking and monitoring of objects. Recently, due to the wide use and development of mobile devices and positioning technologies, the interests in LBS and related t echnologies from many researchers in different fields have been greatly increased. 
In this paper, we propose a new main memory based k -NN query processing method. A k -NN query can be applied to many LBS applications. For example, when a customer calls a taxi company to take a taxi, the company can find the nearest taxi to the customer and direct it to her or him. 
Many different query processing approaches have been proposed. YPK-CNN [1] processes a k -NN query in a grid index structure. To get the result of a k -NN query, it searches cells overlapped with a certain rectangle while extending the size of its all sides such as top, down, right, and left until the initial k -NN is found. CPM [2][3] was proposed to solve the problems of YPK-CNN by applying the best-first search approach to a grid index structure. This method guarantees to visit the nearest cells in the order of the distance between the query point and the cells. To reduce the cost to manage the heap, it inserts the virtually grouped cells around the cell containing the query point. The groups are treated as the internal nodes of a tree index structure. CircularTrip [4] was proposed to resolve the problems of CPM by improving the query performance and by saving the memory resource. CircularTrip also uses a range query processing approach. However, CircularTrip uses circ les to find nearest cells while YPK-CNN uses rectangles. In addition, CircularTrip uses a heap structure with the cells overlapped w ith the circle range to sort the cells in the distance order. Therefore, the method does not search all cells in the heap. 
We propose a new Pattern Based k -NN (PB-k NN) query processing method that overcomes the problems of the existing methods. The proposed method utilizes the Distance Relation Patterns (DRP) for processing a k -NN query efficiently. DRP is a set of relative coordinates sorted by the distance between a point in a cell and a point in another cell in ascending order so that the pre-sorted cell lists to be vis ited can be used in processing a k -NN query. In addition, we propose a query index structure using the DRP to reduce the computation cost needed to find the nearest cells in the distance order. In orde r to show the superiority of the proposed method, we conduct the performance evaluation of PB-k NN, CPM and CircularTrip. 
The rest of this paper is or ganized as follows. Section 2 proposes DRP and the new query processing method using DRP. The results of performance evalua tion are shown in Section 3. Finally, Section 4 concludes the paper. 
The key idea of the proposed method is to make it possible to efficiently visit the nearest cells in sequence using the DRP in the grid structures. By using the pre-sorted cell lists to be visited instead of heap, the proposed method requires much less storage and computation to find the nearest cells than CPM and CircularTrip. Table 1 represents th e notations used in this paper. PC(p) The coordinates of point p in a cell CP(r) The center point of rectangle r
DRP is the list of the relative coordinates of cells in the distance order from a certain point in a cell to another point in other cells. We formally define DRP as follows. Property 1: Given two points p n and pm in different cells in a grid space, if PC(p n ) = PC(p m ) , then ACL(p RCL(p n ) = RCL(p m ). 
The property indicates that if arbitrary two points in different cells have the same positions in th eir cells, their distance relations with other relative cells are the same. Figure 2 shows an example of property 1. Figure 2(a) shows two point p 1 , and p different cells but have the same positions in their cells. Figure 2(b) represents the Absolute Coordinate List (ACL) and Relative Coordinate List ( RCL ) of p 1 and p 2 , respectively. As shown in Figure 2, ACL ( p 1 ) and ACL ( p 2 ) are not the same but RCL ( p RCL ( p 2 ) are the same. 
Therefore, all the points with th e same coordinates in different cells have the same RCL but have the different ACL . Using the characteristics, if RCLs for all the points in a cell are pre-computed and maintained, it is qu ite easy to identify the nearest cells sequentially from any points in the grid. But it is infeasible to maintain all RCLs because the number of points in a cell is infinite. Therefore, we select only a few points that can be the representatives of the cell space and maintain only a set of RCLs for the points. 
Here RCL is defined as Distance Relation Pattern ( DRP ). We predefine the number of DRPs and denote it by N drp . We divide a cell into N drp sub-cells virtually and call the sub-cell VDC (Virtually Divided Cell). DRP is created only for the center point of each VDC . Therefore, the accuracy and storage cost of DRP depend on N drp . 
We propose a k -NN query processing method using DRP in this paper. The form of a k -NN query is &lt; qid, query_point, k &gt;, where qid denotes the identifier of the query, query_point is its coordinates, and k is the number of nearest neighbors. The proposed method also uses additional data structures such as drp , k-dist and result_set , where drp is one of DRP s chosen by the VDC , k-dist is the distance between query_point and the k nearest neighbor, and result_set is the set of objects in the k-dist from query_point . Query processing consists of the following three steps. Step 1. Creation of DRPs We create a set of DRPs according to the predefined N the DRP is created, it is used permanently because the shape of a grid is never modified. Step 2. Assignment of a DRP We assign a drp , one of the DRPs created in Step 1, to the query when the query is requseted. The drp is chosen by the VDC . Step 3. Query processing using the DRP Third, the k -NN query is processed by using the drp assigned in Step 2. Following the relative coordinates in the drp , the cells around the query _ point are visited sequentially until k -nearest objects are found. 
Figure 4 shows how to process a k -NN query using DRP . As shown in Figure 4(a), the cells around the query _ point of a query q are visited sequentially based on the assigned drp until k objects are found. Then, we compute the k-dist of q and compare the k-dist with the distance between the last visited cell and the query_point . If the k-dist is larger than the distance, the method finds additional cells continuous ly until the cell whose distance from the query _ point is less than the k-dist is found in the drp to guarantee the correct result. This process is shown in Figure 4(b). (a) finding 3 objects using DRP (b) additional search to guarantee 
The query processing using DRP incurs the incorrect distance because of the difference between the query _ point and the reference point of DRPs . We denote the difference by error _ dist . To correct the error _ dist , we use search_dist . Equation 1 represents the search _ dist , where EQ ( q ) denote the error_dist of a query q . Given a query q , Figure 5 shows the difference between the maximum error distance E and the error _ dist of q denoted by EQ ( q ) . The error_dist is described in Section 2.3 in detail. Figure 6 shows the algorithm to process a k-NN query. Once k-NN query q is requested, we assign a DRP drp as specified in line 01 of the algorithm and find the cell C q which contains the query_point (Line 02). Then, the cells are visited sequentially following the drp until k objects are found. The k objects are inserted into result_set (Line 05~07). After finding k objects, we calculate and update k-dist (Line 08). Next, to guarantee that k objects are the k-NN, the cell search is continued while the (Line 09). While visiting the additional cells, result_set and k-dist are updated whenever the objects that are closer to q than k-dist are found (Line 14~18). DRP has little error distance because of the difference between the reference point of the DRP and the other points in the same VDC . We propose and use error _ dist to correct the result. Given query q , we define the error_dist of q as Equation 3, where P of q . 
The error_dist is computed by the triangle-determining conditions. More specifically, given arbitrary three points p and p 3 on a two dimensional plane, MINDIST ( p MINDIST ( p 1 , p 2 ) + MINDIST ( p 2 , p 3 ) is guaranteed by triangle-determining conditions. To apply the conditions to the relation between points and rectangles, given two points p same cell and a certain rectangle b out of the cell, MINDIST ( p1 , b )  X  MINDIST ( p 1 , p 2 ) + MINDIST ( p 2 , b ) is also guaranteed. q.query_point , and P ref that denotes the reference point of the DRP of q , the condition MINDIST ( q.query_point , c ) MINDIST ( q.query _ point , P ref ) + MINDIST ( c , P So that, after visiting all cells on the DRP of q until a cell which is farther than the sum of k-dist and error_dist is found, there are no cells closer than q.k-dist to q . query_point . If a side length of a cell is denoted by  X  , the error_dist of a query q and the maximum error distance E of the DRP when N drp is 4 are shown in Figure 7. 
In this section, we conducted the performance evaluation to show the characteristics of the DRP based k -NN query processing method in various environments. For all simulations, we use IBM xSeries 336, 3.2GHz CPU with 2Gbyte memory. The proposed method is denoted by PB-k NN. 
We measured the effects of storage cost and computation cost according to N drp . Figure 8 shows the relation between the costs and N drp . If N drp is increased, the storage cost is increased. However, a VDC becomes smaller and the possible error distance also becomes shorter. It leads to decrease the computation cost since the number of cells to be visited additionally is decreased. The query processing time is very slightly changed since N and the storage cost is increased continuously as N drp As a result, we decide the default value of N drp as 4. 
Figure 8. Storage cost and computation cost according to N
To decide the appropriate grid resolution, we measure the effects of storage and computation costs according to the grid resolution. Figure 9(a) shows the effects of computation costs according to the grid resolution. As a result, we can see that PB-k NN is faster than CPM and CircularTrip regardless of the resolution. If the resolution is too low or high, CPM and CircularTrip become slow because the number of the visited cells to process a query and the number of the objects in a cell are increased. PB-k NN is less affected by the resolution of the grid than CPM and CircularTrip. In the experiments, since the most appropriate resolution is 256 x 256 for the environments, we chose the resolution 256x256 as the default resolution of the grid. Figure 9(b) shows the effect of the storage cost required to process queries according to the grid resolution. BASE denotes the storage cost without the storage of the query table and DRPs . In other words, BASE includes only the storage costs for grid and the object table. The data structure of the query table depends on the query processing methods. The query table of CPM keeps the priority queue to find the neares t cells sequentially and the visit list to be used when a query are reevaluated. CircularTrip is the same as CPM except that the query table of CircularTrip does not include the visit list and priority queue. PB-k NN uses DRP instead of the visit lists and prio rity queues. However, the storage cost for DRP is unlikely to affect the total storage cost because all queries share DRP . The storage costs of CPM increase significantly when the grid resolution becomes high since the number of the visited cells is in creased and the visited cells are maintained in main memory during the query processing. In the environments, it is shown that PB-k NN requires less storage and higher scalability than CircularTrip and CPM. 
Figure 9. Computation and storage cost according to the grid Figure 10(a) shows the effect of the computation cost according to the number of objects. If the density of objects rises, the computation cost to find the nearest cells decreases because the number of visited cells is incr eased. This phenomenon occurs in all methods. The computati on cost of CPM decreases approximately from 2700 to 270 and the computation cost of CircularTrip decreases approximately from 2400 to 270 while the computation cost of PB-k NN decreases approximately from 500 to 200. The query processing time of PB-k NN is at least 1.3 and 5 or more times faster than those of CPM and CircularTrip. As a result, it is shown that PB-k NN is faster than CPM in all situations regardless of the density of the objects. Figure 10(b) shows the effect of computation cost according to the number of NNs( k ). We measure the CPU times of the query processing methods when the value k changes from 1 to 256. As k increases, the query processing times of CPM, CircularTrip, and PB-k NN increase as well. However, the increase rates of the query processing time in CPM and CircularTrip are changed more sharply than that in PB-k NN. When the value of k is 256, PB-k NN is about 4 times faster than CPM and CircularTrip. It is expected in the evaluation that the more k increases, the more the difference between the computation costs of PB-k NN and the existing methods increases. (a) According to the number of 
Figure 10. Computation cost according to the number of We have proposed a new method called PB-k NN to efficiently process the k -NN queries in grid environments utilizing DRP , that is, a set of relative coordinates sorted by the distance between certain points in a cell and other cells. Based on our various experiments, the proposed method, PB-k NN outperforms the existing methods CPM and Circular Trip. In the future, we will study on other query processing al gorithms such as reverse NNs using DRP This work was supported by the Mi nistry of Education, Science and Technology Grant funded by the Korea Government (The Regional Research Universities Program/Chungbuk BIT Research-Oriented University Consortium) and Basic Science Research Program through the Na tional Research Foundation of Korea (NRF) grant funded by the Korea government (MEST)(No. 2009-0080279). [1] X. Yu, K. Pu, and N. Koudas, Monitoring k-nearest [2] K. Mouratidis, M. Hadjieleftheriou, and D. Papadias, [3] K. Mouratidis and D. Pa padias, Continuous Nearest [4] M. A. Cheema, Y. Yuan, and X. Lin, CircularTrip: An 
