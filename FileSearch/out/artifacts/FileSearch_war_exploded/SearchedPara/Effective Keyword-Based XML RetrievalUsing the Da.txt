 There are many structured documents, and Extensible Markup Language (XML) is used as a typical description format for such documents and structured data. XML is also used as the format for data exchange; therefore, it is more important to be able to retrieve XML effectively. As one of the method for retrieving XML, there is a method called XML keyword sea rch which extracts only part of XML documents including query keywords like web searches. XML keyword search does not require users to know the structure of XML documents and knowledge about the query, so it is easy to retrieve related information by using XML keyword search.

It is important to be aware of whether the target XML is data-centric or document-centric. For example, ther e are DBLP[2] as data-centric XML, and there are scientific articles in XML fr om IEEE Computer Society that have been used in INEX[11],the Wikipedia XML Corpus[3], as document-centric XML. Pradhan et al. [1] proposed a method that acquires effective subtrees in document-centric XML, and they believe that the i ssue of retrieval unit needs to be taken into acccount in document-centric XML, unlike in data-centric XML. We thought that it is important for us to be aware of whether target XML is data-centric or document-centric from this study too.

In the keyword search techniques over XML documents, many methods have been proposed that use the Lowest Co mmonAncestor(LCA)[5,6]oruseIn-formation Retrieval (IR) techniques [9 ,10]. The former is mainly the methods for data-centric XML, and the latter is mainly the methods for document-centric XML. However, XML documents generally have both data-centric and document-centric parts, so current meth ods cannot return effective results in some cases. For example, we consider that scientific papers in XML[11] are the ones which include both data-centric and document-centric parts. Paragraph el-ements are considered as document-centric parts, and elements, such as author and title, are data-centric parts. Therefore, we should focus on element features and construct search results by changing the treatment whether they are data-centric or document-centric parts. In th e rest of this paper, we call elements which correspond to data-centric parts a s data-centric elements, and elements which correspond document-centric part s as document-centric elements. Also, we call XML keyword search using LCA semantics as the LCA approach, and that using IR techniques as the IR approach.

The LCA approach identifies nodes as search results. However, there are many combinations that include query keywords in identifying nodes, and we specifically need to consider the connect ion between data-cen tric and document-centric elements in XML documents that have both elements. By contrast, the IR approach acquires search results by focusing on retrieval granularity; how-ever, data-centric elements are element s that are used as filtering conditions, and such elements should be treated as not having issues concerning retrieval granularity. We need to focus on element features in order to construct effective search results.

We first divide elements in to data-centric and docum ent-centric elements and consider the connection between thes e elements. We propose a method for XML keyword search that is applicable in cases of including both data-centric and document-centric elements. The LCA approach returns a node called the LCA which includes all query keywords and is the deepest element in the common ancestor. In research on LCA, Smallest LCA (SLCA) which returns only specific nodes in the LCA, has been proposed [4]. SLCA is an intuitively minimum node that does not include a subtree that has query words at descendant once or more. Fig. 1 shows the use of the Dewey ID, which has been used in previous research [5], and shows elements by element name and the Dewey ID. For example, article(0.0) is the article node whose Dewey ID is 0.0. In Fig. 1, the LCA that includes both  X  X enerate X  and  X  X nippet X  that is a query is sec(0.0.1.1), and the LCA based on  X  X enerate X  included in title(0.0.1.1.0) and  X  X nippet X  included in p(0.0.1.0.2.2) is bdy(0.0.1), and the LCA based on  X  X enerate X  included in title(0.0.1.1.0) and  X  X nippet X  included in p(0.1.1.0.1) is journal(0). In this example, the number of LCA is three and the SLCA is sec(0.0.1.1) from the characteristic.

Bao et al. [6] proposed a ranking method by defining term frequency (TF) and document frequency (DF) which are applicable to XML, especially by focusing on SLCA, and identifying user X  X  intention. Liu et al. [5] estimated a node which a user asks for from a query. Supasitthimethee et al. [8] addressed the issues of using different words to acquire the same results, and which node to return by considering how much information should be included.

When we apply the LCA approach to target XML documents, nodes are identified as search results from a user X  X  query; however, we should consider about not only identifying the node but also combinations in order to acquire effective results. XSemantic [8] or XSeek [5], is discussed which part should be returned under the identified node; however, these methods focus on data-centric XML, so there is the issue that it doesn X  X  consider about including both data-centric and document-centric elements. T herefore, users cannot be satisfied with search results by the application of only the LCA approach in XML documents that include data-centric and documen t-centric elements. We assume research papers structured as XML documents that include data-centr ic elements, such as authors X  name or title that correspond to article information, and document-centric elements, such as text. These ele ments are related and their connections need to be considered.

On the other hand, the IR approach focuses on the granularity of XML el-ements. Hatano et al. [9] automatically determined the suitable granularity of search results by analyzing the content and structure of XML documents. Fu-jimoto et al. [10] automatically select ed document-centric elements by focus-ing on the element name, rate of period, and the number of different words, and effectively searched XML documents b y eliminating unsuitable data-centric elements.

When we apply the IR approach to target XML documents, we focus on the granularity of XML elements, and the ele ment is basically returned as search re-sults. However, this approach is not considered for XML documents that include both data-centric and document-centric elements, which is also true with the LCA approach. Therefore, for the XML documents shown in Fig. 1, the whole article may become a result for the query  X  X i XML X . However, a user actu-ally asks for information about  X  X ML X  which is written by  X  X i X , so we need to construct search results by focusing on element features that match keywords.
In fact, what kind of elements are typica lly data-centric or document-centric elements has not been formally defined; however, elements that include text are basically considered as docu ment-centric elements, a nd others as data-centric elements. Previous research implicit ly focused on XML keyword searches for XML documents that include only data-centric or only document-centric ele-ments; however, documents generally in clude both these elements. Therefore, it is difficult to retrieve results which a user asks for only by using previous research.
We need to divide into data-centric el ements and document-centric elements in order to acquire appropriate results. In this paper, we argue that it is pre-liminarily identified data-centric and doc ument-centric elements by classifying manually. There are generally two issues to address w hen constructing search results. The first issue is how to presume a user X  X  query i ntention. More effective search results can be obtained if we understand which part query languages should match. The second issue is how to construct searc h results in XML documents that include data-centric and docum ent-centric elements.

In this Section, we discuss the presumption of query intention and describe our method for constructing search results in Section 4. In Fig. 1, consider that a user X  X  query is  X  X i XML snippet X .  X  X i X  appears at name(0.0.0.0.0) and name(0.1.0.0.0), which denote the author X  X  name, and at p(0.0.1.0.2.1), which denotes the paragraph.  X  X ML X  and  X  X nippet X  also appear at various elements. Therefore, there are various mat ches by only focusing on a query.

We applied Motomura et al. X  X  [7] method to presume query intention, and assumed that a user can select the query intention corresponding to a user X  X  intention in a number of interpretations which show user. Motomura et al. X  X  method mainly focuses on data-centric XML, specifically element name, and acquires a number of interpretations by clustering depending on which element name the query matches. However, we focus on XML documents that include both data-centric and document-centr ic elements, so we need to consider the existence of document-centric elements . In data-centric elements, for example, au denotes the author X  X  name and is meaningful; however, in document-centric elements, for example, it does not matter which node having element name such as p or sec we should acquire. Therefore, if we use only the method that focuses on the element name, issues arise in docum ent-centric elements. Because of this, we consider that it enables us to show user results estimated query intention by adding being of document-centric elements which do not care about which part should be matched to Motomura X  X  clustering method, and we let these presumptions be interpretations of queries.
 Regarding query interpretations, we u se the description called Content And Structure(CAS) which is used in INEX by extension. CAS is written like XPath, for example, it is described as //article//sec[about(., mutual information crite-rion)]. This is a query which asks for sec el ements which describes information of  X  X utual information criterion X  in desce ndant of the sec element or self in article element. We use this CAS description by extension. We propose include and * doc . For example, include(.//title, link analysis) means that keywords of  X  X ink X  and  X  X nalysis X  are included, and * doc denotes any document-centric elements.
If  X  X eb retrieval link analysis X  is given, for example, it is considered as an interpretation of //article[include(.//title, link analysis)]//* doc [about(., web re-trieval)]. This shows that a user asks for information about the part of the description of  X  X eb X  and  X  X etrieval X  in the article that describes  X  X ink X  and  X  X nalysis X . CAS, for example, returnes fi xed results, such as the sec element; however, the user is not concerned with the elements if he/she can acquire de-sired results, so we propose a description that is not fixed to a specific element by describing * doc . The description of include(.//title, link analysis) means that both keywords  X  X ink X  and  X  X nalysis X  are included and plays a different role from things corresponding fully to strings written like contains which is described by XPath.

Regarding presumption of query intention, it is preferable to automatically estimate the query intention and show it to users; however, we do not discuss automatic presumption in this paper since we can reduce a user X  X  burden by showing candidates of the query intenti on and let the user select the presumption of his/her query intention in the result s described. We suggest that excessive results are eliminated when constructing search results by considering the extent of influence of data-centric elements based on the selected query. We need to construct search results by taking into account issues due to the inclusion of data-centric and document-centric elements. In this section, we dis-cuss the extent of influence of data-centric elements and the retrieval algorithm basedonthis. 4.1 The Extent of Influence of Data-Centric Elements There is a connection betw een data-centric and docum ent-centric elements when both are included in target XML documents. We focus on this connection by considering the extent of influence of data-centric elements. About the extent of influence of data-centric elements, if a data-centric element that matches a certain path p is unique in a certain subtree T , the data-centric element affects the document-centric elements in T. In short, if we focus on the subtree and the path that matches data-centric element is unique, the data-centric element can be estimated information about subt ree, so the data-centric element affects document-centric elements in the subtree.

For example, in Fig. 1, if we focus on a subtree that makes article(0.0) a root node, the data-centric elemen t that matches the path described as //article/fm/au/name is unique in article(0.0), so name(0.0.0.0.0) affects the document-centric elements in article(0. 0). However, the data -centric elements that match the path described as //article/bdy/sec/title are title(0.0.1.0.0) and title(0.0.1.1.0) and are not unique, so these elements do not affect the document-centric elements in article(0.0). How ever, if we focus on a subtree that makes sec(0.0.1.1) the root node, the data-cen tric element that matches the path de-scribed as //sec/title is unique in sec(0.0.1.1), so title(0.0.1.1.0) affects the document-centric elements in sec(0.0.1.1).

Thus, we can find the connection between data-centric and d ocument-centric elements by considering a cer tain subtree and path, and construct search results. 4.2 Connection of Elements In Fig. 1, if a user X  X  query is //article[include(.//name, Yi) and include(.//title, generate)]//* doc [about(., snippet)], suppose that the result in Fig. 2(a) is re-turned. The data-centric element that matches the path described as //arti-cle/fm/au/name is name(0.0.0.0.0) and unique in article(0.0), so name(0.0.0.0.0) affects the document-centric elements in article(0.0). The data-centric ele-ment that matches the path described as //sec/title is title(0.0.1.1.0) and unique in sec(0.0.1.1), so title(0.0.1.1.0 ) affects the document-centric elements in sec(0.0.1.1). Therefore, p(0.0.1.1.1) is affected by both name(0.0.0.0.0) and ti-tle(0.0.1.1.0), as shown in Fig. 2(a). Thus, the more document-centric elements are affected by data-centr ic elements, the more related results we acquire. On the other hand, in Fig. 1, if a user X  X  query is //article[include(.//name, Yi) and include(.//title, XML)]//* doc [about(., snippet)], suppose that the re-sult in Fig. 2(b) is returned. The data-centric element that matches the path de-scribed as //article/fm/au/name is name(0.0.0.0.0) and unique in article(0.0), so name(0.0.0.0.0) affects the document-cen tric elements in arti cle(0.0). The data-centric element that matches the path descr ibed as //sec/title is title(0.0.1.0.0) and unique in sec(0.0.1.0), so title(0.0.1 .0.0) affects the document-centric ele-ments in sec(0.0.1.0). However, the data -centric elements that match the path described as //bdy/sec/title are not unique in bdy(0.0.1), so title(0.0.1.0.0) does not affect all the document-centric elements in bdy(0.0.1).

Therefore, in Fig. 2(a) the document-cen tric element whose value is  X  X nippet X  in p(0.0.1.1.1) is the word affected by the data-centric element whose value is  X  X i X  in name(0.0.0.0.0) and whose value is  X  X enerate X  in title(0.0.1.1.0). On the other hand, in Fig. 2(b) the document-cen tric element whose value is  X  X nippet X  in p(0.0.1.1.1) is the word affected only by the data-centric element whose value is  X  X i X  in name(0.0.0.0.0). Thus, the search results in Fig. 2(a) are more effective than those in Fig. 2(b).

Therefore, we can acquire more relate d and valid results by considering the extent of influence of data-centric elements. 4.3 Algorithm for Constructing Search Results We construct search results by considering the extent of influence of data-centric elements and the connection between da ta-centric and doc ument-centric ele-ments based on interpretations. The algorithm for constructing search results is Algorithm 1. For example, suppose that a user X  X  query is //article[include(.//au, Yi) and include(.//title, XML)]//* doc [about(., snippet)]. Since  X  X i X  and  X  X ML X  Algorithm 1. Construction of search results match data-centric elements each other, we extract the part that matches  X  X i X  and  X  X ML X  only in data-centric elements (line 7,8). On the other hand, since  X  X nippet X  matches the document-centr ic elements, we use the IR approach (line 4). In this case, we focus on both data-centric and document-centric elements because there is the case described abou t  X  X nippet X  without using the term in the document-centric elements, howev er appears in data-centric elements.
We construct search results from acqu ired results and consider the extent of influence of data-centric elements by constructing these search results. In Fig. 1, if a user X  X  query is //article[include(.//name, Yi) and include(.//title, XML)]//* doc [about(., snippet retrieval)], for example, the results in Fig. 3(a)-(d) can be returned. However, in this case, there is not only the possibility for generating a number of similar search results but also of generating a combi-natorial explosion. Therefore, about con struction of search results we make one result by considering the extent of influence of data-centric elements. Document-centric elements affected by title(0.2.1. 0.0) are returned as results, as shown in Fig. 3(a)-(d); thus, it is considered that they treat the same to pic. Therefore, a user can effectively acquire search resu lts by summarizing them into one result, and we can also prevent a combinatorial explosion from occurring.
 We used the IEEE CS data set of INEX [11] as experimental data. The data were 17000 files and the data size was about 740 MB. We made queries by improving CAS which was used as an evaluation in INEX 2005. For example, in //ar-ticle[about(.//p, data embedding)]//p[about(.,watermarking)] which is CAS,  X  X ata embedding X  acts as a filter, so we use them as a filter that matches the title. Therefore, we rewrite //article[include(.//title, data embedding)]//* doc [about(. ,watermarking)]. 1
We consider the extent of influence of data-centric elements, so we examined how many eliminated results are included in actual data by calculating the aver-age rate of affected elements based on the number of elements per article. Table 1 lists the queries used for our experiments, and Table 2 lists the average ratio of elements affected by data-centric elemen ts per article. The ratio is calculated by dividing (the number of elements affect ed by data-centric elements) by (the number of elements that match the query). In Table 2, we see that there are many elements that are not good for correct answer in actual data. Thus, we can acquire more effective search results by using our method. Note that, though the ratios in Table 2 are based on the number of elements, similar results were observed based on the number of words. We proposed a method for constructing search results in XML documents that include both data-centric and document-centric elements by co nsidering the ex-tent of influence of data-centric elements. Our experiments showed that data-centric and document-centric elements need tobe consider ed for actual XML documents; however, we must check that elements which have been eliminated by considering the extent of influence of data-centric elements are at the top by using the IR approach in the future.

