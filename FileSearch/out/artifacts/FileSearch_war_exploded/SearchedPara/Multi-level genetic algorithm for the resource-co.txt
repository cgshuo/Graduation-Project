 1. Introduction
In this paper, a multi-level genetic algorithm is proposed to minimize the makespan for the re-entrant flow shop scheduling problem (RFSP) with dual resource constraints. In the re-entrant flow shop, routes of all jobs are identical, while some jobs will visit certain machines more than once at different stages of processing. The number of the re-entrant jobs and the re-entrant frequency may increase or decrease based on the manufacturing or repair process of different products. Each workstation consists of several machines and operators, which is regarded as resource constraints.
A typical example of the re-entrant manufacturing system is the semi-conductor manufacturing process, especially wafer fab-rication line. In the semiconductor line, chemical material is added to the silicon wafers layer by layer where the wafer needs to repeatedly go through the clean rooms, depending on the manufacturing procedure of the wafer. Another example is the maintenances industry where repair parts will iteratively go through typical operations such as inspection, blasting, welding, grinding, fitting, coating, and packing. Moreover, depending on the repairing technology and product specification, the required production capacity and time would be different. Therefore, an extensive study on re-entrant flow shop is essential for balancing the production efficiency and product quality.

According to Tseng and Chen (2009) , a mode is the combination of different resources and/or levels of resource requirements with a specified duration. For many sched uling problems, machines and skilled labor requirements vary at different workstations. The selection of the execution mode will directly influence the produc-tion duration and product qualit y. Therefore, it is critical to determine the execution mode for each task. Take the electro-coating as an example, sophistic ated machines such as high pres-sure sprayer have high perform ance but consume more paint and less prone to rework, while skill ed worker may use less paint but more time for the same job and has a higher chance of rework.
Hence, different modes of production (i.e. machine or man) will affect rework probability. Therefor e, effective scheduling of high cost labor and machine can provide a higher payoff for enterprises.
The re-entrant flow shop scheduling problem considered here is based on a maintenance company that offers repair, modification and upgrading services for a wide range of machinery from marine, electrical to mechanical. The repair parts include huge parts such as buckets, fuel nozzles, power nozzles, shroud, and rotors.
Approximately 95% of repair parts of this company need to go through the blasting, heat treating, welding, alloying, grinding, and inspection procedures. If parts fail in the inspection process or new faults are found, the repair parts need to be returned to the previous workstations and reworked. As long as rework happens, the due dates of the re-entrant jobs are becoming tighter. More-over, as the repairing execution mode is optional, the corresponding technology and standard will differ. Thus the machine time and required operators will vary. The re-entrant probability and the number of re-entrant jobs will change accord-ingly. Take the power nozzles repairing procedure as an example.
According to different repairing technologies, a power nozzle part can be repaired in a complicated mode which goes through 40 steps. Under this mode, a typical piece of power nozzle will cost 400 units of worker time, 120 units of machine time with 9% of rework possibility. Or when the job is urgent, the same piece of power nozzle can be done by applying the compact mode that only goes through 13 steps, consuming 215 units of worker time, 420 units of machine time with as high as 15% of chance to be reworked. No matter it is the original job or the re-entrant job, the differences of the execution modes are the processing time at some particular stages and the consumption of the machine and manpower resources. Some of the parts do not need to pass all the machines. Similar phenomena can be found from the coating procedure. High pressure sprayers have good performance but consume more paint and less prone to be reworked, while skilled worker may use less paint but more time for the same job and has a higher chance of rework. Therefore, the choice of execution mode can affect the overall makespan.
 will review the related literature in Section 2 . Section 3 will formulate the problem and Section 4 elaborates the multi-level encoding genetic algorithm with various operators setting.
In Section 5 , we describe the experiment and analyze the corresponding results. In Section 6 , the main explanation of the experimental results is further discussed and finally Section 7 summarizes the paper and draws conclusions based on our experimental results. 2. Literature review mentioned the RFSP term which represents the scheduling problems happened in the shop area with a sequence of opera-tions are processed by machines. Based on the re-entrant char-acteristics, some jobs would visit certain machines more than once before completion but with the same routing. When each machine processes the set of all jobs in the same order, this problem evolves into the re-entrant permutation flow shop scheduling problem (RPFSP), which is the special case of RFSP. with the demanding manufacturing requirement from the semi-conductor industries or integrated circuit fabrication or thin film transistor liquid crystal display process. Exact method, heuristic and meta-heuristic methods all have been proposed for solving the re-entrant flow shop scheduling problem. However, the comprehensive analysis of this problem is not done till the review paper of Lin and Lee (2010) which classifies the re-entrant problems and analyzes the optimization methods of re-entrant manufacturing scheduling.

Mostly exact methods formulate the re-entrant flow shop scheduling problem as the integer programming problem and simulate the efficiency of the new proposed approaches. How-ever, the computational complexity is high as long run time is used to narrow down the space within the constraints. The referenced work can be found from many studies( Chen and Pan, 2006 ; Choi and Kim, 2007 ; Demirkol and Uzsoy, 2000 ; Haitham and Ruml, 2006 ; Jiang and Tang, 2008 ; Kaihara et al., 2010 ; Nielsen, 2004 ; Odrey et al., 2001 ; Pan and Chen, 2003 ; Park et al., 2000 ; Scholz-Reiter et al., 2010 ; Yang et al., 2008 ).
Heuristic techniques such as dispatching rules and construc-tive heuristics have also been applied to the re-entrant flow shop scheduling problem. The dispatching rules are applied in the semiconductor industries by testing various experiments for the simulation models ( Cigolini et al., 1999 ; El-Khouly et al., 2009 ; Perkins and Kumar, 1995 ). Though these heuristic methods produce good quality solutions, they are not extensively used during the period of 2000 X 2007 as the running time are often large and increase rapidly with size of the problem.

Meta-heuristic, especially genetic algorithm (GA), evolved to be the new trend for the re-entrant flow shop scheduling problem. GA gets the edges over other techniques in the area of large-scale complexity like the very large scale integrated (VLSI) circuit man-ufacturing or repairing industries which are highly re-entrant, and involves hundreds of machines, restrictions and processing steps. Therefore, ( Chen et al., 2008a ; Hwang and Sun, 1998 ; Lee and Lin, 2010 ; Liu, 2010 ; Rau and Cho, 2009 ) used GA to solve the re-entrant problem and mainly focus their objectives on minimizing the makespan. Another meta-heuristic method such as tabu search has been used. In the hybridiz ed tabu search (HTS) model of Chen et al. (2008b) , the proposed HTS is compared with pure tabu search and NEH ( Nawaz et al., 1983 ) to find out the optimal makespan for various problem sizes. While in the interactive models of Alfieri (2009) , a neighborhood search is started with non-dominated and dominated initial solutions, then weighted function is used to evaluate the best solution that becomes the seed for the successive tabu search iteration. The resul ts are compared with composite priority rule in terms of maximum tardiness and total delay which is weighted by the customer priority.

Among all these papers, it is obvious that exact methods and meta-heuristics are the main used tools because efficient and economic computational method is required for solving this t i the stating time of job i C max the completion time of the last job Decision variables x im  X  1 if operation of job i is assigned to machine m ;0, y ijm  X  1 if operation of job i and j are assigned to the same z ijm  X  1 if operation of job i immediately precedes on machine r imk  X  1 if operation of job i is conducted on machine m with k complex scheduling problem. Moreover, most of them adopted minimizing the makespan as their aims. However, most of the works assumed unlimited buffer or no resource constraint in the processing procedure, which do not represent the real case in the world. Or some papers relaxed these constraints and decomposed the problem into sub-problems. Only the work of Scholz-Reiter et al. (2010) that fully takes the resource constraints into account. In their work, machines and labor resources are taken into consideration, priority rules and rule combinations are simulated for both small problem instances and long term system behavior with a time span of ten years. The results revealed that the performance of priority rules depends on the utilization level of the system, thus a proper control system is crucial to select and combine the priority rules.

There are many papers about the flow shop with constrained resource. Generally these works can be classified into two types based on the objectives. The first type related to allocating and scheduling the limited resource to the flow shop. Daniels et al. (2004) discussed the feasibility and benefits of dynamic assign-ment of partially flexible labor resources, linked skill matrices with self-buffering production line and eventually proved the benefit of complete flexibility can be achieved by a reasonable small amount of carefully selected partial flexibility. Similarly, in the work of Neubert and Savino (2009) , a mathematical model that based on constraint optimization principles is proposed to solve the operator scheduling problem. In their paper, the entity of the scheduling optimization is the human resource too.
The second type of flow shop with limited resource concerns the jobs scheduling problem, while the resource constraints are one of their considerations. The example can be found from Janiak (1988) , whose main objective is to minimize the job overall completion time. In his model, there is linear relation between the duration of each operation on certain machines and the allocated part of a constrained resource. The proposed algorithm is based on disjunctive graph theory and brand &amp; bound algo-rithm. However, resource allocation is regarded as one of the concern for scheduling. The similar work has been done by Cheng and Janiak (2000) whose algorithm is based on a branch &amp; bound algorithm and three approximate algorithms. The experimental results revealed that computation time is dependent on the starting solution and the value of the lower bound. Other related work can be found from Leu and Hwang (2002) who present a GA-based search for a precise flow shop production in considera-tion of resource constraints and different due days of multiple production package.

Although there are a lot of research has been done on the re-entrant flow shop scheduling problem, according to authors X  knowledge, no scholars study the problem that the re-entrant probability is connected with the execution mode. In this paper, Multi-level GA is proposed to optimize the resource utilization and minimize the makespan by considering the re-entrant prob-ability and the execution mode. 3. Problem formulation
The re-entrant flow shop scheduling problem can be basically described as m machines in series and n jobs to be processed in a line. Job i has N i operations and the processing time of its j th operation P ij is deterministic and prescribed in advance. For job i , its P ij  X  1 must be initiated right after the completion of P of the flow shop scheduling problem, RFSP follows the same assumptions about the job sequence, machine rules and operating policies ( Gupta and Stafford, 2006 ). To make problem simple, we assume that all re-entrant jobs will go back to the first work-station and virtually go through all the workstation again. But only those workstations in which the re-entrant jobs get rework have the processing time and related resource consumption. The objective of minimizing the makespan is expressed as Minimize S : T :
X t
Z 0 , 8 i A N  X  3  X  t  X  p r t i  X  1 , 8 i A N  X  4  X  y  X  y jim , 8 i , j A E m , 8 m A M i  X  5  X  y r 0 : 5 x im  X  x jm r y ijm  X  0 : 5 , 8 i , j A E m , 8 m
X z ijm r 1 , 8 i , j A E m , 8 m A M i  X  7  X 
X z jim r 1 , 8 i , j A E m , 8 m A M i  X  8  X  z  X  z jim r 1 , 8 i , j A E m , 8 m A M i  X  9  X  t r t , 8 i , j A B  X  10  X 
X
X x , y ijm , z ijm , r imk  X  0 or 1 , 8 i , j A N , 8 m A M i  X  12  X  Eq. (1) minimizes the total makespan of all jobs as the objective.
Constraints (2) ensure that each operation must be processed by exactly one machine. Constraints (3) ensure that each operation begins after time zero. Constraints (4) ensure that the order of operation of each job is respected. Constraints (5) and (6) ensure that y ijm  X  y jim  X  1when x ijm  X  x jim  X  1. Constraints (7) and (8) ensure that each operation has at most one predecessor and successor on machine m . Constraints (9) ensure that z ijm cannot simultaneously equal to 1. Constraints (10) determine the set of pairs of jobs between which there is precedence relationship.
Constraints (11) promise the consumed resource is within the limitation. Constraints (12) are binary constraints. 4. Multi-level encoding genetic algorithm
Flow shop scheduling problem is known as NP-hard. When re-entrant character is added, the complexity increases. Moreover, the problem discussed here has specific feature of interdepen-dency between the execution mode selection and the re-entrant probability. It is inappropriate to isolate these two factors or decompose the problem and optimize the makespan individually. Therefore, the solution should consider the following factors.
Firstly, they should be able to balance the re-entrant probability and total flow time at the same time; secondly, they are prone to be stochastic which can bring different combinations on the execution mode selection and re-entrant probability; thirdly, they are computational effective.

Based on these considerations of the required techniques, genetic algorithm is the preferred option. First of all, genetic algorithm is probabilistic, not deterministic. It works on a population of possible solutions, thus the searching direction is random and has higher possibility to reach the optimal solution.
Secondly, the problem presentation of GA is translated via encoding, the job index can be directly encoded as the chromo-some and the sequence of the index is definitely the permutation of the scheduling. Thirdly, the efficiency of the GA has been proved by many other applications, and its ability of synchronous exploration of multiple objectives is the most outstanding feature. Therefore, GA is the preferred optimization approach for RFSP. representation is used to encode the job scheduling, re-entrant probability and execution mode accordingly. Repair operator is adopted to revise those infeasible solutions as well. The details will be presented in the following subsections. 4.1. Sketch of multi-level GA for RFSP with dual resource constraints to the GA includes the data collection like the resource, technical data, the order arrival date and job due date. The dual resource constraints are the machine and labor, and they are measured in terms of hours that a specific resource is required. As machine has its capacity and human needs to work on a shift base, the available machine time and man hour are specified at a given period. The user control parameters are also inputted to this system. The user control parameters include the machine warm-up time, set up time, experiment time duration, etc. In this structure, the iterative loop of GA is also illustrated in the upper part of Fig. 1 .
 noted that repairing operator is used to modify the infeasible solutions before they are included in the next generation.
The repairing operator will check the logic of the re-entrant jobs, and examine whether re-entrant jobs are arranged before the original work or not. If the genome of the re-entrant job is found to be allocated ahead of the original job, the re-entrant job will swap the position with the original job. 4.2. Genetic algorithm 4.2.1. Multi-level chromosome encoding ensure the problem X  X  information i s well presented and appropriate genetic operators are applied. The application of GA to real-world problems usually follows two mai n approaches, namely, the use of direct and indirect chromosome representations. According to Topcuoglu et al. (2007) : for the direct representation, a chromosome represents a single solution. In the indirect version, one or more decoding algorithms are proposed in order to build the solution by considering the chromo some representation. Even though in the proposed method, multi-level chromosomes contain different infor-mation and have different data types, one group of multi-level chromosomes represents one solution. Therefore direct chromo-some representation is chosen and each population member is comprised of three levels of strings: the first level is the sorted permutation of jobs, and they are shown in unique index, which is the direct representation of the schedule information; the second level is the related re-entrant possibility of each job per different execution mode, and the re-entrant possibility is represented as binary number; and the third level is the corresponding resource consumption of different execution mode that uses real number. The GA operators are applied independently to the levels of strings. The following sections will detail the implementation. Fig. 3 illustrates the example of the multi-level encoding used. There are two types of execution mode, and marked as mode 0 and mode 1. Different modes consume different amounts of machine unit time and labor unit time. Take coating process as an example, high-tech machine can spray faster and evenly with more paint while manual work consumes less paint but more time with higher chance of rework. But the welding process is the opposite case. Manual work promises better welding within the tolerance of quality standard, while automatic welding costs more filler material and has higher chance of rework. Therefore, it is assumed that as long as the re-entrant probability exceeds 50 percents, the job is recognized as re-entrant job and will enter the production line again.

Assumed there are 6 jobs need to be scheduled. The first level is six unique indexes for jobs, and the binary numbers in the third level are the selection of the execution mode for each job. Second level contains six percentage numbers which individually repre-sent the re-entrant possibilities of each job under the execution modes that shown in the 3rd level. Different execution modes will consume different machine and labor resources. During the encoding, it will randomly choose either mode 0 or mode 1 as its execution mode, thus its re-entrant possibility and corresponding resource consumption will be tracked. Take the Parent 1 X  X  execu-tion modes in Fig. 3 as an example, it is obvious that the job 1, 3, 5 have the rework probability more than 50%, which means all these jobs need to be reworked. The re-entrant jobs will be given other indexes to differentiate from the original job indexes. In this example, the job index with asteroid means the re-entrant job. No matter jobs are original jobs or those re-entrant jobs, they should satisfy the overall resource constraints. Therefore, there are nine jobs for Parent 1 to schedule with the aim of minimizing the total makespan.

It is possible to encode the chromosome in one level. However, when the re-entrant number is not fixed such that the length of the chromosome is not fixed, the crossover operator is hard to implement. Because the cutting point may happen to be placed between the job index and the re-entrant possibility. After cross-over, the abnormal offspring may be generated. In the one-level encoding way, Fig. 3 shows that after crossover is implemented, the offspring 1 would have 6 jobs with 7 re-entrant possibilities that are against the operational practice. Therefore, multi-level encoding which stores the information independently is more appropriate to present the problem and is easier to carry out the crossover/mutation. The detail will be further illustrated in
Section 4.2.2 . 4.2.2. Crossover and mutation operators
As the multi-level chromosome is encoded with different data types for different levels, the crossover operators are conducted independently for different levels. Take the mentioned six jobs case as an example, as shown in Fig. 4 , two-point crossover is executed for execution mode in the 3rd level, while the1st and 2nd levels are kept constant. Then the re-entrant possibilities in the 2nd level are moved concomitantly and the values are unchanged. According to the renewed possibilities, the re-entrant jobs are updated and two offspring of the job sequence are generated. After that, two new job sequences will be extracted and implemented crossover again. During the crossover proce-dure, the job index, re-entrant probability, executive mode will be changed correspondingly.

Mutation procedure is similar to the iterative crossover which starts from the 3rd level and mutation only needs one parent.
For the mutation, as the job schedule is limited by the resource constraint, the mutating job position should within some particular range to satisfy the resource constraint. In Fig. 4 ,takeparent1as an example, the previous feasible execution mode is {011000}, the mutation operator would randomly change the execution mode of one position. At the same time, it will check whether the new chromosome is still within the resource constraint. If the new chromosome is within the resource constraints, keep the chromo-some; otherwise, mutate the genes of chromosome. In this scenario two feasible sequences of execution mode can get: one sequence is {111000} with 3 jobs rework too (job index 1, 3 and 5 need to rework), and another sequence is {011100} with only two jobs (index 3 and 5) need to be reworked. Later the mutation for the job index level is implemented similarly, and the duplicated numbers during the process will be repaired. 4.2.3. Repairing operator flow shop scheduling problem must not violate resource con-straints and the logic of the reentrance process. During the crossover and mutation procedures, re-entrant jobs assigned in the chromosome during the propagation may be positioned before the original jobs. In this case, repairing operator will check the logic of schedule and swap the positions of re-entrant jobs with the original jobs. Besides, repairing operator will also check the resource constraints. 4.2.4. Fitness evaluation the re-entrant flow shop scheduling problem that minimize the makespan as well as satisfy the resource constraints. So the fitness function is set the same as the objective function. 4.2.5. Population size and stopping criteria and constant number of generations can generate good average results even though the problem size increases. The number of re-entrant jobs is increased correspondingly, which greatly amplifies the problem complexity. Thus, we set the stopping criteria as a maximum of 100 generations while the population of each generation (190) is determined by statistical experiments which will be described in the next section. These parameters combina-tion will lead to the best results and the highest degree of robustness. 5. Experimental results
The experiments are carried out to test the effect of the proposed multi-level GA encoding approach for exploring the dependency of resource constraint and repair mode selection. To evaluate our proposed method, the results of the experiments are compared with the homogeneous algorithm of simulated annealing (SA) algorithm. We used the following procedure to compare the quality of solutions found by our GA.

Firstly, the comparisons of small-size problems are conducted (GA X  X  parameters without tuning and SA X  X  parameters with tuning). If GA can work better than SA, GA X  X  parameters are started to be fine-tuned. Secondly, following the design of experiment (DOE) procedure to find out which GA parameters has the most important influence on the fitness value and figure out the best combination of GA parameters. Thirdly, the extended research is carried out to find out the best combination of parameters for the large-size problems and the result of GA is compared with SA.

The reasons for choosing SA for comparison are: firstly, similar as GA, SA is a probabilistic meta-heuristics, so it owns the same advantages of meta-heuristics. Secondly, SA is more suitable to be used for the discrete search space while GA does not have such preference. When the character of the searching space is unknown like the RFSP here, SA can be a good reference. There-fore, in the experiments, SA is run in the same computer configuration using the same objective function. The parameters of SA have been tuned in advance as shown below. In this experiment, the proposed GA and SA methods are implemented in the MATLAB 7.0 on a Pentium 4 3.17 GHz PC with 3.25 G MB memory.

The tested data come from the problem library PSPLIP devel-oped by Kolisch and Sprecher (1997) . Even though the instances are systematically generated by the standard generator ProGen, they do not include the re-entrant characteristics. Therefore, the available best-solution of the PSPLIP data library cannot be used as the benchmark for the re-entrant shop scheduling problem. The distribution of the re-entrant possibility based on the col-lected data from the operation line by barcode system is included in PSLPIP data. Then, those data are run both by GA and homogeneous algorithm SA. Moreover, the comparison will include varying problem sizes and solution complexities to study the effectiveness of the proposed method. In the experiments without parameter tuning, the size of the GA population was set as 200, the crossover probability was 0.8, and the mutation probability is set as 0.4. Each of the GA runs was stopped after 100 generations. Table 1 summarizes the GA and SA parameters used in the experiments, GA X  X  parameters have not been tuned while SA X  X  parameters are tuned in advance. Since both GA and SA are stochastic algorithms, ten independent runs with different ran-dom initial populations are performed for different problem sizes. The best solution by each algorithm was recorded and better solution was marked in bold. 5.1. Comparing genetic algorithm with simulated annealing
In these tests, we give the mean, standard deviation and best performance referring different problem sizes. Table 2 shows the solutions found by GA and SA in these ten runs with re-entrant character and resource constraints. Ideally, the GA-based method should converge to the optimal or near-optimal solution in each run. Computing the average of the best solutions found over the ten independent runs provides an indication of the robustness of the search strategy. In ten out of the twelve tests, GA works better than SA. For the two out of twelve tests showing GA is inferior to SA, the differences of the fitness between them are less than 0.3%. This illustrates that the proposed GA approach is able to consis-tently converge to high-quality solutions in every GA run for different problem sizes. 5.2. Identifying efficient genetic algorithm parameters
Design of experiments was performed to determine the favor-able parameters of the GA. In general, if computation time is unlimited, the best results were obtained with large populations. Furthermore, the quality of the population is based on the proper GA parameters setting. Therefore, the combination of GA parameters determined the quality of the solution. In practical cases when the computational time is limited, the selection of appropriate GA parameters and the combination of the para-meters are crucial to the search result. The tested parameters are shown in Table 3 .

We found that there are statistically significant differences only for the population size, crossover rate and mutation rate. To further explore the importance of these three factors, full factorial design was replicated 10 times in Table 4 . The probabilities of the three factors are all considered at two levels. In Table 5 , the F -test results for each problem size are presently respectively. It is obvious that at 99% confidence interval, only the factor A (population size) is considered by the analysis of variance (ANOVA) to have significant influence on the fitness value (makespan). 5.3. Scheduling a larger problem size
Based on the parameters from the ANOVA test, we applied them into the large-size problem tests again, in which the job sizes range from 50 jobs to 200 jobs, with uniformly distributed re-entrant probability. New experiments are tested with four scenarios. As we have two execution modes and two limited resources, four scenarios are setting as ing the makespan of the re-entrant lines found by GA with SA.
The bold letter indicates the better result and the objective is to minimize the makespan. From Table 6 , around 75% of all the cases show the proposed multi-level GA finds better solutions than SA.
The improvement is about one percentage. 6. Discussion
The search space of the re-entrant flow shop scheduling problem is large even for reasonably problem size. When the number of the re-entrant job is dynamic, the searching difficulty increases. If the number of re-entrant jobs and re-entrant fre-quency are influenced by the execution mode, and the execution mode is constrained by the resource, the complexity of the problem magnifies. Therefore the scheduling of such problem is complicated in the large job size circumstance.

Exact methods can sometimes solve small instances of a complex problem effectively, but it is unable to solve problems of modest or large size within a reasonable period of time. As mentioned before, re-entrant scheduling problem is a complex problem, the computing time to find the optimal solution would increase with an exponential function of the problem size. There-fore, meta-heuristic methods, which can find a solution that is  X  X  X ood enough X  X  in a computing time that is  X  X  X mall enough X  X , can find a nearly optimal solution with a reasonable computational time compared with exact methods. Generally, meta-heuristics are more flexible in two aspects: firstly, they can be adapted to fit the needs of most real-life optimization problems in terms of solution quality and allowed computing time. Secondly, they do not put any demands on the formulation of the optimization problem. Techniques that use global approach, such as genetic algorithm and simulated annealing algorithm, tend to more suitable for the re-entrant scheduling problem. The dependence of the resource constraint and the re-entrant possibility make it necessary to do the execution mode selection and scheduling simultaneously. Therefore, the potential techniques should be able to fulfill this requirement. On the other way, the computa-tional time of exact method is exponentially increased as the size of the problem increases, so the exact methods with large runtime are not suitable of practical concern.

GA and SA belong to the meta-heuristic methods which are capable to do the global search and implement stochastic opti-mization provided that the goal is acceptable in a tolerable amount of time. There are still some differences between them. Simulated annealing algorithm works on a single solution and traverses the search space by applying local transformations to the solution representation. The effectiveness and efficiency of the search mainly depend on whether it can escape the local minima states without losing much computational energy (which is roughly exponential on the energy difference among the surrounding states). Thus the results are not so promising.
On the contrary, GA X  X  global search capability lies on the chromosome representation and search operators. In our pro-posed GA approach, we use multi-level encoding as the problem-specific representation where each level indicates one subtask of the whole work. For the job sequence, we use the permutation representation, where the operations in the chromosomes are topologically sorted. This property is preserved during each crossover or mutation operations by repairing procedure. This repairing procedure, on one hand makes sure the practical concern is taken care. On the other hand it alleviates the computational time spent for the phenotype encoding. Then the most influenced factor of the search operators is found using design of experiment procedure. In addition, ANOVA tests are carried out to obtain the best combination of the parameter setting for following larger problem size experiments. The results confirmed that this kind of encoding method can lead to good convergence with enough diversity of population. Generally, the performance of GA is better and more steady-going. 7. Conclusion
Efficient design of the re-entrant flow shop scheduling is critical for those semi-conductor industries or repairing compa-nies when facing the resource constraints. Several approaches have been proposed for this problem, most of which ignore the dependency between the re-entrant possibility and execution mode selection. In this paper, we have presented a multi-level GA-based approach for balancing the rework percentage and causing higher resource consumption. In this approach, the multi-level encoding keeps the intact information. On the other hand, fastening the convergence of solution is crucial because the execution mode selection and job scheduling are integrated and optimized together. Experimental results on small problem instances have demonstrated the good performance and consis-tency of the proposed approach when compared with simulated annealing algorithm. Furthermore a series of experiments have been carried out to determine the most influenced factor for the GA and the best combination of parameters have been examined. Based on the fine-tuned parameters, large problem size testes are executed and GA shows superiority over SA. The contribution of this paper is the presentation of a robust multi-level encoding genetic algorithm for resource-constrained re-entrant scheduling problem in the flow shop. The approach is customizable and flexible so as to provide significant potential for extension to other constrained optimization problems.
 References
