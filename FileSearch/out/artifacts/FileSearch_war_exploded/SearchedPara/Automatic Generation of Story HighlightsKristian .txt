 Summarization is the process of condensing a source text into a shorter version while preserving its information content. Humans summarize on a daily basis and effortlessly, but producing high quality summaries automatically remains a chal-lenge. The difficulty lies primarily in the nature of the task which is complex, must satisfy many constraints (e.g., summary length, informative-ness, coherence, grammaticality) and ultimately requires wide-coverage text understanding. Since the latter is beyond the capabilities of current NLP technology, most work today focuses on extractive summarization, where a summary is created sim-ply by identifying and subsequently concatenating the most important sentences in a document.

Without a great deal of linguistic analysis, it is possible to create summaries for a wide range of documents. Unfortunately, extracts are of-ten documents of low readability and text quality and contain much redundant information. This is in marked contrast with hand-written summaries which often combine several pieces of informa-tion from the original document (Jing, 2002) and exhibit many rewrite operations such as substitu-tions, insertions, deletions, or reorderings.
Sentence compression is often regarded as a promising first step towards ameliorating some of the problems associated with extractive summa-rization. The task is commonly expressed as a word deletion problem. It involves creating a short grammatical summary of a single sentence, by re-moving elements that are considered extraneous, while retaining the most important information (Knight and Marcu, 2002). Interfacing extractive summarization with a sentence compression mod-ule could improve the conciseness of the gener-ated summaries and render them more informative (Jing, 2000; Lin, 2003; Zajic et al., 2007).
Despite the bulk of work on sentence compres-sion and summarization (see Clarke and Lapata 2008 and Mani 2001 for overviews) only a handful of approaches attempt to do both in a joint model (Daum  X  e III and Marcu, 2002; Daum  X  e III, 2006; Lin, 2003; Martins and Smith, 2009). One rea-son for this might be the performance of sentence compression systems which falls short of attaining grammaticality levels of human output. For ex-ample, Clarke and Lapata (2008) evaluate a range of state-of-the-art compression systems across dif-ferent domains and show that machine generated compressions are consistently perceived as worse than the human gold standard. Another reason is the summarization objective itself. If our goal is to summarize news articles, then we may be bet-ter off selecting the first n sentences of the docu-ment. This  X  X ead X  baseline may err on the side of verbosity but at least will be grammatical, and it has indeed proved extremely hard to outperform by more sophisticated methods (Nenkova, 2005).
In this paper we propose a model for sum-marization that incorporates compression into the task. A key insight in our approach is to formulate summarization as a phrase rather than sentence extraction problem. Compression falls naturally out of this formulation as only phrases deemed important should appear in the summary. Ob-viously, our output summaries must meet addi-tional requirements such as sentence length, over-all length, topic coverage and, importantly, gram-maticality. We combine phrase and dependency information into a single data structure, which al-lows us to express grammaticality as constraints across phrase dependencies. We encode these con-straints through the use of integer linear program-ming (ILP), a well-studied optimization frame-work that is able to search the entire solution space efficiently.

We apply our model to the task of generat-ing highlights for a single document. Examples of CNN news articles with human-authored high-lights are shown in Table 1. Highlights give a brief overview of the article to allow readers to quickly gather information on stories, and usually appear as bullet points. Importantly, they repre-sent the gist of the entire document and thus of-ten differ substantially from the first n sentences in the article (Svore et al., 2007). They are also highly compressed, written in a telegraphic style and thus provide an excellent testbed for models that generate compressed summaries. Experimen-tal results show that our model X  X  output is compa-rable to hand-written highlights both in terms of grammaticality and informativeness. Much effort in automatic summarization has been devoted to sentence extraction which is often for-malized as a classification task (Kupiec et al., 1995). Given appropriately annotated training data, a binary classifier learns to predict for each document sentence if it is worth extracting. Surface-level features are typically used to sin-gle out important sentences. These include the presence of certain key phrases, the position of a sentence in the original document, the sentence length, the words in the title, the presence of proper nouns, etc. (Mani, 2001; Sparck Jones, 1999).

Relatively little work has focused on extraction methods for units smaller than sentences. Jing and McKeown (2000) first extract sentences, then re-move redundant phrases, and use (manual) recom-bination rules to produce coherent output. Wan and Paris (2008) segment sentences heuristically into clauses before extraction takes place, and show that this improves summarization quality. In the context of multiple-document summariza-tion, heuristics have also been used to remove par-enthetical information (Conroy et al., 2004; Sid-dharthan et al., 2004). Witten et al. (1999) (among others) extract keyphrases to capture the gist of the document, without however attempting to recon-struct sentences or generate summaries.

A few previous approaches have attempted to interface sentence compression with summariza-tion. A straightforward way to achieve this is by adopting a two-stage architecture (e.g., Lin 2003) where the sentences are first extracted and then compressed or the other way round. Other work implements a joint model where words and sen-tences are deleted simultaneously from a docu-ment. Using a noisy-channel model, Daum  X  e III and Marcu (2002) exploit the discourse structure of a document and the syntactic structure of its sentences in order to decide which constituents to drop but also which discourse units are unimpor-tant. Martins and Smith (2009) formulate a joint sentence extraction and summarization model as an ILP. The latter optimizes an objective func-tion consisting of two parts: an extraction com-ponent, essentially a non-greedy variant of max-imal marginal relevance (McDonald, 2007), and a sentence compression component, a more com-pact reformulation of Clarke and Lapata (2008) based on the output of a dependency parser. Com-pression and extraction models are trained sepa-rately in a max-margin framework and then inter-polated. In the context of multi-document summa-rization, Daum  X  e III X  X  (2006) vine-growth model creates summaries incrementally, either by start-ing a new sentence or by growing already existing ones.

Our own work is closest to Martins and Smith (2009). We also develop an ILP-based compres-sion and summarization model, however, several key differences set our approach apart. Firstly, content selection is performed at the phrase rather than sentence level. Secondly, the combination of phrase and dependency information into a single data structure is new, and important in allowing us to express grammaticality as constraints across phrase dependencies, rather than resorting to a lan-original highlights that accompanied each story. guage model. Lastly, our model is more com-pact, has fewer parameters, and does not require two training procedures. Our approach bears some resemblance to headline generation (Dorr et al., 2003; Banko et al., 2000), although we output sev-eral sentences rather than a single one. Head-line generation models typically extract individual words from a document to produce a very short summary, whereas we extract phrases and ensure that they are combined into grammatical sentences through our ILP constraints.

Svore et al. (2007) were the first to foreground the highlight generation task which we adopt as an evaluation testbed for our model. Their approach is however a purely extractive one. Using an al-gorithm based on neural networks and third-party resources (e.g., news query logs and Wikipedia en-tries) they rank sentences and select the three high-est scoring ones as story highlights. In contrast, we aim to generate rather than extract highlights. As a first step we focus on deleting extraneous ma-terial, but other more sophisticated rewrite opera-tions (e.g., Cohn and Lapata 2009) could be incor-porated into our framework. Given a document, we aim to produce three or four short sentences covering its main topics, much like the  X  X tory Highlights X  accompanying the (online) CNN news articles. CNN highlights are written by humans; we aim to do this automatically.
 Sentences 37.2  X  39.6 3.5  X  0.5 Tokens 795.0  X  744.8 47.0  X  9.6 Tokens/sentence 22.4  X  4.2 13.3  X  1.7 Table 2: Overview statistics on the corpus of doc-uments and highlights (mean and standard devia-tion). A minority of documents are transcripts of interviews and speeches, and can be very long; this accounts for the very large standard deviation.
Two examples of a news story and its associ-ated highlights, are shown in Table 1. As can be seen, the highlights are written in a compressed, almost telegraphic manner. Articles, auxiliaries and forms of the verb be are often deleted. Com-pression is also achieved through paraphrasing, e.g., substitutions and reorderings. For example, the document sentence  X  The poll found 69 percent of blacks said King X  X  vision has been fulfilled.  X  is rephrased in the highlight as  X  69 percent of blacks polled say Martin Luther King Jr X  X  vision real-ized.  X . In general, there is a fair amount of lexi-cal overlap between document sentences and high-lights (42.44%) but the correspondence between document sentences and highlights is not always one-to-one. In the first example in Table 1, the sec-ond paragraph gives rise to two highlights. Also note that the highlights need not form a coherent summary, each of them is relatively stand-alone, and there is little co-referencing between them. S
NN survey less optimistic, the survey found.  X .

In order to train and evaluate the model pre-sented in the following sections we created a cor-pus of document-highlight pairs (approximately 9,000) which we downloaded from the CNN.com website. 1 The articles were randomly sampled from the years 2007 X 2009 and covered a wide range of topics such as business, crime, health, politics, showbiz, etc. The majority were news articles, but the set also contained a mixture of editorials, commentary, interviews and reviews. Some overview statistics of the corpus are shown in Table 2. Overall, we observe a high degree of compression both at the document and sentence level. The highlights summary tends to be ten times shorter than the corresponding article. Fur-thermore, individual highlights have almost half the length of document sentences. The objective of our model is to create the most in-formative story highlights possible, subject to con-straints relating to sentence length, overall sum-mary length, topic coverage, and grammaticality. These constraints are global in their scope, and cannot be adequately satisfied by optimizing each one of them individually. Our approach therefore uses an ILP formulation which will provide a glob-ally optimal solution, and which can be efficiently solved using standard optimization tools. Specif-ically, the model selects phrases from which to form the highlights, and each highlight is created from a single sentence through phrase deletion. The model operates on parse trees augmented with dependency labels. We first describe how we ob-tain this representation and then move on to dis-cuss the model in more detail.
 Sentence Representation We obtain syntactic information by parsing every sentence twice, once with a phrase structure parser and once with a dependency parser. The phrase structure and dependency-based representations for the sen-tence  X  But whites remain less optimistic, the sur-vey found.  X  (from Table 1) are shown in Fig-ures 1(a) and 1(b), respectively.

We then combine the output from the two parsers, by mapping the dependencies to the edges of the phrase structure tree in a greedy fashion, shown in Figure 2(a). Starting at the top node of the dependency graph, we choose a node i and a dependency arc to node j . We locate the corre-sponding words i and j on the phrase structure tree, and locate their nearest shared ancestor p . We assign the label of the dependency i  X  j to the first unlabeled edge from p to j in the phrase structure tree. Edges assigned with dependency labels are shown as dashed lines. These edges are important to our formulation, as they will be represented by binary decision variables in the ILP. Further edges from p to j , and all the edges from p to i , are marked as fixed and shown as solid lines. In this way we keep the correct ordering of leaf nodes. Finally, leaf nodes are merged into parent phrases, until each phrase node contains a minimum of two tokens, shown in Figure 2(b). Because of this min-imum length rule, it is possible for a merged node to be a clause rather than a phrase, but in the sub-sequent description we will use the term phrase rather loosely to describe any merged leaf node. (a) CC But
NN nsubj phrases (b).
 ILP model The merged phrase structure tree, such as shown in Figure 2(b), is the actual input to our model. Each phrase in the document is given a salience score . We obtain these scores from the output of a supervised machine learning algorithm that predicts for each phrase whether it should be included in the highlights or not (see Section 5 for details). Let S be the set of sentences in a docu-ment, P be the set of phrases, and P s  X  P be the set of phrases in each sentence s  X  S . T is the set of words with the highest tf.idf scores, and P t  X  P is the set of phrases containing the token t  X  T . Let f i denote the salience score for phrase i , deter-mined by the machine learning algorithm, and l i is its length in tokens.

We use a vector of binary variables x  X  X  0 , 1 } | P | to indicate if each phrase is to be within a high-light. These are either top-level nodes in our merged tree representation, or nodes whose edge to the parent has a dependency label (the dashed lines). Referring to our example in Figure 2(b), bi-nary variables would be allocated to the top-level S node, the child S node and the NP node. The vec-tor of auxiliary binary variables y  X  X  0 , 1 } | S | in-dicates from which sentences the chosen phrases come (see Equations (1i) and (1j)). Let the sets i  X  P ,  X  i  X  P capture the phrase dependency in-formation for each phrase i , where each set D i contains the phrases that depend on the presence of i . Our objective function function is given in Equation (1a): it is the sum of the salience scores of all the phrases chosen to form the highlights of a given document, subject to the constraints in Equations (1b) X (1j). The latter provide a nat-ural way of describing the requirements the output must meet.
Constraint (1b) ensures that the generated high-lights do not exceed a total budget of L T tokens. This constraint may vary depending on the appli-cation or task at hand. Highlights on a small screen device would presumably be shorter than high-lights for news articles on the web. It is also possi-ble to set the length of each highlight to be within the range [ L m , L M ] . Constraints (1c) and (1d) en-force this requirement. In particular, these con-straints stop highlights formed from sentences at the beginning of the document (which tend to have high salience scores) from being too long. Equa-tion (1e) is a set-covering constraint, requiring that each of the words in T appears at least once in the highlights. We assume that words with high tf.idf scores reveal to a certain extent what the doc-ument is about. Constraint (1e) ensures that some of these words will be present in the highlights.
We enforce grammatical correctness through constraint (1f) which ensures that the phrase de-pendencies are respected. Phrases that depend on phrase i are contained in the set D i . Variable x i is true, and therefore phrase i will be included, if any of its dependents x j  X  D i are true. The phrase de-pendency constraints, contained in the set D i and enforced by (1f), are the result of two rules based on the typed dependency information: 1. Any child node j of the current node i , 2. The parent node p of the current node i must Consider again the example in Figure 2(b). There are only two possible outputs from this sen-tence. If the phrase  X  the survey  X  is chosen, then the parent node  X  found  X  will be included, and from our first rule the ccomp phrase must also be in-cluded, which results in the output:  X  But whites remain less optimistic, the survey found.  X  If, on the other hand, the clause  X  But whites remain less optimistic  X  is chosen, then due to our second rule there is no constraint that forces the parent phrase  X  found  X  to be included in the highlights. Without other factors influencing the decision, this would give the output:  X  But whites remain less opti-mistic.  X  We can see from this example that encod-ing the possible outputs as decisions on branches of the phrase structure tree provides a more com-pact representation of many options than would be possible with an explicit enumeration of all possi-ble compressions. Which output is chosen (if any) depends on the scores of the phrases involved, and the influence of the other constraints.

Constraint (1g) tells the ILP to create a highlight if one of its constituent phrases is chosen. Finally, note that a maximum number of highlights N S can be set beforehand, and (1h) limits the highlights to this maximum. Training We obtained phrase-based salience scores using a supervised machine learning algo-rithm. 210 document-highlight pairs were chosen randomly from our corpus (see Section 3). Two annotators manually aligned the highlights and document sentences. Specifically, each sentence in the document was assigned one of three align-ment labels: must be in the summary (1), could be in the summary (2), and is not in the summary (3). The annotators were asked to label document sen-tences whose content was identical to the high-lights as  X  X ust be in the summary X , sentences with partially overlapping content as  X  X ould be in the summary X  and the remainder as  X  X hould not be in the summary X . Inter-annotator agreement was .82 ( p &lt; 0 . 01, using Spearman X  X   X  rank corre-lation). The mapping of sentence labels to phrase labels was unsupervised: if the phrase came from a sentence labeled (1), and there was a unigram overlap (excluding stop words) between the phrase and any of the original highlights, we marked this phrase with a positive label. All other phrases were marked negative.

Our feature set comprised surface features such as sentence and paragraph position information, POS tags, unigram and bigram overlap with the title, and whether high-scoring tf.idf words were present in the phrase (66 features in total). The 210 documents produced a training set of 42,684 phrases (3,334 positive and 39,350 negative). We learned the feature weights with a linear SVM, using the software SVM-OOPS (Woodsend and Gondzio, 2009). This tool gave us directly the fea-ture weights as well as support vector values, and it allowed different penalties to be applied to pos-itive and negative misclassifications, enabling us to compensate for the unbalanced data set. The penalty hyper-parameters chosen were the ones that gave the best F-scores, using 10-fold valida-tion.
 Highlight generation We generated highlights for a test set of 600 documents. We created and solved an ILP for each document. Sentences were first tokenized to separate words and punctuation, then parsed to obtain phrases and dependencies as described in Section 4 using the Stanford parser (Klein and Manning, 2003). For each phrase, fea-tures were extracted and salience scores calcu-lated from the feature weights determined through SVM training. The distance from the SVM hyper-plane represents the salience score. The ILP model (see Equation (1)) was parametrized as follows: the maximum number of highlights N S was 4, the overall limit on length L T was 75 tokens, the length of each highlight was in the range of [ 8 , 28 ] tokens, and the topic coverage set T contained the top 5 tf.idf words. These parameters were chosen to capture the properties seen in the majority of the training set; they were also relaxed enough to allow a feasible solution of the ILP model (with hard constraints) for all the documents in the test set. To solve the ILP model we used the ZIB Opti-mization Suite software (Achterberg, 2007; Koch, 2004; Wunderling, 1996). The solution was con-verted into highlights by concatenating the chosen leaf nodes in order. The ILP problems we created had on average 290 binary variables and 380 con-straints. The mean solve time was 0.03 seconds. Summarization In order to examine the gen-erality of our model and compare with previous work, we also evaluated our system on a vanilla summarization task. Specifically, we used the same model (trained on the CNN corpus) to gen-erate summaries for the DUC-2002 corpus 2 . We report results on the entire dataset and on a subset containing 140 documents. This is the same parti-tion used by Martins and Smith (2009) to evaluate their ILP model. 3 Baselines We compared the output of our model to two baselines. The first one simply selects the  X  X eading X  three sentences from each document (without any compression). The second baseline is the output of a sentence-based ILP model, sim-ilar to our own, but simpler. The model is given in (2). The binary decision variables x  X  X  0 , 1 } | S | now represent sentences, and f i the salience score for each sentence. The objective again is to max-imize the total score, but now subject only to tf.idf coverage (2b) and a limit on the number of highlights (2c) which we set to 3. There are no sentence length or grammaticality constraints, as there is no sentence compression. The SVM was trained with the same features used to obtain phrase-based salience scores, but with sentence-level labels (labels (1) and (2) positive, (3) negative).
 Evaluation We evaluated summarization qual-ity using R OUGE (Lin and Hovy, 2003). For the highlight generation task, the original CNN high-lights were used as the reference. We report un-igram overlap (R OUGE -1) as a means of assess-ing informativeness and the longest common sub-sequence (R OUGE -L) as a means of assessing flu-ency.

In addition, we evaluated the generated high-lights by eliciting human judgments. Participants were presented with a news article and its corre-sponding highlights and were asked to rate the lat-ter along three dimensions: informativeness (do the highlights represent the article X  X  main topics?), grammaticality (are they fluent?), and verbosity (are they overly wordy and repetitive?). The sub-jects used a seven point rating scale. An ideal system would receive high numbers for grammat-icality and informativeness and a low number for verbosity. We randomly selected nine documents from the test set and generated highlights with our model and the sentence-based ILP baseline. We also included the original highlights as a gold stan-dard. We thus obtained ratings for 27 (9  X  3) document-highlights pairs. 4 The study was con-ducted over the Internet using WebExp (Keller et al., 2009) and was completed by 34 volunteers, all self reported native English speakers.

With regard to the summarization task, follow-ing Martins and Smith (2009), we used R OUGE -1 and R OUGE -2 to evaluate our system X  X  output. We also report results with R OUGE -L. Each doc-ument in the DUC-2002 dataset is paired with Figure 3: R OUGE -1 and R OUGE -L results for phrase-based ILP model and two baselines, with error bars showing 95% confidence levels. a human-authored summary (approximately 100 words) which we used as reference. We report results on the highlight generation task in Figure 3 with R OUGE -1 and R OUGE -L (error bars indicate the 95% confidence interval). In both measures, the ILP sentence baseline has the best recall, while the ILP phrase model has the best precision (the differences are statistically sig-nificant). F-score is higher for the phrase-based system but not significantly. This can be at-tributed to the fact that the longer output of the sentence-based model makes the recall task easier. Average highlight lengths are shown in Table 3, and the compression rates they represent. Our phrase model achieves the highest compression rates, whereas the sentence-based model tends to select long sentences even in comparison to the lead baseline. The sentence ILP model outper-forms the lead baseline with respect to recall but not precision or F-score. The phrase ILP achieves a significantly better F-score over the lead baseline with both R OUGE -1 and R OUGE -L.

The results of our human evaluation study are summarized in Table 4. There was no sta-tistically significant difference in the grammat-icality between the highlights generated by the phrase ILP system and the original CNN high-lights (means differences were compared using a Post-hoc Tukey test). The grammaticality of the sentence ILP was significantly higher overall as no compression took place (  X  &lt; 0 . 05). All three Articles 36.5 22.2  X  4.0 100% CNN highlights 3.5 13.3  X  1.7 5.8% ILP phrase 3.8 18.0  X  2.9 8.4% Leading-3 3.0 25.1  X  7.4 9.3% ILP sentence 3.0 31.3  X  7.9 11.6% Table 3: Comparison of output lengths: number of sentences, tokens per sentence, and compres-sion rate, for CNN articles, their highlights, the ILP phrase model, and two baselines.
 Model Grammar Importance Verbosity CNN highlights 4.85 4.88 3.14 ILP sentence 6.41 5.47 3.97 ILP phrase 5.53 5.05 3.38 Table 4: Average human ratings for original CNN highlights, and two ILP models. systems performed on a similar level with respect to importance (differences in the means were not significant). The highlights created by the sen-tence ILP were considered significantly more ver-bose (  X  &lt; 0 . 05) than those created by the phrase-based system and the CNN abstractors. Overall, the highlights generated by the phrase ILP model were not significantly different from those written by humans. They capture the same content as the full sentences, albeit in a more succinct manner. Table 5 shows the output of the phrase-based sys-tem for the documents in Table 1.

Our results on the complete DUC-2002 cor-pus are shown in Table 6. Despite the fact that our model has not been optimized for the original task of generating 100-word summaries X  X nstead it is trained on the CNN corpus, and generates highlights X  X he results are comparable with the best of the original participants 5 in each of the R
OUGE measures. Our model is also significantly better than the lead sentences baseline.
 Table 7 presents our results on the same DUC-2002 partition (140 documents) used by Martins and Smith (2009). The phrase ILP model achieves a significantly better F-score (for both R
OUGE -1 and R OUGE -2) over the lead baseline, the sentence ILP model, and Martins and Smith. We should point out that the latter model is not a straw man. It significantly outperforms a pipeline Table 5: Generated highlights for the stories in Ta-ble 1 using the phrase ILP model.
 Table 6: R OUGE results on the complete DUC-2002 corpus, including the top 5 original participants. For all results, the 95% confidence interval is  X  0 . 008. approach that first creates extracts and then com-presses them. Furthermore, as a standalone sen-tence compression system it yields state of the art performance, comparable to McDonald X  X  (2006) discriminative model and superior to Hedge Trim-mer (Zajic et al., 2007), a less sophisticated deter-ministic system. In this paper we proposed a joint content selection and compression model for single-document sum-marization. A key aspect of our approach is the representation of content by phrases rather than entire sentences. Salient phrases are selected to form the summary. Grammaticality, length and coverage requirements are encoded as constraints in an integer linear program. Applying the model to the generation of  X  X tory highlights X  (and sin-gle document summaries) shows that it is a vi-able alternative to extraction-based systems. Both ROUGE scores and the results of our human study Table 7: R OUGE results on DUC-2002 cor-pus (140 documents).  X : only R OUGE -1 and R
OUGE -2 results are given in Martins and Smith (2009). confirm that our system manages to create sum-maries at a high compression rate and yet maintain the informativeness and grammaticality of a com-petitive extractive system. The model itself is rel-atively simple and knowledge-lean, and achieves good performance without reference to any re-sources outside the corpus collection.

Future extensions are many and varied. An ob-vious next step is to examine how the model gen-eralizes to other domains and text genres. Al-though coherence is not so much of an issue for highlights, it certainly plays a role when generat-ing standard summaries. The ILP model can be straightforwardly augmented with discourse con-straints similar to those proposed in Clarke and Lapata (2007). We would also like to generalize the model to arbitrary rewrite operations, as our results indicate that compression rates are likely to improve with more sophisticated paraphrasing. We would like to thank Andreas Grothey and members of ICCS at the School of Informatics for the valuable discussions and comments through-out this work. We acknowledge the support of EP-SRC through project grants EP/F055765/1 and GR/T04540/01.

