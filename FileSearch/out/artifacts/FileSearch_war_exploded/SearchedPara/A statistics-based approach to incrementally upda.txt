 1. Introduction
For most information retrieval systems, one important challenge is that a large document collection requires a specialized indexing structure. Equally important is that such an indexing structure requires an efficient incremental update mechanism.
 1.1. Current methods and problems
An indexing structure used by many IR systems is the inverted file (Zobel, Moffat, &amp; Ram-amohanarao, 1998; Witten, Moffat, &amp; Bell, 1999). In an inverted file, for each distinct word (also the form h term ; f term ; D 0 ; D 1 ; D 2 ; ... ; D f contains the term , and frequency f term indicates the total number of documents in which the term appears (Witten et al., 1999). Additionally, the location of each occurrence of the term in the document (say word position) may be stored with the identifier. When a user sends a request containing some query terms to an IR system, the system searches for these query terms in the inverted file to see which documents satisfy the request, and returns these documents  X  identifiers with word positions to the user. Zobel et al. (1998) showed that in terms of the querying time, used space, and functionality, inverted files perform better than other indexing structures. The inverted file, however, does not support efficient incremental updates (Brown, Callan, &amp;
Croft, 1994). When new documents are added to an existing collection, the inverted lists of the terms appearing in those documents must be updated, ideally incrementally, by appending the new documents  X  identifiers with word positions to the tails of the lists. This update process is and contiguously on disk with no free space between each other (Brown et al., 1994; Shoens,
Tomasic, &amp; Garcia-Molina, 1994). Any increase in length of an inverted list requires complex storage relocation and expensive free-space management.

Most conventional IR systems update the inverted file by periodically re-indexing the entire collection or by periodically merging the old, dated inverted file with the new, batched inverted files for newly arrived documents (Hsu &amp; Lang, 1999). However, as the rate of new document arrivals grows rapidly in most applications today, rebuilding or merging the inverted files becomes too expansive and inefficient (Hsu &amp; Lang, 1999; Ester, Kohlhammer, &amp; Kriegel, 2000; King, 1992).
Sparing free space at the end of each inverted list for future expansion has been proposed (Brown et al., 1994; Tomasic, Garcia-Molina, &amp; Shoens, 1994). In Brown et al. (1994), they deal with the word position inverted lists, and the sizes of the allocated spare space are determined by powers of number or by the multiple of current list length (e.g., 1.5  X  ,2  X  ). In case the spare space of an in-verted list is used up, a larger space is allocated and the contents of the old list are removed to the new space; the frequency of relocations can hence be reduced. Both of these approaches, however, result in much wasted space in an inverted file, and also poor performance in information retrieval.
In fact, the size of the spare space allocated for each inverted list cannot be determined easily due to a complex trade-off between relocation reduction and space utilization. If too much spare space is allocated, the possibly wasted space enlarges the inverted file and slows down the file accesses.
Conversely, if the spare space is insufficient, frequent relocations cause high update costs. The best policy allocates the spare space for each inverted list according to individual space requirement. 1.2. Research goal
In this paper, we propose a statistics-based approach to allocate the spare space for an inverted list when it is relocated. This approach is based on the estimation of the space requirement in a time window. The time window for an inverted list is defined as the time interval between two sequential relocations; that is, from the time a spare space is allocated to the time the list needs to be relocated again. Whenever a time window exhausts, a suitable size of the spare space for the next allocation is predicted based on the statistics of the space usage and document update request rate in this time window. The objective of the prediction is to best guarantee that an inverted list has sufficient reserved space to amortize relocation frequency, and also to keep space utilization high. Experiment results show that the proposed space-sparing approach significantly avoids reorganization for an inverted file, and in the meantime, the wasted space can be well controlled such that the performance of file accesses would not be affected.

This paper is organized as follows. In Section 2, we model the relocation frequency and space utilization in this inverted file problem, and show how to allocate the spare space for a growing inverted list. In Section 3, we present the experiment results. Finally, Section 4 presents our conclusions. 2. Allocating spare space for a growing inverted list
To study the spare space allocation problem for a growing inverted list, we use two variables: relocation frequency and wasted space, to model the update cost and space utilization, respec-tively. By using these two variables, the trade-offs in determining the size of the spare space for an inverted list can be clarified. Note that in this section we deal only with document-level inverted lists that do not contain word position information for simplicity. Later in Section 3, we will show how to apply the proposed technique to word position inverted lists. 2.1. Relocation frequency and wasted space
For a growing inverted list, relocation frequency represents how often the relocation occurs, and wasted space represents how much allocated space is unused over time. Fig. 1 shows an example of relocation occurrences and space usage in the i th time window (see the definition in
Section 1.2) for an inverted list. In Fig. 1(a), the horizontal axis represents time, and we assume If RF i denotes the relocation frequency in the i th time window, we have
In Fig. 1(b), the horizontal axis represents time, and D t space, which starts from n i 1 down to 0. Without loss of generality, we assume that the unit of n is the number of slots and each slot stores an identifier. The identifier arriving at t placed in the first slot, and the spare space remained is n arrives. Each incoming identifier is placed in a slot, causing the spare space to be used up after the n th arrival. The next relocation occurs at t i  X  1 when there is no free space left and the next incoming identifier has arrived. Let WS i denote the accumulated free space (i.e., wasted space) over the i th time window, we have
Assume that identifiers arriving to an inverted list in a time window follow a Poisson process with rate k . The Poisson process is often used to model a sequence of events that happen randomly and independently with a rate over time (Ross, 1996). Note that the identifier arrival rate ( k ) used here is different from the document arrival rate which is the rate of documents being added into a collection. When a new document is added into the collection, the lengths of some inverted lists portional to the document arrival rate multiplied by the probability of the term appearing in a new document. This is what a Poisson process would model because the events of a term appearing in two documents are independent. Under the Poisson process, it is well known that the inter-arrival time is exponentially distributed.
 By the Poisson distribution, the expected relocation frequency derived from Eq. (1) is window. Similarly, the expected wasted space in the i th time window can be expressed as by taking expected values on both sides of Eq. (2). From Eqs. (3) and (4), if we can predict k assign reasonable values to E  X  RF i and E  X  WS i at the start of the i th time window, then the value of n i can be determined at the same time.

To give reasonable values to k i , E  X  RF i and E  X  WS i , we collect the statistics from the last two time windows for prediction. The statistics include the identifier arrival rates, relocation frequency and wasted space over the ( i 2)th and ( i 1)th time windows.
For k i , we assign a predicted value, k 0 i ,toitby rate is increasing (or decreasing) between the last two time windows, i.e., D k assumed that the arrival rate will continue to increase (or decrease) by the same amount. In case the predicted arrival rate drops to below the threshold, i.e., k assumed to be k c in the next time window.

For E  X  RF i and E  X  WS i , we assign predicted values, E  X  RF by and increase in the i th time window, assigning a smaller value to E  X  RF result in either n i &gt; n i 1 or n i &gt; n i 2 . This makes RF decrease in the i th time window, assigning a smaller value to E  X  WS result in either n i &lt; n i 1 or n i &lt; n i 2 . This makes WS
There are three reasons to predict k i , E  X  RF i , and E  X  WS two time windows. First, only one time window is not sufficient for prediction because each observation point in this model is assumed to be the time that a relocation occurs, and we need at least two time windows to observe the trends of identifier arrivals. Second, collecting more recent statistics can help to measure the space requirement more accurately. From the experimental data, we found that three or earlier time windows seem not very helpful for prediction; using dated information is even harmful. We think the reason is that the popularities of some terms appearing in a collection do not always follow a regular distribution. In fact, the problem of how many previous time windows should be used for a good prediction is involved in the research scopes of the statistical method and forecasting (Thomopoulos, 1980). We did not include those detail experimental data in this paper for clarity. Finally, considering the prediction complexity (in-cludes additional storage cost and computation), we suggest that two time windows are very suitable for prediction. In the next section, we will present how n these predicted values. 2.2. Determining n i
By applying Eqs. (5) X (7) to Eqs. (3) and (4), we have two extreme values of n respectively. The first value n i ;  X  3  X  is derived from the consideration of reducing relocation fre-quency, and the latter n i ;  X  4  X  is derived from the consideration of reducing wasted space. To determine n i , we define a weighted function user needs; one of its simple forms may be a  X  b  X  1. For systems with intensive arrivals of database updates, we suggest that a P b to favor larger n inverted lists. Contrarily, for systems with intensive arrivals of information retrieval, we suggest that a &lt; b to favor smaller n i for reducing the time of retrieving inverted lists.
To implement the approach described above, an inverted list is structured as where the additional fields are shown in Table 1. These additional fields are used to store the statistical data from the ( i 1)th and ( i 2)th time windows. With these data, all variables in Eqs. (3) X (8) can be derived.

Fig. 2, Insert ( inv _ list , id ) calls three functions: (1) Create ( inv _ list , t now ): creates a single-slot empty inverted list. (2) Space _ allocate ( inv _ list , t now ): calculates k and
Note that for WS a in Table 1, we accumulate the wasted space by rows upon inserting identifiers as shown in Fig. 3(b), instead of by columns (shown in Fig. 3(a)). This is because from Eq. (2), we have respectively. Accordingly, given t s , t now , and n s , we can obtain the correct value of WS
Once a spare space is allocated, the values of k p ,RF p ,WS respectively; that is, the parameters of the previous time window are replaced by those of the current time window. (3) Update ( inv _ list , t now ): updates n r and WS a (by Eq. (9)) in inv _ list after inserting id .
Because all of these three functions calculate only values for variables, the time complexity of
In Fig. 2, when an inverted list is initially to be created ( Create ( inv _ list , t space is allocated to store the first identifier. The first relocation of this list will occur when the second identifier arrives to the list. This means that the inverted lists which contain only one identifier do not require additional space to store those statistical data in Table 1. This saving is significant for our approach because these inverted lists, in fact, occupy an essential part of all inverted lists. Other inverted lists, which contain more than one identifier, however, require additional space to store the statistical data for spare space measurement, because in a dynami-cally growing document collection, some low frequency terms would possibly become fashion in the future. To avoid those additional statistical data affecting the query performance in retrieving inverted lists, we can isolate them from an inverted file, and reference them only when the relo-cation occurs. 3. Experiment and evaluation
The experiment is used to generate performance data. In performance evaluation, factors to be examined include relocation occurrences, storage space, and retrieval time for an inverted file. 3.1. Experiment environment
We use parts of WT10g, about 460,000 documents, to be our test collection. (WT10g is a widely distributed collection and has been included in TREC Web Test Collections (TREC, 2003).) We implement a Poisson arrival model with different document arrival rates (arrivals/s) to simulate the behavior of those documents being incrementally added into the depository. Then the pro-posed statistics-based approach is applied in constructing the inverted file for indexing those documents. The relocation occurrences and unused free space are monitored over time for per-formance evaluation.

Because the experiment purpose is to evaluate the spare space allocation in updating an in-verted file, the inverted lists have not been compressed here. Witten et al. (1999) proposed many inverted file compression techniques. Most of them could be usefully incorporated into our ap-proach, except compressing the statistical data in Table 1. Recall that these statistical data are to be used only when a relocation occurs in an inverted list. To avoid them affecting the query performance in retrieving inverted lists, we store them in an independent file, and reference this file at the time a relocation occurs. The size of this file will be taken into account as a storage space cost for our approach.

To simulate user query behavior, we implemented a query-term generator which picks query terms from the inverted files. The occurrence of these terms follows the Zipf -like distribution, a distribution widely used in recent IRS studies (Breslau, Cao, Fan, Phillips, &amp; Shenkerm, 1999). In this distribution, the relative probability of a request for the i th most popular term is proportional most traces in homogeneous environments (Breslau et al., 1999). In each experiment, we generated 100,000 user queries, and the lengths of the queries were distributed evenly from one to five terms.
Furthermore, we adopted the Boolean query model, in which the AND, OR, and NOT Boolean operators are uniformly inserted into the generated queries. 3.2. Experiment results
Fig. 4 shows the relocation counts and space utilization in constructing the document-level inverted lists by three approaches. The relocation count denotes the number of relocations oc-curred in related inverted lists when adding new documents, whereas the space utilization denotes the ratio of actual used space size to total inverted file size (containing those unused spare space and statistical data). To examine how the spare space size affects the time of retrieving an inverted proposed in Brown et al. (1994) (denoted as  X  X 2.0  X   X  X  in the figure), and (2) the approach with 1.5 times the current list length for future spare space size as proposed in Tomasic et al. (1994) (denoted as  X  X 1.5  X   X  X  in the figure).
 somewhat higher than those of the  X  X 2.0  X   X  X  approach, and are significantly smaller than those of the  X  X 1.5  X   X  X  approach. On the other hand, in Fig. 4(b), the proposed approach has the highest space utilization, about 86% on average. These results show that there indeed exists a trade-off between the relocation count and the space utilization for  X  X  X ixed-multiplier X  X  approaches (e.g., 1.5  X  ,2  X  ). The statistics-based approach, however, can determine the spare space size for relo-cation saving, or for space saving, depending on adaptive factors. When an inverted list involves fast expansion, the statistics-based approach adjusts the space allocation by relocation-saving strategy; otherwise, by space-saving strategy. This adaptability makes the proposed approach have lower relocation counts but achieve higher space utilization.

In Fig. 4(a), we essentially use the  X  X  X elocation counts X  X  to estimate the update costs. Considering that it takes rather longer to relocate a long inverted list than a short one, we use the  X  X  X verage number of copies per pointer in the index X  X  to factor in this difference, as shown in Fig. 5. In the figure, we find that the 1.5  X  approach has the largest average number of copies per pointer, and the proposed approach has it only a little larger than the 2.0  X  approach does. These results are consistent with the relocation counts derived from Fig. 4(a). If each copy of a pointer requires a fixed execution time, then the 1.5  X  approach takes the largest time to update the inverted file.
We also apply those three approaches to the word position inverted lists. Recall that in our model, relocation frequency and waste space are both related to the identifier arrival rate ( k the spare space size ( n i ) in a time window (see Eqs. (3) and (4)). If we, instead, let k of  X  X  X ord positions X  X  being added to an inverted list, and each word position consumes a unit of the spare space in a time window, then the technique described in Section 2 can also work well for modeling the updates in word position inverted lists. Fig. 6shows the relocation counts and the space utilization if those three approaches are all applied to the word position inverted list updating. In Fig. 6(a), the relocation counts for all three approaches increase greatly due to the space requirements of storing word position information in inverted lists, compared with the results in Fig. 4(a). The proposed approach, however, obtains the smallest relocation counts when the number of documents increases over 260,000, and still keeps the highest space utilization (shown in Fig. 6(b)). This is because when the number of documents exceeds a scale, the fixed-multiplier approaches (e.g., 1.5  X  ,2  X  ) may overestimate space requirements for some slowly growing inverted lists, but underestimate for some other fast growing inverted lists. From Figs. 4 and 6, we find that the statistics-based approach performs very well for both the document-level and word-level inverted lists.
 We examine if the statistics-based approach has a stable behavior under different system loads.
The system loads here are represented in terms of the document arrival rates. Given  X  a ; b  X  X  on both performance metrics. This fact shows that the proposed approach adjusts well to different document arrival rates in estimating the size of the spare space. This can be verified by examining the derivation of n i . Take the relocation frequency as an example. Recall that the identifier arrival rate for an inverted list is dependent on the document arrival rate. If an inverted list has an identifier arrival rate ( k i ) increasing (or decreasing) by m times, it is obvious that its RF increase (or decrease) by m times. Increasing k i and RF i k i  X  1 and E  X  RF i  X  1 p respectively in the next time window (Eqs. (5) and (6)). This will cause n increased in response (Eq. (8)). The similar assessment also applies to the wastes space. Thus the claim stands.
Fig. 7 shows that the proposed statistics-based approach is a relocation frequency-and space utilization-stable method. What this implies is that (1) there are no abrupt peaks of relocations happened at high database-update traffic,and (2) no obvious space wastage at low database-update traffic.

These benefits are especially suited to the IR systems whose database-update traffic-loads are usually very dynamic and unpredictable.

We examine the experiment data, and determine if the proposed statistics-based space allo-cation approach has its advantages. Experiment data say that the statistics-based approach re-quires about 10% more relocations than the  X  X 2.0  X   X  X  approach does for document-level inverted files. Although more relocations look like a disadvantage, there are more important factors to be considered. What the user really cares and sees are: the inverted file constructing time, the inverted file look-up time, and the storage space required.

Assume that the collection of 460,000 documents is ready, and we use the three approaches (1.5  X  , 2.0  X  , and statistics-based approaches) to construct three document-level inverted files for these documents. All documents are processed one by one. If an inverted list occurs a relocation, the spare space is allocated at the end of the inverted file, and its size is determined by the individual strategy of the three approaches. Without loss of generality, the freed list space (after relocation) is discarded to avoid complex reused processing. This would not affect the calculations for the storage space, because we can use the sum of all inverted list lengths to be the inverted file size. After the inverted file is generated, we use the wall-clock to measure the  X  X  X nverted file constructing time X  X  for the three approaches. Also, we use these inverted files to serve the simu-lated queries for measuring the  X  X  X verage query response time X  X . Finally, we calculate the total size of the inverted lists, the spare space, and the statistical data to be the  X  X  X torage space cost X  X .
The proposed statistics-based approach outperforms the  X  X 1.5  X   X  X  and  X  X 2.0  X   X  X  approaches in all these three aspects: For the  X  X  X nverted file constructing time X  X , the ratios of the statistics-based approach versus the other two approaches are
While for the  X  X  X verage query response time X  X , we compare the three approaches listed above with the continuous implementation of which the inverted file does not contain any spare space. The ratios of the average query response time are
And, finally, for the  X  X  X torage space cost X  X , Table 2 shows the relative size of the inverted file information, the spare space, and the statistical data for the three approaches. In Table 2, the inverted file information is the same for all three approaches because we use the same document collection. For the spare space, the  X  X 2.0  X   X  X  approach has the highest spare space size, and the statistics-based approach has the smallest one. For the statistical data, the  X  X  X tatistics-based X  X  approach requires additional space, but the  X  X 1.5  X   X  X  and  X  X 2.0  X   X  X  approaches do not. According to the algorithm we proposed, only 83,630 terms in the inverted file whose inverted lists contain more than one identifier require the statistical data. (The number of total terms is 214,310.) Recall that in the Table 1, there are seven variables of the statistical data required for each inverted list, and assume that each variable is stored in a two-byte integer. Then, we can derive that the total size of the statistical data for our approach equals to 83,630  X  7  X  2, about 1.2 MB. Therefore, the ratios of the storage space cost for the three approaches compared with the continuous implementation of which the inverted file does not contain any spare space are
From the Constructing _ Time and the Space ratios, we find that the proposed approach out-performs the other two approaches. For each inverted list, the trade-off between space and relocation count indeed exists X  X  X his is essentially to be the fundamental of the proposed approach.
The inverted file constructing time, however, is affected not only by this trade-off but also by the total inverted file size. Recall that the inverted file constructing time is the time to construct the whole inverted file for the collection. According to our experiment, the disk seek time and disk transfer time (including the transfers of data and spare space for updating) even take a large part in the inverted file constructing time. Take a slowly growing inverted list for example. If it were allocated a larger space than actually it required, unused space during construction would affect disk accesses for other lists; though the relocation count of that list might be reduced. This is why the relocation count of the proposed approach lies between those of the other two approaches (Fig. 4(a)) but its inverted file constructing time is the smallest X  X  X he proposed approach requires the smallest storage space for the inverted file.

All of these advantages come from the fact that while the  X  X 2.0  X   X  X  or  X  X 1.5  X   X  X  approach suggests a simple way of increasing the storage space for an expanding full inverted list, this simplicity may result in too generous allocations for slowly growing inverted lists, but too short-sighted allo-cations for other lists of the fashion terms. The experiment data show that most allocations are too generously performed. With this improperly wasted storage space, its side effect is even more devastating.

The statistics-based approach provides not only flexibility, but also stability, in spare space allocation. The flexibility is due to that each and every inverted list, upon its running out of expansion space, can be allocated new spare space tailored all for its specific needs. And the stability comes from the fact that: 1. The newly allocated spare space is determined by both the previous allocation amount, and how soon this amount was consumed. With these considerations, we are able to control the amount of allocated spare space (or space utilization in turn) and how soon we expect the next allocation to occur (or relocation frequency). 2. This space is also determined based on the size of two previous allocations. Referencing back to two time windows has the following characteristics. It gives more accurate allocation log data.
It also reveals the tendency of change in allocation space requirements. While more trace-back data may be difficult to analyze and even confusing, two sets of data are very suggestive. And finally, the incurred calculation in making decisions is so simple that the overhead is negligible. 4. Conclusion
We proposed a run-time, statistics-based approach to allocate spare space in an inverted file for future updates. The approach determines the size of spare space according to the trade-offs be-tween space efficiency and space utilization. By adaptively balancing the trade-offs, the proposed approach can incrementally update an inverted file as new documents arrive, and in the meantime, the size of unused free space can be well controlled such that the performance of file access would not be affected. The most important key point of the proposed approach is to use simple, and recently statistical data to meet the space requirements for an inverted file. This is particularly suitable for in-place updating the indexing structure of all kinds in modern large-scale IR systems, e.g., search engines, or in real-time information systems, e.g., news servers.
 References
