 Given a real graph, with weighted edges, which nodes should we consider as  X  X trange X ? Applications of this setting abound: For example, in network intru-sion detection, we have computers sending packets to each other, and we want to know which nodes misbehave (e.g., spammers, port-scanners). In a who-calls-whom network, strange behavior may indicate defecting customers, or telemar-keters, or even faulty equipment dropping connections too often. In a social network, like FaceBook and LinkedIn, again we want to spot users whose behav-ior deviates from the usual behavior, such as people adding friends indiscrimi-nately, in  X  X opularity contests X .

The list of applications continues: Anomalous behavior could signify irregu-larities, like credit card fraud, calling card fraud, campaign donation irregulari-ties, accounting inefficiencies or fraud [6] , extremely cross-disciplinary authors in an author-paper graph [29], network intrusion detection [28], electronic auction fraud [10], and many others.

In addition to revealing suspicious, illegal and/or dangerous behavior, anomaly detection is useful for spotting rare events, as well as for the thankless, but ab-solutely vital task of data cleansing [12]. Moreover, anomaly detection is inti-mately related with the pattern and law discovery: unless the majority of our nodes closely obey a pattern (say, a power law), only then can we confidently consider as outliers the few nodes that deviate.

Most anomaly detection algorithms focus on clouds of multi-dimensional points, as we describe in the survey section. Our goal, on the other hand, is to spot strange nodes in a graph , with weighted edges. What patterns and laws do such graphs obey? What features should we extract from each node?
We propose to focus on neighborhoods, that is, a sphere, or a ball (hence the name OddBall ) around each node(the ego ): that is, for each node, we consider the induced sub-graph of its neighboring nodes, which is referred to as the egonet . Out of the huge number of numerical fea tures one could extract from the egonet of a given node, we give a carefully chosen list, with features that are effective in revealing outliers. Thus, every node becomes a point in a low-dimensional feature space.

Main contributions of this work are: 1. Egonet patterns : We show that egonets obey some surprising patterns (like 2. Scalable algorithm : Based on those patterns, we propose OddBall , a scalable, 3. Application on real data : We apply OddBall 1 to numerous real graphs (DBLP, Of course, there are numerous types of anomalies -we discuss several of them in our technical report [2], but, for brevity, we focus on only the following major types (see Fig.1 for examples and Section 2 for the dataset description): 1. Near-cliques and stars : Those nodes whose neighbors are very well con-2. Heavy vicinities :Ifperson i has contacted n distinct people in a who-calls-3. Dominant heavy links : In the who-calls-whom scenario above, a very heavy The upcoming sections are as follows: We describe the datasets; the proposed method and observed patterns; the experimental results; prior work; and finally the conclusions. We studied several unipartite/bipartite, weighted/unweighted large real-world graphs in a variety of domains, described in detail in Table 1. Particularly, uni-partite networks include the following: Postnet contains post-to-post links in a set of blogs[21], Enron contains emails at Enron collected from about 1998 to 2002 (made public by the Federal Ener gy Regulatory Commission during its investigation), and Oregon contains AS peering information inferred from Ore-gon route-views BGP data. Bipartite networks include the following: Auth2Conf contains the publication records of a uthors to conferences from DBLP, and Don2Com and Com2Cand are from the U.S. Federal Election Commission in 2004 2 , a public record of donations betw een donors and committees and be-tween committees and political candidates, respectively.

For Don2Com and Com2Cand , the weights on the edges are actual weights rep-resenting donation amounts in dollars. For the remaining weighted datasets, the edge weights are simply the number of o ccurrences of the edg es. For instance, if post i contains k links to another post j , the weight of the edge e i,j is set to k .
In our study, we specifically focused on undirected graphs, but the ideas can easily be generalized to directed graphs. Borrowing terminology from social network analysis (SNA),  X  X go X  is an individ-ual node.
Informally, an ego (=node) of a given network is anomalous if its neighborhood significantly differs from those of others. The basic research questions are: (a) what features should we use to characterize a neighborhood? and (b) what does a  X  X ormal X  neighborhood look like?
Both questions are open-ended, but we gi ve some answers below. First, let X  X  define terminology: the  X  k -step neighborhood X  of node i is the collection of node i , all its k -step-away nodes, and all the connections among all of these nodes  X  formally,thisisthe X  induced sub-graph  X . In SNA, the 1-step neighborhood of a node is specifically known as its  X  egonet  X .

How should we choose the value of k steps to study neighborhoods? Given that real-world graphs have small diameter [3], we need to stay with small values of k , and specifically, we recommend k =1. We report our findings only for k =1, because using k&gt; 1 does not provide any more intuitive or revealing information, while it has heavy computational overhead, possibly intractable for very large graphs. 3.1 Feature Extraction The first of our two inter-twined questions is which statistics/features to extract from a neighborhood.

There is an infinite set of functions/features that we could use to characterize a neighborhood (number of nodes, one or more eigenvalues, number of triangles, effective radius of the central node, number of neighbors of degree 1, etc etc). Which of all should we use?
Intuitively, we want to select features that (a) are fast-to-compute and (b) will lead us to patterns/laws that most nodes obey, except for a few anomalous nodes. We spend a lot of time experimenti ng with about a dozen features, trying to see whether the nodes of real graphs obey any patterns with respect to those features (see our technical report [2]). Th e majority of features lead to no obvious patterns, and thus we do not present them.

The trimmed-down set of features that are very successful in spotting pat-terns, are the following: 1. N i : number of neighbors (degree) of ego i , 2. E i : number of edges in egonet i , 3. W i : total weight of egonet i , 4.  X  w,i : principal eigenvalue of the weighted adjacency matrix of egonet i . The next question is how to look for outliers, in such an n -dimensional feature space, with one point for each node of the graph. In our case, n =4, but one might have more features depending on the application and types of anomalies one wants to detect. A quick answer to this would be to use traditional outlier detection methods for clouds of points using all the features.

In our setting, we can do better . As we show next, we group features into carefully chosen pairs, where we show that there are patterns of normal behavior (typically, power-laws). We flag those points that significantly deviate from the discovered patterns as anomalous. Among the numerous pairs of features we studied, the successful pairs and the corresponding type of anomaly are the following:  X  E vs N : CliqueStar : detects near-cliques and stars  X  W vs E : HeavyVicinity : detects many recurren ces of interactions  X   X  w vs W : DominantPair : detects single dominating heavy edge (strongly 3.2 Laws and Observations The second of our research questions is what do normal neighborhoods look like . Thus, it is important to find patterns ( X  X aws X ) for neighborhoods of real graphs, and then report the deviations, if any. In this work, we report some new, sur-prising patterns: For a given graph G ,node i  X  X  ( G ) , and the egonet G i of node i; Observation 1 ( EDPL : Egonet Density Power Law). The number of nodes N i and the number of edges E i of In our experiments the EDPL exponent  X  ranged from 1 . 10 to 1 . 66. Fig. 2 illustrates this observation, for several of our datasets. Plots show E i versus N i for every node (green points); the black circles are the median values for each bucket of points (separated by vertical dotted lines) after applying logarithmic binning on the x -axis as in [23]; the red line is the least squares(LS) fit on the median points. The plots also show a blue line of slope 2, that corresponds to cliques, and a black line of slope 1, that corresponds to stars. All the plots are in log-log scales.
 Observation 2 ( EWPL : Egonet Weight Power Law). The total weight W i and the number of edges E i of G i follow a power law.
 Fig. 3 shows the EWPL for (only a subset of) our datasets (due to space limit). In our experiments the EWPL exponent  X  ranged up to 1.29. Values of  X &gt; 1 indicate super-linear growth in the total w eight with respect to increasing total edge count in the egonet.
 Observation 3 ( ELWPL : Egonet  X  w Power Law). The principal eigenvalue  X  w,i of the weighted adjacency matrix and the total weight W i of law. Fig. 4 shows the ELWPL for a subset of our datasets. In our experiments the ELWPL exponent  X  ranged from 0.53 to 0.98.  X  =0 . 5 indicates uniform weight distribution whereas  X   X  1 indicates a dominant heavy edge in the egonet, in which case the weighted eigenvalue closely follows the maximum edge weight.  X  =1 if the egonet contains only one edge.
 Observation 4 ( ERPL : Egonet Rank Power Law). The rank R i,j and the weight W i,j of edge j in G i follow a power law.
 Here, R i,j is the rank of edge j in the sorted list of edge weights. ERPL suggests that edge weights in the egonet have a skewed distribution. This is intuitive; for example in a friendship network, a person could have many not-so-close friends (light links), but only a few close friends (heavy links).

Next we show that if the ERPL holds, then the EWPL also holds. Given an egonet G i , the total weight W i and the number of edges E i of G i ,let W i denote the ordered set of weights of the edges, W i,j denote the weight of edge j ,and R i,j denote the rank of weight W i,j in set Lemma 1. ERPL implies EWPL, that is: If W i,j  X  R  X  i,j ,  X   X  0 ,then Proof. For brevity, we give the proof for  X &lt;  X  1  X  other cases are similar. If W i,j = cR  X  i,j ,then W min = cE  X  i  X  X he least heavy edge l with weight W min is ranked the last, i.e. R i,l = E i .Thuswecanwrite W i as For sufficiently large E i and given  X &lt;  X  1, the second term in parenthesis goes to 0. Therefore; W i  X  c E  X   X  i , c = W min  X   X   X  1 .Since  X &lt;  X  1,  X &gt; 1. * + 3.3 Anomaly Detection We can easily use the observations given in part 3 . 2 in anomaly detection since anomalous nodes would behave away from the normal pattern. Let us define the y -value of a node i as y i and similarly, let x i denote the x -value of node i for a particular feature pair f ( x, y ). Given the power law equation y = Cx  X  for f ( x, y ), we define the outlierness score of node i to be Intuitively, the above measure is the  X  X istance to fitting line X . Here we penalize each node with both the number of times that y i deviates from its expected value Cx  X  i given x i , and with the logarithm of the amount of deviation. This way, the minimum outlierness score becomes 0  X  X or which the actual value y i is equal to the expected value Cx  X  i .

This simple and easy-to-compute method not only helps in detecting outliers, but also provides a way to sort the nodes a ccording to their outlierness scores. However, this method is prone to miss some outliers and therefore could yield false negatives for the following reason: Assume that there exist some points that are far away from the remaining points but that are still located close to the fitting line. In our experiments with real data, we observe that this usually happens for high values of x and y . For example, in Fig. 2(a), the points marked with left-triangles ( ) are almost on the fitting line even though they are far away from the rest of the points.

We want to flag both types of points as outliers, and thus we propose to combine our heuristic with a density-based outlier detection technique. We used LOF [7], which also assigns outlierness scores out-lof(i) to data points; but any other outlier detection method would do ,aslongasitgivessuchascore.To obtain the final outlierness score of a data point i , one might use several methods such as taking a linear function of both scores and ranking the nodes according to the new score, or merging the two ranked lists of nodes, each sorted on a different score. In our work, we simply used the sum of the two normalized(by dividing by the maximum) scores, that is, out-score(i) = out-line(i) + out-lof(i) . CliqueStar . Here, we are interested in the communities that the neighbors of a node form. In particular, CliqueStar detects anomalies having to do with near-cliques and near-stars. Using CliqueStar , we were successful in detecting many anomalies over the unipartite datasets (although it is irrelevant for bipartite graphs since by nature the egonet forms a  X  X tar X ).

In social media data Postnet , we detected posts or bl ogs that had either all their neighbors connected (cliques) or mostly disconnected (stars). We show some illustrative examples along with descriptions from Postnet in Fig. 1. See Fig.2a for the detected outliers on the scatter-plot from the same dataset.
In Postnet (Fig.4a) nodes such as  X  ThinkProgress  X  X  X  post on a leak scandal 3 and  X  A Freethinker X  X  Paradise  X  X ost 4 linking several times to the  X  ThinkProgress  X  X ost were both flagged. On another note, the slope of the fitting line is close to 0 . 5, pointing to uniform weight distribution in egonets overall. This is expected as most posts link to other posts only once.

In Com2Cand (Fig.4b),  X  Democratic National Committee  X  is one of the top outliers. We would guess that the single large amount of donation was made to  X  John F. Kerry  X . Counterintuitively, however, we see that that amount was spent for an opposing advertisement against  X  George W. Bush  X .

DominantPair flagged extremely focused authors (those publish heavily to one conference) in the DBLP data, sh own in Fig.3c. For instance,  X  Toshio Fukuda  X  has 115 papers in 17 conferences (at the ti me of data collection), with more than half (87) of his papers in one particular conference (ICRA). In addition,  X  Averill M. Law  X  has 40 papers published to the  X  Winter Simulation Conference  X  X nd nowhere else. On the other extrem e, another interesting point is  X  Wei Li  X , with many papers, who gets them published to as many distinct conferences, probably once or twice to each conference (uniform rather than  X  X ursty X  distribution).
See [2] for results on all the datasets and further discussions. 5.1 Outlier Detection Outlier detection has attracted wide interest, being a difficult problem, despite its apparent simplicity. Even the definition of the outlier is hard to give: For instance, Hawkins [16] defines an outlier as  X  X n observation that deviates so much from other observations as to arouse suspicion that it was generated by a different mechanism. X  Similar, but not identical, definitions have been given by Barnett and Lewis [5], and Johnson [19].

Outlier detection methods form two classes, parametric (statistical) and non-parametric (model-free). The former include s statistical methods that assume prior knowledge of the underlying data distribution [5,16]. The latter class in-cludes distance-based and density-based data mining methods. These methods typically define as an outlier the ( n -D) point that is too far away from the rest, and thus lives in a low-density area [20]. Typical methods include LOF [7] and LOCI [27]. These methods not only flag a point as an outlier but they also give outlierness scores; thus, they can sort the points according to their  X  X trangeness X . Many other density-based methods especially for large high-dimensional data sets are proposed in [1,4,11,15]. Finally, most clustering algorithms [9,17,25] reveal outliers as a by-product. 5.2 Anomaly Detection in Graph Data Noble and Cook [26] detect anomalous sub-graphs using variants of the Mini-mum Description Length (MDL) principle. Eberle and Holder [13] use MDL as well as other probabilistic measures to detect several types of anomalies (e.g. unexpected/missing nodes/edges). Frequent subgraph mining [18,30] is used to detect non-crashing bugs in software flow graphs [22]. Chakrabarti [8] uses MDL to spot anomalous edges. Sun et al. [29] use proximity and random walks, to as-sess the normality of nodes in bipartite graphs. OutRank and LOADED [14,24] use similarity graphs of objects to detect outliers.

In contrast to the above, we work with unlabeled graphs. We explicitly focus on nodes, while interactions are also considered implicitly as we study neighborhood sub-graphs . Finally, we consider both bipartite and unipartite graphs as well as edge weights . This is one of the few papers that focus on anomaly detection in graph data, including weighted graphs. We propose to use  X  X gonets X , that is, the induced sub-graph of the node of interest and its neighbors; and we give a small, carefully designed list of numerical features for egonets. The major contributions are the following: 1. Discovery of new patterns that egonets follow, such as patterns in density 2. OddBall , a fast, un-supervised method to detect abnormal nodes in weighted 3. Experiments on real graphs of over 1M nodes, where OddBall reveals nodes Future work could generalize OddBall to time-evolving graphs, where the chal-lenge is to find patterns that neighborhood sub-graphs follow and to extract features incrementally over time.
 This material is based upon work supported by the National Science Founda-tion under Grants No. IIS0808661, iCAST, and under the auspices of the U.S. Department of Energy by UC Lawrence Livermore National Laboratory under contract DE-AC52-07NA27344. This work is also partially supported by an IBM Faculty Award, a SPRINT gift, with additional funding from Intel, and Hewlett-Packard. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the funding parties.

