 The emerging paradigm of web services promises to bring to distributed com-putation and services the flexibility that the web has brought to the sharing of documents (see [1]).

Web service composition ([1,2]) is to build value-added services and web appli-cations by integrating and composing ex isting elementary web services. Because there are usually multiple alternative services for one task, it is time consum-ing to build composite web services based on this large service base. So, it is promising to adopt a two-stage approach. In the first phase, abstract specifica-tions are defined; concrete web services are selected and bound according to QoS optimization for each abstrac t service in the second phase.

In this paper, it is assumed that a composite web service defined using web service type (or abstract web service) is already present. Then the problem is to transform this abstract specification of composite service into an executable process by selecting and binding a concret e web service (or web service instance) for each task. However, the selection o f a web service for one abstract task is not a stand-alone operation, as there may be dependencies on previously chosen services and compatibility conflicts between those chosen services.
This paper will discuss the impact of inter service conflicts on the process of service selection. Firstly, an Integer Programming based method is introduced for dynamic service selection([14]). It is defined on the base of QoS criteria with the objective to optimize overall quality parameter. Then, inter service incompatibility is formally expressed and accommodated into this method by representing conflicts between services as domain specific constraints of the pro-gramming model. Though only incompatible web service pairs are discussed, this approach is general and can be extended to specify other domain specific con-straints. Experiments are conducted to evaluate the effectiveness and efficiency of those methods.

This paper is organized as follows: Section 2 gives a description for web service and composite web service; Section 3 bu ilds an integer programming problem for web service composition with QoS optimi zation; Section 4 pres ents inter service conflicts formally; Section 5 shows some experimental results to illustrate the effectiveness and efficiency of this meth od; Section 6 reviews related works and Section 7 concludes this paper and discusses future work. 2.1 Web Service Description For an application to use a web service, its programmatic interfaces must be precisely described. WSDL [12] is an XML grammar for specifying properties of awebservicesuchas what it does, where it is located and how it is invoked.
A WSDL document defines services as collections of network endpoints, or ports . In WSDL, the abstract definition of endpoints and messages is separated from their concrete network deployment or data format bindings. This allows the reuse of abstract definitions: messages , which are abstract descriptions of the data being exchanged, and port types that are abstract collections of operations . The concrete protocol and data format specifications for a particular port type constitute a reusable binding . A port is defined by associating a network address with a reusable binding, and a collection of ports defines a service([2]).
Though the interfaces are essential to automatic composition and verification of composite web services, QoS properti es of web services provide supports for dynamic service selectio n and composition. QoS model for web service in this paper includes four criteria: reliability, cost, response time and availability([14]).
Reliability: the probability that a service request is responded successfully. Its value is computed using: Num(success) / Num(all) ,where Num(success) records the number of successful invocation and Num(all) the number of all invocation.
Cost: The cost cost(s, op) is the cost that a service requester has to pay for invoking the operation op .

Response time: response(s) measures the expected delay between the moment when a request is sent and the moment when the results are received.
Availability: The availability availability(s) of a service s is the probability that the service is accessible.

So, the quality vector for an operation op of a service s is defined as quality(s, op)=( cost(s, op) , response(s, op) , reliability(s) , availability(s) ) 2.2 Web Service Composition Web service composition i s the process of building value-added services and web applications by integrating and composing existing elementary web services.
In contrast to a web service instance that defines the concrete network address and programmatic interfaces of one single web service, web service type specifies the requirements for a class of web service instances. For web service composition, it is promising to define an abstract process using web service type and then bind a service instance for each task. It is assumed in this paper that the abstract representation of composite web servic e is already present. The task nodes are defined using web service types, independent of any web service instances, any of which can be candidates for executing this task.

The standards for representation of co mposite web service have been proposed for years, such as BPEL4WS [9], WS-Choreography[10], OWL-S[11] etc. The constructs and composition patterns in those standards can be summarized using workflow patterns discussed by [3]. The usually used patterns are sequential, conditional choice (exclusive), parallel and iterative. In this section, the concepts for Integer Programming are first introduced. Then zero-one IP model for web service composition is defined according to [14]. 3.1 Concepts of Integer Programming Definition 1. (Integer Programming) In [4], the author states  X  X ny decision problem (with an objective to be maximized or minimized) in which the decision variables must assume nonfractional or discrete values may be classified as an integer optimization problem. X  For the sake of standardization, the linear integer problem is written as:
Maximize (or minimize) z = subject to j  X  X  1 , 2 ,  X  X  X  ,n } Definition 2. (Zero-One Integer Programming) Zero-one integer programming is a special case of integer problem with the vari-ables being 0 or 1. It is also called binary integer programming.

Integer Programming model provides a formalism for a class of decision prob-lems. While, for the problem of dynamic s ervice selection, the decision about whether one concrete web service should be selected for executing one abstract task is a binary variable with value 0 or 1. And the objective of dynamic ser-vice selection is to optimize some utility objective while keeping the user-defined constraints being satisfied. Thus, it is natural to map the problem of dynamic service selection to a zero-one integer programming problem. The mapping will be discussed in the following subsection. 3.2 Integer Programming for Dynamic Web Service Selection To define a linear IP model, three inputs should be provided: a set of decision variables, an objective function and a set of constraints, where both the objective function and the constraints must be linear. The output of an IP problem is the maximum (or minimum) value of the objective function and the values of the decision variables. (1) Decision Variables
For every web service s ij that belongs to service class i , an integer variable y ij is defined. y ij will be 1 if web service s ij is selected for executing task i and it will be 0 if s ij is not selected. (2) Objective Function
The objective function is to reflect some benefit or utility for service re-questers. It is defined as weighted sum of the quality dimensions that are fa-vorable to the requesters. Such quality criteria are cost (in negative), availabil-ity and reliability. Response time is excluded from objective function definition because it is more natural to be thought as end-to-end constraint.

To express objective function, the quality matrix for a service type i should be first presented. It is already determined to invoke which operation of a web service,so quality matrix can be generated by merging the quality vectors of all candidate services. The matrix for i is a M i  X  4 matrix with the number of candi-date services be M i . Each row corresponds to one candidate web service,with the columns corresponding to response, cost, availability and reliability, respectively. The matrix is of the form:
Then, the matrix is normalized to fall into [0,1]. Based on this matrix, objec-tive function is defined for the whole composite web service.

For nodes without control constructs, the contribution to objective function is defined using formula 1, where k-th dimension of the composite construct. Thus,formula ( 1) is the weighted sum of the quality dimensions. w k is the weight of k-th dimension, with
For conditional, parallel and iterative cases, the contribution to the objective function is defined in the following way.

Firstly, the QoS matrix for all components that participate in the composite construct are built. Then each quality dimension is computed for this composite construct. And again, weighted sum of the quality dimensions is computed as its contribution to objective function.
 Conditional and parallel constructs are used to illustrate this process.
Suppose there are P branches in a conditional construct, with probability p ,p  X  X  X  ,M P , respectively. Then the four dimen sions mentioned above is computed using formula( 2),respectively.
 where k denotes k -th dimension( k  X  X  1 , 2 , 3 , 4 } ). With the definition for those dimensions, the weighted sum can be computed.

For parallel constructs, suppose there are P parallel tasks. The number of candidates for those P service type is M 1 ,M 2 ,  X  X  X  ,M P , respectively. Different from the conditional one, the definition of quality for parallel construct is not the same for all dimensions.
 The quality for each branch is defined as time dimension, the overall time is this definition can not be used in the objective function directly, one preferred branch x is picked for representing time dimension. For cost dimension, it is the same as conditional case.
 For reliability and availability dimensions, the overall quality is defined as linear IP model. So, the definition for these two dimensions are changed into formula ( 3).
 Then logarithm function ln is applied to formula ( 3), which results in formula (4).
 Again, weighted sum of these quality dimensions is computed as its contribution to objective function.

Finally, the objective function for com posite web service is computed by tak-ing the sum of all those constructs as formula( 5).
 (3) Constraints (a) exclusive allocation constraint: For each task i , only one of the M i candi-dates can be selected as the executi on service. This is expressed as: (b) response time: which requires execution time to be in some limited value (c) other constraints: Other user-specified constraints can also be included in this method. In Section 3, the process of dynamic serv ices selection is defined on the assump-tion that the selection of a web service for one task is independent of others. However, this is not necessary the case because there may be conflict of interests between activities. If such a conflict exis ts, the dynamic selection methods dis-cussed in last section can not be applied d irectly. This sectio n will first express the conflicts that may exist between se rvice instances and then accommodate those constraints into the IP approach for dynamic service selection. 4.1 Inter Service Conflicts Each web service may be a global model that invokes a set of web service fol-lowing some composition constructs according to [9] and [3].
 Let A denotes the set of activities in the abstract flow definition.
A = { a
WS = WS WS i is the set of candidate web services for activity a i with cardinality M i . Some of the relationships among these elements are illustrated here.
C : WS  X  A . Given a web service, C( ws ) returns a set of activities that ws are at least k operations defined by web service ws i .
 M : A  X  WS is a 1-to-1 mapping that returns the web service ws ij ( ws ij  X  WS i ) that is assigned to execute activity a i .

E : A  X  WS is a mapping that returns a set of web services that is not INCOM is a binary relation defined on WS . &lt;ws ik ,ws jl &gt; belongs to INCOM if and only if ws ik  X  WS i and ws jl  X  WS j ,and ws ik and ws jl are incompatible web service pairs for activity a i and a j .

Here,itisassumedthattheincompatib le web service pairs have been iden-tified by considering the interfaces confli cts or semantic heterogeneities between inputs/outputs of web services.
 Example 1. An example taken from [8] is used to illustrate the concepts dis-cussed above.

Suppose that a retailer sends an order for three electronic parts to a distrib-utor: item 1, item 2 and item 3. The distributor has a set of preferred suppliers from whom she orders the parts. The distr ibutor needs to retrieve each item from the suppliers and assemble the final results to the requestor. Say suppliers A,B and C can supply item 1, suppliers D, E and F can supply item 2 and supplier G, H and I can supply item 3.

Say further that there are some incompatibilities between the technology of suppliers. The incompatible sets might look like: (A,E),(B,F),(E,I) and (C,G) meaning that if supplier A is chosen to supply item 1, E should not be chosen to supply item 2 and so on.
 The definitions corresponding to this example are summarized here.

A = { a item 2 and item 3, respectively.

WS = { ws web services correspond to the suppliers mentioned above, that is, { A,B,C } , { D,E,F } and { G,H,I } .

For web service ws i  X  WS = { A, B, C, D, E, F, G, H, I } , the activity that a = a For this example, mapping E is not defined.

Mapping M is the result of service selection which will be given after the service selection method is discussed.
 According to the incompatible pairs between the suppliers, the relation INCOM is defined as: &lt;ws ws 4.2 Accommodating Inter Service Conflicts in IP Model Inter service conflicts discussed in las t subsection can be expressed in the IP problem for web service composition. In Section 3, it is mentioned that a 0-1 integer variable y ij is defined for each single web service ws ij that is a candi-date for task i . Based on those variables, the inter service relationships can be expressed formally. Set A is parsed from the definition of composite web service.

Set WS can be retrieved from web service registry where the information about web service interfaces and QoS is stored.

Mapping C represents the functionalities a we b service can fulfill. It can also be retrieved from web service registry.
 ables corresponding to the web service ws ij  X  E ( a i )issetto zero .
Inter service incompatibilities are expressed as constraints of IP problem in-stance with their corresponding variables. Suppose &lt;ws ik ,ws jl &gt; is in INCOM , then this incompatible pair is defined as : y ik + y jl  X  1, which ex-cludes the possibility that both ws ik and ws jl are picked for executing a i and a j simultaneously.

If some web service is assigned to a giv en task beforehand, the variable is set to 1, while the variables for other candidates are set to 0. In this case, the number of allocation constraints is one less than the normal case.
 Example 2. For supplier example, the incompatible service pairs are expressed as
Besides the constraints discussed above, there may be other constraints that is specific to application domains. The approach is general and it can be extended to accommodate those constrains. Experiments are performed to evaluate the effectiveness and performance of the methods discussed in Section 3 and 4. E xperiments settings are: Pentium 4 1.5GHZ with 512M RAM, Windows 2000, jdk1.4.2. The package for comput-ing integer programming model is lp solve. (http://groups.yahoo.com/group/ lp solve/)
Abstract specifications of composite w eb services are defined using web ser-vice type that can be implemented by a c ollection of web service instances. Both web service types and web service instances are stored in Xindice (a na-tive XML database,http://xml.apache.org/xindice/), where the set of service in-stances corresponding to a web service typ e are registered with it. Some columns like service identifier and service name are parsed and stored in Mysql to facili-tate the process of identifying all candida te web services for a given service type. The QoS data are generated according to random variables following Gaussian distribution. The reason for selecting G aussian distribution to describe quality dimensions is based on the consideration that Gaussian distribution can describe the overall characteristics of a set of individuals. The supplier example is defined as a composite web service with a sequence of three atomic web services. QoS data are generated and associated with ea ch web service instance. Table 1 is the data for the supplier example. After representing this example as an program-ming problem and solving it, the solution is: B for item1 ,E for item 2 and G for item 3, which satisfies all constraints.
 Then, experiments are performed to eval uate the performance of this method. Constraints corresponding to inter service conflicts are added to the program-ming model.

Fig. 1. shows the computational time for this method, where the case with conflicts is shown in left side and the case without conflicts in right side. The number of web services involved in service conflicts is equal to the number of tasks. The conflict between task i and j is generated by randomly picking two candidate web services, with one for task i and another for task j .This figure shows that the computing time increases as the number of tasks increases for both cases, in linear approximately. It also reveals that the computing time is acceptable with the problem size in exper iments. For example, it costs almost 1.6982 seconds and 1.4521 seconds for cases with and without conflicts when there are 100 tasks and 50 candidates for each task on average,respectively.
The difference of computat ional performance between cases with and without conflicts is illustrated by Fig. 2. On average, it takes 13% more time for cases when conflicts are present than case without conflicts.

To explore the impact of the number of inter service conflicts on computational performance, experiments are conducted with the number of conflicts set to one,two,three and four times of the number of tasks. Fig. 3. is the result for this set of experiments. It is obvious that the time for reading data will not be impacted, which is also validated by the left side of this figure. From the right side, it shows when the number of conflicts increases it takes more time to create a programming instance and solve it. This is reasonable because it takes more time and more memory to create an instance, which incurs more time to compute this instance and gives a solution.
 The field of modeling web services and their interaction has received considerable attention in recent years. A variety of for malisms have been proposed for formal model of web services composition [1,15], automatic composition, analysis and verification [16,17,18,19].

Besides automatic composition and verification, the topic of QoS-driven web service composition begins to be attended. Related works about this topic are covered in [14,13,21]. Other related work on QoS has been done in the area of workflow such as METEOR [20] and its following METEOR-S [21].

This work is mostly motivated by [14], in which Integer Programming is pro-posed for QoS-aware service composition. All quality dimensions are used for defin-ing both constraints and objective function. While in this paper, the execution time is excluded from the objective function. The reason is that it is more natural to be considered as an end-to-end constraint as far as user favorable function is con-cerned. This paper also illustrates the process of defining objective function when there are composite constru cts. Moreover, this paper focuses on the impacts of in-that the selection of service instances for a task is independent of others. However, the independent assumption is unnecessarily true. This paper presents the mech-anism for representing conflicts of interest between services.

In [8], semantic web service composition with inter service dependencies is discussed.This paper represents inter service constraints in a more formal way than [8]. By expressing those constraints in an integer programming instance, this work can integrate cons traints checking with web service selection. And this paper can select alternative web servi ces based on QoS critiria, where the first service is chosen when multiple services are available.

Web Service Endpoint Language (WSEL) is proposed by IBM to describe endpoint properties of web services([7] ). Work [6] extends WSEL to specify the conflict of interest as one of the endpoint properties. This paper extends it with a general and formal means for expressing domain constraints. Also,different from [6], where the conflict of interest is represented in the format of first order predicate calculus, this paper can repr esent the conflict of interest in a more concise way by using linear constraints of 0-1 programming model. In this paper, web service composition is considered as a two-phase process. Ab-stract specification of composite web servi ce prescribes the relationships between the component web services. The process of service selection and binding is rep-resented as a 0-1 integer programming problem. However, due to the existence of inter service conflicts and dependenc ies, the selection of a web service for a task may depend the selection for other tasks. This work presents an approach for representing inter service conflicts and dependencies. Then, they are accom-modated in the IP model. This approach acts as a unified process for expressing domain constrains and quality of service constraints. Experimental results show this method is effective and efficient.
 This work is supported by the National Natural Science Foundation of China under Grant No. 90412010 and Chi naGrid project of the Ministry of Education, China.
