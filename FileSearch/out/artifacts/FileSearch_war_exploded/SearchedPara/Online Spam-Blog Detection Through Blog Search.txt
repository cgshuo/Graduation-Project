 In this work, we propose a novel post-indexing spam-blog (or splog) detection method, which capitalizes on the re-sults returned by blog search engines. More specifically, we analyze the search results of a sequence of temporally-ordered queries returned by a b log search engine, and build and maintain blog profiles for those blogs whose posts fre-quently appear in the top-ranked search results. With the blog profiles, 4 splog scoring functions were evaluated us-ing real data collected from a popular blog search engine. Our experiments show that the proposed method could ef-fectively detect splogs with a high accuracy.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information filtering Experimentation
Formally defined in [2], a spam blog is  X  X  blog created for any deliberate action that is meant to trigger an unjus-tifiably favorable relevance or importance, considering the blog X  X  true value X . As the presence of splogs could greatly reduce the quality of search results and waste network re-sources, among others, splog detection has recently attracted much attention from research.

Most existing work on splog detection focuses on systems thatcouldbeusedas filters that protect blog search engines X  index from spam, also known as pre-indexing splog filters, illustrated in Figure 1. In contrast, we study the problem of post-indexing splog detection whereweaimatdetecting those splogs that have already successfully slipped through pre-indexing splog filtering, e.g., [4]. Our proposed tech-nique exploits user search queries and their top-ranked blog posts returned by search engines, shown in the right-hand side of Figure 1. The splogs detected could then be fed into either the search engine index, the pre-indexing splog filters, or subsequent post-indexing splog detection. We re-mark that our technique can be implemented on top of any pre-indexing splog filters.
 post graph constructed with all posts in R q,t .Eachvertex in the post graph is a post p i  X  R q,t .Anedgefrompost p i to post p j is created if and only if p j is among the k -nearest neighbors of p i ,where k is a user-defined parameter ( k =20 in our experiments). The similarity between two posts is com-puted using Kullback-Leibler (KL) divergence based on the language models constructed using the words in both title and content of the posts. Based on the constructed graph, we define weighted out-going degree of each post to be the sum of the weights of outgoing edges of the post. The clus-N i is the set of immediate neighbors of p i ; p j ,p j  X  N i ; w j,j is the similarity between p j ,p j (e.g., the weight of the edge from p j to p j ;and | N i | denotes the number of elements in set N i );
Based on the assumption that posts from splogs are likely to be dissimilar to those from legitimate blogs, the spam-post score of a post p , p. spam sore , is derived using a distance-based outlier detection algorithm [3], where the distance be-The spam-post score of a post is assigned by the outlier de-tection algorithm if it is an outlier. If a post is not an outlier but is very similar to the spam seeds, then the post is also assigned a spam-post score. Otherwise, the spam-post score of a post is 0. All newly detected spam-posts are considered as part of the new spam-post seeds. To avoid maintaining a large pool of spam-post seeds as well as to reflect the recent spammer X  X  tactics, the out-dated seeds that are similar to the newly-added seeds will be discarded.
Given a blog profile, we present three (obviously non-exhaustive) scoring functions based on the heuristics stated below, denoted by SF 1 to SF 3 . Each of them independently attempts to estimate the likelihood of a blog being a splog. For the ease of discussion, all state tuples in a given blog pro-file b is denoted as ST . A blog profile consists of the blog X  X  url and a sequence of blog state tuples, each of which is denoted as t, , p. spam sore .
 SF 1 : Inblog increment over time. Based on a recent study SF 2 : Correlation between the number of posts appearing in
We have also tried the detection of sudden bursts as op-posed to sudden shrinks. Nevertheless it was not effective in our experiments. Due to page limit, we choose to report the scoring function involving detection of shrink only.
