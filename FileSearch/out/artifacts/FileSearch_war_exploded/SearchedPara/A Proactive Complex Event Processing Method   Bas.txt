 In Internet of Things (IoT) applications, signals can be processed as events. Complex Event Processing (CEP) [1,3] is used to process huge primitive events and get valuable high-level information. A proac tive event processing system has the ability to mitigate or eliminate undesired future events, or to identify and take advantage of future opportunities, by applying prediction and automated decision making technologies [2]. 
The Predictive Analytics (PA) methods [4,5 ] based on complex events can predict data. Markov Decision Processes (MDP) has been used for proactive event processing [2,6] but there are few papers about how to integrate MDP into proactive event processing and how to process the huge state space of MDP in this area. In this paper, we propose a proactive complex event processing architecture and method (Pro-CEP) on state partition and concurrent actions is proposed to support proactive event processing. A multi-layered Adaptive Dynamic Bayesian Network (mADBN) model is designed for predictive analytics. 2.1 System Architecture and Pred ictive Analytics Method The system architecture is shown in fig. 1. The probabilistic raw events are processed by Probabilistic Event Processing Network (PEPN) to get probabilistic complex events. The PA can predict the states of the system and proactive agents (PRA) execute the actions according to the decision based on MDP. 
The mADBN model is shown in fig. 2. The model contains a state plane and a set of location planes. Each plane is represented by an adaptive dynamic Bayesian objects (moving path). We use a search-and-score algorithm to learn the graph structure of the state plane based on analysis of the vehicle location planes. Let f i,t represent the flow state of (i,t) and pa(i,t) represent the parent nodes of (i,t). N F nodes in the flow states network can be expressed as: 
The conditional probability p(f i,t | F pa(i,t) ) can be calculates as: with (N P + 1)  X  1 vector of mean values  X  m and (N P + 1)  X  (N P + 1) covariance matrix C algorithm. 2.2 Decision Making with Parallel MDP state of a node depends on the states of its neighbors. We call the nodes whose states we want to control proactively important nodes. 
For a graph G=(V,E), neighbor state nodes are defined as N(i)={j  X  V |d i,j  X  k} , where d is the distance of node i and j, and k is a threshold value. A policy for node i at time t level of node i at time t by guiding some vehicles to change their paths. We get: where s is the current state and s X  is the next state. Assume there are n sub-state nodes and n corresponding actions, the total reward can be written as: traffic flow change of node i can be calculated by equation (6): a (notified by a i to change path). P(j k ) denotes the probability that vehicles in node k change their path according to action a i . P(j k ) can be learned from historical data. The total state transaction probability can be calculated based on P(j) and  X  i . we define the defined by equation (7): 
Finally, the optimal policy can be calculated by equation (8): We developed a transportation IoT simulation system based on the road traffic simulation package SUMO . In the experiment we selected 84 junctions from the map run the simulation for many times to get the historical data of the vehicle paths. 
The result of the experiment is shown in figure 3-6 and table 1. From all the experiments we can see our method can support proactive complex event processing well in large-scale IoT applications. Based on the mADBN model, the PA method can get higher accuracy than traditional methods. The parallel MDP model has obvious effect for congestion control in large transportation IoT. The performance of the parallel MDP method decreases when the vehicle number and important node number becomes large but we can get better performance with more servers. In this paper we proposed a proactive complex event processing method using parallel MDP for large-scale IoT. The performance and scalability of Pro-CEP still need to be scalability. In the parallel MDP, the sub-states and sub-action space can also be very large. We need to develop new parallel or approximation algorithms for sub-state.
