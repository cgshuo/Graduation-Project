 With the rapid development of smart devices and wireless communication, especially with the pre-launch of Google Glass, augmented reality (AR) has received enormous at-tention recently. AR adds virtual objects into a user X  X  real-world environment enabling live interaction in three dimen-sions. Limited by the small display of AR devices, content selection is one of the key issues to improve user experi-ence. In this paper, we present an aggregated random walk algorithm incorporating personal preferences, location infor-mation, and temporal information in a layered graph. By adaptively changing the graph edge weight and computing the rank score, the proposed AR recommender system pre-dicts users X  preferences and provides the most relevant rec-ommendations with aggregated information.
 H.4 [ Information Systems Applications ]: Miscellaneous Augmented Reality, Recommender System, Random Walk, PageRank, Graph, High-dimensional
Augmented reality (AR) is an emerging technology that embraces cutting-edge developments in sensing and smart devices, wireless communication, pervasive computing and intelligent environments. It augments users X  experiences by adding virtual objects and allowing users to interact in real time and space [4]. Current AR systems are mainly based on smart devices such as Google Glass and iPhone, with limited screen size. Content displayed on a small screen can
This research was supported in part by the Center for Sci-ence of Information (CSoI), an NSF Science and Technology Center, under grant agreement CCF-0939370, and by sup-port from Deutsche Telekom T-Labs.

In recommender systems, there are lists of both users and items. Each user provides scores or linguistic terms such as  X  X ike X  or  X  X islike X  to rate a subset of all possible items. Recommender systems such as Netflix and Amazon are de-signed to help select useful and relevant information for a specific user. It can be formulated as a matrix completion problem for the user-item rating matrix [2]. However, in some cases, extra information may help improve recommen-dation quality, such as temporal information, location infor-mation and social network information [12, 10]. One pos-sible approach for incorporating this additional information is multi-dimensional collaborative filtering. [11] and [1] used a reduction-based algorithm and applied classic 2D collab-orative filtering algorithms to produce a final recommenda-tion. This approach has limitations. For example, when we extend available ratings into high dimension, the data will become extremely sparse and many existing algorithms will lose their effectiveness. Also, when multiple dimensions are decoupled as pairs of dimensions, relationships among more than two dimensions are likely to be lost. Therefore in this paper, we propose a layered graph to aggregate high dimensional information and use a random walk algorithm to make recommendations. The problem is formally formu-lated as below.

Assume that there is a set of users U = { u 1 ,...,u m } and a set of places I = { i 1 ,...,i n } . Traditionally, a two dimen-sional rating matrix U  X  I  X  R can be constructed. Each element r u,i in R denotes user u  X  X  rating of place i . The ratings can be either explicit, for example, on a 1-5 scale as in TripAdvisor, or implicit such as  X  X isited X  or  X  X ot visited X . The rating data typically specifies only a small number of the elements of R . We further assume binary label and user social information is given. Let L = { l 1 ,...,l k } be the set of label information of items. For example, for places, L can be restaurants, shopping malls, bus stops, etc. L i  X  X  0 , 1 } k denote the features of place i , where k is the total num-ber of labels. Correspondingly, let S = ( U, X  ) contain social network information, represented by an undirected or di-rected graph, where U is a set of nodes while  X  is a set of edges.  X  u,v  X  U , ( u,v )  X   X  if v is a friend of u . We fur-ther denote set of times as T and location set as P . Then the multidimensional rating matrix will be formulated as R = U  X  I  X  L  X  T  X  P . Given the target user u , the current time t and current location p , our ultimate goal is to find the optimal place defined below.
In the following part, we will address the questions men-tioned above with a proposed random walk algorithm.
Several random walk algorithms [12, 10] have been pro-posed for the traditional recommender systems but they fail to handle with the characteristics of AR systems. In this sec-tion, we will describe our random walk algorithm in detail, and discuss how to deal with specific issues in multidimen-sional AR recommender systems.
Assume that a random walk with an initial distribution is applied in such a weighted graph. The path is a sequence of random variables X 1 ,..X t ,... , which form a Markov chain and the future state only depends on the current state. We need to further normalize the weight to make it a transition probability.

Let Y 1 ,Y 2 ,...,Y s denote s layers in the graph. We first define the transition probability T ij between different layers Y ,Y j .
 Specifically in this case, we have 3 layers U,I,L and we define T ij = 1 3 ,  X  i,j  X  X  1 , 2 , 3 } .

We further define the transition probability between dif-ferent nodes n i  X  Y x ,n j  X  Y y . It is normalized by all weights to the layer Y y times a layer transition probability T xy .
P where Out i = { n | ( n i ,n j )  X  E } .
Another important factor in the AR recommender system is the temporal information. For example, users at noon may look for restaurants rather than nightclubs, while at around 3pm they might prefer coffee or ice cream rather than fine food. Accordingly, we will calculate the probability P u ( t ) of every label activities within each time slot, say half an hour or an hour. Here P u ( t ) is a k  X  1 histogram distribution vector to denote the probability that a specific user u looks for some places related to label l at time slot t .
For the recommendation graph G = ( V,E ), let the | V | X  1 vector  X  denote the customized probability vector. We will illustrate how to set  X  based on a customized request in the following. We define another parameter  X   X  [0 , 1], called the damping factor. With probability  X  , the random walk will continue its path in G . Otherwise, it will go back to the customized probability distribution  X  . Let the | V | X | V | matrix M denote the Markov transition matrix, in which M ij = P ji in Eqn.(3). We further define  X  as the stationary distribution for this random process. It satisfies the follow-ing equations: Therefore, we can transform Eqn.(4) into where 1 T is a | V | X  1 vector and 1 T  X  = |  X  | 1 = 1.
We define A =  X M +(1  X   X  )  X  1 T and the rank score  X  would be the eigenvector of A . In the following section we will assign suitable  X  for different purposes. Based on Eqn.(5), we can calculate the rank score  X  .
Table 1: Average Percentile of Recommendations Table 3: Average Distance of Top Recommendations
We downloaded the Gowalla dataset 1 , which contains 19,183 users, 30,367 places in NYC and 357,753 check-ins in each of which records a specific place a user has visited. We ran-domly select 100 users, 100 most popular places and 831 corresponding check-ins to construct the transition graph. Due to the incomplete data, in this experiment the layered graph only contains users, locations and check-in informa-tion. Then a target user is randomly picked and the current location is randomly generated. We use the proposed algo-rithm to recommend places to the target user and calculate three measures of the top recommendation list. Percentile is the average position (in percentage) of the actual visited places out of the whole set of places, where 99% denotes the top 1%. Recall is the number of hits (i.e., the visited places) of the top n recommendations divided by the total number of visited places. These two measures can evaluate the ef-fectiveness of recommendations. The average distance of the top recommendations can evaluate whether the location factor is taken into account in the recommendations. In the experiment, we set  X  = 0 . 85 and vary  X  to see the different performance of the algorithm. Note that when  X  = 0, the algorithm will become the traditional random walk without location information. We compare the average percentile, recall, and average distance with different  X  . We repeatedly generate target user and current location 500 times. The average results are reported in Table 1, 2 and 3.

The results show that incorporating location indeed im-proves AR applications by reducing the average distance of top recommendations. When  X  becomes larger, the average distance decreases while the percentile and recall decrease as well. Therefore the value of  X  can deal with the trade-off between recommendation accuracy and average distance. Larger  X  means higher priority of distance and lower weight on personal tastes.
In this paper, we have proposed using recommender sys-tems to improve AR, specifically by applying a random walk algorithm to AR recommender systems. We incorporate lo-cation information into the weight of edge in the graph and incorporate temporal statistics as well into the rank score. Therefore we aggregate the user X  X  personal preference, loca-tion information and temporal information into the biased http://code.google.com/p/locrec/downloads/list
