 With the rapid expansion of online social networks, social network-based recommendation has become a meaningful and effective way of suggesting new items or activities to users. In this paper, we propose two methods to improve the performance of the state-of-art social network-based rec-ommender system (SNRS), which is based on a probabilistic model. Our first method classifies the correlations between pairs of users X  ratings. The other is making the system robust to sparse data, i.e., few immediate friends having few common ratings with the target user. Our experimen-tal study demonstrates that our techniques significantly im-prove the accuracy of SNRS.
 H.3.3 [ Information Search and Retrieval ]: Information Filtering; J.4 [ Computer Applications ]: Social and Be-havioral Sciences Recommender System, Social Network, Social Influence
Recommender systems have become an important and in-dependent research area since the mid-1990s [1], achieving great success in e-commerce. Many famous online vendors such as Amazon and Netflix leverage recommender systems to advertise products to customers. These systems also serve as effective tools to help users in finding useful information and overcoming the problem of information overload. Recently, many online social networks (OSNs), such as Facebook and LinkedIn, have emerged and attracted a vast number of users. Social networks contain enormous informa-tion which is still growing rapidly as more and more users join them. Besides, it is a common phenomenon that we Work supported by grant 715413E from Hong Kong RGC. usually turn to our family, friends and acquaintances for suggestions when we want to make a decision or a purchase. Also, we tend to affiliate and establish relationships with people who share the same interests with us. Since social influence may affect users X  acceptance of recommendations, researchers have proposed to mine valuable contextual in-formation (e.g., time, location, mood and relationship) from OSNs and take social influence into consideration in the rec-ommendation process, to supplement the traditional data (i.e., user ratings). These social-based recommendation ap-proaches are briefly introduced in Section 2.2.

In this paper, we improve the state-of-art social network-based recommender system (SNRS) [3]. Specifically, we (i) classify the correlations between pairs of users X  ratings to improve the recommendation accuracy and (ii) make SNRS robust against sparse data. Our experiments on real data confirm the effectiveness of our improvements over the orig-inal SNRS and a collaborative filtering approach.
The state-of-the-art SNRS [3] utilizes the information in social networks to improve the performance of traditional recommender systems. The idea behind SNRS is to use a simplified homogeneous social network as a Bayesian net-work. The probability distribution of the target user U  X  X  rating on the target item I is calculated as: P r ( R UI = k ) = 1 where a I and a J are the attribute values for item I and item J in a m dimensional attribute space A . For example, a = { Italian, Low } are the attribute values for restaurant I in a restaurant rating system with A = { Cuisine, P rice } . P r ( R UJ = k | a J = a I ) is U  X  X  preference for items similar to I , i.e., the conditional probability that the target user U will give a rating k to a item J with the same attribute values a I as item I . P r ( R I = k ) is the general acceptance of the target item I , i.e., the prior probability that the tar-get item I receives a rating value k . H UV is a histogram recording the differences in ratings between users U and V . For example H UV (  X  1) is the number of items J such that R UJ = R V J  X  1. N ( U ) denotes the immediate friends of U ; influences of all users in N ( U ) to U can be modeled as a product of the normalized histograms of individual friend malizing constant for the histogram of each immediate friend pair. Z serves as the normalizing constant to guarantee P k ( P r ( R UI = k ) = 1). The estimated value of R UI is the expectation of the distribution P r ( R UI = k ).

The drawback of Equation 1 is that it cannot be used if the target user has no immediate friends or the immedi-ate friends have no ratings on target item. For this reason, SNRS uses an iterative classification method [10] to utilize friend-of-friends inference, based on the fact that estimating the class of an entity often depends on the class estima-tions of its neighbors. It predicts the user U  X  X  rating on each target item on a limited user set N 0 ( U ) = U  X  N ( U ). Each iteration processes all users of N 0 ( U ) at a random per-mutation. A user is skipped if lacking immediate friends X  information. The process stops after M iterations or when no more updates happen in the current iteration.

Example 1. Figure 1 and Table 1 show an example so-cial network and the items rated by users U A and U B . Sup-pose that we are targeting user U A  X  X  rating on item I 6 limited user set N 0 ( U A ) contains users U A , U B , and U since users U B and U C are U A  X  X  immediate friends in the social network. Consider a random order ( U A , U C N ( U A ) in the first iteration. User U A is firstly considered. Assume that only U B has a rating on I 6 . According to Ta-ble 1, the histogram of rating differences between U A and U are H U A U B (0) = 2 , H U A U B (1) = 2 and H U A U 0 , 0 . 2 , 0 . 4 , 0 . 4 , 0 when R U A I 6 = 1 , 2 , 3 , 4 , 5 , R Z
B = P H U A U B = 5 . Hence, there are three possible rat-ings 2, 3 and 4 for R U A I 6 . Then, user preference can be calculated using: where n = 5 and m = 1 represent the possible ratings and dimensionality of A , respectively. I ( Q ) is the set of items which meet the conditions of Q . To be precise, P r ( R U malization. When user attributes are not available, item acceptance can be calculated using: Thus, P r ( R I 6 = k ) = 0 . 25 , 0 . 5 , 0 . 25 when k = 2 , 3 , 4 after normalization. Finally, the probability distribution that user U
A will give item I 6 a rating of k , after the first iteration can be obtained using Equation 1, i.e., P r ( R U A ing is the expectation of the probability distribution which is 3.2308.

With the popularity of social networks, traditional recom-mender systems take advantage of additional information, such as user friendships and social influence, to improve their effectiveness. Social network-based collaborative fil-tering approaches [2, 6, 7] give higher weight to friends of users rather than considering a set of anonymous similar users. Matrix factorization based social recommender sys-tems [8,9] also leverage the information from social networks and take the influence from friends into consideration. Be-sides, there are some other approaches that consider social influence [3, 5, 11].
In this paper we improve the SNRS described in Section 2.1 in two ways. First, we classify the correlations between pairs of users ratings to improve the accuracy of the system. Second, we make the system robust to sparse data, i.e., when there are few immediate friends with few common ratings with regard to the target user.
The correlations between the target user and his/her im-mediate friends learned from their common rated items are based on the assumption that each pair of friends behave consistently on reviewing the items. However, disagreement exists among friends in practice. We propose to use a Bipo-lar distribution to classify correlations between friends into two categories: LIKE and DISLIKE, such that conflict rat-ings (the target user likes item I , while one immediate friend dislikes it, or vice versa) can be ignored when doing recom-mendation. In addition, each user may have a personal rat-ing preference. For instance, given a 5 scale rating system, a strict user may give ratings ranging from 1 to 3, while a lenient user usually offers ratings ranging from 3 to 5. If these two users are immediate friends, such different ratings may have a negative effect on each other X  X  recommendation. Thus, we propose to use the differences between rating devi-ations from each user X  X  average rating values when comput-ing the correlations, instead of the original rating differences.
Specifically, the existing rating of each user U on each item I is firstly converted into the deviation  X  R UI from the average rating value R U for U and then the rated items for each user U are classified into S LIKE U and S DISLIKE U cate-gories. Note that  X  R UI is rounded to the nearest integer. Formally,
The correlations between the target user U and all the immediate friends V are calculated as ( Q
Example 2. Consider the social network and the ratings in Figure 1 and Table 1. Users U A  X  X  and U B  X  X  average rating values are 4 and 3.9, respectively. The converted ratings are shown in Table 2. The items rated by U A and U classified into two categories which are displayed in Table 3. When estimating user U A  X  X  rating on item I 6 , we obtain S  X  1 &lt; 0 falls in the DISLIKE category. Then we have the histogram of converted rating differences between U A and U 1 when  X  R U A I 6 =  X  1 ,  X  R U B I 6 =  X  1 and Z U B = 1 . At last, the probability distribution of U A  X  X  rating on I 6 estimated using Equation 1.
 Similarly, when estimating U A  X  X  rating on I 7 , we obtain S 1 &gt; 0 falls in the LIKE category. Then we have the his-togram of converted rating differences between U A and U ( X  R U A I 7  X   X  R U B I 7 ) = 0 . 33 , 0 . 33 , 0 . 33 when  X  R 0 , 1 , 2 ,  X  R U B I 7 = 1 and Z U B = 3 . At last, the probabil-ity distribution of U A  X  X  rating on I 7 can be estimated using Equation 1.
In a social network, some users may have few immediate friends, and friends may have few common ratings; then, the user set N 0 ( U ) (including the target user and the immediate friends) considered in each estimation iteration may be too small and the social influence may not be well considered in the recommendation. To address this data sparsity problem, we define temporal influence links in the social network. In each iteration, N 0 ( U ) is extended to also include all users that can reach the target user via temporal influence links.
Definition 1. A temporal influence link E ( V, U ) is a di-rected edge from user V to user U if and only if (i) U and V are immediate friends, (ii) they both rated at least one common item I, and (iii) V rated I (at timestamp t ) before U did (at timestamp t +  X  t ).

Definition 2. User V 0 can reach user V n via temporal influence links if there exists a sequence of users V 1 , V , 1 exist.

Example 3. Figure 2 shows exemplary temporal influ-ence links in a social network. Edge E ( U D , U B ) is an tempo-ral influence link, since (i) users U D and U B are immediate friends, (ii) they both rated item I 4 , and (iii) user U I (at timestamp t 2 ) before U B did (at timestamp t 4 ). User U
H can reach user U A via temporal influence links, since temporal influence links E ( U H , U F ) , E ( U F , U C exist. Suppose we are estimating user U A  X  X  rating on an item. By considering the temporal influence links, the user set N 0 ( U A ) includes users U A , U B , U C , U D , U F eration. Recall that in the SNRS system, only U A , U B , and U C are considered in one iteration.

We crawled a dataset from a real social network-based recommender system called Dianping 1 , which is a leading local restaurant search and review platform in China. The dataset contains a social network of 11,352 users and users X  ratings on 10,657 restaurants, where a 5-scale rating system is used. The statistics of the dataset are displayed in Ta-ble 4. Figure 3 illustrates the rating differences d between friends on restaurants in this dataset. For example, 248 for rating difference of -4 means that there are 248 pairs of rat-ing records where a user gave a rating which is 4 less than the previous rating given by one friend on the same restau-rant. Note that the counts for  X | d | are not equal since we consider the chronological order. From Figure 3 we can see that indeed disagreements may exist among friends, as we describe in Section 3.1. Each user in the dataset has rated at least one restaurant. Ratings are ordered in ascending order of the time when they are created. The K % most re-cent ratings from each users are held out for testing and the (100-K )% older ratings are used for training.
 Table 4: General statistics of Dianping dataset
Most of the recommender systems adopt the coverage and accuracy metrics to evaluate performance [1]. Coverage measures the percentage of items for which a recommender system can make predictions. We use Mean Absolute Error (MAE), which is defined as the average absolute deviation of the predicted rating to the real rating, to measure the accuracy of our approach because it is widely used in the evaluation of rating-based recommendation [1, 4]. We apply http://www.dianping.com a leave-one-out technique, which means hiding a real rating and trying to predict it in our test. The definition of MAE is as follows: where R ui is the real rating of target user u on target restau-rant i , R 0 ui is the predicted rating, and N denotes the num-ber of tested ratings.
We compare our proposed recommendation approaches to two methods:
The experimental results on Dianping dataset are dis-played in Table 5. Approach SNRS* uses the classified cor-relations (Section 3.1) and Approach SNRS** incorporates both enhancements proposed in Section 3.

From the results, we can see that: (1) SNRS* and SNRS** outperform CF (more than 26%) and SNRS (more than 13%) in terms of MAE, since classify-ing friends X  correlations based on their rating histories and incorporating more social influences by the temporal influ-ence links can help improving the accuracy of recommenda-tion. SNRS also has lower MAE than CF, showing the effec-tiveness of social network-based recommendation. SNRS** is slightly worse than SNRS* on MAE showing that the ex-panding of the user set may have side effect, since some less similar users are taken into account in recommendation. (2) As for coverage, SNRS has a stable performance of around 0.7. CF also has a good performance since it can always give prediction if the target item has at least one rater and the Pearson correlation similarity between this rater and the target user is calculable. The filtering of ratings where friends disagree is a possible reason why SNRS* and SNRS** do not have a good coverage compared to SNRS. Also, the breaking of temporal influence links may result in the decrease of coverages of SNRS* and SNRS**, since the percentage of training data decreases. Still, SNRS** performs no worse than CF in terms of coverage. Compared to SNRS*, SNRS** has a better coverage, indicating that temporal influence links can incorporate more information that increases the estimation probability.
In this paper, we extended a social network-based recom-mender system (SNRS) [3], which utilizes the information in social networks to improve the performance of traditional recommender systems. Two methods were proposed to im-prove performance. One is classifying the correlations be-tween pairs of users ratings to improve the accuracy of the system. The other is making the system robust to sparse data, i.e., when there are few immediate friends with few common ratings with regard to the target user. Experi-ments on a real dataset demonstrate that our approach has a better performance compared to a collaborative filtering method and the original SNRS. In the future, we plan to further study the impact of social influence in recommen-dation and investigate ways to improve the coverage of our method when the data is sparse. [1] G. Adomavicius and A. Tuzhilin. Toward the next [2] X. Cai, M. Bain, A. Krzywicki, W. Wobcke, Y. S. [3] J. He and W. W. Chu. A social network-based [4] J. L. Herlocker, J. A. Konstan, L. G. Terveen, and [5] M. Jamali and M. Ester. TrustWalker : a random walk [6] H. Kautz, B. Selman, and M. Shah. Referral web: [7] F. Liu and H. J. Lee. Use of social network information [8] X. Liu and K. Aberer. Soco: a social network aided [9] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King. [10] J. Neville and D. Jensen. Iterative classification in [11] Y. Pan, F. Cong, K. Chen, and Y. Yu. Diffusion-aware
