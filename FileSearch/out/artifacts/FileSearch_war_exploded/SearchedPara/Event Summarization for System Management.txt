 In system management applications, an overwhelming amount of data are generated and collected in the form of temporal events. While mining temporal event data to discover inter-esting and frequent patterns has obtained rapidly increasing research e orts, users of the applications are overwhelmed by the mining results. The extracted patterns are gener-ally of large volume and hard to interpret, they may be of no emphasis, intricate and meaningless to non-experts, even to domain experts. While traditional research e orts fo-cus on nding interesting patterns, in this paper, we take a novel approach called event summarization towards the un-derstanding of the seemingly chaotic temporal data. Event summarization aims at providing a concise interpretation of the seemingly chaotic data, so that domain experts may take actions upon the summarized models. Event summarization decomposes the temporal information into many indepen-dent subsets and nds well tted models to describe each subset.
 H.2.8 [ Database Management ]: Database Applications-data mining Algorithms,Experimentation, Human Factors Event summarization, Temporal dependency, ERN, Log
The work is partially supported by an IBM Faculty Re-search Award, an IBM SUR award, and NSF IIS-0546280.
Wit hadvanceme ntinscienc eandtechnolog y,computing systems are becoming increasingly more dicult to moni-tor, manage or maintain. Traditional approaches to manage systems have been largely based on domain experts through a knowledge acquisition process to translate domain knowl-edge into operating rules and policies. This has been experi-enced as a cumbersome, labor intensive, and error prone pro-cess. Therefore data mining techniques have been applied to discover frequent and interesting patterns from system tem-poral events to monitor and manage computing systems [1, 2].

In system management applications, temporal event data are generated and collected in the form of temporal events. Data mining approaches for analyzing temporal events gen-erally focuses on discovering frequent or interesting patterns in the data{albeit their occurrences may only account for a small fraction of the entire data. It has attracted intensive research e orts, and as a result, a variety of temporal data mining algorithms have been proposed to speed up the dis-covery of such patterns, as scalability and eciency are the major focus of these e orts. However, the extracted tempo-ral patterns tend to be massive, without emphasis, intricate, and uninterpretable. Most of them are meaningless or use-less to nonexperts, even analysts.

Hence correctly understanding and interpreting patterns is a big challenge. It is of critical importance to enable temporal relationships between events hierarchical and more user-friendly for monitoring and managing complex systems. In this paper, we take a novel approach and demonstrate that an e ective way to understand the seemingly chaotic temporal data is through event summarization, which at-tempts to use well-tted models to describe the entire data set. Good summarization leads to models that provide con-cise and comprehensible interpretation of the data so that domain experts can take actions upon each subset of the data. In this paper, we introduce event summarization as a systemic process that summarizes and interprets datasets.
To illustrate the problem, we present a real-world exam-ple. Figure 1 shows a set of system management events taken from a business-to-business gateway facility. After preprocessing, each event contains two attributes: times-tamp and event type whic h are mapp ed to X and Y axis. By visually analyzing the events, it is not dicult to con-clude the follo wing: 1. The three event types, lab eled by A with the lowest 2. The event type lab eled by B forms another bi-p erio dic 3. The event type lab eled by C app ears to be randomly 4. The three event types indicated by D almost alw ays 5. The 8 events lab eled by F tend to app ear together in a 6. The event groups lab eled by G and H app ear a few 7. The event groups lab eled by I and J only occur once.
The above observ ations are usually useful for decision making. For system managemen t exp erts, the above sum-mary pro vides a very good way to itemize patterns and to devise action plans. For example, the A section has strong bi-p erio dicit y, so it would mak e better sense to monitor any violation of suc h bi-p erio dicit y instead of the normal occur-rences; also, 7 of the 8 event types in F section can be turned o without losing any information.

Curren tly, suc h type of data analysis su ers from the lack of a systematic way to disco ver and describ e interesting phe-nomena and patterns con tained in the data. Some analysts pay more atten tion to the vertical patterns (ev ent spik e), some focus on temp oral relationship between events, and some regard the event rate as the most imp ortan t. In this pap er, we describ e our researc h e orts on event summariza-tion for system managemen t. We de ne sev eral measures for describing temp oral patterns and use them as an es-sen tial foundation for weigh ting and ranking relationships between temp oral events. We then prop ose a divide-and-conquer progress to summarize the datasets.
An event has two comp onen ts: the event type and the time stamp (occurring time or arriv al time). Throughout the pap er, we assume a nite set E of event types. We use the sym bol e , possibly with subscripts to denote event types. An event is then a pair &lt; e; t &gt; where e 2 E is an event type and t is the timestamp of e . Our data, called an event sequenc e , is then a collection of all events occurred within some time range (say, between 0 and T ) D = f &lt; e 1 ; t 1 &gt;; &lt; e ; : : : ; &lt; e n ; t n &gt; g ; where e i 2 E; t i 2 [0 ; T ] ; and t
In general, the dep endence relationships are essen tial fac-tors/patterns to be disco vered: they assert that an event usually happ ens after another event. Suc h patterns of in-terest app ear naturally in the system managemen t appli-cations [4]. In our work, we start with pairwise temp oral dep endencies. Let T a and T b be the sequence of timestamps for event a and b resp ectiv ely. Let the distance from a point z (or, a timestamp), to an event sequence T a to be d ( z; T a ) = min x 2 T point z to its nearest neigh bor in T a whic h occurs after z . In order to whether b is dep enden t on a , we compare the typical distance of random points z to T b to the typical dis-tance of points z 2 T a to T b . This technique is motiv ated by the follo wing idea: if the occurrence of b is predictable by the occurrence of a , then the conditional distribution whic h mo dels the waiting time of event type b given event type a 's presence would be di eren t from the unconditional one [5]. In particular, we compare the follo wing two inter-arriv al distributions: (1) The unconditional distribution of the waiting time of event b : F b ( r ) = Pf d ( x; T b ) r g ; (2) The conditional distribution for the waiting time of event b with resp ect to event a : F a b ( r ) = P ( d ( x; T b ) r j x 2 T The conditional distribution can be regarded as the condi-tional probabilit y distribution given there is an event of a at time x . If the two distributions F b ( r ) and F a b ( r ) are dif-feren t, then we say that b is directly dep enden t on a . This technique is extended from our earlier work [6] and can be used to disco ver temp oral dep endencies without using pre-de ned time windo ws.

After temp oral dep endencies have been disco vered, the time interv als between the two events can be disco vered by applying existing lag detection algorithms (see [9], e.g., peak nding, clustering, and densit y estimation) on the collection of time distances between them. These time interv als can be easily incorp orated into our Event Relationship Net work. Figure 3: Cum ulativ e Distribution Functions (CDFs).

To illustrate the pro cedure for disco vering pairwise tem-poral dep endencies, Figure 3(a) plots the cum ulativ e dis-tribution functions(CDFs) of unconditional F B and condi-tional F A B for two sample indep enden t events A and B in our dataset, and Figure 3(b) plots the two CDFs for two dep en-den t events C and D. The di erence between the two CDFs clearly indicates the dep endencies between these two events. In order to compare the di erences between the indep en-den t relationship and dep enden t relationship, Figure 4(a) sho ws the boxplots of d ( x; B ) where x is a random event and d ( A; B ). Figure 4(b) sho ws the boxplots of d ( x; D ) and d ( C; D ). The lines in the appro ximate middle of boxes are medians. By using a robust order statistics metho d whic h compares the ranges of con dence interv als, we can also con-clude that event B is indep enden t of event A while event D is dep enden t of event C.
In order to summarize temp oral datasets, we use Entr opy to rank the event dep endency relationship. Entrop y indi-cates the amoun t of information con tained in the event pat-terns and measures the uncertain ty of conditional probabil-ity distributions on a particular event. We use F CP ( e j to denote the forw ard conditional probabilit y of event e follo wed by e j relativ e to all event pairs starting from e BCP ( e i j e j ) is used to denote the bac kward conditional probabilit y of e j preceded by e i relativ e to all event pairs ending at e j .

The forw ard entrop y of an event Q can be de ned as fol-lows [3]: where E is the set of all event types, N is the num ber of events in E , and e 2 E F CP ( e j Q ) = 1. For an instance, if event A is alw ays only follo wed by B , the forw ard condi-tional probabilit y of AB , F CP ( B j A ) = 1 : 0, and the forw ard conditional probabilities of the sequences that A is follo wed by the other events are 0 : 0. The higher the entrop y, the less deterministic the conditional probabilities are distributed. This means that if an event has a lower forw ard entrop y, it has more con dence or liabilit y to select some events to pro ceed. Similarly the bac kward entrop y can be calculated as follo ws: where e 2 E BCP ( e j Q ) = 1. If an event, or an event sequence has a lower bac kward entrop y, it has more deter-ministic preceden ts. In summary , entrop y aims to capture the temp oral dep endence relationships among events.
Concurrency indicates that multiple events are rep orted or performed in parallel rather than sequen tially . Supp ose an event e 1 has a forw ard conditional probabilit y-distri-bution of (0 : 9 ; 0 : 05 ; 0 : 05 ; 0 : 0) on four events; it is obvious this event has a more deterministic successor. Supp ose an-viously e 2 has a 2-p eak distribution, i.e., there migh t be concurren t beha viors after e 2 . Hence, to detect concurren t beha viors, for eac h event, we compare its conditional proba-bilit y distribution with the protot ype distributions P eak (1 ; 0 ; 0 ; ; 0), P eak 2 = (0 : 5 ; 0 : 5 ; 0 ; ; 0), , P eak (1 =N; 1 =N; ; 1 =N ), where N is the num ber of event types, allo wing all possible perm utations.
In this section, we discuss how to summarize an event set to an easy-to-understand plot based on the pair-wise event relationship. We also discuss some typical ways to reduce summarized patterns into action rules.
Event Relationship Net works (ERNs) [7, 8] is a graph-ical represen tation of temp oral relationship among events. ERN is widely used in IT system managemen t and business services managemen t area as a pro duct-agnostic format for bridging the kno wledge disco very pro cess with the system implemen tation pro cess. Event summarization discussed in this pap er is aiming to render output in a form of ERN that is richer and more expressiv e than what the industry is us-ing. Here we will explain both the represen tation and the construction pro cess through an example.

Besides the statistics discussed in the previous section are computed, an additional required input is a threshold tuple for distinguishing whether a particular statistics is signi -can t enough. Threshold tuples are in the form of Note that F E and BE are upp er bounds while F CP and BCP are lower bounds. The intended output, ERN, use nodes to denote events with low F E or BE . These are the events with either more certain leading events or more certain follo wing events. ERNs also need to sho w signi can t event relationship as links. The ERN construction pro cess includes the follo wing steps: (1) Plot all the events with F E F E or BE BE as nodes in color yello w with two peripheries. As event A in Figure 5. (2) Plot all the events with F CP F CP or BCP BCP as nodes in color blue and green resp ectiv ely with two peripheries. As event B and D . (3) For eac h event pair X and Y with F CP ( Y j X ) F CP , plot a forw ard link as the one from A to B . (4) For eac h event pair X and Y with BCP ( Y j X )
BCP , plot a bac kward link as the one from A to C . The result is an ERN looks like Figure 5.
 In Figure 6, we sho w a few common event patterns: (1) Periodic patterns : An event with self-lo op like event A with near-constan t interv al is a perio dic event pattern. Typ-ical examples are events results from perio dic probing and system heartb eat monitoring. (2) Circular patterns : A set of events forming a loop is a circular pattern. (3) Si-multaneous patterns : A set of events alw ays occur to-gether as F in Figure 1 is a sim ultaneous pattern. If the interv als among D; E; F; G and H in Figure 6 are close to 0, then they form a sim ultaneous pattern. (4) Event chain : Event I; J and K form an event chain. Suc h patterns are fre-quen tly observ ed from events that represen t di eren t stages of a problem and the problem progresses in a predictable sequence.
As men tioned, the ERN is a pro duct-agnostic and vendor-neutral represen tation of event dynamics. Consider action rules in the form of ERNs con tain the information required by the condition part of the rule. The action part is usually invocation of self-healing scripts or noti cation for system administrators. Some popular types of rules can be deriv ed from ERNs al-most directly . Here are some examples: (1) Event reduc-tion rules: A self loop with a nearly constan t arriv al rate means an event keeps occurring in a constan t pace. In sys-tem managemen t, suc h a perio dic event pattern is usually a series of probing rep orts. For those rep orting normal, a typical action rule is to invert it { only rep ort the miss-ing of it. For those rep orting abnormal, eac h consecutiv e \episo de" is con verted to a start and and an end of an anomaly , those in between can be suppressed. (2) Event correlation rules: An event is usually a \symptom" of a problem. Eac h problem may have man y symptoms. For system administrators to correctly tak e remedial actions, the monitoring system pro vides root cause analysis (RCA) ca-pabilities. One way to achiev e RCA is to use ERNs. An ERN built from a system managemen t event set is usually a set of disconnected subgraphs. Eac h subgraph con tains a set of correlated events and hence represen ts a problem. (3) Problem avoidance rules: Some events indicate a prob-lem as reac hed a sev ere stage and immediate actions should be tak en to prev ent them from occurring. ERNs pro vides a natural way to predict these sev ere states. We collect log les from several Windows machines in the Graduate Lab of the Computer Science School of Florida In-ternational University. The detailed information about the log les can be found in [5]. Here each message is repre-sented as a three-tuple h s; c; t i where s is the state type, c is the source component of this log message, and t is the timestamp. In order to discover event relationships among components, we map each distinct pair of h s; c i into a unique event type e . This representation enable us to analyze the historica leventdat aacros smultipl ecom pone ntsandtodis-cover interesting patterns embedded in the data. In our dataset, we have 9 di erent states including start , stop , de-pendency , create , connection , report , request , con guration , and other . We have 13 di erent event sources, denoted by 0 12.
We perform a case study on a real log dataset using event summarization. The dataset contains the following event types: start0, dependency7, other5, other2, dependency6, create6, report9, con guration8, connection6, report0, re-port8, stop8, request4, stop4, request8, dependency10, stop11, request12, report4 where the pre x words in indicate the event states and the last number is the component ID (i.e., event sources) that reports the events. Due to the space limit, we omit the detailed decomposition process of the dataset by event summarization. The ERN summarization model constructed from the extracted temporal patterns is given in Figure 7.

The event summarization approach is obviously useful for system management experts to make decisions. First, the dependency patterns are extracted based on the rank. The divide-and-conquer process provides a systematic way to de-compose the dataset. Second, the ERN model provides a good guideline for identifying patterns and to devise action plans. For example, the temporal pattern event 5 (i.e., de-pendency6: event source 6 in dependency situation) followed by event 6 (i.e., create6: event source 6 in create situation) implies the creation requests in component 6 are generally resulted by the lack of resources. So to reduce the creation requests, we need to allocate more resources to the compo-nent. As an another example, the temporal pattern event 12 (i.e., stop8: event source 8 in stop situation) followed by event 8 (i.e., con guration8: event source 8 in con gu-ration situation) implies the stop process in component 8 often leads to the con guration procedure. So to speed up the exit process of component 8, we need to either elimi-nate the con guration procedure when exiting or improve the con guration procedure.
In this paper, we present a novel approach, event summa-rization, to understand and interpret temporal log data for system management. Event summarization aims at provid-ing a concise interpretation of the seemingly chaotic data, so that domain experts may take actions upon the summa-rized models. A divide-and-conquer process is employed to extract temporal patterns based on entropy ranking and an ERN is constructed to provide concise representations. We present a case study using the real-world system log data. It should be noted that event summarization is a general con-cept that can be applied to various types of applications.
