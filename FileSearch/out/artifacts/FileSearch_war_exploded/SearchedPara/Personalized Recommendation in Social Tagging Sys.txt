 Collaborative tagging applications allow Internet users t o annotate resources with personalized tags. The complex network crea ted by many annotations, often called a folksonomy, permits use rs the freedom to explore tags, resources or even other user X  X  profi les un-bound from a rigid predefined conceptual hierarchy. However , the freedom afforded users comes at a cost: an uncontrolled voca bu-lary can result in tag redundancy and ambiguity hindering na viga-tion. Data mining techniques, such as clustering, provide a means to remedy these problems by identifying trends and reducing noise. Tag clusters can also be used as the basis for effective perso nal-ized recommendation assisting users in navigation. We pres ent a personalization algorithm for recommendation in folkson omies which relies on hierarchical tag clusters. Our basic recomm enda-tion framework is independent of the clustering method, but we use a context-dependent variant of hierarchical agglomerativ e cluster-ing which takes into account the user X  X  current navigation c ontext in cluster selection. We present extensive experimental re sults on two real world dataset. While the personalization algorith m is suc-cessful in both cases, our results suggest that folksonomie s encom-passing only one topic domain, rather than many topics, pres ent an easier target for recommendation, perhaps because they are more focused and often less sparse. Furthermore, context depend ent cluster selection, an integral step in our personalization algorithm, demonstrates more utility for recommendation in multi-top ic folk-sonomies than in single-topic folksonomies. This observat ion sug-gests that topic selection is an important strategy for reco mmenda-tion in multi-topic folksonomies.
 H.3 [ Information Storageand Retrieval ]: H.3.3 Information Search and Retrieval X  Clustering, Information filtering ; H.2 [ Database Management ]: H.2.8 Database application X  Data mining Algorithms Collaborative tagging, clustering, personalization, rec ommendersys-tems
Collaborative or social tagging systems allow Internet use rs to manage online resources. Central to collaborative tagging is the annotation; a user applies a personalized tag to a resource. Many annotations taken together results in a complex network of i nter-related users, resources and tags commonly referred to as a f olk-sonomy [10]. The ability to explore this large information s pace, free from a rigid predefined conceptual hierarchy, is centra l to the recent rise in popularity of collaborative tagging applica tions. lows users to tag their music collection, and uses the wisdom of the crowd to generate recommendations. Other collaborative ta gging applications focus on blogs, citations and wikis.
 Collaborative tagging has proven to be intuitive for user to adopt. By selecting a previously-used tag, it is easy to retrieve an notated resources [6]. Resources can be categorized by several tags , rather than one directory or a single branch of a hierarchy [12]. It o ffers a sense of community not provided by other resource managemen t or information retrieval tools. Users may share or discover re sources through the collaborative network and connect to people wit h sim-ilar interests. Collaborative tagging applications benefi t from the opinions of many users rather than a dominant view provided b y a few. They are consequently more nimble, able to adjust to a ch ang-ing vocabulary and absorb trends quickly [18].

From the system point of view, perhaps the greatest advantag e offered by collaborative tagging applications is the richn ess of the user profiles. As users annotate resources, the system is abl e to monitor both their interest in resources as well as their voc abulary for describing those resources. These profiles are a powerfu l tool for recommendation algorithms [20]. The relatively low cos t of generating a user profile can be dramatically overcome by the im-proved user experience that personalization allows.

While collaborative tagging applicationshave many benefit s, they also present unique challenges. Unsupervised tagging, int egral to the open nature of folksonomies, results in a wide variety of tags that can be redundant, ambiguous or entirely idiosyncratic . Tag re-dundancy, in which several tags have the same meaning, can ob fus-cate the similarity among resources. Redundant tags can hin der al-gorithms that depend on identifying similarities between r esources. On the other hand, tag ambiguity, in which a single tag has man y meanings, can falsely give the impression that resources ar e similar when they are in fact unrelated.

Becausethe information spaceis complicated by redundancy and ambiguity, personalized recommendation strategies are ne eded to aid the user as they interact with the system. For example, co nsider the user, Ozzie, who has tagged several Chicago White Sox Web re-sources with the ambiguous tag  X  X ox. X  If Ozzie selects that t ag, the system should not recommend resources concerning the Sarba nes-Oxley Act, abbreviated as  X  X OX X , and certainly nothing to do with the Boston Red Sox. In addition, other White Sox fans may have used alternative tags:  X  X ox, X   X  X hiteSox, X   X  X hisox, X  etc. T hese re-sources may not have been tagged with  X  X ox, X  but they should s till be made available to Ozzie.

Recommendationstrategies must also be adapted to deal with the unique structure of folksonomies. Typically, recommender systems have dealt with two dimensions: users and items. In folksono mies items are analogous to resources. In collaborative tagging applica-tions, however, a third dimension is introduced: tags. Beca use the nature of folksonomies encouragessharing and exploration , recom-mender systems are needed not only to suggest resources, but tags and even other users as well.

Consider again the White Sox fan, Ozzie. After selecting  X  X o x, X  the system may recommend resources, tag and other users rela ted to that tag. He may notice, Reinsdorf, another fan of the Whit e sox, and choose to view his profile. Finally, Ozzie may notice reso urces in Reinsdorf X  X  profile dealing with the Chicago Bulls, and vi ew one of these resources. The freedom to navigate through all thre e di-mensions of the folksonomy is central to its utility. A prima ry con-cern of recommender systems in collaborative tagging is to p resent users with avenues for navigation that are most relevant to t heir in-formation needs. However, this complex navigational struc ture can be viewed more clearly as a series of recommendations. In thi s paper we focus on the most common recommendation scenario; a user selects a tag and expects a recommendation of resources .
We previously studied the role of tag clustering in personal ized search and navigation [4, 5]. We showed that data mining tech -niques such as clustering provide a means to overcome redund ancy and ambiguity thereby facilitating recommendation. By clu stering, redundant tags can be aggregated; the combined trend of a clu ster can be more easily detected than the effect of a single tag. Th e effect of ambiguity can also be diminished, since a cluster i mbues a tag with the meaning shared by the associated tags. Using th e clusters as the nexus between users and resources, the relev ance of a resource to a user can then be inferred and used for recommen da-tion.

As seen at Figure 1 our cluster-based personalization algor ithm accepts a user profile, a set of clusters, and a selected tag. A s out-put, it recommends resources. It models users and resources as vectors over the set of tags. By measuring the importance of a tag cluster to a user, the user X  X  interests can be better unde rstood. By associating resources with tag clusters, the importance of a re-source to the topic described by the cluster can be calculate d. We use a context dependent hierarchical agglomerative algori thm for clustering tags. In contrast to the traditional agglomerat ive algo-rithm, our modification selects a subset of potential cluste rs related to the user X  X  current navigational activity.

In this paper, we present the results of experiments on two re al world dataset. As in previous experiments, the personaliza tion al-gorithm provides improvement. However, the results demons trate interesting differences. First, the recommendation task i n a folk-sonomy encompassing only one subject domain appears to be ea s-Figure 1: Clusters serve as intermediaries between users an d resources. ier, unclouded by the effect of additional domains present i n larger folksonomies and aided by a denser dataset. Second, a recomm en-dation strategy designed to reduce the topic space fairs wel l in both single topic and multi-topic folksonomies, but provides mo re sig-nificant improvement in a multi-topic folksonomy. We believ e that by reducing the information space to focus on the user X  X  inte rest, through our context dependent hierarchical clustering app roach, we reduce noise by clarifying the user X  X  intended meaning of am bigu-ous tags and filtering resources annotated with redundant ta gs.
Central to this paper is the ability of clustering algorithm s to ag-gregate tags into topic domains. Previously, in [4, 5], we de mon-strated how tag clusters serving as coherent topics can aid i n the personalization of search and navigation. Further support for the utility of clustering is offered in [2] where improvement in search through clustering is theorized.

In [7], topic relevant partitions are created by clustering re-sources rather than tags. The most characteristic represen tatives of a cluster are recommended for users interested in a domain de-scribed by a cluster. Using clusters of resources, Flickr im proves recommendation by distinguishing between alternative mea nings of a query. For example, a user selecting the tag  X  X pple X  will re-ceive several groups of resources. One group represents  X  X r uit X ; while another contains iPods, iMacs, and iPhones. A third cl uster contains pictures of New York City. In [3] clusters of resour ces are shown to improve recommendation by categorizing the resour ces into topic domains. Consequently, the user may interactive ly dis-ambiguate his query.

The utility of clustering extends beyond the scope of recomm en-dation. In [8] hierarchical clustering is proposed to gener ate a taxonomy from a folksonomy. In [18], tag clusters are presum ed to be representative of the resource content. Thus, a folkso nomy of Web resources is used to move the Internet closer to the Sem an-tic Web. Tag clustering can support tag recommendation, red ucing annotation to a mouse click rather than a text entry. Well-ch osen tags make the recovery process simple and offer some control over the tag-space diminishing tag redundancy and ambiguity to s ome degree. In [19], a group of tags are offered to the user based o n several criteria (coverage, popularity, effort, uniformi ty) resulting in a cluster of a relevant tags.
In [1], ranking of web search was optimized using social anno -tations by taking in account the similarity of the query to th e re-sources in del.icio.us. Their work is based on the assumptio n that folksonomies, such as del.icio.us, offer insights to the us er X  X  in-formation needs. Our work shares this assumption as we seek t o personalize the user recommendation.

In [9], a novel algorithm, FolkRank, for search and ranking i n folksonomies is proposedthat dependson interrelated tags , resources and users. The authors extend the commonly known PageRank al -gorithm to folksonomies underthe assumption that users, re sources and tags are important if they are connectedto other importa nt tags, resources and users in folksonomies. They use a weight passi ng scheme to derive the importance of an object in folksonomies . In this paper, we also adopt the idea of deriving the importance of resources to the users.

Integral to our algorithm for personalization is the measur ement of relevance between a user and a resource. A similar notion w as previously described in [13] in which an affinity level was ca l-culated between a user and a set of tag clusters. A collection of resources was then identified for each cluster based on tag us age. Resources were recommended to the user based on the user X  X  af fin-ity to the clusters and the associated resources.
A folksonomy can be described as a four-tuple. There exists a set of users, U ; a set of resources, R ; a set of tags, T of annotations, A . We denote the data in the folksonomy as define it as:
The annotations, A , are represented as a set of triples containing a user, tag and resource defined as:
A folksonomy can, therefore, be viewed as a tripartite hyper -graph [11] with users, tags, and resources represented as no des and the annotations represented as hyper-edgesconnecting one user, tag and resource.
Collaborative tagging applications may vary in the way they han-dle recommendation. Possible methods include recency, aut hority, linkage, popularity, or vector space models. In this work we focus on the vector space model [15] adapted from the information r e-trieval discipline to work with folksonomies. Each user, u eled as a vector over the set of tags, where each weight, each dimension corresponds to the importance of a particula r tag, t .
Resourcescan also be modeled as a vector over the set of tags. In calculating the vector weights, a variety of measures can be used. The tag frequency , tf , for a tag, t , and a resource, r of times the resource has been annotated with the tag. We defin e as:
Likewise, the well known term frequency * inverse document frequency [14] can be modified for folksonomies. The tf*idf tiplies the aforementioned frequency by the relative disti nctiveness of the tag. The distinctiveness is measured by the log of the t o-tal number of resources, N , divided by the number of resources to which the tag was applied, n t . We define tf*idf as:
With either term weighting approach, a similarity measure b e-tween a query, q , represented as a vector over the set of tags, and a resource, r , also modeled as a vector over the set of tags, can be calculated. However, in this work, since a user often initia tes a re-quest for recommendationsby selecting a single tag, we assu me the query is a vector with only one tag.

Several techniques exist to calculate the similarity betwe en vec-tors such as the Jaccard similarity coefficient or Cosine sim ilarity [16]. Cosine similarity is a popular measure defined as:
In this paper we presume that the user interacts with the syst em by selection a query tag and expects to receive resource reco mmen-dations. Therefore, a query is a unit vector consisting of a s ingle tag, and the equation may be further simplified.
To recommend resources, we can calculate the similarity of t he selected tag to each resource and recommend the top n .

The standard recommendation strategy outlined above does n ot take into account the user profile: identical results will be produced regardless of who the user may be. While personalization has been shown to increase the utility of Web applications, the need f or it in folksonomies is even more critical. Noise in the folksono my such as tag redundancy and tag ambiguity obfuscate patterns and reduce the effectiveness of basic recommendationstrategi es. Recall Ozzie, the White Sox fan, and assume he has a friend that is a Re d Sox fan. If the recommender application is not able to distin guish between these two users X  meaning behind the tag  X  X ox, X  both u sers will receive identical results.

Our personalization algorithm is illustrated in Figure 2. T he pro-cess proceeds in two stages. First, given a user X  X  click on a t ag, the standard non-personalized recommendation algorithm is ap plied to produce a set of recommended resources. This set is then pers on-alized by taking the user profile and tag clusters into accoun t and re-ranking the results accordingly. Note that we assume the exis-tence of a set of tag clusters obtained through the offline clu stering phase. The details of our clustering approach are discussed in Sec-tion 4.

The personalized recommendation process is described in mo re detail below.
 Step 1: Calculate Cosine Similarity . A basic search is performed on the query tag, q , using the similarity metric in Equation 7. A similarity, S ( q, r ) , is calculated for every resource this measure. As an output, this stage of the algorithm will p roduce and similarity scores for each.
 Step 2: Calculate Relevance of all r  X  R 0 to u . In this step the clusters serve as a nexus between users and resources enabli ng the recommender to identify resources that mirror the user X  X  in terest. The input to this stage of the algorithm is the user profile, an d the will return the relevance of each r  X  R 0 to u .
 Step 3: Calculate Personalized Rank Score . In the final step we combine the cosine similarity measure found in step 1 with th e rel-evance measure found in step 2. A personalized similarity is calcu-lated for each resource by multiplying the cosine similarit y by the relevance of the resource to the user. We denote this similar ity as S ( u, q, r ) and define it as:
Once the S 0 ( u, q, r ) , has been calculated for each resource and the resources have been sorted, the top n resources are returned to the user as recommendations. While the weights from cluster s to resources will be constant regardless of the user, the weigh ts con-necting the users to the clusters will differ based on the use r profile. Consequently, the resulting S 0 will depend on the user and the re-sults will be personalized. With this approach we would expe ct the biggest improvement with the tags that identify the user int erest rather than subjective or organizational ones.
Clustering is an off-line step that is performed independen tly from our personalized recommendation algorithm. The disco vered tag clusters form the basis of the recommendation algorithm . In previous work we evaluatedseveral clustering techniques: maximal complete link, K-means, and hierarchical agglomerative cl ustering [4, 5]. The complete link and hierarchical clustering algor ithms shows comparable results in different systems. The maximal com-plete link algorithm is effective with ambiguous tags and hi erar-chical clustering allows to filter out the clusters which do n ot have strong relation to the query tag. In this paper, however, we b ase our personalized recommender algorithm on the hierarchical ag glom-erative clustering technique due to its computation efficie ncy and significant flexibility. Furthermore, we propose modificati ons to the algorithm to make context related recommendations by ch oos-ing clusters particularly relevant to the user X  X  selected t ag. In this section, we first present the standard hierarchical agglome rative clustering approach applied to tags. We, then present our co ntext dependent version of the algorithm which takes a selected ta g into account in order to focus on relevant clusters.
The input to the clustering module is a set of tags, T , the division coefficient . Tagsare representedas a vector of weights over the set of resources, R . In these experiments we used both term frequency and tf idf (Equation 5). The parameter step controls the granularity of the derived agglomerative clusters. The sim ilarity threshold, initially set to one, is reduced by the value step iteration until it reaches zero. Clusters of tags are aggreg ated to-gether if their similarity measure meets the current thresh old. The division coefficient also plays a crucial role in the agglomerative clustering routine. It defines the level where the hierarchy is dis-sected into individual clusters. The output of the system is a set of tag clusters. Figure 3: Hierarchical agglomerative clustering techniqu e Step 1 . Assign every tag to a singleton cluster . To begin every tag in the system is placed in its own cluster, which serves as the seeds for the agglomerative clustering.
 Step 2 . Combine all tags in one hierarchical cluster . In this stage of the algorithm clusters of tags are aggregated together ba sed on their similarity. Highly similar tags are aggregated toget her first, then less similar ones are combined. The result is a tree stru cture containing every tag in a hierarchy.
 Step 3. Cut the tree to clusters . The hierarchical tree is spit into clusters by cutting branches out of the tree at the division coefficient as shown in figure 3.

The tuning parameter in Step 2, step controls the granularity of agglomerative clustering and determines the number of leve ls for the hierarchical tree. An optimal value for step would aggregate tags slowly enoughto capture the relationship between the c oncepts of the individual clusters. Aggregating the tags too quickl y may over-specify the structure and lose important tag interdep endencies.
In step 3, we used the second tuning parameter -division coeffi-cient . It defines the level in the tag hierarchy where it is dissecte d into individual clusters. As we mentioned earlier the recom men-dation personalization algorithm relies on these clusters to serve as the intermediary between users and resources and presuppos es the clusters represent distinct well defined topics. Hence, the selection of the division coefficient is integral to the success of the person-alization algorithm. If the division coefficient is set too high, the result will be many small clusters. While the tags in these cl us-ters may be very similar, they might not capture tag redundan cies the way a larger cluster would. Likewise, if the coefficient i s set too low the result is few clusters with low cohesiveness, pro viding insufficient disambiguation.
The algorithm described above uses the user-selected tag (q uery tag) only for the initial retrieval step. We propose here a mo difica-tion to the recommendation algorithm that employs the tag to limit Figure 4: Context-dependent hierarchical agglomerative c lus-tering technique the set of clusters considered when calculating the user-re source interest score I ( u, r ) . The query tag is therefore used like a fil-ter to choose clusters particularly interesting to the user context and increase the effectiveness of the personalized recomme ndation. This process is analogous to feature selection in data analy sis when the most important feature of the object is selected. Specifi cally, we modify the clustering algorithm to return a subset of the a vail-able clusters, as a function of the input tag. See Figure 4. If the query tag is  X  X aseball X , the clusters on the right containin g tags like  X  X ava X  and  X  X ebDesign X  are clearly not applicable. To s elect relevant clusters, we start with the cluster containing the target tag. We then generalize by moving up in the hierarchy to a pre-spec ified generalization level. The clusters below this node are then divided as before. The generalization level therefore determine th e breadth of clusters to which we apply the user X  X  query. Note that the g ener-alization level is in some sense dependent on the value of the parameter. The coarser the clusters, the more tags are subsu med by each generalization level. This version of the algorithm departs from the original at step 3.
 Step 3 . Identify the user context . After the user selects a tag, the algorithm finds the position of that tag in the hierarchical t ree. Ac-cording to generalization level , the algorithm widens the swath of clusters by first traveling up the hierarchy by the predefined number of levels and cutting off a larger branch. For example if the c oef-ficient is two, the algorithm will travel two levels up the hie rarchy from the selected tag.
 Step 4 . Divide a branch of the tree into separate clusters step is similar to Step 3 in the standard hierarchical algori thm with the difference that only a subtree, related to the user conte xt, is dis-sected into clusters. We can see in the figure that a smaller nu mber of clusters are generated by the context-dependent techniq ue, be-cause only the left-half of the tree is near the  X  X aseball X  no de at one level of generalization. When the division coefficient i s ap-plied, three clusters are generated.
We evaluated the recommendation algorithm based on two col-laborative tagging systems. One is del.icio.us where the re sources are Web-pages, and the second is Last.Fm where the resources are musical entries. Figure 5: Comparison of clustering techniques for del.icio .us dataset
A Web crawler was used to extract data from del.icio.us from 5/26/2007 to 06/15/2007. The datasetcontains 29,918 users , 6,403,442 resources and 1,035,177 tags. There are 47,184,492 tuples w ith one user, resource and tag per tuple. Last.Fm was crawled fro m 03/08/2008to 03/26/2008. That datasetcontains 18,364 use rs, 46,641 tags and 227,341 resources. There are 1,668,757 of users, ta gs and resources.

In both cases we iterate over users and extract their entire p ro-files. In the del.icio.us dataset we built a queue with the use rs that had tagged the most popular resources. As we extracted the us er profile we added users to the queue that had tagged the resourc es found in each profile.

Last.FM provides a service called  X  X udioscrobbler X  X hroug h which we were able to extract user IDs. Every user has a list of neigh bors and friends. Again we used a queue of users adding new user X  X  IDs from the neighbor and friends list. Having users IDs we th en extracted the users X  full histories from the Last.FM web-si te.
Two samples of 5,000 users were taken from each dataset. On each sample, five-fold cross validation was performed to mea sure the improvement in recommendation generation. For each fol d, 20% of the users were partitioned from the rest as test users. Clus-tering was completed on the remaining 80%. From the test user s, 10% of the instances were selected as test cases. The complet e statistical description of two datasets is provided in the t able 1.
Each test case consists of a user, tag and resource. We consid er this resource as the target resource since we know that the us er is interested in it. After performing a basic recommendation u sing only the tag, the rank of the target resource in the recommend ation set was recorded. Likewise, after a personalized recommend ation using both the tag and the user profile, the rank was also recor ded.
By comparing the rank of the resource in the basic and persona l-ized recommendations, we measured the effectiveness of the per-sonalized recommendation algorithm. This section describ es in more detail the process for judging the proposed algorithm, and supplies an evaluation of different clustering techniques and their modifications.
Using the selected tag in the basic recommendation algorith m the rank of the target resource, r b , was recorded. The rank of the resource is based on cosine similarity between the selected tag and list of resources. Likewise, the personalized recommendat ion al-gorithm was completed with the user profile and the tag. The ra nk of the resource in the personalized recommendations, r p , was also recorded. Since the user had annotated this resource with th e se-lected tag, we can assume that it is in fact relevant to the use r, and a personalization should improve the position of the resour ce in the recommendation set. We used the  X  X eave one out X  approach, re -moving the target tag/resource pair from the user profile and took the rest of the user profile as input for the generation of the p erson-alized recommendations.

The difference in the inverse of the two ranks can be used to judge the improvement provided by the personalized recomme nda-tions, imp [17]. It is defined as:
If the personalized approach moves the resource higher in th e recommendation ranking, the improvement will be positive. Simi-larly, if the personalized approach moves the resource furt her down the ranking in the recommendation set, the improvement will be negative. Note that r b is the same for every combination of query and resource, so the imp measure shows how good a given person-alization technique is at moving  X  X ood X  resources to the fro nt of the list.

We found that the choice of tf or tf  X  idf played an important role. In our evaluation, tf and tfidf have identical trends, but always provides superior results, so we have reported only r esults found based on those weights.

For comparison purposes we implemented the well-known k -means clustering algorithm. The k -means algorithm allows the par-titioning of tag objects based on their attributes into a pre defined number of groups. A predetermined number of clusters are ran -domly populated with tags. Centroids are calculated for eac h clus-ter, and tags are reassigned to a cluster based on a similarit y mea-sure. This process continues until tags are no longer reassi gned.
For each algorithm, we experimented to determine the best tu n-ing parameters. Step was found to be 0.004 for both datasets, the generalization level was found to be 8 and 4 for the del.icio.us dataset and Last.FM dataset respectively. The best value fo r divi-sion coefficient is 0.1 for del.icio.us data and 0.4 for Last. FM data. The best k (number of clusters) was found to be 350 for k
For both k -means and hierarchical agglomerative clustering al-gorithms and their respective parameters, the average impr ovement across all folds and samples was averaged for both datasets a nd is reported in Figures 5 and 6. What we see is that the recom-mendation algorithm based on hierarchical agglomerative c luster-ing provides a much more substantial improvement than the means-based algorithm. However, we also see that these diff er-ences are much more substantial in the Last.FM dataset. (Not e the difference in the y-axis scales.)
We believe that one important factor distinguishing these d atasets is their relative sparsity. The del.icio.us data set is appr oximately 400 times more sparse (99.9993% vs 99.7203%) than Last.FM. Data sparsity is known to reduce the effectiveness of cluste ring al-gorithms becausedenserdatasetsallow more precise measur ements of the connections between tags, when generating tag cluste rs.
One reason for the relative density of the Last.FM dataset is its Figure 6: Comparison of clustering techniques for Last.FM dataset Figure 7: Comparison of the Recommendation Improvement in Standard and Context Dependent Algorithms for del.icio. us focus in one specific topic domain, namely music. In contrast , the del.icio.us data set is much more diverse as it covers much wi der range of topic areas.

One consequence of the narrow focus of Last.FM is seen in the distribution of tags. Only 10% of the users in the del.icio.u s dataset use the same tag more than once to describe different resourc es. Approximately 50% of users in Last.FM do this. Such repeated tagging behaviorcreates a denserdata set and more opportun ities to find similarities between users, resources, and tags. k -means does not appear to be nearly as effective as the agglomerative alg orithm. Bottom-up agglomeration appears to capture the semantics o f tag associationsmore effectively than random selection of clu ster seeds found in k -means.
Figures 7 and 8 shows the agglomerative algorithm with the ad -dition of the context-dependentcluster selection basedon the query tag. It has been our hypothesis that selecting clusters on th e basis of the user X  X  query will improve accuracy by eliminating ambig uity: targeting the retrieval precisely to the meaning the user in tended. Figure 7 shows that this effect holds true in the del.icio.us dataset. The context-dependent version of the algorithm is better ac ross all choices of division coefficient. On the other hand, the diffe rences between the two algorithms do not appear to be statistically signif-icant for the Last.FM data.

Therefore, we see that the Last.FM data, due to its greater de n-sity and smaller degree of tag ambiguity, does not benefit fro m the context-dependent cluster selection technique, while the del.icio.us Figure 8: Comparison of the Recommendation Improvement in Standard and Context Dependent Algorithms for Last.FM application, which suffers from greater sparsity and tags t hat can take on a variety of meaning across different topic areas, ge ts a boost from selecting clusters specific to the user X  X  query. T hus, a major difference between the datasets that may explain thi s dif-ference is the degree of generality in the topics covered by e ach folksonomy. Users of del.icio.us are tagging pages from the entire World-Wide Web, which spans nearly any topic imaginable. Us ers of Last.FM are tagging only music and related resources. We s us-pect that in a more focused folksonomy, the clusters are rela tively tightly focused and selecting a subset of them does not yield better disambiguation.
In this article we showed that hierarchical agglomerative c luster-ing of tags is an effective means to personalize navigationa l recom-mendations in collaborative tagging systems. Clusters of t ags can be effectively used as a means to ascertain the user X  X  intere st as well as determine the topic of a resource. Clusters therefore pro vide an effective means to bridge the gap between users and resource s.
The sparsity of the data significantly influences the quality of the clusters and therefore has a direct effect on the accuracy of rec-ommendations. Both of our clustering techniques did much be t-ter on the denser Last.FM dataset. For sparse folksonomies l ike del.icio.us, we found that context-dependent cluster sele ction can further improve the recommendations by removing clusters w hich are not directly related to the user X  X  query.

Our future work will analyze the other methods for modeling folksonomies such as probabilistic latent semantic analys is, prin-cipal component analysis, Apriori algorithm, decision tre es, arti-ficial neural networks, Bayesian learning, genetic algorit hms and analytical learning for finding hidden factors influencing t he user behavior.

In addition, we are interested in incorporating methods of n atu-ral language processing and semantic analysis for overcomi ng the problems of tag ambiguity and redundancy.

Finally, we plan to investigate ways of clustering users and re-sources in addition to tags and use those clusters for furthe r im-provement the recommendations in Folksonomies.
This work was supported in part by the National Science Foun-dation Cyber Trust program under Grant IIS-0430303 and a gra nt from the Department of Education, Graduate Assistance in th e Area of National Need, P200A070536. [1] S. Bao, G. Xue, X. Wu, Y. Yu, B. Fei, and Z. Su. Optimizing [2] G. Begelman, P. Keller, and F. Smadja. Automated Tag [3] H. Chen and S. Dumais. Bringing order to the Web: [4] J. Gemmell, A. Shepitsen, B. Mobasher, and R. Burke. [5] J. Gemmell, A. Shepitsen, B. Mobasher, and R. Burke. [6] T. Hammond, T. Hannay, B. Lund, and J. Scott. Social [7] C. Hayes and P. Avesani. Using tags and clustering to [8] P. Heymann and H. Garcia-Molina. Collaborative Creatio n of [9] A. Hotho, R. Jaschke, C. Schmitz, and G. Stumme.
 [10] A. Mathes. Folksonomies-Cooperative Classification a nd [11] P. Mika. Ontologies are us: A unified model of social [12] D. Millen, J. Feinberg, and B. Kerr. Dogear: Social [13] S. Niwa, T. Doi, and S. Honiden. Web Page Recommender [14] G. Salton and C. Buckley. Term-weighting approaches in [15] G. Salton, A. Wong, and C. Yang. A vector space model for [16] C. Van Rijsbergen. Information Retrieval .
 [17] E. Voorhees. The TREC-8 Question Answering Track [18] X. Wu, L. Zhang, and Y. Yu. Exploring social annotations for [19] Z. Xu, Y. Fu, J. Mao, and D. Su. Towards the semantic web: [20] R. Yan, A. Natsev, and M. Campbell. An efficient manual
