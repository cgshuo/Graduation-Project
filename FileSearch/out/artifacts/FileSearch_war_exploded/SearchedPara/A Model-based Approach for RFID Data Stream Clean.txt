 In recent years, RFID technologies have been used in many applications, such as inventory checking and object track-ing. However, raw RFID data are inherently unreliable due to physical device limitations and different kinds of environ-mental noise. Currently, existing work mainly focuses on RFID data cleansing in a static environment (e.g. invento-ry checking). It is therefore difficult to cleanse RFID data streams in a mobile environment (e.g. object tracking) using the existing solutions, which do not address the data missing issue effectively.

In this paper, we study how to cleanse RFID data streams for object tracking, which is a challenging problem, since a significant percentage of readings are routinely dropped. We propose a probabilistic model for object tracking in a mo-bile environment. We develop a Bayesian inference based ap-proach for cleansing RFID data using the model. In order to sample data from the movement distribution, we devise a se-quential sampler that cleans RFID data with high accuracy and efficiency. We validate the effectiveness and robustness of our solution through extensive simulations and demon-strate its performance by using two real RFID applications of human tracking and conveyor belt monitoring.
 H.2 [ Information Systems ]: Database Management Algorithms, Design, Experimentation Probabilistic Algorithms, Uncertainty, Data Cleaning
RFID (Radio Frequency IDentification) technologies have been widely applied in many areas such as supply chains and warehouse management owing to its low cost and non-intrusive tracking techniques [6, 11]. However, raw RFID data are inherently unreliable due to physical device limita-tions and different kinds of environmental noise.
Most previous approaches for cleaning RFID data are rule-based inference algorithms [3, 10, 12, 18]. Although the methods arising from these approaches could be simple and fast, their accuracy is rather low. Currently, probabilistic model based approaches were proposed to cleanse RFID da-ta and it can be shown that such approaches are better than those using rule-based algorithms [7]. Many model-based approaches [5, 17, 4, 7] also propose formal models for different RFID applications and cleanse data under the framework of Expectation Maximization or Sampling .
To clean RFID data collected from a mobile environment, we focus on the following three major issues:
There have already been some papers addressing RFID data cleansing by using probabilistic inference [5, 17, 4, 7]. However, none of them considers all the above issues.
In this paper, we study the problem of cleaning the RFID data streams in a mobile environment that causes large miss-ing rate. The underlying idea of our approach for dealing with the data missing issue is to make use of the historic da-ta of the tracking objects. Historic observations are able to provide some evidence to assist the location inference under the current timestamp. This paper presents a probabilistic model for RFID tracking objects in a mobile environment. Then a Bayesian inference based algorithm is proposed to se-quentially clean the collected RFID data. Our model based approach is suitable for cleansing the RFID data stream in the mobile environment, our model takes advantage of the
Figure 1: General RIFD Data Cleansing Process spatiotemporal correlation of tracking objects. The general cleansing process for RFID data streams is depicted in Fig-ure 1. Our model considers the movement of tagged objects in order to reduce the uncertainty of a missed reading.
Contributions. We mainly improve the utility of RFID data. We propose a probabilistic model to clean the RFID data collected in a mobile environment. We take advan-tage of the spatiotemporal correlation of tracking objects to tackle the missed reading problem. Specifically, we make the following contributions.
This paper is organized as follows. Section 2 introduces the preliminary knowledge of RFID data and formulates the problem. Section 3 surveys the related work while Section 4 introduces a baseline algorithm to this problem. Section 5 then presents our model and states the sampling algorith-m for cleansing data. Section 6 presents the experimental results and we conclude the paper in Section 7.
In this section, we introduce some background knowledge of RFID technologies and the notations used in our subse-quent discussion of RFID data cleansing. Then, we formu-late the problem of cleansing RFID data streams.
RFID Technology. RFID is an electronic tagging and tracking technology designed to provide non-line-of-sight i-dentification. The typical installment of RFID consists of three components: readers, antennae and tags. RFID read-ers communicate with tags using antennae. The antenna interrogates nearby tags by sending out an RF signal. Tags in the detection field respond to antenna by their unique identifier codes [16].

An acquisition of tags by an antenna in a static environ-ment is composed of several reading iterations. Table 1 illus-trates an example of an acquisition of 10 reading iterations by the antenna Ant 0 . Resp denotes the number of responses received by the antenna during this acquisition. The reader rate is defined as the ratio of Resp to the total reading it-erations sent by the antenna. For example, the read rate of tag  X 3008 33B2 DDD9 06C0 0000 0013 X  detected by Ant 0 is 10 in Table 1.
 Table 1: Tag Reading List for 10 Reading Iterations by Ant 0
Read Rate Distribution. We investigate the geograph-ical read rate distribution of antennae by RFID readers and tags. The model of reader is Alien ALR-9900+ 1 and the brand of RFID tag is Gen2 ALN-9640  X  X quiggle X  Inlay 2 .We put the RFID reader in the center of the room, then divide the area of the room into grids and put tags in the center of each grid. The RFID reader carries out the acquisitions for 15 minutes. The read rate distribution found is shown in Figure 2. The read rate distribution plays an important role in R-FID data cleansing such that the grids can be associated with detection probability. For example, Figure 2 shows that tags in the grids eight feet away from the antenna have a probability of 80% of being detected. The detection region is 12 feet in Figure 2.

We are also able to observe that the read rate may not always decay due to physical device limitations and differ-ent kinds of environmental noise, which is described by some specific curves, such as the sigmoid function [17]. In this pa-per, we employ grid-based discrete probability distribution to model the read rate deterioration. The grid size can be set according to the physical device and effect of environmental noise. We set the grid size to two feet for this work.
RFID Tracking. In a mobile environment, RFID anten-nae autonomously carry out reading iterations for moving http://www.alientechnology.com/products/index.php http://www.alientechnology.com/tags/index.php 3008 33B2 DDD9 06C0 0000 0013 57:06.5 1 Ant 0 3008 33B2 DDD9 06C0 0000 0005 57:06.5 1 Ant 0 3008 33B2 DDD9 06C0 0000 0012 57:06.5 1 Ant 1 3008 33B2 DDD9 06C0 0000 0013 57:06.5 1 Ant 1 tags during the tracking period and record the received re-sponses by Resp at each timestamp.

We now give an example of a tag reading list in a mobile environment in Table 2. The Resp records the response of tags by 0 or 1. RFID antennae carry out one reading itera-tion at each 500ms. At 57:06. 5, the tag  X  3008 33B2 DDD9 06C0 0000 0013 X  is detected by Ant 0 (first row) and Ant 1 (second row) simultaneously in Table 2. The tags not shown in Table 2 are considered missing at this timestamp.
Definition 1. The observed reading O is represented by a binary matrix which records the received response of track-ing objects by antennae.

The observed reading O is a binary matrix of two dimen-sions: tracking objects and antennae. Each entry in the matrix (i.e. o ik ) records the received response of object i by Ant k which can be 0 or 1. Table 3 shows an example of the observed reading O . For instance, the response of object 1 ( obj 1 ) is received by Ant 1 (i.e. o 11 = 1). We denote O be the observed reading from the RFID data streams at the t -th timestamp.
 As aforementioned, the tracking area is divided into grids. We represent the whole collection of grids as Z and denote each grid by z . The detection region of antenna can be said to be a set of grids with a positive read rate, denoted as R . The read rate distribution of Ant k can be represented as p ( z | R k )whichiszerofor z/  X  R k .

Definition 2. Given the observed reading O and a grid z , the posterior read rate p ( O | z ) is the probability of the tracking objects as in the grid z .

The relationship between observed readings and the pos-terior read rate can be categorized into four cases: If obj i is detected by Ant k , then it must be at some grid z where z  X  R k . On the other hand, if obj i is not detected by Ant k , then it has a probability of 1  X  p ( z | R k )tobeconsidered as a missed reading.

Using the notations given in Table 4, we define the prob-lem of cleansing RIFD data streams in the mobile environ-ment below.

Definition 3. Given a series of observed readings O t where t  X  X  1 ,...,T } , posterior read rate p ( O t | z ) ,weaim to find out which grid z the tracking objects are located in at each timestamp during the tracking period T .
RFID data cleansing has attracted a lot of attention in the database community, which can be roughly classified into two categories: rule-based inference and probabilistic inference .

The rule-based inference algorithms for RFID data cleans-ing [3, 10, 12, 18, 8] were proposed in an early stage. These algorithms are directly applied to an RFID data stream or after the RFID data has been persisted. Examples of rules used are assigning the item to the first antenna which has identified it [12]. Another work from [18] assumes that the most recent data is correct and assigns the item to the last antenna that identified it. The item is assigned to the an-tenna with the most readings in [10]. The methods in the mentioned work are fast, but they also generate a lot of wrong predictions. Their accuracy and general performance do not outperform the probabilistic inference algorithm [7].
Recently, probabilistic inference algorithms were intro-duced as a new way of carrying out RFID data cleansing. The work in [13, 14] enabled declare query over RFID da-ta streams of probabilistic events. The work [17] proposed to cleanse RFID data stream with reference objects such as shelves. The work [4] studied how to inference the contain-ment relationship of tagged objects.

The most recent work [5] studied the RFID data cleansing problem and built a probabilistic model by taking capacity constraints of a location into consideration. A Metropolis-Hasting sampler based on the posterior read rate was pro-posed to infer the hidden variables in the model in order to get the locations of tagged objects. The experiments vali-date its performance in the static environment.

However, none of these data cleansing algorithms address-es the data missing problem arising from the RFID appli-cations in a mobile environment such as object tracking, which involves a significant missing rate of the collected R-FID data. Thus, we focus on studying how to cleanse such RFID data in a mobile environment. By taking capacity constraints [5] and data missing issues into consideration, we develop a new probabilistic model for object tracking.
In this section, we first present a baseline algorithm (re-ferred to as BL ) for this problem. Our proposed algorithm considers the location inference at each timestamp indepen-dently and utilizes the posterior read rate to clean the RFID data streams. We only need to take the current RFID read-ings O t and posterior read rate p ( O | z ) into consideration. Then we infer the grids of tracking objects at time t .Formal-ly,wedenoteasetof J location states LS 0 ,LS 2 ,...,LS J  X  1 to represent the possible grids in which the tracking objects are. The main procedure of BL is illustrated as the following three phases:
Initialization. The initial location state LS 0 of tracking objects are generated randomly. That is, for each tagged object, we select a grid to denote its location. Figure 3(a) is an example of the initial location state. Six grids are sampled for four objects in LS 0 .The obj 1 in the first row is assigned to grid 1.
Update. For the current location state LS j , we generate its neighboring state by applying a uniform distribution to it. For example, we have six grids of one dimension in Fig-ure 3(a). The obj 4 is in grid 3 in LS 0 and the neighbors of grid 3 are grid 2 and grid 4. By using the uniform distri-bution, the possible grids for obj 4 in the next iteration are grids 2,3 and 4 with equal probability 1 3 . Figure 3(b) shows an example of LS 1 which is a neighboring location state of LS 0 .

Selection. Suppose we denote the current location state as LS j and its neighboring state as LS j +1 . We proceed to decide whether the neighboring state is accepted as the next state or rejected. By the known posterior read rate, the neighboring state LS j +1 is accepted with the probability read rate of state LS j +1 which can be factorized by where o t i is the RFID readings for obj i at time t and LS is the sampled grid for obj i . For example, in Figure 3(b), 3 isthethirdrow(i.e. [0100000]). Finally,wegeta set of location states for tracking objects in S .
By considering the capacity of locations, the sampling pro-cess would become more effective and efficient. Suppose each grid has a capacity of C objects, then we are able to prune these location states directly by summing up their columns
Although it is feasible to clean RFID data streams, we may not be able to get high accuracy because of the miss-ing data problem. In a mobile environment, there may be missed readings of tracking objects at some time due to physical device limitations and environmental noise. Under the missed reading scenario, the posterior read rate is not able to validate the quality of the sampled location state. Then the result of the baseline algorithm may be random and sharply deviates from the true location. We propose to make use of the spatial-temporal correlation of the tracking objects to tackle this problem.
In this section, we present our Adaptive Cleansing model (referred to as AC ). First, we introduce the general idea of our model. Second, we present the detail of our generative process. Third, we explain how to estimate the parameter.
As aforementioned, the returned location states of BL are very uncertain for a significant missed reading of RFID data. Intuitively, to reduce any uncertainty, new constraints for cleansing RFID data are needed. For example, if we know the upper bound of the moving speed of some tracking object (i.e. radius of R grids), then we can sample its next possible locations with R grids.

One simple approach is to use a fixed radius R as the upper bound of the moving speed of tracking objects. The initial location state at time t is sampled from previous inferred lo-cations by assuming a uniform distribution (i.e. Uni (0 ,R )). Thanks to the moving radius, the sampled location states be-comes more effective such that the uncertainty is reduced. However, it is difficult to set the value of R .If R is too large, the returned location states are still very uncertain. On the other hand, if R is too small, then it fails to sample the correct location state and the accuracy of the algorithm becomes very low.

We propose a probabilistic model for the generation of the RFID data streams by considering its spatio-temporal correlation. The graphical representation of the adaptive cleansing model is given in Figure 4. We adopt the com-monmotionmodel Normal Distribution [17] to generate the movement of tracking objects, denoted as  X  . Formally, the location state at time t (i.e. L t ) is generated by the previous location and the motion model, denoted as p  X  ( L t | L t  X  1
We now illustrate the generative process to produce the observed RFID readings O 1 ,...,O T of tracking objects, giv-en the posterior read rate. We denote a set of parameters  X  = {  X ,  X ,  X ,  X  } as hyper parameters of our model. The procedure of generative process is outlined in Algorithm 1. Algorithm 1 Generate Observed RFID Reading Input: a set of tracking objects obj , a set of antennae and posterior read rate Output: observed RFID reading O 1: Choose  X   X  Ga (  X ,  X  ),  X   X  N (  X , (  X  X  )  X  1 ) 2: for t =1  X  T do 3: for For each object obj i do 4: (a) Choose motion model  X  i  X  N (  X  i , X  i ) 5: (b) Choose location l it  X  p  X  i ( l i ( t  X  1) ) 6: (c) Locate the grid z covering location l it 7: (d) Generate o t i by posterior read rate p ( O | z ) 8: end for 9: end for Figure 4: A Graphical Representation of The Adap-tive Cleansing Model (AC)
In order to generate motion model  X  , we need to determine the average move parameter  X  and the inverse variance  X  .
We first sample  X  from a Gamma distribution (i.e. Ga (  X  | Given the sampled  X  ,wesample  X  from a Normal distribu-tion (i.e. N (  X  |  X , (  X  X  )  X  1 )). The joint distribution of  X ,  X  is given by p (  X ,  X  |  X  )= N (  X  |  X , (  X  X  )  X  1 ) Ga (  X  |  X ,  X  ) where Z is the normalization factor of Equation 2.
Given the average movement  X  i and inverse variance  X  i of obj i , we sample the location l it from the motion model by p ( l it | l i ( t  X  1) ). The location of all tracking objects is given by L t =[ l it ].
Given the current location for tracking object obj i (i.e. l ), the observed reading O t i of obj i is generated from the posterior read rate by where k is an indication of the antennae and z is the grid grid z . The current observed reading of all tracking objects is given by O t =[ o t i ].

Given the set of hyper-parameters  X  = {  X ,  X ,  X ,  X  } ,we factorize the log likelihood of our model using the conditional independence assumption encoded in Figure 4.

The model in Figure 4 can be generalized as a kind of se-quential probabilistic models [1]. Particle Filter [2] is a well known algorithm that solves sequential inference problems. However, it is difficult to apply this algorithm to our model inference problem because not only do we need to infer the hidden variables L 1 ,L 2 ,...,L T , but we also have to deduce the hyper model parameters {  X ,  X ,  X ,  X  } .

We now devise a new sequential inference algorithm based on Particle Filter to solve the problem. Formally, we denote a set of samples (termed particles in the literature) at time t of tracking objects. For the ease of the presentation, we use a particle as a location state in this section (i.e. a particle and a location state are interchangeable terms).
 The set of initial particles s 1 0 ,...,s J 0 can be obtained from BL . The sequential procedure of our algorithm is:
Now, we discuss how to estimate the hyper parameters sequentially. Then we discuss the location inference output of the tracking objects.

Recall the generating distribution for  X  and  X  by Equa-tion 2, we set the generating distribution condition on  X  be equal to on D,  X  t  X  1 as: p (  X ,  X  |  X  t )= p (  X ,  X  | D,  X  t  X  1 ) where the updating schema for parameters  X  t  X  1 by Equa-tions 7, 8, 9 and 10. where d is the average movement of D . The derivation is according to the Bayesian rule and the details can be found in the Appendix. The time complexity of parameter re-estimation is O ( m ).

The inference output of our model is a probability dis-tribution of locations of tracking objects at any given time. Given a set of samples which are associated with their weight-s, the probability distribution of the locations is given by where 1 a  X  b is an indicator function that is 1 if and only if the location of sample s j t is in the grid z t .Thegrid z the highest posterior probability is returned as the inference location of tracking object at time t . Now, we introduce our sequential inference algorithm for RFID data streams. Given particles s t  X  1 ,modelparame-ters  X  t  X  1 at time t  X  1 and observed reading at time t ,the algorithm re-estimates the model parameter and outputs a set of particles S t at time t . Using particles S t ,weareable to output objects X  locations inference by Equation 11. The procedure of the algorithm is given by Algorithm 2 below: Algorithm 2 Inference Algorithm( s t  X  1 ,  X  t  X  1 , O t ) Input: S t  X  1 : a set of particles at time t  X  1;  X  t  X  1 parameters; O t observed reading Output: S t : a set of particles at time t ;  X  t : current model parameters; 1: set S X  X  X  2: for j =1  X  J do 3: repeat 4: particle s j t  X  proposal distribution p  X  ( s j t | s 5: until s j t subject to capacity constraint 7: Add s j t to S 8: end for 9: Re-sample J samples from S with replacement by their 10: Compute movements D by S t and S t  X  1 11: Re-estimate model parameter  X  t from D and  X  t  X  1 by 12: return set S t and parameter  X  t
The algorithm samples J qualified particles subject to ca-pacity constraints from Line 3 to Line 5. Next, it associates sampled particles with weights at Line 6. It re-samples these particles to produce particles with the highest weights, de-noted as S t , at Line 9. Then it re-estimates the model pa-rameter  X  t at time t from D and  X  t  X  1 byEquations7,8,9 and 10 at Line 11. Finally, the algorithm produces a set of particles S t and model parameters  X  t at time t .
We implement the proposed algorithms and study their ef-ficiency and effectiveness using both real and synthetic data sets. The synthetic experimental evaluation is designed to investigate the robustness of our algorithm. All algorithms are implemented using Java. The experiments are performed in a Linux box with an 8-core Intel(R) Xeon(R) CPU X5450 3.00GHz and 16GB memory.
Synthetic Data Generation. We calibrate the read rate distribution of the synthetic data generator by posterior read rate collected from a static environment. We set the size of a grid to one square foot. The detection range of antenna is five grids. There is one grid overlapping in the detec-tion range of two antennae. The size of tracking area is set to 1500 grids which is large enough for indoor environmen-t. The movements of tracking objects are generated from Normal Distribution with mean two feet per second and s-tandard variance 0.5. Other default values of the generator can be found in Table 5.

Measurement. We define TopK accuracy to measure the effectiveness of the proposed algorithms. The inference out-put of the proposed algorithms is a probability distribution of locations. The locations with the top K highest probabil-ities are selected as the inference result. The TopK accuracy is defined as the ratio of the number of correct cases in the inference result to the number of inference cases. The for-mula of TopK accuracy is given by
T opKAccuracy = # of correct cases where the number of correct cases increases as K becomes large. In this experiment, we evaluate the effectiveness of the algorithms using Top1, Top2 and Top3 accuracy.
We compare the effectiveness and efficiency of BL with our proposed algorithm on five issues: (1) missing rate of RFID reading, (2) tracking time of the objects, (3) capacity constraint of the grid, (4) moving speed of the objects and (5) detection range of the antenna. The experimental result shows that our proposed algorithm is very robust.
Effect of Missing Rate. Figures 5(a), (b) and (c) illus-trate the Top1,Top2 and Top3 accuracy of our algorithm on different missing rates (i.e. 0.1, 0.2, 0.3, 0.4 and 0.5), respectively. For example, the missing rate 0.1 means that ten percentage of the RFID readings are missing during the tracking period.

As the missing rate increases, the inference accuracy of the algorithms deteriorates. However, the accuracy of the algorithm AC deteriorates slowly and outperforms the BL algorithm for all missing rates because our algorithm is able to capture the current movement of tracking objects in or-der to make the samples closer to the real moves. From Figure 5(a), we could observe that the algorithm AC has high Top 1 accuracy when the missing rate is above 0.3, the common missing rate for RFID data. The Top 2accuracy shown in Figure 5(b) shows that AC has 80% inference cor-rectness among these missing rates. The cost of the running time of our algorithm is slightly more efficient than BL ,as shown in Figure 5(d). When the missing rate increases, it is difficult for BL to get qualified samples because the da-ta uncertainty increases. However, our algorithm is able to utilize the estimated parameters to sample qualified parti-cles in order to reduce the data uncertainty and improve the efficiency of the algorithm.

Effect of Tracking Time. We investigate the inference ac-curacy of the algorithm over different tracking time period to illustrate the robustness of our algorithm. Figures 6(a) to (c) demonstrate the Top1 to Top3 inference accuracy of our algorithm over different time periods in sec (i.e. 100, 200, 300, 400 and 500), respectively. We are able to observe that the inference accuracy of our algorithm is very stable, as shown in Figure 6. The Top2 accuracy of our algorith-m reaches 90% for all the time periods in Figure 6(b). We could conclude that the inference accuracy of our algorithm does not decrease when we increase the tracking time period. So our algorithm is capable of cleaning RFID data streams in a satisfactory manner. The accumulated running time of the algorithms is given in Figure 6(d). The running time increases linearly. The time cost of location inference at one timestamp is less than one second which is very efficient.
Effect of Objects by Capacity. We study the effect of loca-tion capacity on our algorithm using a proposed ratio called objects by capacity .The objects by capacity is a ratio of the number of tracking objects by the location capacity. This constraint becomes stricter when we increase the number of tracking objects or reduce the location capacity. The stric-t constraint is able to prune many false positive candidate location states. For example, the location state can be con-sidered to be invalid if it violates the constraint, no matter how high its probability is. Given the default grid capacity 4, we increase the number of tracking objects linearly. Fig-ures 7(a) to (c) show the Top1 to Top3 accuracy result of our algorithm on different ratio of objects by capacity (i.e. 4, 6, 8, 10 and 12), respectively. The inference accuracy of our algorithm increases dramatically, as shown in Figure 7. The performance of our algorithm can be improved by objects by capacity . For example, the Top1 accuracy is below 40% when objects by capacity is set to 4 and it reaches 75% when the ratio set to 12 in Figure 7(a). The running time of the algorithms increases linearly, as shown in Figure 7(d).
Effect of Moving Speed. We investigate the inference ac-curacy of our algorithm by varying the speed of the tracking objects in (feet/s) (i.e.2, 6, 10 and 14). The inference accura-cy of the algorithms decreases when we increase the moving speed, as shown in Figure 8. The sampling range of each move becomes larger as the moving speed increases. How-ever, the inference accuracy of our algorithm only decreases slightly. The parameters of our model can be estimated by the sequential inference algorithm on the observed data. Then our model is able to capture the moving of tracking objects in order to make a better location inference.
Effect of Grids per Antenna. We study the effect of the density of antennae deployed by varying the number of grids managed by antenna (i.e. 3 ,5 ,7, 9 and 11 zones per anten-na) in Figure 9. The inference accuracy decreases when we increase the grids managed by antenna (i.e. we decrease the density of antennae), as shown in Figures 9(a), (b) and (c). There are two reasons for this happening. First, the un-certainty of the observed readings increases when we assign more grids to the antenna. For example, suppose that the antenna only manages one grid. If the readings show that the tracking object is read by that antenna, we then know the object must be in that grid. If the antenna manages more grids, we only know the object is in one of its grids. Secondly, if the antenna manages more grids, the missing rate of the readings would increase because the read rate of the zones which are far away from the antenna is very low. Our algorithm is able to deal with this problem, since our algorithm is able to take the spatial-temporal correlation of the tracking objects which is very useful for reducing data uncertainty and coping with high missing rate.

The running time of the algorithm decreases first when the number of antennae is reduced. The algorithm only needs to process fewer antennae. Then the running time of the algorithm increases when we further increase the number of grids per antenna, as shown in Figure 9(d). This is because it is difficult to get qualified samples when the uncertainty of data raises.

Through this experiment, we could conclude that our al-gorithm is very effective and more efficient than the BL algo-rithm on decaying with data uncertainty and missing issues. Our algorithm is based on a probabilistic model which takes the spatial-temporal consideration of tracking objects in or-der to reduce data uncertainty. Using the proposed sequen-tial inference approach, our algorithm cleans the current R-FID data in the streams and it only depends on the previous location states and estimated model parameters. Our algo-rithm is efficient enough to clean RFID data streams with high speed. The robustness of our algorithm is also evalu-ated through various issues.
In this section, we evaluate the performance of the al-gorithms on different applications using two real datasets: human tracking and conveyer monitoring. We give a brief description of data collection and result analysis of human tracking and conveyor monitoring using our algorithm.
We evaluate the performance of our algorithm on the ap-plication of human tracking in this section. We use two Alien RFID readers and seven antennae in an indoor area. We divide the indoor area into 20 grids of two feet long. The capacity constraint of each grid is two in this experi-ment. We ask five undergraduate students to hold an RFID tag each and move inside this area. We ask the students to start at different grids inside this area. Then we record the RFID reading of these students for 40 seconds using au-tonomous mode of RFID readers. At the same time, we ask other students to record the actual grids of the tagged stu-dents passed during the tracking period as the ground truth of this experiment. Finally, we repeat this experiment 10 times. The deployment of antenna of this experiment can be found in Figure 10(a). Figures 11(a) and (b) illustrate the inference accuracy of our algorithm on 10 trials. We ob-serve that our algorithm has more than 50% correctness in Top 1 inference accuracy and 80% in Top 3.
We validate the performance of our algorithm on the ap-plication of conveyor monitoring. We deploy four antennae on a Bocsh conveyor { http://www.bosch.com/worldsite_ startpage/en/default.aspx } , as shown in Figure 10(b). We program the Bocsh conveyor to ask the transport shut-tle to run on a predefined path at a constant speed. The whole path is 18 meters and we divide it into 18 grids of one meter long. The tagged objects are put in a transport shuttle, as shown in Figure 10(c). We consider the location of the transport shuttle as the location of the tracking ob-jects. The ground truth of the movement of tagged objects is calculated based on the speed of transport shuttle and predefined path. We repeat this experiment 10 times. Each time, we start the transport shuttle at the same grid. The inference accuracy of the algorithms can be found in Figures 11(c) and (d). We observe that the Top 1 inference accuracy of our algorithm is more than 40% in Figure 11(c) which is much better than the BL algorithm. The inference accuracy reaches nearly 60% in Figure 11(d). The inference accuracy of this experiment is slightly lower than that of human tracking because the material of conveyors made of metal increases the false reading rate of the RFID antennae.
In this paper, we study the problem of cleaning RFID da-ta streams in a mobile environment. To tackle the problem of significant missing rate, we propose a probabilistic model for RFID object tracking. Then a sequential inference al-gorithm is devised for inferring the hidden variables of our proposed probabilistic model. The sequential inference al-gorithm produces the inferred locations of tracking objects and incrementally re-estimates the model parameters in an efficient way. To evaluate the effectiveness and robustness of our proposed algorithm, we investigate its performance on various issues in the synthetic experiment. We also validate our algorithm on real data: human tracking and convey-or monitoring. The results of our algorithm on real data demonstrate the effectiveness of our algorithm to clean R-FID data streams. We thank the help from the UROP project student Gary Zhijun Zhang at HKUST for collecting the data used in our experiments. This work is partially supported by HKUST RFID Center under grant numbers ITP /022/02LP a nd SS-RI08RGC, and RGC GRF under grant number HKUST 617610. [1] M. Arulampalam, S. Maskell, N. Gordon, and [2] C. Bishop and S. S. en ligne). Pattern recognition and [3] C. Bornh  X  ovd, T. Lin, S. Haller, and J. Schaper. [4] Z. Cao, C. Sutton, Y. Diao, and P. Shenoy.
 [5] H. Chen, W. Ku, H. Wang, and M. Sun. Leveraging [6] D. Delen, B. Hardgrave, and R. Sharda. Rfid for [7] L. Ferreira Chaves, E. Buchmann, and K. B  X  ohm. [8] H. Gonzalez, J. Han, and X. Shen. Cost-conscious [9] S. Jeffery, G. Alonso, M. Franklin, W. Hong, and [10] S. Jeffery, M. Garofalakis, and M. Franklin. Adaptive [11] W. Ng. Developing rfid database models for analysing [12] J. Rao, S. Doraiswamy, H. Thakkar, and L. Colby. A [13] C. R  X  e, J. Letchner, M. Balazinksa, and D. Suciu. [14] C. R  X  e, J. Letchner, M. Balazinksa, and D. Suciu. [15] L. Sullivan. Rfid implementation challenges persist, all [16] F. Thiesse and F. Michahelles. An overview of epc [17] T. Tran, C. Sutton, R. Cocci, Y. Nie, Y. Diao, and [18] F. Wang and P. Liu. Temporal management of rfid
We give the derivation of model parameter re-estimation and show that the model parameter can be incrementally estimated.

Given a set of movements D and model parameter  X  t  X  1 , we want to estimate model parameter  X  t at time t . Suppose that we have estimated model parameter  X  t , the the poste-rior distribution of  X  and  X  can be written as Pr (  X ,  X  | which is equal to the posterior distribution given movements D and model parameter  X  t  X  1 . The formula of this equation is given by Pr (  X ,  X  |  X  t )= Pr (  X ,  X  | D,  X  t  X  1 ) is clear that  X  t is equal to  X  t  X  1 + m 2 . Then we study how to assign other model parameters. We first separate the second term in R (i.e. m j =1 ( d j  X   X  ) 2 )intotwocomponents, as shown below: Then we rearrange R as: wherewederive
