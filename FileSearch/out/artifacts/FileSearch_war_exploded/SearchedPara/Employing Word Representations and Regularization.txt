 The goal of Relation Extraction (RE) is to detect and classify relation mentions between entity pairs into predefined relation types such as Employ-ment or Citizenship relationships. Recent research in this area, whether feature-based (Kambhatla, 2004; Boschee et al., 2005; Zhou et al., 2005; Grishman et al., 2005; Jiang and Zhai, 2007a; Chan and Roth, 2010; Sun et al., 2011) or kernel-based (Zelenko et al., 2003; Bunescu and Mooney, 2005a; Bunescu and Mooney, 2005b; Zhang et al., 2006; Qian et al., 2008; Nguyen et al., 2009), at-tempts to improve the RE performance by enrich-ing the feature sets from multiple sentence anal-yses and knowledge resources. The fundamental assumption of these supervised systems is that the training data and the data to which the systems are applied are sampled independently and identically from the same distribution. When there is a mis-match between data distributions, the RE perfor-mance of these systems tends to degrade dramat-ically (Plank and Moschitti, 2013). This is where we need to resort to domain adaptation techniques (DA) to adapt a model trained on one domain (the source domain) into a new model which can per-form well on new domains (the target domains).
The consequences of linguistic variation be-tween training and testing data on NLP tools have been studied extensively in the last couple of years for various NLP tasks such as Part-of-Speech tag-ging (Blitzer et al., 2006; Huang and Yates, 2010; Schnabel and Sch  X  utze, 2014), named entity recog-nition (Daum  X  e III, 2007) and sentiment analysis (Blitzer et al., 2007; Daum  X  e III, 2007; Daum  X  e III et al., 2010; Blitzer et al., 2011), etc. Un-fortunately, there is very little work on domain adaptation for RE. The only study explicitly tar-geting this problem so far is by Plank and Mos-chitti (2013) who find that the out-of-domain per-formance of kernel-based relation extractors can be improved by embedding semantic similarity in-formation generated from word clustering and la-tent semantic analysis (LSA) into syntactic tree kernels. Although this idea is interesting, it suf-fers from two major limitations: + It does not incorporate word cluster informa-tion at different levels of granularity. In fact, Plank and Moschitti (2013) only use the 10-bit cluster prefix in their study. We will demonstrate later that the adaptability of relation extractors can ben-efit significantly from the addition of word cluster features at various granularities. + It is unclear if this approach can encode real-valued features of words (such as word embed-dings (Mnih and Hinton, 2007; Collobert and We-ston, 2008)) effectively. As the real-valued fea-tures are able to capture latent yet useful proper-ties of words, the augmentation of lexical terms with these features is desirable to provide a more general representation, potentially helping relation extractors perform more robustly across domains.
In this work, we propose to avoid these limita-tions by applying a feature-based approach for RE which allows us to integrate various word features of generalization into a single system more natu-rally and effectively.

The application of word representations such as word clusters in domain adaptation of RE (Plank and Moschitti, 2013) is motivated by its successes in semi-supervised methods (Chan and Roth, 2010; Sun et al., 2011) where word repre-sentations help to reduce data-sparseness of lexi-cal information in the training data. In DA terms, since the vocabularies of the source and target do-mains are usually different, word representations would mitigate the lexical sparsity by providing general features of words that are shared across domains, hence bridge the gap between domains. The underlying hypothesis here is that the absence of lexical target-domain features in the source do-main can be compensated by these general fea-tures to improve RE performance on the target do-mains.

We extend this motivation by further evaluat-ing word embeddings (Bengio et al., 2001; Ben-gio et al., 2003; Mnih and Hinton, 2007; Col-lobert and Weston, 2008; Turian et al., 2010) on feature-based methods to adapt RE systems to new domains. We explore the embedding-based fea-tures in a principled way and demonstrate that word embedding itself is also an effective repre-sentation for domain adaptation of RE. More im-portantly, we show empirically that word embed-dings and word clusters capture different informa-tion and their combination would further improve the adaptability of relation extractors. Given the more general representations provided by word representations above, how can we learn a relation extractor from the labeled source domain data that generalizes well to new domains? In tra-ditional machine learning where the challenge is to utilize the training data to make predictions on unseen data points (generated from the same dis-tribution as the training data), the classifier with a good generalization performance is the one that not only fits the training data, but also avoids ov-efitting over it. This is often obtained via regular-ization methods to penalize complexity of classi-fiers. Exploiting the shared interest in generaliza-tion performance with traditional machine learn-ing, in domain adaptation for RE, we would prefer the relation extractor that fits the source domain data, but also circumvents the overfitting problem ize well on new domains. Eventually, regulariza-tion methods can be considered naturally as a sim-ple yet general technique to cope with DA prob-lems.

Following Plank and Moschitti (2013), we as-sume that we only have labeled data in a single source domain but no labeled as well as unlabeled target data. Moreover, we consider the single-system DA setting where we construct a single system able to work robustly with different but related domains (multiple target domains). This setting differs from most previous studies (Blitzer et al., 2006) on DA which have attempted to de-sign a specialized system for every specific tar-get domain. In our view, although this setting is more challenging, it is more practical for RE. In fact, this setting can benefit considerably from our general approach of applying word representations and regularization. Finally, due to this setting, the best way to set up the regularization parameter is to impose the same regularization parameter on every feature rather than a skewed regularization (Jiang and Zhai, 2007b). Although word embeddings have been success-fully employed in many NLP tasks (Collobert and Weston, 2008; Turian et al., 2010; Maas and Ng, 2010), the application of word embeddings in RE is very recent. Kuksa et al. (2010) pro-pose an abstraction-augmented string kernel for bio-relation extraction via word embeddings. In the surge of deep learning, Socher et al. (2012) and Khashabi (2013) use pre-trained word embed-dings as input for Matrix-Vector Recursive Neu-ral Networks (MV-RNN) to learn compositional structures for RE. However, none of these works evaluate word embeddings for domain adaptation of RE which is our main focus in this paper.
Regarding domain adaptation, in representation learning, Blitzer et al. (2006) propose structural correspondence learning (SCL) while Huang and Yates (2010) attempt to learn a multi-dimensional feature representation. Unfortunately, these meth-ods require unlabeled target domain data which are unavailable in our single-system setting of DA. Daum  X  e III (2007) proposes an easy adaptation framework (EA) which is later extended to a semi-supervised version (EA++) to incorporate unla-beled data (Daum  X  e III et al., 2010). In terms of word embeddings for DA, recently, Xiao and Guo (2013) present a log-bilinear language adaptation framework for sequential labeling tasks. However, these methods assume some labeled data in target domains and are thus not applicable in our setting of unsupervised DA. Above all, we move one step further by evaluating the effectiveness of word em-beddings on domain adaptation for RE which is very different from the principal topic of sequence labeling in the previous research. We consider two types of word representations and use them as additional features in our DA sys-tem, namely Brown word clustering (Brown et al., 1992) and word embeddings (Bengio et al., 2001). While word clusters can be recognized as an one-hot vector representation over a small vocabulary, word embeddings are dense, low-dimensional, and real-valued vectors (distributed representations). Each dimension of the word em-beddings expresses a latent feature of the words, hopefully reflecting useful semantic and syntactic regularities (Turian et al., 2010). We investigate word embeddings induced by two typical language models: Collobert and Weston (2008) embeddings (C&amp;W) (Collobert and Weston, 2008; Turian et al., 2010) and Hierarchical log-bilinear embed-dings (HLBL) (Mnih and Hinton, 2007; Mnih and Hinton, 2009; Turian et al., 2010). 5.1 Baseline Feature Set Sun et al. (2011) utilize the full feature set from (Zhou et al., 2005) plus some additional features and achieve the state-of-the-art feature-based RE system. Unfortunately, this feature set includes the human-annotated (gold-standard) information on entity and mention types which is often miss-ing or noisy in reality (Plank and Moschitti, 2013). This issue becomes more serious in our setting of single-system DA where we have a single source domain with multiple dissimilar target domains and an automatic system able to recognize entity and mention types very well in different domains may not be available. Therefore, following the set-tings of Plank and Moschitti (2013), we will only assume entity boundaries and not rely on the gold standard information in the experiments. We ap-ply the same feature set as Sun et al. (2011) but 5.2 Lexical Feature Augmentation While Sun et al. (2011) show that adding word clusters to the heads of the two mentions is the most effective way to improve the generaliza-tion accuracy, the right lexical features into which word embeddings should be introduced to obtain the best adaptability improvement are unexplored. Also, which dimensionality of which word embed-ding should we use with which lexical features? In order to answer these questions, following Sun et al. (2011), we first group lexical features into 4 groups and rank their importance based on linguis-tic intuition and illustrations of the contributions of different lexical features from various feature-based RE systems. After that, we evaluate the ef-fectiveness of these lexical feature groups for word embedding augmentation individually and incre-mentally according to the rank of importance. For each of these group combinations, we assess the system performance with different numbers of di-mensions for both C&amp;W and HLBL word embed-dings. Let M1 and M2 be the first and second men-tions in the relation. Table 1 describes the lexical feature groups.
 6.1 Tools and Data Our relation extraction system is hierarchical (Bunescu and Mooney, 2005b; Sun et al., 2011) and apply maximum entropy (MaxEnt) in the For Brown word clusters, we directly apply the clustering trained by Plank and Moschitti (2013) to facilitate system comparison later. We evalu-ate C&amp;W word embeddings with 25, 50 and 100 dimensions as well as HLBL word embeddings with 50 and 100 dimensions that are introduced in Turian et al. (2010) and can be downloaded and unbiased resources generated from the previ-ous works for evaluation not only helps to verify the effectiveness of the resources across different tasks and settings but also supports our setting of single-system DA.

We use the ACE 2005 corpus for DA experi-ments (as in Plank and Moschitti (2013)). It in-volves 6 relation types and 6 domains: broadcast news (bn), newswire (nw), broadcast conversation (bc), telephone conversation (cts), weblogs (wl) and usenet (un). We follow the standard prac-tices on ACE (Plank and Moschitti, 2013) and use news (the union of bn and nw) as the source do-main and bc , cts and wl as our target domains. We take half of bc as the only target development set, and use the remaining data and domains for testing purposes (as they are small already). As noted in Plank and Moschitti (2013), the distributions of re-lations as well as the vocabularies of the domains are quite different. 6.2 Evaluation of Word Embedding Features We investigate the effectiveness of word embed-dings on lexical features by following the proce-dure described in Section 5.2. We test our system on two scenarios: In-domain: the system is trained and evaluated on the source domain (bn+nw, 5-fold cross validation); Out-of-domain: the system is trained on the source domain and evaluated on the target development set of bc (bc dev). Table suffix ED in lexical group names is to indicate the embedding features).
 From the tables, we find that for C&amp;W and HLBL embeddings of 50 and 100 dimensions, the most effective way to introduce word embeddings is to add embeddings to the heads of the two men-tions (row 2; both in-domain and out-of-domain) although it is less pronounced for HLBL embed-ding with 50 dimensions. Interestingly, for C&amp;W embedding with 25 dimensions, adding the em-bedding to both heads and words of the two men-tions (row 6) performs the best for both in-domain and out-of-domain scenarios. This is new com-pared to the word cluster features where the heads of the two mentions are always the best places for augmentation (Sun et al., 2011). It suggests that a suitable amount of embeddings for words in the mentions might be useful for the augmentation of the heads and inspires further exploration. Intro-ducing embeddings to words of mentions alone has mild impact while it is generally a bad idea to augment chunk heads and words in the contexts.
Comparing C&amp;W and HLBL embeddings is somehow more complicated. For both in-domain and out-of-domain settings with different num-bers of dimensions, C&amp;W embedding outperforms HLBL embedding when only the heads of the mentions are augmented while the degree of neg-ative impact of HLBL embedding on chunk heads as well as context words seems less serious than C&amp;W X  X . Regarding the incremental addition of features (rows 6, 7, 8), C&amp;W is better for the out-of-domain performance when 50 dimensions are used, whereas HLBL (with both 50 and 100 di-mensions) is more effective for the in-domain set-ting. For the next experiments, we will apply the C&amp;W embedding of 50 dimensions to the heads of the mentions for its best out-of-domain perfor-mance. 6.3 Domain Adaptation with Word This section examines the effectiveness of word representations for RE across domains. We evalu-ate word cluster and embedding (denoted by ED) features by adding them individually as well as simultaneously into the baseline feature set. For word clusters, we experiment with two possibil-ities: (i) only using a single prefix length of 10 (as Plank and Moschitti (2013) did) (denoted by WC10) and (ii) applying multiple prefix lengths of 4, 6, 8, 10 together with the full string (denoted by WC). Table 3 presents the system performance (F measures) for both in-domain and out-of-domain settings.
 The key observations from the table are: (i): The baseline system achieves a performance of 51.4% within its own domain while the per-formance on target domains bc, cts, wl drops to 49.7%, 41.5% and 36.6% respectively. Our base-line performance is worse than that of Plank and Moschitti (2013) only on the target domain cts and better in the other cases. This might be explained by the difference between our baseline feature set and the feature set underlying their kernel-based system. However, the performance order across domains of the two baselines are the same. Be-sides, the baseline performance is improved over all target domains when the system is enriched with word cluster features of the 10 prefix length only (row 2). (ii): Over all the target domains, the perfor-mance of the system augmented with word cluster features of various granularities (row 3) is supe-rior to that when only cluster features for the pre-fix length 10 are added (row 2). This is significant (at confidence level  X  95%) for domains bc and wl and verifies our assumption that various granu-larities for word cluster features are more effective than a single granularity for domain adaptation of RE. (iii): Row 4 shows that word embedding itself is also very useful for domain adaptation in RE since it improves the baseline system for all the target domains. (iv): In row 5, we see that the addition of both word cluster and word embedding features im-proves the system further and results in the best performance over all target domains (this is sig-nificant with confidence level  X  95% in domains bc and wl). The result suggests that word embed-dings seem to capture different information from word clusters and their combination would be ef-fective to generalize relation extractors across do-mains. However, in domain cts, the improvement that word embeddings provide for word clusters is modest. This is because the RCV1 corpus used to induce the word embeddings (Turian et al., 2010) does not cover spoken language words in cts very well. (v): Finally, the in-domain performance is also improved consistently demonstrating the robust-ness of word representations (Plank and Moschitti, 2013). 6.4 Domain Adaptation with Regularization All the experiments we have conducted so far do not apply regularization for training. In this sec-tion, in order to evaluate the effect of regulariza-tion on the generalization capacity of relation ex-tractors across domains, we replicate all the ex-periments in Section 6.3 but apply regularization when relation extractors are trained 6 . Table 4 presents the results.

For this experiment, every statement in (ii), (iii), (iv) and (v) of Section 6.3 also holds. More impor-tantly, the performance in every cell of Table 4 is significantly better than the corresponding cell in Table 3 (5% or better gain in F measure, a sig-nificant improvement at confidence level  X  95%). This demonstrates the effectiveness of regulariza-tion for RE in general and for domain adaptation of RE specifically.
