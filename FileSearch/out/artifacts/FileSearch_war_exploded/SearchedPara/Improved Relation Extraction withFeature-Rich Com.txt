 Two common NLP feature types are lexical properties of words and unlexicalized linguis-tic/structural interactions between words. Prior work on relation extraction has extensively stud-ied how to design such features by combining dis-crete lexical properties (e.g. the identity of a word, its lemma, its morphological features) with as-pects of a word X  X  linguistic context (e.g. whether it lies between two entities or on a dependency path between them). While these help learning, they make generalization to unseen words difficult. An alternative approach to capturing lexical informa-tion relies on continuous word embeddings 2 as representative of words but generalizable to new words. Embedding features have improved many tasks, including NER, chunking, dependency pars-ing, semantic role labeling, and relation extrac-tion (Miller et al., 2004; Turian et al., 2010; Koo et al., 2008; Roth and Woodsend, 2014; Sun et al., 2011; Plank and Moschitti, 2013; Nguyen and Grishman, 2014). Embeddings can capture lexi-cal information, but alone they are insufficient: in state-of-the-art systems, they are used alongside features of the broader linguistic context.
In this paper, we introduce a compositional model that combines unlexicalized linguistic con-text and word embeddings for relation extraction, a task in which contextual feature construction plays a major role in generalizing to unseen data. Our model allows for the composition of embed-dings with arbitrary linguistic structure, as ex-pressed by hand crafted features. In the follow-ing sections, we begin with a precise construction of compositional embeddings using word embed-dings in conjunction with unlexicalized features. Various feature sets used in prior work (Turian et al., 2010; Nguyen and Grishman, 2014; Hermann et al., 2014; Roth and Woodsend, 2014) are cap-tured as special cases of this construction. Adding these compositional embeddings directly to a stan-dard log-linear model yields a special case of our full model. We then treat the word embeddings as parameters giving rise to our powerful, efficient, and easy-to-implement log-bilinear model . The model capitalizes on arbitrary types of linguistic annotations by better utilizing features associated with substructures of those annotations, including global information. We choose features to pro-mote different properties and to distinguish differ-ent functions of the input words.

The full model involves three stages. First, it decomposes the annotated sentence into substruc-tures (i.e. a word and associated annotations). Second, it extracts features for each substructure (word), and combines them with the word X  X  em-bedding to form a substructure embedding . Third, we sum over substructure embeddings to form a composed annotated sentence embedding , which is used by a final softmax layer to predict the out-put label (relation).

The result is a state-of-the-art relation extractor for unseen domains from ACE 2005 (Walker et al., 2006) and the relation classification dataset from SemEval-2010 Task 8 (Hendrickx et al., 2010). Contributions This paper makes several contri-butions, including: 1. We introduce the FCM , a new compositional 2. We obtain the best reported results on ACE-3. We obtain results on on SemEval-2010 Task Note that other work has already been published that builds on the FCM , such as Hashimoto et al. (2015), Nguyen and Grishman (2015), dos Santos et al. (2015), Yu and Dredze (2015) and Yu et al. (2015). Additionally, we have extended FCM to incorporate a low-rank embedding of the features (Yu et al., 2015), which focuses on fine-grained relation extraction for ACE and ERE. This paper obtains better results than the low-rank extension on ACE coarse-grained relation extraction. In relation extraction we are given a sentence as in-put with the goal of identifying, for all pairs of en-tity mentions, what relation exists between them, if any. For each pair of entity mentions in a sen-tence S , we construct an instance ( y, x ) , where x =( M 1 ,M 2 ,S,A ) . S = { w 1 ,w 2 ,...,w n } is a sentence of length n that expresses a relation of type y between two entity mentions M 1 and M 2 , where M 1 and M 2 are sequences of words in S . A is the associated annotations of sentence S , such as part-of-speech tags, a dependency parse, and named entities. We consider directed rela-tions: for a relation type Rel , y = Rel ( M 1 ,M 2 ) and y 0 = Rel ( M 2 ,M 1 ) are different relations. Ta-ble 1 shows ACE 2005 relations, and has a strong label bias towards negative examples. We also consider the task of relation classification (Se-mEval), where the number of negative examples is artificially reduced.
 Embedding Models Word embeddings and compositional embedding models have been suc-cessfully applied to a range of NLP tasks, however the applications of these embedding models to re-lation extraction are still limited. Prior work on relation classification (e.g. SemEval 2010 Task 8) has focused on short sentences with at most one relation per sentence (Socher et al., 2012; Zeng et al., 2014). For relation extraction, where neg-ative examples abound, prior work has assumed that only the named entity boundaries and not their types were available (Plank and Moschitti, 2013; Nguyen et al., 2015). Other work has as-sumed that the order of two entities in a relation are given while the relation type itself is unknown (Nguyen and Grishman, 2014; Nguyen and Grish-man, 2015). The standard relation extraction task, as adopted by ACE 2005 (Walker et al., 2006), uses long sentences containing multiple named en-rections. We are the first to apply neural language model embeddings to this task.
 Motivation and Examples Whether a word is indicative of a relation depends on multiple prop-erties, which may relate to its context within the sentence. For example, whether the word is in-between the entities, on the dependency path be-tween them, or to their left or right may provide additional complementary information. Illustra-tive examples are given in Table 1 and provide the motivation for our model. In the next section, we will show how we develop informative repre-sentations capturing both the semantic information in word embeddings and the contextual informa-tion expressing a word X  X  role relative to the entity mentions. We are the first to incorporate all of this information at once. The closest work is that of Nguyen and Grishman (2014), who use a log-linear model for relation extraction with embed-dings as features for only the entity heads. Such embedding features are insensitive to the broader contextual information and, as we show, are not sufficient to elicit the word X  X  role in a relation. We propose a general framework to construct an embedding of a sentence with annotations on its component words. While we focus on the rela-tion extraction task, the framework applies to any task that benefits from both embeddings and typi-cal hand-engineered lexical features. 3.1 Combining Features with Embeddings We begin by describing a precise method for con-structing substructure embeddings and annotated sentence embeddings from existing (usually un-lexicalized) features and embeddings. Note that these embeddings can be included directly in a log-linear model as features X  X oing so results in a special case of our full model presented in the next subsection.

An annotated sentence is first decomposed into substructures. The type of substructures can vary by task; for relation extraction we consider one the sentence we have a hand-crafted feature vec-tor f w represent each substructure as the outer product  X  between these two vectors to produce a matrix, herein called a substructure embedding : h w f context in S and annotations in A , which can in-clude global information about the annotated sen-tence. These features allow the model to pro-mote different properties and to distinguish differ-ent functions of the words. Feature engineering can be task specific, as relevant annotations can change with regards to each task. In this work we utilize unlexicalized binary features common in relation extraction. Figure 1 depicts the con-struction of a sentence X  X  substructure embeddings.
We further sum over the substructure embed-dings to form an annotated sentence embedding : When both the hand-crafted features and word em-beddings are treated as inputs, as has previously been the case in relation extraction, this anno-tated sentence embedding can be used directly as the features of a log-linear model. In fact, we find that the feature sets used in prior work for many other NLP tasks are special cases of this simple construction (Turian et al., 2010; Nguyen and Grishman, 2014; Hermann et al., 2014; Roth and Woodsend, 2014). This highlights an im-portant connection: when the word embeddings are constant, our constructions of substructure and annotated sentence embeddings are just specific forms of polynomial (specifically quadratic) fea-ture combination X  X ence their commonality in the literature. Our experimental results suggest that such a construction is more powerful than directly including embeddings into the model. 3.2 The Log-Bilinear Model Our full log-bilinear model first forms the sub-structure and annotated sentence embeddings from have complexity O ( C  X  nd 2 ) , where C is a model dependent constant. We present a hybrid model which combines the FCM with an existing log-linear model. We do so by defining a new model: p The log-linear model has the usual form: p loglin ( y | x ) / exp(  X   X  f ( x, y )) , where  X  are the model parameters and f ( x, y ) is a vector of fea-tures. The integration treats each model as a pro-viding a score which we multiply together. The constant Z ensures a normalized distribution. FCM training optimizes a cross-entropy objective: where D is the set of all training data and e is the set of word embeddings. To optimize the objective, for each instance ( y, x ) we per-form stochastic training on the loss function ` = ` ( y, x ; T, e ) = log P ( y | x ; T, e ) . The gradi-ents of the model parameters are obtained by backpropagation (i.e. repeated application of the chain rule). We define the vector s = [
P @` @ s where the indicator function I [ x ] equals 1 if x is true and 0 otherwise. We have the following gradi-ents: @` alent to: @` .
 When we treat the word embeddings as parameters (i.e. the log-bilinear model), we also fine-tune the word embeddings with the FCM model: @` @ e w
As is common in deep learning, we initialize these embeddings from an neural language model and then fine-tune them for our supervised task. The training process for the hybrid model (  X  4) is also easily done by backpropagation since each sub-model has separate parameters.
 Features Our FCM features (Table 2) use a fea-ture vector f w get entities M 1 ,M 2 , and their dependency path. Here h 1 ,h 2 are the indices of the two head words of M 1 ,M 2 ,  X  refers to the Cartesian product be-tween two sets, t h entity tags for ACE 2005 or WordNet supertags for SemEval 2010) of the head words of two entities, and stands for the empty feature. refers to the conjunction of two elements. The In-between features indicate whether a word w i is in between two target entities, and the On-path features in-dicate whether the word is on the dependency path, on which there is a set of words P , between the two entities.
 We also use the target entity type as a feature. Combining this with the basic features results in more powerful compound features, which can help us better distinguish the functions of word embed-dings for predicting certain relations. For exam-ple, if we have a person and a vehicle, we know it will be more likely that they have an ART rela-tion. For the ART relation, we introduce a corre-sponding weight vector, which is closer to lexical embeddings similar to the embedding of  X  X rive X .
All linguistic annotations needed for fea-CoreNLP (Manning et al., 2014). Since SemEval does not have gold entity types we obtained Word-Net and named entity tags using Ciaramita and Altun (2006). For all experiments we use 200-d word embeddings trained on the NYT portion of the Gigaword 5.0 corpus (Parker et al., 2011), with word2vec (Mikolov et al., 2013). We use the CBOW model with negative sampling (15 nega-tive words). We set a window size c =5, and re-move types occurring less than 5 times.
 Models We consider several methods. (1) FCM in isolation without fine-tuning. (2) FCM in isola-tion with fine-tuning (i.e. trained as a log-bilinear model). (3) A log-linear model with a rich binary feature set from Sun et al. (2011) (Baseline) X  this consists of all the baseline features of Zhou et al. (2005) plus several additional carefully-chosen features that have been highly tuned for ACE-style relation extraction over years of research. We ex-clude the Country gazetteer and WordNet features from Zhou et al. (2005). The two remaining meth-ods are hybrid models that integrate FCM as a sub-model within the log-linear model (  X  4). We con-sider two combinations. (4) The feature set of Nguyen and Grishman (2014) obtained by using the embeddings of heads of two entity mentions (+HeadOnly). (5) Our full FCM model (+ FCM ). All models use L2 regularization tuned on dev data. 6.1 Datasets and Evaluation ACE 2005 We evaluate our relation extraction system on the English portion of the ACE 2005 mains: Newswire ( nw ), Broadcast Conversation ( bc ), Broadcast News ( bn ), Telephone Speech ( cts ), Usenet Newsgroups ( un ), and Weblogs ( wl ). Following prior work we focus on the do-main adaptation setting, where we train on one set (the union of the news domains ( bn + nw ), tune hyperparameters on a dev domain (half of bc ) and evaluate on the remainder ( cts , wl , and the remainder of bc ) (Plank and Moschitti, 2013; Nguyen and Grishman, 2014). We assume that gold entity spans and types are available for train and test. We use all pairs of entity mentions to yield 43,518 total relations in the training set. We report precision, recall, and F1 for relation extrac-tion. While it is not our focus, for completeness we include results with unknown entity types fol-lowing Plank and Moschitti (2013) (Appendix 1). SemEval 2010 Task 8 We evaluate on the Se-2010) to compare with other compositional mod-els and highlight the advantages of FCM . This task is to determine the relation type (or no relation) between two entities in a sentence. We adopt the setting of Socher et al. (2012). We use 10-fold cross validation on the training data to select hy-perparameters and do regularization by early stop-ping. The learning rates for FCM with/without fine-tuning are 5e-3 and 5e-2 respectively. We report macro-F1 and compare to previously pub-lished results. ACE 2005 Despite FCM  X  X  (1) simple feature set, it is competitive with the log-linear baseline (3) on out-of-domain test sets (Table 3). In the typi-cal gold entity spans and types setting, both Plank and Moschitti (2013) and Nguyen and Grishman (2014) found that they were unable to obtain im-provements by adding embeddings to baseline fea-ture sets. By contrast, we find that on all do-mains the combination baseline + FCM (5) obtains the highest F1 and significantly outperforms the other baselines, yielding the best reported results for this task. We found that fine-tuning of em-beddings (2) did not yield improvements on our out-of-domain development set, in contrast to our results below for SemEval. We suspect this is be-cause fine-tuning allows the model to overfit the training domain, which then hurts performance on the unseen ACE test domains. Accordingly, Ta-ble 3 shows only the log-linear model.

Finally, we highlight an important contrast be-tween FCM (1) and the log-linear model (3): the latter uses over 50 feature templates based on a POS tagger, dependency parser, chunker, and con-stituency parser. FCM uses only a dependency parse but still obtains better results (Avg. F1). SemEval 2010 Task 8 Table 4 shows FCM compared to the best reported results from the SemEval-2010 Task 8 shared task and several other compositional models.

For the FCM we considered two feature sets. We found that using NE tags instead of WordNet tags helps with fine-tuning but hurts without. This may be because the set of WordNet tags is larger mak-ing the model more expressive, but also introduces more parameters. When the embeddings are fixed, they can help to better distinguish different func-tions of embeddings. But when fine-tuning, it be-comes easier to over-fit. Alleviating over-fitting is a subject for future work (  X  9).

With either WordNet or NER features, FCM achieves better performance than the RNN and MVRNN. With NER features and fine-tuning, it outperforms a CNN (Zeng et al., 2014) and also the combination of an embedding model and a tra-ditional log-linear model (RNN/MVRNN + lin-ear) (Socher et al., 2012). As with ACE, FCM uses less linguistic resources than many close competi-tors (Rink and Harabagiu, 2010).

We also compared to concurrent work on en-hancing the compositional models with task-specific information for relation classification, in-cluding Hashimoto et al. (2015) (RelEmb), which trained task-specific word embeddings, and dos Santos et al. (2015) (CR-CNN), which proposed a task-specific ranking-based loss function. Our Hybrid methods ( FCM + linear) get comparable re-sults to theirs. Note that their base compositional model results without any task-specific enhance-ments, i.e. RelEmb with word2vec embeddings and CR-CNN with log-loss, are still lower than the best FCM result. We believe that FCM can be also improved with these task-specific enhancements, e.g. replacing the word embeddings to the task-specific ones from (Hashimoto et al., 2015) in-creases the result to 83.7% (see  X  7.2 for details). We leave the application of ranking-based loss to future work.

Finally, a concurrent work (Liu et al., 2015) proposes DepNN, which builds representations for the dependency path (and its attached subtrees) between two entities by applying recursive and convolutional neural networks successively. Com-pared to their model, our FCM achieves compa-rable results. Of note, our FCM and the RelEmb are also the most efficient models among all above compositional models since they have linear time complexity with respect to the dimension of em-beddings. 7.1 Effects of the embedding sub-models We next investigate the effects of different types of features on FCM using ablation tests on ACE 2005 (Table 5.) We focus on FCM alone with the fea-ture templates of Table 2. Additionally, we show results of using only the head embedding features from Nguyen and Grishman (2014) (HeadOnly). Not surprisingly, the HeadOnly model performs poorly (F1 score = 14.30%), showing the impor-tance of our rich binary feature set. Among all the features templates, removing HeadEmb results in the largest degradation. The second most im-Table 5: Ablation test of FCM on development set. portant feature template is In-between , while Context features have little impact. Remov-ing all entity type features ( t h worse than the full model, showing the value of our entity type features. 7.2 Effects of the word embeddings Good word embeddings are critical for both FCM and other compositional models. In this section, we show the results of FCM with embeddings used to initialize other recent state-of-the-art mod-els. Those embeddings include the 300-d baseline embeddings trained on English Wikipedia (w2v-enwiki-d300) and the 100-d task-specific embed-per (Hashimoto et al., 2015), the 400-d embed-dings from the CR-CNN paper (dos Santos et al., 2015). Moreover, we list the best result (DepNN) in Liu et al. (2015), which uses the same embed-dings as ours. Table 6 shows the effects of word embeddings on FCM and provides relative compar-isons between FCM and the other state-of-the-art models. We use the same hyperparameters and number of iterations in Table 4.

The results show that using different embed-dings to initialize FCM can improve F1 beyond our previous results. We also find that increas-ing the dimension of the word embeddings does not necessarily lead to better results due to the problem of over-fitting (e.g.w2v-enwiki-d400 vs. w2v-enwiki-d300). With the same initial embed-dings, FCM usually gets better results without any changes to the hyperparameters than the compet-ing model, further confirming the advantage of FCM at the model-level as discussed under Ta-ble 4. The only exception is the DepNN model, which gets better result than FCM on the same embeddings. The task-specific embeddings from (Hashimoto et al., 2015) leads to the best perfor-mance (an improvement of 0.7%). This observa-Table 6: Evaluation of FCM s with different word embeddings on SemEval 2010 Task 8. tion suggests that the other compositional models may also benefit from the work of Hashimoto et al. (2015). Compositional Models for Sentences In order to build a representation (embedding) for a sen-tence based on its component word embeddings and structural information, recent work on compo-sitional models (stemming from the deep learning community) has designed model structures that mimic the structure of the input. For example, these models could take into account the order of the words (as in Convolutional Neural Networks (CNNs)) (Collobert et al., 2011) or build off of an input tree (as in Recursive Neural Networks (RNNs) or the Semantic Matching Energy Func-tion) (Socher et al., 2013b; Bordes et al., 2012).
While these models work well on sentence-level representations, the nature of their designs also limits them to fixed types of substructures from the annotated sentence, such as chains for CNNs and trees for RNNs. Such models cannot capture arbi-trary combinations of linguistic annotations avail-able for a given task, such as word order, depen-dency tree, and named entities used for relation extraction. Moreover, these approaches ignore the differences in functions between words appearing in different roles. This does not suit more general substructure labeling tasks in NLP, e.g. these mod-els cannot be directly applied to relation extraction since they will output the same result for any pair of entities in a same sentence.
 Compositional Models with Annotation Fea-tures To tackle the problem of traditional com-positional models, Socher et al. (2012) made the RNN model specific to relation extraction tasks by working on the minimal sub-tree which spans the two target entities. However, these specializations to relation extraction does not generalize easily to other tasks in NLP. There are two ways to achieve such specialization in a more general fashion: 1. Enhancing Compositional Models with Fea-tures. A recent trend enhances compositional models with annotation features. Such an ap-proach has been shown to significantly improve over pure compositional models. For example, Hermann et al. (2014) and Nguyen and Grishman (2014) gave different weights to words with dif-ferent syntactic context types or to entity head words with different argument IDs. Zeng et al. (2014) use concatenations of embeddings as fea-tures in a CNN model, according to their posi-tions relative to the target entity mentions. Be-linkov et al. (2014) enrich embeddings with lin-guistic features before feeding them forward to a RNN model. Socher et al. (2013a) and Hermann and Blunsom (2013) enhanced RNN models by refining the transformation matrices with phrase types and CCG super tags. 2. Engineering of Embedding Features. A dif-ferent approach to combining traditional linguistic features and embeddings is hand-engineering fea-tures with word embeddings and adding them to log-linear models. Such approaches have achieved state-of-the-art results in many tasks including NER, chunking, dependency parsing, semantic role labeling, and relation extraction (Miller et al., 2004; Turian et al., 2010; Koo et al., 2008; Roth and Woodsend, 2014; Sun et al., 2011; Plank and Moschitti, 2013). Roth and Woodsend (2014) con-sidered features similar to ours for semantic role labeling.

However, in prior work both of above ap-proaches are only able to utilize limited informa-tion, usually one property for each word. Yet there may be different useful properties of a word which can contribute to the performances of the task. By contrast, our FCM can easily utilize these features without changing the model structures.

In order to better utilize the dependency anno-tations, recently work built their models according to the dependency paths (Ma et al., 2015; Liu et al., 2015), which share similar motivations to the usage of On-path features in our work.
 Task-Specific Enhancements for Relation Clas-sification An orthogonal direction of improving compositional models for relation classification is to enhance the models with task-specific informa-tion. For example, Hashimoto et al. (2015) trained task-specific word embeddings, and dos Santos et al. (2015) proposed a ranking-based loss function for relation classification. We have presented FCM , a new compositional model for deriving sentence-level and substruc-ture embeddings from word embeddings. Com-pared to existing compositional models, FCM can easily handle arbitrary types of input and handle global information for composition, while remain-ing easy to implement. We have demonstrated that FCM alone attains near state-of-the-art perfor-mances on several relation extraction tasks, and in combination with traditional feature based log-linear models it obtains state-of-the-art results.
Our next steps in improving FCM focus on en-hancements based on task-specific embeddings or loss functions as in Hashimoto et al. (2015; dos Santos et al. (2015). Moreover, as the model pro-vides a general idea for representing both sen-tences and sub-structures in language, it has the potential to contribute useful components to vari-ous tasks, such as dependency parsing, SRL and paraphrasing. Also as kindly pointed out by one anonymous reviewer, our FCM can be applied to the TAC-KBP (Ji et al., 2010) tasks, by replac-ing the training objective to a multi-instance multi-label one (e.g. Surdeanu et al. (2012)). We plan to explore the above applications of FCM in the fu-ture.
 We thank the anonymous reviewers for their com-ments, and Nicholas Andrews, Francis Ferraro, and Benjamin Van Durme for their input. We thank Kazuma Hashimoto, C  X   X cero Nogueira dos Santos, Bing Xiang and Bowen Zhou for sharing their word embeddings and many helpful discus-sions. Mo Yu is supported by the China Scholar-ship Council and by NSFC 61173073.

