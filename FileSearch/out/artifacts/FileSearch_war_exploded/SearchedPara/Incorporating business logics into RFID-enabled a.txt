 1. Introduction 2007 to $26.88 billion in 2017.

Current attempts to applying RFID technologies mainly focus on the tracking and monitoring of goods moving through the supply chains, with the aims to shorten the order-to-cash cycle, detect and resolve delivery exceptions, prevent out-of-stock situations, and pinpoint affected product in a recall, while minimising inventory and safety stock levels. the support of business process management is indispensable. Business processes blend business logics and related while eliminating manual input, processing and checking of information. This network connects different enterprises and As a milestone towards such integration, Boeing has already embarked on a new assembly scheme that is focused on using  X  level deployment and business level applications under one umbrella.
 As Fig. 1 shows, a complete RFID system architecture includes four layers and three major sub systems ( Bornh X vd, Lin,
Management (PLM), Supply Chain Management (SCM), and Enterprise Resource Planning (ERP). The data-driven middleware is to connect the edge systems and enterprise systems by integrating wire level data with abstract business rules. processes. An RFID data management framework is established to model business logics from an object-oriented and event-oriented perspective. In regard to current RFID data management, this framework makes the following contributions: Propose a formalised object-oriented and event-driven RFID data management model.

Establish an event calculus based mechanism for designing event-based rules to capture the dynamics in the event-rich environment of RFID-enabled applications.
 Discuss the deployment of business logics and semantics to RFID edge system.

Present a buffering mechanism for efficient query executions in accordance with the proposed data/event integration framework.
 spective and the event-driven mechanism, and then presents the event calculus based RFID data management model, and finally demonstrates the deployment of business logics to RFID edge systems with an example. Section 5 analyses the de-layed effects in RFID query executions, and proposes a 2-Block buffering mechanism with related experiment results. The cation on future work. 2. State-of-the-art 2.1. Industry standards and products event capture and information exchange in the RFID-applied environment. Among these specifications, a reference architecture framework including Object Name Service (ONS), EPC Information Services (EPCIS), Application Level Events applications.
 Major software vendors, like IBM (WebSphere RFID), Sun (Java RFID System), BEA (BEAWebLogic RFID), Oracle (Sensor ment and middleware technology stacks to handle RFID. Yet, these middleware systems mainly emphasise on the RFID data application systems, and puts the devices, backend systems and human staff under one umbrella. The core services of the management (APM). ADM is designed to manage the contextual information and the received events, and APM is to navigate the activity handling according to the pre-defined rules. 2.2. RFID data/event management and context-sensitive middlewares
SQL like complex event language has been defined in SASE (Stream-based And Shared Event processing) project ( Gyllstrom query issue with concerns on energy efficiency. Wang and Liu (2005) investigated the temporal management of RFID data. event management.

To elicit the semantic meaning from the sensor captured data, context-sensitive middleware systems have been devel-oped and deployed on top of RFID edge systems. In ontology technology area, Ranganathan and Campbell (2003) have pro-posed a middleware to allow heterogeneous agents to acquire the contextual information and uniform the knowledge. To text-aware services to existing systems, Gu, Pung, and Zhang (2005) have developed a service-oriented middleware to port business processes in the EPC network, Kim, Moon, Kim, Yu, and Yeom (2007) have reported a business aware frame-work, where it stands between traditional RFID data middleware and upper application. The framework mainly focuses on converting RFID raw events into business events and thereby invokes upper level business services. 2.3. Event-driven and declarative business process modelling gether to automate the software process. To adapt to the event communication in distributed computing environment, cessing (CEP) provide the tool supports on event programming for event processing application.
To better describe process behaviours and interactions, IBM T.J. Watson Research Centre established a high-level ob-2007 ). This methodology uses objects to denote the information entities that capture process goals. Declarative rules are deployed to regulate behaviour dependencies rather than control flow diagrams. Following the object-oriented per-spective, K X ster, Ryndina, and Gall (2007) described the interactions between process objects by the means of modelling
Governatori (2009) have proposed a Business Process Constraint Network (BPCN) to model constrains in an executable guage defined by Montali et al. (2010) to model service choreography, and further map it onto Linear Temporal Logic and Abductive Logic Programming. Compared to these works, this paper aims to deploy an event calculus based declarative approach to model business logics in the RFID-enabled applications, with the emphasis on model expressiveness and query performance. 3. Looking into RFID-enabled applications using pallets is identified as a typical feature.
 drawn in the Business Process Modelling Notation (BPMN) diagram format, where the solid arrows denote the execution or-And-split/join or Or-split/join structures, respectively. The task with a plus sign inside denotes a sub process. will be discussed in Section 4.4 .

RFID can bring to business process management:  X  Improve the content accuracy for shipments. corresponding shipment). This information can be used for validating shipments.  X  Recover recall or counterfeit goods.
  X  How to design event patterns and use them to elicit meaningful business information from low level tag events?  X  How to blend the RFID events and event patterns into business logic modelling, so that the defined business rules are naturally sensitive to RFID events?  X  How to characterise the real-time status of objects in an event-dominated context? run time dynamics of a real application environment?
Towards these questions, we propose an RFID data management framework with a novel event aggregating/composing theoretical analysis and experimental studies. 4. Object-oriented RFID data management framework 4.1. Object-oriented perspective and event-driven mechanism
Traditional business process modelling approaches specify the handling procedures and the involved business logic using in describing business contexture and behaviours. The object-oriented modelling advocates a complete data-driven execu-tion mechanism, and thereby enables business actors to be aware of what can be done instead of what should be done.
Following the object-oriented business process modelling perspective, we choose event calculus as the mathematical tool ronment, such as RFID-enabled applications. Compared to other event/state modelling approaches, such as UML state focus on behavioural consistency verification. As the main component of Complex Event Processing framework, RAPIDE fluents can well reflect the system dynamics by recording the values of key parameters at different moments. 4.2. Preliminaries of event calculus extended to be situations ( Shanahan, 1999 )). A scenario modelled by event calculus constitutes predicates and axioms, which may refer to fluents, events, and time points as parameters. Table 1 lists the primary event calculus predicates. product is carried on a pallet.
 4.2.1. Domain-independent event calculus (EC) axioms ( EC 1) Clipped ( t 1 , f , t 3 ) M $ e , t 2 [ Happens ( e , t ( EC 2) Declipped ( t 1 , f , t 3 ) M $ e , t 2 [ Happens ( e , t ( EC 3) HoldsAt ( f , t 2 ) Happens ( e , t 1 ) ^ Initiates ( e , f , t ( EC 4) : HoldsAt ( f , t 2 ) Happens ( e , t 1 ) ^ Terminates ( e , f , t ( EC 5) HoldsAt ( f , t ) Initially P ( f ) ^ Clipped (0, f , t ); ( EC 6) : HoldsAt ( f , t ) Initially N ( f ) ^: Declipped (0, f , t ).

The first four axioms capture the behaviours of fluents once initiated or terminated by an event. To describe fluents X  we use symbol EC to represent the conjunction of these seven axioms, i.e., EC  X ^ 6 4.2.2. Uniqueness-of-names (UNA) axioms
To explicitly guarantee that there are no overlapping effects between events, it is needed to specify that the involved
Dead . Here, we use symbol X to represent the conjunction of these UNA axioms. 4.3. RFID data management model
The RFID data management model characterises the behaviours of RFID-tagged objects on the basis of event calculus. The following presents the basic components of the model and the relationships between them.
Definition 1 ( RFID Class ). An RFID class represents a type of objects, which abstracts the common properties of these objects. Formally, an RFID class c =( n , A , Q ) consists of  X  n , the name of c ;  X  a set A of attributes that c owns;  X  a set Q of fluent names, which can characterise the status of c  X  X  instances.
 Happens ( e , t ), which indicates that event e occurs at time t .

In practice, events flow as a series, which consists of several event observations, such as, ... , Happens ( e pens ( e 2 , t 2 ), ... , where t 1 &lt; t 2 . We call such a flow of event observations as an event series . predicates introduced in last sub section. Syntactically, a domain-dependent rule r can be defined as P _  X  P 2 { Initiates ( e , f , t ), Terminates ( e , f , t ), HoldsAt ( f , t )} [ {domain-specific predicates};  X  exp ij and exp i 2 { Happens ( e , t ), HoldsAt ( f , t )} [ {domain-specific predicates}. class referenced in C also occurs in C . i.e., " class a 2 C ,if a refers to class b , then $ b 2 C . ses defined in C . Syntactically, S =( C , R , EC , X ) consists of  X  RFID class schema C ;  X  a set R of rules, which are defined on the classes and fluents in C ;  X  conjunctions, EC and X , of EC axioms and UNA axioms, respectively.
 Definition 6 ( RFID Environment ). An RFID environment env denotes the execution environment with actual events for an
RFID scenario. An RFID environment env =( I , D ) consists of  X  a set I of env  X  X  initial settings, which are described using predicates Initially  X  a sequence D of the received event series. value of the fluents that are defined in S at a given time point t . Syntactically, a query q  X  D ( t 0 , t ) denotes the set of events that are occurred from t  X  I t 0 denotes the initial settings at time t 0 , i.e., the values of fluents at time t
In this paper, we confine that queries are all boolean ones, i.e., enquiring whether statement q time point t according to RFID scenario S in environment env .
 RFID edge systems. Syntactically, ot can be defined as j  X  symbol  X  X  jj  X  X  denotes the boolean result of the query;  X  invoke ( op ) denotes the action of invoking operation op of the edge system, if the query returns true. and the operation triggers can invoke proper operations of the edge system in response to the query results. 4.4. Deployment of RFID scenarios
The mentioned packing station example has been implemented with the proposed framework as a pilot installation, Proper Lines X  X  as an example to evaluate if and how our approach can support business process automation in practice. resent the data reading/writing operations.
 machine will check the number and types of the received products in the repository, and determine the assemble line for pallet packing.

With the classes, the following events are involved: For class  X  X  X ispatcher X  X , the following fluents are used to characterise a dispatcher X  X  run time status.
In addition to these fluents, two variables, num 1 and num and type 2, respectively.
 classes, axioms EC and X , and the domain-dependent rule set R , where R comprises the following rules:
Here, (R1) uses num 1 and num 2 to record the numbers of arrived products of Product Type 1 and Product Type 2, respec-Idle are defined as follows, cussed in next section, as well as the corresponding solutions.
 react to real-time dynamics.
 To test the defined RFID scenario, queries, and triggers, we need to put them in a concrete RFID environment. Such an v =( I , D ) may consist of the following content: Please note that MAX = 4 denotes that a full pallet contains four products.

Currently, the proposed approach has only been evaluated in the simulation environment. As future work, we plan to implement an industrial trial to validate the approach and test its performance in practice. 5. Efficient RFID querying in event calculus context
Some practical assessments conducted by InfoSys (2006) have found that a single distribution centre with seven reading ues and events at different time points, which may cause dependency chains between the large volume of events and seri-buffering mechanism to prevent such dependency chains and enhance the query efficiency. 5.1. Event/fluent delayed effects in queries
According to Definition 7 , each query execution needs to calculate the events occurred from time point t
This intention is based on the fact that RFID-enabled applications run queries continuously to monitor the real-time dynamics.
 classify this dependency as fluent delayed effects .

Fig. 5 illustrates a series of queries along the timeline. Suppose query q fluent values as a fluent snapshot for time t i . If another query q t rather than t 0 with the knowledge of the fluent snapshot at t and some fluent values before t i are also needed to calculate q for the calculation of later queries.

Taking into account these two kinds of delayed effects, we give the following two theorems on RFID query transformations.
 where exp 0 and exp i are event delayed effect free expressions, i.e., expressions without predicate Happens(e, t D t).
D t ij &lt; t 0 &lt; t 1 , while e ij and D t ij are referred to by (1) }.

Proof. From the definition of D 0 t 1 , we see that D 0 t 1 before t 1 , but hold the possibility to do after t 1 (inclusive). Therefore, D fluents in I after t 1 .

For an event Happens ( e ij , t 0 )in D 0 t 1 , condition t effect before t 1 . This indicates that no fluents in I t 1 not need to record the fluent values before t 1 .
 From above discussion, we can conclude that Theorem 1 holds. h
Proof. D I t 1 stores the fluent snapshots of time points before t after t 1 . Similar to the proof for Theorem 1 , we can conclude that Theorem 2 holds. h effects. To generalise the delayed effects for query transformations, we give an inference rule from Theorems 1 and 2 . 5.1.1. Inference rule (equivalent query transformation)
Suppose RFID scenario S has rule set R  X  P _ n where variables i , j and k start from zero to cover all possible combinations. In S , Query 5.2. 2-Block buffering mechanism will seriously damage the query execution performance. Upon this issue, we propose a 2-Block buffering mechanism. where  X  t is the time point for buffer b ;  X  D 0 is the set of buffered events that occurred before t , i.e., D 0 of formula (3) for S and env ;  X  I is the set of the fluent snapshots at time point t ;  X  D I is the set of the buffered fluent snapshots that occurred before t , i.e., D I of formula (4) for S and env . non-overlapped with each other. The initial content of bb can be obtained by calculating from time t done by calculating from time bb . t with bb  X  X  buffered content.
 and fluent values of time period x , as shown in Fig. 6 , have delayed effects to q 0
Algorithm 1 details the procedure of updating buffers for a given RFID scenario S in an RFID environment env . This algorithm involves function fluents ( R ), which returns the list of fluents in rule set R . Algorithm 1. Buffer Updating values at time t , which can be used to work out current queries directly, and save them to nb ,if nb is not overlapped with fb ; lines 18 X 19 update buffers fb and bb if nb and fb are not overlapped, otherwise fb and bb are kept unchanged. the events buffered in fb and possibly bb , instead of handling the whole event series from t environment. 5.3. Experiment results
We have implemented a simulation environment to test the query efficiency improvement of the buffering mechanism,
The simulation was conducted within Cygwin (Linux Emulation for Windows) on a computer with a Core 2 6300 CPU at 1.86 GHz and 1 GB memory, time. The query execution time is taken as the primary performance indicator. 5.3.1. Query efficiency comparison
To highlight the query efficiency improvements, we execute the same queries using three buffering mechanisms.  X  Naive mechanism. This mechanism calculates all occurred events from time point 0s without any buffering. occurred 8 s before. This mechanism follows the idea of the fixed period partition mechanism proposed by Wang and
Liu (2005) of Siemens Lab. (R7 X 8). The presented algorithm in Section 5.2 is used to update the buffers when calculating the test queries.
The query execution time under these mechanisms is presented in Table 2 . Owing to the limit of the simulation platform systems (which always execute queries at chip level instead of software level).

Different from the naive and 2-Block mechanisms, the periodical buffering mechanism owns extra query cost, as it needs Periodical mechanism by adding the mean time cost 1.5 s, and put the new time in column  X  X  X eriodical  X  X  in Table 2 . soars as the time goes. The periodical buffering and 2-Block buffering mechanisms keep with a relative smooth execution time.
 query execution time.
 shows that our 2-Block mechanism stands out with higher performance. 5.3.2. Scalability analysis a longer period of delayed effects owing to the merger of rule sets.
 settings. The query execution times of corresponding periodical mechanism with fluent snapshot updating periods of 8 s, 12 s and 16 s (sum of the event delayed effects and fluent delayed effects) are also given for comparison. together with the delayed effect period under the two mechanisms, as the longer time delayed effects increase the query calculation complexity.

In comparison to the periodical mechanism, the 2-Block mechanism has a distinct lower query execution time in all the query time line, which indicates the buffering performance and query efficiency of the 2-Block mechanism. 6. Discussions
To integrate business logics into RFID event/data management, our work presented a formal RFID data management between RFID events and tagged objects can be well represented, which thereby empowers the RFID edge systems with the cess automation with following distinct features: Concise representation
With time dependent fluents, our RFID data management model provides a more elegant rule representation with more layed effects.
 Integration of business rules to RFID data management
In the RFID scenario modelling, our proposed model composes the involved entities, business rules, edge system opera-edge systems to adapt to different application scenarios.
 Edge system level business logic deployment
By deploying the modelled business scenarios, the business logics can be injected into RFID edge systems. These logics This feature ensures the real-time responses to contextual dynamics.
 RFID query efficiency
The delayed effects in RFID queries have been discussed intensively. The 2-Block buffering mechanism has been designed forms others in aspects of query efficiency and scalability.
 Nevertheless, the migration to the proposed framework may bring some tradeoffs, which can be potential limitations.
Some tradeoffs and deduced limitations are summarised as follows, although they may be outweighed by many advantages offered by our methodology: (2) The query mechanism mainly relies on propositional fluents, which have relatively weak expressiveness in some sce-7. Conclusion and future work This paper looked into the issues of event-driven business logic modelling and RFID event flow querying. The proposed anism was designed to handle the delayed effects in event querying, and our experiments evidenced the performance improvements in comparison with other querying/buffering mechanisms.
 the model.
 Appendix A
List of related terms (Some are selected from reference  X  X  X lossary of RFID Terms X  X  of RFID Journal .) Service.
 EPCglobal Network  X  The Internet-based technologies and services that enable companies to retrieve data associated with Physical Markup Language.
 on the Internet.

Wire Level Data  X  The low level data generated by RFID readers. Before being further processed by middleware systems or backend information systems, such data are called wire level data.
 References
