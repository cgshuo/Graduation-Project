 This paper describes an advanced search engine that sup-ports users in querying documents by means of keywords, entities, and categories. Users simply type words, which are automatically mapped onto appropriate suggestions for enti-ties and categories. Based on named-entity disambiguation, the search engine returns documents containing the query X  X  entities and prominent entities from the query X  X  categories. H.3.3 [ Information Search and Retrieval ] Entity Search; Category Search; Document Retrieval  X  X hings, not Strings X  has been Google X  X  motto when in-troducing the Knowledge Graph and the entity-awareness of its search engine. When you type the keyword  X  X litschko X  as a query, Google returns Web and news pages and also explicit entities like Wladimir Klitschko and his brother Vi-tali (with structured attributes from the Knowledge Graph). Moreover, while typing, the query auto-completion method suggests the two brothers in entity form with the additional hints that one is an active boxer and the other a politican.
However, the Google approach still has limitations. First, recognizing entities in a keyword query and returning en-tity results seems to be limited to prominent entities. Un-like the Klitschko example, a query for the Ukrainian pop singer  X  X ryna Bilyk X  does not show any entity suggestions (neither for auto-completion nor in the search results). Sec-ond, Google seems to understand only individual entities, but cannot handle sets of entities that are described by a type name or category phrase. For example, queries like  X  X krainian celebrities X  or  X  X ast European politicians X  return only the usual ten blue links: Web pages that match these phrases. The search engine does not understand the user X  X  intention to obtain lists of people in these categories.
This demo presents a novel system, Stics , that extends entity awareness in Web and news search by tapping into long-tail entities and by understanding and expanding phrases that refer to semantic types. Stics supports users in search-ing for strings, things, and cats (short for categories) in a seamless and convenient manner. For example, when pos-ing the query  X  X erkel Ukrainian opposition X , the user is automatically guided, through auto-completion, to the en-tity Angela Merkel and the category Ukrainian politi-cans , and the latter is automatically expanded into Vitali Klitschko , Arseniy Yatsenyuk , etc. The search results in-clude pages talking about  X  X he German chancellor met the Ukrainian opposition leader and former heavy-weight cham-pion X , even if these texts never mention the strings  X  X ngela Merkel X  and  X  X itali Klitschko X .
Prior work on semantic search and entity retrieval (e.g., [1, 2]) has mostly focused on keyword input and entities as query results. Some work on searching with entities and rela-tions (e.g., [3]) requires structured input queries and returns RDF triples or Web tables. [4, 5] focuses on efficient auto-completion for combined phrase-and entity-queries, with the goal of retrieving entities. All this is quite different from our model which, additionally to phrases, allows entities as input and returns documents as output. No prior work has considered a combination of text phrases, entities, and se-mantic categories in the query model.
The basis for querying text documents in terms of en-tities and categories is the automatic detection and mark-ing of entities in the corpus and their association with type categories. We use the Named Entity Disambiguation sys-tem AIDA [6] and the type system of yago-knowledge.org , which combines Wikipedia categories with WordNet classes. We have run this machinery on a corpus of ca. 500,000 news articles collected from 100 important feeds since mid 2013. Based on this annotated and indexed corpus, the Stics search engine comprises a number of building blocks for query auto-completion, document ranking, and category expansion at query time.

Auto-Completion. The user does not know the under-lying knowledge in advance; so in order to navigate a huge number of entities and categories, some form of input auto-completion is crucial. Our method consists of two compo-nents: the first one for retrieving the candidates for a given prefix typed by the user, and the second one for ranking the candidates in a judicious manner. For candidate retrieval , the full canonical names of entities and categories are in-dexed for prefix lookups. For entities, we additionally store all token-level suffixes; so users are able to start typing at any token (e. g.  X  X erkel X  will also show Angela Merkel ). For categories, where the order of tokens is somewhat arbitrary ( X  X residents of the United States X  vs.  X  X nited States Presi-dents X ), we additionally index all 3-token permutations. For the candidate ranking , the entities are ranked by global pop-ularity, estimated by the number of incoming links to their Wikipedia articles. The categories are ranked by a mixture model capturing both the category X  X  prominence estimated by the prominence of all its entities as well as its specificity. A category X  X  specificity is estimated by the likelihood of its entities being present also in other categories. This way, the suggestions prefer categories whose entities are truly specific and do not appear in many other coarse-grained categories.
Document Ranking. Our demo setting pertains to a continuous stream of news documents that we annotate with entities in real-time. In this setting, ranking is best done chronologically, with the latest news shown at the first spot. However, we can change the ranking model to incorporate statistical language models where token and entity models are combined using a mixture model including time [8].
Category Expansion. Once the query is fully specified, categories need to be expanded into a set of individual en-tities to be looked up in the index. If there is no further context given in the query, the most prominent entities for the categories are used. However, once the user intent is made clear by specifying additional entities, the expansion should prefer entities that are both prominent and related to the user-given entities. Once Angela Merkel is specified next to Ukraninain politicians , the Klitschko brothers, as long-time German residents, are ranked higher. We realize this context-awareness by a mixture model of global entity prominence (like for auto-completion ranking) and global entity-entity coherence computed by the entity relatedness measure of [7]. The coherence is computed between all enti-ties of a given category and all entities specified directly in the query, averaging over all of them.
Searching with String, Things, and Cats. The pos-sibility to pose queries beyond strings enables a new search experience, allowing users to specify their actual intent in a crisper manner. However, not all search intents can be expressed using entities and categories, so the combination with regular search terms is kept. An example where com-bining all options that Stics offers is crucial is searching for opinions of Angela Merkel on the scandalous  X  X hone call X  of the US diplomat Victoria Nuland in the context of the Ukrainian riots. Figure 1 shows a screenshot of Stics for this example query.

Navigating Documents by Entities. The most fre-quent entities in the retrieved documents are displayed next to each result, allowing quick refinement of the initial query. In this setting the category search shows its potential, as users can begin their search by a more general category of en-tities, then refine by clicking the displayed entities. Thanks to the context-aware expansion, the refinement effect is even more pronounced. For instance, adding Angela Merkel in the example query raises the expanded Klitschko brothers by 5 ranks, thus re-adjusting the query X  X  focus. [1] K. Balog, M. Bron, M. de Rijke: Query modeling for [2] Z. Nie, J.-R. Wen, W.-Y. Ma: Statistical Entity [3] S. Elbassuoni et al.: Language-model-based ranking [4] H. Bast, B. Buchhold: An index for efficient semantic [5] H. Bast et al.: ESTER: efficient search on text, [6] J. Hoffart et al.: Robust Disambiguation of Named [7] J. Hoffart et al.: KORE: Keyphrase Overlap [8] X. Li, W. B. Croft: Time-based language models.
