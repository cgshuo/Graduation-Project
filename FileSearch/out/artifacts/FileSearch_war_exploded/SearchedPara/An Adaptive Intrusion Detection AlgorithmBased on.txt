 In the traditional signature-based IDSs, the rule-base has to be manually revised whenever each new type of attack is discovered. To solve this manual revision problem ,someofthe machine learning algorithms have been applied to the IDS[1][2]. However, most of these machine learning approaches are based on supervised learning, and have following problems: 1) a large volume of training data should be collected and classified manually; 2) the performance of the IDS depends on the quality of the training data; 3) a training phase with the huge data is computationally expensive and can not be performed in an incremental manner; 4) it is difficult to detect new intrusions which are not trained.
Recently, the clustering algorithms based on unsupervised learning have been proposed for IDS to overcome these probl ems[3][4][5]. However, the number of new intrusion types is increased rapidly and the volume of the information is too large. Thus, the general-purpose clustering algorithms used in artificial in-telligence need to be modified to satisfy the following IDS requirements: 1) each event data should be processed as soon as i t is received and clusters are generated adaptively without fixing the number of clusters; 2) clustering the huge volume of event data needs to be completed in fe w seconds; 3) the result of clustering needs to be insensitive to the order of input data since the sequence of event data is arbitrary in general.

In this paper, we propose a clustering-based intrusion detection algorithm which can satisfy all the requirements. First, we choose an on-line and incremen-tal clustering algorithm, called Adaptive Resonance Theory (ART). In addition to that, we employ both Concept Vector [6] and Mercer-Kernel [7] to classify a high dimensional sparse pattern effectively and improve the separability, respectively. These two techniques can improve the det ection rates of new intrusions because most of the information source for intrusion detection is high dimensional and very similar to each other. Based on the e xperimental results , our algorithm can provide superior performance by genera ting clusters incrementally and subdi-viding the patterns in detail.

The organization of this paper is as follows. Section 2 explains the data rep-resentation and the similarity measure, and Section 3 describes the proposed intrusion detection algorithm. The experimental results are given in Section 4, and conclusions are made in Section 5. In this section, we define input dataset and similarity measure in order to evalu-ate the real world problems; the input patterns are represented by a mixture of variable types. For a given set of n input patterns x = { x i } n i =1 , we assume that the input pattern x i consists of k numeric attributes and m symbolic attributes. Let R k and R m denote the k -dimensional numeric space and m -dimensional symbolic space, respectively. Then, x can be represented as follows:
To avoid bias toward some features over other features, we perform L2 nor-malization on numeric attributes to have unit Euclidean norm.
Also, a similarity measure which com putes the similarity between objects of mixed variable types is defined as follows: Let m and  X   X  [0 , 1] denote the dimension of the symbolic space and an adjustable parameter in order to weight the attribute types, respectively. Then, where the delta function  X  (  X  )isdefinedasfollows:
Since numeric attributes are normalized to be unit vectors, the cosine measure is obtained by the inner product of two vectors. An intrusion detection algorithm proposed in this paper is an  X  X daptive X  al-gorithm which combines the on-line and incremental clustering algorithm ART with Concept Vector and M ercer-Kernel. By employ ing the Concept Vector, a weight vector of each cluster is norma lized to the mean vector of each clus-ters. Thus, we need not consider the learning rate parameter in updating the weight vectors and can improve the speed of the execution. Also, we can improve the separability by mapping the input pattern to a feature space with Mercer-Kernel. Details of the proposed algorithm, called Kernel-ART , can be described as follows: Initialization: The number of clusters is set to one initially, and the first input pattern is assigned to its initial weight vector as follows:
Then, the matching value, computed by the activation function between the initial weight vector and the first input pattern, is set to one. This ensures that the first input pattern is assigned to the first cluster for any vigilance parameter  X   X  [0 , 1].
 Activation Function: The basic idea of the Mercer-Kernel is to perform a nonlinear data transformation into some high dimensional dot-product space, called feature space , to increase the probability of the linear separability of the patterns within the transformed space[7]. By replacing the inner product in the similarity measure of equation (3) with the RBF kernel function K ( x i ,x j )= space. Then, the activation function is defined by the similarity measure in the feature space as follows: where  X  w R j = is the mean vector of the clu ster normalized to the unit Euclidean norm. Since the Concept Vectors(i.e., clusters) are localized in the high dimensional sparse space, the clusters can represent the clas s structure of the dataset. That is, the clusters can represent each types of attacks individually.
 Matching Function: If the activation function AF (  X  ) and the matching func-tion MF (  X  ) are chosen as then the mismatch reset condition and the template matching process of the original ART can be eliminated for the resonance domain[8]. The most simple way to define the activation and the matching functions under the condition of equation (8) is to set the activation function to equal to the matching function. By this setting, we can make the algorithm simple and improve the speed of execution.
 Resonance Condition: According to the simple setting of the matching func-tion, the resonance unit is selected as follows:
When the best-matching template does not satisfy the vigilance criterion, a new cluster unit can be created and the input pattern is assigned to it. This condition can speed-up the executi on time of the algorithm further. Update Weight Vector: When a cluster j  X  is selected by equation (9), the input pattern is assigned to the cluster j  X  and the weight vector is updated as follows:
The weight vector of the cluster j  X  is defined by sum of input patterns that are assigned to the cluster j  X  . Thus, we need not consider the learning rate parameter in updating the weight vectors, and our algorithm is less sensitive to the order of input patterns than that of previous clustering such as Fuzzy ART. This is because, in Kernel-ART , the weight vectors memor ize the normalized mean vector of the input patterns assigned to each clusters. This intrusion detection algorithm, called Kernel-ART , is summarized in Fig. 1. To evaluate the effectiveness of Kernel-ART , KDD CUP 99 data[9] were used for the experiments. In order to make accura te analysis on the experiment result, we used only the Corrected-labeled dataset among KDD CUP 99 data. It was collected through the simulation on the U.S. military network by 1998 DARPA Intrusion Detection Evaluation Program, aiming at obtaining the benchmark dataset in the field of intrusion detection. The size of data is 311,029 and it consists of 9 symbolic attributes and 32 numeric attributes. The data is mainly divided into four types of attack: DOS , R2L , U2R and PROBING .In Kernel-ART ,  X  is the vigilance parameter which affects the support of clusters.  X   X  [0 , 1] and c denote the weight of the similarity measure function and the RBF kernel-width parameter of Kernel-ART , respectively. We set  X  to 0.93,  X  to 0.5 and c to 1. 4.1 Comparison with Other Intrusion Detection Algorithms Because many research results of intrus ion detection have been reported recently, we compare our performance with those supervised and unsupervised(clustering) learning algorithms. Table 1 shows the classification capability of each research for normal data and four types of attack. The Kernel-ART proposed in this paper can provide good classification capability as a whole, as shown in Table 1. Most of previous methods except IDBGC[5] show considerable inferior performance only at the classification capability as to R2L and U2R .Notethat R2L and U2R are host-based attacks which exploit vulne rabilities of the operating systems, not of the network protocol. Therefore, these are very similar to the  X  X ormal X  data in the KDD CUP 99 data collected from network packets. However, our method can provide superior performance in separating these two patterns. It can be said, therefore, that the strategy of Kernel-Method employed in this paper, that is to improve the separability(see Eq. 7), is turned out to be very efficient. Note that results reported in [5] were average detection ratios with small number of  X  X ampled X  instance from KDD CUP 99 data, which are sampled with similar number of each attack type. The comparisons indicates that our method is not only comparable to [5] in general but also outperformed in DOS and PROBING , in particular. 4.2 Clustering Results of Each Subsidiary Types of Attack To show the efficiency of Kernel-ART , we summarized the clustering results of each subsidiary types of attack in Tabl e 2. In general, rea sonable detection ratio with large number of instance. Depending on type of attack, the size of data available for the testing is quite different. The size of attack instance that pertained to U2R and R2L is much smaller than that of other types of attack. Therefore, some of the atta cks in those two classes show low detection ratio. In case of PROBING , Saint is a network probing tool modeled after Satan. So, saint and Satan are clustered together. According to the experimental results of Table 2, detailed separation capability of Kernel-ART is relatively good. As in section 4.1, this result matches well with the strategy of Kernel-Method employed in this paper.
 4.3 Comparison with Other Clustering Algorithms To evaluate the cluster ing characteristics of Kernel-ART , we compared our method with typical clustering algorithms such as K-means and Fuzzy ART. Among the labeled 311,029 data instances, we sampled 880 data instances such as 176 normal instances, 176 DOS attacks, 176 R2L attacks, 176 U2R attacks, and 176 PROBING instances. The conditions of t his experiment are summarized in Table 3, and the results of the experiment are shown in Table 4. These re-sults show that Kernel-ART can provide better performance in classifying both  X  X ormal X  and  X  X ttack X  than the typical clustering methods. In this paper, we have presented a robust and efficient intrusion detection algo-rithm which can detect various types of unknown intrusions in on-line by gen-erating clusters incrementally. The Co ncept Vector and the Mercer-Kernel can classify a high dimensional sparse patte rn effectively and improve the separa-bility. Based on the experimental results, the proposed Kernel-ART can classify individual attacks more accurately than the previous methods. This classifying information can be exploited further for d eveloping different responses to differ-ent attacks and several intrusion preven tion strategies. Because our algorithm has no training phase and does not require periodical renewals of discovered attacks, the cost of system maintenance can also be reduced significantly. We believe our algorithm is very practical and can be employed in future IDSs be-cause of its computational efficiency and ability in detecting new intrusions.
