 To exploit the enormous potential of niche products, modern information systems must support users in exploring digital libraries and online catalogs. A straight-forward way of do-ing so is to support browsing the available items, which is in general realized by presenting a user the top-N recom-mendations for each item. However, recent research indi-cates that most of the niche products reside in the so-called Long Tail , and simple collaborative filtering-based recom-mender systems alone do not allow to explore these niche products. In this paper we show that it is not only a popu-larity problem related to the collaborative filtering approach that makes a portion of the elements of a digital library in-accessible via browsing, but also a consequence of the top N-recommendation approach itself.
 H.3.3 [ Information Search and Retrieval ]: Search pro-cess, Selection process; G.2.2 [ Graph Theory ]: Network problems Measurement, Theory
The importance of recommender systems specifically for digital libraries has increased dramatically in the last few years. This development is driven by the explosive growth of digital items stored in modern databases making millions of digital items like e-books, audio-books, music or videos available. Now that even the most obscure digital items are available the problem is to filter and present to a user the right products. Chris Anderson has already foreseen, in his book [1], that the future of business will be selling less of more by exploiting the niche product market. Thus, the main question is how to assist users in finding exactly those niche products they are interested in.

One key concept to support people in finding new prod-ucts is to permit them to explore a digital library via brows-ing . There are several reasons why browsing will be one of the most important features of digital libraries in the future. First, it is quite obvious that no single recommendation will ever contain the one  X  X orrect X  item a user might be looking for; this will in general take several recommendation steps and each step might point the user closer to what she is looking for. Secondly, users often do not even have a well-defined search goal. Herocker et al. [7] discovered in a sur-vey that many people use sites like Amazon.com when they have no purchase imminent, but they simply find it pleas-ant to browse, which of course makes the search process very unfocused. This seems to be especially true for digital libraries containing e-books, audio-books, music or videos, where many users are only looking for entertainment. Last but not least, flat-rate offers based on a monthly fee, make it even more attractive to explore online movie, music or e-book collections. Thus, many people simply want to explore  X  X hat X  X  out there X  , encouraged by the fact that no additional costs arise from testing and trying items of online catalogs. Therefore we will interpret recommendation as a continu-ous process, where a user navigates from recommendation to recommendation, slowly refining her search goal. Such a process can then be described by the sequence of recom-mendations that a user steps through, and whenever a user is exploring a database via such a sequence of recommenda-tions we speak of browsing .

The easiest and most widespread way to support browsing is to present a user with a list of the top-N recommendations for the item currently being visited. Such systems are called top-N recommender systems [8, 9]. The goal of this paper is to analyze the ability of top-N recommender systems to assist users in exploring entire digital libraries via browsing, thus also raising the potential associated with niche prod-ucts. Exploiting the niche product market essentially means selling those hard-to-find items sitting in the so-called Long Tail [1, 2]. Recent research has been focusing on how to extend recommender systems to improve the sale of niche products. There seem to be two main reasons why niche products can stay hidden in the Long Tail: (1) The rec-ommendations for a niche product are bad. Because of the lack of reliable information about a niche product, the niche product is recommended in a wrong context, where users most likely are not interested in it. (2) A niche product Figure 1: The recommendation graph of a top-N item-based recommender. Each vertex has exactly l outgoing edges. In this example l = 3 . The number of incoming edges is an emergent property of the network. There might be hubs, i.e., vertices with a high in-degree (dark), and sources, i.e., ver-tices with an in-degree of zero (white). is hardly, or not at all, accessible via recommendations. It cannot be reached by any sequence of recommendations, but only by a direct query, which is of course unlikely because it is a niche product and not well-known. To alleviate the Long Tail problem the former reason has already been addressed [11]. In contrast, we will focus on the latter reason and try to identify items that are not reachable via recommendation. The number of items unreachable via recommendation is re-lated to the so-called catalog coverage [7], which measures the percentage of items that a recommender system ever rec-ommends to users. In practice, catalog coverage is usually measured on a set of recommendations formed at a single point in time. For instance, it might be measured by taking the union of the top 10 recommendations for each user in the population. In this paper, we will follow a different ap-proach, proposed by Celma et al. [3, 4], and analyze the net-work structure of top-N item-based recommender systems to identify the number of unreachable items in a recommenda-tion network as an inverse measure of catalog coverage.
Any item-based top-N recommender system can be trans-formed into an equivalent recommendation network or rec-ommendation graph . Consider a recommender system pre-senting a user a list of precisely l recommendations for each item in the database. Then the recommendation graph of this system can be represented as a directed graph G = ( V, E ), where each vertex v  X  V corresponds to an item in the database. Furthermore each vertex v has exactly l out-going edges pointing to those items in the database that are recommended for item v . Thus each vertex v has an out-degree of l (deg + ( v ) = l ). Figure 1 visualizes such a directed recommendation graph. The graph representation makes it easy to identify items that are not reachable via recommen-dation. Obviously, every vertex v with an in-degree of zero (deg  X  ( v ) = 0) corresponds to an item that is not reach-able via recommendation. In graph theory a vertex with an in-degree of 0 is called a source . Vertices with a very high in-degree are called hubs (see figure 1). The number of sources is an emergent property depending on the network struc-ture. It is an inverse measure of the catalog coverage, as it measures the number of items that are not reachable, while catalog coverage informs about the number of items that are ever recommended. We will show that sources naturally exist in any recommendation network and we will establish a lower bound on the number of sources one can expect.
The basic principle of an item-based recommender sys-tem is to first estimate similarities among catalog items and then generate recommendations based on these similarities. Consequently the estimates of the item-to-item similarities determine the respective recommendation graph as they de-fine the edges between the vertices. The structure of the graph in turn determines the number of sources. Hence, a similarity function that is completely unbiased (with no preference of linking specific items) will produce the fewest sources in a recommendation graph. Clearly a random rec-ommender is a realization of such a  X  X air X  similarity function and represents a lower bound with respect to the number of sources. Therefore we will now analyze the recommendation graph of a random recommender.

Random graphs have been intensively studied in complex network analysis [10, 5]. The specific random graph model we study in this paper is a directed graph G = ( V, E ) with a fixed out-degree for all vertices, as defined previously. Fur-thermore, we assume that the recommended items are cho-sen randomly. Thus each item in the recommendation graph will point to l other random items, but not to itself. Suppose that there are N items in total in the database. Then the recommendation graph will have N vertices and lN random edges. The probability of an item in this graph to be refer-enced by exactly k other items is then given by the binomial distribution: where p = 1 N  X  1 as each item will equally likely point to any other item, but not to itself. The probability of not being referenced by any other item in the graph is Knowing the probability for a single item not to be refer-enced by any other item, we can now estimate the expected number of sources E ( X ) (items that are not referenced) for the whole system containing N items.
 To validate our model, we created a random recommender and computed the number of sources for this particular rec-ommender. In figure 2 the number of observed sources is plotted together with the expected number of sources from the model. The model perfectly fits the observed numbers. It essentially depends on the two parameters l and N . The number of sources seem to linearly increase with the col-lection size (see figure 2). Depending on l , the number of sources grows more or less slowly. If N approaches infinity ( N  X   X  ) the expected number of sources ( E ( X )  X   X  ) approaches infinity as well. Deriving the limit, for N ap-proaching infinity, of the probability for an item to be a source-item (equation 2), we find that the probability con-verges: In combination with equation 3 this implies that the per-centage of sources will stay constant and that the number of sources increases linearly with the database size. More Figure 2: Number of sources observed for a random recom-mender and the predictions from the proposed model. importantly the percentage of sources exponentially decays with the length of the recommendation lists. Thus it is in general desirable to have long recommendation lists, as this implies high catalog coverage. In practice, however, the number of recommended items is constrained by usabil-ity concerns and is typically rather low (usually below ten). Furthermore, the random recommender model is optimal in the sense that it will create the fewest sources that one can expect. For real world recommender systems the percent-age of items inaccessible via recommendation can be much higher (see next section). One major theoretical result is that even in the best case, and independently of the recom-mendation approach, there will always be a percentage of items that will be inaccessible when browsing a top-N rec-ommender system  X  unless it is specifically designed (see section 3).
Based on our theoretic findings on the lower bound of the number of expected sources, we will now empirically show that for real world recommender systems, this lower bound is far too optimistic. We will analyze a real world content-based music recommender system, as well as a prototypical collaborative-filtering based recommender system. To evalu-ate these two systems, we counted the number of sources for various recommendation graphs. We systematically gener-ated recommendation graphs for different recommendation list length l . A recommendation list length of l = 5 implies that the five most similar items are recommended. Hence, the corresponding system is a top-5 recommender. Further-more we simulated different collection sizes by randomly re-moving items from the respective datasets.

Content-Based Recommendation As an example of a content-based recommender system we analyze a real world music recommender attached to the FM4 Soundpark 1 , an Austrian music portal. At the moment this platform con-tains about 10000 songs and is steadily growing. At the time of our experiments, 7665 songs were available. The recom-mender system of the FM4 Soundpark is based on a standard similarity measure for music audio files [6]. Based on this similarity measure one can generate song recommendations http://fm4.orf.at/soundpark/main Figure 3: Analysis of (a) a content-based music recom-mender system (b) a collaborative filtering based movie rec-ommender. The number of sources is illustrated for a top-5, a top-10 and a top-15 recommender system. The lower limit for the expected percentage of sources is 0 . 00673 for top-5, 0 . 000453 for top-10 and 2 . 06115  X  10  X  9 for top-15. of arbitrary length, ordered according to the similarity to the query song. Figure 3 (a) shows that for recommenda-tion lists of length l = 5 approximately 34% of all songs are sources and are therefore inaccessible via browsing.
Collaborative Filtering Our prototype for collabora-tive filtering-based recommendation is based on the well-known Movielens dataset 2 , which contains 1 million ratings for 3900 movies by 6040 users. The recommendation ap-proach that we simulate is based on the approach presented in [13]. The cosine distance between item vectors of the user-item ratings matrix is used as a similarity measure. Based on these similarities our experimental recommender then sim-ply proposes the top-N most similar items according to the cosine distance. Even if this is surely not a high quality recommender system, it will be useful as we are not striv-ing for improved classification accuracy. Our sole goal is to demonstrate that even for collaborative filtering approaches, recommender systems based on real world datasets will pro-duce many sources, far above the lower bound predicted by our model. The results of the analysis are visualized in figure 3 (b) . Obviously, in practice, the number of pro-duced sources is far above the theoretical lower limit, which is significantly below one percent for all systems (see cap-tion figure 3). Thus, a significant portion of the movies is never recommended by this experimental recommender sys-tem. For example, 19.23% of all movies will never be recom-mended when browsing the top-5 recommendations only. In the next section we will discuss the relation between sources and hubs.
To investigate the relation of hubs and sources we sys-tematically created the graph representations of the top-1 up to the top-100 recommender ( l = 1 . . . 100) for the FM4 Soundpark. For each of these graphs we counted the number of sources and additionally identified the  X  X iggest X  hub, the vertex with the maximum in-degree. Figure 4 shows that www.grouplens.org Figure 4: Analysis of the FM4 Soundpark. For small rec-ommendation lists, the number of sources is extremely large. It decreases with a growing number of recommendations per item, whereas the maximum in-degree over all vertices in each graph increases. For a result set size of 100, there is one song that appears in the recommendation list of 2628 other songs, or in 34.29% of all recommendation lists. for short recommendation lists the number of sources is ex-tremely high. When increasing the length of the recommen-dation list, the number of sources decreases exponentially  X  as expected. In contrast, the in-degree of hubs increases. Therefore simply increasing the recommendation list length will make more items reachable, but in turn will also create even more extreme hubs. This implies that when browsing such a recommendation network, one will often visit or re-visit hub items, which degrades the browseability. Further-more it seems that hubs and sources are related phenomena. Extreme hubs imply that there are many sources and vice versa. A very informal but intuitive explanation is that hub-vertices are some sort of attractors  X  X tealing X  the links from other vertices, which may even lead to a vertex having no in-coming links at all. Recent research hubs [12] indicates that the emergence of hubs is a direct consequence of the high dimensionality of the underlying data. Thus, we may say that hubs are a consequence of the curse of dimensionality, and sources are a consequence of hubs.
In this paper we have analyzed item-based top-N recom-mender systems with respect to catalog coverage. Experi-ments with two recommender types revealed that indepen-dently of the recommendation approach, many items of the respective catalog are not recommended at all, which im-plies that they are not reachable by recommendation-based browsing. Therefore just using the top-N recommendations to support browsing is not an ideal solution. To improve browsability it seems promising to take a more holistic ap-proach that also considers the structure of the whole rec-ommendation network. To guarantee important network properties like, e.g., reachability or connectedness, the rec-ommendations for an item cannot be totally independent of all other recommendations, but have to be coordinated in such a way that on the one hand, the recommendation accuracy is optimized and, on the other hand, essential net-work properties, e.g. reachability, are ensured. Another insight from our investigations is that sources are not only a consequence of a specific recommendation strategy, but are a consequence of the top-N recommendation approach itself and the dimensionality of the underlying dataset. Future re-search directions will include the development of algorithms that modify or generate recommendation graphs that simul-taneously optimize recommendation accuracy and desirable network properties. Another interesting research direction will be to analyze how likely is it to get stuck in a subpart of the recommendation graph.
 This research was supported by the Austrian Research Fund (FWF) under grant L511-N15, and by the Austrian Research Promotion Agency (FFG) under project number 815474. [1] C. Anderson. The Long Tail: Why the Future of [2] E. Brynjolfsson, Y. J. Hu, and M. D. Smith. From [3] O. Celma and P. Cano. From hits to niches? or how [4] O. Celma and P. Herrera. A new approach to [5] P. Erd  X os and A. R  X enyi. On random graphs. I. Publ. [6] A. Flexer, D. Schnitzer, M. Gasser, and G. Widmer. [7] J. L. Herlocker, J. A. Konstan, L. G. Terveen, and [8] G. Karypis. Evaluation of item-based top-n [9] S. K. Lam and J. Riedl. Shilling recommender systems [10] M. E. J. Newman. The structure and function of [11] Y.-J. Park and A. Tuzhilin. The long tail of [12] M. Radovanovit X  X , A. Nanopoulos, and M. Ivanovit X  X . [13] B. Sarwar, G. Karypis, J. Konstan, and J. Reidl.
