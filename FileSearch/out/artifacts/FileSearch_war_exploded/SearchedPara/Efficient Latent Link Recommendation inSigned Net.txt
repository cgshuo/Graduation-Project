 Signed networks, in which the relationship between two nodes can be either positive (indicating a relationship such as trust) or negative (indicating a relationship such as distrust), are becoming increasingly common. A plausible model for user behavior analytics in signed networks can be based upon the assumption that more extreme positive and negative re-lationships are explored and exploited before less extreme ones. Such a model implies that a personalized ranking list of latent links should place positive links on the top, negative links at the bottom, and unknown status links in between. Traditional ranking metrics, e.g. , area under the receiver op-erating characteristic curve (AUC), are however not suitable for quantifying such a ranking list which includes positive, negative, and unknown status links. To address this issue, a generalized AUC (GAUC) which can measure both the head and tail of a ranking list has been introduced. Since GAUC weights each pairwise comparison equally and the calcula-tion of GAUC requires quadratic time, we derive two lower bounds of GAUC which can be computed in linear time and put more emphasis on ranking positive links on the top and negative links at the bottom of a ranking list. Next, we develop two efficient latent link recommendation (ELLR) algorithms in order to recommend links by directly optimiz-ing these two lower bounds, respectively. Finally, we com-pare these two ELLR algorithms with top-performing base-line methods over four benchmark datasets, among which the largest network has more than 100 thousand nodes and seven million entries. Thorough empirical studies demon-strate that the proposed ELLR algorithms outperform state-of-the-art approaches for link recommendation in signed net-worksatnocostinefficiency.
 c 2015 ACM. ISBN 978-1-4503-3664-2/15/08 ...$15.00. H.3.3 [ Information Search and Retrieval ]: Information Filtering Recommender systems; signed networks; link recommenda-tion; GAUC In the past few years, social networking websites, e.g. , Facebook, Twitter, LinkedIn, etc. ,aswellasonlineE-com-merce websites such as Amazon and Ebay, have become in-creasingly common in people X  X  daily life and have dramati-cally reshaped people X  X  social behavior as well as their con-sumption habits. Thus a considerable amount of effort has been devoted to investigating their underlying social mech-anisms so as to enhance user experience [17, 20, 29]. For example, link prediction [17, 18] and recommendation [2] are two fundamental problems which can help users con-nect to entities ( e.g. , people, items, etc. )inwhichtheyare interested.

Specifically, given a set of potential links, link prediction is essentially a binary classification problem which aims to indicate the presence or absence of these links using either explicit network topological structure [1, 10, 17] ( e.g. ,com-mon friends) or latent features [21, 18, 14]. Link recommen-dation, which treats the same problem as a personalized ranking problem, aims to suggest a list of people (or items) to each user with whom the user might create new connec-tions; in the ranked list, people (or items) are recommended in decreasing order of ranking scores (which estimate the user X  X  preferences).

Recently, signed networks, i.e. , networks in which the re-lationship between two nodes can be either positive (indi-cating a relation such as trust) or negative (indicating a relation such as distrust), have become increasingly com-mon. For instance, in Epinions [7], which is a product re-view website with an active user community, users can in-dicate whether they trust or distrust each other based upon their reviews; in Slashdot [3, 13], a technology related news website, users can tag each other as  X  X riend X  or  X  X oe X  based upon their comments. A plausible model for user behav-iorinsignednetworkscanbebasedupontheassumption that more extreme positive and negative relationships are explored and exploited before less extreme relations. Such a model implies that a personalized ranking list of latent links should place positive links on the top, negative links at the bottom, and unknown status links in between.

Traditional ranking measures, e.g. , area under the ROC curve (AUC) [8], are not suitable to quantify such a ranking list in signed networks since they only apply to the binary case, rather than to the triplet (positive, negative, and un-known). Although a generalized AUC (GAUC) [26] which can measure both the head and tail of a ranking list has been introduced, it does not explicitly enforce that the links ranked on the top are all positive and the links ranked at the bottom are all negative. Moreover, the calculation of GAUC requires quadratic time, which is computationally intractable for large-scale networks.

In this paper, we aim to tackle both issues. The contribu-tions include:
The rest of this paper is organized as follows. In Section 2, we summarize related work. In Section 3, we introduce GAUC and derive its two lower bounds. In Section 4, we present two efficient latent link recommendation (ELLR) al-gorithms and introduce the optimization procedure. In Sec-tion 5, we conduct experiments to demonstrate the effec-tiveness and efficiency of ELLR algorithms. In Section 6, we draw some conclusions.
Let X  X  R n  X  m be an n by m matrix; we use X j  X  R n to represent its j -th column, which is a n dimensional vec-tor, and use X ij to denote the entry in its i -th row and j -th column. X F = Tr( XX T ) denotes the Frobenius norm of the matrix X ,whereTr( XX T )= n i =1 m j =1 X 2 ij represents the trace of an n by n square matrix XX T .
Various approaches have been developed to recommend links in social networks. In general, these approaches fall into two main categories: network topology-based approaches and latent feature-based approaches.
Network topology-based approaches can be further di-vided into two sub-categories: neighbor-based approaches and path-based approaches. Neighbor-based approaches, e.g. , common neighbors, Jaccard X  X  coefficient [23], Adamic and Adar [1], etc. , recommend links based upon their neigh-borhood structure. Path-based methods produce ranking scores by considering the ensemble of all paths between two nodes. For instance, Katz [10] computes the sum over all paths, of their lengths, exponentially damped to count short paths more heavily, i.e. , where X  X  X  0 , 1 } n  X  n is the adjacency matrix, X l i,j the set of all length l paths from i to j ,and0 &lt; X &lt; is a parameter which controls the damping. Other exam-ples include PageRank [17], supervised random walks [2], the model of consistent node types [25], etc.

These approaches, however, may not perform well when little topological information is available for nodes ( i.e. ,for example, when a node has few direct connections or high-order connections to other nodes). To handle this situation, latent feature-based approaches have been developed.
Latent feature-based approaches aim to learn a low rank model which can recover the values, or the relative ordering of the values, of entries in the (weighted) adjacency matrix associated to a network. These approaches can be further divided into pointwise methods, pairwise methods, and list-wise methods.
Pointwise methods [21, 22, 11, 12, 6, 9] treat link recom-mendation as a matrix completion problem and reconstruct the adjacency matrix of a partially observed social network from a low rank model. It has been shown that pointwise methods can outperform various neighborhood models as well as the SVD++ [11] for collaborative filtering and can be employed to perform top-k recommendation. Specifically, in a matrix factorization model [12][27], all the observed entries in the adjacency matrix X  X  X  0 , 1 } n  X  n are reconstructed with where X  X  R n  X  n is the approximated adjacency matrix, U  X  offset. This model learns the latent features (parameters) by minimizing the squared error: where  X &gt; 0 is a regularization parameter and M is a mask which is 1 if X ij &gt; 0andis0otherwise.

Although pointwise methods have shown their effective-ness for collaborative filtering and X can be employed to perform link recommendation, they do not explicitly model the relative order of the values in the adjacency matrix and thus may not perform well for link recommendation.
Pairwise methods [20, 18, 14] treat link recommendation as a learning to rank problem based upon pairwise compar-isons. Most of them aim to optimize AUC, which is given by: where X ij and X is are predicted ranking scores for the i user, P and N are the sets of positive and negative, respec-tively, links in a ranking list, and | X | denotes set cardinality. I (  X  ) is an indicator function which is 1 if the condition in the parenthesis is satisfied and is 0 otherwise. For instance, Rendle et al. [20] employ a smooth approximation of the in-dicator function to perform personalized recommendation; Menon and Elkan [18] employ a hinge loss to relax the indi-cator in (4) and recommend links. Lee et. al. [14] employ the local structures of the networks as well as surrogate losses to perform the recommendation task.

The AUC, however, is not suitable for quantifying a rank-ing list in signed networks which include positive, negative, and unknown status links since it only applies to the binary case.
Listwise methods [5, 31, 24] aim to learn a ranking func-tion by taking individual lists as instances and minimizing a loss function defined on the predicted list and the ground truth list. For instance, listMLE [31] employs the likeli-hood loss to perform information retrieval, which could be adapted to perform link recommendation; listwise learning to rank with matrix factorization (List+MF) [24] employs the cross entropy loss to perform collaborative filtering and item recommendation.

Although most existing approaches can be adapted or di-rectly employed to recommend latent links in signed net-works by treating positive links as positive samples and the others (including negative links and unknown status links) as negative samples, they may not perform well because their objectives conflate types of links. The goal of latent link rec-ommendation should be to order a list of latent links (pos-itive, negative, and unknown status) so that positive links are on the top and negative links are at the bottom. Tra-ditional measures, e.g. , area under the ROC curve (AUC), which are useful for binary rankings, cannot handle this situ-ation properly because they are not sensitive to the position of negative links in the ranking. Therefore, a generalized AUC (GAUC), which can measure both the head and tail of a ranking list, has been introduced [26]. Although directly optimizing GAUC with hinge loss has shown its effectiveness for positive link recommendation in signed networks [26], we note that GAUC does not explicitly enforce that the links ranked on the top are all positive and the links ranked at the bottom are all negative. Furthermore, the calculation of GAUC requires quadratic time which is computationally intractable for large-scale networks. Therefore, this paper presents two lower bounds for GAUC to address these is-sues and shows that they can be optimized in linear time to achieve state-of-the-art latent link recommendation perfor-mance in signed networks.
In this section, we first introduce the generalized AUC for measuring the performance of latent link recommendation in signed networks. Then we derive two lower bounds for GAUC which can be calculated in linear time and explicitly put more emphasis on ranking the positive links on the top and negative links at the bottom of a ranking list.
Given a set of latent links which includes potential pos-itive, negative, and unknown status links, an ideal person-alized ranking list in a signed network ranks positive links (indicating a relationship such as trust) on the top, nega-tive links (indicating a relationship such as distrust) at the bottom, and unknown status links in the middle. Tradi-tional ranking measures, e.g. , AUC cannot completely quan-tify closeness to such a ranking list because they only handle two types. One could use the AUC, treating positive links as positive samples and the other links as negative samples, but then it would be insensitive to the positions of nega-tive links and thus would not quantify the ranking quality of negative links. Although mean average precision (MAP) and normalized discounted cumulative gain (NDCG) can be used in signed networks, they may not perform well since they tend to overestimate the positive links on the top and thus cannot quantify the negative links at the bottom of a ranking list appropriately. To solve this problem, a general-ized AUC (GAUC) was introduced as follows [26]:
Definition 1. Assuming X  X  X  1 ,  X  1 , ? } n  X  m is a par-tially observed signed network, given a ranking list for user i , 1 denotes an observed positive link in set P ,  X  1 represents an observed negative link belong to set N , ? denotes an un-known status link within set O . Then the GAUC for user i is defined as: where X ij , X is ,and X it are predicted ranking scores for the i -th user. The first term and the second term quantify the ranking performance of positive links and negative links, respectively.

As is AUC, GAUC is 1 for a perfect ranking list and is 0 . 5 for a randomly ordered ranking list. The main difference between them is that GAUC jointly quantifies the ranking quality over positive links and negative links, in the pres-ence of unknown status links. GAUC also differs from other variants of AUC [19, 16] by focusing on the head and tail of a ranking list.

AlthoughGAUChasshownitseffectivenessforpositive link recommendation in signed networks [26], we note that GAUC does not explicitly enforce that the links ranked on the top are all positive and the links ranked at the bottom are all negative. Furthermore, the calculation of GAUC requires quadratic time which may make the underlying optimization problem intractable for large-scale networks. Therefore, two lower bounds of GAUC are derived to re-solve these issues.
Since GAUC considers each pairwise comparison equally, it does not explicitly quantify the fraction of positive and negative links which achieve the optimal ranking (positive links on the top and negative links at the bottom) in a rank-ing list; for this purpose, we derive a lower bound of GAUC. Theorem 1. GAUC for user i is lower bounded by: with equality holding if within each product operator the con-dition for each indicator function is jointly satisfied or jointly not satisfied.
 Theorem 1 states that the fraction of positive and negative links which achieve the optimal ranking cannot be greater than GAUC. It can be proved using the fact that the arith-metic mean is always greater than the geometric mean. Note that the calculation of the GAUC lower bound in Theorem 1 still requires quadratic time, which may make the underlying optimization problem intractable for large-scale networks. An equivalent, more tractable, form can be derived.

Proposition 1. GAUC X  X  lower bound in Theorem 1 is equivalent to which can be calculated in linear time.
 Proposition 1 suggests that instead of exhaustively search-ing for the pairwise comparisons which are jointly satisfied, we only need to compare with the maximum or minimum ranking score over the set O N or O P , respectively. Therefore, the complexity of computing (7) mainly depends on searching for the maximum and the minimum over O N and O P , respectively, and the pairwise comparisons be-tween P and O N as well as between N and O P .
In order to quantify whether all the positive links are ranked on the top and all the negative links are ranked at the bottom of a ranking list, a stricter lower bound for GAUC can be derived.
 Figure 1: Comparisons of AUC, GAUC, lower bound-I, and lower bound-II over four different ranking lists, listed from top (left) to bottom (right). Note that GAUC is sensitive to the positions of the positive and negative links while AUC is only sensitive to the positions of positive links here; Lower Bound-I aims to quantify the fraction of positive and nega-tive links which are ranked on the top or bottom of a ranking list; Lower Bound-II indicates whether all the positive links or negative links in the ranking list are all ranked on the top or at the bottom of a ranking list.  X + X  denotes a positive link,  X 0 X  denotes an unknown status link, and  X   X   X  denotes a negative link.

Theorem 2. GAUC and its lower bound in Proposition 1 can be further bounded by: with equality holding if within each product operator the con-dition for each indicator function is jointly satisfied.
Although the calculation of this lower bound takes only linear time, an equivalent form can be derived to further simplify it.

Proposition 2. GAUC X  X  lower bound in Theorem 2 is equivalent to which can be calculated in linear time.
 The complexity of computing (9) depends on searching for the maxima and minima over the four different sets.
Although GAUC is a good measure in signed networks since it can quantify both the head and tail of a ranking list which includes positive, negative, and unknown status links, we note that directly optimizing GAUC may not achieve sat-isfactory link recommendation performance (especially for top-k link recommendation performance) because it is com-putationally inefficient and does not explicitly put emphasis on ranking positive links on the top, and negative links at the bottom, of a ranking list. Therefore, in this paper we develop two efficient and effective latent link recommenda-tion algorithms by optimizing the two lower bounds (7) and (9), respectively. Figure 2: The sigmoid function  X  ( z )= 1 1+exp(  X  z ) is a smooth approximation of 0/1 loss. In this section, we first state the problem we aim to study. Then we develop two probabilistic models: efficient latent link recommendation-I (ELLR-I) and efficient latent link recommendation-II (ELLR-II), based upon the two lower bounds for GAUC given by (7) and (9), respectively, to do personalized latent link recommendation in signed networks. Finally, we describe the optimization procedure for these two algorithms.
Let X  X  X  1 ,  X  1 , ? } n  X  m be a partially observed signed net-work in which  X  1 denote an observed positive/negative link and ? denotes an unknown status link which could be either. In the training stage, we study the underlying mechanism for ranking observed positive links on the top, observed neg-ative links at the bottom, and unknown status links in be-tween. In the test phase, we evaluate how these latent ( i.e. , unknown status) links are ranked based upon the positions of potential positive and negative links.

In particular, we aim to learn a function f ( X, i, j )= X which can produce a ranking score ( X ij ) for each entry of in the training stage. In many real world applications X will be a sparse matrix which has low rank structure. Therefore, X can be approximated with two low rank matrices U  X  R r  X  n and V  X  R r  X  m and our aim can be recast as learning the following ranking function: such that the ranking lists can be optimized in the sense of lower bounds for GAUC. Note that U i and V j denote two latent user feature vectors, respectively. r min( m, n is the rank. When X is a symmetric signed network, i.e. , X = X T ,wecanset U = V for simplicity.
We propose a probabilistic model to perform efficient la-tent link recommendation in signed networks based upon lower bound-I for GAUC. Efficient latent link recommenda-tion-I (ELLR-I) is formulated as a Bayesian model aiming to produce the correct personalized ranking lists based upon pairwise comparisons between positive links and the latent or negative link which has the largest ranking score, as well as between negative links and the latent or positive link which has the smallest ranking score. Specifically, ELLR-I maximizes the following posterior distribution, where &gt; f denotes the orderings on { f ij | 1  X  j  X  n } termined by X , using the conditions that the positive links have higher scores than the other links and the negative links have lower scores than the other links. Assuming that each user is acting independently and each pair of users X  (or user and item X  X ) ranking scores is compared independently, the right hand side of (11) becomes:
P ( &gt; f ,X | U, V ) P ( U ) P ( V )
P ( U i ) P ( V j ) where C i,j,s = { ( i, s ) | X ij  X  X  and X is  X  X  X  X } X  X  ( i, s X ij  X  X  and X is  X  X  X  X } . P and N are the set of positive and that of negative links for user i .

To achieve the objective of ELLR-I, ( i,s ) P ( &gt; f ,X 1 ,X is =1 | U i ,V j ,V s ) should contribute to the first term of this probability should be close to 1 when the difference be-tween U T i V j and the maximum value of U T i V s is large and should be close to 0 when this difference is small. Similarly, tribute to the second term of (7) via its exponent I ( U T 1 when the difference between U T i V j and minimum value of i V s is small and should be close to 0 when this difference is large. Previous work such as that of Rendle et al. [20] has shown that the sigmoid function  X  ( z )=1 / (1 + exp(  X  z an ideal smooth version of 0 / 1 loss (as shown in Figure 2); defined as: be written as: where the max(  X  ) and min(  X  )areevaluatedover s .
We also put two zero-mean spherical Gaussian priors over user i  X  X  and user j  X  X  feature vectors, respectively, i.e. , and where  X  2 U and  X  2 V are variances for U and V , respectively. Therefore, the log-likelihood of ELLR-I is given by: where c is a constant which is independent of U and V ,and  X 
U =1 / X  2 U ,  X  V =1 / X  2 V are parameters for controlling the trade-off between the first two terms and the two regular-ization terms.

In practical applications, simply considering the maxi-mum ranking score in O X  X  (or the minimum ranking score in
O X  X  ) may make the gradient for (17) unstable when the most extreme example is an outlier. To address this issue, instead of using the maximum ranking score (or the mini-mum ranking score), we can utilize the mean of a number of ( e.g. , p = 30 or 50) largest ranking scores in O X  X  (or the mean of a number of smallest ranking scores in O X  X  ). In this way, the gradient of (17) becomes more reliable. A lo-cal maximum of the objective function given by (17) can be found by performing gradient ascent in U and V iteratively. The details are omitted here due to space limitations.
We propose anther probabilistic model to perform efficient latent link recommendation in signed networks based upon lower bound-II for GAUC. Like ELLR-I, ELLR-II can be formulated as a Bayesian probabilistic model aiming to pro-duce the correct personalized ranking list based upon the fact that the positive link with the smallest ranking score should be larger than the latent or negative link which has the largest ranking score, and the negative link with the largest score should be smaller than the latent or positive link which has the smallest ranking score. Using Bayes X  rule, the assumption that each user is acting independently, and each pair of users X  (or user and item X  X ) ranking scores is com-pared independently, we can derive (11) and (12) as we did for ELLR-I.

To achieve the objective of ELLR-II, the probability prod-contribute to the first term of (9) through the exponent I bility should be close to 1 when the difference between the minimum value of U T i V j and the maximum value of U T i large and should be close to 0 when this difference is small. should contribute to the second term of (9) via its expo-probability should be close to 1 when the difference be-tween the maximum value of U T i V j and minimum value of i V s is small and should be close to 0 when this differ-1 ,X is =1 | U i ,V j ,V s ) can be defined as: Table 1: Detailed statistics of the four datasets. Note that MovieLens10M is a bipartite network with 71 , 567 users and 10 , 681 items.
 should be defined as:
In the objective of ELLR-II, P ( U i )and P ( V j )arede-fined as in (15) and (16), respectively. Therefore, the log-likelihood of ELLR-II is given by: where c is a constant which is independent of U and V ,and as before  X  U =1 / X  2 U and  X  V =1 / X  2 V .

As with ELLR-I, in real world applications, simply con-sidering the maximum ranking score in N and O X  X  as well as the minimum ranking score in P and O X  X  may make the gradient of (20) unstable when the most extreme example is an outlier. To resolve this problem, we replace the maximum ranking score in N (or the minimum ranking score in P ) with the mean of q ( e.g. , q = 5 or 10) largest ranking scores in N (or with the mean of q smallest ranking scores in P ). We also replace the maximum ranking score in
O X  X  (or the minimum ranking score in O X  X  )with the mean of p ( e.g. , p = 30 or 50) largest ranking scores in O X  X  (or with the mean of p the smallest ranking scores in O X  X  ) as we did in ELLR-I. As with the objective of ELLR-I in (17), a local maximum of the objective function given by (20) can be obtained by performing gradient ascent in
U and V iteratively. The details are omitted here due to space limitations. The computational complexity for a full gradient of ELLR-Iover U or V is around O ( anpr )where a is the average number of positive and negative links for each user in the network, and r n is the rank. When a is very large, computation of a full gradient of ELLR-I may be infeasible. In this case, ELLR-II can be used since the computational complexity for a full gradient of ELLR-II over U or V is only around O ( qnpr )where q  X  a , p ,and r are relatively small and fixed. To further reduce training time of ELLR-I and ELLR-II, we can sample a subset of unknown status links and use stochastic gradient ascent to train these two models. (c) GAUC on Epinions (c) AUC on Epinions (c) MAP on Epinions To demonstrate the effectiveness and efficiency of ELLR-I and ELLR-II, we compare them against various baseline methods based upon four publicly available datasets.
We consider three well-known signed directed social net-works, i.e. , Wikipedia [4], Slashdot [13] and Epinions [7] The Wikipedia data comprise a voting network for promot-ing candidates to the role of admin. Each voter can indicate a positive (for supporting) or negative (for opposing) vote with respect to the promotion of a candidate [15]. Slash-dot is a social website focusing on technology related news. In Slashdot Zoo, users can tag each other as friends (like) or foes (dislike) based upon comments on articles. Epin-ions, which is a product review website, is a trust network in which users can indicate whether they trust or distrust each other based upon their reviews.
 We also consider a collaborative filtering dataset, i.e. , MovieLens10M 2 which includes 71,567 users, 10,681 items, and more than 10 million ratings ranging from 1 to 5. Al-though this dataset is originally used for movie rating pre-diction, we preprocess it such that rating values larger than
These datasets are available online at http://snap.stanford.edu/data/ .
This dataset is available online at http://grouplens.org/datasets/movielens/ . 3 are treated as positive links and rating values smaller than 3 are treated as negative links.

The detailed statistics of these four datasets are provided in Table 1. Given a fully observed signed network X  X  X  n  X  n in which X ij  X  X  X  1 , 0 , 1 } , X ij = 1 denotes that the i -th user trusts (or likes) the j -th user and X ij =  X  1 denotes that the user distrusts (or dislikes) the j -th user. We randomly se-lect a fraction ( e.g. , 10%, 20%, 40%, 60%) of the observed positive and negative links (as X Train ) for training, and eval-uate over a test set ( i.e. , X Test ) comprising the remaining non-zero entries. The zero entries in X Train are called latent links since each link has the potential to either be a positive or a negative link.
 In order to evaluate the effectiveness of ELLR-I and ELLR-II for link recommendation, we utilize GAUC (defined over  X  1 and 0) in (5), AUC (defined over  X  1) in (4), and mean average precision (MAP) (defined over  X  1) to quantify the ranking performance over X Test .

To evaluate the effectiveness of these two proposed ap-proaches for top-k link recommendation, we also report the associated precision at top k positions ( i.e. ,Precision@ P@ k )andrecallattop k positions ( i.e. , Recall@ k ). In par-ticular, Precision@ k is defined as: (c) P@ k on Epinions (a) Recall@ k on Wikipedia (c) Recall@ k on Epinions
Precision@ k = of positive links in the top and Recall@ k is given as: There are three hyper-parameters in ELLR-I and ELLR-II, i.e. , r ,  X  U ,and  X  V . For simplicity, we set  X  U = is optimized by searching over the grid { 1 , 5 , 10 , 50 r is optimized by searching over the grid { 5 , 10 , 30 , 50 To determine the optimal parameters for test, we conduct 5-fold cross-validation over the training set X Train and the pa-rameter combination which achieves the best average GAUC is utilized for test. Baselines: we evaluate the effectiveness of ELLR-I and ELLR-II by comparing them with six different baseline al-gorithms. Among them, common neighbor (CN) [17] is a representative network topology-based method; matrix fac-torization (MF) [12] is a pointwise approach; maximum mar-gin matrix factorization (MMMF) [30] and Bayesian per-sonalized ranking based matrix factorization (BPR+MF) [20] are pairwise methods; list-wise learning to rank with matrix factorization (List+MF) [24] is a listwise algorithm; and OPT+GAUC [26], which directly optimizes GAUC, is also a pairwise approach. The hyper-parameters of these baseline approaches (except CN) are selected as they are for ELLR-I and ELLR-II. To ensure that our results are reliable, we conduct all experiments 5 times; the average GAUC/AUC/MAP and their associated standard deviations are reported.
 Link Recommendation: Figures 3, 4 and 5 show the GAUC/AUC/MAP and their associated standard deviations over four datasets when the size of training set varies from 10% to 60%. We observe that CN is generally outperformed by other approaches since it only considers the neighbor-hood structure of these networks. Note that CN is not re-ported on MovieLens10M because that is a bipartite net-work. For GAUC in Figure 3, pairwise approaches, i.e. , MMMF and BPR+MF outperform MF which is a pointwise approach. This may be because MF only reconstructs the observed entries in the adjacency matrix and neglects un-knownstatuslinks. ForAUCandMAPinFigure4and5, respectively, MF outperforms MMMF and BPR+MF most of the time. This may be because they do not model nega-tive links explicitly. OPT+GAUC generally outperforms the other five baseline algorithms for GAUC/AUC/MAP since it models the positive, negative, and unknown status links in signed networks more completely. ELLR-I and ELLR-II can further improve the performance of OPT+GAUC for AUC/MAP because they explicitly put emphasis on ranking positive links on the top and negative links at the bottom of a ranking list (as shown in Proposition 1 and Proposi-tion 2). In general, the GAUC of ELLR-II is worse than that of ELLR-I. This is because the lower bound in Propo-sition 2 (the objective of ELLR-II) is more loose than that in Proposition 1 (the objective of ELLR-I) for GAUC.
Top k Link Recommendation: We study the effective-ness of two proposed approaches by comparing their Precision@ k and Recall@ k with baseline methods when the size of training set is 40% for Wikipedia, Slashdot, Epin-ions, and MovieLens10M. In Figure 6 and 7, we observe that ELLR-I and ELLR-II consi stently outperform the base-line approaches. This indicates that emphasizing putting positive links on the top and negative links at the bottom of a ranking list helps to enhance top-k link recommenda-tion performance. Note that ELLR-II generally outperforms ELLR-I in Figure 6 and 7; this is because ELLR-II is op-timizing a stricter bound as shown in Proposition 1 and Proposition 2. Note that we also observe similar results over other size of training sets; these results are omitted here due to space limitations. Figure 8: Comparison of training time (seconds) for different approaches over MovieLens10M (60 %). We check the efficiency of two proposed approaches, i.e. , ELLR-I and ELLR-II, by comparing their training time with baseline algorithms over MovieLens10M (60%) as shown in Figure 8. For fair comparison, we use the same hyper-parameters for all the approaches.

We observed that ELLR-I and ELLR-II require less train-ing time than other approaches. This is because: for MF, the computational complexity of its gradient is linearly pro-portional to the number of observed entries in signed net-works; for MMMF and BPR+MF, the computational com-plexities of their gradients depend on the number of pairwise comparisons of positive links to non-positive links ( i.e. , un-known+negative links). Although a sampling technique was used for non-positive links so as to facilitate the optimiza-tion, MMMF and BPR+MF still consume substantial time to calculate the gradient at each step. List+MF converges slower than other methods since it must perform listwise comparison for each positive link. OPT+GAUC converges slower than MMMF and BPR+MF since it involves an ad-ditional cost for pairwise comparisons of negative links to non-negative links at each step. ELLR-I, however, only con-siders the most extreme non-positive links as well as the most extreme non-negative links and thus converges faster than the baseline methods (Proposition 1). ELLR-II can further reduce the time cost of ELLR-I since it only further considers the most extreme positive and negative links at each step (shown in Proposition 2). We also observe simi-lar results over the other three datasets. These results are omitted here due to space limitations.
We investigate the sensitivity of ELLR-I and ELLR-II with respect to the regularization parameters  X  U =  X  V  X  { 1 , 5 , 10 , 50 , 100 , 200 } and r  X  X  5 , 10 , 30 , 50 , 70 Wikipedia (20%) dataset. When we vary the value of  X  U or r , we keep the other parameters fixed. We plot the GAUC/AUC/ MAP with respect to  X  U or r in Figure 9. We observe that both ELLR-I and ELLR-II are very stable and they achieve good performance when  X  U varies from 10 to 200 and r varies from 10 to 90.
In this paper, we derived two lower bounds for GAUC which can be computed in linear time. The first quantifies the fraction of positive and negative links which are ranked at the optimal positions ( i.e. , positive links on the top and negative links at the bottom); the second is even stricter and measures whether all the positive links are ranked on Figure 9: The parameter sensitivity of ELLR-I and ELLR-II with respect to the regularization parameters  X  U  X 
V  X  X  1 , 5 , 10 , 50 , 100 , 200 } and r  X  X  5 , 10 , 30 , over Wikipedia (20%). We can observe that both ELLR-I and ELLR-II are very stable with respect to  X  U (  X  V )and r . the top and whether all the negative links are ranked at the bottom of a ranking list. With these two lower bounds, we developed two efficient probabilistic models, i.e. , ELLR-I and ELLR-II, to infer personalized ranking lists of latent links by directly optimizing them. We compared ELLR-I and ELLR-II with top-performed baseline approaches over four benchmark datasets; our experimental results demon-strate that the proposed ELLR algorithms outperform state-of-the-art methods for link recommendation in signed net-works with no loss of efficiency.

One limitation of the current approaches is that they only consider latent features of signed networks and do not incor-porate explicit features. It would be interesting to combine these two types of features together to perform latent link recommendation in the future. Furthermore, it is also in-teresting to investigate side information of users/items and utilize this information to improve latent link recommenda-tion in signed networks. Finally, inferring negative links [28] with our proposed algorithms is also a interesting problem to study.
 The work of Dongjin Song and David A. Meyer were sup-ported by the U.S. Department of Defense Minerva Re-search Initiative/Army under Grant W911NF-09-1-0081 and in part by the National Science Foundation-Division of Math-ematical Sciences under Grant 1223137. The work of Dacheng Tao was supported by the Australian Research Council un-der Project DP-140102164 and Project FT-130101457. [1] L. A. Adamic and E. Adar. Friends and neighbors on [2] L. Backstrom and J. Leskovec. Supervised random [3] M. J. Brozzowski, T. Hogg, and G. Szabo. Friends and [4] M. Burke and R. Kraul. Mopping up: Modeling [5] Y. Cao, J. Xu, T.-Y. Liu, H. Li, Y. Huang, and H.-W. [6] P. Cremonesi, Y. Koren, and R. Turrin. Performance [7] R.V.Guha,R.Kumar,P.Raghavan,andA.Tomkin.
 [8] J. A. Hanley and B. J. Mcneil. The meaning and use [9] C. J. Hsieh, K. Y. Chiang, and I. S. Dhillon. Low rank [10] L. Katz. A new status index dervied from sociometric [11] Y. Koren. Factorization meets the neighborhood: a [12] Y. Koren, R. Bell, and C. Volinsky. Matrix [13] C. Lampe, E. Johnston, and R. Resnick. Follow the [14] J. Lee, S. Bengio, S. Kim, G. Lebanon, and Y. Singer. [15] J.Leskovec,D.P.Huttenlocher,andJ.M.Kleinberg. [16] Y. Li. A generalization of auc to an ordered multiclass [17] D. Liben-Nowell and J. Kleinberg. The link prediction [18] A. K. Menon and C. Elkan. Link prediction via matrix [ 19] C. T. Nakas and C. T. Yiannoutsos. Ordered [20] S. Rendle, C. Freudenthaler, Z. Gantner, and [21] J. D. M. Rennie and N. Srebro. Fast maximum margin [22] R. Salakhutdinov and A. Mnih. Probabilistic matrix [23] G. Salton and M. J. McGill. Introduction to modern [24] Y. Shi, M. Larson, and A. Hanjalic. List-wise learning [25] D. Song and D. A. Meyer. A model of consistent node [26] D. Song and D. A. Meyer. Recommding positive links [27] D. Song, D. A. Meyer, and M. R. Min. Fast [28] J. Tang, S. Chang, C. C. Aggarwal, and H. Liu. [29] J. Tang, S. Wu, J. Sun, and H. Su. Cross-domain [30] M. Weimer, A. Karatzoglou, and A. Smola. Improving [31] F. Xia, T.-Y. Liu, J. Wang, W. Zhang, and H. Li.
