 A question that arises when extracting a relation is how to capture its temporal validity: Can we assign a period of time when the obtained relation held? As pointed out in (Ling and Weld, 2010), while much research in automatic relation extraction has focused on distilling static facts from text, many of the tar-get relations are in fact fluents , dynamic relations whose truth value is dependent on time (Russell and Norvig, 2010).

The Temporally anchored relation extraction problem consists in, given a natural language text document corpus, C , a target entity, e , and a target relation, r , extracting from the corpus the value of that relation for the entity, and a temporal interval for which the relation was valid.

In this paper, we introduce a methodological ap-proach to temporal anchoring of relations automat-ically extracted from unrestricted text. Our system (see Figure 1) extracts relational facts from text us-ing distant supervision (Mintz et al., 2009) and then anchors the relation to an interval of temporal va-lidity. The intuition is that a distant supervised sys-tem can effectively extract relations from the source text collection, and a straightforward date aggrega-tion can then be applied to anchor them. We pro-pose a four step process for temporal anchoring: (1) represent temporal evidence; (2) select tempo-ral information relevant to the relation; (3) decide how a relational fact and its relevant temporal in-formation are themselves related; and (4) aggregate imprecise temporal intervals across multiple docu-ments. In contrast with previous approaches that aim at intra-document temporal information extrac-tion (Ling and Weld, 2010), we focus on mining a corpus aggregating temporal evidences across the supporting documents.

We address the following research questions: (1) Validate whether distant supervised learning is suitable for the task, and evaluate its shortcomings. (2) Explore whether the use of features extracted from a document-level rich representation could im-prove distant supervised learning. (3) Compare the use of document metadata against temporal expres-sions within the document for relation temporal an-choring. (4) Analyze how, in a pipeline architecture, the propagation of errors limits the overall system X  X  performance.

The representation we use for temporal informa-tion is detailed in section 2; the rich document-level representation we exploit is described in section 3. For a query entity and target relation, the system first performs relation extraction (section 4); then, we find and aggregate time constraint evidence for the same relation across different documents, to estab-lish a temporal validity anchor interval (section 5). Empirical comparative evaluation of our approach is introduced in section 6; while some related work is shown in section 7 and conclusions in section 8. We will denominate relation instance a triple  X  entity, relation name, value  X  . We aim at anchor-ing relation instances to their temporal validity. We need a representation flexible enough to capture the imprecise temporal information available in text, but expressed in a structured style. Allen X  X  (1983) interval-based algebra for temporal representation and reasoning, underlies much research, such as the Tempeval challenges (Verhagen et al., 2007; Puste-jovsky and Verhagen, 2009). Our task is different, as we focus on obtaining the temporal interval as-sociated to a fact, rather than reasoning about the temporal relations among the events appearing in a single text.

Let us assume that each relation instance is valid during a certain temporal interval, I = [ t 0 , t f ] . This sharp temporal interval fails to capture the impreci-sion of temporal boundaries conveyed in natural lan-guage text. The Temporal Slot Filling task at TAC-KBP 2011 (Ji et al., 2011) proposed a 4-tuple rep-resentation that we will refer to as imprecise anchor intervals . An imprecise temporal interval is defined as an ordered 4-tuple of time points: ( t 1 , t 2 , t 3 , t with the following semantics: the relation is true for a period which starts at some point between t 1 and t and ends between t 3 and t 4 . It should hold that: t 1  X  t 2 , t 3  X  t 4 , and t 1  X  t 4 . Any of the four endpoints can be left unconstrained ( t 1 or t 3 would be  X  X  X  , and t 2 or t 4 would be +  X  ). This represen-tation is flexible and expressive, although it cannot capture certain types of information (Ji et al., 2011). We use a rich document representation that employs a graph structure obtained by augmenting the syn-tactic dependency analysis of the document with se-mantic information.

A document D is represented as a document graph G D ; with node set V D and edge set, E D . Each node v  X  V D represents a chunk of text, which is a sequence of words 1 . Each node is labeled with a dictionary of attributes, some of which are common for every node: the words it contains, their part-of-speech annotations (POS) and lemmas. Also, a rep-resentative descriptor , which is a normalized string value, is generated from the chunks in the node. Cer-tain nodes are also annotated with one or more types . There are three families of types: Events (verbs that describe an action, annotated with tense, polar-ity and aspect); standardized Time Expressions; and Named Entities, with additional annotations such as gender or age.

Edges in the document graph, e  X  E D , represent four kinds of relations between the nodes:  X  Syntactic: a dependency relation.  X  Coreference: indicates that two chunks refer to the same discourse referent .  X  Semantic relations between two nodes, such as hasClass , hasProperty and hasAge .  X  Temporal relations between events and time ex-pressions.

The processing includes dependency parsing, named entity recognition and coreference reso-lution, done with the Stanford CoreNLP soft-ware (Klein and Manning, 2003); and events and temporal information extraction, via the T ARSQI Toolkit (Verhagen et al., 2005).

The document graph G D is then further trans-formed into a collapsed document graph , G C . Each node of G C clusters together coreferent nodes, rep-resenting a discourse referent . Thus, a node u in G C is a cluster of nodes u 1 , . . . , u k of G D . There is an edge ( u, v ) in G C if there was an edge between any of the nodes clustered into u and any of the nodes v , . . . , v k 0 . The coreference edges do not appear in this representation. Additional semantic information is also blended into this representation: normaliza-tion of genitives, semantic class indicators inferred from appositions and genitives, and gender annota-tion inferred from pronouns. A final graph example can be seen in Figure 2. To perform relation extraction, our proposal fol-lows a distant supervision approach (Mintz et al., 2009), which has also inspired other slot filling sys-tems (Agirre et al., 2009; Surdeanu et al., 2010). We capture long distance relations by introducing a document-level representation and deriving novel features from deep syntactic and semantic analysis. Seed harvesting. From a reference Knowledge Base (KB), we extract a set of relation triples or seeds :  X  entity, relation, value  X  , where the relation is one of the target relations. Our document-level distant supervision assumption is that if entity and value are found in a document graph (see section 3), and there is a path connect-ing them, then the document expresses the relation. Relation candidates gathering. From a seed triple, we retrieve candidate documents that contain both the entity and value, within a span of 20 tokens, using a standard IR approach. Then, entity and value are matched to the document graph represen-tation. We first use approximate string comparison to find nodes matching the seed entity. After an en-tity node has been found we use local breadth-first-search (BFS) to find a matching value and the short-est connecting path between them. We enforce the Named Entity type of entity and value to match a expected type, predefined for the relation.

Our procedure traverses the document graph look-ing for entity and value nodes meeting those condi-tions; when found, we generate features for a pos-itive example for the relation 2 . If we encounter a node that matches the expected NE type of the rela-tion, but does not match the seed value, we generate a negative example for that relation.
 Training. From positive and negative examples, we generate binary features; some of them are inspired by previous work (Surdeanu and Ciaramita, 2007; Mintz et al., 2009; Riedel et al., 2010; Surdeanu et al., 2010), and others are novel, taking advantage of our graph representation. Table 1 summarizes our choice of features. Features appearing in less than 5 training examples were discarded.
 Relation instance extraction. Given an input entity and a target relation, we aim at finding a filler value for a relation instance. This task is known as Slot Filling. From the set of retrieved documents relevant to the query entity, represented as document graphs, we locate matching entities and start a local BFS of candidate values, generating for them an unlabelled example. For each of the relations to extract, a bi-nary classifier (extractor) decides whether the exam-ple is a valid relation instance. For each particular relation classifier, only candidates with the expected entity and value types for the relation were used in the application phase. Each extractor was a SVM classifier with linear kernel (Joachims, 2002). All learning parameters were set to their default values.
The classification process yields a predicted class label, plus a real number indicating the margin. We performed an aggregation phase to sum the mar-gins over distinct occurrences of the same extracted value. The rationale is that when the same value is extracted from more than one document, we should accumulate that evidence.

The output of this phase is the set of extracted re-lations (positive for each of the classifiers), plus the documents where the same fact was detected ( sup-porting documents ). In this section, we propose and discuss a unified methodological approach for temporal anchoring of relations. We assume the input is a relation instance and a set of supporting documents . The task is es-tablishing a imprecise temporal anchor interval for the relation.

We present a four-step methodological approach: (1) representation of intra-document temporal infor-mation; (2) selection of relevant temporal informa-tion for the relation; (3) mapping of the link between relational fact and temporal information into an in-terval; and (4) aggregation of imprecise intervals. Temporal representation. The first methodologi-cal step is to obtain and represent the available intra-document temporal information; the input is a doc-ument, and the task is to identify temporal signals and possible links among them. We use the term link for a relation between a temporal expression (a date) and an event; we want to avoid confusion with the term relation (a relational fact extracted from text).
In our particular implementation:  X  We use T ARSQI to extract temporal expressions and link them to events. In particular, T ARSQI uses the following temporal links: included , si-multaneous , after , before , begun by or ended .  X  We focus also on the syntactic pattern [ Event-preposition-Time ] within the lexical context of the candidate entity and value.  X  Both are normalized into one from a set of prede-fined temporal links: within , throughout , begin-ning , ending , after and before .
 Selection of temporal evidence. For each docu-ment and relational instance, we have to select those temporal expressions that are relevant. a. Document-level metadata. The default value b. Temporal expressions. Temporal evidence Mapping of temporal links into intervals. The third step is deciding how a relational fact and its rel-evant temporal information are themselves related. We have to map this information, expressed in text, to a temporal representation. We will use the impre-cise anchor intervals described is section 2.
Let T be a temporal expression identified in the document or its metadata. Now, the mapping of tem-poral constraints depends on the temporal link to the time expression identified; also, the semantics of the event have to be considered in order to decide the time period associated to a relation instance. This step is important because the event could refer just to the beginning of the relation, its ending, or both. For instance, it is obvious that having the event marry is different to having the event divorce , when decid-ing the temporal constraints associated to the spouse relation.

Table 2 shows our particular mapping between temporal links and constraints. In particular, for the default document creation time, we suppose that a relation which appears in a document with creation time d held true at least in that date; that is, we are assuming a within link, and we map t 2 = d , t 3 = d . Inter-document temporal evidence aggregation. The last step is aggregating all the time constraints found for the same relation and value across differ-ent documents. If we found that a relation started af-ter two dates d and d 0 , where d 0 &gt; d , the closest con-straint to the real start of the relation is d 0 . Mapped to temporal constraints, it means that we would choose the biggest t 1 possible. Following the same reason-ing, we would want to maximize t 3 . On the other side, when a relation started before two dates d 2 and d , where d 0 2 &gt; d 2 , the closest constraint is d 2 and we would choose the smallest t 2 . In summary, we will maximize t 1 and t 3 and minimize t 2 and t 4 , so we will narrow the margins. We have used for our evaluation the dataset com-piled within the TAC-KBP 2011 Temporal Slot Fill-ing Task (Ji et al., 2011). We employed as initial KB the one distributed to participants in the task, which has been compiled from Wikipedia infoboxes. It contains 898 triples  X  entity, slot type, value  X  for 100 different entities and up to 8 different slots (re-lations) per entity 3 . This gold standard contains the correct responses pooled from the participant sys-tems plus a set of responses manually found by annotators. Each triple has associated a temporal anchor. The relations had to be extracted from a domain-general collection of 1.7 million documents. Our system was one of the five that took part in the task.We have evaluated the overall system and the two main components of the architecture: Rela-tion Extraction, and Temporal Anchoring of the re-lations. Due to space limitations, the description of our implementation is very concise; refer to (Garrido et al., 2011) for further details. 6.1 Evaluation of Relation Extraction System response in the relation extraction step con-sists in a set of triples  X  entity, slot type, value  X  . Performance is measured using precision, recall and F-measure (harmonic mean) with respect to the 898 triples in the key. Target relations (slots) are poten-tially list-valued , that is, more than one value can be valid for a relation (possibly at different points in time). Only correct values yield any score, and redundant triples are ignored.
 Experiments. We run two different system settings for the relation extraction step. They differ in the document representation used (detailed in section3), in order to empirically assess whether clustering of discourse referents into single nodes benefits the ex-traction. In S ETTING 1, each document is repre-sented as a document graph, G D , while in S ETTING 2 collapsed document graph representation, G C , is employed.
 Results. Results are shown in Table 3 in the col-umn Relation Extraction . Both settings have a sim-ilar performance with a slight increase in the case of graphs with clustered referents. Although preci-sion is close to 0.5, recall is lower than 0.1. We have studied the limits of the assumptions our approach is based on. First, our standard retrieval component performance limits the overall system X  X . As a matter of example, if we retrieve the first 100 documents per entity, we find relevant documents only for 62% of the triples in the key. This number means that no matter how good relation extraction method is, 38% of relations will not be found.

Second, the distant supervision assumption un-derlying our approach is that for a seed relation in-stance  X  entity, relation, value  X  , any textual men-tion of entity and value expresses the relation . It has been shown that this assumption is more often violated when training knowledge base and docu-ment collection are of different type, e.g. Wikipedia and news-wire (Riedel et al., 2010). We have real-ized that a more determinant factor is the relation itself and the type of arguments it takes. We ran-domly sampled 100 training examples per relation, and manually inspected them to assess if they were indeed mentions of the relation. While for the re-lation cities of residence only 30% of the training examples are expressing the relation, for spouse the number goes up to 59%. For title , up to 90% of the examples are correct. This fact explains, at least par-tially, the zeros we obtain for some relations. 6.2 Evaluation of Temporal Anchoring Under the evaluation metrics proposed by TAC-KBP 2011, if the value of the relation instance is judged as correct, the score for temporal anchoring depends on how well the returned interval matches the one provided in the key. More precisely, let the correct imprecise anchor interval in the gold standard key be S k = ( k 1 , k 2 , k 3 , k 4 ) and the system response be S = ( r 1 , r 2 , r 3 , r 4 ) . The absence of a constraint in t or t 3 is treated as a value of  X  X  X  ; the absence of a constraint in t 2 or t 4 is treated as a value of +  X  . Then, let d i = | k i  X  r i | , for i  X  1 , . . . , 4 , be the difference, a real number measured in years . The score for the system response is:
The score for a target relation Q ( r ) is computed by summing Q ( S ) over all unique instances of the relation whose value is correct. If the gold standard contains N responses, and the system output M re-sponses, then precision is: P = Q ( r ) /M , and recall: R = Q ( r ) /N ; F 1 is the harmonic mean of P and R . Experiments. We evaluated two different set-tings for the temporal anchoring step; both use the collapsed document graph representation, G C (S
ETTING 2). The goal of the experiment is two-fold. First, test the strength of the document creation time as evidence for temporal anchoring. Second, test how hard this metadata-level baseline is to beat using contextual temporal expressions.

The S ETTING 2-I assumes a within temporal link between the document creation time and any relation expressed inside the document, and aggregates this information across the documents that we have iden-tified as supporting the relation. The S ETTING 2-II considers documents content in order to extract tem-poral links from the context of the text that expresses the relation. If no temporal expression is found, the date of the document is used as default. Temporal links from all supporting documents are mapped into intervals and aggregated as detailed in section 5.
The performance on relation extraction is an up-per bound for temporal anchoring, attainable if tem-poral anchoring is perfect. Thus, we also evaluate the temporal anchoring performance as the percent-age the final system achieves with respect to the re-lation extraction upper bound.
 Results. Results are shown in Table 3 under column Temporal Anchoring . They are low, due to the upper bound that error propagation in candidate retrieval and relation extraction imposes upon this step: tem-porally anchoring alone achives 69% of its upper bound. This value corresponds to the baseline S ET -TING 2-I, showing its strength. The difference with S
ETTING 2-II shows that this baseline is difficult to beat by considering temporal evidence inside the document content. There is a reason for this. The temporal link mapping into time intervals does not depend only on the type of link, but also on the se-mantics of the text that expresses the relation as we pointed out above. We have to decide how to trans-form the link between relation and temporal expres-sion into a temporal interval. Learning a model for this is a hard open research problem that has a strong adversary in the baseline proposed. 6.3 Comparative Evaluation Our approach was compared with the other four participants at the KBP Temporal Slot Filling Task 2011. Table 4 shows results sorted by F-measure in comparison to our two settings (described above). These official results correspond to a previous dataset containing 712 triples 4 .

As shown in column Filled our approach returns less triples than other systems, explaining low recall. However, our system achieves the highest precision for the complete task of temporally anchored rela-tion extraction. Despite low recall, our system ob-tains the third best F 1 value. This is a very promis-ing result, since several directions can be explored to consider more candidates and increase recall. Compiling a Knowledge Base of temporally an-chored facts is an open research challenge (Weikum et al., 2011). Despite the vast amount of research fo-cusing on understanding temporal expressions and their relation to events in natural language, the com-plete problem of temporally anchored relation ex-traction remains relatively unexplored. Also, while much research has focused on single-document ex-traction, it seems clear that extracting temporally an-chored relations needs the aggregation of evidences across multiple documents.

There have been attempts to extend an existing knowledge base. Wang et al. (2010) use regular expressions to mine Wikipedia infoboxes and cat-egories and it is not suited for unrestricted text. An earlier attempt (Zhang et al., 2008), is specific for business and difficult to generalize to other relations. Two recent promising works are more related to our research. Wang et al. (2011) uses manually defined patterns to collect candidate facts and explicit dates, and re-rank them using a graph label propagation al-gorithm; their approach is complementary to ours, as our aim is not to harvest temporal facts but to extract the relations in which a query entity takes part; unlike us, they require entity, value, and a ex-plicit date to appear in the same sentence. Talukdar et al. (2012) focus on the partial task of temporally anchoring already known facts, showing the useful-ness of the document creation time as temporal sig-nal, aggregated across documents.

Earlier work has dealt mainly with partial aspects of the problem. The TempEval community focused on the classification of the temporal links between pairs of events, or an event and a temporal expres-sion; using shallow features (Mani et al., 2003; La-pata and Lascarides, 2004; Chambers et al., 2007), or syntactic-based structured features (Bethard and Martin, 2007; Pus  X cas  X u, 2007; Cheng et al., 2007).
Aggregating evidence across different documents to temporally anchor facts has been explored in set-tings different to Information Extraction, such as answering of definition questions (Pas  X ca, 2008) or extracting possible dates of well-known historical events (Schockaert et al., 2010).

Temporal inference or reasoning to solve con-flicting temporal expressions and induce temporal order of events has been used in TempEval (Tatu and Srikanth, 2008; Yoshikawa et al., 2009) and ACE (Gupta and Ji, 2009) tasks, but focused on single-document extraction. Ling et al. (2010), use cross-event joint inference to extract temporal facts, but only inside a single document.
 Evaluation campaigns, such as ACE and TAC-KBP 2011 have had an important role in promoting this research. While ACE required only to identify time expressions and classify their relation to events, KBP requires to infer explicitly the start/end time of relations, which is a realistic approach in the context of building time-aware knowledge bases. KBP rep-resents an important step for the evaluation of tem-poral information extraction systems. In general, the participant systems adapted existing slot filling sys-tems, adding a temporal classification component: distant supervised (Chen et al., 2010; Surdeanu et al., 2010) on manually-defined patterns (Byrne and Dunnion, 2010). This paper introduces the problem of extracting, from unrestricted natural language text, relational knowledge anchored to a temporal span, aggregat-ing temporal evidence from a collection of docu-ments. Although compiling time-aware knowledge bases is an important open challenge (Weikum et al., 2011), it has remained unexplored until very re-cently (Wang et al., 2011; Talukdar et al., 2012).
We have elucidated the two challenges of the task, namely relation extraction and temporal anchoring of the extracted relations.

We have studied how, in a pipeline architecture, the propagation of errors limits the overall system X  X  performance. The performance attainable in the full task is limited by the quality of the output of the three main phases: retrieval of candidate passages/ documents, extraction of relations and temporal an-choring of those.

We have also studied the limits of the distant su-pervision approach to relation extraction, showing empirically that its performance depends not only on the nature of reference knowledge base and doc-ument corpus (Riedel et al., 2010), but also on the relation to be extracted. Given a relation between two arguments, if it is not dominant among textual expressions of those arguments, the distant supervi-sion assumption will be more often violated.
We have introduced a novel graph-based docu-ment level representation, that has allowed us to gen-erate new features for the task of relation extraction, capturing long distance structured contexts. Our re-sults show how, in a document level syntactic repre-sentation, it yields better results to collapse corefer-ent nodes.

We have presented a methodological approach to temporal anchoring composed of: (1) intra-document temporal information representation; (2) selection of relation-dependent relevant temporal in-formation; (3) mapping of temporal links to an inter-val representation; and (4) aggregation of imprecise intervals.

Our proposal has been evaluated within a frame-work that allows for comparability. It has been able to extract temporally anchored relational informa-tion with the highest precision among the partici-pant systems taking part in the competitive evalu-ation TAC-KBP 2011.

For the temporal anchoring sub-problem, we have demonstrated the strength of the document creation time as a temporal signal. It is possible to achieve a performance of 69% of the upper-bound imposed by relation extraction by assuming that any relation mentioned in a document held at the document cre-ation time (there is a within link between the rela-tional fact and the document creation time). This baseline has proved stronger than extracting and an-alyzing the temporal expressions present in the doc-ument content.
 This work has been partially supported by the Span-ish Ministry of Science and Innovation, through the project Holopedia (TIN2010-21128-C02), and the Regional Government of Madrid, through the project MA2VICMR (S2009/TIC1542).
