 Recently, due to ubiquitous data uncertainty in many real-life ap-plications, it has become increasingly important to study ef fi cient and effective processing of various probabilistic queries over un-certain data, which usually retrieve uncertain objects that satisfy query predicates with high probabilities. However, one annoying, yet challenging, problem is that, some probabilistic queries are very sensitive to low-quality objects in uncertain databases, and the returned query answers might miss some important results (due to low data quality). To identify both accurate query answers and those potentially low-quality objects, in this paper, we investigate the causes of query answers/non-answers from a novel angle of causality and responsibility (CR), and propose a new interpretation of probabilistic queries. Particularly, we focus on the problem of CR-based probabilistic nearest neighbor (CR-PNN) query, and de-sign a general framework for answering CR-based queries (includ-ing CR-PNN), which can return both query answers with high con-fi dences and low-quality objects that may potentially affect query results (for data cleaning purposes). To ef fi ciently process CR-PNN queries, we propose effective pruning strategies to quickly fi lter out false alarms, and design ef fi cient algorithms to obtain CR-PNN answers. Extensive experiments have been conducted to verify the ef fi ciency and effectiveness of our proposed approaches. H.2.4 [ Database Management ]: Systems X  Query processing ; H.3.3 [ Information Systems ]: Information Storage and retrieval X  Infor-mation search and retrieval, Search process Algorithms, Design, Experimentation, Performance, Theory causality, responsibility, CR-PNN, uncertain database
Nowadays, the data uncertainty is pervasive in many real ap-plications such as sensor/RFID networks [16, 20], moving object search [10], location-based services (LBS) [31], and so on. For Figure 1: Illustration of probabilistic nearest neighbor (PNN) query example, in sensor networks [16], due to the imperfect sensing devices, sensory data often contain noises inherently, and thus can be modeled by uncertain data; in LBS applications [31], due to the inaccuracy of GPS devices (Global Positioning System), the reported GPS data may deviate from the actual positions, and are therefore imprecise and uncertain. Thus, recently, it has become increasingly important to investigate how to manage such proba-bilistic/uncertain data ef fi ciently and effectively [11, 2, 15, 34, 19].
In the literature of uncertain databases [23, 32, 11], uncertain data are usually modeled by uncertain objects, o i , which reside in their uncertainty regions , UR ( o i ) , following probabilistic distribu-tions represented by samples [23, 32].
 Example 1 (Uncertain Objects in Location-Based Services): Fig-ure 1(a) shows an example of 3 taxis, o 1 , o 2 , and o 3 tain objects), which are located within 3 rectangular uncertainty regions, respectively. Inferred from 2 different data sources such as GPS devices and satellite images, each uncertain object (taxi), o ( 1  X  i  X  3 ), has 2 discrete samples that correspond to its 2 possible appearance positions, denoted as s i 1 and s i 2 existence probabilities 0 . 5 ). Intuitively, it indicates that, taxi may reside at location s 11 with probability 0 . 5 ,orat s probability 0 . 5 . The cases of taxis o 2 and o 3 are similar.
Prior works have extensively studied various probabilistic queries over such uncertain objects, which usually retrieve uncertain ob-jects that satisfy the query predicate with probabilities greater than a probabilistic threshold  X   X  [0 , 1) . Examples of probabilistic queries include probabilistic range query [11, 10], probabilistic nearest neighbor (PNN) query [11, 10, 23], probabilistic reverse nearest neighbor (PRNN) query [25, 8, 5], and so on.

In fact, some probabilistic queries mentioned above (e.g., PNN and PRNN) are very sensitive to noises in uncertain objects. That is, their query answers can be easily in fl uenced or changed by a few low-quality uncertain objects (i.e., objects whose samples are abnormally deviating from actual positions, due to reasons like the malfunction of sensing devices). We show this case with a PNN example below.
 Example 2 (The PNN Query in Uncertain Databases): In Figure 1(a), assume that a visitor is currently at location (query point) q . Ifthisvisitorwantsto fi nd out his/her nearest taxi in the taxi database, he/she can issue a PNN query [11] over uncertain object-s o 1 , o 2 , and o 3 (i.e., uncertain locations of taxis), which obtains nearest neighbors (NNs) of q with probability &gt; X  (say, 0
In the case of Figure 1(a), the PNN probability, Pr PNN ( that object o 1 is the NN of q can be calculated as:
Similarly, for objects o 2 and o 3 , we have Pr PNN ( o 2 Pr
PNN ( o 3 )=0 . 75 . Thus, the PNN answer set should be { (since Pr PNN ( o 3 ) &gt; 0 . 7 ).

However, in some scenario, the quality of some samples is not that good. For example, assume that we collect an abnormal sam-ple s 22 of uncertain object o 2 in Figure 1(b) (rather than the normal position s 22 in Figure 1(a)). As a consequence, the PNN proba-bilities of uncertain objects o 1 , o 2 , and o 3 become 1 respectively, which leads to an empty PNN answer set (since no object has its PNN probability above threshold 0 . 7 ).
In this example, we can see that a correct PNN answer set highly depends on the data quality (position) of sample s 22 . Unfortunately, many real application data (e.g., sensor/RFID or GPS data) indeed contain low-quality samples. For example, for the sake of transmission errors in sensor networks, sensory data may have abnormal readings; similarly, due to clock errors of GPS devices, GPS positions can also be imprecise. As a result, proba-bilistic queries (e.g., PNN) over such low-quality uncertain objects (containing abnormal samples) may either miss some important answers or report wrong query answers.

Inspired by the sensitivity of probabilistic query answers to low-quality objects, in this paper, we will carefully analyze the causes of an uncertain object to be query answers/non-answers in an un-certain database. In particular, we will introduce a novel angle of causality and responsibility (CR) [27] to uncertain databases, and utilize them to interpret probabilistic queries, which, to our best knowledge, have never been explored before over uncertain data.
In particular, the term  X  X ausality X  is used for fi nding the caus-es/reasons that an object is the query answer or non-answer, for example,  X  X hy object o 3 is not PNN query answer in Figure 1(b)? X . Moreover, the term  X  X esponsibility X  measures the degree of an ob-ject that is responsible for causing other objects to be or not to be query answers. For example,  X  X hat is the degree of responsibility that object o 2 causes o 3 not to be the PNN answer in Figure 1(b)? X . Example 3 (Causality and Responsibility for the PNN Query): In Figure 1(b), two samples s 22 and s 11 are the causes (i.e., causal-ity) that make sample s 32 not be an NN of q . Thus, these two samples will take equal responsibilities (i.e., 1 2 ;de fi ned later in Section 3.1) to let sample s 32 be a non-PNN-answer.

In this paper, we propose a generic framework for causality-and-responsibility-based (CR-based) probabilistic query answering, and focus on the PNN query, namely CR-PNN. That is, by fi nding out the CR of uncertain objects for probabilistic queries (e.g., PNN), we will be able to identify not only quality-aware query answers, but also those objects that contain low-quality samples (i.e., respon-sible for in fl uencing or hindering other objects to become query answers), which can be cleaned to improve the data quality [9].
Different from PNN that only retrieves objects with high PNN probabilities [11], CR-PNN also returns query answers (affected by low-quality data) and low-quality objects. As in the previous example of Figure 1(b), PNN [11] returns an empty answer set, whereas our CR-PNN query obtains not only PNN answer o 3 but also the low-quality object o 2 .

From the example, we can see that CR-PNN offers more infor-mation about probabilistic results, however, it is non-trivial to get these results ef fi ciently due to the following two challenges:
In this paper, we addressed the challenges above and made the following contributions. 1. We introduce the causality and responsibility to uncertain 2. We carefully analyze the CRs of uncertain objects, and pro-3. We reduce the CR-PNN problem over possible worlds to the 4. We propose an ef fi cient CR-PNN query answering approach 5. We demonstrate through extensive experiments the ef fi cien-Section 2 provides the background of uncertain databases and CR. Section 6 overviews previous works on probabilistic queries and CR. Finally, Section 7 concludes this paper. Table 1 summarizes the commonly used symbols in this paper. Due to space limitations, in this paper, we omit proofs of lemmas. For interested readers, please refer to our technical report [26]. Uncertain databases: An uncertain database D consists of Nd dimensional uncertain objects o 1 , o 2 , ..., and o N . Each uncertain object o i ( 1  X  i  X  N ) can be modeled by an uncertainty re-gion [11], denoted as UR ( o i ) , in the data space (see an example in Figure 1(a)). Each uncertain object o i resides within following arbitrary probabilistic distribution which is described by either discrete samples [23, 32] or a continuous probability density function (pdf) [11, 10]. In this paper, we will use the sample repre-sentation, and leave the case of continuous pdf as our future work. In particular, each uncertain object o i contains l i mutually exclusive samples s ij (or s i for brevity; 1  X  j  X  l i ), where each sample s ij is associated with an appearance probability s ij .p  X  (0 only appear at the position of one of its samples in the real world.
For the ease of illustrating our idea with causality and responsi-bility, in this paper, we follow previous works [11, 23, 32, 6, 25, 8, 5], and assume that uncertain objects are independent of each other. We would like to leave the interesting case where uncertain objects are correlated as our future work.
 Possible worlds: The uncertain database D is a concise representa-tion of multiple instances of D that can appear in the real world. In the literature of probabilistic databases [15], each possible instance is called a possible world , denoted as pw ( D ) .
 Each possible world pw ( D ) is a materialized instance of database D , with the existence probability Pr { pw ( D ) } ,where Pr { pw ( D ) } =1 . In a possible world, each uncertain object only reside at an exact (certain) location of its sample s we have Pr { pw ( D ) } =  X  appearance probability of sample s ij .

Note that, the number of possible worlds is exponential with respect to the database size. That is, an uncertain database D has ples s ij in each uncertain object o i  X  X  .
In uncertain databases, a probabilistic query, Q , usually retrieves those uncertain objects o that satisfy the query predicate, P the expected probability Pr Q ( o ) greater than a user-speci fi ed thresh-old  X   X  [0 , 1) . Under the possible worlds semantics, a probabilistic query Q is equivalent to conducting a query with predicate P in every possible world pw ( D ) , and then combining/aggregating query answers returned from these possible worlds.

In this paper, to illustrate the basic idea of our CR-based prob-abilistic queries, we will particularly focus on a classical query, probabilistic nearest neighbor (PNN) query.
 Probabilistic nearest neighbor query: A PNN retrieves uncer-tain objects a j satisfying the query predicate, P PNN ,that nearest neighbors (NNs) of a query point q with high probability.
D EFINITION 2.1. ( Probabilistic Nearest Neighbor Query, PNN [11, 10, 23] ) Given a query point q , an uncertain database D , and a probabilistic threshold  X   X  [0 , 1) , a probabilistic nearest neighbor (PNN) query retrieves uncertain objects a j such that is the nearest neighbor of q with the PNN probability, Pr greater than threshold  X  , that is, where dist ( x, y ) is a Euclidean distance function, that is,
In Inequality (1), Pr PNN ( a j ) gives the PNN probability that object a j is the nearest neighbor (NN) of q , which is given by the summation of probabilities that samples s j of a j are NNs. In particular, the probability that sample s j is NN can be obtained by multiplying the probability that s j exists (i.e., s j .p uncertain objects o i have distances to q greater than or equal to dist ( q,s j ) (i.e.,  X  o
Meliou et al. [27, 28] introduced the causality and responsi-bility to relational (certain) databases. In particular, they consid-ered conjunctive queries, corresponding to the join operator among tuples from different relational tables. Thus, the causality (a.k.a. counterfactual cause and actual cause )isde fi ned as a tuple whose existence (or non-existence) may cause a query answer to appear (or disappear), with some degree of responsibility. For example, a tuple t may join with another tuple t , thus, t is a cause of the join result ( t t ) (since the appearance and absence of t will cause the appearance and absence of this joined tuple, respectively).
Different from the join among multiple relational (certain) tables [27, 28], our work considers spatial queries (e.g., PNN) within a single uncertain database. Thus, opposite to the causality in [27, 28], the causality for probabilistic queries in a single database is de fi ned as an uncertain object o whose existence causes another object a to be a non-answer (rather than answer), and whose non-existence lets a become the query answer (instead of non-answer).
In the sequel, we will fi rst de fi ne the causality and responsibility in a single certain database (w.r.t. query predicate P Q ), and then formalize the ones in an uncertain database.
 Causality and responsibility in a single certain database: Causality : In a certain database D ,wesay D Q ( a ) ,when answer to a query Q (satisfying query predicate P Q ) over say D Q ( a ) ,if a is not an answer to Q over D . We give the new de fi nition of causality for query Q in a certain database below. D EFINITION 3.1. ( Causality of Objects in Certain Databases ) Let o  X  D be an object, and a be a possible answer (object) to a query Q . Then, for query Q over D , Figure 2: An example of the NN query in a certain database (or a
From De fi nition 3.1, an object o is a counterfactual cause for a possible query answer a , if the existence of o directly determines that a is not the query answer. Moreover, an object o is an actual cause for a , if the existence of o and a contingency set  X  can collab-oratively cause a to become a non-answer. Note that, different from previous works [27, 28] that considered the causality of certain tuples for operators in relational databases, our problem models the causality for spatial queries (e.g., NN) on spatial objects. Example 4 (Causes of Objects in Certain Databases): Figure 2 illustrates an example of causality for a nearest neighbor (NN) query in a certain database, which contains a query point 3 objects o 1 , o 2 , and o 3 , residing at 3 positions s s 32 , respectively. We say that object o 1 is a counterfactual cause (as given in De fi nition 3.1) for NN answer candidate o 3 because if object o 1 (i.e., s 11 ) exists in the database, then candidate o can never be the NN answer; otherwise, o 3 is the NN answer.
Moreover, in Figure 2, object o 1 is an actual cause for o the contingency set  X = { o 3 } . This is because without object o is the counterfactual cause for o 2 . In other words, the existences of o 1 and/or o 3 collaboratively cause o 2 to be a non-NN-answer. Responsibility : We use responsibility to measure the degree of an object o  X  X  cause for a possible answer a ,de fi ned as follows. D EFINITION 3.2. ( Responsibility of Objects in Certain Databases ) Let object o  X  D be a cause of a possible answer a to a query Then, the responsibility,  X  ( o, a ) ,of o for possible answer where  X  is a contingency set for uncertain object o , and |  X  | is the size of the set  X  .

The rationale behind De fi nition 3.2 is that, if we can obtain a minimum object set, ( { o } X   X ) ,ofsize (1 + |  X  | ) , such that this set is responsible for letting a be a non-answer, then each object in this set ( { o } X   X ) has equal responsibility, 1 |{ large  X  set indicates that many objects take responsibilities, so each object in ( { o } X   X ) will have less (average) responsibility.
In the example of Figure 2, we have  X  ( o 1 ,o 2 )= 1 1+ |{ The expected responsibility in an uncertain database: In un-certain database D , we consider the causality and responsibility under possible worlds . Intuitively, each possible world pw database D can be considered as a certain database. Thus, within pw ( D ) , the causality and responsibility of object o i (or its sample s ) are the same as that in De fi nitions 3.1 and 3.2, respectively.
In the uncertain database, we need to aggregate responsibilities from all possible worlds, and obtain the expected degree of causes, resp ( o i ,a j ) , of an uncertain object o i for a query answer de fi ne the expected responsibility of an uncertain object below.
D EFINITION 3.3. ( The Expected Responsibility in Uncertain Data-bases ) Let s i (or s j ) be a sample of uncertain object appears in a possible world pw ( D ) . Then, the expected responsi-bility, resp ( o i ,a j ) ,of o i for possible query answer
Next, we will interpret probabilistic queries in uncertain databas-es by using the expected responsibility given in De fi nition 3.3. Responsibility matrix: Speci fi cally, we fi rst construct a matrix, resp _ matrix , containing the expected responsibilities for all ob-ject pairs ( o i ,a j ) in uncertain database D .

D EFINITION 3.4. ( Responsibility Matrix, resp _ matrix ( Given an uncertain database D with N uncertain objects, a re-sponsibility matrix, resp _ matrix , for query Q is an N  X  trix, in which each entry resp _ matrix [ i ][ j ]= resp ( o ,a j  X  X  and resp ( o i ,a j ) is given in Eq. (3), and 1  X 
If o i and a j are the same object, we let resp _ matrix [
The responsibility matrix in De fi nition 3.4 encodes the responsi-bility for pairwise objects (e.g., o i and o j ) in the uncertain database. For speci fi c queries (e.g., PNN), one object might only affect a small subset of other objects. Thus, in practice, we do not have to compute all the ( N  X  N ) elements in the matrix. Later in Section 4.2, we will discuss the case of PNN queries, where we only need to compute a much smaller responsibility matrix.
 Summed column value (probabilistic con fi dence): Interestingly, we have an observation about the summed value of each column in the responsibility matrix (given in De fi nition 3.4), as given below: L EMMA 3.1. ( Summed Column Values, Probabilistic Con fi dences ) Given a responsibility matrix resp _ matrix ,wecansumupallthe values on the j -th column, and obtain: It holds that Sum _ C ( a j )=1  X  Pr Q ( a j ) ,where Pr Q probability that uncertain object a j satisfy the query predicate P New interpretation of probabilistic queries : From Lemma 3.1, we can newly interpret probabilistic queries with the responsibility ma-trix. In particular, the j -th column of the matrix stores the de-grees (or responsibilities) that other objects o i let a j answer. Thus, by summing up all values on the j -th column, we can obtain the expected probability that query predicate P not hold for a j ,thatis, (1  X  Pr Q ( a j )) .

Therefore, once we have the responsibility matrix resp ( o we can compute the summed values column by column.
 C OROLLARY 3.1. ( A New Interpretation of Probabilistic Query ) Given a responsibility matrix resp ( o i ,a j ) , the probabilistic query Q is equivalent to returning those uncertain objects a j  X  X  whose corresponding summed column values Sum _ C ( a j ) are smaller than or equal to threshold (1  X   X  ) .
 Summed row value (in fl uence): After fi nding the interesting ob-servation about columns of the responsibility matrix, we next ex-plore the semantics about rows of the matrix. In particular, we sum up all responsibility values on each row of the responsibility matrix, which is de fi ned below.

D EFINITION 3.5. ( Summed Row Values, In fl uences ) Given a responsibility matrix resp _ matrix , we can sum up all the values on the i -th row, and obtain the in fl uence of object o i
Intuitively, the summed row value Sum _ R ( o i ) in Eq. (5) cumu-lates responsibilities of object o i for other objects a j bilities that let a j be non-answers). Thus, we call such a cumulated responsibility, Sum _ R ( o i ) ,thein fl uence of uncertain object Interpretation of In fl uence : Those uncertain objects o Sum _ R ( o i ) values usually indicate that they are more in fl uential to query answers, which, in fact, has two possible reasons. First, these objects o i themselves satisfy the query predicate P nearest neighbor predicate) with high probabilities, which thus in-validates other objects to be query answers. Second, objects contain low-quality samples (e.g., containing noises), which may in turn greatly in fl uence other objects (see the PNN example in Figure 1(b)). In both cases, objects o i mayhavehighin fl uences.
Inspired by the analysis above, in this paper, we aim to obtain both probabilistic query answers with high con fi dence by repairing low-quality data (i.e., deleting low-quality objects), and low-quality objects based on their in fl uences in the responsibility matrix.
Based on our new interpretations of probabilistic queries and in fl uences of uncertain objects, we will study one of classical prob-abilistic queries, PNN, over uncertain databases with low-quality objects. Since we are interpreting PNN by causality and respon-sibility (CR), we call this query type CR-PNN. We fi rst de fi ne the expected responsibilities for PNN under possible worlds, and then present a generic framework for answering CR-based probabilistic queries (including CR-PNN) in uncertain databases.
 The expected responsibility of the PNN query: We consider the PNN query predicate, and rewrite De fi nition 3.3 as follows. D EFINITION 3.6. ( The Expected Responsibility of PNN Queries ) For PNN queries, the expected responsibility, resp PNN ( o o for invalidating a j to be non-PNN-answer is given by: General framework for answering CR-based probabilistic queries: Figure 3 illustrates the pseudo-code of a general framework for
Figure 3: General framework for CR-based probabilistic queries. answering CR-based probabilistic queries in uncertain databases. Speci fi cally, the framework consists of 3 phases, indexing phase, pruning phase, and re fi nement phase. In the indexing phase, an index, I , is constructed over uncertain objects (line 1), which can be used to facilitate the pruning of the search space. Then, for each probabilistic query Q , we traverse the index I and apply pruning methods to retrieve a candidate set S cand which contains candi-dates of query answers, as well as a re fi nement set S rfn contains objects relevant to re fi ning S cand (the pruning phase; lines 2-3). Finally, the re fi nement phase invokes function Re fi nement to obtain a possible query answer set A Q (which contains query answers after repairing/removing some potentially low-quality ob-jects), and a high-in fl uence object set, A N ,ofsize k (which poten-tially contains low-quality objects/query answers; line 4). Here, is a system parameter, indicating the largest number of low-quality objects we want to identify, which is constrained by the maximum budget cost for the system to clean low-quality objects [9]. Re fi nement Phase : Different from previous works on probabilis-tic queries, CR-based probabilistic query returns those uncertain objects that are either query answers or low-quality objects, by considering object in fl uences in the re fi nement phase (lines 5-17).
Initially, we maintain two empty sets, A Q and A N , which are to store possible query answers and high-in fl uence objects, respec-tively (line 5). Then, we compute responsibilities in the matrix resp _ matrix , only for objects in sets S cand and S rfn
Next, our algorithm iteratively identi fi es high-in fl uence objects via the responsibility matrix (lines 12-14), removes them from the database (intuitively, deleting low-quality data; lines 15-17), and computes query answers after removing low-quality objects (lines 8-11). The iteration stops when we have identi fi ed at least in fl uence objects (line 7).

In particular, for each iteration, we fi rst obtain query answers a satisfying Sum _ C ( a j ) &lt; 1  X   X  (according to Corollary 3.1), and add them to the answer set A Q (lines 8-11). Then, we iden-tify k objects o i  X  ( S cand  X  S rfn ) with the largest in fl uences Sum _ R ( o i ) , and add them to high-in fl uence object set cluding those objects in A Q ; lines 12-14). Note that, since those high-in fl uence objects (causes) in A N or possible query answers in A
Q mayhavehighin fl uences on other objects (invalidating them to be non-answers), we will remove them from the database (a repair approach), in order to retrieve more query answers (affected by low-quality objects). That is, we delete objects in ( A N from sets S cand and S rfn (lines 15-16), and update entries with respect to objects o i  X  ( A N  X  A Q ) in the responsibility matrix (i.e., setting them to 0 ; line 17). This way, we can obtain possible query answers, as well as high-in fl uence objects (which may be either query answers or low-quality objects).
 The CR-PNN query: After introducing the framework for CR-based probabilistic query answering in Figure 3, we are now ready to study one concrete probabilistic query, CR-PNN, de fi ned below.
D EFINITION 3.7. ( CR-PNN Queries ) With the CR-based frame-work in Figure 3, a CR-based probabilistic nearest neighbor (CR-PNN) query retrieves PNN answer set, A Q , and high-in fl uence ob-ject set A N , using the responsibility, resp PNN ( o i ,a We can also de fi ne other CR-based probabilistic queries different resp Q ( o i ,a j ) . For details, please refer to Section 4.3. Challenges of CR-PNN query answering: As mentioned in line 6 of procedure Re fi nement , we need to compute responsibility resp ( o i ,a j ) for entries in the responsibility matrix, For CR-PNN, such a responsibility computation (in Eq. (6)) in-volves an exponential number of possible worlds, which is very inef fi cient or even infeasible to enumerate/compute.

To tackle this ef fi ciency bottleneck, in this paper, we will propose ef fi cient query answering approaches that are speci fi cally designed for CR-PNN queries. In particular, we will fi rst derive the expect-ed responsibilities by condensing possible worlds, and reduce our our CR-PNN problem to the one without materializing all possible worlds. Then, in order to reduce the query search space, we will ef fi ciently calculate lower/upper bounds of the responsibility, spe-ci fi c for CR-PNN queries, and design effective pruning methods to rule out false alarms via bounds. Most importantly, we also propose ef fi cient streaming algorithms to compute (bounds of) responsibil-ities by accessing objects for one pass (in each round).
From De fi nition 3.7, in order to retrieve CR-PNN answers, we have to compute the responsibility matrix resp _ matrix , and each of its entries is an expected responsibility, resp PNN ( o lated over an exponential number of possible worlds (via Eq. (6)).
To greatly reduce the responsibility computation cost, we pro-pose a problem reduction approach which converts this problem over possible worlds to the one directly on uncertain objects (or their samples). Speci fi cally, we give the following lemma to enable this problem reduction.
 L EMMA 4.1. ( Reduction of PNN Responsibility Computation ) The expected PNN responsibility, resp PNN ( o i ,a j ) , of uncertain object o i for a possible answer a j is given by: where n ( q,s j ) is the number of uncertain objects that have samples within the sphere, q , centered at q and with radius dist and F ( q,s j ,x ) is the probability that there are exactly ( n ( q,s j )  X  1) objects (excluding object o i ) having samples in The computation of function F ( q,s j ,x ) : In Lemma 4.1, we need to compute the function F ( q,s j ,x ) , which is the probability that uncertain objects in D -{ a j ,o i } appear within sphere that in uncertain database D -{ a j ,o i } ,thereare n objects having samples within sphere q , with probabilities P 1 , P 2 , ..., spectively. Then, the output of function F ( q,s j ,x ) can be obtained by invoking a recursive function G ( n ( q,s j )  X  1 ,x ) ,de fi ned below:
Intuitively, in Eq. (9), we compute G ( n, x ) by considering two cases, where the n -th uncertain object resides or does not reside in q . In the former case, the probability is given by the chance, that the n -th object is in q , times that ( x  X  1) out of ( objects are in q . In the latter case, it is given by the probability, (1  X  P n ) , that the n -th object is outside q times that ( n  X  1) objects are in q .

Therefore, by Eqs. (7), (8), and (9), we can reduce our problem of computing the PNN responsibility, resp PNN ( o i ,a j ) , over all possible worlds to the one only over uncertain objects.
In this subsection, we present pruning strategies to effectively fi lter out CR-PNN false alarms. In particular, for the index/object pruning (in line 3 of procedure CR_Prob_Query_Framework in Figure 3), we can apply previous (spatial) pruning technique [11, 10], which utilizes the boundaries of uncertain objects to rule out false alarms, and obtain a PNN candidate set, S cand . Moreover, we also need to obtain a re fi nement set, S rfn , which contains ob-jects that may affect the probability/in fl uence calculations of PN-N candidates. In particular, let  X  be the smallest maximum dis-tance, maxdist ( q,a ) , from query point q to any candidate S cand . Then, set S rfn contains objects o with minimum distance, mindist ( q,o ) , from q to o smaller than  X  .
 Reducing the computation cost on the CR-PNN responsibility matrix: In De fi nition 3.4, the responsibility matrix is a large matrix, where N is the number of uncertain objects in the uncertain database. We notice that, each object o i  X  S cand would in fl uence all objects a j in ( D -( S cand  X  S rfn )) , however, with the same responsibility values.

Therefore, in the re fi nement phase of Figure 3, when we com-pute and compare the summed row responsibilities for two objects o, o  X  S cand , for those objects a j  X  ( D -( S cand  X  S always holds that resp ( o, a j )= resp ( o ,a j ) . As a result, in lines 12-15 of Figure 3 (which maintain the largest summed row responsibilities in set A N ), these objects a j  X  ( D -( are not useful for comparing the in fl uences of two objects
Moreover, for uncertain objects o i  X  ( D -( S cand  X  S rfn responsibility, resp ( o i ,a j ) (for a j  X  S cand ) is always equal to 0. Therefore, they will not affect the computation of in fl uences (or probabilistic con fi dences) for PNN candidates.

From the observation above, assuming N row = N col = | S cand S rfn | , we can reduce the responsibility matrix from size N row  X  N col ,where N row ,N col N . That is, each entry in the reduced responsibility matrix stores a responsibility resp where o i ,a j  X  ( S cand  X  S rfn ) .
 Pruning with lower/upper bounds of the PNN responsibility: Next, we propose an effective pruning method which uses low-er/upper bounds of responsibilities in the matrix for the pruning.
Note that, the exact computation of responsibility resp ( (given in Eq. (7)) is still costly, since we have to obtain existence probabilities of other objects (i.e., P 1  X  P n ) in sphere pute the recursive function G ( n, x ) in Eq. (9). Thus, instead of the costly exact computation, we aim to ef fi ciently derive lower/upper bounds of responsibility resp ( o i ,a j ) , denoted as lb and ub _ resp ( o i ,a j ) , respectively, and use them to effectively rule out false alarms of possible PNN answers or high-in fl uence objects.
Thus, we have two lemmas below to prune via responsibility bounds, with respect to probabilistic and in fl uence thresholds.
L EMMA 4.2. ( Pruning with Probabilistic Threshold ) Denote the lower bound of the summed column responsibility Sum _ C ( the responsibility matrix as LB _ Sum _ C ( a j ) ,where: Then, any candidate a j satisfying LB _ Sum _ C ( a j )  X  1  X  be safely pruned.

L EMMA 4.3. ( Pruning with In fl uence Threshold ) Denote lower and upper bounds of the summed row responsibility Sum _ R the responsibility matrix resp _ matrix )as LB _ Sum _ R ( UB _ Sum _ R ( o i ) , respectively, where: Let  X  (namely, in fl uence threshold) be the k -th largest lower bound of summed row responsibility for objects we have seen so far. Then, any object o i satisfying UB _ Sum _ R ( o i ) &lt; X  can be safely pruned. Derivation of PNN responsibility bounds: Up to now, we have discussed how to use lower/upper bounds of responsibilities to en-able the pruning (Lemmas 4.2 and 4.3). The only important issue to be addressed is how to obtain such bounds.

Our basic idea is to derive lower/upper bounds for the PNN re-sponsibility, resp PNN ( o i ,a j ) , as given in Eq. (7). For brevity, H ( q,s j ,n ( q,s j )  X  1) . Then, we can rewrite Eq. (7) as: a n ( q,s j )  X  1) .

Therefore, to obtain the bounds of resp PNN ( o i ,a j ) , we only need to compute lower and upper bounds of the last term H n ( q,s j )  X  1) in the lemma below.

L EMMA 4.4. ( Bounds of Function H ( q,s j ,n )) Let H ( q,s H (  X  ) be LB _ H ( q,s j ,n ) and UB _ H ( q,s j ,n ) , respectively. As-sume that the probabilities that n uncertain objects (excluding fall into q (with radius dist ( q,s j ) )are P 1 , P 2 , ..., and P 1  X  P 2  X  ...  X  P n .
 Then, we have:
By Lemma 4.4, we can immediately obtain lower/upper bounds of responsibility resp PNN ( o i ,a j ) : Incremental computation of CR-PNN responsibility bounds: E-qs. (15) and (16) give lower and upper bounds of responsibility resp ( o i ,a j ) , respectively, by considering all samples Next, we will derive responsibility bounds when not all samples of a are accessed, so that we may fi lter out false alarms early (without the need to access the remaining samples).

We denote s j and s j as samples of a j that we have accessed or have not accessed. In order to derive the responsibilities for those unseen samples s j ,we fi rst give an important property for function H ( q,s j ,n ) in the following lemmas.

L EMMA 4.5. ( Property of Function H ( q,s j ,n )) Given two sam-ples s j and s j satisfying dist ( q,s j )  X  dist ( q,s j s ,n )  X  H ( q,s j ,n ) ,where n  X  n .

Lemma 4.5 indicates that, if sample s j has farther distance to query point q than s j , then the expected responsibility of sample s (in object o i )for s j , resp ( s i ,s j ) , will be lower than that for (i.e., resp ( s i ,s j ) ). This is reasonable, since circle s has larger radius dist ( q,s j ) , and more objects (including are expected to fall into q (i.e., collaboratively responsible for invalidating s j ). Thus, object o i would have lower responsibility for invalidating s j .

Assuming that we can access samples in ascending order of their distances to q , Lemma 4.5 can guide us to incrementally derive responsibility bounds for those unseen sample s j ,asgivenbelow. L EMMA 4.6. ( Incremental Computation of Responsibility Bounds ) Assuming s j and s j are samples we have seen and have not seen in object a j , respectively, we have: where s 0 is a sample among s j we have seen so far, such that dist ( q,s 0 )=max  X  s j dist ( q,s j ) .
In this subsection, we illustrate the pseudo-code of CR-PNN query procedure, namely CR-PNN_Processing , in Figure 4. Specif-ically, we construct an R  X  -tree index [3], I , over uncertain objects in D , on which we answer CR-PNN queries.

We maintain two minimum heaps, H and G , to retrieve samples from uncertain database D in ascending order of their distances to query point q . Each entry in the heap is in the form e, key e is a node/object/sample, and key is de fi ned as the minimum dis-tance from q to e (i.e., mindist ( q,e ) ). Heap H is used to traverse the index and retrieve uncertain objects in ascending order of keys; heap G is used to obtain samples of PNN candidates in ascending order of their distances to q .

The index traversal is conducted by initially inserting the R tree root, root ( I ) , into the heap H . Each time we pop out an entry e, key H with the minimum key from the heap H (lines 4-5). If key H is greater than the smallest upper bound distance from objects we have seen so far (i.e., best _ so _ far ), then the remaining entries in heap H cannot be PNN answers, and the index traversal can terminate (line 6).

Moreover, as given in Lemma 4.6, we want to incrementally compute the responsibility bounds by visiting samples in ascending order of distances to q . Thus, when key H is greater than the mini-mum key in heap G (i.e., heap G may contain objects/samples closer } Figure 4: Procedure of CR-PNN query processing. to q ), we will switch to process objects/samples in G by invoking procedure Heap_G_Handler (line 7).

When key H &lt;top ( G ) .key holds, we will check children of en-try e in heap H (since e may contain the closest sample among un-seen samples), by considering 2 cases where e is either a non-leaf or leaf node (lines 8-22). If entry e is a non-leaf node containing chil-dren e i with minimum distances to q smaller than best _ so then we will insert them into heap H for further veri fi cations; oth-erwise ( e is a leaf node), we will add its children objects candidate set S cand . For those pruned children/objects, we will insert them into the re fi nement set S rfn , which will be processed in line 23 to retrieve those objects that may affect responsibilities of candidate set S cand . Finally, procedure Re fi nement is invoked to compute CR-PNN query answers (line 24).
In procedure Re fi nement , for each round, we will compute the lower/upper bounds of responsibilities in the responsibility matrix resp _ matrix , only for objects in ( S cand  X  S rfn ) (line 36; as discussed in Section 4.2). Correspondingly, we can calculate the bounds for the summed column/row values (line 37), and use them to facilitate the pruning with probabilistic and in fl uence threshold (lines 38-44; as given in Lemmas 4.2 and 4.3). Next, for possible query answer set A Q and high-in fl uence objects in A N ,wecom-pute actual responsibilities to obtain their con fi dences/in fl uences, threshold (line 45). Finally, we remove objects in ( A Q  X  sets S cand and S rfn (i.e., repair by deleting high-in fl uence objects; lines 46-48), and start another iteration until  X  k high-in fl uence objects in A N are identi fi ed (line 35).
 Discussions on other CR-based probabilistic queries: In addi-tion to CR-PNN, we can incorporate other probabilistic queries into our general framework in Figure 3, such as CR-based prob-abilistic reverse nearest neighbor query [25, 8, 5] (CR-PRNN), probabilistic skyline query [32] (CR-PSQ), and probabilistic top-m ranking query [18] (CR-PRank). To formalize these CR-based probabilistic queries, we fi rst need to investigate the casuality and responsibility among uncertain objects, and de fi ne the expected responsibility resp Q ( o i ,a j ) between two objects o i the query predicate P Q . For example, similar to Eq. (6), we can de fi ne the expected responsibility, resp Q ( o i ,a j ) , for a query aggregating the responsibilities of sample s i  X  o i that invalidates sample s j  X  a j to be non-answer (violating the query predicate) in all possible worlds.
 Then, we can construct a responsibility matrix, resp _ matrix where each entry resp _ matrix Q [ i ][ j ]= resp Q ( o i column values, Sum _ C ( a j ) , in the matrix imply the con fi dences that a j are not query answers (as proved by Lemma 3.1); the summed row values, Sum _ R ( o i ) , indicate the in fl uences of objects a j . Following the framework in Figure 3, a CR-based probabilistic query returns a possible query answer set, A a high-in fl uence object set A N .

To ef fi ciently answer CR-based probabilistic queries Q , we can also design bounds that are speci fi c for the expected responsibilities resp Q ( o i ,a j ) , and apply the pruning methods to reduce the search space, similar to Lemmas 4.2 and 4.3.
In this section, we test the ef fi ciency of our proposed approach-es for answering CR-based probabilistic queries (particularly, CR-PNN) on both real and synthetic data sets. Speci fi cally, we use 2 real spatial data sets, LB and RR , which contain MBRs (minimum bounding rectangles) of Long Beach county roads and Tiger/Line LA rivers and railways, respectively, that are available at the URL: [ http://www.rtreeportal.org ]. In these 2 real data sets, we treat MBRs as uncertainty regions, in which uncertain objects may re-side. Moreover, we generate synthetic data as follows. Within a d -dimensional data space U =[0 , 100] d , for each dimension fi rst produce the center, C o [ i ]  X  [0 , 100] , of an uncertain object and then randomly generate the half extent e o [ i ]  X  [ e such that o [ i ]  X  [ C o [ i ]  X  e o [ i ] ,C o [ i ]+ e U niform and S kew (with Zipf skewness 0.8) distributions for center l ocation C o [ i ] ,and U niform and G aussian (with mean e Thus, with 4 combinations of distribution types, we can obtain 4 types of data sets, lUeU , lUeG , lSeU ,and lSeG , respectively. Within the uncertainty region of any uncertain object, we generate l random samples following Uniform/Gaussian distribution, each associated with equal existence probability 1 /l ,where l default. We build an R  X  -tree index [3] over uncertainty regions of uncertain objects, on which CR-PNN queries are answered, where the page size is set to 4 K .

To evaluate CR-PNN queries, we also generate 50 query points which follow the same distribution as object distributions in da-ta sets. Note that, previous works on CR [27, 28] or sensitivity analysis [21] did not study PNN queries on probabilistic data. To our best knowledge, this is the fi rst work that considers CR-based probabilistic queries in uncertain databases. While prior works on PNN queries [11, 10, 23] only obtain PNN answers in (clean) uncertain databases with PNN probabilities above threshold CR-PNN query is conducted on low-quality uncertain data, and provide more query answers in A Q , affected by potentially low-quality objects in A N .

We measure the performance of CR-PNN query processing, in terms of CPU time and I/O cost. In particular, the CPU time is the total fi ltering time that we obtain candidates of CR-PNN query answers and high-in fl uence objects; the I/O cost is the number of page accesses during the CR-PNN query answering.

A baseline method to solve the CR-PNN problem is to compute responsibilities of objects by enumerating all possible worlds, and then aggregate them to obtain the expected responsibilities. How-possible worlds (for data size N =30 , 000 by default), which are thus time-infeasible to materialize. According to our exper-iments, for real/synthetic data sets with default parameters, even if we use the reduced formula in Eq. (7) to compute the expected responsibility for pairwise PNN candidates, the resulting time cost is still much worse than our CR-PNN approach, by 2-3 orders of magnitude. To better illustrate the trend of CR-PNN performance, below we will only report the results of our CR-PNN approach.
Table 2 depicts our experimental settings, where numbers in bold font are default values . In the sequel, we will vary and test one parameter while fi xing the default values for others. All our experi-ments were conducted on an Intel Core(TM) i7 2.8GHz PC with 8G memory. The experimental results are the average of 50 queries. CR-PNN performance vs. real/synthetic data sets: We fi rst re-port the performance of our CR-PNN query answering approach in Figure 5 over real/synthetic data sets, where uncertain objects variance e max  X  e min 5 ) distributions in their uncertainty regions, and other parameters are set to default values. In fi gures, for all data set-s, the CPU time for processing CR-PNN over LB , RR , lUeU lUeG data is about 0.001  X  0.29 second, whereas that for lSeU and lSeG is 0.18  X  11.6 seconds. The difference in the CPU time is due to different distributions of (overlapping) uncertain objects, which lead to fewer or more CR-PNN candidates. We will see the same phenomenon in subsequent experiments. Moreover, the I/O costs of all data sets are all low (i.e., 3  X  14.5).
Below, to test the robustness of our CR-PNN approach, we will focus on synthetic data with Uniform object distributions (the per-formance trend of that with Gaussian distributions is similar), by varying query/data parameters such as  X  , [ e min ,e max ] , Effectiveness of CR-PNN: We fi rst evaluate the effectiveness of our CR-PNN approach over uncertain objects in the presence of low-quality samples. In particular, for each data set, we randomly select 50% of 30 K uncertain objects, and for each object thetically inject noises (a deviation of 1 on each dimension) into one of its samples s i . Then, we compare the results of our CR-PNN query on low-quality uncertain data sets with PNN answers [11] on original data sets without noises (i.e., the ground truth). We measure the recall ratio of CR-PNN answers (in ( A Q  X  which is de fi ned as the number of actual PNN answers in ( A N ) divided by the total number of actual PNN answers.
 Figure 6 shows the experimental results for data sets with both Uniform and Gaussian object distributions, where other parameters are by default. In fi gures, the recall ratio of most tested data sets is around 80%  X  97% , which indicates the effectiveness of our CR-PNN method to obtain PNN answers on low-quality uncertain data. CR-PNN performance vs. probabilistic threshold: Figure 7 il-lustrates the CR-PNN query performance of our approach by vary-ing probabilistic threshold  X  from 0 . 1 to 0 . 9 , where other parame-ters are set to default values. In fi gures, we fi nd that the CPU time is not very sensitive to threshold  X  . This is reasonable, since we need to obtain not only PNN answers (though higher threshold can prune more PNN candidates), but also those high-in fl uence objects. Thus, for larger  X  , even if we can obtain fewer PNN candidates, we still have to retrieve k high-in fl uence objects, whose cost is not neglected. Since these k objects may not be obtained in a single round, multiple rounds may be necessary. Nevertheless, the CPU time over all data sets is low (i.e., about 0.05  X  5.71 second), and moreover, the number of I/Os is small (i.e., 4.5  X  14.5). CR-PNN performance vs. object extent: Figure 8 evaluates the effect of the object (half) extent e o  X  [ e min ,e max ] on the CR-PNN performance, where other parameters are set to their default values. Figure 8: CR-PNN performance vs. object extent range [ e min From fi gures, for different object extent ranges, the CPU time is about 0.15  X  14 seconds, and the number of page accesses is around 3  X  17.5. When the extent range, [ e min ,e max ] , becomes wider, the CPU time increases. This is because, wider object extent leads to more overlaps among uncertain objects, and more PNN candidates (or high-in fl uence object candidates) have to be re fi ned. Thus, with wider [ e min ,e max ] , we have to verify a larger responsibility matrix, which incurs higher CPU time. Similarly, wider ranges of extents will cause more overlapping in index nodes, and more I/Os are thus necessary for CR-PNN candidate retrieval.
 CR-PNN performance vs. parameter k : Figure 9 reports the experimental results of CR-PNN performance for different k from 2 to 10, over data sets with default parameters. Since the number of high-in fl uence objects to be returned by the CR-PNN query processing, the CPU time slightly increases for larger k values. Similar to previous results, the CPU time of our CR-PNN approach is low (i.e., 0.05  X  5.71 seconds), and the number of I/Os remains small (i.e., 4  X  14.5) for different k values.
 CR-PNN performance vs. data size: Finally, we test the scala-bility of our CR-PNN approach with different data sizes N the total number of uncertain objects in the database), where other parameters take default values. From the experimental results in Figure 10, we can see that both CPU time and I/O cost smoothly increase when the data size N increases. This is because with more uncertain objects in a data space of fi xed size, the object density becomes higher, and thus more CR-PNN candidates will be retrieved and re fi ned. Nevertheless, for different data sizes, the CPU and I/O costs of our CR-PNN approach remain low (i.e., 0.008  X  7.01 seconds, and 2.5  X  19.5 page accesses), which con fi rms the scalability of our CR-PNN approach against data sizes.
We also test other data sets (e.g., with different parameter values such as dimensionality d or distributions). The trends of experi-mental results are similar, and thus omitted due to space limitations.
Uncertain databases have been extensively studied in the litera-ture. Examples of existing systems include MystiQ [7], Orion [12], TRIO [4], MayBMS [2], MCDB [19], and BayesStore [34]. The data uncertainty can be classi fi ed into 2 categories [33], tuple un-certainty and attribute uncertainty , which usually involve uncertain spatial data and probabilistic relational tables, respectively. This paper focuses on the attribute-level uncertainty, and assumes that uncertain objects are represented by discrete samples.

Many probabilistic queries have been studied in uncertain databas-es, for example, probabilistic range query [11, 10], nearest neigh-bor query [11, 10, 23], reverse nearest neighbor [25, 8, 5], skyline query [32], and so on. These queries usually retrieve uncertain objects that satisfy the query predicate with probabilities greater than a probabilistic threshold. Previous works usually designed speci fi c techniques (e.g., pruning methods, indexing, and query answering algorithms) to improve the query ef fi ciency. However, as mentioned in Section 1, some low-quality objects may easily lead to the loss of important query answers. To our best knowledge, probabilistic queries over low-quality objects from the new angle of CR were never explored before in uncertain databases.
In probabilistic (relational) database, Kanagal et al. [21] studied the sensitivity and explanations for answers to conjunctive, proba-bilistic threshold/top-k , aggregate (e.g., SUM /COUNT/MIN/MAX), and set queries. In particular, they consider changing existence probabilities of input tuples, and evaluating change rates of output answers. In contrast, our work considers a different query (i.e., PNN), identifying both PNN query answers and low-quality ob-jects via responsibilities of objects (without changing probabilities) in uncertain (spatial) databases. Thus, their proposed approaches cannot be directly used to solve our CR-PNN problem.

Causality and responsibility were originally studied in the log-ic and philosophy [24, 17, 13, 30, 1], and recently introduced to relational (certain) databases [27, 28, 29]. Speci fi cally, Meliou et al. [27, 28] introduced the causality and responsibility to relational (certain) databases, which fi nds the reasons (and degrees) for a particular answer or non-answers to relational query operators (e.g., join). In contrast, our work considers spatial objects (i.e., with attribute-level, rather than tuple-level, uncertainty) and uncertain data (instead of certain ones). Most importantly, we consider prob-abilistic queries whose CR de fi nitions are under possible worlds se-mantics and thus different from relational operators. Therefore, our work provides our own de fi nitions of CR-based queries (e.g., CR-PNN) in uncertain databases, which can effectively obtain query answers with high con fi dences in the presence of low-quality ob-jects. Furthermore, previous works on data lineage or provenance [14] are useful for tracking the origin of query answers. For dif-ferent purposes, our problem aims to fi nd query answers and low-quality objects. Since CR-based probabilistic queries differ from existing works, we cannot directly borrow previous techniques.
In this paper, we introduce the causality and responsibility to probabilistic queries in uncertain databases under possible worlds semantics. To deal with sensitivity of query answers to some low-quality objects, we propose novel CR-based probabilistic queries, particularly, the CR-PNN query. We propose effective pruning methods to reduce the search space, and design ef fi cient algorithms to process CR-PNN queries. Through extensive experiments, we con fi rm the ef fi ciency of our proposed approaches.
 This work is supported in part by the Hong Kong RGC Project M-HKUST602/12, National Grand Fundamental Research 973 Pro-gram of China under Grant 2012-CB316200, Microsoft Research Asia Grant, Huawei Noahs ark lab project HWLB06-15C03212/13PN and Google Faculty Award 2013.
