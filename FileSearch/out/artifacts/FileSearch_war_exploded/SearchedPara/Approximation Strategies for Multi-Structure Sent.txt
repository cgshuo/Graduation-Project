 Sentence compression is a text-to-text genera-tion task in which an input sentence must be transformed into a shorter output sentence which accurately reflects the meaning in the input and also remains grammatically well-formed. The compression task has received increasing attention in recent years, in part due to the availability of datasets such as the Ziff-Davis cor-pus (Knight and Marcu, 2000) and the Edinburgh compression corpora (Clarke and Lapata, 2006), from which the following example is drawn. Following an assumption often used in compres-sion systems, the compressed output in this corpus is constructed by dropping tokens from the input
A number of diverse approaches have been proposed for deletion-based sentence compres-sion, including techniques that assemble the out-put text under an n-gram factorization over the input text (McDonald, 2006; Clarke and Lapata, 2008) or an arc factorization over input depen-dency parses (Filippova and Strube, 2008; Galanis and Androutsopoulos, 2010; Filippova and Altun, 2013). Joint methods have also been proposed that invoke integer linear programming (ILP) formu-lations to simultaneously consider multiple struc-tural inference problems X  X oth over n-grams and input dependencies (Martins and Smith, 2009) or n-grams and all possible dependencies (Thadani and McKeown, 2013). However, it is well-established that the utility of ILP for optimal infer-ence in structured problems is often outweighed by the worst-case performance of ILP solvers on large problems without unique integral solu-tions. Furthermore, approximate solutions can often be adequate for real-world generation sys-tems, particularly in the presence of linguistically-motivated constraints such as those described by Clarke and Lapata (2008), or domain-specific pruning strategies such as the use of sentence tem-plates to constrain the output.

In this work, we develop approximate inference strategies to the joint approach of Thadani and McKeown (2013) which trade the optimality guar-antees of exact ILP for faster inference by sep-arately solving the n-gram and dependency sub-problems and using Lagrange multipliers to en-force consistency between their solutions. How-ever, while the former problem can be solved efficiently using the dynamic programming ap-proach of McDonald (2006), there are no efficient algorithms to recover maximum weighted non-projective subtrees in a general directed graph. Maximum spanning tree algorithms, commonly used in non-projective dependency parsing (Mc-Donald et al., 2005), are not easily adaptable to this task since the maximum-weight subtree is not necessarily a part of the maximum spanning tree.
We therefore consider methods to recover ap-proximate solutions for the subproblem of finding the maximum weighted subtree in a graph, com-mon among which is the use of a linear program-ming relaxation. This linear program (LP) ap-pears empirically tight for compression problems and our experiments indicate that simply using the non-integral solutions of this LP in Lagrangian re-laxation can empirically lead to reasonable com-pressions. In addition, we can recover approxi-mate solutions to this problem by using the Chu-Liu Edmonds algorithm for recovering maximum spanning trees (Chu and Liu, 1965; Edmonds, 1967) over the relatively sparse subgraph defined by a solution to the relaxed LP. Our proposed ap-proximation strategies are evaluated using auto-mated metrics in order to address the question: un-der what conditions should a real-world sentence compression system implementation consider ex-act inference with an ILP or approximate infer-ence? The contributions of this work include:  X  An empirically-useful technique for approx- X  Multiple approaches to generate good ap- X  An analysis of the tradeoffs incurred by joint Even though compression is typically formulated as a token deletion task, it is evident that drop-ping tokens independently from an input sentence will likely not result in fluent and meaningful com-pressive text. Tokens in well-formed sentences participate in a number of syntactic and seman-tic relationships with other tokens, so one might expect that accounting for heterogenous structural relationships between tokens will improve the co-herence of the output sentence. Furthermore, much recent work has focused on the challenge of joint sentence extraction and compression, also known as compressive summarization (Martins and Smith, 2009; Berg-Kirkpatrick et al., 2011; Almeida and Martins, 2013; Li et al., 2013; Qian and Liu, 2013), in which questions of efficiency are paramount due to the larger problems in-volved; however, these approaches largely restrict compression to pruning parse trees, thereby im-posing a dependency on parser performance. We focus in this work on a sentence-level compression system to approximate the ILP-based inference of Thadani and McKeown (2013) which does not re-strict compressions to follow input parses but per-mits the generation of novel dependency relations in output compressions.

The rest of this section is organized as fol-lows:  X  2.1 provies an overview of the joint se-quential and syntactic objective for compression from Thadani and McKeown (2013) while  X  2.2 discusses the use of Lagrange multipliers to en-force consistency between the different structures considered. Following this,  X  2.3 discusses a dy-namic program to find maximum weight bigram subsequences from the input sentence, while  X  2.4 covers LP relaxation-based approaches for ap-proximating solutions to the problem of finding a maximum-weight subtree in a graph of potential output dependencies. Finally,  X  2.5 discusses the features and model training approach used in our experimental results which are presented in  X  3. 2.1 Joint objective We begin with some notation. For an input sen-tence S comprised of n tokens including dupli-cates, we denote the set of tokens in S by T , { t i : 1  X  i  X  n } . Let C represent a compres-sion of S and let x i  X  { 0 , 1 } denote an indicator variable whose value corresponds to whether to-ken t i  X  T is present in the compressed sentence C . In addition, we define bigram indicator vari-ables y ij  X  X  0 , 1 } to represent whether a particular order-preserving bigram 2  X  t i ,t j  X  from S is present as a contiguous bigram in C as well as dependency indicator variables z ij  X  { 0 , 1 } corresponding to whether the dependency arc t i  X  t j is present in the dependency parse of C . The score for a given compression C can now be defined to factor over its tokens, n-grams and dependencies as follows. where  X  tok ,  X  bgr and  X  dep are feature-based scoring functions for tokens, bigrams and dependencies respectively. Specifically, each  X  v (  X  )  X  w &gt; v  X  v where  X  v (  X  ) is a feature map for a given vari-able type v  X  { tok, bgr, dep } and w v is the cor-responding vector of learned parameters.

The inference task involves recovering the high-est scoring compression C  X  under a particular set of model parameters w .
 C  X  = arg max where the incidence vector x ,  X  x i  X  t sents an entire token configuration over T , with y and z defined analogously to represent configura-tions of bigrams and dependencies.  X  v ,  X   X  v (  X  )  X  denotes a corresponding vector of scores for each variable type v under the current model parame-ters. In order to recover meaningful compressions by optimizing (2), the inference step must ensure: 1. The configurations x , y and z are consistent 2. The structural configurations y and z are These requirements naturally rule out simple ap-proximate inference formulations such as search-ILP-based inference solution is demonstrated in Thadani and McKeown (2013) that makes use of linear constraints over the boolean variables x i , y ij and z ij to guarantee consistency, as well as aux-iliary real-valued variables and constraints repre-senting the flow of commodities (Magnanti and Wolsey, 1994) in order to establish structure in y and z . In the following section, we propose an al-ternative formulation that exploits the modularity of this joint objective. 2.2 Lagrangian relaxation Dual decomposition (Komodakis et al., 2007) and Lagrangian relaxation in general are often used for solving joint inference problems which are decomposable into individual subproblems linked by equality constraints (Koo et al., 2010; Rush et al., 2010; Rush and Collins, 2011; DeNero and Macherey, 2011; Martins et al., 2011; Das et al., 2012; Almeida and Martins, 2013). This approach permits sub-problems to be solved sepa-rately using problem-specific efficient algorithms, while consistency over the structures produced is enforced through Lagrange multipliers via itera-tive optimization. Exact solutions are guaranteed when the algorithm converges on a consistent pri-mal solution, although this convergence itself is not guaranteed and depends on the tightness of the underlying LP relaxation. The primary advan-tage of this technique is the ability to leverage the underlying structure of the problems in inference rather than relying on a generic ILP formulation while still often producing exact solutions.
The multi-structure inference problem de-scribed in the previous section seems in many ways to be a natural fit to such an approach since output scores factor over different types of struc-ture that comprise the output compression. Even if ILP-based approaches perform reasonably at the scale of single-sentence compression problems, the exponential worst-case complexity of general-purpose ILPs will inevitably pose challenges when scaling up to (a) handle larger inputs, (b) use higher-order structural fragments, or (c) incorpo-rate additional models.
Consider once more the optimization problem characterized by (2) The two structural problems that need to be solved in this formulation are the extraction of a maximum-weight acyclic sub-sequence of bigrams y from the lattice of all order-preserving bigrams from S and the recov-ery of a maximum-weight directed subtree z . Let  X  ( y )  X  { 0 , 1 } n denote the incidence vector of tokens contained in the n-gram sequence y and  X  ( z )  X  { 0 , 1 } n denote the incidence vector of words contained in the dependency tree z . We can now rewrite the objective in (2) while enforcing the constraint that the words contained in the se-quence y are the same as the words contained in the tree z , i.e.,  X  ( y ) =  X  ( z ) , by introducing a vector of Lagrange multipliers  X   X  R n . In addi-tion, the token configuration x can be rewritten in the form of a weighted combination of  X  ( y ) and  X  ( z ) to ensure its consistency with y and z . This results in the following Lagrangian: Finding the y and z that maximize this Lagrangian above yields a dual objective, and the dual prob-lem corresponding to the primal objective speci-fied in (2) is therefore the minimization of this ob-jective over the Lagrange multipliers  X  . min = min = min This can now be solved with the iterative subgra-dient algorithm illustrated in Algorithm 1. In each under  X  ( i ) , then generates  X  ( i +1) to penalize in-tures under (2). Otherwise, if the algorithm starts oscillating between a few primal solutions, the un-derlying LP must have a non-integral solution in which case approximation heuristics can be em-Algorithm 1 Subgradient-based joint inference 3: for iteration i &lt; i max do 4:  X  y  X  arg max y f ( y ,  X  , X ,  X  ) 5:  X  z  X  arg max z g ( z ,  X  , X ,  X  ) 6: if  X  (  X  y ) =  X  (  X  z ) then return  X  (  X  y ) 7: if  X  (  X  y )  X  M then 9: if  X  (  X  z )  X  M then 12: M  X  M  X  X   X  (  X  y ) ,  X  (  X  z ) } ation strategy is contingent upon the existence of algorithms to solve the maximization subproblems for f ( y ,  X  , X ,  X  ) and g ( z ,  X  , X ,  X  ) . The following sections discuss our approach to these problems. 2.3 Bigram subsequences McDonald (2006) provides a Viterbi-like dynamic programming algorithm to recover the highest-scoring sequence of order-preserving bigrams from a lattice, either in unconstrained form or with a specific length constraint. The latter requires a dynamic programming table Q [ i ][ r ] which repre-sents the best score for a compression of length r ending at token i . The table can be populated us-ing the following recurrence:
Q [ i ][ R + 1] = Q [ i ][ R ] + score ( S,i, END ) where R is the required number of output tokens and the scoring function is defined as score ( S,i,j ) ,  X  bgr (  X  t i ,t j  X  ) +  X  j +  X   X   X  tok so as to solve f ( y ,  X  , X ,  X  ) from (4). This ap-proach requires O ( n 2 R ) time in order to identify Figure 1: An example of the difficulty of recover-ing the maximum-weight subtree (B  X  C, B  X  D) from the maximum spanning tree (A  X  C, C  X  B, B  X  D). the highest scoring sequence y and corresponding token configuration  X  ( y ) . 2.4 Dependency subtrees The maximum-weight non-projective subtree problem over general graphs is not as easily solved. Although the maximum spanning tree for a given token configuration can be recovered ef-ficiently, Figure 1 illustrates that the maximum-scoring subtree is not necessarily found within it. The problem of recovering a maximum-weight subtree in a graph has been shown to be NP-hard even with uniform edge weights (Lau et al., 2006).
In order to produce a solution to this subprob-lem, we use an LP relaxation of the relevant portion of the ILP from Thadani and McKeown (2013) by omitting integer constraints over the to-ken and dependency variables in x and z respec-tively. For simplicity, however, we describe the ILP version rather than the relaxed LP in order to motivate the constraints with their intended pur-pose rather than their effect in the relaxed prob-lem. The objective for this LP is given by where the vector of token scores is redefined as in order to solve g ( z ,  X  , X ,  X  ) from (4).
Linear constraints are introduced to produce de-pendency structures that are close to the optimal dependency trees. First, tokens in the solution must only be active if they have a single active in-coming dependency edge. In addition, to avoid producing multiple disconnected subtrees, only one dependency is permitted to attach to the ROOT pseudo-token. Figure 2: An illustration of commodity values for a valid solution of the non-relaxed ILP.
 In order to avoid cycles in the dependency tree, we include additional variables to establish single-commodity flow (Magnanti and Wolsey, 1994) be-tween all pairs of tokens. These  X  ij variables carry non-negative real values which must be consumed by active tokens that they are incident to. These constraints ensure that cyclic structures are not possible in the non-relaxed ILP. In addition, they serve to establish connectivity for the de-pendency structure z since commodity can only originate in one location X  X t the pseudo-token ROOT which has no incoming commodity vari-ables. However, in order to enforce these prop-erties on the output dependency structure, this acyclic, connected commodity structure must con-strain the activation of the z variables. where C max is an arbitrary upper bound on the value of  X  ij variables. Figure 2 illustrates how these commodity flow variables constrain the out-put of the ILP to be a tree. However, the effect of these constraints is diminished when solving an LP relaxation of the above problem.

In the LP relaxation, x i and z ij are redefined as real-valued variables in [0 , 1] , potentially resulting in fractional values for dependency and token indi-cators. As a result, the commodity flow network is able to establish connectivity but cannot enforce a tree structure, for instance, directed acyclic struc-tures are possible and token indicators x i may be partially be assigned to the solution structure. This poses a challenge in implementing  X  ( z ) which is needed to recover a token configuration from the solution of this subproblem.

We propose two alternative solutions to address this issue in the context of the joint inference strat-egy. The first is to simply use the relaxed token configuration identified by the LP in Algorithm 1, i.e., to set  X  (  X z ) =  X  x where  X x and  X z represent the real-valued counterparts of the incidence vectors x and z . The viability of this approximation strategy is due to the following:  X  The relaxed LP is empirically fairly tight,  X  The bigram subproblem is guaranteed to re-We also consider another strategy that attempts to approximate a valid integral solution to the depen-dency subproblem. In order to do this, we first include an additional constraint in the relaxed LP which restrict the number of tokens in the output to a specific number of tokens R that is given by an input compression rate.
 The addition of this constraint to the relaxed LP reduces the rate of integral solutions drastically X  from 89% to approximately 33% X  X ut it serves to ensure that the resulting token configuration  X x has at least as many non-zero elements as R , i.e., there are at least as many tokens activated in the LP so-lution as are required in a valid solution.
We then construct a subgraph G (  X z ) consisting of all dependency edges that were assigned non-zero values in the solution, assigning to each edge a score equal to the score of that edge in the LP as well as the score of its dependent word, i.e., each z ij in G (  X z ) is assigned a score of  X  dep (  X  t i ,t j  X  j + (1  X   X  )  X   X  tok ( t j ) . Since the commodity flow constraints in (9) X (11) ensure a connected  X z , it is therefore possible to recover a maximum-weight spanning tree from G (  X z ) using the Chu-Liu Ed-monds algorithm (Chu and Liu, 1965; Edmonds, is cubic in the size of the input graph, it is fairly speedy when applied on relatively sparse graphs such as the solutions to the LP described above. The resulting spanning tree is a useful integral approximation of  X z but, as mentioned previously, may contain more nodes than R due to fractional values in  X x ; we therefore repeatedly prune leaves with the lowest incoming edge weight in the cur-rent tree until exactly R nodes remain. The result-ing tree is assumed to be a reasonable approxima-tion of the optimal integral solution to this LP.
The Chu-Liu Edmonds algorithm is also em-ployed for another purpose: when the underly-ing LP for the joint inference problem is not tight X  X  frequent occurrence in our compression experiments X  X lgorithm 1 will not converge on a single primal solution and will instead oscillate between solutions that are close to the dual opti-mum. We identify this phenomenon by counting repeated solutions and, if they exceed some thresh-old l max with at least one repeated solution from either subproblem, we terminate the update proce-dure for Lagrange multipliers and instead attempt to identify a good solution from the repeating ones by scoring them under (2). It is straightforward to recover and score a bigram configuration y from a token configuration  X  ( z ) . However, scoring so-lutions produced by the dynamic program from  X  2.3 also requires the score over a corresponding parse tree; this can be recovered by constructing a dependency subgraph containing across only the tokens that are active in  X  ( y ) and retrieving the maximum spanning tree for that subgraph using the Chu-Liu Edmonds algorithm. 2.5 Learning and Features The features used in this work are largely based on the features from Thadani and McKeown (2013).  X   X  tok contains features for part-of-speech  X   X  bgr contains features for POS patterns in a  X   X  dep contains features for the probability of For the experiments in the following section, we trained models using a variant of the structured perceptron (Collins, 2002) which incorporates minibatches (Zhao and Huang, 2013) for easy par-was avoided by averaging parameters and mon-itoring performance against a held-out develop-ment set during training. All models were trained using variants of the ILP-based inference approach of Thadani and McKeown (2013). We followed Martins et al. (2009) in using LP-relaxed inference during learning, assuming algorithmic separabil-ity (Kulesza and Pereira, 2007) for these problems. We ran compression experiments over the newswire (NW) and broadcast news transcription (BN) corpora compiled by Clarke and Lapata (2008) which contain gold compressions pro-duced by human annotators using only word deletion. The datasets were filtered to eliminate instances with less than 2 and more than 110 tokens for parser compatibility and divided into training/development/test sections following the splits from Clarke and Lapata (2008), yielding 953/63/603 instances for the NW corpus and 880/78/404 for the BN corpus. Gold dependency parses were approximated by running the Stanford
Following evaluations in machine translation as well as previous work in sentence compres-sion (Unno et al., 2006; Clarke and Lapata, 2008; Martins and Smith, 2009; Napoles et al., 2011b; Thadani and McKeown, 2013), we evaluate sys-tem performance using F 1 metrics over n-grams and dependency edges produced by parsing sys-tem output with RASP (Briscoe et al., 2006) and the Stanford parser. All ILPs and LPs were solved grade solver. Following a recent analysis of com-pression evaluations (Napoles et al., 2011b) which revealed a strong correlation between system com-pression rate and human judgments of compres-sion quality, we constrained all systems to produce compressed output at a specific rate X  X etermined by the the gold compressions available for each instance X  X o ensure that the reported differences between the systems under study are meaningful. 3.1 Systems We report results over the following systems grouped into three categories of models: tokens + n-grams, tokens + dependencies, and joint models.  X  3-LM: A reimplementation of the unsuper- X  DP: The bigram-based dynamic program of  X  LP  X  MST: An approximate inference ap- X  ILP-Dep: A version of the joint ILP of  X  DP+LP  X  MST: An approximate joint infer- X  DP+LP: Another Lagrangian relaxation ap- X  ILP-Joint: The full ILP from Thadani and The learning rate schedule for the Lagrangian re-laxation approaches was set as  X  i ,  X / (  X  + i ) , 10 while the hyperparameter  X  was tuned using the % Syntactic relations F 1 % Inference compression rate of 77 . 26% .
 % Syntactic relations F 1 % Inference 3.2 Results Tables 1 and 2 summarize the results from our compression experiments on the BN and NW cor-pora respectively. Starting with the n-gram ap-proaches, the performance of 3-LM leads us to observe that the gains of supervised learning far outweigh the utility of higher-order n-gram factor-ization, which is also responsible for a significant increase in wall-clock time. In contrast, DP is an order of magnitude faster than all other approaches studied here although it is not competitive under parse-based measures such as RASP F 1 % which is known to correlate with human judgments of grammaticality (Clarke and Lapata, 2006).

We were surprised by the strong performance of the dependency-based inference techniques, which yielded results that approached the joint model in both n-gram and parse-based measures. The exact ILP-Dep approach halves the run-time of ILP-Joint to produce compressions that have similar (although statistically distinguish-able) scores. Approximating dependency-based inference with LP  X  MST yields similar perfor-mance for a further halving of runtime; however, the performance of this approach is notably worse.
Turning to the joint approaches, the strong performance of ILP-Joint is expected; less so is the relatively high but yet practically reason-able runtime that it requires. We note, how-ever, that these ILPs are solved using a highly-optimized commercial-grade solver that can uti-approaches are implemented as single-processed Python code without significant effort toward op-timization. Comparing the two approximation strategies shows a clear performance advantage for DP+LP over DP+LP  X  MST : the latter ap-proach entails slower inference due to the over-head of running the Chu-Liu Edmonds algorithm at every dual update, and furthermore, the error in-troduced by approximating an integral solution re-sults in a significant decrease in dependency recall. In contrast, DP+LP directly optimizes the dual problem by using the relaxed dependency solution to update Lagrange multipliers and achieves the best performance on parse-based F 1 outside of the slower ILP approaches. Convergence rates also vary for these two techniques: DP+LP has a lower rate of empirical convergence (15% on BN and 4% on NW) when compared to DP+LP  X  MST (19% on BN and 6% on NW).

Figure 3 shows the effect of input sentence length on inference time and performance for ILP-Joint and DP+LP over the NW test corpus. 13 The timing results reveal that the approximation strat-egy is consistently faster than the ILP solver. The variation in RASP F 1 % with input size indicates the viability of a hybrid approach which could bal-ance accuracy and speed by using ILP-Joint for smaller problems and DP+LP for larger ones. Sentence compression is one of the better-studied text-to-text generation problems and has been ob-served to play a significant role in human summa-rization (Jing, 2000; Jing and McKeown, 2000). Most approaches to sentence compression are su-pervised (Knight and Marcu, 2002; Riezler et al., 2003; Turner and Charniak, 2005; McDon-ald, 2006; Unno et al., 2006; Galley and McK-eown, 2007; Nomoto, 2007; Cohn and Lapata, 2009; Galanis and Androutsopoulos, 2010; Gan-itkevitch et al., 2011; Napoles et al., 2011a; Fil-ippova and Altun, 2013) following the release of datasets such as the Ziff-Davis corpus (Knight and Marcu, 2000) and the Edinburgh compression cor-pora (Clarke and Lapata, 2006; Clarke and Lap-ata, 2008), although unsupervised approaches X  largely based on ILPs X  X ave also received con-sideration (Clarke and Lapata, 2007; Clarke and Lapata, 2008; Filippova and Strube, 2008). Com-pression has also been used as a tool for document summarization (Daum  X  e and Marcu, 2002; Zajic et al., 2007; Clarke and Lapata, 2007; Martins and Smith, 2009; Berg-Kirkpatrick et al., 2011; Woodsend and Lapata, 2012; Almeida and Mar-tins, 2013; Molina et al., 2013; Li et al., 2013; Qian and Liu, 2013), with recent work formulating the summarization task as joint sentence extrac-tion and compression and often employing ILP or Lagrangian relaxation. Monolingual compression Figure 3: Effect of input size on (a) inference time, and (b) the corresponding difference in RASP F % ( ILP-Joint  X  DP+LP ) on the NW corpus. also faces many obstacles common to decoding in machine translation, and a number of approaches which have been proposed to combine phrasal and syntactic models (Huang and Chiang, 2007; Rush and Collins, 2011) inter alia offer directions for future research into compression problems. We have presented approximate inference strate-gies to jointly compress sentences under bigram and dependency-factored objectives by exploiting the modularity of the task and considering the two subproblems in isolation. Experiments show that one of these approximation strategies produces re-sults comparable to a state-of-the-art integer linear program for the same joint inference task with a 60% reduction in average inference time.
 The author is grateful to Alexander Rush for help-ful discussions and to the anonymous reviewers for their comments. This work was supported by the Intelligence Advanced Research Projects Activity (IARPA) via Department of Interior Na-tional Business Center (DoI/NBC) contract num-ber D11PC20153. The U.S. Government is autho-rized to reproduce and distribute reprints for Gov-ernmental purposes notwithstanding any copy-
