 1. Introduction pages containing the keyword(s). The users can read through these web pages and advanced search using a set of keywords [1  X  3] ; e.g.  X  Peacock Leverling summary of information about a particular DS.
 composed of an Employee tuple (with FirstName=  X  Janet  X  and LastName= traverses the data-graph as follows: it starts from a tuple containing the keyword(s) (denoted as t neighboring tuples as long as the data traversed is relevant to t  X  1.1. Challenges
The proposed search paradigm faces several challenges. The primary challenge is the classi relevant or irrelevant to t DS . For this reason, the semantic of Af is investigated and quanti fi ed so as to select which relations to traverse. These Af the context of an OS and therefore liberate the user from the schema details.
Attribute Af fi nity score. Hence, the semantic of Attribute Af clustering, a technique that combines linguistic and attributes' data types matching is employed. comprising tuple's local Importance score (denoted as Im ( OS , t function of (1) tuple's global Importance score (denoted as Im ( t 1.2. Novel contributions
The novel contributions of this paper are the following:  X  any query language.  X 
The formal de fi nition of Relations Af fi nity to R DS and the proposition of the Af
The impact of the latter metric (3) although is very signi
Af fi nity formula.  X 
The formal de fi nition and calculation of Attribute Af fi to R DS and therefore the generation of more meaningful OSs. Furthermore, such an attributes' together with space savings are presented.  X   X 
Importance and the size of the OS in order to estimate the Importance of each OS. 1.3. Paper organization
Af fi nity semantics in relational databases and present the respective Af and fi nally Section 10 concludes the paper. 2. Related work 2.1. Keyword search unique keyword. For instance for the keyword query  X  Leverling Peacock elaborating and potentially interesting data such as its OrderDetails and that both leaf nodes c
Note also that for the same reason, if a keyword query consists of only one keyword, e.g. data-graph. Other work in R-KwS also investigates ef fi ciency, effectiveness and ranking [13 as illustrated by Figs. 4 and 5 , the proposed paradigm produces an OS for each t meaningful MTJNTs. Technically, the proposed paradigm considers G
Af
Earlier work in keyword search includes proximity searches [25] . Proximity searches are speci query  X  speci fi es a Find set of objects that are potentially of interest and a objects in the Find set according to their distance to the Near objects . For instance, the query will return Orders ranked based on their proximity to keywords Peacock and Leverling. Namely, o (i.e. distance) of objects and the impact of  X  hub  X  relations. As we explain in Af considering neighboring relations and their attributes [27 database that includes the tuples containing  X  Peacock  X  (e.g. e  X 
Peacock has an order ... X  ,  X  Order 10273 has orderdetails spirit, some tuples are replicated in OSs when necessary. For instance, the Employee e appears in both OSs and tuple r 1 is replicated twice in the e weight per attribute (86 attributes). Evidently, this is a demanding and dif for ordinary users. 2.1.1. Ranking in R-KwS following important (among other) metrics: (3) Tuples' Importance , i.e. the consideration of the authority 2.2. Schema summarization
Importance in order to cluster and summarize schemata respectively; where Af
More precisely, Af fi nity measures the closeness between entities; e.g. Employee e
Product p 2 ( Fig. 5 (a)). Whereas, Importance ranks entities according to their signi (centrality) in fl uenced mainly by PageRank [30] ; e.g. Product p data distribution, e.g. on semantics embedded in relationships; examples of such work are [34,35] .
More recent work on schema summarization [36,37] investigates the Af to R
DS , denoted as Af  X  H R where fd i is the distance of R i to R DS , j ranges over all relations along the path from R
Af fi object(thus are tuple-oriented i.e. t DS -rooted) and therefore,Af disregard properties speci fi c to relational databases suchas on Af fi nity is discussed in Section 5 ). Nevertheless, Af 2.3. Attribute fi ltering none of this previous work is suitable for the automated fi techniques has been used for attribute clustering in this work. 3. The proposed searching paradigm: an overview with examples and 19 ).
 (projections of) tuples, with the t DS tuple as the root node and t keys) the child nodes. An OS is generated for each tuple (t attribute's value. Therefore, for the above query examples an OS will be generated for tuples (1) {e Full-Text facilities are employed to fi nd all such tuples ( Section 4.1 ). relations linked around R DS s contain additional information about the particular DS. For each R (G The challenge now is the selection of the relations and attributes from G traversed in order to create a good OS. For this reason, Af quanti fi ed and annotated on the G DS . Provided an Af fi
Furthermore, provided both Af fi nity and Attribute Af fi the G DS (  X  ,  X   X  ) we can now proceed with the generation of OSs.
For instance, for the keyword query  X  Janet Peacock  X  ,  X  presented in Fig. 1 . Since the keywords are found in tuple e relation is considered as the R DS and consequently the Employees G generate the rest of the report. Note also that some attributes are except from ProductName. 4. System architecture
Firstly, the user enters the identifying keywords for a DS together with an Af annotation (with Cardinality and Relative Cardinality information) of necessary schema graphs (G the Af fi nity and Attribute Af fi nity Calculation modules will calculate the Relation Af these scores are annotated on the G DS ( Sections 5 and 6 respectively). Steps 2 module ranks and prints in an intelligible form the ranked set of OSs ( Section 4.4 and Section 8 ). 4.1. Master Index clusters are described in Section 6 ) that potentially will give meaningless OSs. 4.2. G DS Generator This module takes as input the DB id-kw tuple set and automatically generates (1) a G
DB generation of G DS graphs can be pre-computed for all potentially interesting R
De fi nition 1 (Data Subject Schema Graph (G DS )). AG DS (V, V consists of:  X  property that represents R DS . Each node is labeled with Cardinality, Af  X  a set of nodes V  X  ={R n + 1 , ... ,R n + m } where each R relationship. Again, each node is labeled with Cardinality, Af  X  a set of edges E={(R i  X  R j )|R i ,R j  X  V  X  V  X  , each R
Each edge R i  X  R j is labeled with a name, Relative Cardinality and Reverse Relative Cardinality.
All G DS s have a common maximum depth T; i.e. the longest distance fd exceptionally with maximum fd i =4 (since relations with fd values of T can also easily be considered; although intuitively we observe that T constructing G DS , actually does two tasks: (1)  X  Treealizes relations as child nodes and replicating looped relations and relationships and (2) annotates the G Cardinality, Relative Cardinality, etc.

Treealization is very useful for later operations on G DS Treealized, i.e. replicated accordingly and then included in the G
Such relations are retrieved as a closed path (namely fi rst node is retrieved up to twice (as Preliminary precision and recall measures revealed that this approach gives better results. constrains. Fig. 7 shows the G DS for Customers and Employees R examples of G DS s for the TPC-H database ( Fig. 20 ). 4.3. OS generation This module takes as input (1) the tuple set DB id-kw and (2) the corresponding G each tuple in DB id-kw . For the generation of an OS, a breadth-
R  X  R i (i.e. 1:M) relationships and  X  R relation and t j is a tuple that belongs to the parent relation R
OS tree as child nodes of t j . 4.4. OS ranking and presentation
This module takes as input the (1) set of OSs, (2) relations' Af
During presentation, we can merge tuples that are associated with a 1:1 relationship ( Fig. 1 ). 5. Af fi nity calculation In this section, we investigate the semantic of Af fi nity Af databases, de fi ne metrics that will assist to calculate Af has also been investigated and applied in schema clustering and summarization [34 between relations has a more general meaning and its semantics are slightly different from Af to our knowledge the de fi nition, investigation and quanti before. 5.1. The Af fi nity formula For the quanti fi cation of Af fi nity the following metrics are considered. 5.1.1. Relations' distance
The primary metric for closeness between an R i to the R DS number of relationships) of the path from the R i to the R relations is. For instance, considering the Customers R DS closer than EmployeeTerritories to the Customer R DS .
 (PKs) of the participating relations) then we disregard the additional relationship. Let ld see that Orders and CustomerDemographic, although they have different fd relation.). 5.1.2. Connectivity
A secondary metric of closeness between R i to R DS is R i
Connectivity (Co i ) and the data-graph, denoted as Relative Cardinality (RC amount of relationships R i participates in. For instance, the relation CustomerDemographic has Co one relationship (i.e. with relation Customers) and Orders has Co than Orders since they have common logical distance (i.e. ld CustomerDemographic to Customers.

Let RC i  X  j represent the Relative Cardinality of R i and R parent relation on the G DS ; therefore let RC i be the RC relationships and RC i  X  j =1 for M:1 relationships. Alternatively, RC closer than Orders to Employees. Another example is RC Nation  X  Customer closeness.
 It should also be noted that RC is not commutative. For instance, whilst RC
Reverse Relative Cardinality, denoted as RC i  X  j , be the reverse of RC where R j is the parent relation on G DS . Apparently, 1:1 relationships have RC closeness. For instance, if we hypothetically assume that RC different Nation) and therefore their relationship is 1:1, we can easily infer that their Af 5.1.3. Penalization of lateral data (from hub relations)
Analyzing further relational database schemata, we realize that paths containing  X  hubs  X  have the following structure: R relations, e.g. R 2 , in large databases is huge having a signi
Cardinality. 5.1.4. Af fi nity Descriptor of R i (DAf(R i ))
Let the Af fi nity Descriptor of R i to R DS be a list of weighted metrics; namely, DAf(R where  X  w j =1. In this context, we de fi ne metrics m 1 ... (10  X  RC i )), m 4 =f 1 (Co i ). In the case of hub  X  child relations we penalize them as follows: m where h=1.6 is a penalizing constant, and where f 1  X   X  X  =
These metrics measure the distance (m 1 ), the Relative Cardinality (m value does not skew excessively. For the same reason, since RC
RC i and RC i . Note that the former approach produces absolute m
De fi nition 2 (Af fi nity) . The Semantic of Af fi nity of R database conforming to the schema, can be calculated with the following formula: where j ranges over all metrics in DAf(R i ), Af R DS  X  R DS The above Af fi nity formula produces a score in the range [0, 1] and the R note that the proposed formula (2) may also produce an Af score of 1; i.e. ld i =1,RC i =1, RC i =1 and Co i =1. In other words, a relation R
Co =1) and this unique relationship is 1:1 with the R DS (therefore ld R
DS without violating normalization rules; which means that R database design it was created as a separate relation. 5.2. Discussion
Experimental analysis of Af fi nity formula has revealed that usually any R lateral data from hub relations are excluded. In fact, the proposed Af threshold  X  =0.7 in combination with the following metric weights: w metrics' weights, they should note that metrics m 1 (distance) and m estimation and thus give analogously more weights to w 1 and w relations for Employees, Customer, Order and Shipper R DS siveness (and therefore abstraction) of an OS may vary. For instance for the Employees G
Af fi nity Ranking r Ri Af (or simply r Ri ) of each R i and hence the overall Af investigated and compared with users' perceived Af fi nity rankings ( Section 9.1.2 ). 6. Attribute Af fi nity calculation In this section, we investigate the semantic of Af fi nity AAf attributes denoted as A j ) of the relation R i to R DS and then propose an Attribute Af
Af fi nity is useful in order to fi lter out attributes that are not really relevant to R explained in the Related work section, existing work in attribute
In order to achieve a good quanti fi cation of Attribute Af attributes in relational databases not only in general but also in the context of G two sets of attributes: (1) the set of physical attributes denoted as A the OS. On the other hand, information described by attributes in A known.
 The challenge now is how to assign an Af fi nity score to the attributes of A proposed. A L is further clustered into disjoint sets of attributes A score ( AAf A approaches. 6.1. Attribute Af fi nity formula
In this context, the following metrics are considered for the calculation of Attribute Af 6.1.1. Relations' Af fi nity The primary metric of Attributes R i .A j Af fi nity to R Af decreases the less attributes of R i are really relevant to the R interested in more attributes included in Orders relation than in Products relation since Af
Products will be adequate. 6.1.2. Attribute cluster's Af fi nity ranking (d Aj )
A secondary metric is that A L clusters can intuitively be ranked by their Af
General Clustering Approach, clusters have the following intuitive Af prune out some attributes from a relation (e.g. Employees; Fig. 9 (b)), we would certainly prune out This order represents in some way the ranking of abstractness of attributes.
Therefore an attribute cluster's Af fi nity Ranking ( d Aj For this reason, the corresponding d(A j ) function is introduced. As shown in Fig. 9 (a), d and A G are empty. In other words, if a relation does not include an A does not include neither A N nor A G clusters then d AC is set to 1 instead of 3.
De fi nition 3 (Attribute Af fi nity) . The semantic of Af fi simply AAf A where the function f 2 is de fi ned as f 2 (  X  )=1  X  w  X  (
Cluster's Af fi nity Ranking de fi ned by the function d(A The function f 2 (similarly to f 1 ) aims to scale accordingly d de fi nition of a threshold value  X   X  ; for instance for  X   X  Note that according to the above formula only the R DS (with Af clusters fi ltered in the OS for  X   X  =0.7, whilst for the rest R for  X   X  =0.7. Fig. 10 illustrates the Attribute Af fi nity results for the Northwind Employees R those used in Fig. 8 . 6.2. Attribute clustering (the General Clustering Approach)
According to the proposed clustering approach, each cluster A cluster attributes based on these clustering rules.
 WordNet Dictionary [43] . Finally A G is created by deducting A problems have already been well addressed by schema and ontology matching techniques [39 this paper to examine them in further detail. 6.3. Discussion fl attribute of a publication (e.g. a paper [44,45] ) is usually called a idiom for a naming attribute will be missed out and clustered as A person whilst Shippers and Customers describe Companies, etc.) in combination with prede these facilities. These are plans for future work.
 7. Estimation of thresholds
The selection of appropriate thresholds according to the user needs may be a dif facilitates users to select more quickly the suitable Af fi in G
DS (  X  ). Let OS(  X  ) be the OS generated with G DS (  X  ), |OS( |R(OS) i | be the amount of tuples from the relation R i in the OS( de fi ned in Section 5 ). Then, the estimated |OS(  X  )| can be calculated with |OS( and R j is the parent relation of R i . Fig. 11 (a) gives us an indication of estimated |OS(
Their |R(OS) i |s are 0.9 (=1  X  0.9), 1 (=1  X  1) and 5.4 (=1 numbers of |OS(  X  )| as to avoid any confusions of users.
 Similarly, we can estimate an Attribute Af fi nity threshold. Namely, for a given G with G DS (  X  ,  X   X  ), |OS(  X  ,  X   X  )| be the total amount of attribute clusters of the OS( in the relation R i (i.e. with AAf Aij N  X   X  ). Then, the estimated |OS( where |R(OS) i | is calculated as above. Fig. 11 (b) gives an indication of estimated |OS(0.70, 8. Ranking of OSs
The result of a query may comprise a set of OSs, e.g. the result of the query one. Thus their corresponding OSs should be ranked accordingly.
Importance of an OS should combine: Therefore, the following combining formula can be used for estimating the Importance of an OS: where the local Importance of each tuple t i in an OS (namely Im ( OS , t t to the t DS ; namely the Af fi nity of the corresponding relation it belongs to, to R 9. Experimental evaluation comparative results with other existing work. 9.1. OS quality (evaluation methodology)
In this section, we investigate the quality of OS and G DS and f-score represents their weighted harmonic mean. 9.1.1. Quality of relations fi ltering (P/R/F results) For this evaluation task, the participants were given twelve G and were asked to de fi ne manually their own G DS s, denoted as G comparative criteria, we requested from the participants comprehensive but at the same good G thresholds were investigated: W 1 = b b b b b b b b b b b b b b b 0.05, 0.05 N ,W 5 = b 0.4, 0.5, 0.05, 0.05 N and W 6 = b 0.25, 0.25, 0.25, 0.25 and  X  1 as the initial setting.

Fig. 12 (a) summarizes the quality of the G DS (  X  ) produced with initial setting: precisely, it depicts the average of P/R/F results of G DS (W ) gives the best average of f-score results, i.e. 89.44% whist W was designed based on the initial weight scheme. Evidently, there is not a signi G Fig. 13 (a) summarizes the quality of OSs produced by a G results of OSs produced by each G DS (  X  ) for 10 randomly selected t corresponding G DS (h). The average size in tuples of the randomly selected OSs per G summary, f-scores range from 96% (i.e. for Northwind Shippers G Cardinality involved. In summary, these are very good P/R/F results.
W and W 6 ) result to very poor scores (e.g. for Nation and Region G databases per weight scheme. It veri fi es again that the impact is signi
Cardinality involved. In conclusion, W 1 ,W 2 ,W 3 , and W 83.8%. These weight schemes also reveal that m 1 and m 2 have the most signi belong to the range [0.4, 0.6] can yield to very good results.
Comparing results from Figs. 12 and 13 , we observe that W returns f-score=82.20% (i.e. an insigni fi cant difference from the best f-score=83.8% produced by W particular dataset. 9.1.2. Relation's Af fi nity Ranking Correctness (ARC) calculation and more precisely the ranking of relations based on their Af believes that the OSs produced are very over-detailed then he/she can increase very abstract and additional information about the DS is retrievable then volunteers for each G DS to rank relations based on their Af
The results in Fig. 14 denoted with Af depict the average of Af precisely, we calculate the correlation between the proposed Af G when the two rankings are identical. 9.1.3. Quality of attribute fi ltering (P/R/F results) The following P/R/F results compare attribute fi ltering proposed by G levels. For comparative reasons both G DS (  X  ,  X   X  )andG generatedwithacommonAf fi nitythreshold  X  =0.70andweightingsettings(namelyW weight w were set to 0.70 and 1.5 respectively; attribute clusters included in each relation of G
Fig. 15 (a) depicts the average of P/R/F results of G DS ( attribute clusters of each relation in G DS (  X  ,  X   X  ) and G G G summary, these are very good P/R/F results. 9.2. Performance evaluation contents and the space savings achieved by employing attribute construction. Evidently for the two benchmarks, the space savings after generation of a G DS graph and the calculation of the Af fi input, i.e. the schema graph, is small and also memory based.
 revealed that both (1) OS size and (2) database size affect signi of the remaining 18 measurements. In all experiments cold cache memory was used. 9.3. Comparative results
Nevertheless we discuss and compare where possible our results with existing related work. 9.3.1. R-KwS whilst OSs produce summaries of all information about particular DSs (e.g. 9.3.2. Pr X cis semantics. For instance, in OS queries, given an identifying set of keywords (e.g. whereas in pr X cis queries, given a more general set of keywords (e.g. search paradigm).
 1  X  contents.
 dif preference is only 9%). This is because for smaller results pr X cis were not that dif transforms a pr X cis query result (i.e. the database subset) to an OS format, then this by the G DS (h) proposed by users or DBAs. 9.3.3. Af fi nity
In schema summarization the concept of Af fi nity is also investigated and quanti threshold is needed. The selection of an effective common threshold for all G ordered Af fi nity values were 1, 0.5, 0.1, 0.013, 0.008, etc. whereas for Parts G formula was designed to support more easily the selection of a common threshold.
ARC is a fair comparative metric since it considers the ranking of relations according to their Af thresholds). In Fig. 14 we also present ARC results created with Af average, the difference of the correlation coef fi cient of the two af difference was expected since Af fi nity in [36] ignores Af datasets). 10. Conclusion and future work with the wider use of web accessible databases.
 keywords. It starts from a tuple containing the keyword, i.e. the t G ) as long as the data traversed is relevant to t DS .
 an important contribution of this paper was the introduction, investigation and quanti estimating the size of OSs for the particular thresholds.

We conducted experiments on two databases, namely TPC-H and Northwind. The excellent P/R/F and Af
Correctness results proved the quality of the proposed Af of attribute clustering techniques, the automated identi fi problems, ontologies will be considered.
 Acknowledgment
This work was partially supported by the  X  Hosting of Experienced Researchers from Abroad  X  X  X  X  X  /0308) funded by the Research Promotion Foundation, Cyprus. Appendix A
References
