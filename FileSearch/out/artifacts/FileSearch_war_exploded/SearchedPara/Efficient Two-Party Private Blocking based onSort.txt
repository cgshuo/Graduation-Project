 Integrating data from diverse sources with the aim to iden-tify similar records that refer to the same real-world entities without compromising privacy of these entities is an emerg-ing research problem in various domains. This problem is known as privacy-preserving record linkage (PPRL). Scala-bility of PPRL is a main challenge due to growing data size in real-world applications. Private blocking techniques have been used in PPRL to address this challenge by reducing the number of record pair comparisons that need to be con-ducted. Many of these private blocking techniques require a trusted third party to perform the blocking. One main threat with three-party solutions is the collusion between parties to identify the private data of another party.
We introduce a novel two-party private blocking technique for PPRL based on sorted nearest neighborhood clustering. Privacy is addressed by a combination of the privacy tech-niques k -anonymous clustering and public reference values. Experiments conducted on two real-world databases validate that our approach is scalable to large databases and effective in generating candidate record pairs that correspond to true matches, while preserving k -anonymous privacy characteris-tics. Our approach also performs equal or superior compared to three other state-of-the-art private blocking techniques in terms of scalability, blocking quality, and privacy. It can achieve private blocking up-to two magnitudes faster than other state-of-the art private blocking approaches. H2.7 [ Database Management ]: Database Administration-Security, integrity, and protection Algorithms, Experimentation, Security Record linkage, privacy, security, nearest neighbor clustering
Data in current computing environments is increasingly spread across disparate data sources owned by different or-ganizations. Integrating such data from different sources to identify and match records that refer to the same real-world entities is a crucial data-preprocessing step for accu-rate data mining and analysis [4]. Due to the absence of unique entity identifiers in the databases to be integrated, a common practice is to use attributes that contain personal identifying information about the entities, such as names and addresses, to identify matching records. Exchanging such personal information across different organizations of-ten raises privacy and confidentiality concerns. To overcome such concerns, techniques are required to integrate data from different data sources while protecting confidentiality of the entities to whom the data corresponds. Various privacy-preserving record linkage (PPRL) solutions have been pro-posed to achieve this goal [12, 32].

One example real-world PPRL application would be an analysis of correlations between types of car accidents and resulting injuries, which requires the linkage of databases from hospitals, health insurance companies, and the po-lice [4]. Another example is a health surveillance system that continuously links data from human health data, an-imal health data, and pharmacy purchase data to monitor epidemic outbreaks of contagious diseases [8]. Another ap-plication of current interest is the identification of potential terrorism threats by linking records from a diverse set of databases such as communication providers, banks, airlines, and immigration departments [4, 8]. These example scenar-ios illustrate that real-world applications often require data from different organizations to be linked, but privacy and confidentiality issues need to be considered in such record linkage applications.

Two different types of privacy techniques have been used to address the privacy aspect in PPRL [32]. They are (1) secure multi-party computation (SMC) techniques and (2) data perturbation techniques. The former is computation-ally expensive even though it provides stronger privacy guar-antees and high quality results, while the latter uses efficient techniques to perturb the datasets and as opposed to SMC it can reveal partial information that however cannot be used to infer the actual values in the original datasets.
Due to the growing size of today X  X  databases, PPRL re-search aims to develop efficient solutions that are scalable to large databases. Assume D A and D B are the databases to be linked, and they contain n A = | D A | and n B = | D records, respectively. A naive pair-wise comparison of two databases in record linkage applications has a quadratic com-plexity in their sizes ( n A  X  n B ). This quadratic complex-ity makes solutions not scalable with the growing size of databases and therefore not viable in many real-world ap-plications. This problem is addressed by using two-step record linkage algorithms where in the first step a block-ing/indexing technique [5] is applied on the databases to generate candidate record pairs by pruning pairs that likely refer to non-matches, so that detailed comparisons and clas-sifications only have to be made in the second step on a smaller subset of record pairs. In PPRL, the scalability aspect is addressed by private blocking techniques where blocking is applied in a privacy-preserving context [32].
Private blocking aims to generate candidate record pairs without revealing any sensitive information that can be used to infer individual records and their attribute values. There have been several private blocking techniques proposed re-cently that adopt existing techniques (such as standard block-ing [1, 14, 15, 18], sorted neighborhood blocking or window-ing [19, 30], mapping based blocking [25, 33], q -gram based blocking [3], clustering [17, 21], and locality sensitive hash-ing [10]) into a privacy-preserving context. Among these techniques, sorted neighborhood blocking is considered as a very efficient technique [9]. This approach sorts the database tables according to a  X  X orting key X  over which a sliding win-dow of size w is moved to generate candidate record pairs from the records that are within the current window. The resulting number of candidate record pairs with this ap-proach is O (( n A + n B ) w ), while with many other blocking approaches it is O (( n A  X  n B ) /b ), where b is the number of blocks generated [5]. Most of the proposed private blocking solutions require a trusted third party to perform the block-ing. Such three-party solutions are often not reliable due to the privacy risk of collusion between the third party and one of the database owners with the aim to learn about the other database owner X  X  private or confidential information.
The contributions of this paper are: (1) an efficient two-party private blocking technique based on a sorted nearest neighborhood clustering approach using a combination of two privacy techniques: k -anonymous clustering [27] and public reference values [24], (2) a novel set of disclosure risk measures that can be used to numerically measure and com-pare the privacy guarantees of any PPRL solution based on a frequency attack, (3) an experimental evaluation conducted on two real-world datasets, and (4) a comparison of our so-lution with three state-of-the-art private blocking solutions, which are Karakasidis et al. X  X  [17] k -nearest neighbor cluster-ing, Durham X  X  [10] Hamming based locality sensitive hash-ing, and Kuzu et al. X  X  [21] approach based on hierarchical clustering and differential privacy [11].

The remainder of this paper is structured as follows. In the following section we review related work in private block-ing. In Section 3 we describe our protocol and illustrate it using two small example datasets. In Section 4 we ana-lyze the protocol and in Section 5 we validate this analysis through an empirical study. Finally we summarize our find-ings and provide directions for future research in Section 6.
Over recent years several techniques for private blocking have been proposed. Most of this work has employed the standard blocking approach [4], where all records that have the same blocking key value (BKV  X  value of the attribute/s that is/are used to group records) are inserted into the same block, and only records within the same block are compared in detail with each other. Al-Lawati et al. [1] explored three methods of token blocking to group hash signatures of the TF-IDF distances of attribute values. Karakasidis et al. [18] proposed phonetic based private blocking where an encoding function, such as Soundex [4], is used to group records that have similar (sounding) values into the same block. Gen-eralization techniques, such as value generalization hierar-chies [14], k -anonymity [27] and binning [31], have been used for private blocking to distribute records with similar char-acteristics into the same blocks.

Instead of generating blocks according to the BKVs, the sorted neighborhood approach sorts the database records according to their sorting key values (SKVs  X  values of an attribute or a combination of attributes that is/are used to sort the records), and then moves a sliding window of fixed size over the sorted records to generate candidate records from the records in the current window [13]. To overcome the drawback of missing true matches due to the fixed size window, several alternate methods were recently proposed with adaptive window size that adaptively adjust the win-dow size according to the date characteristics [9, 34]. The sorted neighborhood approach has been studied for private blocking in two recent three-party approaches [19, 30].
Scannapieco et al. [25] and Yakout et al. [33] proposed mapping based blocking, where a multi-dimensional space is used into which attribute values are mapped while pre-serving the distances between these values. A clustering or nearest neighbor approach is then applied on these multi-dimensional objects to extract candidate record pairs. These approaches are often sensitive to parameter settings. A re-lated PPRL solution recently proposed by Bonomi et al. [3] used q-gram based private blocking to embed the records into a prefix tree with some noise added to each node in the tree in such a way that the embedded tree guarantees differential privacy.

Karakasidis et al. [17] proposed a three-party private block-ing approach based on the k -nearest neighbor clustering al-gorithm to group records such that similar records are put into the same clusters, and each cluster is represented by at least k elements to provide a k -anonymous privacy guar-antee (i.e. each record is indistinguishable from k reference values). Initially, k -anonymous clusters are generated for a set of reference values that are shared by the database own-ers. Each database owner assigns their records into these clusters based on their similarity, and the clusters are sent to a third party that merges the corresponding clusters to generate candidate record pairs. A main drawback with this approach is that it requires calculation of similarities be-tween each record and all the reference values used.
Kuzu et al. [21] introduced a private blocking approach based on hierarchical clustering and differential privacy [11]. This approach requires a third party for the private linkage. However, the third party is not needed for blocking (two-party private blocking). Initially global clusters are gener-ated for a set of reference values using hierarchical clustering. Then each database owner assigns their records into these global clusters based on their similarity. Differential privacy is used by adding noise drawn from a Laplace distribution to ensure privacy against inference due to clusters release. A three-party SMC-based approach is then used in the sec-ond step to compare and classify the candidate record pairs generated in the blocking step. Since the resulting clus-ters contain noise, only a SMC-based private comparison and classification technique can be applied on the candidate record pairs. The approach is computationally expensive in terms of number of similarity calculations.

Locality sensitive hashing (LSH) has recently been investi-gated as an efficient technique for scalable PPRL in a three-party context [10]. LSH allows hashing of values in such ways that the likelihood that two similar values are hashed into the same block can be specified through the use of cer-tain hashing functions. Durham [10] investigated how LSH can be applied in Bloom filter based PPRL to reduce the number of record pair comparisons. A Bloom filter is a bit array data structure where hash functions are used to map a set of elements (q-grams extracted from attribute values) into the bit array. For private blocking, an iterative prun-ing approach was employed, where random bits are sam-pled at each iteration from the Bloom filters and sent to a third party. The third party then uses Hamming based LSH functions to compute the Hamming distance, which allows efficient generation of candidate record pairs. It is often dif-ficult to tune parameters of this approach because they are data dependent.
Our proposed solution conducts sorted neighborhood based private blocking using k -anonymous clustering and public reference values. We assume two database owners, Alice and Bob , with databases D A and D B , participate in the protocol to perform private blocking on their databases. Alice and Bob have access to a publicly available reference dataset R that contains reference values in the same domain as the val-ues used for the sorting key. All values in D A and D B are sensitive, and only R is shared. The aim of this approach is to identify candidate record pairs from D A and D B by using the values in R without revealing any information about the sensitive values in D A and D B . Figure 1 illustrates the two-party setting and the outline of our solution, and Table 1 summarizes the notation we use.

Initially local clusters are independently generated by Al-ice and Bob using k -anonymous clustering. Each of the gen-erated k -anonymous clusters contains at least k database records and n r reference values ( n r  X  1). To identify the candidate clusters from both databases a certain number of reference values ( n e ) from each cluster are exchanged be-tween Alice and Bob . These exchanged reference values rep-resent the sorting key values (SKVs) of the records in the Figure 1: Outline of the proposed protocol. Numbers corresponding clusters. The sorted nearest neighborhood approach is applied on the list of exchanged reference val-ues from both databases, to calculate the candidate clusters from the reference values that fall into the same window.
In this section we describe the steps involved in our two-party sorted neighborhood clustering (SNC) based private blocking approach, and illustrate the protocol with an exam-ple consisting of two small databases, as shown in Figure 2. The protocol performs the following steps. 1. The first step is for the database owners, Alice and 2. Alice and Bob each individually selects and sorts a Figure 2: Example databases held by Alice (D A )and Bob 3. Alice and Bob then individually insert their database 4. The next step is to merge the SNC clusters such that 5. Once the k -anonymous clusters are generated, refer-6. Using the exchanged reference values the candidate
The candidate record pairs are generated from all the records in the corresponding candidate clusters of Alice and Bob . For example, the candidate pair of clusters (A3,B3) generates the following candidate record pairs: (RA1, RB4), (RA1, RB7), (RA1, RB8), (RA6, RB4), (RA6, RB7), (RA6, RB8), (RA8, RB4), (RA8, RB7), and (RA8, RB8). A pri-vate matching and classification technique [10, 24, 29, 31] (which is outside and independent of our protocol) can then be applied on each resulting candidate cluster individually to obtain the detailed similarities of individual record pairs.
Reference values are used in our approach as a privacy technique to conduct private blocking between two sensitive databases. Such reference values can be constructed either with random faked values, or values extracted from a public reference datatset, for example, all unique surnames taken from a public telephone directory. The aim of this approach is to find the candidate clusters using the reference values instead of the actual values in the databases.
The list of reference values used should be effective in blocking the databases by placing similar SKVs into the same clusters and different SKVs in different clusters. In addition, the reference values exchanged should not be close to each other in the lexicographically sorted list of values in a public global dataset, G , as this might reduce the k -anonymous privacy protection, as discussed in Section 4. This means that reference values selected from R need to be evenly spread to represent all clusters in the databases.
We propose a reference values selection method to select and exchange appropriate reference values that are not sim-ilar/close to each other and represent all clusters. The sim-ilarity or closeness of reference values can be calculated by using an extended version of the Dice-coefficient similarity function [4] to compare only the first few characters of the strings (we name this as  X  X ice-short X ). Assume r i and r j two reference values and r i is 10 characters long and r j characters long. We only compare the first min ( r i ,r j characters of r i and r j to check if these two strings are not lexicographically sorted close to each other.
 The proposed selection method is explained in Algorithm 3. The process starts by initially selecting more than n R refer-ence values from R into R . Each pair of consecutive refer-ence values in the sorted list of R are then compared using the Dice-short similarity function. Pruning of similar refer-ence values from R is conducted in an iterative way, such that one of the reference value in the closest or most similar pair is removed at each iteration, depending on the simi-larity between their neighboring reference values, until the number of reference values in R becomes n R .

Finally, the reference values of Alice and Bob that are sorted next to each other in a window should be similar or close to each other to be considered as candidate clusters. Again, the Dice-short function can be used to calculate how similar Alice  X  X  and Bob  X  X  reference values in a window are, to determine the corresponding clusters as candidate clusters.
In this section we analyze our protocol in terms of com-plexity, privacy, and quality of blocking.
Assume the number of records in both databases is n ( n = n A = n B )and n R reference values are selected by both Alice and Bob from the reference dataset R ( n R = n A R = n ). Sorting these n R reference values is of O ( n R log ( n complexity, and inserting the n database records into their sorted list of reference values is of O ( nlog ( n R )) complexity. Insertion of records into the sorted list of reference values in protocol step 3 results in n R SNC clusters each represented by one reference value. Merging the SNC clusters to create k -anonymous clusters in protocol step 4 requires a loop over n
R clusters, which is of O ( n R ) complexity, and results in an average of ( n/k ) k -anonymous clusters each represented by n r reference values ( n r  X  1) and each containing a minimum of k records.

Alice and Bob then exchange n e reference values (1  X  n e  X  n r )fromeachoftheir k -anonymous clusters (a to-tal of n R reference values) in protocol step 5. The com-munication complexity of this step is therefore O ( n R ). In protocol step 6, sorting the exchanged reference values is of O (2 n R log (2 n R )) complexity and applying the sorted near-est neighborhood approach on this sorted list of reference values is of O (2 n R ) complexity. The overall complexity of our approach is linear in the size of the databases n and log-linear in the number of reference values n R used. As-suming each cluster contains k records and the size of the sliding window is w , the number of candidate record pairs generated by our approach is ( n/k )  X  ( k 2  X  w )= nkw .
We assume that both Alice and Bob follow the semi-honest (honest-but-curious) adversary model [12, 32], in that they follow the protocol while trying to find out as much as possible about the data from the other party. To analyze the privacy of the protocol, we need to evaluate what can be learned from the data they communicate with each other during the protocol. In step 5, Alice and Bob exchange a certain number of reference values ( n e )fromeachcluster and this might leak some information regarding the clusters in their databases depending on the value for n e .
Therefore, a higher number of reference values exchanged from each cluster will reduce the privacy of the protocol but increase the quality of candidate clusters generated.
At the end of private blocking, candidate clusters are found and private linkage can be conducted on each cluster pair individually by using a private matching and classifica-tion technique [10, 24, 26, 29, 31], which should not reveal any information regarding the sensitive attributes and non-matches (this step is outside of our protocol).
The quality of blocking is defined in terms of two as-pects [5]: (1) effectiveness  X  all similar records should be grouped into the same cluster, and (2) efficiency  X  the num-ber of candidate record pairs generated should be as small as possible while including all true matching record pairs. The size of the window w plays a major role in deciding the quality of blocking. A higher value for w is more likely to group more nearest clusters as candidate clusters. This results in higher effectiveness and lower efficiency.
The value for k also determines the effectiveness and ef-ficiency of blocking. A higher value for k results in a more effective but less efficient blocking. An optimal value for k needs to be set such that high values for both effective-ness and efficiency are achieved while k guarantees sufficient privacy as well.
We experimentally evaluated our protocol using two real databases. The first is an Australian telephone database (OZ) that contains 6,917,514 records. We used two at-tributes as the blocking / sorting keys: Given name (78,336 unique values), and Surname (404,651 unique values). To generate datasets of different sizes, we sampled 0.1%, 1%, 10% and 100% of records in the full database twice each for Alice and Bob , and stored them into pairs of files such that 25%, 50% or 75% of records appeared in both files of a pair.
The record pairs that occur in both datasets are exact matches (these datasets are labeled as  X  X o-mod X  for no mod-ification in the results figures). To investigate the perfor-mance of our protocol in the context of  X  X irty data X  (where attribute values contain errors and variations), we generated another series of datasets where we modified each attribute value by applying two randomly selected character edit op-erations (insert, delete, substitute, or transposition) [7].
We also used a second large real dataset for comparative analysis and evaluation of our proposed protocol with three other state-of-the-art private blocking techniques, which are Karakasidis et al. [17] X  X  k -anonymous nearest neighbor clus-tering ( k -NN), Durham [10] X  X  Hamming based locality sensi-tive hashing (HLSH), and Kuzu X  X  hierarchical clustering [21] (HCLUST). This dataset is a real-world voter registration database from North Carolina (NC) in the US [6], containing records of over 8 million voters. We downloaded this dataset every two months since October 2011 to build a longitudinal dataset. For the experiments presented here we extracted two attributes (First name and Surname) of 629,362 voters, such that 314,644 were represented by a single record and 314,718 by two or more records (up-to 6), where duplicate records contain errors and variations. We split this dataset into two files containing 481,315 and 480,701 records.
We prototyped our protocol and the three other state-of-the-art techniques ( k -NN, HLSH, HCLUST) using the Python programming language (version 2.7.3). We used pa-rameter settings for the k -NN, HLSH, and HCLUST meth-ods in a similar range as used by the authors of these three techniques. For k -NN, k is set to 3 and the similarity thresh-old is set as s t =0 . 6. In the HLSH method, the number of iterations is set to  X  = 40, the number of hash functions is l = 30, and the number of bits to be sampled from the Bloom filters at each iteration is  X  = 45. In the HCLUST method, the number of clusters is set as number of records/10, the differential privacy parameter =0 . 3, and the fake records tolerance parameter w n is set as the number of records in the databases to be linked. The default parameters for our SNC approach are set as k = 100, s t =0 . 8, w =2,and n e = 50%. n R is set to number of records/ k  X  10 so that each cluster will roughly contain n r = 10 reference values. Alltestswererunonacomputeserverwitha64-bitIntel Xeon (2.4 GHz) CPU, 128 GBytes of main memory and running Ubuntu 12.04. The programs and test datasets are available from the authors.
We use the following measures to evaluate the perfor-mance of private blocking solutions in terms of complexity, quality of blocking, and privacy. We evaluate the complexity of blocking solutions by the total time required for blocking. The standard measures reduction ratio (RR) and pairs com-pleteness (PC) are used to assess the quality of blocking in terms of efficiency and effectiveness, respectively. RR is the fraction of record pairs that are removed by a blocking so-lution and PC is the fraction of true matching record pairs that are included in the candidate record pairs generated by a blocking solution [5].
 Privacy is normally measured by the risk of disclosure [23]. There have been several attack models proposed to investi-gate the risk of disclosure in PPRL solutions [20, 22, 28]. Thesemodelsarebasedonsimulatingattacksonprotected databases ( D T ) using a global dataset G that can be con-sidered as a super-set of the linkage databases ( D  X  G ). However, a standard and normalized measure that provides a numerical value to quantify the privacy protection based on such simulated attacks has so far not been studied in the literature [32]. We introduce a set of disclosure risk (DR) measures that can be used to evaluate and compare different private blocking and PPRL solutions.

The probability of suspicion ( P s ) of a value in the encoded dataset is defined as 1 /n g ,where n g is the number of global values in G that match with the corresponding value in D T We normalize this probability between 0 and 1, where 1 indicates that the value in D T can be provably re-identified through a one-to-one mapping with one value in G ,and0 represents absolute privacy which means a value in D T could correspond to any value in G and therefore it cannot be provably re-identified. Based on the normalized P s value for each value in D T , we can calculate the following statistical measures for disclosure risk of D T : 1. Maximum disclosure risk (Max): This corresponds to 2. Mean disclosure risk (Mean): This takes into consid-
For example, if an encoded dataset contains four values and their P s values are 0 . 5, 0 . 65, 0 . 6, and 0 . 9, then the maximum disclosure risk of this encoded dataset is 0 . 9and the mean risk is (0 . 5+0 . 65 + 0 . 6+0 . 9) / 4=0 . 66. Figure 5 shows the quality of SNC blocking (measured by RR and PC) and total time required for blocking (averaged over the results of both database owners over all variations of each dataset) with different window sizes w .Asexpected, PC and time for blocking increase with w while RR de-creases. Since there is a drastic improvement in PC when w = 2 with a smaller increase in time and smaller decrease in RR, we choose this as the best default parameter setting. In Figure 6, we investigate the performance of SNC blocking with different values for the privacy parameter k .Ascanbe seen from the figure, the SNC approach achieves high values for both RR and PC even when k = 100. Interestingly, the blocking time reduces with k . This is because the number of resulting clusters ( n/k ) becomes less as k gets larger.
Next we studied how the exchange of reference values de-termines the complexity, privacy and quality of blocking. Complexity of blocking is measured by total blocking time and it increases with the percentage of reference values ex-changed (Figure 7 (a)). PC significantly increases when the percentage of exchanged reference values ( n e )isincreased from 10% to 50% with almost no reduction in RR as shown in Figure 7 (b). However, as discussed in Section 4, the pri-vacy of the protocol becomes less with more reference values exchanged as the disclosure risk increases with n e (see Fig-ure 7 (c)). Using the Dice-short reference values selection method discussed in Section 3.2 increases the privacy of the protocol without compromising much the quality of block-ing (labeled as  X  X elect X  in the figures). The maximum disclo-sure risk on the 172,938 dataset is reduced to 0 . 24 from 0 . 5 with the proposed reference values selection method when n e = 50%.
 Finally we compared the four blocking approaches (kNN, HLSH, HCLUST, and our SNC) in terms of complexity, quality of blocking, and privacy. As illustrated in Figure 8 (a), the SNC approach requires significantly less blocking time (up-to two magnitudes compared to k -NN and HCLUST) and is scalable to large databases. Figure 8 (b) shows that the SNC approach performs superior or equal compared to the blocking quality of other approaches by achieving higher
