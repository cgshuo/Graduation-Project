 Twitter becomes one of the most popular social networking sites, which allows the users to read and post messages (i.e. tweets) up to 140 charac-ters. Among the great varieties of topics, people in Twitter tend to express their opinions for the brands, celebrities, products and public events. As a result, it attracts much attention to estimate the crowd X  X  sentiments in Twitter.

For the tweets, our task is to classify their senti-ments for a given target as positive, negative, and neutral. People may mention several entities (or targets) in one tweet, which affects the availabil-ities for most of existing methods. For example, the tweet  X  @ballmer: windows phone is better than ios!  X  has three targets ( @ballmer , windows phone , and ios ). The user expresses neutral, pos-itive, and negative sentiments for them, respec-tively. If target information is ignored, it is diffi-cult to obtain the correct sentiment for a specified target. For target-dependent sentiment classifica-tion, the manual evaluation of Jiang et al. (2011) show that about 40% of errors are caused by not considering the targets in classification.

The features used in traditional learning-based methods (Pang et al., 2002; Nakagawa et al., 2010) are independent to the targets, hence the results are computed despite what the targets are. Hu and Liu (2004) regard the features of products as tar-gets, and sentiments for them are heuristically de-termined by the dominant opinion words. Jiang et al. (2011) combine the target-independent fea-tures (content and lexicon) and target-dependent features (rules based on the dependency parsing results) together in subjectivity classification and polarity classification for tweets.

In this paper, we mainly focus on integrating target information with Recursive Neural Network (RNN) to leverage the ability of deep learning models. The neural models use distributed repre-sentation (Hinton, 1986; Rumelhart et al., 1986; Bengio et al., 2003) to automatically learn fea-tures for target-dependent sentiment classification. RNN utilizes the recursive structure of text, and it has achieved state-of-the-art sentiment analysis re-sults for movie review dataset (Socher et al., 2012; Socher et al., 2013). The recursive neural mod-els employ the semantic composition functions, which enables them to handle the complex com-positionalities in sentiment analysis.

Specifically, we propose a framework which learns to propagate the sentiments of words to-wards the target depending on context and syn-tactic structure. We employ a novel adaptive multi-compositionality layer in recursive neural network, which is named as AdaRNN (Dong et al., 2014). It consists of more than one compo-sition functions, and we model the adaptive sen-timent propagations as learning distributions over these composition functions. We automatically learn the composition functions and how to select them from supervisions, instead of choosing them heuristically or by hand-crafted rules. AdaRNN determines how to propagate the sentiments to-wards the target and handles the negation or in-tensification phenomena (Taboada et al., 2011) in sentiment analysis. In addition, we introduce a manually annotated dataset, and conduct extensive experiments on it. The experimental results sug-gest that our approach yields better performances than the baseline methods. RNN (Socher et al., 2011) represents the phrases and words as D -dimensional vectors. It performs compositions based on the binary trees, and obtain the vector representations in a bottom-up way. Figure 1: The composition process for  X  not very good  X  in Recursive Neural Network.

As illustrated in Figure 1, we obtain the repre-sentation of  X  very good  X  by the composition of  X  very  X  and  X  good  X , and the representation of tri-gram  X  not very good  X  is recursively obtained by the vectors of  X  not  X  and  X  very good  X . The di-mensions of parent node are calculated by linear combination of the child vectors X  dimensions. The vector representation v is obtained via: v = f ( g ( v l , v r )) = f W where v l , v r are the vectors of its left and right child, g is the composition function, f is the non-linearity function (such as tanh, sigmoid, softsign, b is the bias vector. The dimension of v is the same as its child vectors, and it is recursively used in the next step. Notably, the word vectors in the leaf nodes are regarded as the parameters, and will be updated according to the supervisions.

The vector representation of root node is then fed into a softmax classifier to predict the label. The k -th element of softmax ( x ) is exp { x k } a vector, the softmax obtains the distribution over K classes. Specifically, the predicted distribution is y = softmax ( Uv ) , where y is the predicted trix, and v is the vector representation of node. We use the dependency parsing results to find the words syntactically connected with the interested target. Adaptive Recursive Neural Network is pro-posed to propagate the sentiments of words to the target node. We model the adaptive sentiment propagations as semantic compositions. The com-putation process is conducted in a bottom-up man-ner, and the vector representations are computed recursively. After we obtain the representation of target node, a classifier is used to predict the sen-timent label according to the vector.

In Section 3.1, we show how to build recur-sive structure for target using the dependency pars-ing results. In Section 3.2, we propose Adaptive Recursive Neural Network and use it for target-dependent sentiment analysis. 3.1 Build Recursive Structure The dependency tree indicates the dependency re-lations between words. As described above, we propagate the sentiments of words to the target. Hence the target is placed at the root node to com-bine with its connected words recursively. The de-pendency relation types are remained to guide the sentiment propagations in our model.
 Algorithm 1 Convert Dependency Tree Input: Target node, Dependency tree Output: Converted tree 1: function C ONV ( r ) 2: E r  X  S ORT (dep edges connected with r ) 3: v  X  r 4: for ( r t  X  X  X  u/u t  X  X  X  r ) in E r do 5: if r is head of u then 6: w  X  node with C ONV ( u ), v as children 7: else 8: w  X  node with v , C ONV ( u ) as children 9: v  X  w 10: return v 11: Call C ONV (target node) to get converted tree
As illustrated in the Algorithm 1, we recursively convert the dependency tree starting from the tar-get node. We find all the words connected to the target, and these words are combined with target node by certain order. Every combination is con-sidered as once propagation of sentiments. If the target is head of the connected words, the target vector is combined as the right node; if otherwise, it is combined as the left node. This ensures the child nodes in a certain order. We use two rules to determine the order of combinations: (1) the words whose head is the target in dependency tree are first combined, and then the rest of connected words are combined; (2) if the first rule cannot de-termine the order, the connected words are sorted by their positions in sentence from right to left. Notably, the conversion is performed recursively for the connected words and the dependency rela-tion types are remained. Figure 2 shows the con-verted results for different targets in one sentence. 3.2 AdaRNN: Adaptive Recursive Neural RNN employs one global matrix to linearly com-bine the elements of vectors. Sometimes it is challenging to obtain a single powerful function to model the semantic composition, which moti-vates us to propose AdaRNN. The basic idea of AdaRNN is to use more than one composition functions and adaptively select them depending on the linguistic tags and the combined vectors. The model learns to propagate the sentiments of words by using the different composition functions.
Figure 2 shows the computation process for the example sentence  X  windows is better than ios  X , where the user expresses positive sentiment to-wards windows and negative sentiment to ios . For the targets, the order of compositions and the de-pendency types are different. AdaRNN adap-tively selects the composition functions g 1 ...g C depending on the child vectors and the linguistic types. Thus it is able to determine how to propa-gate the sentiments of words towards the target.
Based on RNN described in Section 2, we de-fine the composition result v in AdaRNN as: v = f where g 1 ,...,g C are the composition functions, P ( g h | v l , v r , e ) is the probability of employing g given the child vectors v l , v r and external feature vector e , and f is the nonlinearity function. For the composition functions, we use the same forms as in Equation (1), i.e., we have C composition matrices W 1 ...W C . We define the distribution over these composition functions as:  X   X   X  is the matrix used to determine which composition function we use, v l , v r are the left and right child vectors, and e are external feature vector. In this work, e is a one-hot binary feature vector which indicates what the dependency type is. If relation is the k -th type, we set e k to 1 and the others to 0.
Adding  X  in softmax function is a widely used parametrization method in statistical mechanics, which is known as Boltzmann distribution and Gibbs measure (Georgii, 2011). When  X  = 0 , this function produces a uniform distribution; when  X  = 1 , it is the same as softmax function; when  X   X  X  X  , it only activates the dimension with max-imum weight, and sets its probability to 1 . 3.3 Model Training We use the representation of root node as the fea-tures, and feed them into the softmax classifier to predict the distribution over classes. We define the ground truth vector t as a binary vector. If the k -th class is the label, only t k is 1 and the others are 0 . Our goal is to minimize the cross-entropy error between the predicted distribution y and ground truth distribution t . For each training instance, we define the objective function as: where  X  represents the parameters, and the L 2 -regularization penalty is used.

Based on the converted tree, we employ back-propagation algorithm (Rumelhart et al., 1986) to propagate the errors from root node to the leaf nodes. We calculate the derivatives to update the parameters. The AdaGrad (Duchi et al., 2011) is employed to solve this optimization problem. As people tend to post comments for the celebri-ties, products, and companies, we use these key-words (such as  X  bill gates  X ,  X  taylor swift  X ,  X  xbox  X ,  X  windows 7  X ,  X  google  X ) to query the Twitter API. After obtaining the tweets, we manually anno-tate the sentiment labels (negative, neutral, posi-tive) for these targets. In order to eliminate the effects of data imbalance problem, we randomly sample the tweets and make the data balanced. The negative, neutral, positive classes account for 25%, 50%, 25%, respectively. Training data con-sists of 6,248 tweets, and testing data has 692 propagates sentiment information to the target node. The g functions decide how to propagate the sentiments to the target. tweets. We randomly sample some tweets, and they are assigned with sentiment labels by two an-notators. About 82.5% of them have the same la-bels. The agreement percentage of polarity clas-sification is higher than subjectivity classification. To the best of our knowledge, this is the largest target-dependent Twitter sentiment classification dataset which is annotated manually. We make the
We preprocess the tweets by replacing the tar-gets with $ T $ and setting their POS tags to NN . Liblinear (Fan et al., 2008) is used for baselines. A tweet-specific tokenizer (Gimpel et al., 2011) is employed, and the dependency parsing results are computed by Stanford Parser (Klein and Man-ning, 2003). The hyper-parameters are chosen by cross-validation on the training split, and the test accuracy and macro-average F1-score score are re-ported. For recursive neural models, the dimen-sion of word vector is set to 25, and f = tanh is used as the nonlinearity function. We employ 10 composition matrices in AdaRNN. The param-eters are randomly initialized. Notably, the word vectors will also be updated.

SVM-indep : It uses the uni-gram, bi-gram, punctuations, emoticons, and #hashtags as the content features, and the numbers of positive or negative words in General Inquirer as lexicon fea-tures. These features are all target-independent.
SVM-dep : We re-implement the method pro-posed by Jiang et al. (2011). It combines both the target-independent (SVM-indep) and target-dependent features and uses SVM as the classifier. There are seven rules to extract target-sensitive features. We do not implement the social graph optimization and target expansion tricks in it.
SVM-conn : The words, punctuations, emoti-cons, and #hashtags included in the converted de-pendency tree are used as the features for SVM.
RNN : It is performed on the converted depen-dency tree without adaptive composition selection.
AdaRNN-w/oE : Our approach without using the dependency types as features in adaptive se-lection for the composition functions.

AdaRNN-w/E : Our approach with employing the dependency types as features in adaptive se-lection for the composition functions.

AdaRNN-comb : We combine the root vectors obtained by AdaRNN-w/E with the uni/bi-gram features, and they are fed into a SVM classifier. Table 1: Evaluation results on target-dependent Twitter sentiment classification dataset. Our ap-proach outperforms the baseline methods.
As shown in the Table 1, AdaRNN achieves bet-ter results than the baselines. Specifically, we find that the performances of SVM-dep increase than SVM-indep. It indicates that target-dependent fea-tures help improve the results. However, the accu-racy and F1-score do not gain significantly. This is caused by mismatch of the rules (Jiang et al., 2011) used to extract the target-dependent fea-tures. The POS tagging and dependency parsing results are not precise enough for the Twitter data, so these hand-crafted rules are rarely matched. Further, the results of SVM-conn illustrate that us-ing the words which have paths to target as bag-of-words features does not perform well.

RNN is also based on the converted depen-dency tree. It outperforms SVM-indep, and is comparable with SVM-dep. The performances of AdaRNN-w/oE are better than the above base-lines. It shows that multiple composition functions and adaptive selection help improve the results. AdaRNN provides more powerful composition ability, so that it achieves better semantic compo-sition for recursive neural models. AdaRNN-w/E obtains best performances among the above meth-ods. Its macro-average F1-score rises by 5.3% than the target-independent method SVM-indep. It employs dependency types as binary features to select the composition functions adaptively. The results illustrate that the syntactic tags are helpful to guide the model propagate sentiments of words towards target. Although the dependency results are also not precise enough, the composition se-lection is automatically learned from data. Hence AdaRNN is more robust for the imprecision of parsing results than the hand-crafted rules. The performances become better after adding the uni-gram and bi-gram features (target-independent). 4.1 Effects of  X  We compare different  X  for AdaRNN defined in Equation (3) in this section. Different parameter  X  leads to different composition selection schemes.
As illustrated in Figure 3, the AdaRNN-w/oE and AdaRNN-w/E achieve the best accuracies at  X  = 2 , and they have a similar trend. Specifi-cally,  X  = 0 obtains a uniform distribution over the composition functions which does not help im-prove performances.  X   X   X  results in a max-imum probability selection algorithm, i.e., only the composition function which has the maximum probability is used. This selection scheme makes Figure 3: The curve shows the accuracy as the hyper-parameter  X  = 0 , 2 0 , 2 1 ,..., 2 6 increases. AdaRNN achieves the best results at  X  = 2 1 . the optimization instable. The performances of  X  = 1 , 2 are similar and they are better than other settings. It indicates that adaptive selection method is useful to model the compositions. The hyper-parameter  X  makes trade-offs between uni-form selection and maximum selection. It adjusts the effects of these two perspectives. We propose Adaptive Recursive Neural Network (AdaRNN) for the target-dependent Twitter senti-ment classification. AdaRNN employs more than one composition functions and adaptively chooses them depending on the context and linguistic tags. For a given tweet, we first convert its dependency tree for the interested target. Next, the AdaRNN learns how to adaptively propagate the sentiments of words to the target node. AdaRNN enables the sentiment propagations to be sensitive to both linguistic and semantic categories by using differ-ent compositions. The experimental results illus-trate that AdaRNN improves the baselines without hand-crafted rules.
 This research was partly supported by the National 863 Program of China (No. 2012AA011005), the fund of SKLSDE (Grant No. SKLSDE-2013ZX-06), and Research Fund for the Doctoral Pro-gram of Higher Education of China (Grant No. 20111102110019).

