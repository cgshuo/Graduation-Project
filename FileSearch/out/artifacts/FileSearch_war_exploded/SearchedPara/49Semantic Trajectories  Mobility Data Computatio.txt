 It has become increasingly common for moving objects (e.g., cars, people) to carry embedded GPS chipsets, which allow collecting movement data. Berg Insight 1 ,for example, forecasts an increase in GPS handsets to 960 million units in 2014. As a consequence of this steady growth, the number of applications using mobility data for a variety of purposes is similarly increasing. Examples of well-recognized application of mobility data range from tracking, urban planning, and traffic management, to wildlife behavior analysis, mobility-aware social computing, and geo-social network.
Traditionally, research on mobility data management has centered around moving object databases and statistical analysis. These works primarily focus on: (1) data models : definitions and extensions of trajectory-related datatypes such as moving point/region [G  X  uting and Schneider 2005; Wolfson et al. 1998]; (2) data management : efficient storage of mobility data with ad hoc indexing and querying techniques [Saltenis et al. 2000; Chen et al. 2008]. A number of trajectory database management systems like Secondo [G  X  uting 2005], HERMES [Pelekis et al. 2006] and DOMINO [Wolfson et al. 1999] have been built within these works; (3) data mining : design of trajectory mining and learning algorithms (e.g., clustering, classification, outlier detection, finding convoys, sequential pattern mining) has been done and of prototypes for pattern discovery over real-life GPS data [Han et al. 2008]. Existing prototypes include MoveMine [Li et al. 2011], GeoLife [Zheng et al. 2010], and GeoPKDD [Nanni et al. 2010].

While providing efficient data management and mining techniques, these studies mainly focus on raw trajectories (spatio-temporal records x , y , t using geodetic co-ordinates), ignoring the background contextual information (e.g., land-use grids and geographical objects) that can contribute significant semantic knowledge about move-ments. As a result, it is hard to have a holistic interpretation (encompassing all rel-evant semantic information) of movement behaviors that includes contextual data. Thus, many new applications are interested in understanding and using a semantic interpretation or behavioral aspect of the moving object. For example, geo-fencing-based applications essentially focus on generating high-level events (e.g., inter-region movement) when mobile endpoints cross domain boundaries or deviate from predefined trajectories. There is a strong emphasis on developing techniques for higher-level and semantic events (e.g., Harry just reached office , Sally is shopping in CoopCity ,Daveis stuck in traffic ) inferred from raw GPS-alike data. Semantics simply speaking refers to additional information available about the moving object, apart from its mere position data. Semantics is contained both in the geometric properties of the spatio-temporal stream (e.g., when the user stops/moves) as well as in the geography on which the trajectory passes (e.g., shops, roads). An example of semantically enriched trajectory could be the following. Note that the preceding example includes generic movement characteristics (e.g., stop/moves), application-specific geographical objects (e.g., office) and also additional behavioral context (e.g., shopping, work).

This article reports our research to build a framework that is capable of developing suitable spatio-temporal and semantic abstractions of complete trajectories (from begin to end), exploiting both the geometric properties of the stream and the semantics of the underlying geographic context. Semantic enrichment materializes as annotations em-bedded into the trajectory data, that is, additional data attached to the spatio-temporal positions in the trajectory and encoding extra knowledge about the trajectory. Examples of annotations include recording the observed activity of a moving animal (with activity values  X  X eeding X ,  X  X esting X ,  X  X oving X , etc.), computing and recording the instant speed of the moving object, and inferring and recording the means of transportation used by a moving person (e.g., by foot, bus, metro, bicycle). A careful design of our frame-work ensures that our semantic trajectory representation model and our algorithms are generic enough to be applicable on trajectories of various moving objects, showing various patterns and qualities of movement data. Designing a generic model and the corresponding framework for generating semantic trajectories is not a trivial task. Several issues need to be addressed. (1) The model and framework should be application independent ,thatis,abletosup-(2) Building semantic trajectories directly from each individual GPS record is compu-(3) The annotation algorithms should be generic to exhibit a good performance over (4) In order to provide a holistic annotation framework, several independent sources This article overviews our research on developing a semantic approach whose func-tionalities enable progressively turning raw mobility data into semantic trajectories readily suitable for use by applications. The approach aims at promoting trajectory se-mantic annotation while minimizing the computational cost of data annotation. While parts of this work have already been presented elsewhere, a novelty of this article is to offer a consolidated and complete document collecting and unifying material scattered over previous papers, to serve as a basic reference to our work.

The main innovation emphasized by this contribution is the global framework that we provide to develop a suite of concepts (supported by a suite of implemented processes) that allows an application designer to get exactly the representation of trajectories at the level needed by the application, from the low-level raw data to the upper level characterizing semantically rich trajectories. Specifically, we design a semantic model that extends prior models (e.g., Spaccapietra et al. [2008], and Yan et al. [2008]) to be generic enough to capture semantics from both geometric properties of the stream and from background geographic data. With this semantic model, we provide a complete system that first exploits the spatio-temporal data to extract structured trajectories (as stop and move episodes) and then utilizes the geographic context to annotate stops and moves with the geographic objects relevant to the application. In short, the core contributions of the article are as follows. (1) Spatio-temporal and semantic trajectory model . The model captures trajectories (2) Trajectory computing platform . We built a computing platform that encapsulates (3) Trajectory semantic annotation . The platform supports various annotation strate-(4) Experiments and evaluations . We report on several experiments we did using large-
The article is organized as follows: Section 2 compares our approach and techniques to related work from the existing literature. Section 3 presents the data model that is pe-culiar to our approach. The computation framework is presented in two steps. Section 4 presents the creation of structured trajectories from raw data. Section 5 presents the annotation of the structured trajectories that generates semantic trajectories. Section 6 reports on experiments and their analysis. Section 7 presents concluding remarks. Trajectory data analysis recently has become an active research area because of a large availability of mobile tracking sensors, for example, GPS embedded smartphones. Many works are related to this article; we divide them into three categories: trajectory data modeling , processing ,and semantic enrichment . Traditional trajectory studies largely focus on data analysis from a spatial or spatio-temporal perspective. Thus, data modeling mainly concerns designing moving object or trajectory data types for data management, in order to support efficient data indexing and query processing [G  X  uting and Schneider 2005; Kuijpers and Othman 2007].
In order to build a rich mobility data model that can capture high-level semantics, our prior work has explored approaches for developing new conceptual models where the semantics of movement can be explicitly expressed, for example, the trajectory conceptual view in terms of a stop-move model [Spaccapietra et al. 2008] and trajec-tory ontologies for conjunctive query processing and reasoning [Yan et al. 2008]. Such trajectory modeling concepts have been largely used in several projects on mobility, for example, GeoPKDD 2 ( geographic privacy-aware knowledge discovery and delivery ) [Giannotti and Pedreschi 2008], MODAP 3 ( mobility, data mining, and privacy ), and SEEK 4 ( semantic enrichment of trajectory knowledge discovery ). These modeling con-cepts are well-fitted for the semantic analysis of movements, like tourist movements [Alvares et al. 2007], the semantic interpretation of stops [G  X  omez and Vaisman 2009] and moves [Mouza and Rigaux 2005].

However, an important challenge not yet addressed is to have a generic model with a supporting platform to develop these abstracted conceptual trajectories from the low-level mobility GPS feeds. In this article, we provide a comprehensive model (a hybrid spatio-temporal semantic trajectory model) that supports multilevel trajectory abstractions, ranging from the raw mobility data to high-level semantic trajectories. Similarly to conventional data modeling and management, trajectory data processing focuses on the geometric perspective when analyzing mobility. The study is mainly about building processing algorithms for trajectory reconstruction.

For the initial data preprocessing, researchers have designed algorithms for cleaning (i.e., dealing with data errors and outliers) and compression. For example, Marketos et al. propose a parametric online approach that filters noisy positions (outliers) by taking advantage of the maximum allowed speed of the moving object [Marketos et al. 2008]. On the other hand, random errors are small distortions from the true values and their influence is decreased by smoothing methods (e.g., Jun et al. [2006] and Sch  X  ussler and Axhausen [2009]). Additionally, many works study trajectory data compression. For instance, Meratnia and de By design the opening window techniques for online compression, among which there are two choices in threshold violation, that is, us-ing the point that causes the violation (NOPW X  normal opening window ) or using the point just before the violation (BOPW X  before opening window ) [Meratnia and de By 2004]. Different from these works, our semantic trajectory computation and annota-tion platforms can support more efficient one-loop data cleaning and semantic data compression. Recent progress has been made for semantic trajectory reconstruction for real-time movement streaming data [Yan et al. 2011b].

Segmentation is yet another important step in understanding mobility data. Zheng et al. provide a change-point-based segmentation for GPS trajectories according to the transportation means [Li et al. 2008; Zheng et al. 2011]. Their algorithm first identifies the walk segments, and then uses them to infer the other nonwalk segments. However, they use a universal threshold for determining whether a segment is walk or nonwalk. In our approach, the trajectory segmentation supports a dynamic stop threshold that can avoid false negatives like traffic congestion. Recently, Buchin et al. presented a theoretic framework that computes an optimal segmentation by using several crite-ria (e.g., speed, direction, location disk) from the computational geometry perspective [Buchin et al. 2010]. However, their methods do not provide any experimental study for validating their segmentation framework.

In contrast to these largely piecemeal trajectory processing studies, our approach provides a holistic multilayer trajectory computation platform for trajectory recon-struction. Our platform supports various applications with a complete and plugable workflow including data cleaning (considering both random errors and outliers), data compression , and several kinds of trajectory segmentation algorithms (e.g., dynamic velocity threshold, density) for various kinds of trajectory applications. The goal of trajectory data enrichment is to add semantic annotations by using ge-ographic and application domain knowledge. Like trajectory data processing, the lit-erature is also piecemeal, full of enrichment algorithms that annotate a specific type and/or a specific part of trajectories. Dedicated algorithms are independently designed for trajectory annotations with each kind of geo-objects: regions, lines, or points.
Enrichment with geographic regions. The works focus on computing topological cor-relations (called spatial predicates ) between trajectories and regions. For example, Alvarez et al. perform a spatial join between the trajectories and a given set of Re-gions Of Interests (ROIs) for computing frequent moves between stops [Alvares et al. 2007]. Other works (e.g., Nergiz et al. [2009]) apply similar data abstraction con-cepts for cloaking people locations to preserve their privacy. Our method uses the two kinds of formats that are provided by geographic sources: vector regions (e.g., regions from Openstreetmap) and raster regions (e.g., regions implicitly defined in land-use grids).

Enrichment with geographic lines. For trajectory enrichment with geographic lines, an important topic is developing efficient map matching algorithms. Map matching aims at identifying the correct road segment on which a vehicle is traveling and ad-ditionally approximating the vehicle X  X  position on the segment [Quddus et al. 2007; Brakatsoulas et al. 2005]. Map matching methods can be classified into three cate-gories: geometric [Bernstein and Kornhauser 1996], topological [White et al. 2000], and recent advanced methods [Newson and Krumm 2009; Lou et al. 2009]. Traditional map matching techniques target high matching accuracy, which is usually suited for movement with a unique kind of vehicle (e.g., car or truck). On the other side, we study map matching for trajectories that use various transportation means (e.g., walking for boarding on a bus and then a train). Thus, we have an additional postmap matching task that infers the transportation mode for each movement episode. Zheng et al. study the transportation mode by using segment features such as distance , average speed , and stop rate [Zheng et al. 2010]. Beside using such GPS-based segment features, our approach also uses extra semantic information from Openstreetmap (e.g., metro lines, bus stops) for improving the inference accuracy.

Enrichment with geographic points. Complementary research focuses on identifying meaningful Points Of Interests (POI) related to trajectories, based on clustering [Zhou et al. 2007; Palma et al. 2008] or reinforcement inference techniques (e.g., HITS and PageRank) [Cao et al. 2010; Zheng et al. 2009]. In addition, Xie et al. [2009] design a semantic spatio-temporal join method to infer activities from trajectories, based on a small set of predefined geographic hotspots. Li et al. [2010] design an algorithm for mining periodic behaviors in trajectories, focusing on semantic points like home / office . However, most of these studies consider only environments with sparse POIs, where identifying the meaningful POI for each trajectory part is trivial. In our approach, we consider trajectories in a city center with very dense POIs. We design an HMM-based POI inference for identifying the latent stop behaviors hidden in the raw mobility data.

In summary, we observe that these semantic enrichment works focus on specific situations and provide algorithms that are applicable to compute and annotate only certain kinds (or parts) of trajectories [Alvares et al. 2007; Yin et al. 2004; Palma et al. 2008; Xie et al. 2009; Newson and Krumm 2009], for example, map matching for vehicle moves or extracting important POIs for hotspots. None of them considers the analysis of complete trajectories that contain heterogeneous semantics, like the example of semantic trajectory in Section 1 (with semantics on both stops and moves). It is difficult to adapt these works to different types of moving objects (e.g., vehicles and people trajectories), or to trajectories crossing geo-objects of different kinds (e.g., lines and regions and points). Moreover, inferring such heterogeneous semantics needs multiple geographic data sources to be combined meaningfully. Our objective is to cre-ate a holistic framework for end-to-end computation and annotation of heterogeneous trajectories.
 Current mobility models focus either on high-level data representation (e.g., ontologies) or low-level GPS processing (e.g., mobility data management and mining). Our proposal is a hybrid Spatio-Temporal and Semantic (STS) trajectory model that: (1) encapsulates raw GPS spatio-temporal trajectory data; (2) provides a progressive abstraction of the raw data up to higher-level semantic representations; (3) supports well-known concepts like stop-move in Spaccapietra et al. [2008]. Our key design considerations for this hybrid model are as follows.  X  Raw data characteristics. The model should consider characteristics of raw mobility tracking data (e.g., spatial and temporal gaps, uncertainties) to create simple low-level representations (e.g., hourly, daily, monthly, and geo-fenced trajectories).  X  Progressive computation. The model should be designed so that a layered computing platform can generate higher-level semantic abstractions from the underlying lower-level trajectory representation.  X  Encapsulate various semantics. The model should be able to encapsulate various kinds of semantic annotations inferred from heterogeneous 3rd-party geographic artifacts (e.g., land use, road networks, points of interests) and rules about the real world (e.g., cars stop at red lights, buses stop at bus stops).
 Therefore, our hybrid model consists of (1) the raw data model that provides the tra-jectory definitions available from the raw data perspective; (2) the conceptual model which is a mid-level abstraction of a trajectory that provides a structured view of the raw mobility data; (3) the semantic model that provides a semantically enriched and more abstract view of the trajectory. Figure 1 provides an illustration of these models. The raw data model is the first abstraction level over the raw mobility data. The raw data like GPS records are typically captured by positioning sensors that continuously record the location of the moving object. So, the raw mobility data for a moving object is in essence a long sequence of spatio-temporal tuples ( position , timestamp ) collected over some time interval. Most real-life location traces today are essentially GPS-like tuples ( longitude , latitude , timestamp ) X ( x , y , t ) in short. From now on, we use the term GPS feed to represent the raw sequence of spatio-temporal points of a moving object.
In our raw data model, we decompose each GPS feed into subsequences so that each subsequence represents one meaningful unit of movement. We call these meaningful units spatio-temporal trajectories . Consequently, a spatio-temporal trajectory has a starting point ( x , y , t ), called Begin , and, further, an ending point, called End ;these two spatio-temporal points delimit the subsequence of the trajectory, along with the corresponding time interval [ t begin , t end ].

Definition 1( Spatio-Temporal Trajectory  X  T spa ). Given a GPS feed G of a moving point), a spatio-temporal trajectory T spa is a cleaned subsequence of G for a given time interval [ t begin , t end ], such that the subsequence does not contain any significant space or time gap. The term conceptual model refers to the logical partitioning of a spatio-temporal tra-jectory T spa into a series of nonoverlapping episodes .A T spa partitioned into episodes is called a structured trajectory ( T str ). Conceptually, an episode abstracts a subsequence of spatio-temporal points in T spa that show a high degree of correlation with respect to some spatio-temporal feature (e.g., velocity, angle of movement, density, time interval). An episode has the following salient features.  X  It is a generic trajectory structuring concept. By generically denoting a subsequence of a trajectory, the episode concept generalizes several other concepts that have been defined in the literature. Stop and move episodes were defined in Spaccapietra et al. [2008]. In Andrienko et al. [2011], the authors visualize trajectories as sequences of time-bars that are episodes defined according to range intervals of a given attribute (e.g., distance to a given geo-object, speed, direction).  X  It can be computed automatically. Episodes can be computed with trajectory struc-turing algorithms by using the correlations in the spatio-temporal characteristics of consecutive points of the GPS feed, like velocity , acceleration , orientation , density .  X  It enables data compression. Instead of tagging with an annotation each GPS record (which is possible), we can tag the episode. This reduces the size of the data needed to represent structured trajectories. For instance, Figure 1 shows the annotation of 7 episodes in the conceptual model ( X  X  X  and  X  X  X  annotations), which is more efficient than annotating each individual GPS record.

Definition 2( Structured Trajectory  X  T str ). A structured trajectory T str consists of a rep ):  X  time from is the instant of the first point of the episode, time to is for the last point of the episode.  X  da is the  X  X efining annotation X  of the episode. It represents the common spatio-temporal characteristic that is shared by all the spatio-temporal points of the episode.  X  rep is the spatio-temporal or spatial representation of the episode. It is either the sequence of points of the episode or a spatial abstraction of this sequence: the couple of the two extremity points of the episode, the center point of the episode, or the bounding rectangle of the episode. In the semantic model, a semantic trajectory T sem is a structured trajectory enhanced with semantic annotations of its episodes. An example of semantic trajectory is shown in the upper layer of Figure 1 (the semantic trajectory example in Section 1). It shows the semantic trajectory of a given employee on a given day: he goes to work from home (morning); after work (later afternoon), he leaves for shopping in market , and finally reaches home (evening).

Semantic trajectories can be computed by integrating data from 3rd-party geographic sources (e.g., geographic databases describing land use, road network, or points of inter-est), social networks containing data related to locations, and common sense knowledge about the real world (e.g., usually midnight GPS points of persons are located at home). Our system describes a set of semantic enrichment methodologies that can be applied by using such 3rd-party data for computing the semantic trajectories (through the trajectory annotation platform in Section 5).

Definition 3( Semantic Trajectory T sem ). A semantic trajectory T sem is a structured trajectory where the spatial data (the coordinates) are replaced by geo-annotations and further semantic annotations may be added. Episodes are enriched to generate semantic episodes ( se ) with geographic or application knowledge: the spatio-temporal or spatial representation of the episode is replaced by a reference to the geo-object where the episode takes place, that is, T sem ={ se 1 , se 2 ,..., se m } , where each semantic episode is defined by: se i = ( da , sp i , t ( sp i ) in , t ( sp i ) out , tagList )  X  da is the defining annotation of the episode (e.g.,  X  X top X  or  X  X ove X ).  X  sp i ( semantic position ) is a geo-object or one of its characteristics. The geo-object represents the location of the episode at semantic level. It is a real-world object taken from the available geographic knowledge (e.g., a building, a roadSegment, an administrativeRegion, a land-use region) or from application domain knowledge (e.g., the home or the office of a specific person of the application). A frequent characteristic of geo-objects used for semantically locating episodes is the type of the geo-object, for example Hotel, Restaurant, LocalStreet, CollectorStreet.  X  t ( sp i ) in is the incoming timestamp for the trajectory entering this semantic position approximated by the time from and time to of the episode.  X  tagList is a list of additional semantic annotations about the episode, for example, the activity performed during stop episodes by the moving agent (shopping, working, or eating), the transportation mode used by the moving agent for the move episodes (bike, bus, car, or walk).
 Our hybrid STS model is generic and can be used to represent various ontological frameworks for trajectory modeling [Yan et al. 2008; Wessel et al. 2009]. In the following we focus on the computation and annotation platforms that enable the creation of semantic trajectories from GPS feeds and 3rd-party geographic data sources. The trajectory computing platform exploits the spatio-semantic trajectory model and builds trajectory instances at different levels (spatio-temporal, structural), from large-scale real-life GPS feeds. Figure 2 shows the three layers in our platform, each con-taining several techniques for progressive computation of the trajectory instances. (1) Data Preprocessing Layer. This layer cleans the raw GPS feed, in terms of prelimi-(2) Trajectory Identification Layer. This layer divides the sequence of cleaned ( x , y , t ) (3) Trajectory Structure Layer . This layer is for computing episodes present in each Due to GPS measurements and sampling errors from mobile devices, the recorded position of a moving object is not always correct [Zhang and Goodchild 2002]. Usually the recorded data is unreliable, imprecise, incorrect, and contains noise. There exist work on determining possible causes for such uncertainty [Frentzos 2008].

We provide a data preprocessing layer for cleaning the data. For this layer, we re-designed GPS preprocessing techniques [Sch  X  ussler and Axhausen 2009] to perform our preprocessing steps. In particular, we have built techniques to detect (1) system-atic errors (outliers): observations that deviate significantly from the desired correct position; (2) random noise : GPS signals can have noise from several sources. for exam-ple, ionospheric effects and clocks of satellites can contribute towards white noise of  X  15 meters.

For outliers, we applied a velocity threshold to remove points that do not give us a reasonable correlation with expected velocity. Each GPS feed has domain knowledge of the moving object (e.g., car, bike, people walk, etc.). This allows us to remove outliers by using the velocity of this kind of object. For random noises, we design a Gaussian kernel-based local regression model to smooth out the GPS feed. The smoothed position ( x within a sliding time window, where the weight is a Gaussian kernel function k ( t i )with the kernel bandwidth  X  (Eq. (1)). To control the smoothing-related information loss, we adopt a reasonably small value for  X  (e.g., 5  X  GPS sampling frequency) so that only nearby points can affect the smoothed position. This is necessary as we wanted to calibrate the technique to handle only the noise while avoiding underfitting.
Figures 3, 4, and 5 show an example of our smoothing algorithm on a real dataset taken from wildlife tracking data on a given day. It contains 52 GPS (x,y,t) records. Figure 3 shows the smoothed longitude (actually transformed X in Cartesian coordi-nate). Figure 4 shows the smoothed latitude (transformed Y in Cartesian coordinate), and Figure 5 plots the original GPS feed before smoothing and the smoothed one.
These smoothing techniques are designed for cleaning GPS data of the freely mov-ing objects. However, in many cases, objects (e.g., vehicles) move along network con-strained paths (e.g., transportation network) [G  X  uting et al. 2006]. Regarding network-constrained trajectory data, map matching can be applied for determining the correct positioning and removing noise, by integrating positioning data with spatial road net-work to identify the correct road segment on which a vehicle is traveling and to deter-mine the location of a vehicle on this segment [Quddus et al. 2007; Brakatsoulas et al. 2005]. We also apply map matching for annotating trajectories, in particular for the move episodes. The details of map matching can be found in Section 5.2.
 Some other trajectory data preprocessing methods can also be applied at this stage. For instance, a couple of data compression and uncertainty models deal with the raw GPS feeds [Frentzos 2008]. On the contrary, this article focuses on using semantic abstraction to further compress the raw mobility data. This layer uses the cleaned data and extracts relevant nonoverlapping spatio-temporal trajectories T spa ( data model ). The central issue here is to determine reasonable iden-tification policies, to identify the division points ( x i , y i , t i ) that divide the continuous GPS feed into consecutive trajectories at appropriate positions. We present several identification policies we have implemented for various trajectory scenarios.
Policy 1( Raw GPS Gap ). Divide the sequence of ( x , y , t ) GPS records into several spatio-temporal trajectories according to the GPS gaps that satisfy one of the following conditions. (2) Given both a time interval duration and a spatial distance distance , if two consecutive
This policy utilizes the significant temporal (and spatial) gaps in the GPS feed for separating two consecutive spatio-temporal trajectories T spa . GPS trajectories often exhibit such gaps due to several reasons. For example, tracking devices usually turn off the GPS if the object does not move for a long while (to save power) or if there is no satellite coverage (indoor locations). The first subpolicy exploits large temporal gaps For example, our dataset of 17,241 car GPS traces (2,075,213 GPS records) resulted in 83,134 spatio-temporal trajectories. The second subpolicy uses both temporal and spatial gaps, where the two parameters are determined by statistical analysis of GPS feeds (e.g., gap distribution, type of movement: vehicular, pedestrian, etc.).
Policy 2( Predefined Time Interval ). Divide the stream of GPS feed into several sub-sequences contained in given time intervals, for example, hourly trajectory, daily tra-jectory, weekly trajectory, monthly trajectory.

This policy allows us to meaningfully divide a GPS feed into periods for analyzing mobility behaviors. Short-term period is particularly relevant for human movements (e.g., daily movement of weekday behavior analysis). Wildlife monitoring on the other hand needs to capture longer-term trajectory behaviors such as monthly or seasonal patterns (e.g., yearly movement analysis for the bird migration scenario).
Policy 3( Predefined Space Extent ). Divide the stream of GPS feed into several sub-sequences according to a spatial criteria, for example, fixed distance, geo-fenced regions, movement between predefined points for network-constrained trajectories.

This policy allows us to divide a GPS feed according to the covered distance (e.g., every 20 miles); according to a specific area (e.g., trajectories in EPFL campus, Lausanne downtown, or even Switzerland), where trajectories are defined when the object enters or exits the area; or between two given positions.

Policy 4( Time Series Segmentation ). Divide the stream of GPS feed into several subsequences according to a (semi-) automatic algorithm for segmenting time series, based on spatial or/and temporal correlations.

Trajectory data in essence is a special kind of time series, where the values are the locations x , y as time flows. Therefore, conventional time series segmentation algorithms can be applied for trajectory identification. Keogh et al. [2004] categorizes time series segmentation methods into three types: sliding window, top-down, and bottom-up. We use these methods for time-series-based segmentation of the mobility data. Policy 2 and Policy 3 can be considered as sliding-window-based methods, where the window is dynamically determined by the given temporal intervals or spatial areas. The top-down and bottom-up methods can generate much overfragment of trajectories (i.e., a lot of small segments), which is not good for the trajectory identification step. Nevertheless they can be applied for the trajectory structuring step, for example, the multidimensional mobile data segmentation [Guo et al. 2012].

The choice of the trajectory identification policy (from Policy 1 to Policy 4) depends on the application and data characteristics (e.g., with/without big gaps). For example, our people with smartphone trajectory data use Policy 2 (daily trajectories); the taxi trajectories can be divided according to the Lausanne zone by using Policy 3, analyzing the inside-city and outside-city trajectories. After identifying separate spatio-temporal trajectories, the next task is to compute their internal structures, constructing structured trajectories T str that consist of meaningful episodes. The core issue in trajectory structure is to group consecutive GPS points into an episode. We have implemented velocity-, density-, orientation-, and time-, series -based algorithms for identifying episodes. Hence, the focus is on the whole trajectory data computing platform. In this article, we present the two representative methods, that is, velocity-based and density-based trajectory structure.

In trajectory structure, we mainly focus on two kinds of episodes (i.e., stops and moves ) due to their commonality in many trajectory applications. The idea is to de-termine whether a GPS point p ( x , y , t ) belongs to a stop episode or a move episode by using a speed threshold ( speed ). Hence, if the instant speed of p is lower than speed , it is a part of a stop, otherwise it belongs to a move. Figure 6 traces the speed evolution of a vehicle, showing how stops can be determined by a given speed . Besides speed , we also use a second parameter, namely minimal stop time  X  in order to avoid false positives (e.g., short-term congestions with low velocity should not be stop episodes).
Determining a suitable value for speed is a challenging problem: if speed is too high, many stops appear; on the contrary, if speed is too low, probably no stops are computed. Figure 6 simply shows a constant speed applied all across the trajectory. This is not practical in real-world scenarios, where the value of speed should rather be flexible according to the context of the moving object. For example, vehicles with different levels of performance (bicycles or motor cars), different road networks (on a highway or a secondary road path), different weather conditions (sunny or snowy days) call for diverse speed thresholds. Although it is possible to get this contextual information, it would substantially increase the number of information sources that need to be integrated. We take a different approach. We design a generic method for determining speed , based on the class of moving objects being monitored (which is available) and then aggregate statistics of other moving objects in the area of consideration.
Definition 4( Dynamic Velocity Threshold -speed ). For each GPS point Q ( x , y , t )of a given moving object ( obj id ), the speed is dynamically determined by the moving object (by using objectA v gSpeed , namely the average speed of this moving object) and the underlying context (by positionA v gSpeed , namely the average speed of most moving objects in this position x , y ); that is, speed = min {  X  1  X  objectA v gSpeed , X  2  X  positionA v gSpeed } , where  X  1 and  X  2 are coefficients.

In this definition, objectA v gSpeed is easy to calculate as the average speed of the moving object. Regarding positionA v gSpeed , we need to approximate it by using space division. We divide the space into regular cells (or directly using the available land use grid) and calculate the average speed in each cell cellA v gSpeed as the contextual information. For network-constrained trajectory data, we can apply the speed condition on the underlying network (e.g., the average passing speed of the nearest road crossing crossingA v gSpeed and the average passing speed of the map matched road segment segmentA v gSpeed ), instead of the cellA v gSpeed . Algorithm 1 provides the pseudocode to determine speed . We analyze sensitivity of the coefficients  X  1 and  X  2 (e.g.,  X  1 =  X  2 =  X  = 30%) through experiments.

In some scenarios, GPS tracking data have instant speed values ( s ) captured by the devices. We use them for calculating speed and identifying the stops; otherwise, s is approximated by the average speed between the previous spatio-temporal point ( x possible as GPS data is usually sampled frequently (e.g., few samples per minute).
Algorithm 2 summarizes velocity-based trajectory structure : first, we compute the instant speed if it is not available from GPS devices; second, we compute the dynamic speed (using Algorithm 1) and annotate the GPS point with an  X  X  X  or  X  X  X  tag; finally, stops and moves are computed by aggregating all consecutive points with the same tag, with a precondition on the minimal stop duration  X  . This algorithm has linear complexity on the size of GPS feed, together with linear complexity on the size of road segments in the underlying network. It currently performs two data scans while tagging points and grouping consecutive points for the episodes. However, it is possible to combine the two scans together for better performance and shorten the computing time.
Using only velocity for identifying stops is not enough for some applications. For example, when analyzing bird migrations, we need to find the foraging stops. Some birds, like water-birds, when they are looking for food, can fly at high speed, but inside a small area. Another example is in traffic applications, when someone is driving quickly around a block looking for a parking place. The velocity-based algorithm cannot detect these kinds of stops. Therefore, we designed density-based stop identification, which considers not only the speed but also the maximum distance that the moving object has traveled during a given time duration. For this algorithm, we need to define density areas for extracting stop or move episodes.

Definition 5( A density -Density Area ). Given a cleaned sequence of GPS points { x i , y i , t i } , a maximum distance  X  , and a time duration  X  , a density area A is a subse-(1) For any two different points of the density area, if they are temporally dis-(2) For the last (first) point of the GPS sequence that is just before (after) the density Both velocity-based and density-based trajectory structure methods annotate each GPS point x , y , t with  X  X  X  or  X  X  X . Stops and moves are then computed based on contiguous  X  X  X / X  X  X  tags, together with the begin/end tags ( X  X  X / X  X  X ) resulting from the trajectory segmentation layer. Thus, a continuous sequence of x , y , t points having all  X  X  X  tags is integrated into a single move , while, a continuous sequence of x , y , t points, all with  X  X  X  tags, is integrated into a single stop . The first and last x , y , t point of each trajectory are respectively computed as its Begin and End.

Further details of all our approaches, including time series for network-constrained trajectory modeling Traj-ARIMA (AutoRegressive Integrated Moving Average) are pre-sented in Yan [2010]. We use Traj-ARIMA for velocity fitting and prediction. Further-more, we apply it for stop identification in situations where the forecasted speed is very different from the real speed, as there might be a stop happening. The trajectory computation layers developed different levels of data abstraction, recon-structed trajectories as a sequence of highly correlated episodes, resulted in structured trajectories T str . To better understand trajectory semantics, the meanings of the tra-jectory episodes need to be further discovered. For example, one episode is at home , another episode is on a public transportation (say bus) from home to office ,asthe semantic trajectory shown on the top of Figure 7. Therefore, 3rd-party geographic in-formation sources like land-use distribution and road network from Openstreetmap are needed for obtaining such semantic enrichment. These semantic annotations are captured using the semantic trajectory model introduced earlier in Section 3. This section describes the design and details of the annotation platform.

Our objective here is to provide a uniform and generic annotation platform for en-riching trajectories with multiple geographic artifacts. To accommodate heterogeneity of 3rd-party geographic information sources, we categorize them into three categories, that is, Regions Of Interest (ROI), Lines Of Interest (LOI), and Points Of Interest (POI), according to their geometric shapes. We entitle them semantic places .

Definition 6( Semantic Places ( P )). A set of meaningful places for annotating and understanding mobility data is called a semantic place. Each place sp has additional attributes containing useful metadata information ( a 1 , a 2 ,..., a n ) for describing such place. There are basically three subsets according to the geometric shape, that is P = P  X  X  set of semantic regions, P region ={ r 1 , r 2 ,..., r n  X  X  set of semantic lines, P line ={ l 1 , l 2 ,..., l n  X  X  set of semantic points, P point ={ p 1 , p 2 ,..., p n
We have identified and redesigned (particularly for line and point annotation) widely applicable algorithms considering our objective: algorithms should exhibit good perfor-mance over a wide range of trajectories with varying data quality. We follow a layered approach, carefully designed to support efficient semantic annotation. We first apply spatial join for computing T ( region ) sem (a sequence of regions) with ROIs (e.g., land-use data), to pick up regions that the trajectory has passed through, primarily to form a coarse-grained view of the semantic movement. We design a semantic line annota-tion algorithm that annotates move episodes, computing T ( line ) sem (a sequence of semantic moves) using LOIs (e.g., road network). For P point , we design a Hidden-Markov-Model ( HMM )-based algorithm for annotating stop episodes, computing T ( point ) sem with POIs (i.e., home, office, shopping mall, restaurant, etc.). This layer enables annotation of trajectories with meaningful geographic regions. It does so by computing topological correlations of trajectories with 3rd-party data sources containing semantic places of spatial kind regions ( P region ).

The topological correlation is measured using spatial join between a trajectory Q and semantic regions P region (i.e., Q  X  P region ). Several forms of spatial predicates are used to compute  X  , depending on the type of data. These can be a combination of directional , distance ,and topological spatial relations (e.g., intersection ) [Brinkhoff et al. 1993]. for example, for stop episodes, we found spatial subsumption (ObjectA is inside ObjectB) as the most used predicate. For the spatial extent, we use either the spatial bounding rectangle of the episode (for move or stop) or its center (for stop) to perform spatial join. After finding the appropriate regions ( r i ), the layer annotates input trajectories with these regions and associated metadata.

The semantic regions can be free-form regions like the EPFL campus, a recreation facility with a swimming pool, both taken from Openstreetmap 5 , and regions formed from grids of regular cells of repositories such as the Swisstopo 6 land-use and city zones. Figure 8 shows one person X  X  trajectory on Sunday, annotated with semantic places of various kinds taken from Swisstopo (building area, recreational area) and Openstreetmap (EPFL campus). By using an application database (e.g., EPFL X  X  em-ployee database) annotations for this personal trajectory can be expressed as: home  X  EPFL campus (staying 4 hours)  X  a swimming pool (staying 1 hour)  X  home .

Figure 9 illustrates land-use classification categories and subcategories that Swis-stopo uses to annotate 1,936,439 cells ( 100m  X  100m ) covering Switzerland. Figure 10 is an example of annotating trajectories with such land-use cells.

Algorithm 3 shows the pseudocode of the annotation algorithm with regions, which directly annotates GPS records with regions. Note that, depending on requirements, the spatial join can be computed only for selected episodes. We apply R*-tree index on semantic regions P region [Beckmann et al. 1990] to improve efficiency of the algorithm. The complexity of the annotation algorithm with region is O ( n  X  log ( m )), where n is the number of GPS records (or stop episodes) while m is the size of P region . For well-divided land-use data, the complexity can be even less, that is, O ( n ). This layer annotates trajectories with LOIs and considers variations present in het-erogeneous trajectories (e.g., vehicles run on road networks, human trajectories use a combination of transport networks and walk-ways, etc.). Given data sources of different form of road networks, the purpose is to identify correct road segments as well as infer transportation modes such as walking , cycling , public transportation like metro . Thus, the algorithms in this layer include two major parts: the first part is designing a global map matching algorithm to identify the correct road segments for the move episodes, and the second one is inferring the transportation mode that the moving object used.
Map matching algorithms usually design a distance metric (e.g., perpendicular dis-tance ) to map the GPS points to the nearest road segment [Quddus et al. 2007]. Though suitable for well-defined highway networks, perpendicular distance is not suitable for dense networks, parallel roadways, and arbitrary crossings. This is because vertical projections of (x,y,t) points on corresponding road segments often do not fall on the segment. Thus, we apply the point-segment distance , defined as where Q is the projection of the GPS point Q on the line determined by the two crossings A i and A j ; d ( QQ ) is the perpendicular distance between Q and that line; d ( QA )isthe Euclidean distance between Q and the crossing A .

As a subsequence of raw trajectory Q ,a move episode also includes a list of spatio-temporal points. Choosing the candidate road segment for each single point independently sometimes results in incorrect mapping, especially for nonperpendicu-lar pathways. Global map matching algorithms have shown better matching quality [Brakatsoulas et al. 2005; Quddus et al. 2007] as they consider the context of neigh-boring points. We adopt this with the point-segment distance , in terms of designing two metrics ( localScore and globalScore ) to map move episodes to appropriate road segments for heterogeneous road structures.

We consider a global view radius R around candidate points, with a context window of size 2 R . Therefore, mapping results of point Q depend also on the effects of its neighboring points ( N 1 points before and N 2 points after in radius R ). For computational efficiency, only the neighboring segments are considered as candidate road segments candidateSegs ( Q ). They can be efficiently accessed with an R*-tree index [Beckmann et al. 1990]. We normalize the point-segment distance d ( Q , A i A j ) as the localScore between point Q and road segment A i A j . Here d min ( Q ) is the shortest distance from Q to all possible candidate road segments A
A j . Based on localScore , we compute a global measurement globalScore between Q and A i A j considering the context window 2 R containing N 1 points prior to Q and the forthcoming N 2 points. Here Q k is the k th neighboring point of Q (e.g., Q 0 is Q itself, Q  X  1 is the previous point while Q + 1 is the next point); w k is the corresponding weight determined by a kernel smoothing function with the kernel bandwidth  X  .

After the first step of the global map matching, each episode is annotated in terms of a list of road segments, that is, ep ={ r 1 , r 2 ,..., r l } . We further infer the annotation of transportation mode on each segment (or route), getting the pairs of r i , mode i . In our experiment, we consider four types of transportation modes, that is, walking . bicycle , bus ,and metro . Such annotation is determined by the characteristics of the move episode and the matched road segments, including average velocity , average acceleration , road type, etc.

Algorithm 4 shows the detailed procedure of semantic line annotation: (1) select candidate road segments, (2) calculate the point-segment distance, (3) normalize the distance as localScore , (4) compute the weight and calculate globalScore , (5) determine the map matching segment for each point based on globalScore , (6) further infer the transport mode based on the features of the segment and the road type information.
Since each GPS point considers only the neighboring road segments as a set of candidate segments (by R*-tree), the candidate set size is significantly smaller than the total size of road networks in real-life datasets. This makes the algorithm, besides having better matching quality, also efficient, with linear complexity on the size of the GPS points O ( n ). The global map matching parameters (e.g., radius R and kernel width  X  ) are tuned in the experiment. This layer annotates the stop episodes of a trajectory with information about plausible Points Of Interest (POIs). Examples of POI are Gino restaurant , Armani shop Via Manzoni , etc. For scarcely populated areas, it is trivial to identify the POI that is the goal of a stop (e.g., the goal of a stop at a highway petrol pump is the petrol pump itself). However, densely populated urban areas may have many candidate POIs for each stop. Further, low GPS sampling rate due to battery outage and signal losses makes the problem more intricate. For instance, the Milan dataset in our experiments has 39,772 POIs with largely varying density. This large number makes it probabilistically intractable to infer the exact POI of the stop from imprecise location records. So, instead of inferring the POI instance for each stop, we chose to infer some semantic characteristic of the POI that is important for the applications. For instance, we can infer the POI type (e.g., restaurant, shop) or the activity usually performed in the POI (e.g., eating, shopping). We tested our method on the Milan dataset whose POIs are organized into a hierarchy according to their category for the local administration. The top level of the hierarchy contains five generic categories: services, food, home item, personal item, and other . So inferring the category of the stop out of these five categories becomes a tractable problem.

Therefore we have designed a Hidden-Markov-Model-(HMM)-based technique for the semantic annotation of stops with POI category. Unlike most other algorithms that identify the POIs of the stops [Alvares et al. 2007; Xie et al. 2009], a unique novelty of our approach is that it works for densely populated areas with many possible POI can-didates for annotation, thus catering to heterogeneous people and vehicle trajectories.
HMM is a classical statistical signal model in which the system being modeled is assumed to be a Markov process with unobserved state [Rabiner 1990]. We consider the temporal sequence of GPS stops: S = ( S 1 , S 2 ,..., S n ) as the observed values.
Figure 13 expresses the resultant HMM problem. The initial input is the raw tra-jectory Q , that is, the sequence of (x,y,t) points; a sequence of stops is computed and forms the real observation ( O ); the POI instances are the superficial hidden states, while the POI categories are the real hidden states that we are interested in. Our goal is to identify the real hidden states and use them to annotate the stops.

Modeling. Let there be m POI categories C 1  X  X  X  C m . Typically, an HMM  X  has three major components, namely  X  = (  X , A , B ); where  X  is the probability of the initial states, observation probability for each state Pr ( o | C i ).  X  Initial Probabilities (  X  ) . We approximate the probability of initial states  X  as the percentage of POI samples belonging to each category from the information source.
Therefore, for the Milan POI dataset,  X  State Transition ( A ) . State transition probability Pr ( C j | C i ) in our formulation rep-resents the possible sequences of stop categories; that is, the probability to stop in a
POI of category C j given that the previous stop was in a POI of category C i . Wher-ever available, category sequences (e.g., food  X  items for people or food  X  other ) are obtained through other information sources (e.g., from region transitions). For trajec-tories having insufficient history, we initialize the state transition matrix following nomenclatures of the POI categories (e.g., associate high probability for meaning-ful state transitions and low probabilities for nonmeaningful state transitions in
Figure 14). Learning dynamic and personalized transition matrix A is interesting but not the focus of this article.  X  Observation Probabilities ( B ) . Pr ( o | C i ) intuitively represents the probability of seeing a stop o (as the observation) in T caused by user X  X  interest in places belonging to cat-or the bounding rectangle Pr ( boundRectangle | C i ).
 Computing B for areas having high POI density is not easy. Our solution is based on the intuition that the influence of a POI category on a stop is proportional to the number of POI instances of that category in the stop area. We model the influence of a POI as a two-dimensional Gaussian distribution; the mean is the POI X  X  physical position ( x , y ) and the variance is [  X  2 an example of 12 POIs X  Gaussian distributions with the corresponding densities in Figure 16. By Bayesian rule, we deduce the lemma to determine Pr ( o | C i ) in B .
L EMMA 1. Pr ( o | C i ) is proportional to the sum of the probability of each POI that belongs to this category C i , namely Pr ( o | C i )  X  j Pr ( o | poi ( C i ) j ) .
We employ discretization and neighboring techniques to improve the efficiency of computing Pr ( o | C i ). Using discretization , we divide the area of POIs into grids (jk) and precompute discretized probability values of Pr ( grid jk | C i ), as the approximation of Pr ( center xy | C i ). Further, for each grid jk , we consider only neighboring POIs in that box (black rectangle in Figure 17), instead of all the POIs in the area.

Inferring Hidden States. Using the earlier defined complete form HMM  X  = (  X , A , B ), we infer their hidden states (the purpose behind the stops) HS ={ pc 1 , pc 2 ,..., pc n } from the stop sequence OV ={ stop 1 , stop 2 ,..., stop n } available through the stop/move computation, where pc t is the POI category pc t  X  X  C 1 ,..., C m } . This problem can be formalized as maximizing the likelihood L ( HS | OV , X  ).

We redefine this problem as a dynamic programming problem, defining  X  t ( i )asthe highest probability of the t th stop caused due to POI category C i (Eq. (6)). Eq. (7) gives the corresponding induced form of highest probability at the ( t + 1) th stop for category C , considering the state transition probabilities. We record the previous state C i that gives the highest probability to current state C j by  X  t + 1 ( j ) (Eq. (8)).
Finally, we employ the Viterbi algorithm [Forney 1973] to solve this dynamic pro-gramming problem for inferring the hidden state (stop category) sequence. We first recursively compute  X  t ( i ), and deduce the final stop state with the highest probability in the last stop, then backtrack to the previous stop state by pc  X  t  X  1 =  X  t ( pc  X  t ). The details of the algorithm for inferring hidden stop category sequence is in Algorithm 5. The output of this layer is a sequence of semantic episodes describing the stops. The re-sults from the three annotation algorithms are combined to produce the final semantic trajectory, which is exposed to applications. Testing and evaluation is an extremely important phase in a research project. This section discusses in detail how we addressed these tasks. We used several sets of GPS trajectories produced by three kinds of moving objects: private cars, taxis, and people with smartphones. Our choice was primarily driven by the availability of the datasets, secondarily by the fact that the chosen objects have different mobility patterns, which makes the testing more significant.

Rigorous validation of automatic inferencing of semantic data against actual human behavior is inherently challenging. In particular, knowing where people have been doesn X  X  readily tell us why they went to that place and what they did there. Validation, strictly speaking, relies on comparing computed results against the corresponding ground truth. Unfortunately only the moving person knows the truth, that is, what (s)he was doing and why. We can ask a person to annotate his/her trajectories with ground truth (e.g., the performed activity), but this is only feasible for small datasets (refer to Section 6.6). In other application domains, such as animal monitoring, it is simply not possible to acquire ground-truth data (we cannot ask animals to tell us what they were doing).

Whenever ground truth is not available, the existence of statistical data may be used as a weaker yet interesting alternative [Bamis et al. 2010]. We followed this strategy for the taxi and Milan datasets (see Section 6.5). Using statistical evidence means that we cannot guarantee correctness of inferences for each individual trajectory, but we can globally evaluate our results based on their statistical likelihood of correctness.
Finally, it is possible to have a by-definition validation strategy, that is, ensuring that the inference algorithms cannot produce incorrect results. To this extent, we have to define a set of inference rules that we know will by definition lead to a correct interpretation of the semantics we are looking for. Imagine, for example, that we can extract the following facts about a trajectory: the person has spent two hours in a department store, and the person bought several items using her credit card. These facts let us conclude that the person X  X  activity during this time interval is shopping. Much of the required inference rules rely on the availability of external knowledge complementing the trajectory data. Obviously there are things that cannot be inferred. For example, given the limitations of GPS data we cannot infer that the person visiting a commercial center has bought this item from this shop and not that item from the nearby shop (unless video recordings are available). Instead, provided we have the necessary knowledge, it is possible to identify whether a person is in a commercial area for work, shopping, meeting, thanks to the fact that behaviors of workers, shoppers, and meeting participants are quite different. The good news is that in most cases people X  X  behavior is predictable or inferable looking at their habits and considering common sense rules (e.g., a person stopping at a restaurant from 10am to 4pm is likely to be an employee rather than a customer). Figure 18 presents the architecture of our semantic trajectory platform, positioned between raw trajectory data and applications. It follows a layered structure that pro-gressively abstracts higher-level semantic trajectory concepts from lower-level raw GPS feeds. We first compute trajectory episodes (stops/moves) from GPS feeds, by the trajec-tory computation layer; then the trajectory annotation layer with dedicated algorithms is designed for specific episodes (i.e., spatial join with land-use for both stops/moves, map-matching-based transportation inference with network for moves, and hidden Markov model using POIs for inferring stop behaviors). In addition to these two layers, extra layers are set up: (1) the trajectory analytics layer computes statistical informa-tion (e.g., distribution of trajectory and episode characteristics, e.g., the mean, variance, max, min velocity). (2) The Web interface presents users with a visual and integrative way to query and retrieve the mobility data at several abstracted levels, that is, the enriched semantic trajectories as well as the raw mobility traces.
 We implemented and deployed our platform on a Linux operating system, namely Ubuntu 9.10, with the Intel(R) 2  X  3.00 GHz CPU and 7.9GiB memory. The algorithms are implemented in Java 6. PostgreSQL 8.4, with the spatial extension PostGIS 1.5.1, is used for implementing the database stores. The raw GPS records and geographic information from 3rd-party sources are loaded into databases and queried by the vari-ous layers during execution time. The trajectory Web interface is deployed on Apache Tomcat. Users access the system via a Web browser with the Google Earth plugin. There are two types of datasets: one records fast-moving vehicle trajectories (e.g., taxi and private cars); another is people trajectories from smartphones with embedded GPS. The datasets related to vehicle trajectories are as follows (see Table I for details).  X  Trajectories . We consider two large GPS datasets of vehicle trajectories, a small benchmark dataset for testing map matching, and two public datasets for sensitiv-ity analysis of the trajectory computation layer: (1) 3 millions GPS records of two
Lausanne taxis, collected over 5 months by Swisscom 7 ; (2) 2 millions GPS records of 17,241 private cars tracked in Milan during one week from the GeoPKDD project; (3) A GPS trace of 2-hour drive of a private car in Seattle, provided by Krumm 8 ; (4) two public Athens datasets from R-tree portal 9 .  X  Geo-Data Sources . We use: (1) the land-use data of Lausanne on the taxi data to validate the semantic region annotation; (2) a large POI dataset of Milan on the
Milan private cars data for testing the semantic point annotation; (3) the bench-mark dataset containing the road network of Seattle and the ground-truth paths to evaluate the semantic line annotation .

People trajectories are far less homogeneous than vehicle trajectories: (1) Many rea-sons can cause GPS data loss, such as the limited power of smartphones, battery outage, and indoor signal loss. (2) Nonstationary sampling rates are due to on-chip power saving software modules that monitor the sensor. (3) Compared to vehicles, hu-mans can take complicated on-road/off-road routes, and choose diverse transportation modes (e.g., walk , bicycle , bus , metro ) during their daily movements. Therefore, the ca-pabilities of our platform are carefully tested through systematic semantic enrichment of such trajectories. Table II shows the detailed dataset related to people trajectories.  X  Trajectories . This dataset [Kiukkoneny et al. 2010] is provided by Nokia Research
Center, Lausanne. They distributed nearly 200 smartphones (Nokia N95) to people in Lausanne, and collected multiple phone sensor readings including GPS feeds. We analyzed 185 users who traveled 23,188 daily trajectories, generating 7.3M GPS records. Additionally, we studied a subset of users X 1,077 daily trajectories from six users, for whom we have information about their movement behavior as the ground-truth data. This is subsequently useful for validation.  X  Geo-Data Sources . We used the cells of the Swiss land-use map; we also extracted additional geographic data from Openstreetmap 10 , including regions, POIs, and road networks of several types (through OSM files) and loaded them into our PostGIS data store (using Osm2pgsql 11 ). To easily present the trajectory computation results, we implemented a hybrid tra-jectory visualization tool using Java 2D API. Figure 19 provides a snapshot of the tool presenting three subfigures corresponding to original GPS feeds, spatio-temporal trajectories, and the structured trajectories, computed for the Athens truck dataset. The order of the subfigures (from left to right) follows the progressive computation of higher-level mobility semantic abstraction from the raw-level GPS data feed.  X  X ubfigure ( a ) visualizes the spatial locations of 112,203 raw GPS records, in terms of their two-dimensional geometric coordinates ( x , y ), without any further meaning (output of data preprocessing layer).  X  X ubfigure ( b ) shows 310 spatio-temporal trajectories obtained from the ( x , y , t ) cleaned sequences (output of trajectory identification layer). In order to improve the readability, neighboring trajectories are shown in different colors.  X  X ubfigure ( c ) displays the trajectory episodes (i.e., stops and moves) and visualizes structured trajectories (output of trajectory structure layer). There are 1826 stops (visualized as points) and 1849 moves (as lines between points).
 One inherent advantage of our abstraction process is the decrease in the data size as trajectories are abstracted to higher-level models. To quantify this, we compute the semantic abstraction rate as log 2 ( # GPS # dataComputed ), where # GPS is the number of the initial GPS records and # dataComputed is the number of computed instances, that is, the number of trajectories and episodes (stops and moves). For example, we observe that for the taxi dataset, 3,347,036 GPS records are abstracted to 1,145 structured trajectories with 1,874 stops and 2,925 moves. Figure 20 shows the abstraction results for the four datasets.

We also observe that, as expected, the abstraction rate is proportional to the GPS sampling frequency. From left to right in Figure 20, the GPS recording frequency is respectively one record per 40 seconds (on average), 30 seconds, 30 seconds, and one second. We also see that the higher recording frequency is (like taxi data), the higher the compression (i.e., the higher abstraction rate).

Similarly, through trajectory episode (stop/move) computation over smartphone data, the 7.3M GPS records are abstracted as 46,958 moves and 52,497 stops of 23,188 daily trajectories. Figure 21 shows the log-log plot of the length (i.e., the number of GPS records) of extracted trajectories, stops, and moves. It shows that most of moves/trajectories have similar patterns, consisting of a large number of GPS records (say more than 1000), while the number of GPS records in a stop is usually between 100 and 500, with some between 10 and 100, and a few unusual cases between 500 and 1000. In addition, Figure 22 shows the details of stops and moves for the selected 1,077 daily trajectories of 6 users (called  X  X round-truth users  X ). Note that the number of GPS records for each user in Figure 22 is divided by 100 for better representation purposes. The figure brings out the storage compression achievement.
 As mentioned earlier, the coefficient for the speed threshold plays a role in determining the number of stop and move episodes and is dependent on several factors (vehicle type, road type, etc.). Results presented in Figure 20 have used the same coefficient of speed threshold (  X  1 =  X  2 =  X  = 0 . 3) and the same minimal stop duration (  X  = 15 mins ) to provide a comparative picture of the abstraction. However, these parameters affect the number of trajectory episodes and need to be calibrated accordingly.

We analyzed the sensitivity of  X  and  X  in identifying stop episodes. Figure 23 shows the number of stops we get with different  X  and  X  for the Athens truck data. With higher  X  (from five minutes to one hour), the number of stops decreases from 2601 to about 633 when given  X  = 0 . 15; with higher  X  (from 0.15 to 0.9), the number of stops goes up and then saturates, because stops computed with higher coefficient  X  (i.e., higher speed ) usually have longer duration. Therefore the number of stops decreases as some stops join together. Nevertheless, we observe that the total percentage of time duration for stops always increases when the minimal stop time  X  becomes smaller or the speed threshold  X  increases (see Figure 24). We are investigating means to dynamically calibrate these parameters in trajectory computation.

In the semantic line annotation layer, a global map matching is applied on the move episodes of trajectories in our experiments wherever road network data is available (for vehicle and people trajectories). To measure the efficiency of our approach, we perform a sensitivity analysis of the algorithm using Krumm X  X  benchmark dataset. We first tune the global view radius ( R ) and the kernel width (  X  ) for the input data source. Figure 25 shows the effect of various  X  and R on matching accuracy. We observe that small values of R ( = 2) and  X  ( = 0.5 R ) produce very high matching accuracy, similar to the recent results on this dataset [Newson and Krumm 2009], confirming the efficiency of the algorithm. Nevertheless, the focus of our semantic line annotation is not only on the map matching accuracy, but also on the determination of transportation modes in heterogeneous trajectories. In order to validate the annotated vehicle trajectories without real ground-truth tags, we compute additional statistics. We check if these statistical estimates are relevant with respect to our knowledge of the areas where the trajectories are collected.
We first check the algorithm that annotates trajectories with regions on the dataset of taxis of Lausanne. More precisely, we check the land-use category that our algorithm (the semantic region annotation layer) found for each stop and move, and for each trajectory. The lausanne land-use map has 4 generic categories and 17 subcategories (refer to Figure 9). Figure 26 shows the distribution we get for the trajectories, the stops and the moves. We observe that most of the taxi GPS records are in building areas (1.2) and transportation areas (1.3), nearly 80% GPS points belonging, to these categories. In terms of statistical validation, this is generally consistent with typical land-use categories covered by taxi trajectories, given the available categories in Lausanne (see the first column in Figure 26).

Second, we analyze the results of the HMM-based semantic point annotation algorithm for enriching the set of trajectories of private cars in Milan with infor-mation about the POIs. Milan POIs are classified in 5 generic categories: services , food , personal-item , home-item , and other . The algorithm infers the most probable POI category for each stop. In Figure 27 (second column), we observe that most of the stops (about 56.3%) belong to home-item (e.g., furniture) with the next one being personal-item (e.g., clothing) (about 24.2%). This corresponds to the facts that Milan is a well-known center of design and shopping in Europe, and people tend to go shopping for home items with a car for two reasons: POIs of kind home-item are more likely to be further from somebody X  X  home than POIs of kind personal-item that are everywhere in Milan; a car is useful for bringing back home items that are usually heavier and bulkier than personal items. Conversely, cars stop less frequently in POIs of kind services and food , usually attended on foot due to their proximity to home. Figure 27 (last column) also shows the trajectory category defined as: the category of T is the category which has the maximum stop time duration (see Eq. (9)), which can be further applied as semantic trajectory classification. For example, if most of the stops of a trajectory are in home-item , then this trajectory belongs to the home-item category. Note that the distribution of trajectory categories is statistically similar to the dis-tribution of stop categories (see Figure 27). This is because the dataset has only 1.7 stops 12 per trajectory on an average, thereby resulting in a similar distribution. This is coincidental and depends largely on the trajectory dataset. For a small subset of people trajectories from smartphones in Lausanne (6 persons) we collected some ground truth for validating semantic people trajectories. The ground truth we got consists of: (1) the semantic places where the persons live and where they work, (2) knowledge about their hobbies, and (3) the transportation networks (e.g., bus lines and metro lines) to validate our inference of transportation modes.

In order to validate the algorithm that annotates the stop episodes with regions, we computed with our semantic region annotation layer the land-use category for each stop. Then we computed for each trajectory its land-use coverage as the category where the person stops the most (with respect to the total duration of the stops). Figure 28 shows for each person the distribution of the land-use category of his/her trajectories (with the identifiers of the top-5 categories). From the results of the semantic region annotation layer on these trajectories, we observe that most of the persons are staying in building areas (1.2) which corroborates with the ground truth. Moreover, we find that user 3 has a relatively higher percentage of location records in wooded area (3.12) . This is because his accommodation is in the forested place close to the Geneva lake. user 4 X  X  home is close to a commercial center area (1.1) where he does a lot of shopping. User 2 does hiking and skiing a lot in forest (3.10) in contrast with the other persons. This corroborates with our ground-truth knowledge of their hobbies.

In order to validate the algorithms that annotate the move episodes, we computed with our semantic line annotation layer the route and the transportation means for each move. This layer uses the underlying network information obtained through our map matching algorithm on the moves, along with the velocity/acceleration distribution for each road segment in order to determine the transportation mode. As an example, Figure 29 shows a typical home-office trip of user 4, who walked a few blocks from home, then took the metro line, and finally walked from the metro stop to his office: subfigure (a) shows the original GPS trace; (b) displays the initial map-matched road segments for these GPS points; (c) further infers the corresponding different transportation modes such as metro or walk ; finally (d) summarizes the mobility trace in terms of sequences of roads that are stored in the semantic trajectory store.

User 4 does not take always the same transportation mode (metro) for going to his office; some days he takes the bus, while on sunny days he bikes or even walks. For instance, in Figure 31, the left subfigure (a) shows an example of using bike for moving between home and office; while in subfigure (b) the user took the bus , with walk during the beginning and ending parts of the trip. Note that the routes taken for bus and bike are different. Based on this inference, from his 161 daily trajectories (from home to office and back home), we computed 186 home-office (or office-home ) moves, and inferred 66 bike , 39 metro , 49 bus , and 32 walk annotations respectively.
We acknowledge that a user feedback-driven validation of all such home-office moves would have been ideal. However, given the lack of such data, we resort to indirect means of validation. To validate such home-office annotation like Figure 29 and Figure 31, we extract the real ground truth of bus lines and metro lines, as well as the pedestrian areas around home and office (see Figure 30). We observe the correctness of such anno-tation, that is, the consistency of  X  X us33 X / X  X etro1 X  with respect to the transportation modes of taking bus/metro, as well as the pedestrian walk for reaching and leaving bus/metro stops.
 We achieve very high data abstraction by computing semantic trajectories from the raw mobility data. Taking the region-based annotation for example, the resultant trajec-tory representation achieves almost 99.7% storage compression (e.g., 3M GPS records require only 8,385 cells to trajectory data abstraction).

Additionally, we analyze the runtime performance of our platform. Figure 32 sum-marizes the latency distribution of our platform for processing phone trajectories. We observe that computation and annotation latencies are much lower (both map match-ing and land-use) than the storing time (writing the results into our semantic trajec-tory store). For all of the six users, the average time for computing episodes, storing episodes, map matching annotation, storing matched results, land-use annotation for a daily trajectory are respectively 0.008, 3.959, 0.162, 0.292, and 0.088 seconds. Latency distributions for vehicle trajectories are also similar. The runtime performance of our computation and annotation algorithms is linear with respect to the number of objects. Therefore, it is efficient and robust with high scalability. The trajectory interface that we developed provides the query and visualization func-tionality through a Web browser, and showcases the following capabilities.  X  Spatio-Semantic Trajectories . This shows the multiple levels of trajectory data ab-straction: raw GPS tracks, spatio-temporal trajectories (exploiting space/time gaps), structured trajectories (e.g., stops/moves), and semantic trajectories (e.g., home-office-supermarket-home).
  X  Semantic Places . This annotates the trajectories with diverse geographic resources -land-use, road network, and Point Of interest (POI) data.  X  User Interactions . This provides a friendly Web interface for querying and visualizing trajectories (e.g., daily tracks) at various abstraction levels.  X  Analytics Results . This highlights statistical analytics results of semantic trajecto-ries, for example, the average speed when the user is moving, land-use distribution where the user has stopped, the most frequent transportation modes, etc. In this article, we designed and implemented a semantic model and platform for an-alyzing trajectories of various kinds of moving objects. Our hybrid spatio-temporal and semantic trajectory model encapsulates both the geometry and semantics of mo-bility data, supporting several levels of abstraction. Our platform (with computation and annotation functionalities) supports progressive construction of different levels of trajectories, and the enrichement of trajectory semantics from multiple 3rd-party semantic sources. Through experimental analysis of real-life GPS feeds, we evaluated how our model and platform achieve the purpose of structural and semantic enrichment of trajectories. Our experiments with various vehicle and people trajectories confirmed the capability of our system to perform well over trajectories of varying data qualities and movement patterns.

An important contribution of our approach is to offer a consistent framework that aims at covering the requirements of a variety of applications, from those that are only interested in the raw data to those looking for very specific semantic enrichments. Providing a set of well-defined concepts that can handle different types of trajectories (including semantic trajectories), and the transitions in between (thanks to the tools provided by our layered framework), is one of the strongest points of our approach and a real innovation with respect to works in the literature.

Our ongoing and future research focus is on two main aspects: (1) to build a real-time platform for constructing semantic trajectories for streaming movement data, where the computation and annotation algorithms should be more efficient and even applicable to a distributed context; (2) to augment GPS data with additional sensors (e.g., accelerometer) data to construct a richer (and more complete) inference of daily movement behaviors of people, for example, using GPS for analyzing outdoor movement and accelerometer for studying indoor activities.

