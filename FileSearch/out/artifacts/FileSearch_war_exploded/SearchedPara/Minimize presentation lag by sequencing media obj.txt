 Feng-Cheng Lin, Chien-Yin Lai, Jen-Shin Hong * 1. Introduction
For years there has been much interest in automatically composing multimedia presentations from digital repositories. In particular, given the proliferation of communication and multimedia technologies, a significant example application is the automatic construction of customized multimedia news programs [72] . It is expected that in the future one important news delivery paradigm will be to allow personalized on-demand news programs, streaming at the time of the user X  X  choice, and with content that specifically matches the user X  X  interests. In such a scenario, the multimedia news program must be com-posed automatically from daily news archives based on the user X  X  profiles. Other applications requiring auto-assembled mul-timedia presentations include query result presentations from a typical multimedia database, adaptive educational lectures, personalized TV-program delivery services, and many others [38,39,72,78,84,101,113] .

Auto-assembled multimedia presentations fit particular well with applications using a portable device as the client de-ing more multimedia compatible. There is a demand to deliver multimedia information to such portable devices. For example, various standardized protocols such as Multimedia Messaging Service (MMS) have been proposed to send/receive multimedia messages with mobile devices. A subset of the W3C SMIL has been proposed for use in the MMS player (i.e.,  X  X  X MIL in MMS X , http://www.w3.org/AudioVideo/ ). MMS can be used by companies to send MMS messages (e.g., weather continuously-played multimedia presentation is more suitable for hand-held portable devices, since their input interfaces sequence of small-size chain-based TV-like presentations is favorable [5] . Quite often, these devices are operated when the sentations. For example, beyond the traditional click-and-play interface, when dealing with image files, Microsoft  X  X  X ile
Manager X  also provides a  X  X  X lideshow X  interface that automatically presents the images sequentially. Many online photo al-bum services also provide such slideshow-like functionalities.

In auto-assembled multimedia presentations from digital libraries, there are often multiple  X  X  X nconstrained X  objects for which the relative presentation orders in relation to other objects are not pre-defined. There are also  X  X  X emporally-con-strained X  objects for which inter-object temporal relations are specified. Over the past few years, many temporal formatting techniques have been proposed with the goal of automatically scheduling the media objects in a multimedia document to satisfy the temporal constraints. Most of these automatic temporal formatters considered variations of  X  X  X nterval-based tem-the temporal formatting issues for multimedia documents dynamically generated by the on-the-fly composing of media ob-jects retrieved from multimedia digital libraries. In such a case, the exact order of the media objects might not be rigidly specified. How to schedule the objects to possibly provide better quality of service (QOS) deserves investigation.
Since there is a delay between the point when the user clicks on a presentation and when it is played, users often expe-assembled multimedia presentations through high-delay environments, an important concern for optimally scheduling the objects is the total presentation lag experienced by the user during the presentation. To cope with the presentation delay problem, a commonly used strategy is to  X  X  X refetch X  media objects before their presentation due time. Media streaming tech-nology is an example application of this prefetch technology that aims to reduce the presentation lag of a single time-based media object. Streaming systems rely on buffering at the client to protect against the random packet delays in a delay-prone nique is generally only useful as long as the mean data arrival rate at the client remains above the playback rate such that overbuffering can be achieved. If the data rate offered by the network is below that the playback rate, the buffer will soon many real-life digital archives, most objects cannot be presented with streaming technology.

Essentially, due to the transmission delays of the objects, there are playback idle times between the expected playback schedule of the objects and their actual playback time. This paper refers to the ratio between the total playback idle time to the other extreme, for a media streaming service through a low-delay network, the only playback idle time is the initial tiple objects ( Fig. 1 c), the playback idle rate is between zero (low presentation lag) and one (high presentation lag).
To the best of our knowledge, not much has been done in the past to investigate the impact of object ordering on the playback idle rate for auto-assembled multimedia presentations. In this study, we are the first to explore methodologies to obtain optimal solutions or near-optimal approximations of problems of this kind. To solve the addressed problems, we adapted techniques in two-machine flowshop scheduling research, with which well-grounded technologies have been developed in past decades for optimizing certain manufacturing processes. Different problem settings for online multimedia applications were mapped to potential flowshop scheduling problem counterparts. A prototype system was implemented to evaluate the performance of the proposed techniques.

This paper is organized as follows. Section 2 contains an extensive review of research related to various aspects of the issues discussed in this study. In Section 3 , we illustrate the use of techniques developed in flowshop scheduling studies for solving the unconstrained problem. Section 4 discusses different problem settings for applications with various con-straints. Section 5 presents a prototype implementation for a playback system incorporating certain scheduling strategies developed in this paper. Numerical simulations and real-life experiments using wireless networks will be presented. Finally,
Section 6 concludes the study and provides future research directions. 2. Background and related work
A multimedia document for a presentation includes various temporal relations among the media objects. To present a set reviews various common temporal constraints in auto-assembled multimedia presentations. Conventional methodologies for automatic temporal formatting will then be discussed. We are interested in investigating whether existing approaches fit well with real-life applications using auto-assembled presentations delivered through bandwidth-limited communication channels. 2.1. Common temporal constraints for auto-assembled presentations
Many models for representing temporal specifications for multimedia presentations have been proposed. The most com-mon of these include hard timing relationship-based, interval-based, control flow-based, state-based, and point-based ap-proaches [13,16] . While manually programmed presentations usually have detailed temporal relations between objects with auto-assembled presentations are limited. Previous studies on automatic presentation assembly considered only coarse-grained interval-based temporal relations between objects. For example, Hakkoymaz et al. [39] considered sequential , are mainly based on interval-based temporal relations [4,70,18] for expressing time information. These studies assumed that the temporal relations were annotated a priori, by either manual annotation or certain automatic techniques. In real-life since the desired presentation style is typically not the major concern of most content experts at the data entry stage.
Other than annotating the inter-object temporal relations manually, a more conceivable approach for assigning the inter-object temporal constraints in an auto-assembled presentation is to automatically map certain structure/semantic attributes of the objects into corresponding coarse-grained presentation constraints (e.g. [69,100,101,84] ). Such methodologies can be used to automatically specify the inter-object temporal relations so that the final presentation is more semantically coher-ent. With such approaches, the variety and granularity of the inter-object temporal relations are strongly contingent on the programmed multimedia presentation. In such a context, the commonly found temporal relations can be classified into three tiguity constraints are widely considered in conventional multimedia temporal formatting studies. The contiguity and pre-cedence constraints are two different ways of sequentially ordering two objects. The precedence constraint plays a prominent part in auto-assembled multimedia presentations in which the temporal constraints are established based on the semantic/structured attributes of objects. For example, in an educational lecture video of a math course, a video object illustrating the  X  X  X roof X  of a theorem must be preceded (but not necessarily immediately) by the video defining the theorem present between the two objects. We refer to this kind of temporal relation as a  X  X  X recedence constraint X  (here we adopt the terminology used in the conventional scheduling research community [14] ). We will elaborate on these temporal constraints in the following. Beyond the above three categories of temporal constraints, an auto-assembled presentation often includes a bag of unconstrained objects in which no temporal relations are specified. 2.1.1. Concurrency constraints
A concurrency constraint requires that two objects be presented in parallel. Their exact positions in the presentation timeline overlap. The equal and co-start in Allen X  X  work [4] belongs to this category. A previous study [106] shows that hu-man perception of media synchronization is rather sensitive. For example, a skew in audio and video playout beyond 160 ms or a skew for pointer synchronization beyond 1250 ms is considered annoying to humans. Therefore, objects related to each other by a concurrency constraint should be scheduled carefully to prevent possible out-of-sync conditions in a delay-prone environment. 2.1.2. Contiguity constraints
A contiguity constraint requires that two objects be played immediately next to each other. No other object is allowed to be present in between. The meet relation in Allen X  X  work belongs to this category. As an example scenario, in a presentation in between. However, in such a case, the delay between two objects subject to a contiguity constraint does not ruin the coherence of the presentation. 2.1.3. Precedence constraints
A precedence constraint is a partial order of objects. It requires that one object precede another without precluding other objects from coming between the two. While both a precedence constraint and contiguity constraint define the order of suc-m , m 2 , and m 3 , with m 1 ? m 2 ( m 1 precedes m 2 ), and m satisfy the above two precedence constraints.

In summary, an auto-assembled multimedia presentation often includes unconstrained objects and temporally-con-categories of constraints require quite different algorithms to optimize the sequences in a presentation. 2.2. Temporal formatting for auto-assembled presentations
Very few studies have been conducted that formally explore the optimization of media objects specifically for auto-assembled presentations. Hakkoymaz and  X zsoyoglu [38] , and Hakkoymaz et al. [39] applied a constraint-driven technique to optimize the playback order of the extracted objects from multimedia databases. The temporal relations considered in-sired presentation X  and the  X  X  X aximum number of concurrently playing objects allowed X . The issue of the transmission delay was not considered. On the other hand, many other studies have developed various general temporal formatters for sched-uling objects in ordinary human-authored multimedia documents. The following addresses various relevant studies in detail. 2.2.1. General temporal formatters for multimedia documents
In a typical multimedia presentation system, a temporal formatter [16] is used to parse the given temporal specifications of objects to organize the temporal layout of the document. Depending on the temporal specification models and the attri-butes of the media objects, different methodologies have been proposed for searching for a possibly optimal schedule that is guaranteed to satisfy the temporal constraints in runtime. Buchanan and Zellweger [15] proposed techniques for computing some internal events. The stretchable duration between two adjacent events is represented by a triple of three values (min-imum, optimum, and maximum duration). The inter-object temporal relationships are represented using a difference con-straint scheme. An integer programming technique (simplex algorithm) is applied in the automatic scheduler to schedule the events. Candan et al. [17] proposed a similar approach where the temporal triple is replaced by a range for the length of an object, along with an optimal value and a set of preferred durations. A more computationally efficient algorithm based on a  X  X  X hortest-path algorithm X  with an  X  X  X ncremental constraint relaxation X  technique was developed in their study. Kim and meet , and co-occur . A linear programming optimization technique was applied to find an optimal schedule that minimizes time model, Bachelet et al. [6] proposed a more computation efficient algorithm by mapping the optimization problem into a  X  X  X inimum-cost flow problem X  on temporal graphs. More temporal relationships, such as before , start , during are provided in the problem formulations. There are a variety of other approaches, including but not limited to Modeus by Jourdan et al. to the scheduling problem in multimedia presentations using a constraint network to deal with uncertain durations in syn-chronized presentations.

To illustrate the major differences between our work and these existing studies, in the following we highlight two issues, namely the temporal relations and the media transmission delays that we consider critical to the scheduling of auto-assem-bled presentations in high-delay network environments. 2.2.1.1. Issue of temporal relations. As mentioned, a typical auto-assembled multimedia presentation includes both uncon-strained objects and temporally-constrained objects with concurrency, contiguity and/or precedence constraints. Most exist-optimal schedule, which satisfies the temporal constraints, for online objects in a high-delay network environment, in order to minimize the total presentation lag. 2.2.1.2. Issue of transmission delay. Most existing general temporal formatter techniques are applicable to scenarios where a slight transmission delay) in synchronized multimedia presentations. Our work explores the optimization techniques for the ordering of media objects that reside on a remote server in environments where the end-to-end bandwidth between the the media delay of an object is considered to be a unpredictable behavior, which is managed in the  X  X  X un-time scheduler X . In the literature, various run-time strategies, such as playback suspension/blocking, presentation rate or duration alteration, packet dropping, repeating frames, or showing only key frames, have been proposed to lessen possible out-of-sync condi-tions in a presentation involving objects with concurrency constraints [105,89,15,58,65] . However, for cases where the end-to-end available network is considerably limited, the presentation is often chopped into a sequence of disrupted seg-ments with high presentation lag. How to minimize the total presentation lag in such a case was not addressed in these studies. 2.2.2. Prefetch techniques
One common approach to coping with the transmission delay is the use of prefetch techniques [17,96,49,10,53 X  to coordinate the preloading of the objects. The major focus of these existing studies on prefetch techniques was to find a mined. In an auto-assembled multimedia presentation, the object ordering is however not completely pre-determined. For scenarios where the network bandwidth is very limited, even a  X  X  X est-effort X  prefetch strategy may fail to prevent the pre-sentation lag for a given presentation. Our work focuses on techniques for finding an optimal solution for the ordering of objects in a prefetch-enabled setting, in order to minimize the total presentation lag.

To sum up, in Table 1 , we list the main differences between our study and existing related studies. The objective of our work is to find the best ordering of the media objects to minimize the total presentation lag for an auto-assembled presen-tation delivered through a high-delay network. At run-time, the prefetching is considered to be performed in a best-effort manner. We attempt to answer the question:  X  X  X iven a set of unconstrained objects and temporally-constrained objects with tation lag perceived in a client is minimized? X  To accomplish this, we adapted techniques from two-machine flowshop scheduling research on optimizing certain manufacture processes. The study by Allahverdi and Al-Anzi [1] also applied two-machine flowshop scheduling techniques for multimedia object scheduling problems. The aim is to schedule the data-base access for a set of objects with pre-determined concurrency and/or contiguity constraints so as to avoid an out-of-syn-chronization state. In their study, no consideration was given to unconstrained objects. In addition, they assumed that the end-to-end delay was solely attributable to the database processing time. In contrast, our study assumes that the data down-load time dominates the end-to-end delay.

In the following section, we first investigate a sample case where only unconstrained objects are to be ordered. The case is used to illustrate the process for mapping the addressed problem into the corresponding two-machine flowshop problem. 3. Unconstrained sequence optimization using Johnson X  X  rule
In this demonstration case, we assumed that the end-to-end bandwidth was constant. In addition, we did not take into account the buffer limitation in the client for caching the prefetched media objects. We introduce the following notations that will be referenced in the problem formulations throughout the paper (refer to Fig. 2 ).
 Notation
M ={ m 1 , m 2 , ... , m n } a set with n media objects m i a media objects in M S a sequence of a media set S
M a sequence of M a i download time of m i b i playback time of m i
C i completion time (flow time) of the playback of m i idle i playback idle time for a media object m i
C max maximum completion time of a sequence S M ( makespan ) d i due date of object m i
T i tardiness for object m i , T i = max{ C i d i ,0}
T max maximum tardiness (max{ T i }, for 1 5 i 5 n )
P w i C i total weighted flow time P
T i total tardiness Lex lexicographic bi-criteria optimization The total download time of a sequence S M is given as The total playback idle time is given as
The objective is to find a sequence S M that minimizes T idle ments in Table 2 , it appears that the formulation of this problem resembles that of a  X  X  X wo-machine flowshop problem X  in conventional scheduling research. Reviews of the two-machine flowshop problem can be found in Reisman et al. [95] , Hejazi problem, a set of independent jobs are scheduled to be processed on two different machines. Every job has a span of pro-job completion time C max (known as makespan in [34] ).

A polynomial-time solution for the un-constrained two-machine flowshop problem (denoted as an F [34] ) was proposed by Johnson [50] using a priority-based ordering algorithm that yields an optimal schedule. Intuitively, to minimize the playback idle time on a client, the media object with the shortest transmission time is favored to be down-are finished. We now formalize this intuition in the following.

First, we partition the media objects in M into two sets. Let A be the set of objects with a ler than playback time), and B be the set of objects with a non-decreasing a j values, and then all the objects in set B by non-increasing b cedure of Johnson X  X  rule using an example case with five media objects to be ordered.

In the evaluation section, we will present real-life experiments to compare the playback idle rates between an optimal sequence by Johnson X  X  rule and randomly generated sequences. Overall, the results showed that a significant reduction in presentation lag could be achieved if the media ordering in a multimedia document was optimized. While Johnson X  X  rule can be directly applied in unconstrained problems, there are many other scenarios with different constraints that require more sophisticated algorithms to compute or approximate the optimal sequences. Much research has been devoted to the use of complexity theory to classify a scheduling problem as  X  X  X olynomially solvable X  or  X  X  X P-hard X . Two-machine flow-shop problems with different constraints are in general NP-hard [64,14] ; for details of the complexity theory, refer to the books by Garey and Johnson [28] , and Papadimitriou [85] . In the following section, we discuss a number of common scenar-ios for applications using auto-assembled multimedia presentations. The possible mapping of each problem to correspond-ing two-machine flowshop counterparts will be discussed. 4. Constrained sequence optimization
This section discusses various common constraints in online multimedia applications, including inter-object temporal tations used to describe the problem settings, we use the classification scheme for flowshop scheduling problems proposed by Lawler et al. [61] . This scheme allows the presentation of a wide spectrum of two-machine flowshop problems under the dia applications addressed in this study. (a) Job characteristics ( b ) : In a manufacturing process, a job in a flowshop scheduling problem may often be given with certain pre-determined characteristics, such as release dates, due dates, precedence constraints, and grouping. When jobs are subjected to certain release dates before which they cannot be started, the string  X  X  r subject to certain due date constraints before which they must be completed, the string  X  X  d chain, a tree, or an arbitrary graph. In some two-machine flowshop problems, the start-time lag and stop-time lag of a job are enforced (e.g., [73] ). In such cases, a job may not be started or completed on machine two until at least a certain time has elapsed since starting (completing) the job on machine-one. (b) Optimality criterion ( c ) : In flowshop scheduling problems, C due date of a job. The tardiness of the job J i refers to the time past its due date d objective function for a problem is often a linear combination of the above ingredients. In the  X  X  F the optimization criterion is placed in the c position. As an example, a two-machine flowshop problem aiming to mini-mize the makespan , C max , for jobs with a chain-like precedence constraint is denoted as an  X  X  F
A number of the two-machine flowshop problems are shown to be polynomial solvable while many others are proven to be NP-hard. To obtain the exact solution of an NP-hard scheduling problem, an enumerative algorithm is usually applied. The two major types of enumerative algorithms are  X  X  X ranch and bound X  (denoted as B&amp;B hereafter in this paper) and  X  X  X ynamic programming X  [11,12,27] . For NP-hard problems, heuristic methods [92,99] are often used (especially at the root node) to generate computationally efficient approximate solutions. For certain specific problems, it is sometimes possible to carry out a theoretical analysis of the heuristic performance [40]. In the following, we discuss a number of problem settings for applications using auto-assembled presentations in which different constraints and objectives are applied. The complexity and solutions for their possible counterpart problems in two-machine flowshop research will be addressed. 4.1. Temporal constraints
As described in Section 2 , the major categories of inter-object temporal constrains in a typical auto-assembled presenta-tion include contiguity, concurrency, and precedence constraints. The notations and the corresponding download/playback scheduling studies, a contiguity relation is commonly denoted as an arrow between two objects in a schematic drawing. This causes confusion with the precedence constraint, which is denoted in the same way in conventional scheduling research. To prevent such confusion, in this paper the contiguity constraint is represented as (case 3 in Table 4 ). 4.1.1. Contiguity constraints tiguity constraints can be concatenated as an  X  X  X rdered cluster X . The counterpart two-machine flowshop problem is one in these composite objects can be computed using the algorithm developed by Mitten [73] .

For a streaming-based media object, a data chunk of the size of the playout buffer can be considered as a  X  X  X layback unit X  object can then be considered a combination of sub-objects (i.e., the playback units) subject to a series of contiguity con-a case, the presentation time and download time are identical to that of a non-streaming object. 4.1.2. Concurrency constraints object be started and presented simultaneously with the first. When delivering through high-delay networks, both objects should be downloaded before their presentation to ensure synchronization. In such a case, the two constrained objects, say m p and m q , can be considered as a composite object with an equivalent processing time given as sum{ a (case 4 in Table 4 ). 4.1.3. Precedence constraints
If two media objects, say m p and m q , are temporally related by a precedence constraint (case 5 in Table 4 , denoted as m p ? m q ), m p must precede m q but it is not necessary for it to be immediately next to m interpretations of the precedence constraint in the flowshop problems [107,32] . Assuming that the job J the first interpretation, J k cannot be started on machine one until J problem for minimizing makespan with jobs subject to such a precedence constraint has been shown to be NP-hard [64,63] .
In the second interpretation, J k cannot be started on the first machine or the second machine unless J machine. However, J k can start on the first machine before J sidered in multimedia delivery/presentation applications refers to the second interpretation. By concatenating the con-straints, the overall precedence constraints for a multimedia presentation form a general graph. The two-machine flowshop problem for minimizing makespan in applications with arbitrary precedence constraints ( F proven to be NP-hard [76] . However, a number of simplified versions of the precedence constraints, as described below, can be solved in polynomial time. 4.1.3.1. Chains-based precedence constraints. For a multimedia document where only rather sparse object precedence rela-tions are specified, the overall precedence constraints are concatenated into a number of disjointed chains. The counterpart problem in the two-machine flowshop studies is the F 2 j chains j C 4.1.3.2. Tree-based precedence constraints. This situation occurs when the precedence constrains can be concatenated into an in-tree or out-tree. The counterpart in the two-machine flowshop problem is the F lem is actually a special case of the F 2 j sp -graph j C scribed below. 4.1.3.3. sp-Graph-based precedence constraints. This situation occurs when the precedence constrains can be assembled into a series X  X arallel graph ( sp-graph ). The counterpart in the two-machine flowshop problem is the F number of polynomial-time solutions for this problem have been proposed by Monma [75] , Sidney [103] , Monma and Sidney [77] , and Gordon and Shafransky [33] . 4.1.3.4. Arbitrary precedence constraints. In a multimedia document with many precedence relations between objects, the overall precedence constraint could be in the form of a general graph. The counterpart problem is the F which was proven to be NP-hard by Monma [76] . Hariri and Potts [43] and McMahon and Lim [71] developed a variety of branch and bound algorithms for finding the optimal sequence. 4.2. Clustered media objects tributing them throughout the presentation. Often the exact object ordering in the group might not be critical. The sched-that are processed on the same machine must be processed jointly [41] . A polynomial-time solution for this problem has been proposed by Baker [9] . In the first phase, objects in each group are ordered using Johnson X  X  rule. The equivalent start-lags and stop-lags for the groups are computed based on the algorithm proposed by Kurisu [59] and Baker [9] .Asin the contiguity case described above, all the groups are then scheduled using the algorithm developed by Mitten [73] . Sek-iguchi [102] also proposed a polynomial-time solution for the group scheduling problem where a series X  X arallel precedence constraint is given. In multimedia applications, the group setup time addressed in conventional flowshop scheduling prob-lems with group constraints should be ignored. 4.3. Objects with preferred presentation priorities
In many scenarios, the preferred priorities for presenting the objects may be pre-determined at the server side according to specific measurements of the relative  X  X  X egree of importance X  of the objects. For example, a typical search engine often provide explicit meta-information about the degree of importance of the object archived. For example, the  X  X  X evel of impor-tance X  for an object in an educational repository based on the IEEE LOM metadata often is given during the annotation stage. to their degree-of-importance or relevancy, so important information is presented first. In a high-delay network environ-ment, however, we have to consider the total lag time as a major QoS factor. The preferred priorities and transmission dura-We elaborate on this issue below.

The first approach for considering the preferred priorities of objects is to use the summation of the weighted completion main strategy for cutting inventory costs. The two-machine flowshop problem with an objective function of non-weighted solution available for the problem of the weighted version, the F priorities of objects in the optimization is to use a  X  X  X i-criteria X  objective function that considers the makespan ( C object ordering problem with preferred object priorities, as described below.
 Case 1: a C max + b P w i C i The objective function is a weighted summation of C max and with the F 2 k a C max + b P C i problem (where there is no weight associated with flow time ) include Daniel and Chambers
Lin and Wu [66] . However, we found no study that have investigated the F Case 2: Lex ( P w i C i / C max )
In the secondcase,the strategyis to first seek all thesequencesin which C
F k Lex ( strategiestosolvetheproblembyapproximationornumericalschemes,includingRajendran [91] ,Sivrikaya-SerifogluandUlu-
There are no previous studies proposing solutions for the problem when the completion time is weighted. 4.4. Objects with due date constraints
In many scenarios an object might have a pre-assigned due date. For example, in commercial web sites providing online
Such a constraint is referred to in conventional scheduling research as a job due date constraint, denoted as d major approaches to formulate this problem:
Case 1: a C max + b T max The C max and the maximum tardiness, given as T sidered in the objective function to measure the optimality of a sequence. Lenstra et al. [64] proved that F
NP-hard. Daniel and Chambers [25] , Chakravarthy and Rajendran [20] , and Allahverdi [3] proposed various heuristic algo-rithms for approximating the solution of this bi-criteria problem.
 Case 2: a C max + b P T i The C max and the total tardiness of all jobs, given as in the objective function. Lenstra et al. [64] proved that F this bi-criteria problem. 4.5. Client-side buffer constraints
When small devices, such as a PDA, are used for playback, the maximum allowed buffer size for keeping the prefetched ob-jectsneedstobeconsidered.Withrespecttotheplayer-sidebufferconstraint,wedidnotfindanyexistingflowshopscheduling studies that have addressed this problem. A few existing studies have been conducted to solve flowshop problems where there chine.For a case withoutthis buffer limitation,the optimalsolution can be obtainedbyusing Johnson X  X  rule.For a case inwhich onlyonejobisallowedtobekeptintheintermediatestoragebuffer,GilmoreandGomory [31] proposedapolynomialalgorithm forcomputingtheoptimalsolution.Otherthantheabovetwocases,buffer-constrainedmachineflowshopproblemshavebeen shown to be strongly NP-hard by Papadimitriou and Kanellakis [86] . To obtain the exact solution of this NP-hard scheduling problemwitha finite intermediate job-numberbuffer, a numberof strategies have been proposed [26] . Inthese flowshopstud-ies,the X  X  X umberofjobs X  X llowedtobekeptinthebufferarefixedthroughouttheprocess.Intheonlinemultimediaapplications buffersize,thenumberofobjectsallowedinthebufferactuallydependsonthefilesizesofthecurrentplayingobjectsandother unscheduledobjects. Since, under an environmentwith a constant transmission rate, the download time of an objectis propor-dressed buffer-constrained problem by F 2 j a i -buffer j C proposed a branch andbound algorithm forthe problemas well as forthe F 2 j a precedence constraint is further enforced beyond the buffer constraints. 4.6. Network bandwidth variations
In the above cases, we assumed that the end-to-end transmission rate was deterministic. This assumption can be re-garded as an acceptable approximation for applications in which the end-to-end transmission delay is mainly subject to the last mile bottleneck without significant bandwidth variations. However, in reality, many Internet applications only pro-vide best-effort data delivery and cannot guarantee a rather consistent transmission rate during a presentation session. In such cases, the stochastic variation in the network transmission rate (or the download time of a media object) should be considered in the sequence optimization process. Stochastic behaviors also exist in industrial systems. These are often sub-ject to random events, such as machine failure and operator unavailability, which may disturb their working process.
In the literature, stochastic flowshop problems deal with cases in which the processing time of jobs on each machine is a random variable. Overall, stochastic flowshop scheduling problems are not all that easy. Most of the existing studies focus onproblemswherethejobprocessingtimeisarandomvariablefollowingan X  X  X xponentialdistribution X .Theobjectiveistofind a schedule that minimizes the expected makespan E ( C max probability density function of the download time for a media object should resemble a truncated normal distribution or an
Erlang distribution with high shape parameters. Two-machine problems with these two distributions have never been solved. 4.7. Summary
We give a summary in Table 5 for different settings for online multimedia applications, with their two-machine sched-uling problem counterparts. To the best of our knowledge, problems with normal or Erlang-distributed stochastic download times, the bi-criteria problems of a C max + b P w i C i , Lex ( buffer constraint, have never been solved and deserve further study.

To apply the theory to real-life media scheduling problems, the anticipated presentation time and download time of a on the appropriate metadata provided in the digital libraries. On the other hand, the anticipated presentation time can only be estimated by the file size of the object and the average end-to-end transmission rate measured during runtime. 5. Prototype implementation and initial evaluations
To demonstrate the effectiveness of the proposed techniques in obtaining optimal or near-optimal sequences to reduce presentation lag, we implemented a prototype system and conducted several numerical simulations or real-life experiments for different problem settings. Our current implementation followed the system architecture depicted in Fig. 4 . We discuss system component details in the following.
 (1) Distributed object archives . The media object archive manages the objects and provides mechanisms for accessing the objects based on a user X  X  query. Each object has metadata describing its content, file size, playback duration, and various constraints. (2) Bandwidthestimation module . The main function of this module is to estimate the available end-to-end bandwidth in a presentation session. The estimated bandwidth is used to estimate the transmission time for each media object in a pre-sentation. In the past, researchers have been tried to develop accurate end-to-end measurement algorithms for available bandwidth (refer to [88] for a survey on different approaches). In principle, an accurate estimation of the bandwidth is crucial to provide the exact optimal schedule for a given presentation. Nevertheless, an optimal schedule computed based on a rough estimation of the bandwidth could still significantly reduce the overall presentation lag as compared to ran-dom sequences. In the initial evaluation studies, we provide results showing such a situation. (3) Scheduling engine . The Scheduling Engine computes the optimal sequence based on the estimated bandwidth, the given constraints, the file sizes, and playback durations of the selected media objects. Depending on the response time requirements of the service, the final sequence could be the optimal solution for problems with a very small number of objects, or a computationally efficient near-optimal solution when the server needs to serve a large number of clients in real time. The final sequence is a  X  X  X laylist X  that is sent to the client. (4) Object prefetcher . Based on the playlist, the Object Prefetcher requests the media objects from the Distributed Object
Archives. For applications with a client-side buffer constraint, the presentation progress and buffer space usage detected from the Media Presenter are used to decide the exact time to prefetch the objects. (5) Media presenter . The major function of the Media Presenter is to integrate and continuously present the retrieved media objects in sequence. In addition, during a presentation, it reports the playback and buffer status to the Object Pre-fetcher. In the current web environment, there are various technologies providing prefetchable presentations that inte-grate many modalities of media objects. The most popular ones include SMIL, Macromedia Flash, Quicktime, and Real
Player. With these players and a standard web server, a typical prefetch-enabled media presentation service can be easily realized.
 Based on the framework, this study provided a prototype system implementation for conducting real-life experiments.
The media player in the client was implemented with Adobe Flash technology (Flash Professional 8 with Actionscript 2.0). The web server was IIS 6.0 under Microsoft Server 2003 on an IBM xSeries x206m computer. The Bandwidth Estimation
Module was implemented using Javascript and C# under the ASP.NET 2.0 framework. We applied an algorithm with a naive approach where the server sends a small file to the media player, and the player sends an acknowledgment signal once the file is completely downloaded. The bandwidth was roughly given as the ratio of the file size to the corresponding transmis-sion time.

The Scheduling Engine was implemented using C++ and pre-compiled into an executable application file. Once the server obtained the information for the set of media objects and the estimated bandwidth, the server invoked the Scheduling En-gine through the  X  X  X rocess component X  in ASP.NET, which provides interfaces for starting and stopping a typical executive application. From the online course management systems in our campus, we collected a number of multimedia objects of different modalities, including video, audio, Flash-based animation, images, and text. The objects were compressed and for-format). The maximum size of the objects was below 5 MB. Each object was annotated with the anticipated presentation time. The objects were deposited and managed in a database of Microsoft SQL Server 2000.

In the following we report a number of numerical simulations and real-life experiments with wireless network environ-ments for a number of different problem settings. Section 5.1 discusses a case where only unconstrained objects were in the presentation. Section 5.2 discusses problems with precedence and buffer constraints. Finally, Section 5.3 discusses the buf-fer-constrained problems with a network with certain bandwidth fluctuations.
 5.1. Unconstrained problems
In the literature for flowshop scheduling, Johnson X  X  rule was proved to be the optimal solution for the unconstrained flow-shop problem where the job process times on both machines are deterministic [50] . This section aims to use real-life exper-iments to illustrate that Johnson X  X  sequence can reduce the presentation lag in network environments where certain random variations in network bandwidth (and thereby the downloading time of an object) may exist. With the implemented proto-type system, we conducted experiments with 20 data sets, each one with 10 or 20 media objects.
 The selected media objects in the server were downloaded through a public 3G wireless network in Taiwan using
WCDMA technology [48] . The maximum bandwidth of the network was 384 k bps. The available end-to-end bandwidth was observed to typically fluctuate from 200 k to 250 k bps throughout the experiments. For each data set, we conducted 10 runs with 10 randomly generated sequences and another 10 runs with the optimal sequences computed using Johnson X  X  rule based on the estimated bandwidth right before the beginning of the download of the objects. For each run, the download time and playback time of the objects through the WCDMA network were recorded. For each data set, the presentation idle
An idle rate close to 0 refers to a case where the media items are well ordered, so that the presentation lag is minimal. In contrast, an idle rate close to 1 refers to a case where most of the playbacks halted while downloading the objects.
Fig. 5 compares the average playback idle rates of the random sequences and Johnson X  X  sequences for the experiments son X  X  sequences were adopted in the presentations. The amount of idle rate reduction for each data set depends on the dis-rates of the random sequences and Johnson X  X  sequences for the experiments with 20 objects. Again, for each data set, the playback idle rate of the optimal sequences is significantly lower than that of the random sequences.
 5.2. Problems with precedence and buffer constraints
In Lin et al. [67] , we developed a branch-and-bound algorithm for searching for the optimal sequence. This section pre-sents experiments using numerical simulations, as well as real-life experiments with 3G wireless network environments, to evaluate the effectiveness and efficiency of the proposed branch and bound algorithm. In the numerical simulations, for each data set, the download and presentation times of each media object were randomly generated from the uniform interval [1,100] . Such a problem generation procedure yields test problems encompassing a wide variety of the formats used for the real-life multimedia objects transmitted over the Internet. The transmission rate was set to 160 KB/s. We conducted a certain precedence constraints to 0%, 20%, or 40% of the objects. For each problem size, 50 different data sets were used to investigate the average idle rates. Two buffer size constraints, 16,000 KB and 30,720 KB, respectively, were given.
Table 6 lists the average playback idle rates of the optimal sequences obtained by the proposed branch and bound algo-satisfy the given precedence constraints was computed and listed in Table 6 . For problems with a 16,000 KB buffer con-straint, the average idle rates for the random sequences and optimal sequences were about 73.94% and 48.76%, respectively.
For problems with a 30,720 KB buffer constraint, the average idle rates for the random sequences and optimal sequences were about 26.54% and 10.51%, respectively. Since the relaxation of the buffer constraint generally improves the effective-ness of the prefetch mechanism, the average idle rates in the problems with larger buffer constraints are generally signifi-cantly lower than for those problems with smaller buffer constraints. Both results show a clear reduction in the average playback idle rates when the obtained optimal sequences were adopted in the presentations.

With the implemented prototype system, we conducted a series of real-life experiments with different problem sizes, using from 10 to 15 randomly selected media objects from our collected educational digital archives. The media objects in the server were downloaded through the 3G wireless network as described in Section 5.1 . For each problem size, we con-ducted 10 runs with 10 randomly generated sequences (satisfying the given precedence constraints) and an additional 10 runs with the computed near-optimal heuristic (NEH-based) sequences developed in Lin et al. [67] based on the estimated bandwidth right before the beginning of the download of the objects. The buffer constraint was set to 8000 KB.
Table 7 compares the average playback idle rates of the random sequences and sequences generated by the NEH-based the results show a clear reduction in the average playback idle rates for data sets where the heuristic sequences were adopted in the presentations. In general, since the media objects in our digital archives are highly compressed, the amount of reduction in the idle rates is not comparable to that in the numerical simulations described above which assumed a wide range of compression levels for the media objects. 5.3. Problems with buffer constraints and bandwidth fluctuations
For problems with a player-side buffer size constraint, in Lin et al. [68] , we compared the performances of a number of heuristic algorithms proposed in recent flowshop literature in the addressed buffer-constrained media object sched-uling problems. The tested algorithms include NEH_1983 in Nawaz et al. [82] , NEHNM_2002 in Nagano and Moccellin [79] , CL_2007 in Chakraborty and Laha [19] , NEHKK_2007 in Kalczynski and Kamburowski [52] , Rad_1_2007 (RB1 in Rad et al. [90] ), Rad_2_2007 (RB2 in Rad et al. [90] ), Rad_3_2007 (RB3 in Rad et al. [90] ) and Rad_4_2007 (RB4 in
Rad et al. [90] ). Each heuristic algorithm was modified to account for the player-side buffer constraints. We conducted a series of numerical simulations for different problem sizes. The simulations conducted in the study showed that the heuristic solutions can well approximate the optimal solutions and significantly reduce the presentation lag as compared to the random sequences.

This section presents the numerical simulations used to investigate the effects of network bandwidth fluctuations on idle rates. The number of media objects in the experiments ranged from 15 to 50. For each problem size, 50 different media sets were used to obtain the average idle rate. For each media set, we computed the average idle rates for the approximate solutions using different heuristic algorithms, and five randomly generated sequences. The buffer was set to 22,400 KB. In particular, we incorporated certain random variations in the download times for the objects to account for the stochastic behavior of network bandwidth fluctuations. That is, a ginal download time based on the estimated bandwidth; rand is a random floating number between 0 and 2; R is the percentage of the variations in download time. Fig. 7 shows the computational results. The idle rates for the cases with the 30% transmission time variations are typically higher than those for the cases with 10% variations. This result indi-cates that a significant network fluctuation might often increase idle rates for the near-optimal heuristic sequences.
However, in all the cases evaluated, the heuristic algorithms still significantly reduce the presentation lag as compared to the random sequences. 6. Conclusions and future research
This study explored techniques for optimizing the object ordering in auto-assembled multimedia presentations to reduce the presentation lag. This issue is particularly important when delivering presentations through low-bandwidth high-delay network environments. We discussed various settings in the object ordering optimization problems for many commonly found online multimedia applications with different constraints. Since a typical multimedia presentation would include doz-ens of objects, an exhaustive search for the optimal sequence would definitely be out of the question for media servers that to solving the proposed problem set by applying techniques initially developed for conventional flowshop machines to the optimization of media object sequences.

We made an extensive study of the methodologies used in conventional operation research, where many well-grounded theoretical models have been created with rigorous analysis for optimizing the schedule of jobs in the manufacturing pro-cess. For each problem setting, the complexity and possible existing solutions developed in flowshop research were explored.
The NP-hard problems could possibly be solved using a numerical approach, such as branch and bound algorithms. However, the literature showed that a good branch and bound solution typically requires something on the scale of dozen of minutes to find the optimal solution for an NP-hard scheduling optimization problem with 20 objects. Therefore, it would not be pos-to be applied to find near-optimal solutions in real time. Nevertheless, the branch and bound solutions should be applied to evaluate the accuracy of the heuristic solutions.

We have implemented a Flash-based system that incorporates the various scheduling algorithms developed. The exper-iment results in WCDMA wireless network environments indicated that optimized sequences can significantly reduce the presentation lag. While the addressed algorithms were developed based on an approximating approach that ignores network more sophisticated approach in future work would involve considering the variability of the bandwidth, with which the problem becomes a stochastic scheduling optimization problem. In addition, several issues, including the player-side buffer constraints, the bi-criteria objective functions of a C max time with normal or Erlang distribution, dynamic scheduling with user interactions (such as skip, fast forward, fast backward), and most problems with a client-side buffer constraint have never been solved and deserve more in-depth inves-tions for these problems by incorporating the above-mentioned issues.
 Acknowledgement This study is supported by Taiwan NSC grant NSC-96-2221-E-260-020-MY3. Lin is partially supported by the Intelligent Web-enabled Service Research and Development Project of the Institute for Information Industry which is subsidized by the Ministry of Economy Affairs of the Republic of China.

References
