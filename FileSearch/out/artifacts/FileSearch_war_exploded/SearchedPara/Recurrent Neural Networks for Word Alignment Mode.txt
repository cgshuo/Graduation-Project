 Automatic word alignment is an important task for statistical machine translation. The most classical approaches are the probabilistic IBM models 1-5 (Brown et al., 1993) and the HMM model (Vogel et al., 1996). Various studies have extended those models. Yang et al. (2013) adapted the Context-Dependent Deep Neural Network for HMM (CD-DNN-HMM) (Dahl et al., 2012), a type of feed-forward neural network (FFNN)-based model, to the HMM alignment model and achieved state-of-the-art performance. However, the FFNN-based model assumes a first-order Markov dependence for alignments.

Recurrent neural network (RNN)-based models have recently demonstrated state-of-the-art per-formance that outperformed FFNN-based models for various tasks (Mikolov et al., 2010; Mikolov and Zweig, 2012; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Sundermeyer et al., 2013). An RNN has a hidden layer with recurrent con-nections that propagates its own previous signals. Through the recurrent architecture, RNN-based models have the inherent property of modeling long-span dependencies, e.g., long contexts, in in-put data. We assume that this property would fit with a word alignment task, and we propose an RNN-based word alignment model. Our model can maintain and arbitrarily integrate an alignment history, e.g., bilingual context, which is longer than the FFNN-based model.

The NN-based alignment models are super-vised models. Unfortunately, it is usually dif-ficult to prepare word-by-word aligned bilingual data. Yang et al. (2013) trained their model from word alignments produced by traditional unsuper-vised probabilistic models. However, with this approach, errors induced by probabilistic mod-els are learned as correct alignments; thus, gen-eralization capabilities are limited. To solve this problem, we apply noise-contrastive estimation (NCE) (Gutmann and Hyv  X  arinen, 2010; Mnih and Teh, 2012) for unsupervised training of our RNN-based model without gold standard align-ments or pseudo-oracle alignments. NCE artifi-cially generates bilingual sentences through sam-plings as pseudo-negative samples, and then trains the model such that the scores of the original bilin-gual sentences are higher than those of the sam-pled bilingual sentences.

Our RNN-based alignment model has a direc-tion, such as other alignment models, i.e., from f (source language) to e (target language) and from e to f . It has been proven that the limitation may be overcome by encouraging two directional mod-els to agree by training them concurrently (Ma-tusov et al., 2004; Liang et al., 2006; Grac  X a et al., 2008; Ganchev et al., 2008). The motivation for this stems from the fact that model and generaliza-tion errors by the two models differ, and the mod-els must complement each other. Based on this motivation, our directional models are also simul-taneously trained. Specifically, our training en-courages word embeddings to be consistent across alignment directions by introducing a penalty term that expresses the difference between embedding of words into an objective function. This con-straint prevents each model from overfitting to a particular direction and leads to global optimiza-tion across alignment directions.
 This paper presents evaluations of Japanese-English and French-English word alignment tasks and Japanese-to-English and Chinese-to-English translation tasks. The results illustrate that our RNN-based model outperforms the FFNN-based model (up to +0.0792 F1-measure) and the IBM Model 4 (up to +0.0703 F1-measure) for the word alignment tasks. For the translation tasks, our model achieves up to 0.74% gain in BLEU as com-pared to the FFNN-based model, which matches the translation qualities of the IBM Model 4. Various word alignment models have been pro-posed. These models are roughly clustered into two groups: generative models, such as those pro-posed by Brown et al. (1993), Vogel et al. (1996), and Och and Ney (2003), and discriminative mod-els, such as those proposed by Taskar et al. (2005), Moore (2005), and Blunsom and Cohn (2006). 2.1 Generative Alignment Model Given a source language sentence f J 1 = f 1 , ..., f J and a target language sentence e I 1 = e 1 , ..., e I , a , ..., a J . Each a j is a hidden variable indicat-ing that the source word f j is aligned to the target word e a the target language sentence and a J 1 may contain a j = 0 , which indicates that f j is not aligned to any target word. The probability of generating the sentence f J 1 from e I 1 is defined as The IBM Models 1 and 2 and the HMM model decompose it into an alignment probability p a and a lexical translation probability p t as The three models differ in their definition of align-ment probability. For example, the HMM model uses an alignment probability with a first-order Markov property: p a ( a j j a j a j  X  1 ) . In addition, the IBM models 3-5 are extensions of these, which consider the fertility and distortion of each trans-lated word.

These models are trained using the expectation-maximization algorithm (Dempster et al., 1977) from bilingual sentences without word-level align-ments (unlabeled training data). Given a specific model, the best alignment (Viterbi alignment) of the sentence pair ( f J 1 , e I 1 ) can be found as For example, the HMM model identifies the Viterbi alignment using the Viterbi algorithm. 2.2 FFNN-based Alignment Model As an instance of discriminative models, we de-scribe an FFNN-based word alignment model (Yang et al., 2013), which is our baseline. An FFNN learns a hierarchy of nonlinear features that can automatically capture complex statisti-cal patterns in input data. Recently, FFNNs have been applied successfully to several tasks, such as speech recognition (Dahl et al., 2012), statistical machine translation (Le et al., 2012; Vaswani et al., 2013), and other popular natural language pro-cessing tasks (Collobert and Weston, 2008; Col-lobert et al., 2011).

Yang et al. (2013) have adapted a type of FFNN, i.e., CD-DNN-HMM (Dahl et al., 2012), to the HMM alignment model. Specifically, the lexical translation and alignment probability in Eq. 2 are computed using FFNNs as Figure 1: FFNN-based model for computing a lex-ical translation score of ( f j , e a where t a and t lex are an alignment score and a lex-ical translation score, respectively, s NN is a score of alignments a J 1 , and  X  c ( a word w )  X  denotes a context of word w . Note that the model uses non-probabilistic scores rather than probabilities be-cause normalization over all words is computa-tionally expensive. The model finds the Viterbi alignment using the Viterbi algorithm, similar to the classic HMM model. Note that alignments in the FFNN-based model are also governed by first-order Markov dynamics because an align-ment score depends on the previous alignment a
Figure 1 shows the network structure with one hidden layer for computing a lexical translation probability t lex ( f j , e a consists of a lookup layer, a hidden layer, and an output layer, which have weight matrices. The model receives a source and target word with their contexts as inputs, which are words in a prede-fined window (the window size is three in Fig-ure 1). First, the lookup layer converts each in-put word into its word embedding by looking up its corresponding column in the embedding ma-trix ( L ), and then concatenates them. Let V f (or V ) be a set of source words (or target words) and M be a predetermined embedding length. L is a M ( j V f j + j V e j ) matrix 1 . Word embeddings are dense, low dimensional, and real-valued vectors that can capture syntactic and semantic properties of the words (Bengio et al., 2003). The concate-nation ( z 0 ) is then fed to the hidden layer to cap-ture nonlinear relations. Finally, the output layer receives the output of the hidden layer ( z 1 ) and computes a lexical translation score.
The computations in the hidden and output layer where H , B H , O , and B O are j z 1 jj z 0 j , j z 1 j 1 , 1 j z 1 j , and 1 1 matrices, respectively, and f ( x ) is an activation function. Following Yang et al. (2013), a  X  X ard X  version of the hyperbolic tangent, htanh ( x ) 3 , is used as f ( x ) in this study.
The alignment model based on an FFNN is formed in the same manner as the lexical trans-lation model. Each model is optimized by mini-mizing the following ranking loss with a margin gradients are computed by the back-propagation algorithm (Rumelhart et al., 1986): loss (  X  ) = where  X  denotes the weights of layers in the model, T is a set of training data, a + is the gold standard alignment, a is the incorrect alignment with the highest score under  X  , and s  X  denotes the score defined by Eq. 4 as computed by the model under  X  . This section proposes an RNN-based alignment using an RNN: s where t RNN is the score of an alignment a j . The prediction of the j -th alignment a j depends on all preceding alignments a j  X  1 posed model also uses nonprobabilistic scores, similar to the FFNN-based model.

The RNN-based model is illustrated in Figure 2. The model consists of a lookup layer, a hid-den layer, and an output layer, which have weight matrices L , f H d , R d , B d tively. Each matrix in the hidden layer ( H d , R d , the jump distance from a j  X  1 to a j : d = a j a j  X  1 . In our experiments, we merge distances that are greater than 8 and less than -8 into the special  X  8 X  and  X  -8 X  distances, respectively. Specifically, the hidden layer has weight matrices putes y j using the corresponding matrices of the jump distance d .
 The Viterbi alignment is determined using the Viterbi algorithm, similar to the FFNN-based model, where the model is sequentially applied alignment between f j and e a input to the lookup layer. In the lookup layer, each of these words is converted to its word embedding, and then the concatenation of the two embeddings ( x j ) is fed to the hidden layer in the same manner as the FFNN-based model. Next, the hidden layer receives the output of the lookup layer ( x j ) and that of the previous hidden layer ( y j  X  1 ). The hid-den layer then computes and outputs the nonlinear relations between them. Note that the weight ma-trices used in this computation are embodied by the specific jump distance d . The output of the hid-den layer ( y j ) is copied and fed to the output layer and the next hidden layer. Finally, the output layer computes the score of a j ( t RNN ( a j j a j  X  1 from the output of the hidden layer ( y j ). Note that the FFNN-based model consists of two compo-nents: one is for lexical translation and the other is for alignment. The proposed RNN produces a single score that is constructed in the hidden layer by employing the distance-dependent weight ma-trices.

Specifically, the computations in the hidden and output layer are as follows: j y j jj y j  X  1 j , j y j j 1 , 1 j y j j , and 1 1 matri-an activation function, which is a hard hyperbolic tangent, i.e., htanh ( x ) , in this study.
As described above, the RNN-based model has a hidden layer with recurrent connections. Under the recurrence, the proposed model compactly en-codes the entire history of previous alignments in the hidden layer configuration y i . Therefore, the proposed model can find alignments by taking ad-vantage of the long alignment history, while the FFNN-based model considers only the last align-ment. During training, we optimize the weight matrices of each layer (i.e., L , H d , R d , B d following a given objective using a mini-batch SGD with batch size D , which converges faster than a plain SGD ( D = 1). Gradients are com-puted by the back-propagation through time algo-rithm (Rumelhart et al., 1986), which unfolds the network in time ( j ) and computes gradients over time steps. In addition, an l 2 regularization term is added to the objective to prevent the model from overfitting the training data.

The RNN-based model can be trained by a supervised approach, similar to the FFNN-based model, where training proceeds based on the rank-ing loss defined by Eq. 7 (Section 2.2). However, this approach requires gold standard alignments. To overcome this drawback, we propose an un-supervised method using NCE, which learns from unlabeled training data. 4.1 Unsupervised Learning Dyer et al. (2011) presented an unsupervised alignment model based on contrastive estimation (CE) (Smith and Eisner, 2005). CE seeks to dis-criminate observed data from its neighborhood, which can be viewed as pseudo-negative samples. Dyer et al. (2011) regarded all possible align-ments of the bilingual sentences, which are given as training data ( T ), and those of the full transla-tion search space (  X  ) as the observed data and its neighborhood, respectively.

We introduce this idea to a ranking loss with margin as where is a set of all possible alignments given ( f , e ) , E [ s  X  ] is the expected value of the scores s  X  on , e + denotes a target language sentence in the training data, and e denotes a pseudo-target language sentence. The first expectation term is for the observed data, and the second is for the neighborhood.

However, the computation for  X  is prohibitively expensive. To reduce computation, we employ NCE, which uses randomly sampled sentences from all target language sentences in  X  as e , and calculate the expected values by a beam search with beam width W to truncate alignments with low scores. In our experiments, we set W to 100. In addition, the above criterion is converted to an online fashion as loss (  X  ) = where e + is a target language sentence aligned to f + in the training data, i.e., ( f + ,e + ) 2 T , e is a randomly sampled pseudo-target language sen-tence with length j e + j , and N denotes the num-ber of pseudo-target language sentences per source sentence f + . Note that j e + j = j e j . GEN is a subset of all possible word alignments , which is generated by beam search.

In a simple implementation, each e is gener-ated by repeating a random sampling from a set of target words ( V e ) j e + j times and lining them up sequentially. To employ more discriminative neg-ative samples, our implementation samples each word of e from a set of the target words that co-occur with f i 2 f + whose probability is above a threshold C under the IBM Model 1 incorporating l prior (Vaswani et al., 2012). The IBM Model 1 with l 0 prior is convenient for reducing transla-tion candidates because it generates more sparse alignments than the standard IBM Model 1. 4.2 Agreement Constraints Both of the FFNN-based and RNN-based models are based on the HMM alignment model, and they are therefore asymmetric, i.e., they can represent one-to-many relations from the target side. Asym-metric models are usually trained in each align-ment direction. The model proposed by Yang et al. (2013) is no exception. However, it has been demonstrated that encouraging directional mod-els to agree improves alignment performance (Ma-tusov et al., 2004; Liang et al., 2006; Grac  X a et al., 2008; Ganchev et al., 2008).

Inspired by their work, we introduce an agree-ment constraint to our learning. The constraint concretely enforces agreement in word embed-dings of both directions. The proposed method trains two directional models concurrently based on the following objective by incorporating a penalty term that expresses the difference between word embeddings: argmin argmin where  X  F E (or  X  EF ) denotes the weights of lay-ers in a source-to-target (or target-to-source) align-ment model,  X  L denotes weights of a lookup layer, i.e., word embeddings, and  X  is a parameter that controls the strength of the agreement constraint.  X   X   X  indicates the norm of  X  . 2-norm is used in our experiments. Equations 13 and 14 can be applied to both supervised and unsupervised approaches. Equations 7 and 12 are substituted into loss (  X  ) in supervised and unsupervised learning, respec-tively. The proposed constraint penalizes overfit-ting to a particular direction and enables two di-rectional models to optimize across alignment di-rections globally.

Our unsupervised learning procedure is summa-rized in Algorithm 1. In Algorithm 1, line 2 ran-domly samples D bilingual sentences ( f + , e + ) D from training data T . Lines 3-1 and 3-2 gener-ate N pseudo-negative samples for each f + and e + found by the IBM Model 1 with l 0 prior, F BIS IBM 1 (Section 4.1). Lines 4-1 and 4-2 update the weights in each layer following a given objective 5.1 Experimental Data We evaluated the alignment performance of the proposed models with two tasks: Japanese-English word alignment with the Basic Travel Expression Corpus ( BT EC ) (Takezawa et al., 2002) and French-English word alignment with the Hansard dataset ( Hansards ) from the 2003 NAACL shared task (Mihalcea and Pedersen, 2003). In addition, we evaluated the end-to-end translation performance of three tasks: a Chinese-to-English translation task with the FBIS corpus ( F BIS ), the IWSLT 2007 Japanese-to-English translation task ( IW SLT ) (Fordyce, 2007), and the NTCIR-9 Japanese-to-English patent transla-tion task ( NT CIR ) (Goto et al., 2011) 6 .
Table 1 shows the sizes of our experimental datasets. Note that the development data was not used in the alignment tasks, i.e., BT EC and Hansards , because the hyperparameters of the alignment models were set by preliminary small-scale experiments. The BT EC data is the first 9,960 sentence pairs in the training data for IW SLT , which were annotated with word alignment (Goh et al., 2010). We split these pairs into the first 9,000 for training data and the remaining 960 as test data. All the data in BT EC is word-aligned, and the training data in Hansards is unlabeled data. In F BIS , we used the NIST02 evaluation data as the development data, and the NIST03 and 04 evaluation data as test data ( NIST 03 and NIST 04 ). 5.2 Comparing Methods We evaluated the proposed RNN-based alignment models against two baselines: the IBM Model 4 and the FFNN-based model with one hidden layer. The IBM Model 4 was trained by pre-viously presented model sequence schemes (Och the IBM Model 1 followed by five iterations of the HMM Model, etc., which is the default setting for GIZA++ ( IBM 4 ). For the FFNN-based model, we set the word embedding length M to 30, the number of units of a hidden layer j z 1 j to 100, and the window size of contexts to 5. Hence, j z 0 j is 300 ( 30 5 2 ). Following Yang et al. (2013), the FFNN-based model was trained by the supervised approach described in Section 2.2 ( F F NN s ).
For the RNN-based models, we set M to 30 and the number of units of each recurrent hid-den layer j y j j to 100. Thus, j x j j is 60 ( 30 2 ). The number of units of each layer of the FFNN-based and RNN-based models and M were set through preliminary experiments. To demonstrate the effectiveness of the proposed learning meth-ods, we evaluated four types of RNN-based mod-els: RNN s , RNN s + c , RNN u , and RNN u + c , where  X  s / u  X  denotes a supervised/unsupervised model and  X  + c  X  indicates that the agreement con-straint was used.

In training all the models except IBM 4 , the weights of each layer were initialized first. For the weights of a lookup layer L , we preliminarily trained word embeddings for the source and target language from each side of the training data. We then set the word embeddings to L to avoid falling into local minima. Other weights were randomly initialized to [ 0 . 1 , 0 . 1] . For the pretraining, we Table 2: Word alignment performance (F1-measure) with the default options. We mapped all words that occurred less than five times to the special to-ken  X  unk  X  . Next, each weight was optimized us-ing the mini-batch SGD, where batch size D was 100, learning rate was 0.01, and an l 2 regulariza-tion parameter was 0.1. The training stopped after 50 epochs. The other parameters were set as fol-lows: W , N and C in the unsupervised learning were 100, 50, and 0.001, respectively, and  X  for the agreement constraint was 0.1.

In the translation tasks, we used the Moses phrase-based SMT systems (Koehn et al., 2007). All Japanese and Chinese sentences were seg-tences with over 40 words were filtered out. Using the SRILM Toolkits (Stolcke, 2002) with modified Kneser-Ney smoothing, we trained a 5-gram lan-guage model on the English side of each training data for IW SLT and NT CIR , and a 5-gram lan-guage model on the Xinhua portion of the English Gigaword corpus for F BIS . The SMT weighting parameters were tuned by MERT (Och, 2003) in the development data. 5.3 Word Alignment Results Table 2 shows the alignment performance by the F1-measure. Hereafter, MODEL ( R ) and MODEL ( I ) denote the MODEL trained from gold standard alignments and word alignments found by the IBM Model 4, respectively. In Hansards , all models were trained from ran-the word alignments produced by first applying each model in both directions and then combin-ing the alignments using the  X  X row-diag-final-and X  heuristic (Koehn et al., 2003). The signif-icance test on word alignment performance was performed by the sign test with a 5% significance level.  X + X  in Table 2 indicates that the compar-isons are significant over corresponding baselines, IBM 4 and F F NN s ( R/I ) .

In Table 2, RNN u + c , which includes all our proposals, i.e., the RNN-based model, the unsu-pervised learning, and the agreement constraint, achieves the best performance for both BT EC and Hansards . The differences from the base-lines are statistically significant.
 Table 2 shows that RNN s ( R/I ) outperforms F F NN s ( R/I ) , which is statistically significant in BT EC . These results demonstrate that captur-ing the long alignment history in the RNN-based model improves the alignment performance. We discuss the difference of the RNN-based model X  X  effectiveness between language pairs in Section 6.1. Table 2 also shows that RNN s + c ( R/I ) and RNN u + c achieve significantly better performance than RNN s ( R/I ) and RNN u in both tasks, re-spectively. This indicates that the proposed agree-ment constraint is effective in training better mod-els in both the supervised and unsupervised ap-proaches.

In BT EC , RNN u and RNN u + c significantly outperform RNN s ( I ) and RNN s + c ( I ) , respec-tively. The performance of these models is com-parable with Hansards . This indicates that our unsupervised learning benefits our models because the supervised models are adversely affected by errors in the automatically generated training data. This is especially true when the quality of training data, i.e., the performance of IBM 4 , is low. 5.4 Machine Translation Results Table 3 shows the translation performance by the 2002). Table 3 presents the average BLEU of three different MERT runs. In NT CIR and F BIS , each alignment model was trained from the ran-
Table 3: Translation performance (BLEU4(%)) domly sampled 100 K data, and then a translation model was trained from all the training data that was word-aligned by the alignment model. In ad-dition, for a detailed comparison, we evaluated the SMT system where the IBM Model 4 was trained from all the training data ( IBM 4 all ). The sig-nificance test on translation performance was per-formed by the bootstrap method (Koehn, 2004) with a 5% significance level.  X * X  in Table 3 in-dicates that the comparisons are significant over both baselines, i.e., IBM 4 and F F NN s ( I ) .
Table 3 also shows that better word align-ment does not always result in better translation, which has been discussed previously (Yang et al., 2013). However, RNN u and RNN u + c outper-form F F NN s ( I ) and IBM 4 in all tasks. These results indicate that our proposals contribute to im-Table 3 shows that these proposed models are comparable to IBM 4 all in NT CIR and F BIS even though the proposed models are trained from only a small part of the training data. 6.1 Effectiveness of RNN-based Alignment Figure 3 shows word alignment examples from F F NN s and RNN s , where solid squares indi-cate the gold standard alignments. Figure 3 (a) shows that RRN s adequately identifies compli-cated alignments with long distances compared to F F NN s (e.g., jaggy alignments of  X  X ave you been learning X  in Fig 3 (a)) because RNN s cap-tures alignment paths based on long alignment his-tory, which can be viewed as phrase-level align-ments, while F F NN s employs only the last align-ment.

In French-English word alignment, the most Table 4: Word alignment performance on BT EC with various sized training data valuable clues are located locally because English and French have similar word orders and their alignment has more one-to-one mappings than Japanese-English word alignment (Figure 3). Fig-ure 3 (b) shows that both RRN s and F F NN s work for such simpler alignments. Therefore, the RNN-based model has less effect on French-English word alignment than Japanese-English word alignment, as indicated in Table 2. 6.2 Impact of Training Data Size Table 4 shows the alignment performance on BT EC with various training data sizes, i.e., train-ing data for IW SLT (40 K), training data for BT EC (9 K), and the randomly sampled 1 K data from the BT EC training data. Note that RNN s + c ( R ) cannot be trained from the 40 K data because the 40 K data does not have gold standard Table 5: Word alignment performance of various FFNN-based models (F1-measure) word alignments.

Table 4 demonstrates that the proposed RNN-based model outperforms IBM 4 trained from the unlabeled 40 K data by employing either the 1 K labeled data or the 9 K unlabeled data, which is less than 25% of the training data for IBM 4 . Consequently, the SMT system using RNN u + c trained from a small part of training data can achieve comparable performance to that using IBM 4 trained from all training data, which is shown in Table 3. 6.3 Effectiveness of Unsupervised The proposed unsupervised learning and agree-ment constraints can be applied to any NN-based alignment model. Table 5 shows the alignment performance of the FFNN-based models trained by our supervised/unsupervised approaches (s/u) with and without our agreement constraints. In Table 5,  X +c X  denotes that the agreement con-straint was used, and  X + X  indicates that the comparison with its corresponding baseline, i.e., F F NN s (I/R), is significant in the sign test with a 5% significance level.
 Table 5 shows that F F NN s + c (R/I) and F F NN u + c achieve significantly better perfor-mance than F F NN s (R/I) and F F NN u , respec-tively, in both BT EC and Hansards . In addi-tion, F F NN u and F F NN u + c significantly out-perform F F NN s (I) and F F NN s + c (I), respec-tively, in BT EC . The performance of these mod-els is comparable in Hansards . These results indicate that the proposed unsupervised learning and agreement constraint benefit the FFNN-based model, similar to the RNN-based model. We have proposed a word alignment model based on an RNN, which captures long alignment his-tory through recurrent architectures. Furthermore, we proposed an unsupervised method for training our model using NCE and introduced an agree-ment constraint that encourages word embeddings to be consistent across alignment directions. Our experiments have shown that the proposed model outperforms the FFNN-based model (Yang et al., 2013) for word alignment and machine translation, and that the agreement constraint improves align-ment performance.

In future, we plan to employ contexts composed of surrounding words (e.g., c ( f j ) or c ( e a FFNN-based model) in our model, even though our model implicitly encodes such contexts in the alignment history. We also plan to enrich each hidden layer in our model with multiple layers following the success of Yang et al. (2013), in which multiple hidden layers improved the perfor-mance of the FFNN-based model. In addition, we would like to prove the effectiveness of the pro-posed method for other datasets.
 We thank the anonymous reviewers for their help-ful suggestions and valuable comments on the first version of this paper.

