 1. Introduction
The trend in constructing high-rise buildings in the world today has resulted in a demand for better transportation services among floors in the buildings. As elevator is the primary transportation facility in buildings, the system that controls it must maximize its transportation capability and improve the quality of passenger service. In modern buildings of residential, commercial or institutional types, the control system must be able to execute command on a group of elevator cars (cars) in an effective and efficient manner possible. Two types of passenger calls are to be properly served: hall calls and car calls. The former are the passenger calls given from the elevator foyers while the later are the calls registered from inside the cars. Objectives to be met include the reduction in passenger waiting time, passenger riding time, car response time to a hall call, the traveling distance of a car before it reaches a hall call floor, the number of stops a car has to make, energy consumption, etc. Among all the criteria, it is very common to treat passenger waiting time and passenger riding time as top priorities in the design of the control system.
This is a sensible consideration as the two criteria are directly related to passenger satisfaction which determines the service quality. It is desirable for any passenger to reach the destination floor as quickly as possible. In other words, the passenger requires short waiting time and short riding time.

The primary function of an elevator group control system is to decide on the most suitable car to be dispatched in response to a registered hall call, and simultaneously ensuring that all cars in the group work together for the group X  X  overall, rather than the cars X  individual, best performance. The task is not easy, as the information feeding the dispatching decision is insufficient and uncertain. Passenger X  X  arrivals and destinations are dynamic in nature, thus making the situation more complex. These challenges caused techniques of artificial intelligence (AI) and, later, of computational intelligence (CI) to be adopted. AI and CI have since become the promising technologies continuously explored for use in elevator control systems.

In control engineering analysis and design, fuzzy logic (FL) has progressively challenged traditional methods which are mainly based on mathematical models that describe the control systems using differential equations. Owing to its advantages in dealing with imprecision and uncertainty, FL has been widely applied in the search for an alternative solution to elevator control problems. As reported by Siikonen (1997) , FL is used to identify traffic patterns, which in turn determine appropriate control actions. The control system is then made adaptive to suit various traffic conditions. In another approach, fuzzy elevator group control system was proposed by Kim et al. (1998) , where the control strategy is based on passenger traffic classifications and system manager X  X  requirements. The control strategy then determines the hall call assignment method. Gudwin et al. (1998) reported that through a linear context adaptation technique, a fuzzy logic controller is made to adapt to the changes in traffic flows by adjusting the universe of discourse of the membership functions.
The three approaches described are very much subject to producing unsuitable dispatching decisions owing to their dependence on the accuracy of the traffic pattern predictions. As stated by Koehler and Ottiger (2002), the usefulness of abstract patterns in guiding predefined dispatching decisions proves to be rather limited. Predictions accurate enough to provide useful information about traffic flows are impossible ( Koehler and Ottiger, 2002 ).

Neural networks (NNs), because of their learning ability, have also become a subject of interest in elevator controls. Work on the application of NNs with multilayer backpropagation algorithm in traffic control was reported by Imrak and Barney (1998) . Another work was based on multi-agent reinforcement learning ( Crites and Barto, 1996 ). Fuzzy neural network (FNN) has also been employed as a performance forecasting model of the elevator system so that the system can be made adaptive to long-term changes in traffic situations ( Imasaki et al., 1995 ). To cope with the difficulties associated with the training of
NNs, evolutionary computation (EC) methods were introduced. EC methods apply iterations to search for the fittest solutions within a population. Various work involving genetic algorithms (GAs), genetic network programming (GNP) and evolution strategy (ES) were described by Fujino et al. (1997) and Cortes et al. (2004) ,
Zhou et al. (2007) and Beielstein et al. (2003), respectively. Recent publications as reported by Li et al. (2007) and Yu et al. (2007) discussed particle swarm optimization (PSO) and ant colony optimization (ACO) as the latest techniques used in optimizing control algorithms. Li et al. (2004) and Zong et al. (2006) presented the artificial immune systems (AIS) approach which is based on learning and memorizing characteristics to handle elevator control problems. Dynamic programming (DP) also made inroads, as covered in the paper by Nikovski and Brand (2003).
DP uses the concept of overlapping subproblems and stores previous solutions for future retrieval and use should the same problems recur.

The application of search and optimization techniques in elevator controls is widely discussed in recent years. The techniques offer systematic ways of searching for the best solutions possible. Despite their failure, in some cases, to converge, they are potentially good in finding high-quality solutions but are also usually expensive. These techniques have two main drawbacks, viewed from the perspectives of computa-tional time and space complexities. They need a huge amount of computation, thus causing slow overall system responses. Much memory is also needed for the computation. In GAs, for example, many iterations need to be made before the best solution can be found. The same with other algorithms closely related to GAs, such as AIS and PSO. Although DP is believed to be faster than GA, owing to its solution-storing-for-future-use that reduces compu-tational time, it still suffers from needing huge amount of memory for results. It is a concern that the optimized controller might end up doing more work than it should, and at the same time, produces outcomes different from those initially desired.
Real elevator control systems must respond fast to calls in any conditions so that the response time and in turn, the waiting time can be reduced. We believe in practical solutions for real-time implementation, thus present the self-tuning fuzzy logic control approach. Instead of basing dispatching decisions on limited traffic pattern predictions, the proposed controller uses waiting time data as reference for its adjustment to suit the control system X  X  environment. The next section explains the idea behind the proposed controller and the control algorithms. Towards the end of this paper, the structure of the self-tuning fuzzy logic controller and its application in elevator group control systems are discussed in detail. Computer simulation results and analysis are subsequently presented before conclusions are drawn in the last section. 2. Fuzzy logic for complex problems
Elevator group control systems were introduced to increase the transportation capacity in a building that has more than one car. It manages a group of cars, deciding which car should respond to which hall call. However, the controller is making the decision with information that is inadequate and vague. In the up X  X own hall call button systems, at least three types of uncertainty must be considered in making the dispatching decisions ( Nikovski and
Brand, 2003 ; Rong et al., 2003 ). The three variables are stochastic: time of arrival, floor of arrival and the desired destination floor of each passenger. Besides these variables, other information such as position, direction and speed of all cars in the group, the number of passengers inside each car and the number waiting at each floor to board a car ( Nikovski and Brand, 2003 ) matters as well. This complicates the system, making it indeed difficult to handle.
To lessen the uncertainty in the up X  X own hall call button systems, call allocation or destination-based systems were introduced. Vagueness in information involving destinations of passengers can be eliminated since in the destination-based systems, passengers are required to register their destinations before they get on board ( Koehler and Ottiger, 2002 ). The controller uses the information in assigning a car to serve passengers going to the same floor. With these systems, car calls are abolished as destination floors are given in advance at the elevator foyers. Yet, some problems still exist. The systems prohibit cancellation of a hall call assignment to a car so that a new assignment can be made to a different car. This is not desirable since in many cases, reassignment policy does help in improving quality service, especially when a fully loaded car is replaced with an empty car to serve hall calls behind which, many passengers may be waiting. It is common too, for passengers, whose destinations differ from the ones of the majority passen-gers, to wait longer than is usual. In other situations, passengers may find the car assigned to them to be full. They then have to wait some more for an empty car to arrive.

As mentioned in the introduction, effective elevator group control systems must fulfill not only one criterion, but also to satisfy several criteria. Besides waiting time, requirements for riding time should also be given serious attention in designing the control algorithms. Average and maximum values must be minimized to achieve high-quality service to passengers. In the traditional group collective control (GCC) algorithm, hall call assignment is based on the shortest estimated distance between the position of the car and the hall call floor. In other words, the nearest car to the hall call floor is selected to answer the call. The main drawback of this algorithm though, is the advent of a phenomenon called bunching , where several cars move close to each other and compete for the same hall call, which in turn leads to the arrival of several cars at the same floor at about the same time ( Nikovski and Brand, 2003 ; Rong et al., 2003 ). In estimated time of arrival (ETA) algorithm, the car with the shortest estimated arrival time, or car response time, is selected to attend to a hall call, i.e. earliest car is chosen. As for estimated time to destination (ETD) algorithm, the same logic applies as in ETA, but with a different optimization criterion, i.e. the total journey time, instead of the waiting time of ETA ( Smith and Peters, 2002 ; Rong et al., 2003 ).

Elevator group control shows well the problem of stochastic optimal control with an enormous state space of a system that demands for the fulfillment of several criteria. Owing to the problem X  X  complexities, FL entered the arena as an alternative and a convenient approach for obtaining viable solutions. As men-tioned by Cordon et al. (1998) , FL is suitable for use in applications where there is a lot of difficult-to-handle information, low-precision environment and vague data which are the exact characteristics of elevator control systems.

In this paper, the different criteria used in GCC, ETA and ETD for hall call assignment are all combined and considered for fuzzy assessment. The distance criterion in GCC, the car response time in ETA and the number of intermediate stops in a journey as considered in both ETA and ETD, are used as input variables.
Owing to limits in predicting traffic patterns by using FL which then was used to decide the dispatching control algorithms in the previous work, a different perspective on the use of FL via the exploitation of the waiting time data is searched and further explored. The next section presents the perspective and explains how it affects the use of FL in making dispatching decisions without depending on predicted traffic patterns. 3. Adaptive controller based on measured performance
The application of fuzzy logic controllers (FLCs) in elevator control systems can be traced back to the 1980s and has since flourished especially during the 1990s, when much research on it concentrated on identifying traffic patterns in determining dispatching assignments. During the same period, much research on adaptive FLCs also took place. The link between the two developments was not obvious. FLCs in elevator control systems were not exactly equipped with a self-learning scheme that is based on measured performance. Adjustment or adaptation of the
FLCs was done when basically there were changes in traffic situations. Adjustment of this sort did not treat the measured performance criteria of the control systems as a factor important to be considered. Hence, any adjustment might not be sensitive enough to the performance desired and aimed at initially.
Furthermore, adaptive FLCs heavily depending on predicted traffic patterns are also subject to producing inappropriate dispatching decisions. This is because similar dispatching decisions cannot be applied at all time during the period of a certain identified traffic pattern. It is commonly observed that different decisions are also needed even when the traffic conditions are similar.

Performance is defined by the difference between the actual and the desired outputs of the plant, or of the controlled system (Pham and Karaboga, 1994 ). The controller must be able to measure its own closed-loop performance and to use the measured results in changing the control scheme. When the measured performance is poor, corrections are made. This strategy ensures the controller X  X  correct operation always in producing outputs that closely approximate to the ones desired, by keeping the tolerance between the actual and the values desired, within an acceptable range.

A controller that is able to adapt to changes in the system X  X  environment is known as an adaptive controller. Mudi and Pal (1999) describe that an FLC becomes adaptive if one of its tunable parameters (scaling factors, membership functions or fuzzy rules) changes when the controller is being used. Both self-tuning FLCs and self-organizing FLCs are adaptive FLCs. An adaptive FLC that fine tunes an already working controller by modifying either its scaling factors or membership functions, or both of them is called a self-tuning FLC. On the other hand, when an FLC is tuned by automatically changing its rules, then it is called a self-organizing
FLC ( Mudi and Pal, 1999 ). The first FLC with a learning ability was developed by Procyk and Mamdani ( Pham and Karaboga, 1999 ).
The controller which was then called the linguistic self-organizing process controller ( Procyk and Mamdani, 1979 ), was able to develop and improve its control policy automatically. It was later improved and modified by researchers including Shao (1988) , Lee and Wang (1996), Singh (1998) , Vascak and Madarasz (2005) and Qiao and Wang (2008). Despite the improvements and modifica-tions, the basic functions of the self-organizing controller are similar, i.e. to generate appropriate control rules according to the evaluation of the system X  X  behavior and to modify the rule base based on system performance evaluation. Since its introduction, the self-organizing controller has been used in many applications such as nuclear steam generator level control ( Park and Seong, 1997 ), robotic motion control ( Huang and Lee, 2000 ), motor-toggle servomechanism control ( Wai et al., 2002 ) and laser surface alloying process control ( Chen and Huang, 2004 ).
Besides the self-organizing controllers, self-tuning fuzzy controllers were also developed to handle dynamic processes. Maeda and Murakami (1992) proposed a self-tuning algorithm of the FLC that has two functions: to adjust the scaling factors which are the parameters of the FLC, and to improve the control rules by evaluating the control response at real time and the control results after operations. Chao and Teng (1997) presented a PD-like self-tuning fuzzy controller based on the tuning of scaling factors. Here, a two-stage tuning method was proposed. A robust model-independent self-tuning scheme was presented by Mudi and Pal (1999) for PI-and PD-type fuzzy controllers. In this scheme, the output scaling factor is adjusted on-line by fuzzy rules according to the current trend of the controlled process. In the work conducted by Liu et al. (2001) , an adaptive linguistic hedge fuzzy logic controller was proposed. The controller comprises a linguistic hedge module used to adjust the shape of the member-ship functions dynamically according to the feedback signal of the controlled plant. To further enhance performance and to increase robustness of the self-tuning controllers, neural networks and genetic algorithms were also employed in the design of the controllers ( Homaifar and McCormick, 1995 ; Pham and Karaboga, 1999 ; Liu et al., 2001 ).

In this paper, the proposed adaptive FLC for elevator control systems is a self-tuning type since the controller is adjusted by modifying the membership functions and selecting the most appropriate fuzzy rule set based on the measured performance results. It is widely accepted that the most common performance criterion in elevator group control systems is the waiting time, whereby its minimization has become the ultimate goal of any elevator group controller. As shown in Fig. 1 , the waiting time varies from time to time, and usually reaches its peaks on three occasions: up peak in the morning, lunch peak during lunch time and down peak during closing of office hours. By monitoring the waiting time variation, heavy traffic can be simply identified without using any complicated algorithm to predict the traffic Waiting Time (s) intensity and the controller can be accordingly adjusted to reduce the waiting time as much as possible especially during the peak periods. By exploiting the measured performance information, i.e. the waiting time data, satisfactory performance of the controller can be achieved and maintained since the outcomes of the controlled system are always used to initiate corrections in the control actions through suitable modifications of the membership functions and proper selection of the fuzzy rule set. 4. Proposed self-tuning fuzzy logic controller
A conventional FLC is designed on a simple concept. It receives an input, performs some sort of processing and then generates an output. Basically, it is made up of four components: the fuzzification module , the knowledge base , the fuzzy inference engine and the defuzzification module. The self-tuning module is added to transform a conventional FLC into a self-tuning FLC. The basic structure of the proposed self-tuning FLC is shown in Fig. 2 . 4.1. Fuzzification module
Fuzzification is a process where crisp values of the input linguistic variables are transformed into fuzzy values. It involves the mapping of the input values to reflect their degree of membership to certain fuzzy sets. A fuzzy set is a set with clearly defined boundaries that can include elements with a partial degree of membership. It is defined by the membership functions that determine how the input values in the universe of discourse are mapped to membership values between 0 and 1. In the proposed self-tuning FLC, three input variables are used: car distance, number of stops and car response time. Further details about the input variables are explained in the next section. 4.2. Knowledge base The knowledge base comprises the database and the rule base.
The function of the database is its provision of information containing the definitions of membership functions to represent the fuzzy sets for proper functioning of the fuzzification module, the defuzzification module and the rule base. The rule base is used to represent expert knowledge in a structure of IF X  X HEN statements. Each statement is composed of an antecedent and a consequent. The statements are usually conditional, denoted in the following form: IF antecedent THEN consequent.
 In fuzzy rules, connectives such as AND and OR, are commonly used to relate two or more antecedents, as shown in the statement below: IF antecedent1 AND antecedent2 OR antecedent3
THEN consequent where AND is the intersection operator, and OR the union operator. In most cases, a collection of IF  X  THEN statements with linguistic variables used at the antecedents and at the conse-quents is designed to characterize the fuzzy rules. 4.3. Fuzzy inference engine
Fuzzy inference is a method that interprets fuzzy values from the fuzzification module, and based on a set of fuzzy rules, assigns certain values to the output fuzzy sets. During inference, each rule is compared with the fuzzy values, and when the antecedents are true, the consequents are then triggered and become active. The triggering action is called rule firing. When a rule is fired, the results of the antecedents are then applied to the consequent to form the output fuzzy set, according to the degree specified by the antecedents. This action, also known as rule implication, is carried out for all the fired rules. All fuzzy sets resulting from the implication of all fired rules are then combined, and the final output produces a composite of all fuzzy sets. This process, known as aggregation, or composition, ends in the formation of a combined output fuzzy set, ready to be further processed in the defuzzification module, for the final outputs.
 Crisp Inputs 4.4. Defuzzification module
At the defuzzification module, the combined output fuzzy set produced from the inference engine must be translated into a crisp output value of real-world meaning. From this value, actual control actions can then be obtained and used in real applications.
The translation process is referred to as defuzzification. Many defuzzification techniques exist, but the most popular is the centre of gravity (COG) or the centroid method. To compute the
COG of a given membership function f ( x ), the moment of the function is divided by the area of the function, as defined in (1) below: z  X  where n is the number of the fired rules, x is the membership value at which the membership function f ( x ) reaches the maximum value and z 0 is the COG.

The crisp output variable of the proposed self-tuning FLC is known as the performance index (definition in the next section).
After fuzzy processing, all cars are assigned with certain performance index values. The control output selector (see
Fig. 2 ) selects the highest value and the corresponding car is given necessary command to carry out proper control actions. 4.5. Self-tuning module
The design of a conventional FLC relies very much on the experience and the expertise of the operator, in defining the membership functions and in determining the fuzzy rules. A conventional FLC is subject to the high possibility of repeated redesigns should its performance, owing to system X  X  changing environment, fail to meet the system requirements. Self-tuning module is introduced to overcome this drawback. This module compares the actual measured performance with the desired performance of the system. Based on the compared results, necessary actions are taken to adjust the membership functions and to select the appropriate fuzzy rule set. As seen in Fig. 2 , current average waiting time (AWT) and the difference between the current AWT and the previous AWT of 5min earlier ( D AWT) are used to cause the tuning of the proposed self-tuning FLC. The former determines the adjustment of the membership functions while the latter decides the selection of the proper fuzzy rule set (further explanation in the next section). With this module, more carefully designed membership functions are not required at the initial stage. Course and fine adjustments of the membership functions and proper selection of fuzzy rule sets are automatically made by the module, by basing them on the measured performance of the system (AWT and D AWT), to achieve the control resolutions required and the good performance desired. 5. Proposed self-tuning FLC for elevator group controls
Fig. 3 shows the processes of selecting the most suitable car to answer a hall call through the use of a self-tuning FLC. This paper considers the up X  X own hall call button system. When a hall call is registered, relevant data from all cars in the group are needed for computation of the values of the input variables. The data required from every car are: its present position in the building, motion status, speed, acceleration, jerk, direction of travel, present destination, all other destinations the car has to serve, availability for dispatch and present weight. As mentioned in the previous section, the three input variables used for fuzzy evaluation are the car distance, the number of stops and the car response time. Their definitions are as follows: (1) Car distance: the distance traveled by a car to move from its (2) Number of stops: the number of floors a car has to stop at to (3) Car response time: the time taken by a car to move from its
For every car in the group, the values of the three input variables are calculated based on the data supplied by each car controller. The calculated values of each car are then processed by the self-tuning FLC, and from fuzzy evaluation, a performance index (PI) is assigned to each car. The PI denotes the suitability of the car to answer a hall call at a particular instant. The car with the highest PI value is considered the car most suitable to attend to the hall call. The car is then selected by the control output selector (see
Fig. 2 ), and the corresponding car controller takes necessary actions in response to the command.

In the up X  X own hall call system, hall call assignment to a car can be canceled, and a new assignment can be made to another car. The reassignment module is introduced to implement this task. A reassignment policy is needed owing to the changing values of the data used in calculating the values of the input variables from time to time. Measurement of the PI relies totally on information that is current, and on the assumptions made at a particular time for a particular hall call to be assigned. The PI value might change at another time a few seconds later when a new hall call or car call is made. For the same hall call, the car with the new highest PI value can be different from the car previously assigned. When this happens, reassignment should be allowed to ensure that only the right car that suits the present situation is chosen to answer the hall call.

The most common criterion parameter used in measuring the performance of the elevator control system is waiting time. It is defined as the time taken starting from the activation of the hall call signal (when the hall call button is pressed), until the deactivation of the same signal (when the assigned car arrives at the floor concerned). Besides waiting time, riding time is another potential criterion parameter that can be used to measure the performance. It is defined as the time taken by a car to transport passengers, starting from the moment the car arrives at the source floor to receive passengers, to when it arrives at the destination floor to drop passengers off.

In this work, the self-tuning FLC only exploits the waiting time for its tuning. The riding time is not considered since humans care much more about short waiting time as compared to short riding time ( Koehler and Ottiger, 2002 ). As stated by Barney and dos Santos (1985) , the waiting time is the prime psychological constraint and the riding time is secondary. Reducing the waiting time provides more psychological impact on passenger satisfaction, thus improving service quality. Besides, in a real elevator system, estimating the riding time is not as direct and easy as estimating the waiting time. The waiting time is measured using a timer at the hall call buttons. The timer starts measuring once a hall call signal is given and the waiting time is recorded when the signal is removed. Estimation of the riding time depends on when a passenger enters the car, and when the same passenger exits the same car. The actual controller (car or group) cannot identify the identity of every passenger in every car in the group, unless every passenger is equipped with an electronic identification tag understood by the controller. How-ever, this practice is not common in many buildings as the implementation cost is very high. Even though this can be done for the occupants of the building, it is impossible for the case of visitors who rarely stay in the building. Therefore, it is not possible to correctly estimate the riding time practically and to reliably use it for tuning.

As displayed in Fig. 3 , two important stages affect the output of the self-tuning FLC: calculation of the values of input variables and AWT measurement for tuning. The next section details them. 5.1. Value calculation of input variables
Determination of the values of the three input variables for fuzzy evaluation must not ignore important factors that influence its results. As in computing the car distance, the position and the direction of travel of the car must be known. The car distance can be calculated by comparing the position of the car and its a car to arrive at the hall call floor, there are four possible routes for the up direction and another four for the down direction. First consider the four for up hall call. As can be seen from Fig. 4 , besides the information mentioned above, routes (b) X (d) require additional data for the computation; the highest floor and the lowest floor served by the car for route (b) , and only the lowest floor for routes (c) and (d) . From these, three equations can be derived to find the distance traveled in each case, presented in the following:
For route (a), d  X  p c p e . (2) For route (b), d  X  X  p h p e  X  X  X  p h p l  X  X  X  p c p l  X  . (3) For routes (c) and (d), d  X  X  p e p l  X  X  X  p c p l  X  , (4) where d is the distance traveled, p c the hall call floor position, p the car position, p h the highest floor position and p l the lowest floor position.

The difference between routes (c) and (d) is the different position of the car relative to the hall call floor position.
Regardless of the position, (4) applies to both routes. In the case of the down hall call, the same equations can be rearranged to consider the down direction of the hall call.

For route (e) , by rearranging (2), we obtain d  X  p e p c . (5) For route (f) , by rearranging (3), we obtain d  X  X  p e p l  X  X  X  p h p l  X  X  X  p h p c  X  . (6) For routes (g) and (h) , by rearranging (4), we obtain d  X  X  p h p e  X  X  X  p h p c  X  . (7) Calculation for the number of stops depends on the number of hall calls and the number of car calls a car has to serve before it can reach a hall call floor. All calls, including hall calls and car calls, in between the present position of the car and the hall call floor being considered for assignment, reflect the stops to be made during the journey of the car. By counting the number of these calls, we are actually counting the number of stops. Besides the number of stops, the floor number that corresponds to each stop is also recorded for use later in the computation.

The speed profile of a car is important in determining the car response time. A typical speed profile of an elevator car is shown in Fig. 5 . The speed profile describes the motion status of the car.
When a car starts to move, it enters acceleration mode until it reaches the contract speed. This speed is maintained up to when the car has to stop. Before the car reaches the stop position, it has to slow down for a safe stop at the destination floor. Besides the motion status of the car, other useful information given by the speed profile includes the time the car takes to reach the contract speed, the time the car spends to travel one floor at contract speed, the time taken to decelerate before the car stops, the distance traveled to reach the contract speed and the distance traveled to slow down from the contract speed before the car stops.

Fig. 6 (a) displays the speed profiles a car can follow for various journey distances. Basically, two profile shapes can be defined depending on whether the contract speed v C is reached or not. For a long-journey distance, the contract speed is usually attained, and the speed profile as shown in Fig. 6 (b) then applies. As for the speed profile in Fig. 6 (c), a car traveling a short-journey distance has this profile and most likely, the contract speed is not achieved.
A good understanding of the speed profile is crucial for calculation of the car response time. The car response time comprises both the time taken when the car is traveling and the time spent for loading and unloading passengers during each stop. As shown in Fig. 7 , a journey of two intermediate stops between the source and the destination has three speed profiles. The first stop takes longer than the second one does for passengers to board and alight. To say that from the area estimation of each profile, the car first travels a medium distance before making the first stop at t 1 , is safe and correct. The car continues traveling a short distance and then makes the second stop at t 3 . Next, it travels a long distance before reaching the destination at t there was a hall call registered at the destination and the computation was done when the car was stationary at its original position, the car response time calculated at that particular instant is t 5 . If computation was done again when the car was now positioned at the first stop, then the car response time is t 5 t 2 . For the case when the car was at the second stop, then the car response time is t 5 t 4 . However, if the car was traveling during the computation, then its motion status has to be considered in the estimation of the response time.

Calculation of the car response time is very much influenced basically by the speed profiles during the journey from each stop to a subsequent stop. Knowledge of the number of stop floors enable analysis of the speed profile before each stop and categorization according to the two profile shapes, shown in Fig. 6 (b) and (c). With the speed profiles, the car traveling time between two consecutive stops can be computed. As for the journey before the car makes the first stop, the present motion status must be noted. If the car was moving, i.e., slowing down, accelerating or traveling at the contract speed, only part of the area of the corresponding speed profile before the first stop is then considered for computation of the traveling time. In general, for any speed profile, the following applies in estimating the traveling time: t Car Speed (m/s)
Start Stop Car Speed (m/s) t Second Stop where t sta is the traveling time from when the car is stationary until when it stops, i.e., full area of the speed profile is considered; t is the traveling time from when the car accelerates until when it stops, i.e., a big portion of the area is considered; t traveling time from when the car travels at the contract speed until it stops, i.e., a medium portion of the area is considered (negligible if the contract speed is not achieved); and t traveling time from when the car slows down until when it stops, i.e., a small portion of the area is considered.

Before obtaining the car response time, the car traveling time for each speed profile during the journey are first added to get the total traveling time of the journey. The car response time can be determined by further adding to the total traveling time of the journey, the total stop time for loading and unloading of passengers at all stops. It is computed using t where t resp is the car response time, t tra ,1 the car traveling time before making the first stop ( t sta or t acc or t con or t traveling time before making stops other than the first stop, t the car stop time at each stop including the first stop and n the number of speed profiles during the journey. 5.2. Self-tuning mechanism
In the self-tuning FLC, measured AWT data are exploited to carry out the following: adjustment of the membership functions of the input variables and modification of the set of predefined fuzzy rules employed. The membership functions of the input variables are defined by triangular-shaped functions. Five linguis-tic terms are used to identify the triangles: Very Small ( VS ), Small basically by reshaping the triangles. Fig. 8 describes briefly how tuning of the membership functions is done. Five bounds are of the vertexes of the triangles along the universe of discourse.
Each vertex is equally separated from each other by a length l .By changing l or the middle bound ( U 3 or M ) or both, the membership functions are accordingly adjusted.

Adjustment of l is carried out for the three input variables every time a hall call is needed to be assigned. The calculated crisp values of the input variables of each car are used to derive l . For example, for the car distance, the calculated values of this input variable of all cars are further utilized to compute the average before a comparison is made between the computed average and the minimum and the maximum, to determine l . The same also applies for the number of stops and the car response time in obtaining l . As for the determination of M , measured AWT data are referred to. At the middle bound modifier of the self-tuning FLC (see Fig. 2 ), M thresholds are defined for light, medium, heavy and very heavy traffic conditions according to the desired AWT for each condition. The heavier the traffic conditions, the higher the
AWT and subsequently the M values. These thresholds are constants that can be set by the operator to signal to the self-tuning FLC to make corrections when any of the thresholds is exceeded. Fig. 9 (a) shows how the AWT is used to get a new M value to initiate a correction. In the figure, M C refers to the current
M , and M N is the new M. M C is compared with the current AWT. If the difference between the two is beyond an acceptable tolerance, this indicates that a correction is needed. M N is derived by simply taking the AWT as M N . The process of revising the M value is repeated every 5min and corrections are made if necessary.
The objective of making corrections is to ensure that the resulting AWT after the corrective actions are taken, reduces to a lower value as compared to the previous AWT measured 5min before, or at least, remains within a small tolerance from the last measured AWT. Corrections continue to be carried out as long as the difference between the AWT and M C ( D M ) is large enough that it exceeds certain limits. In short, corrections are aimed at reducing the AWT as much as possible. It should be noted that 1 0 Degree of 
VS 1 0 Degree of 1 0 Degree of this sort of correction is performed for one input variable only, i.e. the car response time. The membership functions of the car response time can be adjusted by varying both l and M . For the number of stops and the car distance, their membership functions are adjusted by changing l only. Determination of M of the membership functions of these two input variables is based on the height of the building, and not the AWT. Since the height is a constant, M also remains unchanged.

In addition to modifying the membership functions of the input variables, tuning is also done by properly selecting an appropriate fuzzy rule set. Six predefined fuzzy rule sets are finalized after hundreds of experiments. Each rule set consists of a different number of rules (between 12 and 19 rules). Each rule is prepared in the IF X  X LSE form with one or more antecedents and a consequent. The antecedents provides the statements about the input variables, i.e. the car distance, the car response time and the number of stops, while the consequent represents the statement about the PI. Examples of such rules are as follows: (1) IF the car distance is short AND the car response time is very (2) IF the car distance is very long, THEN the performance index is
The six predefined rule sets are general rules that can be applied to any traffic condition. None is designed to handle a specific traffic situation. It must be understood that the actual traffic intensity is a mix of different basic theoretically defined traffic patterns. This means that during a period of heavy traffic, one cannot expect 100% heavy traffic in the entire period. One can only expect that 51% or more of the traffic intensity is heavy during the heavy traffic period, i.e. the dominant traffic pattern during this period is the heavy traffic. The rest 49% or less of the traffic intensity can be medium or light traffic flows. This is the reason why the generation of dispatching assignments based on predicted traffic patterns was not so successful. This is also the reason why different dispatching decisions are needed during a period of a particular traffic condition through the use of different rule sets.
The fuzzy rule set selector of the self-tuning FLC (refer to Fig. 2 ) decides the selection of a proper rule set for use in every 5-min interval. The decision is made based on the value of D AWT, defined as the difference between the current AWT and the previous AWT measured 5min earlier. When D AWT value is too large, exceeding some limit, a new set of fuzzy rules is selected and applied for 5min. During the selection process, all rule sets are first tested and the one producing the highest PI is chosen. After 5min end, a revision is made to examine the suitability of the rule set used. If D AWT value is small, the same rule set applies for the next 5min. Otherwise, a new rule set is selected. Fig. 9 (b) describes the process flow in selecting the rule set. It should be noted that the rule set selector is not meant to change the statement of the rule, by adding or removing or replacing the antecedents or the consequent. It only selects the most appropriate rule set from among the six predefined rule sets based on D AWT. This is to reduce the processing time as in a critical application whereby fast response time is required such as elevator control systems, practical and less complicated approaches are highly preferable.
Modifications of the membership functions through the change of the middle bound and selection of a suitable fuzzy rule set are done periodically (once in 5 min). Five-minute interval is good enough to collect adequate information to detect any changes in the AWT especially during the heavy traffic period. Tuning by the proposed approach is practical and easy to implement in the real applications. No complicated search and optimization techniques are used to reduce complications in the real-time implementation. Even though other tuning methods employing complex optimization algorithms such as genetic algorithms and neural networks are able to produce encouraging simulation results, the fact that they are not reported to be exactly implemented in the actual elevator control system hints that they may not be practical. For example, the work conducted by Cortes et al. (2004) affirms that genetic algorithms are valuable tools with a great potential in the control of elevator systems. However, the report also gave a note that implementa-tion-wise, difficulties will be encountered as the algorithms are iterative and can take very much time of execution. In another work conducted by Crites and Barto (1998) , a successful training of neural networks took 60,000 h to achieve considerable improvement in the AWT. Again, this approach is impractical and inefficient in the use of computational resources. The elevator group controller must respond fast in making the right dispatching decisions so that the controller X  X  response time and (then) the waiting time can be minimized. Practical solutions are needed for real-time implementation, thus a different tuning approach is presented here. 6. Simulation results and analysis
Computer simulation is carried out as a method to test the self-tuning FLC and to study its performance. For this purpose, a software simulator was designed and developed in Visual C#, supported with a graphical user interface. Several constraints regarding the behavior of the car were imposed in the simulation: (1) Only cars moving upward can serve the up hall calls, and vice versa. (2) A car can reverse its direction only when there are no more calls to be served in its direction of travel. (3) A car must not pick up passengers when it is already full. (4) A car must stop at the destination floor registered as a car call, but not necessarily at the destination floor registered as a hall call. (5) A car can be reassigned in case of unexpected delays.
The focus of the simulation is extreme cases, i.e. heavy or very heavy traffic conditions. In these conditions, the self-tuning FLC can be tested well and its effectiveness, robustness and reliability can be satisfactorily verified. Therefore, up peak, down peak and lunch peak traffic conditions are selected. During up peak, a majority of the passengers want to go to the upper floors from the ground floor, while during down peak, the opposite happens. For lunch peak, heavy traffic exists in both up and down directions. To have meaningful analysis of the controller X  X  performance, three simulation conditions are investigated. Each condition is chara-cterized by parameters whose values are different from one condition to another. Table 1 summarizes further details of the three simulation conditions. Besides AWT, another performance criterion is also evaluated, which is the average riding time (ART).
For comparison, besides the fuzzy logic algorithm implemen-ted in the self-tuning FLC, two other benchmark algorithms adopted in conventional elevator group controllers are also simulated, i.e. nearest car algorithm and earliest car algorithm.
The two algorithms are selected because of their common implementation in the actual controllers as compared to other complicated and computational expensive algorithms which are uncommonly practiced. As mentioned earlier, the nearest car algorithm measures the car distance and the car with the shortest distance from the hall call position (nearest car to arrive) is chosen for assignment. The earliest car algorithm analyzes the car response time and the car with the shortest response time is selected (earliest car to arrive). For the fuzzy logic algorithm with a self-tuning scheme, priority for the assignment is based on an optimized balance of the shortest car distance, the shortest car response time and the least number of stops. Even though the benchmark algorithms appear to be trivial, their practical significance is actually high because of the less processing time spent by the group controller to arrive at the dispatching decisions. It must be understood that in the actual controller, reducing the processing time is also a crucial factor that helps to minimize the waiting time. Late in making dispatching decisions because of the long processing time can cause a serious harm to the waiting time.

Figs. 10 and 11 present the simulation results in graphical forms for the three peaks. Overall results represent the average data computed by considering the results from the three traffic conditions. To summarize the improvements made by the self-tuning fuzzy logic algorithm over the other two conventional algorithms for the two performance criteria, Table 2 is given.
Among the three conditions simulated, the results from Condition 3 show the biggest improvement. In general, AWT and ART are very much improved during down peak. As high as 66.3% overall improvement is recorded in AWT when compared with the nearest car algorithm. Compared with the earliest car algorithm, a 34.1% improvement is shown in the same performance criterion.
From the results of Condition 3, the highest points computed in the ART are 36.1% and 20.6%. The former is obtained by considering the results of the nearest car algorithm as the benchmark, the latter is based on Condition 3. As for Condition 2, modest improvements are seen while Condition 1 shows lesser improvements achieved.
 0 10 20 30 40 50 60 70 80 AWT (s) 0 30 60 90 120 150 180 210 240 AWT (s) 0 50 100 150 200 250 300 350 400 AWT (s)
It is noted that the conditions imposed in Condition 3 include higher values of contract speed, acceleration and jerk, and the biggest number of floors as compared with Conditions 1 and 2.
From the simulation results, it is observed that the improvements made are the most significant in Condition 3. In other words, the self-tuning FLC performs very well in tall buildings with high values of the contract speed, acceleration and jerk applied to the cars during heavy and very heavy traffic situations, particularly during the down peak period. 7. Conclusion
This work investigated and analyzed a self-tuning FLC application based on its measured performance in elevator control systems. AWT is the measured performance criterion used to adjust the middle bound of the membership functions. The other performance criterion D AWT is computed in selecting the appropriate set of fuzzy rules for the fuzzy assessment. Five-minute periodic revision is done to initiate tuning if necessary.
Computer simulation was run for up peak, down peak and lunch peak traffic conditions and the results showed satisfactory overall improvement in AWT and ART. Owing to the advantages offered by the tuning approach in terms of its simplicity and effectiveness, the proposed controller provides a highly potential alternative solution to the elevator group control problems. The fact that extensive computation only happens once every 5min for tuning without the use of complicated optimization techni-ques makes the controller attractive enough for a real-time implementation in the actual elevator system.
 Acknowledgements This work was fully supported by the Centre of Research for Power Electronics, Drives, Automation and Control, University of Malaya (UMPEDAC) and was partially funded by University of Malaya Short-Term Research Grant No. FS179/2007C.
 References ART (s) 100 120 140 ART (s) 100 125 150 175 ART (s)
