 Separation of connected components from a graph with dis-connected graph components mostly use breadth-first search (BFS) or depth-first search (DFS) graph algorithms. Here we propose a new algebraic method to separate disconnected and nearly-disconnected components. This method is based on spectral graph partitioning, following a key observation that disconnected components will show up, after properly sorted, as step-function like curve in the lowest eigenvectors of the Laplacian matrix of the graph. Following an pertur-bative analysis framework, we systematically analyzed the graph structures, first on the disconnected subgraph case, and second on the effects of adding edges sparsely connect-ing different subgraphs as a perturbation. Several new re-sults are derived, providing insights to spectral methods and related clustering objective function. Examples are given illustrating the concepts and results our methods. Com-paring to the standard graph algorithms, this method has the same O(IE ] + IVllog(lVI)) complexity, but is easier to implement (using readily available eigensolvers). Further more the method can easily identify articulation points and bridges on nearly-disconnected graphs. Segmentation of a real example of Web graph for query amazon is given. We found that each disconnected or nearly-disconnected com-ponents forms a cluster on a clear topic. 
Graph segmenta.tion has wide range of applications. At one end is the near-regular graphs, the mesh of a 2D surface of an airfoil or 3D volumes of an engine cylinder, which are partitioned into subgraphs for a distributed memory parallel computations. At another end is the graphs generated from the World Wide Web. These graphs are highly irregular, and node degrees (both in-degrees and out-degrees) vary requires prior specific permission and/or a fee. KDD 01 San Francisco CA USA Copyright ACM 2001 1-58113-391-x/01/08...$5.00 dramatically, from zero on millions of individual webpages to millions on a few popular websites. 
Graphs generated from the retrieved Web pages of use queries or a~s the results of a web crawl often contain many disconnected and nearly-disconnected components. This fact is clearly shown in a. large web structure analysis by Broder et al [4]. The disconnected components (called Weakly Con-nected Components there, because directions of links are ignored) follow power law distribution. In our small scale experiments, there is a large number of disconnected com-ponents in each retrieved web graph for a user query (see later section). 
Separation of web graph into disconnected and nearly-disconnected components is very similar to clustering of web pages. Methods based on in-link and out-link relationship [18, 2], based max-flow [13], and based on text+link+co-citation [17] have been proposed to identify cluster or com-munities. Clustering of web pages helps to identify central topic for a query and therefore is very useful for web infor-mation retrieval and analysis. Besides clustering, there are also a large number of web link/connectivity information analyses [19, 24, 20, 22, 5]. 
For these reasons, separation of disconnected and nearly-disconnected components is useful to discover clusters of web communities and connectivity analysis, as an important ap-plication of a general method for graph segmentation prob-lem. 
Standard method to find disconnected components are breadth-first search (BFS) or depth-first-search (DFS) al-gorithms [8, 29]. BFS has been used in discovering the Strongly Connected Components (SCC, directions of hyper-links are taken into account) and Weakly Connected Com-ponents [4]. A large number of graph algorithms for finding connected components exist [28, 1, 14, 15]. 
In this paper, we propose a new, algebraic method for finding disconnected and nearly-disconnected components, such as those illustrated in Figure 1. The method follows the spectral graph partitioning framework, first developed by Donath and Hoffman [10] and Fiedler [11, 12], and recently populated by the work of Pothen, Simon and Liu [25]. 
It is known [3, 11, 25] that the lowest eigenvalue of Lapla-
Figure 1: (a) Two dense subgraphs connected by two bridges (edges era, e~t). Nodes p, q, s, t are called articulation points. (b) Three dense subgraphs con-nected by 3 bridges. cian matrix of graph G has multiplicity of K if G has K dis-connected components (more rigorously, K connected com-ponents of a disconnected graph). Our work is motivated by a key observation that disconnected components wilt show up as step-function like curve in the lowest eigenvectors, and thus can be easily identified. Furthermore, nearly-disconnected components (see Figure 1), will also show up as step-function like curve, although somewhat snmother. These new obser-vations lead to a new class of algebraic algorithms to find these components. Given an undirected weighted graph G = (V, E) with ad-jacency (weight) matrix W, the Laplacian matrix is defined as L = D -W where D is the diagonal matrix containing the node degrees. The above simple fact can be stated as: 
Theorem. If a graph G has K disconnected components, then the lowest K eigenvalues of Laplacian matrix L are zero: ),i = 0, i = 1, ..  X  , K. Here Ly, = )~iYi. We point out that the eigenvectors corresponding to the first K zero eigenvalues have step-function like curves if properly indexed, which can be used to identify the dis-connected components. For simplicity, we assume G has 
K = 2 disconnected components. We index the nodes for subgraph GA = GA(A, EA) first and the nodes for subgraph 
GB = GB(B, EB) second. With this indexing, W has a block form, where WAn contains the edges connecting the two subgraphs GA, GB. When GA, GB are disconnected, WAS = 0, and the Laplacian matrix 1 has the block form: where DAA = diag(WAAe), DuB = diag(~st~e), where e = (1,... , 1) r with appropriate dimension. Let us define two case letters represent vectors. indicator vectors: e(')=(0,...,0,1,...,1) r, x (B)=e(B)/]V/~, for each subgraph (here X (A), X (B) are normalized to l). 
Clearly, (DAA--WAA)X (A) = 0, and (DoB-WB~)x (B) = 0. Thus L has two zero eigenvalues. In general, for any real a, b, the following vector is an eigenvector of  X  with A = 0: Ly = 0. Now, suppose we do not know whether graph G has 2 disconnected compo-nents. If we calculate the first eigenvector vl, and sort the nodal values and plot it, we will see a step-function, since fl'om Eq.(4) where al = a/V/~,bl = b/~V/'~]. If there are 3 discon-nected components, we have yj = (al,... ,an,b1,... ,hi,el,... ,cl) T, etc. 
It is possible that two of the coefficients a, b, c, etc, are equal; in this case, the two components will be treated as one. Therefore, we need to check each identified component to see if it is a disconnected subgraph. Thus we have the following algorithm. 
Algorithm DC (disconnected components). 1. Compute the lowest eigenvector yl of L. 2. Sort yl(i), i = l,... ,n. If yl is astep fi~nction, there 3. If yl is not a step function, i.e., Yl = e, there is no 
Using Lanczos method, the calculation of the lowest eigen-value and eigenvector pairs will converge very quickly [23]. A fast software for this calculation is available online (http://www.nersc.gov/~kewu/planso.html). Theoverall com-putation complexity for this algorithm is O(IE I + IV I + 
Many web subgraph components are nearly-disconnected, i.e., the dense subgraphs are sparsely connected only by a few bridges (edges) between them, as illustrated in Figure 1. The algebraic method can easily detect those bridges, whereas the standard graph Mgorithms can not easily do so. Consider the situation of s bridges between two subgraphs 
A, B, ms in Figure l(a). In this case, WAs is nonzero, and or cut edges (the weight on an edge can be any positive value). where 
We are interested in finding the two lowest eigenvalues and eigenvectors of the following Laplacian matrix, where L ( X ) is given by Eq.(3) for the disconnected compo-nents and L O) is a small perturbation due to the s bridges: where DAS = diag(~VAse). Now we solve L (1) in the basis of (x (A), x(B)), so L (1) is transformed into and Eq.(3) is written as A little calculation gives Equation ~(1)~(1) = A(1)~,(1) has two eigenvMues Thus the eigenvalues for entire problem are The corresponding eigenvectors are Thus the eigenvectors for the entire problem are within the accuracy of perturbation theory. (Details of this type of perturbation analysis can be found in [21, 26].) 
Figure 2 shows the solution Y2 for the graph as in Figure l(a). The solution is very much like a step function, as we expected. The computed A2 = 0.148 (vs theoretical value of Jrcut = 0.166). 
It can be shown easily that Y2 is the solution of minimizing the following function subject to the condition 0 = yTyl = yTe and A2 is the minimum value. This implies that adjacent nodes will have close nodal values. Thus in Figure l(a), nodal value yp of articulation point p will be close to yq on articulation point q. This means yp will be pulled towards the nodal values of subgraph B. Similarly, yq will be pulled towards the nodal values on subgraph A. These trends are clearly shown in Figure 2. 0"1 f 0.05 -0.1 f -0.2 ; 1'0 11 ;0 ;~ ;0 A ,'0 A ~0 Figure 2: Computed y2 for the nearly-disconnected graph with two bridges. Two subgraphs have 20 and 30 nodes respectively. Top curve is Y2 in origi-nal node index. Notice that node values on the four articulation points (nodes 10, 15, 24, 32) clearly dif-fer from the rest in the same subgraph. Bottom curve is the sorted Y2. Note that articulation points move to the jumping area, therefore could be easily identified. 
For K &gt; 3 multiple subgraphs, which are sparsely con-nected by a few bridges, the situation remains the same. After sorting, the nodal value plot of y2 will be a multi-step function, and the articulation points will move to the jump areas, and can be easily identified. Figure 3 shows the situation for 3-subgraph case. 
Overall, the situations for nearly-disconnected components are one-to-one correspondence to those of disconnected com-ponents. The only difference is that the exact step function in the case of disconnected components become a smooth but shaxp step-function, and the articulation points are lo-cated around the jumps. 
With these analyses, the nearly-disconnected components can be detected by the following algorithm: 
Algorithm NDC (nearly-disconnected components). 1. Compute the second lowest eigenvalue and eigenvector 2. If A2 is small, but nonzero, there are nearly-disconnected 
Algorithm NDC can be combined with algorithm DC to separate the components. Before discussing application of this algorithm to the web graph, we turn to the connection to spectral graph partitioning. As we will see, the results in this section is an explicit construction of Fiedler vector, in the near degenerate case when A.; is very close to zero. -0.2 ;o ;0 ,'o ~o ;0 ;o 0'0 ,o Figure 3: Computed y2 for 3 nearly disconnected subgraphs (see Figure l(b)). After sorting y~, the six articulation points move to the jumping areas. 
Algorithm NDC is an extension of spectral graph parti-tioning method in the case of nearly-disconnected compo-nents. The second lowest eigenvalue is called the Fiedler value and the eigenvector is called the Fiedler vector. 
Our perturbative solution to Fielder value, Eq.(9), is iden-tical to the ratio cut criteria [6, 16], [where they use the objective function J = s/IAIIBI which can be written as since IV I = IAI + IBI is fixed]. This new results further strengths the connection between ratio-cut and Fiedler vec-tor of ( D -W)y = Ay. 
We could equally wel] start with the generalized eigenvec-tor equation (D -W)y = ADy and use associated eigenvec-tor in our method. This equation can be written as where z = Da/Zy. L is called normalized Laplacian [7, 27]. When the graph has K disconnected components, L will have block diagonal form, ~(0) = diag(LAA, ~,BB, Lee) for K = 3. Solutions to ~(0), x(A), X(B),X(C), can be similarly written down. When the K subgraphs are sparsely con-nected, these connections are contained in ~0), which can be viewed as a perturbation: L = ~(0) + ~,0). Following through the similar analysis, we will get either depending on how D is approximated. Here deg(A) = ~"~ieA d, of the subgraph A, and is the sum of edge weights and node weights in A and is called the weight of the subgraph A. Note that J, cut is the objective fimction for normalized cut criteria [27], and ,lracut is the objective function for rain-max cut criteria [9]. 
The web graph dataset is obtained in the following way [18]. We first submit a query to a search engine, which re-turns as query result a list of URLs with highest ranked webpages. We only take top 120 of returned URLs which form the root set. The root set is expanded into a neighbor-hood set of webpages by including all webpages that point to a webpage in the root set and those pointed to by a web-page in the root set. The hyperlinks between these webpages form a directed link graph, from which the adjacency matrix is extracted. The experiment dataset is retrieved for query amazon, with total 2294 webpages (URLs). 
Using algorithm DC, we found the graph has 16 discon-nected components, with 2181, 27, 18, ... nodes in each component respectively. This graph is dominated by a sin-gle component. It is interesting to note that at, this small scale (2294 nodes), the distribution of component sizes is very similar to that of a very large web graph of Broder et al [4]. In their web graph of 200 million nodes, the largest weak connected component (WCC) has 186 million nodes, the second WCC has 60 thousands nodes, etc. 
Below, to save space, we apply HITS algorithm [18] on each component (we sometimes call it cluster) to find the top authorities and list them. We first list the results on the 2nd and 3rd largest disconnected components (compo-nents A, B below), and discussed in details on separating the 1st largest 2181-node disconnected components into several nearly-disconnected sub-components (C,D,E,F,G,H). Component A: www. int ernext, com. br/ariau This is a upscale hotel in the middle of Amazon region. This disconnected component has 27 webpages, where every other webpage points to this hotel webpage. Most webpages are on safaris, ecology, etc. Component B: www. lat ingrocer, com www. lat ingrocer, com/Pages/customer, html www. lat ingrocer, com/Pages/privacy, html www. lat ingrocer, com/Pages/contact, html This disconnected component contains all webpages on a single site. 
When applying Algorithm NDC on the large disconnected component with 2181 nodes and separating it into nearly-disconnected sub-components, we get 4 sub-components: Component C: This component is about Star Wars alliance, a commercial site derived from the movie. The query word amazon hap-pens to be mentioned in this webpage. Component D: www. amazoncity, com/spiderwoman/ This cluster is about female lesbian issue. Component E: misc. langenberg, com/ cooking, langenberg, com/ shipping, langenberg, com/ money, langenberg, com/ weather, langenberg, com/ This component contains all webpages on a single commer-cial site. The 4th sub-component is a large one, with 1819 nodes. We applied DNC algorithm, separating it into 2 nearly-disconnected level 2 sub-components, cutting at node 1727, see sorted nodal values in Figure 4. Figure 5 shows the adja-cency matrix with the sorted node index. One can clearly see that there are 3 bridges connecting the two nearly-disconnected sub-components. This illustrates that our algorithm can easily identify the hyperlinks between two nearly-disconnected components. Figure 4: Details of nodal values of the Fiedler vec-tor for the 1819-node component, 
Based on sorted nodal values (Figure 5), we cut this com-ponent further into two sub-components, one large sub-component has 1727 nodes. The smaller sub-component has 92 nodes, among them the most informative nodes are Component F: uuw. amazon, org/ uw~. amazonf embks, tom/ igc. ape. org/women/bookst ores/ www. t elepor t. com/~rocky/queer, shtml www. advocate, com/html/gaylinks/resources.html This component is on female related issues: bi-sexuaJity and female books. 
The 1727-node large sub-component can still be separated into two nearly-disconnected level 3 sub-components, with 7 bridges connecting these two components. They are Component G: Figure 5: Details of the adjacency matrix of the 1819-node component when split into two nearly-disconnected sub-components (A in upper-left di-agonal block and B in lower-right diagonal block). Node index are same as in Figure 4. Solid lines indicate the separator lines. The 3 points in the off-diagonal blocks represent 3 bridges connecting the two sub-components: node 1727 in A has three hy-perlinks to nodes 1729, 1730, 1733 in subgraph B. These three are the homepages of online bookstore ama-zon.corn, and its subsidiaries in UK and in Germany. Cornponent H: s I. amazon, com/exec/varzea/subst/home/home... All three authorities listed here are webpages of a large on-line auction company formed by Sothebys and amazon.com. 
We note that all the components separated out by us-ing connectivity information (adjacency matrix) only. These nearly same clusters are also identified using spectral parti-tion based on normalized cut using on combined information of link connectivity, text and co-citation [17]. It appears that the connectivity information is the dominant factor. 
Based on theoretical analysis, we proposed a new class of algebraic methods for separating densely connected com-ponents from a disconnected or nearly-disconnected graph. Although standard graph algorithms can readily separate disconnected components, they have difficulty to deal with nearly-disconnected components, whereas the algebraic meth-ods deal with nearly-disconnected components in nearly iden-tical way as with disconnected components, exhibiting some advantages over standard graph algorithms. 
We provide several examples to illustrate some of the con-cepts and advantages of the proposed algorithms. We give a complete analysis of a web graph retrieved for a query word amazon. The separated components are found to be quite informative: each component represents a clear topic area. 
We also discuss the relation to spectral graph partition and provided a new perspective on the objective function of the graph partitionir,g. In particular, from the pertur-bative analysis, we derived the ratio cut [6, 16], normalized cut [27], and rain-max cut [9] objective functions from the (normalized) Laplacian matrix of a graph. The perturbative framework, starting from disconnected subgraphs as diago-nal blocks in the Laplacian matrix and adding sparse edge connections (bridges) between subgraphs as perturbations, provides a systematical way to analyze the structure of tlhese graphs. 
Identifying densely-connected components in nearly -disconnected graphs has a broad range of applications be-clustering using a graph model, i.e., the similarity between data objects are represented by the graph weight matrix W, and the dense subgraphs are clusters. In fact, the dense com-ponents we found in the web graph are clearly web clusters (communities). 
One issue in separating nearly-disconnected component is when to stop the recursive iterations. This is problem de-pendent. One may set a threshold for the cutsize s(A,B) such as 3 bridges. Alternatively one may set a threshold for the objective function Jr X ~t, dncul or Jmcut az a clustering problem. We mention that Jm X ~t satisfies a rain-max clus-tering principle --minimizing the similarity between clus-ters, s(A, B), and maximizing the similarities within clusters W(A), W(B). In experiments, J,-o X ~t appears to give more balanced clusters [9]. Acknowledgements. This work is supported in part by Office of Science, Office of Laboratory Policy and Infras-tructure, of the U.S. Department of Energy under contract DE-AC03-76SF00098 through an LDRD grant in LBL. [1] B. Awerbuch and Y. Shiloach. New connectivity and [2] K. Bharat and M. R. Henzinger. Improved algorithms [3] N. Biggs. Algebraic Graph Theory. Cambridge Univ. [4] A. Broder, t~ Kumar, F. Maghoul, P. Raghavan, [5] S. Chakrabarti, B. E. Dom, and J. M. Kleinberg. [6] C.-K. Cheng and Y.A. Wei. An inlproved two-way [7] F.R.K. Chung. Spectral Graph Theory. Amer. Math. [8] T.H. Cormen, C.E. Leiserson, and R. L. Rives. [9] C. Ding, X. He, H. Zha, M. Gu, and H. Simon. [10] W.E. Donath and A. J. Hoffman. Lower bounds for [11] M. Fiedler. Algebraic connectivity of graphs. Czech. [12] M. Fiedler. A property of eigenvectors of non-negative [13] G. W. Flake, S. Lawrence, and C. L. Giles. Efficient [14] H. Gazit. An optimal randomized parallel algorithm [15] J. Griener. A comparison of data-parallel algorithms [16] L. Hagen and A.B. Kalmg. New spectral methods for [17] X. He, H. Zha, C. Ding, and H.D. Simon. Web [18] J. M. Kleinberg. Authoritative sources in a [19] R. R. Larson. Bibliometrics of the world wide web: an [20] Y. Li. Towards a qualitative search engine. IEEE [21] J. Mathews and R.L. Walker. Mathematical Methods [22] L. Page. Pagerank: bring order to the web. Stanford [23] B. N. Parlett. The Symmetric Eigenvalue Problem. [24] P. Pirolli, J. Pitkow, and R. Rao. Silk from a sow's [25] A. Pothen, H. D. Simon, and K. P. Lion. Partitioning [26] L.I. Schiff. Quantum Mechanics, 3rd ed. McGraw-Hill, [27] J. Shi and J. Malik. Normalized cuts and image [28] Y. Shiloach and U. Vishkin. An o(log n) parallel [29] R. E. Tarjan. Depth-ilrst search and lineal' graph 
