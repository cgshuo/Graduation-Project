 Language Models (LMs) are key components in most statistical machine translation systems, where they play a crucial role in promoting output fluency.
Standard n-gram generative language models have been extended in several ways. Generative factored language models (Bilmes and Kirchhoff, 2003) represent each token by multiple factors  X  such as part-of-speech, lemma and surface form X  and capture linguistic patterns in the target language at the appropriate level of abstraction. Instead of estimating likelihood, discriminative language mod-els (Roark et al., 2004; Roark et al., 2007; Li and Khudanpur, 2008) directly model fluency by casting the task as a binary classification or a ranking prob-lem. The method we propose combines advantages of both directions mentioned above. We use factored features to capture linguistic patterns and discrim-inative learning for directly modeling fluency. We define highly overlapping and correlated factored features, and extend a robust learning algorithm to handle them and cope with a high rate of label noise.
For discriminatively learning language models, we use confidence-weighted learning (Dredze et al., 2008), an extension of the perceptron-based on-line learning used in previous work on discrimi-native language models. Furthermore, we extend confidence-weighted learning with soft margin to handle the case where training data labels are noisy, as is typically the case in discriminative language modeling.
 The rest of this paper is organized as follows. In Section 2, we introduce factored features for dis-criminative language models. Section 3 presents confidence-weighted learning. Section 4 describes its extension for the case where training data are noisy. We present empirical results in Section 5 and differentiate our approach from previous ones in Section 6. Finally, Section 7 presents some con-cluding remarks. Factored features are n-gram features where each component in the n-gram can be characterized by different linguistic dimensions of words such as sur-face, lemma, part of speech (POS). Each of these dimensions is conventionally referred to as a factor .
An example of a factored feature is  X  X ick PRON up X , where PRON is the part of speech (POS) tag for pronouns. Appropriately weighted, this feature can capture the fact that in English that pattern is of-ten fluent. Compared to traditional surface n -gram features like  X  X ick her up X ,  X  X ick me up X  etc., the feature  X  X ick PRON up X  generalizes the pattern bet-ter. On the other hand, this feature is more precise POS Extended POS Noun SingNoun, PlurNoun Pronoun Sing3PPronoun, OtherPronoun Verb InfVerb, ProgrVerb, SimplePastVerb, Table 1: Extended tagset used for the third factor in the proposed discriminative language model. than the corresponding POS n -gram feature  X  X ERB PRON PREP X  since the latter also promotes unde-sirable patterns such as  X  X ick PRON off X  and  X  X o PRON in X . So, constructing features with compo-nents from different abstraction levels allows better capturing linguistic patterns.

In this study, we use tri-gram factored features to learn a discriminative language model for English, where each token is characterized by three factors including surface, POS, and extended POS. In the last factor, some POS tags are further refined (Table 1). In other words, we will use all possible trigrams where each element is either a surface from, a POS, or an extended POS. Online learning algorithms scale well to large datasets, and are thus well adapted to discrimina-tive language modeling. On the other hand, the perceptron and Passive Aggressive (PA) algorithms 1 (Crammer et al., 2006) can be ill-suited for learn-ing tasks where there is a long tail of rare significant features as in the case of language modeling.
Motivated by this, we adopt a simplified version of the CW algorithm of (Dredze et al., 2008). We in-troduce a score , based on the number of times a fea-ture has been obseerved in training, indicating how confident the algorithm is in the current estimate w i for the weight of feature i . Instead of equally chang-ing all feature weights upon a mistake, the algorithm now changes more aggressively the weights it is less confident in.

At iteration t , if the algorithm miss-ranks the pair of positive and negative instances ( p t , n t ), it updates the weight vector by solving the optimization in Eq. (1): w t +1 = arg min w where  X  t =  X  ( p t )  X   X  ( n t ) ,  X  ( x ) is the vector rep-resentation of sentence x in factored feature space, and  X  t is a diagonal matrix with confidence scores.
The algorithm thus updates weights aggressively enough to correctly rank the current pair of instances (i.e. satisfying the constraint), and preserves as much knowledge learned so far as possible (i.e. min-imizing the weighted difference to w t ). In the spe-cial case when  X  t = I this is the update of the Passive-Aggressive algorithm of (Crammer et al., 2006).

By introducing multiple confidence scores with the diagonal matrix  X  , we take into account the fact that feature weights that the algorithm has more confidence in (because it has learned these weights from more training instances) contribute more to the knowledge the algorithm has accumulated so far than feature weights it has less confidence in. A change in the former is more risky than a change with the same magnitude on the latter. So, to avoid over-fitting to the current instance pair (thus gener-alize better to the others), the difference between w and w t is weighted by confidence matrix  X  in the objective function.
 To solve the quadratic optimization problem in Eq. (1), we form the corresponding Lagrangian: L ( w ,  X  ) = where  X  is the Lagrange multiplier corresponding to the constraint in Eq. (2). Setting the partial deriva-tives of L with respect to w to zero, and then setting the derivative of L with respect to  X  to zero, we get: Given this, we obtain Algorithm 1 for confidence-weighted passive-aggressive learning (Figure 1). In the algorithm, P i and N i are sets of fluent and non-fluent sentences that can be contrasted, e.g. P i is a set of fluent translations and N i is a set of non-fluent translations of a same source sentence s i . Algorithm 1 Confidence-weighted Passive-Aggressive algorithm for re-ranking.

Input: Tr = { ( P i , N i ) , 1  X  i  X  K } w 0  X  0 , t  X  0 for a predefined number of iterations do return w t
The confidence matrix  X  is updated following the intuition that the more often the algorithm has seen a feature, the more confident the weight estimation becomes. In our work, we set  X  ii to the logarithm of the number of times the algorithm has seen feature i , but alternative choices are possible. In many practical situations, training data is noisy. This is particularly true for language modeling, where even human experts will argue about whether a given sentence is fluent or not. Moreover, effective language models must be trained on large datasets, so the option of requiring extensive human annota-tion is impractical. Instead, collecting fluency judg-ments is often done by a less expensive and thus even less reliable manner. One way is to rank trans-lations in n -best lists by NIST or BLEU scores, then take the top ones as fluent instances and bottom ones as non-fluent instances. Nonetheless, neither NIST nor BLEU are designed directly for measuring flu-ency. For example, a translation could have low NIST and BLEU scores just because it does not con-vey the same information as the reference, despite being perfectly fluent. Therefore, in our setting it is crucial to be robust to noise in the training labels.
The update rule derived in the previous section al-ways forces the new weights to satisfy the constraint ( Corrective updates): mislabeled training instances could make feature weights change erratically. To increase robustness to noise, we propose a soft mar-gin variant of confidence-weighted learning. The optimization problem becomes: arg min where C is a regularization parameter, controlling the relative importance between the two terms in the objective function. Solving the optimization prob-lem, we obtain, for the Lagrange multiplier: Thus, the training algorithm with soft-margins is the same as Algorithm 1, but using Eq. 7 to update  X  instead. We empirically validated our approach in two ways. We first measured the effectiveness of the algorithms in deciding, given a pair of candidate translations for a same source sentence, whether the first candi-date is more fluent than the second. In a second ex-periment we used the score provided by the trained DLM as an additional feature in an n -best list re-ranking task and compared algorithms in terms of impact on NIST and BLEU. 5.1 Dataset The dataset we use in our study is the Spanish-English one from the shared task of the WMT-2007 workshop 2 .

Matrax, a phrase-based statistical machine trans-lation system (Simard et al., 2005), including a tri-gram generative language model with Kneser-Ney smoothing. We then obtain training data for the dis-criminative language model as follows. We take a random subset of the parallel training set containing 50,000 sentence pairs. We use Matrax to generate an n -best list for each source sentence. We define ( P i , N i ) , i = 1 . . . 50 , 000 as: P i = { s  X  nbest i | NIST ( s )  X  NIST  X  i  X  1 } (8)
N i = { s  X  nbest i | NIST ( s )  X  NIST  X  i  X  3 } (9) Baseline model 0.4720 Baseline + DLM0 0.4290 Baseline + DLM1 0.4183 Baseline + DLM2 0.4005 Baseline + DLM3 0.3803 Table 2: Error rates for fluency ranking. See article body for an explanation of the experiments. where NIST  X  i is the highest sentence-level NIST score achieved in nbest i . The size of n -best lists was set to 10. Using this dataset, we trained dis-criminative language models by standard percep-tron, confidence-weighted learning and confidence-weighted learning with soft margin.

We then trained the weights of a re-ranker using eight features (seven from the baseline Matrax plus one from the DLM) using a simple structured per-ceptron algorithm on the development set.

For testing, we used the same trained Matrax model to generate n -best lists of size 1,000 each for each source sentence. Then, we used the trained dis-criminative language model to compute a score for each translation in the n -best list. The score is used with seven standard Matrax features for re-ranking. Finally, we measure the quality of the translations re-ranked to the top.

In order to obtain the required factors for the target-side tokens, we ran the morphological ana-lyzer and POS-tagger integrated in the Xerox Incre-mental Parser (XIP, Ait-Mokhtar et al. (2001)) on the target side of the training corpus used for creat-ing the phrase-table, and extended the phrase-table format so as to record, for each token, all its factors. 5.2 Results In the first experiment, we measure the quality of the re-ranked n -best lists by classification error rate. The error rate is computed as the fraction of pairs from a test-set which is ranked correctly according to its fluency score (approximated here by the NIST score). Results are in Table 2.

For the baseline, we use the seven default Ma-trax features, including a generative language model score. DLM* are discriminative language mod-els trained using, respectively, POS features only Baseline model 6.9683 0.2704 Baseline + DLM0 6.9804 0.2705 Baseline + DLM1 6.9857 0.2709 Baseline + DLM2 7.0288 0.2745 Baseline + DLM3 7.0815 0.2770 Table 3: NIST and BLEU scores upon n -best list re-ranking with the proposed discriminative language mod-els. (DLM 0) or factored features by standard percep-tron (DLM 1), confidence-weighted learning (DLM 2) and confidence-weighted learning with soft mar-gin (DLM 3). All discriminative language models strongly reduce the error rate compared to the base-line (9.1%, 11.4%, 15.1%, 19.4% relative reduc-tion, respectively). Recall that the training set for these discriminative language models is a relatively small subset of the one used to train Matrax X  X  inte-grated generative language model. Amongst the four discriminative learning algorithms, we see that fac-tored features are slightly better then POS features, confidence-weighted learning is slightly better than perceptron, and confidence-weighted learning with soft margin is the best (9.08% and 5.04% better than perceptron and confidence-weighted learning with hard margin).

In the second experiment, we use standard NIST and BLEU scores for evaluation. Results are in Ta-ble 3. The relative quality of different methods in terms of NIST and BLEU correlates well with er-ror rate. Again, all three discriminative language models could improve performances over the base-line. Amongst the three, confidence-weighted learn-ing with soft margin performs best. This work is related to several existing directions: generative factored language model, discriminative language models, online passive-aggressive learning and confidence-weighted learning.

Generative factored language models are pro-posed by (Bilmes and Kirchhoff, 2003). In this work, factors are used to define alternative back-off paths in case surface-form n-grams are not ob-served a sufficient number of times in the train-ing corpus. Unlike ours, this model cannot con-sider simultaneously multiple factored features com-ing from the same token n-gram, thus integrating all possible available information sources.

Discriminative language models have also been studied in speech recognition and statistical machine translation (Roark et al., 2007; Li and Khudanpur, 2008). An attempt to combine factored features and discriminative language modeling is presented in (Mah  X  e and Cancedda, 2009). Unlike us, they com-bine together instances from multiple n -best lists, generally not comparable, in forming positive and negative instances. Also, they use an SVM to train the DLM, as opposed to the proposed online algo-rithms.

Our approach stems from Passive-Aggressive al-gorithms proposed by (Crammer et al., 2006) and the CW online algorithm proposed by (Dredze et al., 2008). In the former, Crammer et al. propose an online learning algorithm with soft margins to handle noise in training data. However, the work does not consider the confidence associated with es-timated feature weights. On the other hand, the CW online algorithm in the later does not consider the case where the training data is noisy.

While developed independently, our soft-margin extension is closely related to the AROW(project) algorithm of (Crammer et al., 2009; Crammer and Lee, 2010). The cited work models classifiers as non-correlated Gaussian distributions over weights, while our approach uses point estimates for weights coupled with confidence scores. Despite the differ-ent conceptual modeling, though, in practice the al-gorithms are similar, with point estimates playing the same role as the mean vector, and our (squared) confidence score matrix the same role as the preci-sion (inverse covariance) matrix. Unlike in the cited work, however, in our proposal, confidence scores are updated also upon correct classification of train-ing examples, and not only on mistakes. The ra-tionale of this is that correctly classifying an exam-ple could also increase the confidence on the current model. Thus, the update formulas are also different compared to the work cited above. We proposed a novel approach to discriminative lan-guage models. First, we introduced the idea of us-ing factored features in the discriminative language modeling framework. Factored features allow the language model to capture linguistic patterns at mul-tiple levels of abstraction. Moreover, the discrimi-native framework is appropriate for handling highly overlapping features, which is the case of factored features. While we did not experiment with this, a natural extension consists in using all n-grams up to a certain order, thus providing back-off features and enabling the use of higher-order n-grams. Sec-ond, for learning factored language models discrim-inatively, we adopt a simple confidence-weighted algorithm, limiting the problem of poor estimation of weights for rare features. Finally, we extended confidence-weighted learning with soft margins to handle the case where labels of training data are noisy. This is typically the case in discriminative language modeling, where labels are obtained only indirectly.

Our experiments show that combining all these el-ements is important and achieves significant transla-tion quality improvements already with a weak form of integration: n -best list re-ranking.
 Salah Ait-Mokhtar, Jean-Pierre Chanod, and Claude Roux. 2001. A multi-input dependency parser. In Proceedings of the Seventh International Workshop on Parsing Technologies , Beijing, Cina.
 Jeff A. Bilmes and Katrin Kirchhoff. 2003. Fac-tored language models and generalized parallel back-off. In Proceedings of HLT/NAACL , Edmonton, Al-berta, Canada.
 Koby Crammer and Daniel D. Lee. 2010. Learning via gaussian herding. In Pre-proceeding of NIPS 2010 . Koby Crammer, Ofer Dekel, Joseph Keshet, Shai Shalev-
Shwartz, and Yoram Singer. 2006. Online passive-aggressive algorithms. Journal Of Machine Learning Research , 7.
 Koby Crammer, Alex Kulesza, and Mark Dredze. 2009.
Adaptive regularization of weight vectors. In Ad-vances in Neural Processing Information Systems (NIPS 2009) .
 Mark Dredze, Koby Crammer, and Fernando Pereira. 2008. Confidence-weighted linear classifiers. In Pro-ceedings of ICML , Helsinki, Finland. Zhifei Li and Sanjeev Khudanpur. 2008. Large-scale discriminative n -gram language models for statistical machine translation. In Proceedings of AMTA. Pierre Mah  X  e and Nicola Cancedda. 2009. Linguisti-cally enriched word-sequence kernels for discrimina-tive language modeling. In Learning Machine Trans-lation , NIPS Workshop Series. MIT Press, Cambridge, Mass.
 Brian Roark, Murat Saraclar, Michael Collins, and Mark
Johnson. 2004. Discriminative language modeling with conditional random fields and the perceptron al-gorithm. In Proceedings of the annual meeting of the Association for Computational Linguistics (ACL) , Barcelona, Spain.
 Brian Roark, Murat Saraclar, and Michael Collins. 2007. Discriminative n-gram language modeling. Computer Speech and Language , 21(2).
 M. Simard, N. Cancedda, B. Cavestro, M. Dymetman,
E. Gaussier, C. Goutte, and K. Yamada. 2005. Trans-lating with non-contiguous phrases. In Association for Computational Linguistics, editor, Proceedings of
Human Language Technology Conference and Con-ference on Empirical Methods in Natural Language , pages 755 X 762, October.
