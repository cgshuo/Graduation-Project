 riezler@google.com We present a novel approach to query reformulation which combines syntactic and semantic information by means of generalized Levenshtein distance algorithms where the sub-stitution operation costs are based on probabilistic term rewrite functions. We investigate unsupervised, compact and efficient models, and provide empirical evidence of their effectiveness. We further explore a generative model of query reformulation and supervised combination methods provid-ing improved performance at variable computational costs.
Among other desirable properties, our similarity measures incorporate information-theoretic interpretations of taxonomic relations such as specification and generalization. H.3.3 [ Information Storage and Retrieval ]: Query for-mulation, Search process, Retrieval models.
 Algorithms, Experimentation.
 Query reformulation, query rewriting, generalized edit dis-tance, similarity metrics.
Query reformulation is the process of iteratively modify-ing a query to improve the quality of a search engine results, in order to satisfy one X  X  information need. Search engines Work carried out during internships at Google.
 support users in this task explicitly; e.g., by suggesting re-lated queries or query completions, and implicitly; e.g., by expanding the query to improve quality and recall of organic and sponsored results. The close interaction between users and algorithms makes this a central topic in search technol-ogy and research [10, Ch. 6].

Successful refinements are closely related to the original query [22]. This is not surprising as reformulations involve spelling corrections, morphological variants, and tend to reuse parts of the previous query. More precisely, reformulations are close to the previous query both syntactically , as se-quences of characters or terms, 1 and semantically , often in-volving transparent taxonomic relations. As an example, for the query  X  X ecoming a dentist X , the reformulation  X  X ecoming an oral surgeon X  might have a higher chance of producing relevant results than  X  X ecoming a doctor X . In this paper we address the following question: how can we model query re-formulation as a process involving syntactic and semantic operations within a unified and principled framework?
String distance metrics model the similarity between two queries as a function of the edit operations (insertion, dele-tion, substitution) that are necessary to generate one string from the other. Jones et al. [14] noticed that edit distance can be an accurate query similarity measure as it approx-imates well the users X  conservative disposition in query re-finement. Semantic approaches are based on the linguistic notion that similar words (queries) occur in similar contexts; an intuition that can be captured by statistical association measures extracted from simple document counts [5], or in-volving deeper analyses; e.g., of search results snippets [24]. Here we investigate a class of models for query reformula-tion which combines the syntactic and semantic aspects. We call these models generalized in the sense that they aim at capturing both syntactic and semantic properties of a refor-mulation. These models build upon the generalized edit dis-tance framework. In our formulation, the cost of an edit op-eration, rather than being fixed, is weighted by probabilistic interpretations of the semantic relation between two terms. Our approach, while conceptually simple, unsupervised, and efficient, outperforms several competitors and baselines. We
Through the paper with the term syntactic we refer purely to the surface properties of queries as sequences of symbols, without any reference to their constituent structure. provide empirical evidence from extensive evaluations on two datasets in Section 6.

Pushing the framework further, we investigate a genera-tive model previously applied to biological sequence align-ment problems [20]. We show that in this direction im-proved performance can be expected, although at increased computational cost and additional complexities in param-eter estimation, leaving room for further research. While most of the focus is on single unsupervised signals for query reformulation, we show that our measures provide mutually complementary information: weighted combinations further improve performance.
 The paper also touches upon a related topic. Recently, Boldi et al. [4] proposed the idea of capturing explicitly the relation between two queries with respect to a taxonomic representation (e.g., specification, generalization, etc.) to improve query reformulations. With respect to this issue, we show how asymmetric and symmetric probabilistic sim-ilarity measures, and their combinations, can be loosely in-terpreted as information-theoretic approximations of cate-gorical notions such as  X  X eneralization X  or  X  X pecification X .
Query reformulation is an important topic in web search as a large fraction of the queries issued to search engines are modified after examination of the results [12]. Query modification is supported in several ways to improve search experience; e.g., via automatic spelling correction [6]. Query reformulation also requires editing or expanding the query. Several techniques have been proposed based on relevance feedback, query log analysis and distributional similarity [2, 18, 23, 24, 29, 30]. A related task is that of session segmen-tation where properties of query transitions can be used to identify session boundaries [9, 13].

As relevance and pseudo relevance feedback impose ad-ditional cognitive load on the user, and can lead to query drift or costly computations, Jones et al. [14] proposed to pre-compute reformulations by ranking candidate queries extracted from query logs, using several types of features and learning methods. Interestingly, they notice how sim-ple linear combinations of a few edit distance features pro-vide powerful ranking functions, comparable to more com-plex methods. Previously, Wen et al. [27] clustered queries combining several sources of information such as coclick and IR document similarity, including string distance. They also suggest using a smaller fixed cost for pairs of terms occurring in Wordnet in the edit distance computation, but did not carry out a systematic evaluation. Generalizations of string matching metrics are the focus of our study. Generalized Levenshtein distance algorithms [17] have been intensively investigated in bioinformatics for solving sequence alignment problems. Oommen and Kashyap proposed a model which generates the probability of a string being rewritten into another accounting for all possible combinations of edit op-erations [20] that has been used successfully in peptide clas-sification [3] and optical character recognition [15].
Previous studies have teased apart the semantic aspects of query reformulations. Rieh and Xie [22] (see also [11, 16]) analyzed query transitions in terms of syntactic and seman-tic operations and found that when reformulating previous queries users adopt several tactics including generalization, replacement with synonyms, parallel movement (approxi-mately 50% of the time) and specification (approximately 30% of the time). Boldi et al. [4] proposed a query refor-mulation approach based on classifying reformulation types (QRTs) as belonging to a small taxonomy. They represent query transitions in a feature space including properties ex-tracted from sessions and similarity features including edit distance, Jaccard and term vector cosine. Hence, they build a supervised QRT decision tree classifier which achieves 92% accuracy in a four-class task (specialization, generalization, correction, parallel move). Their methodology includes an unspecified feature selection process, thus we don X  X  know the contribution of each feature. However, the high accu-racy suggests that a few features, at least partially based on simple string matching metrics, can go a long way in capturing taxonomic aspects of query reformulations (see also Huang and Efthimiadis [11] for a related unsupervised approach). In evaluation they find that recommendations limited to specializations provide the best accuracy while introducing other types of QRTs decreases the quality of the recommendations.
Let ( q s ,q t ) be an ordered pair where q t is a candidate reformulation of a query q s . We call q s the source and q the target . A similarity measure between two queries is a function f : ( q s ,q t )  X  IR which takes ( q s ,q t ) as input and returns a score. In particular, we are interested in functions which correlate well with human judgments of how good a reformulation q t is for q s .
For several of the similarity measures described below, we employ pointwise mutual information (PMI) as a measure of the association between two terms or queries. PMI has been applied extensively to model semantic similarity  X  e.g., Turney [26] uses it to discover synonyms on web data  X  and correlates well with human judgments [21]. Let x and y be two strings that we want to measure the amount of asso-ciation between. Let p( x ) and p( y ) be the probability of observing x and y in a given model; e.g., relative frequen-cies estimated from occurrence counts in a corpus. We also define p( x,y ) as the joint probability of x and y ; i.e., the probability of the two strings occurring together. An ab-stract definition of PMI for our purposes is as follows:
PMI can yield negative values, if p( x,y ) &lt; p( x )p( y ). For the purposes of normalization, below in this section, we dis-card negative PMI values and assign zero to such cases. PMI is also used as a basis for the substitution score of two terms (see Section 5.2). Limiting PMI to positive values is further motivated by the assumption that substituting two terms occurring together less frequently than random should not be penalized more than two unrelated terms. 2
As pointed out in [16, 22] query transitions tend to corre-late with taxonomic relations such as generalization and spe-cialization. Boldi et al. [4] show how knowledge of transition types can positively impact query reformulation. We would like to exploit this information as well. However, rather than
As a matter of fact, such occurrences are extremely rare in our data and within noise levels. building a dedicated supervised classifier for this task we try to capture it directly at the source. We propose that by ma-nipulating PMI we can directly model taxonomic relations to some extent. In the following definitions we interpret ( x,y ) as a transition from x (i.e. source) to y (i.e. target) to break the symmetry without loss of generalization.
The first type of normalization, called joint normalization , uses the negative log joint probability and is defined as: As we limit PMI to positive values the normalization bounds the range between 0 and 1. The jointly normalized PMI(J) is a symmetric measure between x and y in the sense that PMI(J)( x,y ) = PMI(J)( y,x ). Intuitively it is a measure of the amount of shared information between the two strings relative to the sum of individual strings information.
To capture asymmetries in the relation between two strings, we apply two non-symmetric normalizations also bounding the measure between 0 and 1. The first asymmetric normal-ization is called specialization and is defined as: The reason we call it specialization is that PMI(S) favors pairs where the second one is a specialization of the first one. For instance, PMI(S) is at its maximum when p( x,y ) = p( y ) and that means the conditional probability p( x | y ) is 1 which is an indication of a specialization relation.
The second asymmetric normalization is called generaliza-tion and is defined in the reverse direction as: PMI(G) is at maximum when p( y | x ) is 1.

The three normalizations provide a richer representation of the association between two strings and approximate the generalization-specialization dimension from an information-theoretic perspective. As an example, for the query transi-tion  X  X pple X  to  X  X ac os X  PMI(G)=0.2917 and PMI(S)=0.3686; i.e., there is more evidence for a specialization. Conversely for the query transition  X  X errari models X  to  X  X errari X  the mea-sures yield PMI(G)=1 and PMI(S)=0.5558; i.e., the target is a  X  X erfect X  generalization of the source 3 .
Let V be a finite vocabulary and  X  be the null symbol. An edit operation: insertion, deletion or substitution, is a pair ( a,b )  X  X  V  X  X   X  } X  V  X  X   X  }} X  X  (  X , X  ) } . An alignment between two sequences x and y is a sequence of edit operations  X  = ( a 1 ,b 1 ) ,..., ( a n ,b n ). Given a non-negative cost function c the cost of an alignment is c (  X  ) = P n i =1 c (  X  i ). The Levenshtein distance, or edit distance, defined over V , d V ( x,y ) between x and y is the cost of the least expensive sequence of edit operations which transforms x into y [17]. The distance computation can be performed via dynamic programming in time O( | x || y | ). Edit distance captures the amount of overlap between the queries as sequences of symbols and have been previously used in information retrieval [4, 14, 28].
The values are computed from Web counts.
We calculate the PMI for a pair ( q s ,q t ) using the num-ber of documents retrieved by a search engine for q s , q q s,t where q s,t is a shorthand for the concatenation of q and q t . Formally, let N s and N t be the number of docu-ments retrieved for q s and q t respectively. Similarly, let N be the number of documents retrieved for the concatenated joint query. We define the probability of, respectively, the two queries and the joint query as p( q s ) = N s N , p( q and p( q s ,q t ) = N s,t N where N is a constant large enough to approximate the total number of documents that can be retrieved. In our implementation we use Google X  X  search en-gine. The number of results returned determine N s , N t N s,t . We denote this PMI measure between two queries by PMI Web ( q s ,q t ). We renormalize the PMI values as described above thus generating three query-level similarity measures.
We use two Levenshtein distance models as basic syntactic measures. The first, called Edit1 (E1), employs a unit cost function for each of the three operations. That is, given a finite vocabulary T of all terms occurring in queries: The second, called Edit2 (E2), uses unit costs for insertion and deletion, but computes the character-based edit distance between two terms to determine the substitution cost. If two terms are similar at the character level, the cost of substitu-tion is lower. Given the vocabulary T of terms and a finite vocabulary A of characters the cost function is defined as:  X  a,b  X  T,c E 2 ( a,b ) = d A ( a,b ) if a  X  b 6 =  X , 1 otherwise (6) where 0  X  d A ( a,b )  X  1, normalizing by max( | a | , | b | ).
We also investigate a variant in which the input sequences are alphabetically sorted before the edit distance computa-tion. The motivation is the observation that queries may be often formulated as sets of terms in which the order of the terms is irrelevant. Thus,  X  X rooklyn pizza X  and  X  X izza Brooklyn X  may denote same user intent but the edit distance is unable to capture the similarity. By presorting the terms in the queries we compute an order-free version of edit dis-tance. We prefix the names of these models with  X  X orted X .
Extending the Levenshtein distance framework to take into account semantic similarities between terms is concep-tually simple. As in the Edit2 model above we use a modified cost function. For our purposes, the cost function should have the following properties: whenever there is evidence of semantic association between two terms, it should be  X  X heaper X  to substitute these terms instead of deleting one and inserting the other. For an unrelated term pair, a combi-nation of insertion and deletion should always be less costly then a substitution. We also assume that the cost of the substitution of a term with itself (i.e. identity substitution) is always 0. Considering these requirements, we define the cost function as a cost matrix S based on the normalized PMI measures defined above. Given a normalized similar-ity measure f , an entry in a cost matrix S for a term pair ( w i ,w j ) is defined as:
The correction, coupled with unit insertion and deletion costs, guarantees that these requirements are fulfilled. We call these models GenEdit (GE). Given a finite term vocab-ulary T and cost matrix S the cost function is defined as:  X  a,b  X  T,c GE ( a,b ) = s ( a,b ) if a  X  b 6 =  X , 1 otherwise . (8)
To estimate an appropriate cost matrix we used session logs consisting of actual transitions of consecutive queries. The data consists of approximately 1.3 billion English queries generated from the U.S. A session is identified as a sequence of queries from the same user. Let q s and q t be a query pair observed in the session data where q t is issued immediately after q s in the same session. Let q 0 s = q s \ q t and q where \ is the set difference operator. The co-occurrence count of two terms w i and w j from a query pair q s denoted by n i,j ( q s ,q t ) and is defined as: n
If a term occurs in both queries, it has a co-occurrence count of 1. For all other pairs we make sure the sum of co-occurrence counts for a term w i  X  q s is 1 for a given query pair. The normalization is an attempt to avoid the under-representation of terms occurring in both queries. The fi-nal co-occurrence count of two arbitrary terms w i and w j is denoted by N i,j and it is defined as the sum over all query pairs in the session logs, N i,j = P q Let N = P i,j N i,j be the sum of co-occurrence counts over all term pairs. Then we define a joint probability for a term pair as p( x,y ) = N i,j N . Similarly, we define the single-occurrence counts and probabilities of the terms by com-puting the marginalized sums over all term pairs. Namely, the probability of a term w i occurring in the source query is p( i,  X  ) = P j N i,j /N and similarly the probability of a term w j occurring in the target query is p(  X  ,j ) = P i Plugging these values in Eq. (1), we obtain the PMI( i,j ) for term pair w i and w j , which are further normalized as described in Section 3.1. Any term pair that is not co-occurring in the session data is considered to be unrelated and is assigned a PMI value of zero.
The edit distance measures considered so far generate a score based on the least-costly alignment of two queries. This can be viewed as finding the shortest path in a query space constructed on the atomic edit operations. A natural extension would calculate the probability of producing the target from the source not only considering the least-costly alignment of two queries but computing over all possible ways the target can be obtained from the source. Oommen and Kashyap [20], proposed a syntactic transition probabil-ity model (referred to as the OK model) which shows how the probability of a string, in our case a query, rewrite can be computed with a generative model consisting of random insertion, deletion, and substitution operations. The model has been successfully applied to problems such as peptide classification and OCR correction [3, 15].

Let x = ( x 1 x 2 ...x n ) and y = ( y 1 y 2 ...y m ) be the source and target strings respectively such that x  X  V ? and y  X  V where V is the finite alphabet of symbols. We introduce two additional symbols  X  and  X  , which are not in V , as input and output null symbols, respectively. The OK model computes the probability of obtaining y from x under a generative model which takes as input two probability distributions G and S , and works in the following steps. 1. Distribution G specifies the number of insertions to be 2. The distribution S is over { T  X  X   X  } X  T  X  X   X  }} . The 3. Last step mirrors the original deletion operation: all  X 
There are two constraints on S . The first states that  X  x in x is either substituted, left intact or deleted. The second constraint S (  X  |  X  ) = 0 guarantees that exactly z insertions are made and no input null symbol inserted at the first step is deleted in the second step (i.e.  X  is always substituted by a symbol in T not by  X  ).

Using the OK model, one can compute the probability of a transition from source to target query by integrating the individual probabilities of all possible paths allowed by the generative model. The explicit form of this probability is: p( y | x ) = where m = | x | and n = | y | . The outermost summation is over all possible values of number of insertions. The factor ( n + z )! is the number of different ways in which z  X  char-acters can be inserted in x to obtain x 0 . Although the ex-plicit calculation of this probability is too expensive, due to the combinatorial element, Oommen and Kashyap provide a dynamic program which runs in approximately cubic time, O ( mn min( m,n )) [20].

As in the generalized edit distance models, we represent the queries as strings and the terms as characters. That is, q = w 1 w 2  X  X  X  w n is the source query and q t = w 1 w 2  X  X  X  w is the target query where w i , w j  X  T .
In order to actually employ the OK model we need to es-timate distributions G and S . The model accepts arbitrary probability distributions and estimating meaningful param-eters is not trivial. We devise an estimation strategy similar to that used by Kolak and Resnik [15] who apply the OK model to optical character recognition (OCR). The idea is to generate an alignment with a simpler model and then es-timate all substitutions in S directly from a large-enough dataset. As a corpus of pairs to align we used the session data of Section 5.2.1, under the assumption that contigu-ous query pairs represent reasonable candidates of naturally occurring query transitions. Subsequently, we ran a general-ized edit-distance model to find the least-costly alignment of each pair and then count the edit operations that make up this alignment. The application of the edit-distance model thus provides a way to reverse engineer the query transi-tions and obtain estimates for the term insertion, deletion and substitution probability distributions.

Summarizing, we run a generalized edit distance model on the query pairs in our session dataset 4 , and count the num-ber of times each term insertion, deletion, and substitution occurred directly off the alignments. By integrating these counts over all pairs and normalizing them into probability distributions, we obtain the necessary estimates for G and S . The inspection of the outcome of this procedure revealed that the deletion probability (i.e. S (  X  | x i )) is largely over-estimated (e.g. over 0.3 for some terms). This is possibly due to the noisy alignment procedure. To solve this problem we introduce one adjustable parameter called damping fac-tor , denoted by DF . For each term, the deletion probability is corrected as S (  X  | t )  X  S (  X  | t ) / DF , then S is re-normalized so that  X  x i P y We evaluate all models discussed so far on two datasets. As an external benchmark we use the unsupervised distri-butional similarity system (DistSim) of Alfonseca et al. [1]. DistSim implements an extension of the vector-space model of distributional similarities to query-to-query similarity, by combining different vectors using the geometric mean of the frequencies for each of the features separately. Features are n -grams collected in the context of each query in hundreds of millions of documents. The score of a query reformulation is the cosine of the vectors representing each query. DistSim generates richly lexicalized high-dimensional models which in evaluation [1] outperformed web kernel methods [24].
The evaluation involves a query reformulation task in which several source queries are provided, each with a set of candi-date reformulations scored by raters. Each model predicts a real-valued score for each source-target reformulation pair. The score represents the quality of the reformulation ac-cording to the system. While the absolute value of the score might not be meaningful in itself it is used to rank the queries in the set of possible targets for the same source. Several evaluation metrics are used to quantify the performance of a system: Spearman rank correlation, precision at N and mean average precision. We use Spearman correlation as our primal evaluation measure as it is independent of the choice of a threshold which is necessary for precision.
We evaluate all the similarity measures individually as well as in combination. We experiment with one unsuper-vised combination method, a baseline which simply averages all signals 5 . We also evaluate a supervised combination, and a supervised optimization of the OK model. The OK
A sorted joint-normalized generalized edit distance model.
All non-normalized individual signals are re-normalized be-fore combination.
 model involves an adjustable parameter DF that should be picked empirically. Hence, we optimize the OK model sep-arately by a supervised leave-one-out procedure. All values for DF = 10 i were evaluated at i = 1 , 2 ,.., 10. As a full supervised combination we used a neural network regression model using all of the features introduced in the paper, ex-cluding OK. This type of approach lets us exploit potential non-linearities in the signals. For each network model three parameters are optimized: learning rate, number of hidden units and number of iterations (epochs) over the training data. Predictions are generated in a leave-one-out scheme where in turn a source query q s is excluded for prediction.
The first evaluation set, QS1500 is based on the gold stan-dard from [1]. It contains 57 source queries, each paired with up to 20 target queries. The candidate reformulations are generated from the top-20 ranked suggestions using several different systems, based on the web kernel approach [24], and distributional similarity. Two raters evaluated each pair, us-ing the 5-Likert scale defined in [24]. The weighted Cohen X  X  Kappa was 0.7111 on a binary split at level 1.5, indicating substantial agreement amongst the raters for a binary deci-sion. In the computation of the precision at N scores we use the pairs with a score of 1.5 or more [1] as positive pairs.
The second evaluation set, called CC2000, was built from scratch based on the hypothesis that two different queries are related if they lead to user clicks on the same documents. This approach is similar to the method proposed by Fitz-patrick and Dent [8]. Our technique adds click information, thus strengthening the preference for precision over recall in the extraction of related queries. For a randomly extracted set of 500 source queries, we randomly sampled 4 targets. 3 out of 4 targets are queries that have been co-clicked with at least 10 different results. The remaining one has been co-clicked only once. The latter pair acts as a control on the quality of click as a measure of relatedness. The 2,000 pairs were judged by 5 raters, with access to the search re-sult, in blind evaluation according to a 4-point scale: Unre-lated(1), Slightly Related(2), Very Related(3), Same Mean-ing(4). Inter-rater agreement of 5 raters on a binary classi-fication task (class 1 = Unrelated or Slightly Related, class 2 = Very Related or Same Meaning) gave a Kappa value of 0.65. A connection between the co-click hypothesis and human ratings can be seen from computing average human scores for the automatically created distinction. This results in an average human score of 3 . 1 for pairs with more than 10 co-clicks, and an average human score of 2 . 3 for pairs with 1 co-click. This shows that the co-click hypothesis yields positively related pairs that are judged on average as Very Related by human raters, while the control set are judged only as Slightly Related. The gold standard for each pair is the average of the 5 ratings. Choosing a fixed threshold Table 3. Generalized edit distances for QS1500 and CC2000. The ranks of the features for CC2000 are given in parenthe-ses; * indicates a higher Spearman correlation than the highest performing edit distance baseline (SortedEdit2 for QS1500 and Edit1 for CC2000) at a significance level of 0.95. for the precision scores is not straightforward; e.g., using a threshold at three produces 132 all positive sets and 90 all negative sets, therefore we would not be able to compute a meaningful precision score for too many sets. To avoid this problem we choose in each set the positive pair as the one with the highest score. In this way we obtain 774 positive pairs and 1221 negative pairs. Thus in terms of precision we evaluate the performance of systems at identifying the best available pair. The following table summarizes some datasets statistics: Table 1 summarizes the basic properties of the datasets.
In the following sections, we discuss the performance of generalized edit distance with respect to baselines (simple edit distance and distributional similarity models), comment on the effect of taxonomic normalization of PMI, and report the performance of combining different measures in super-vised and unsupervised settings. In order to give a birds-eye overview, the results for all models are given in Tables 2 and 4 for QS1500 and CC2000, respectively. In these tables, we report Spearman correlation, mean average precision and precision at various positions. Since, there are only 4 target queries per source in CC2000, we report precision values at 1, 2 and 3 for that dataset. For QS1500, the precision values at 1, 3 and 5 are reported.
The Spearman rank correlations obtained for all edit dis-tance models are given in Table 3 for QS1500 and CC2000. Several points are worth discussing in these results.
Generalized edit distance is better than simple edit dis-tance. For both datasets, the generalized edit distance mod-els (all variants of GenEdit and SortedGenEdit) outperform the simple edit-distance based features (Edit1 and Edit2). This observation is also supported by the significance re-sults obtained by one-tailed t-tests reported in the same ta-ble. This result proves that our method is a powerful, yet simple, generalization of an already robust query similarity measure. To the best of our knowledge ours is the first (suc-cessful) application of such generalized algorithms to IR.
Sorting has an effect on results. For QS1500, sorted edit-distance based features (SortedGenEdit) outperformed their unsorted counterparts (GenEdit) by margins of more than 4 percent (though, we were unable to confirm a significant dif-ference between them). The pattern is different in CC2000 where the unsorted features outperform their sorted coun-terparts albeit with smaller margins. We hypothesize that this effect might be related to the query length, greater in QS1500 both for q s and q t . It is possible that as longer queries are more subject to permutations, sorted distance measures emerge as more robust.

Generative models are promising. Especially for QS1500, we see that the increased complexity of the OK model pays off in terms of performance. Since the OK model uses the substitution probability matrices computed by the align-ments obtained by SortedGenEdit(J) model, the difference between the SortedGenEdit(J) and the OK model becomes even more encouraging. Although we picked the damping factor value for each set by supervision (i.e., leave-one-out), we should note that the OK model is robust with respect to varying values of DF . In the optimization experiments we observed that the Spearman scores of the OK models remain at levels either comparable to or superior than other gener-alized models X  in a range of almost 7 orders of magnitude for DF . However, the simpler generalized models are even more robust. Better formulations of the generative model provide an interesting direction for future research.
Type of normalization is important. Especially for the query-level similarity measures (variants of PMI Web type of normalization has a significant effect on performance. E.g., as it can be seen in Table 2, PMI Web (G) performs badly in QS1500 (Spearman 0.283, rank 15), but PMI Web (S) is more competitive (Spearman 0.417, rank 7) even though both measures are based on the same PMI values and only differ by the type of normalization. Interestingly, a simi-lar but reversed pattern is observed for CC2000 in Table 4. For this dataset, PMI Web (G) is the best measure among the query-level measures with a Spearman correlation of 0.369 and overall rank of 10. PMI Web (S), on the other hand, can achieve a correlation of 0.264 and is placed quite low in the overall ranking. The difference between PMI Web (S) and PMI Web (G) is significant ( p &lt; 0 . 05) for both datasets in opposite directions. This evidence alone suggests that different normalizations can capture different properties of different datasets. A similar pattern also emerges from the generalized edit distance models, specialization works best for QS1500 and generalization for CC2000.

One intriguing explanation for this pattern involves the dominant directionality in the datasets. We know that in QS1500 target queries are shorter than source queries on average. Hence, transitions are more likely in the general-ization direction. It is possible that a feature which favors generalizations loses its discriminative power and do not cor-relate well with human judgments because of the bias in the dataset. A similar effect in the reversed direction is com-patible with results on CC2000. This explanation seems supported also by the performance of length and log proba-bility baselines, see Tables 2 and 4, which are characterized by opposite signs.
Supervision works. In Tables 2 and 4, we see that the neu-ral network model constructed on all features (NN) outper-formed all other methods in both datasets. This was rather expected but it is important to see that there is room for further improvements, and that the features we propose pro-vide complementary information. Experiments with linear regression were less successful which suggests there might be useful non-linear interactions between features that can be captured by the neural network. It is also interesting to notice that supervised combination improves but not by a large margin indicating that our single generalized fea-tures have good discriminative power in absolute terms. The comparison with the high-dimensional distributional similar-ity model (DistSim) is also positive, DistSim performs only marginally better than the GenEdit models on one dataset (QS1500)  X  although, in terms of precision, GenEdit models are still better  X  and worse on CC2000. Naive unsupervised combination yields mixed results.
In this paper we proposed an approach to query refor-mulation aiming at the combination of string similarity and corpus-based semantic association measures. Generalized Levenshtein distance algorithms provide a principled frame-work for this combination. By manipulating the edit dis-tance cost function our models can incorporate naturally useful statistical association measures, including variants of pointwise mutual information which, to some extent, cap-ture directly taxonomic relations between terms. The mod-els we proposed are mostly unsupervised, compact and ef-ficient, and we provided empirical evidence of their effec-tiveness. We also explored a generative query reformulation model which can provide further improvements at additional computational cost and estimation complexity. Finally, we evaluated supervised combinations proving that the features capture complementary aspects of the data.

This framework offers several opportunities for further re-search. In a related work [7] we investigated supervised models based on our features trained on noisy data within a learning to rank framework. Another interesting topic involves, as in bioinformatics, controlling the costs of all edit operations by applying algorithms such as Needleman-Wunsch [19]. Another promising topic involves moving be-yond context-free reformulation in the generalized frame-work. In our approach substitution costs involve pairs of terms independent of the surrounding context while it seems reasonable that dependencies between terms should be use-ful in computing the best reformulation. Finally, probabilis-tic interpretations of semantic notions such as those investi-gated here deserve further research, possibly in combination with linguistic structure matching; e.g., as in [25] [1] E. Alfonseca, K. Hall, and S. Hartmann. Large-scale [2] J. Allan. Relevance feedback with too much data. In [3] E. Ayg  X  un, B. Oommen, and Z. Cataltepe. On utilizing [4] P. Boldi, F. Bonchi, C. Castillo, and S. Vigna. From [5] K. Church, W. Gale, P. Hanks, and D. Hindle. Using [6] B. Cucerzan and E. Brill. Spelling correction as an [7] F. De Bona, S. Riezler, K. Hall, M. Ciaramita, [8] L. Fitzpatrick and M. Dent. Automatic feedback using [9] D. He, A. G  X  oker, and D. Harper. Combining evidence [10] M. Hearst. Search user interfaces . Cambridge [11] J. Huang and E. Efthimiadis. Analyzing and [12] B. Jansen, A. Spink, and S. Koshman. Web searcher [13] R. Jones and K. Klinkner. Beyond the session [14] R. Jones, B. Rey, O. Madani, and W. Greiner.
 [15] O. Kolak and P. Resnik. OCR error correction using a [16] T. Lau and E. Horvitz. Patterns of search: analyzing [17] V. Levenshtein. Binary codes capable of correcting [18] M. Mitra, A. Singhal, and C. Buckley. Improving [19] S. Needleman and C. Wunsch. A general method [20] B. Oommen and R. Kashyap. A formal theory for [21] G. Recchia and M. Jones. More data trumps smarter [22] S. Rieh and H. Xie. Analysis of multiple query [23] S. Riezler, Y. Liu, and A. Vasserman. Translating [24] M. Sahami and T. Heilman. A web-based kernel [25] M. Surdeanu, M. Ciaramita and H. Zaragoza. Learning [26] P. Turney. Mining the web for synonyms: PMI X  X R [27] J. Wen, J. Nie, and H. Zhang. Clustering user queries [28] J. Wen, J. Nie, and H. Zhang. Query clustering using [29] J. Xu and B. Croft. Query expansion using local and [30] Z. Zhang and O. Nasraoui. Mining search engine
