 People turn to the web to seek advice on a wide variety of subjects. An analysis of web search queries posed as questions revealed that  X  X ow to X  questions are the most popular (Pang and Kumar, 2011). People consult online resources to answer technical questions like  X  X ow to put music on my ipod, X  and to find instructions for tasks like tying a tie and cooking Thanksgiving dinner. Not sur-prisingly, there are many Web sites dedicated to providing instructions. For instance, on the pop-ular DIY site instructables.com ( X  X hare what you make X ), users post instructions for making a wide variety of objects ranging from bed frames to  X  X he Stirling Engine, absorb energy from candles, coffee, and more! 1  X  There are also sites like allrecipes.com that are dedicated to a specific domain. On these community-based instruction sites, instructions are posted and reviewed by users. For instance, the aforementioned  X  X tirling engine X  has received over 350 reviews on instructables.com .

While user-generated instructions greatly increase the variety of instructions available online, they are not necessarily foolproof, or appropriate for all users. For instance, in the case of recipes, a user missing a certain ingredient at home might wonder whether it can be safely omitted; a user who wants to get a slightly different flavor might want to find out what substitutions can be used to achieve that ef-fect. Reviews posted by other users provide a great resource for mining such information. In recipe re-views, users often offer their customized version of the recipe by describing changes they made: e.g.,  X  X  halved the salt X  or  X  X  used honey instead of sugar. X  In addition, they may clarify portions of the instruc-tions that are too concise for a novice to follow, or describe changes to the cooking method that result in a better dish. We refer to such actionable infor-mation as a refinement .

Refinements can be quite prevalent in instruction reviews. In a random sample of recipe reviews from allrecipes.com , we found that 57.8% contain refinements of the original recipe. However, sift-ing through all reviews for refinements is a daunting task for a user. Instead, we would like to automat-ically identify refinements in reviews, summarize them, and either create an annotated version of the instructions that reflects the collective experience of the community, or, more ambitiously, revise the in-structions directly.

In this paper, we take first steps toward these goals by addressing the following tasks: (1) identifying re-views that contain refinements, (2) identifying text segments within reviews that describe refinements, and (3) aligning these refinement segments to steps in the instructions being reviewed (Figure 1 provides an example). Solving these tasks provides a foun-dation for downstream summarization and seman-tic analysis, and also suggests intermediate applica-tions. For example, we can use review classifica-tion to filter or rank reviews as they are presented to future users, since reviews that contain refinements are more informative than a review which only says  X  X reat recipe, thanks for posting! X 
To the best of our knowledge, no previous work has explored this aspect of user-generated text. While review mining has been studied extensively, we differ from previous work in that instead of fo-cusing on evaluative information, we focus action-able information in the reviews. (See Section 2 for a more detailed discussion.)
There is no existing labeled data for the tasks of interest, and we would like the methods we develop to be easily applied in multiple domains. Motivated by this, we propose a generative model for solving these tasks jointly without labeled data. Interest-ingly, we find that jointly modeling refinements at both the review and segment level is beneficial. We created a new recipe data set, and manually labeled a random sample to evaluate our model and several baselines. We obtain 90.1% F 1 for predicting refine-ments at the review level, and 77.0% F 1 for predict-ing refinement segments within reviews. At first glance, the task of identifying refinements appears similar to subjectivity detection (see (Pang and Lee, 2008) for a survey). However, note that an objective sentence is not necessarily a refinement: e.g.,  X  X  took the cake to work X ; and a subjective sen-tence can still contain a refinement: e.g.,  X  X  reduced the sugar and it came out perfectly. X  Our end goal is similar to review summarization. However, previous work on review summarization (Hu and Liu, 2004; Popescu and Etzioni, 2005; Titov and McDonald, 2008) in product or service domains focused on summarizing evaluative information  X  more specifically, identifying ratable aspects (e.g.,  X  X ood X  and  X  X ervice X  for restaurants) and summariz-ing the overall sentiment polarity for each aspect. In contrast, we are interested in extracting a subset of the non-evaluative information. Rather than ratable aspects that are common across the entire domain (e.g.,  X  X ngredient X ,  X  X ooking method X ), we are in-terested in actionable information that is related and specific to the subject of the review.

Note that while our end goal is to summa-rize objective information, it is still very differ-ent from standard multi-document summarization (Radev et al., 2002) of news articles. Apart from differences in the quantity and the nature of the in-put, we aim to summarize a distribution over what should or can be changed, rather than produce a con-sensus using different accounts of an event. In terms of modeling approaches, in the context of extractive summarization, Barzilay and Lee (2004) model con-tent structure (i.e., the order in which topics appear) in documents. We also model document structure, but we do so to help identify refinement segments.
We share with previous work on predicting re-view quality or helpfulness an interest in identify-ing  X  X nformative X  text. Early work tried to exploit the intuition that a helpful review is one that com-ments on product details. However, incorporating product-aspect-mention count (Kim et al., 2006) or similarity between the review and product specifi-cation (Zhang and Varadarajan, 2006) as features did not seem to improve the performance when the task was predicting the percentage of helpfulness votes. Instead of using the helpfulness votes, Liu et al. (2007) manually annotated reviews with qual-ity judgements, where a best review was defined as one that contains complete and detailed comments. Our notion of informativeness differs from previ-ous work. We do not seek reviews that contain de-tailed evaluative information; instead, we seek re-views that contain detailed actionable information. Furthermore, we are not expecting any single review to be comprehensive; rather, we seek to extract a collection of refinements representing the collective wisdom of the community.

To the best of our knowledge, there is little pre-vious work on mining user-generated data for ac-tionable information. However, there has been in-creasing interest in language grounding. In partic-ular, recent work has studied learning to act in an external environment by following textual instruc-tions (Branavan et al., 2009, 2010, 2011; Vogel and Jurafsky, 2010). This line of research is complemen-tary to our work. While we do not utilize extensive linguistic knowledge to analyze actionable informa-tion, we view this is an interesting future direction.
We propose a generative model that makes pre-dictions at both the review and review segment level. Recent work uses a discriminative model with a sim-ilar structure to perform sentence-level sentiment analysis with review-level supervision (T  X  ackstr  X  om and McDonald, 2011). However, sentiment polarity labels at the review level are easily obtained. In con-trast, refinement labels are not naturally available, motivating the use of unsupervised learning. Note that the model of T  X  ackstr  X  om and McDonald (2011) cannot be used in a fully unsupervised setting. In this section, we define refinements more pre-cisely. We use recipes as our running example, but our problem formulation and models are not specific to this domain.

A refinement is a piece of text containing action-able information that is not entailed by the original instructions, but can be used to modify or expand the original instructions. A refinement could propose an alternative method or an improvement (e.g.,  X  X  re-placed half of the shortening with butter X ,  X  X et the shrimp sit in 1/2 marinade for 3 hours X ), as well as provide clarification ( X  X efinitely use THIN cut pork chops, otherwise your panko will burn before your chops are cooked X ).

Furthermore, we distinguish between a verified refinement (what the user actually did) and a hy-pothetical refinement ( X  X ext time I think I will try evaporated milk X ). In domains similar to recipes, where instructions may be carried out repeatedly, there exist refinements in both forms. Since instruc-tions should, in principle, contain information that has been well tested, in this work, we consider only the former as our target class. In a small percent-age of reviews we observed  X  X ailed attempts X  where a user did not follow a certain step and regretted the diversion. In this work, we do not consider them to be refinements. We refer to text that does not contain refinements as background .

Finally, we note that the presence of a past tense verb does not imply a refinement (e.g.,  X  X veryone loved this dish X ,  X  X  got many compliments X ). In fact, not all text segments that describe an action are re-finements (e.g.,  X  X  took the cake to work X ,  X  X  fol-lowed the instructions to a T X ). In this section we describe our models. To iden-tify refinements without labeled data, we propose a generative model of reviews (or more gener-ally documents) with latent variables. We assume that each review x is divided into segments , x = ( x 1 , . . . , x T ) . Each segment is a sub-sentence-level text span. We assume that the segmentation is ob-served, and hence it is not modeled. The segmenta-tion procedure we use is described in Section 5.1.
While we focus on the unsupervised setting, note that the model can also be used in a semi-supervised setting. In particular, coarse (review-level) labels can be used to guide the induction of fine-grained latent structure (segment labels, alignments). 4.1 Identifying Refinements We start by directly modeling refinements at the seg-ment level. Our first intuition is that refinement and background segments can often be identified by lex-ical differences. Based on this intuition, we can ig-nore document structure and generate the segments with a segment-level mixture of multinomials (S-Mix). In general we could use n multinomials to represent refinements and m multinomials to repre-sent background text, but in this paper we simply use n = m = 1 . Therefore, unsupervised learning in S-Mix can be viewed as clustering the segments with two latent states. As is standard practice in unsu-pervised learning, we subsequently map these latent states onto the labels of interest: r and b , for refine-ment and background, respectively. Note, however, that this model ignores potential sequential depen-dencies among segments. A segment following a re-finement segment in a review may be more likely to be a refinement than background, for example.
To incorporate this intuition, we could instead generate reviews with a HMM (Rabiner, 1989) over segments (S-HMM) with two latent states. Let z i be the latent label variable for the i th segment. The joint probability of a review and segment labeling is where p ( z j | z j  X  1 ;  X  ) are multinomial transition dis-tributions, allowing the model to learn that p ( z j = vated above, and p ( x j | z j ;  X  ) are multinomial emis-sion distributions. Note that all words in a segment are generated independently conditioned on z j .
While S-HMM models sequential dependencies, note that it imposes the same transition probabili-ties on each review. In a manually labeled random sample of recipe reviews, we find that refinement segments tend to be clustered together in certain re-views ( X  X ursty X ), rather than uniformly distributed across all reviews. Specifically, while we estimate that 23% of all segments are refinements, 42% of reviews do not contain any refinements. In reviews that contain a refinement, 34% of segments are re-finements. S-HMM cannot model this phenomenon.
Consequently, we extend S-HMM to include a la-tent label variable y for each review that takes val-ues yes ( contains refinement ) and no ( does not con-tain refinement ). The extended model is a mixture of HMMs (RS-MixHMM) where y is the mixture component. The two HMMs p ( x , z | y = yes ;  X  ) and p ( x , z | y = no ;  X  ) can learn different transition multinomials and consequently different distributions over z for different y . On the other hand, we do not believe the textual content of the background segments in a y = yes review should be different from those in a y = no review. Thus, the emission distributions are shared between the two HMMs, p ( x j | z j , y ;  X  ) = p ( x j | z j ;  X  ) .

Note that the definition of y imposes additional constraints on RS-MixHMM: 1) reviews with y = no cannot contain refinement segments, and 2) reviews with y = yes must contain at least one refinement segment. We enforce constraint (1) by disallow-ing refinement segments z j = r when y = no : p ( z j = r | z j  X  1 , y = no ;  X  ) = 0 . Therefore, with one background label, only the all background la-bel sequence has non-zero probability when y = no . Enforcing constraint (2) is more challenging, as the y = yes HMM must assign zero probability when all segments are background, but permit background segments when refinement segments are present.
To enforce constraint (2), we  X  X ewire X  the HMM structure for y = yes so that a path that does not go through the refinement state r is impossible. We first expand the state representation by replacing b with two states that encode whether or not the first r has been encountered yet: b not  X  yet encodes that all previous states in the path have also been back-ground; b ok encodes that at least one refinement state has been encountered 2 . We prohibit paths from end-ing with b not  X  yet by augmenting RS-MixHMM with a special final state f , and fixing p ( z T +1 = f | z T b not  X  yet , y = yes ;  X  ) = 0 . Furthermore, to enforce the correct semantics of each state, paths cannot start with b ok , p ( z 1 = b ok | y = yes ;  X  ) = 0 , and transi-b
Note that RS-MixHMM also generalizes to the case where there are multiple refinement ( n &gt; 1 ) and background ( m &gt; 1 ) labels. Let Z r be the set of refinement labels, and Z b be the set of background labels. The transition structure is analogous to the n = m = 1 case, but statements involving r are ap-plied for each z  X  X  r , and statements involving b are applied for each z  X  Z b . For example, the y = yes HMM contains 2 |Z b | background states.
 In summary, the generative process of RS-MixHMM involves first selecting whether the re-view will contain a refinement. If the answer is yes , a sequence of background segments and at least one refinement segment are generated using the y = yes HMM. If the answer is no , only background seg-ments are generated. Interestingly, by enforcing constraints (1) and (2), we break the label symme-try that necessitates mapping latent states onto labels when using S-Mix and S-HMM. Indeed, in the ex-periments we present in Section 5.3, mapping is not necessary for RS-MixHMM.

Note that the relationship between document-level labels and segment-level labels that we model is related to the multiple-instance setting (Dietterich et al., 1997) in the machine learning literature. In multiple-instance learning (MIL), rather than having explicit labels at the instance (e.g., segment) level, labels are given for bags of instances (e.g., docu-ments). In the binary case, a bag is negative only if all of its instances are negative . While we share this problem formulation, work on MIL has mostly focussed on supervised learning settings, and thus it is not directly applicable to our unsupervised set-ting. Foulds and Smyth (2011) propose a generative model for MIL in which the generation of the bag label y is conditioned on the instance labels z . As a result of this setup, their model reduces to our S-Mix baseline in a fully unsupervised setting.

Finally, although we motivated including the review-level latent variable y as a way to improve segment-level prediction of z , note that predictions of y are useful in and of themselves. They provide some notion of review usefulness and can be used to filter reviews for search and browsing. They addi-tionally give us a way to measure whether a set of instructions is often modified or performed as speci-fied. Finally, if we want to provide supervision, it is much easier to annotate whether a review contains a refinement than to annotate each segment. 4.2 Alignment with the Instructions In addition to the review x , we also observe the set of instructions s being discussed. Often a review will reference specific parts of the instructions. We as-sume that each set of instructions is segmented into steps , s = ( s 1 , . . . , s S ) . We augment our model with latent alignment variables a = ( a 1 , . . . , a T ) , where a j = ` denotes that the j th review segment is referring to the ` th step of s . We also define a special NULL instruction step. An alignment to NULL sig-nifies that the segment does not refer to a specific in-struction step. Note that this encoding assumes that each review segment refers to at most one instruction step. Alignment predictions could facilitate further analysis of how refinements affect the instructions, as well as aid in summarization and visualization of refinements.

The joint probability under the augmented model, which we refer to as RSA-MixHMM, is p ( a , x , z | y, s ;  X  ) = Note that the instructions s are assumed to be ob-served and hence are not generated by the model. RSA-MixHMM can be viewed as a mixture of HMMs where each state encodes both a segment la-bel z j and an alignment variable a j . Encoding an alignment problem as a sequence labeling problem was first proposed by Vogel et al. (1996). Note that RSA-MixHMM uses a similar expanded state rep-resentation and transition structure as RS-MixHMM to encode the semantics of y .

In our current model, the transition probability de-composes into the product of independent label tran-sition and alignment transition probabilities p ( a j , z j | a j  X  1 , z j  X  1 , y, s ;  X  ) = p ( a j | a codes the probability that segments align to a (non-NULL) instruction step given y . This allows the model to learn, for example, that reviews that con-tain refinements refer to the instructions more often.
Intuitively, a segment and the step it refers to should be lexically similar. Consequently, RSA-MixHMM generates segments using a mixture of the multinomial distribution for the segment label z j and the (fixed) multinomial distribution 3 for the step s a In this paper, we do not model the mixture proba-bility and simply assume that all overlapping words are generated by the instruction step. When a j = NULL, only the segment label multinomial is used. Finally, we disallow an alignment to a non-NULL step if no words overlap: p ( x j | a j , z j , s ;  X  ) = 0 . 4.3 Inference and Parameter Estimation Because our model is tree-structured, we can efficiently compute exact marginal distributions over latent variables using the sum-product algo-rithm (Koller and Friedman, 2009). Similarly, to find maximum probability assignments, we use the max-product algorithm .

At training time we observe a set of re-views and corresponding instructions, D = and a , are latent. For all models, we estimate param-eters to maximize the marginal likelihood of the ob-served reviews. For example, for RSA-MixHMM, we estimate parameters using
This problem cannot be solved analytically, so we use the Expectation Maximization (EM) algorithm. 5.1 Data In this paper, we use recipes and reviews from allrecipes.com , an active community where we es-timate that the mean number of reviews per recipe is 54.2. We randomly selected 22,437 reviews for our data set. Of these, we randomly selected a subset of 550 reviews and determined whether or not each contains a refinement, using the definition provided in Section 3. In total, 318 of the 550 (57.8%) con-tain a refinement. We then randomly selected 119 of the 550 and labeled the individual segments. Of the 712 segments in the selected reviews, 165 (23.2%) are refinements and 547 are background.
 We now define our review segmentation scheme. Most prior work on modeling latent document sub-structure uses sentence-level labels (Barzilay and Lee, 2004; T  X  ackstr  X  om and McDonald, 2011). In the recipe data, we find that sentences often con-tain both refinement and background segments:  X  X  I used a slow cooker with this recipe and ] [it turned out great!] X  Additionally, we find that sentences of-ten contain several distinct refinements:  X  X  I set them on top and around the pork and ] [ tossed in a can of undrained french cut green beans and ] [ cooked everything on high for about 3 hours ]. X  To make re-finements easier to identify, and to facilitate down-stream processing, we allow sub-sentence segments.
Our segmentation procedure leverages a phrase structure parser. In this paper we use the Stanford Parser 4 . Based on a quick manual inspection, do-main shift and ungrammatical sentences do cause a significant degradation in parsing accuracy when compared to in-domain data. However, this is ac-ceptable because we only use the parser for segmen-tation. We first parse the entire review, and subse-quently iterate through the tokens, adding a segment break when any of the following conditions is met:  X  sentence break (determined by the parser)  X  token is a coordinating conjunction (CC) with  X  token is a comma (,) with parent other than NP,  X  token is a colon (:) The resulting segmentations are fixed during learn-ing. In future work we could extend our model to additionally identify segment boundaries. 5.2 Experimental Setup We first describe the methods we evaluate. For com-parison, we provide results with a baseline that ran-domly guesses according to the class distribution for each task. We also evaluate a R eview-level model:  X  R-Mix : A review-level mixture of multinomi-Note that this is similar to clustering at the review level, except that class priors are estimated. R-Mix does not provide segment labels, though they can be obtained by labeling all segments with the review label.

We also evaluate the two S egment-level models described in Section 4.1 (with two latent states):  X  S-Mix : A segment-level mixture model.  X  S-HMM : A segment-level HMM (Eq. 1).
 These models do not provide review labels. To ob-tain them, we assign y = yes if any segment is la-beled as a refinement, and y = no otherwise.
Finally, we evaluate three versions of our model ( R eview + S egment and R eview + S egment + A lignment) with one refinement segment label and one background segment label 5 :  X  RS-MixHMM : A mixture of HMMs (Eq. 2)  X  RS-MixMix : A variant of RS-MixHMM with- X  RSA-MixHMM : The full model that also in-
Segment multinomials are initialized with a small amount of random noise to break the initial symme-try. RSA-MixHMM segment multinomials are in-stead initialized to the RS-MixHMM solution. We apply add-0.01 smoothing to the emission multino-mials and add-1 smoothing to the transition multi-nomials in the M-step. We estimate parameters with 21,887 unlabeled reviews by running EM until the relative percentage decrease in the marginal likeli-hood is  X  10  X  4 (typically 10-20 iterations).
The models are evaluated on refinement F 1 and accuracy for both review and segment predictions using the annotated data described in Section 5.1. For R-Mix and the segment ( S-) models, we select the 1:1 mapping of latent states to labels that maxi-mizes F 1 . For RSA-MixHMM and the RS-models this was not necessary (see Section 4.1). 5.3 Results Table 1 displays the results. R-Mix fails to ac-curately distinguish refinement and background re-views. The words that best discriminate the two discovered review classes are  X  X avory ingredients X  ( chicken, pepper, meat, garlic, soup ) and  X  X ak-ing/dessert ingredients X  ( chocolate, cake, pie, these, flour ). In other words, reviews naturally cluster by topics rather than whether they contain refinements.
The segment models (S-) substantially outper-form R-Mix on all metrics, demonstrating the ben-efit of segment-level modeling and our segmenta-tion scheme. However, S-HMM fails to model the  X  X urstiness X  of refinement segments (see Sec-tion 4.1). It predicts that 76.2% of reviews con-tain refinements, and additionally that 40.9% of seg-ments contain refinements, whereas the true values are 57.8% and 23.2%, respectively. As a result, these models provide high recall but low precision.
In comparison, our models, which model the re-view labels 6 y , yield more accurate refinement pre-dictions. They provide statistically significant im-provements in review and segment F 1 , as well as accuracy, over the baseline models. RS-MixHMM predicts that 62.9% of reviews contain refinements and 28.2% of segments contain refinements, values that are much closer to the ground truth. The re-finement emission distributions for S-HMM and RS-MixHMM are fairly similar, but the probabilities of several key terms like added , used , and instead are higher with RS-MixHMM.

The review F 1 results demonstrate that our mod-els are able to very accurately distinguish refinement reviews from background reviews. As motivated in Section 4.1, there are several applications that can benefit from review-level predictions directly. Addi-tionally, note that review labeling is not a trivial task. We trained a supervised logistic regression model with bag-of-words and length features (for both the number of segments and the number of words) using 10-fold cross validation on the labeled dataset. This supervised model yields mean review F 1 of 78.4, 11.7 F 1 points below the best unsupervised result 7 .
Augmenting RS-MixMix with sequential depen-dencies, yielding RS-MixHMM, provides a mod-erate (though not statistically significant) improve-ment in segment F 1 . RS-MixHMM learns that re-finement reviews typically begin and end with back-ground segments, and that refinement segments tend to appear in succession.

RSA-MixHMM additionally learns that segments in refinement reviews are more likely to align to non-NULL recipe steps. It also encourages the segment multinomials to focus modeling effort on words that appear only in the reviews. As a result, in addition to yielding alignments, RSA-MixHMM provides small improvements over RS-MixHMM (though they are not statistically significant). We provide an example alignment in Figure 1. Annotating ground truth alignments is challenging and time-consuming due to ambiguity, and we feel that the alignments are best evaluated via a down-stream task. Therefore, we leave thorough evalua-tion of the quality of the alignments to future work. In this paper, we developed unsupervised meth-ods based on generative models for mining refine-ments to online instructions from reviews. The pro-posed models leverage lexical differences in refine-ment and background segments. By augmenting the base models with additional structure (review labels, alignments), we obtained more accurate predictions.
However, to further improve accuracy, more lin-guistic knowledge and structure will need to be in-corporated. The current models provide many false positives in the more subtle cases, when some words that typically indicate a refinement are present, but the text does not describe a refinement according to the definition in Section 3. Examples include hypo-thetical refinements ( X  X ext time I will substitute... X ) and discussion of the recipe without modification ( X  X  found it strange to... but it worked ... X ,  X  X  love bal-samic vinegar and herbs X ,  X  X hey baked up nicely X ).
Other future directions include improving the alignment model, for example by allowing words in the instruction step to be  X  X ranslated X  into words in the review segment. Though we focussed on recipes, the models we proposed are general, and could be applied to other domains. We also plan to consider this task in other settings such as online forums, and develop methods for summarizing refinements. Regina Barzilay and Lillian Lee. Catching the drift:
Probabilistic content models, with applications to generation and summarization. In HLT-NAACL 2004: Proceedings of the Main Conference , pages 113 X 120, 2004.
 S.R.K Branavan, Harr Chen, Luke Zettlemoyer, and
Regina Barzilay. Reinforcement learning for mapping instructions to actions. In Proceedings of the Association for Computational Linguistics (ACL) , 2009.
 S.R.K Branavan, Luke Zettlemoyer, and Regina
Barzilay. Reading between the lines: Learning to map high-level instructions to commands. In Proceedings of the Association for Computational Linguistics (ACL) , 2010.
 S.R.K. Branavan, David Silver, and Regina Barzilay.
Learning to win by reading manuals in a monte-carlo framework. In Proceedings of the Associa-tion for Computational Linguistics (ACL) , 2011. Thomas G. Dietterich, Richard H. Lathrop, and
Tom  X  as Lozano-P  X  erez. Solving the multiple in-stance problem with axis-parallel rectangles. Ar-tificial Intelligence , 89(1 -2):31  X  71, 1997. J. R. Foulds and P. Smyth. Multi-instance mixture models and semi-supervised learning. In SIAM International Conference on Data Mining , 2011. Minqing Hu and Bing Liu. Mining and summa-rizing customer reviews. In Proceedings of the
ACM SIGKDD Conference on Knowledge Dis-covery and Data Mining (KDD) , pages 168 X 177, 2004.
 Soo-Min Kim, Patrick Pantel, Tim Chklovski, and
Marco Pennacchiotti. Automatically assessing re-view helpfulness. In Proceedings of the Confer-ence on Empirical Methods in Natural Language Processing (EMNLP) , pages 423 X 430, 2006.
 D. Koller and N. Friedman. Probabilistic Graphical
Models: Principles and Techniques . MIT Press, 2009.
 Jingjing Liu, Yunbo Cao, Chin-Yew Lin, Yalou
Huang, and Ming Zhou. Low-quality product review detection in opinion summarization. In
Proceedings of the Joint Conference on Empir-ical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL) , pages 334 X 342, 2007.
 Bo Pang and Ravi Kumar. Search in the lost sense of query: Question formulation in web search queries and its temporal changes. In Proceedings of the Association for Computational Linguistics (ACL) , 2011.
 Bo Pang and Lillian Lee. Opinion mining and sen-timent analysis. Foundations and Trends in Infor-mation Retrieval , 2(1-2):1 X 135, 2008.
 Ana-Maria Popescu and Oren Etzioni. Extract-ing product features and opinions from reviews.
In Proceedings of the Human Language Tech-nology Conference and the Conference on Em-pirical Methods in Natural Language Processing (HLT/EMNLP) , 2005.
 Lawrence Rabiner. A tutorial on hidden markov models and selected applications in speech recog-nition. Proceedings of the IEEE , 77(2):257 X 286, 1989.
 Dragomir R. Radev, Eduard Hovy, and Kathleen
McKeown. Introduction to the special issue on summarization. Computational Linguistics , 28 (4):399 X 408, 2002. ISSN 0891-2017.
 Oscar T  X  ackstr  X  om and Ryan McDonald. Discovering fine-grained sentiment with latent variable struc-tured prediction models. In Proceedings of the 33rd European conference on Advances in infor-mation retrieval , ECIR X 11, pages 368 X 374, 2011. Ivan Titov and Ryan McDonald. A joint model of text and aspect ratings for sentiment summariza-tion. In Proceedings of the Association for Com-putational Linguistics (ACL) , 2008.
 Adam Vogel and Daniel Jurafsky. Learning to fol-low navigational directions. In Proceedings of the
Association for Computational Linguistics (ACL) , 2010.
 Stephan Vogel, Hermann Ney, and Christoph Till-mann. Hmm-based word alignment in statistical translation. In Proceedings of the 16th conference on Computational linguistics -Volume 2 , COL-ING  X 96, pages 836 X 841, 1996.
 Zhu Zhang and Balaji Varadarajan. Utility scoring of product reviews. In Proceedings of the ACM SIGIR Conference on Information and Knowledge
Management (CIKM) , pages 51 X 57, 2006.
