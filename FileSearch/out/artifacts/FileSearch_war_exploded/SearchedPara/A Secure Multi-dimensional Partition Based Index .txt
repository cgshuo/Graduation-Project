 Database-as-a-Service (DAS) [1] is an emerging data management paradigm, in which maintain DBMS in-house. DAS could give enterprises higher data availability and maintenance cost by sharing expertise of database professionals. DBMS is comprised trusted or not there are four different types of models which are illustrated in table 1. 
In DAS scenario, untrusted server poses many significant security challenges, foremost of which is the issue of data privacy. In multi-user scenario encryption [2,3] is an effective way of protecting data privacy. The encrypted data is also called cipher. However, encryption is often supported for sole purpose of protecting the data in storage and assumes trust in the server, which decrypts data for query execution, because major challenges come from outs ide attackers. While in DAS scenario, challenges not only come from outside attackers, but also come from the untursted delegated to the trusted client. The optimization principle is to push as much work as possible to the server. The major challenge is how to build secure indexes on encrypted data. Various techniques are proposed [5,6,7,8,9,10], among which partition is an effective one. However, current partition only focuses on single-dimension. We will show how multiple such indexes would lead to extra information leakage in the following. 1.1 Attacks on Multiple Single-Dimensional Partition Based Index We will show how multiple single-dimensional partition based indexes lead to extra information leakage by the following example. Example 1: Consider the plaintext table patient in table 2(a), attribute age and disease are sensitive. Tuple level(referenced [1] about encryption granularity) encrypted table along with two partitions on sensitive attributes is illustrated in table 2(b). The partition scheme is plotted in table 2(c). 
Here we use equi-depth partition scheme, the depth of which is 3. In partition scheme, the tuples within the same bucket are indistinguishable from each other. So for server will return at least 3 tuples if match. However, the security constraint is broken for multiple attribute range query, i.e., there is no lower limit (positive integer) on the number of returned tuples. For example, for predicate such as where age=1 and disease=B, the server will return only one tuple. The security broken comes from the un-uniform data distribution in multi-dimensional space. A graph representation is illustrated in figure 1, where each asterisk represents data along two dimensions: age and disease. Although the number of tuples within each bucket along single dimension integer). Observation 1: Although data distribution along single dimension is uniform, in most cases the data distribution along multiple dimensions is un-uniform. The more the number of dimensions, the higher un-uniform the distribution is. 1.2 Contributions and Paper Outline single-dimensional partition, would be broken when there are multiple such partitions. To solve above problem, we propose a secure multi-dimensional partition. Specifically, our major contributions are as follows: 1. We propose two security constraints based on minimal confidential interval and 2. Single-dimensional partition considers one dimension at a time, while our 3. Since optimal multi-dimensional partition is a NP-hard problem, we propose a 
The rest of the paper is organized as follows. We first introduce security and efficiency evaluators in Section 2. Section 3 has an overview of related work in single-dimensional partition and multi-dimensional histograms. Section 4 describes heuristic based greedy algorithm for approximately optimal partition. Experiments in section 5 compare our partition with single-dimensional one under various scenarios. Section 6 concludes the paper and gives potential directions for future work. 2.1 Security Evaluation To keep the server from unauthorized access, sensitive data are encrypted before inferring corresponding plaintext or keys. Security depends on the attacker X  X  prior knowledge  X  users X  security requirements and plaintext distribution. According to attacker X  X  prior knowledge, there are three classes of attacks: known plaintext attack , selective plaintext attack and cipher only a ttack, among which selective plaintext is the most common scenario. So we only focus on selective plaintext attack. 
Users X  security requirements have a strong relationship with data distribution. So we discuss them together. Users X  security requirements vary to a large extent, among which the strictest security requirement comes from cryptography community. The different messages of the same length. Kantarcioghu [7] showed that any secure database scan to execute queries and thus will be inefficient and impractical. Fortunately in most cases users X  security requirements are not so strict. In the following we will introduce two practical security requirements. The first one is based on minimal confidential interval and interval density. The formal definition is as follows. Definition 1: Density based minimal confidential interval . Domain P is divided into s is minimal confidential interval, n i and w i represent the number of tuples and width of the ith interval respectively. Here we call n i /w i the density of the ith interval. 
Under minimal confidential interval an attacker need not determine the exact plaintext p corresponding to a cipher value c. Instead, what an attacker need is to obtain data. When the data distribution is uniform, above partition can be reduced to equi-width partition. 
The second security requirement is based on minimal occupation number. The formal definition is as follows. Definition 2: Minimal occupation number . Minimal occupation number specifies the least number of tuples contained in any cell under multi-dimensional space. Assume 
Minimal occupation number has some similarity with k-Anonymity in data publishing in that they are all used for de-identification of individual tuple. However, the entire tuples, mainly used for outliers. Generalization involves replacing specific values with more general ones. Data publishing is mainly used for statistical information query. queries. So cell values must be kept untouched. In this paper we achieve minimal occupation number through cells merge, which will be discussed in section 4.2. 
Above two security definitions are complementary. If only one is satisfied, the partition is still insecure. For example, for table 2(b) we assume that minimal confidential interval satisfied. However, from example 1 we can see that the partitioning is insecure. 2.2 Efficiency Evaluation From security X  X  perspective, the number of tuples in each cell is as many as best. While from efficiency X  X  perspective, the number of tuples in each cell is as little as best. To evaluate the efficiency we propose a new evaluator, which is formally defined as follows: Definition 3: Average squared variance of cell . Assume minimal occupation number is k, then average squared variance of cell is 21/2 of cells, n i is the number of tuples in the ith cell. 
It X  X  intuitive that the value of above evaluator depends on the value of k. To make partition based on different k comparable, we introduce another evaluator: Definition 4: Average cell size . Assume minimal occupation number is k, then average cell size is the ith cell. 3.1 Problem Statement In this paper we mainly address secure and efficient multi-dimensional partition problem, which holds the following characteristics: 1. The cells after multi-dimensional partition are security guaranteed. Specifically, 2. Our multi-dimensional partition is efficient, which means that average squared 3.2 Related Work There is much previous research on querying over encrypted data [4,5,6,8,9,10]. An algebraic framework [4,10] is developed for query rewriting over encrypted representation to minimize the computation at the client site. For range queries, there are three solutions: node level encrypted B+-t ree [5], order-preserving encryption [9], information [6] is proposed. There are also various security and efficiency evaluators, including equivalent class and graph automorphism [5], average squared error of estimation and entropy [8]. However, as far as I know all above research only focus on efficient storage of encrypted data [11]. [12] proposes secure SQL evaluation on XML database. 
To address extra information leakage induced by multiple single-dimensional partitions, we propose a secure and efficient multi-dimensional partition. One related research area is multi-dimensional histograms. There are many multi-dimensional histograms including equi-depth [13], MHist [14], GenHist [15], STGrid [16], STHoles [17]. According to whether the partitions are overlapped or not, there are two classes of histograms. Our multi-dimensional partition shares some intriguing features with non-overlapping histograms. First, they all use rectangles as partitions (in 2-dimension space). Second, they use the same partition schemes, which are illustrated in Fig. 2. We say that each partition scheme is Fig. 2. is more flexible than those to its left, since for example we can simulate recursive partition with arbitrary partition using at most the same number of buckets, but not vice-versa. While from the simplicity of partition each scheme is more difficult than those to its left. In spite of these connections, there are fundamental differences between multi-dimensional histogram and our partition. First, the main objective of the histogram is to form buckets enclosing close-to-uniform tuple partitions which are security constrained and efficiency optimized. Second, histograms are used for estimation of queries. Bounded estimation error is acceptable. However, our partition is used for index. Any error is unacceptable. 
In our partition we require that each cell must be security constrained and efficient optimized. We select arbitrary scheme for it X  X  the most flexible (efficient) of the three schemes. To solve security degradation caused by multiple single-dimensional partitions, we propose a multi-dimensional partition. For simplicity of illustration, we show how to straightforward. The cells in 2-dimensional space are rectangles. In the following multi-dimensional partition includes two steps: cells partition and cells merge. In the first step, each dimension is partitioned to p(q) intervals according to domain range and data distribution. After the first step, each cell produced should be minimal confidential interval constrained and the whole 2-dimensional space is partitioned to p*q cells. In the second step, adjacent cells are merged together to ensure the number of tuples in each cell is at least k and as minimal as possible. Since optimal cells merge is a NP-hard problem, we propose a sub-optimal heuristic based greedy algorithm. In the following we will discuss these two steps in detail. 4.1 Cells Partition Given a 2-dimensional space, we first partition it to p*q rectangles. Specifically we first respectively. Each interval is minimal confidential interval constrained. We will show this procedure by an example. Domain range of attribute age is [20, 50]. The type of attribute disease is categorical. So we transform it to numeric type first. To simplify problem, the transformation is straightforward. Six diseases are mapped to 10, 20, 30, 40, 50 and 60 according to their lexicographic order. So domain range of attribute disease is [10, 60]. Data distribution of two attributes are uniform. We partition each dimension into 3 intervals uniformly. The whole 2-dimensional space is divided into 3*3 cells, which are illustrated in Fig. 3. 
In Fig. 3. the number in each cell demonstrates the number of tuples in it. Since the corresponding cell. 4.2 Cells Merge After cells partition, we have p*q cells, any of which is minimal confidential interval constrained. However the number of tuples in each cell varies to a large extent. Assume the minimal occupation number is k. For those cells the number of tuples in which is less than k, we will apply cells merge to ensure the number of tuples in each cell is at least k. While from efficiency X  X  perspective, the number of tuples in each cell should be problem, which we call optimal cells merge problem. 
Cells merge can be done iteratively until minimal k is satisfied. In each iteration cells merge has two limitations: first, merge can only be applied to adjacent cells, so in p*q context, a cell has at most 4 adjacent cells; s econd, merged cells must be rectangles. For example, in Fig. 3 assume minimal occupation number is 15, so cell {4, 7} can only be merged either with cell {20} or with cell {11, 12} in one iteration. In order to find the NP-hard problem. The proof can be found in [18]. 
Since optimal cells merge is a NP-hard problem, we propose an approximately figure 3. In the example we assume minimal occupation number is 15. 1. Cells merge is processed by scanning cells linearly, so a cell has at most two cells 2. Once a cell which has exact 15 tuples occurs, terminate any iterative containing 3. A cell can has several secure merged cells. We call each one candidate cell. 4. For cells which can not be merged to form secure cell even after exhaustive try, After cells scanning, the cells in Fig. 3 are merged to secure ones illustrated in Fig. 4. Cells merge algorithm is illustrated in Fig. 5. Assume after cells partition there are n cells in total. The space complexity of our greedy algorithm is O(n). In the worst case, to merge n 1/2 cells we need scan n cells. In average to merge one cell we need scan n 1/2 cells. Since there are n cells in tota l, so the time complexity is O(n 3/2 ). 5.1 Experimental Setup We carried out experiments on a 1.7G Hz Pentium machine, with 512M RAM. The algorithm of cells partition and merge was implemented by Java 1.4.1. Our experiments were based on Adults database from the UCI Irvine Machine Learning Repository [19], which is comprised of data from US census. The table has 14 attributes in our experiments: age and occupation. Age is continuous and has 74 distinct values in total. Occupation is categorical and has 14 distinct values in total. We deleted the tuples with missing values in our experiments. 
In our experiments we compared the efficiency of our multi-dimensional partition average cell size introduced in Section 2.2. 5.2 Results Analysis In our experiments we explored the impacts of the following dimensions on partition efficiency: 1. The impact of minimal occupation number. 2. The impact of data density 3. The evaluator used: average squared variance of cell (denoted as asvc), average 
First, we experimented on 1000 tuples with minimal occupation number varied. The result is plotted in Fig. 6(a), which show that efficiency of multi-dimensional partition (denoted as MD) is much better than that of single-dimensional partition (denoted as SD) independent of minimal occupation number. With the increase of minimal efficiency evaluator (average squared variance of cell) is negatively related to minimal occupation number. The decrease degree of SD is quicker than MD, which means that SD is more sensitive to the value of minimal occupation number. 
To explore the impact of data density on efficiency, we made the second experiment on a much denser dataset, which includes 10000 tuples with the same domain range as counter-intuition is the efficiency degrad ation when minimal occupation number is number compared to data density, which lead s to many big original cells compared to minimal occupation number and almost no cells merge in the end. So it X  X  recommended to increase minimal occupation number when data density increases. 
We adjusted the value of minimal occupa tion number according to data density in the third experiment. The result was plotted in Fig. 6(c). The values of average squared variance of cell are much larger than those in the first experiment, which means that this evaluator is dependent of minimal occupation number. So we did the fourth experiment evaluator is independent of minimal occupation number. 
Whatever minimal occupation number  X  data density and efficiency evaluator, the single-dimensional partition. In this paper we first illustrate multiple single-dimension partition indexes are insecure because of un-uniform data distribution in multi-dimensional space, then propose a multi-dimensional partition based index which includes two steps: cells partition and cells merge. Since optimal cells merge is a NP-hard problem, we propose heuristic based greedy algorithm. Experiments show that our greedy algorithm is secure and effective. 
One desirable feature of multi-dimensional partition is dynamic maintenance of partition for static scenarios. While in dynamic scenario, the cells may become insecure (too few tuples) or inefficient (too many tuples). A straightforward solution is to split and merge. Besides, in above discussion we assume that query workload is uniform. workload aware partition. The solution to above two problems will be our future work. Acknowledgements. This paper is in part supported by the National Natural Science Foundation of China (60573092). 
