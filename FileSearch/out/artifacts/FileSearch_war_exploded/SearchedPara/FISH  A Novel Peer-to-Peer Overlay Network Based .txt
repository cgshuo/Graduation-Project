 P2P overlay networks have recently emerged as a good substrate for building internet scale and robust systems. The native P2P networks are based on one or more centralized servers, such as Napster and Kazaa. The unstructured P2P networks like Gnutella [1], impose less and loose the constraints on t opology and resource placement strategies. In the past few years, different structured P2P networks [2,3,4,5] are also designed. They impose a certain structure on the over lay network and control the placement of resources, thus exhibit the unique properties that unstructured P2Ps lack. Many of these structured networks are based on the Hypercube structure or the deBruijn structure, such as Pastry [4], Tapestry [6], HyperCup [7], based on Hypercube, and Koorde [8], CAN-d2B [9], Distance Halving [10], ODRI [12], based on deBruijn.

An n -cube Hypercube graph contains 2 n vertices labeled from 0 to 2 n -1 .Thereis an edge between two vertices if and only if the binary representations of their labels differ by one bit. Given a Hypercube with N vertices, the diameter is log 2 N and the average distance is log 2 N/ 2 . The degree of each vertex grows logarithmically with N . Hence, the Hypercube is not a constant-degree topology, but it achieves an optimal level of connectivity. There are log 2 N vertex-disjoint paths between any two vertices. That is, there still exists a path of length at most log 2 N between any two vertices when log 2 N -1 edges are removed from the network. The fault-tolerance capacity of Hyper-cube is excellent since there are number of k ! different shortest paths between any two vertices in distance k . Drawback of the Hypercube structure is that a vertex must keep increasingly large number of connections as the number of vertices increases. Hence, Hypercube does not achieve a good tradeoff between the routing table size and the routing delay when it is utilized to implement a structured P2P network.

In contrast to Hypercube, t he out-degree of each vertex in a deBruijn digraph does ter of deBruijn is asymptotically optimal since it almost achieves the Moore bound. Fraigniaud and Gauron [9] proposed a famous structured P2P network based on the deBruijn topology, called D2B. Koorde [8] extends the Chord to obtain optimal de-Bruijn degree/diameter tradeoff. Unlike D2B, Koorde does not constrain the selection of node identifier, while it supports concurrent joins. Kaashoek and Karger [8] inves-tigated Koorde X  X  resilience under a rather ha rsh failure scenario:  X  X f a network is still connected when all nodes fail with probability 1/2, the out-degree of some nodes must be O ( logN )  X . Inspired by this observation, they proposed a mechanism to increase the node degree at the cost of losing the constant degree advantage of the deBruijn topology.

As discussed above, the structured P2P networks based on deBruijn topology inherit the advantages of deBruijn topology, including constant node degree and optimal di-ameter. These P2P networks however, have the following two disadvantages. First, they assume that the resources follows an uniform distribution. In practice however, this as-sumption does not hold. Hence, Networks based on deBruijn fail to meet the ideal load balance and search efficiency if the resource distribution is uneven even highly skewed. Secondly, they suffer from poor fault-tolerance since the node degree does not increase with the increase of network size.

Both Hypercube and deBruijn topologies possess certain unique advantages. Hyper-deBruijn topology is the a hybrid of Hypercube topology and deBruijn topology, and combining advantageous features from both models. Hyper-deBruijn was first introduced in the interconnection field [11], and later used to support wormhole rout-ing [17]. In this work, we propose a novel P2P overlay network, called FISH, based follows: 1. Based on the Hyper-deBruijn topology, we design a novel structured P2P network 2. We propose a fault-tolerant routing algorithm, combined with the features of a 3. We propose a constant degree and a logarithmic degree variants of the Hyper-4. We evaluate the major metrics of FISH by extensive experiments. The results show 2.1 Hyper-deBruijn To introduce Hyper-deBruijn, this paper fo llows notations and definitions defined in deBruijn graph is used. A network can be modeled as a graph G ( V G ,E G ) ,where V G is the set of vertices and E G is the set of edges.
 integer n , Z n k denotes the set of all length-n strings of Z k . The order-n Hypercube graph H ( n ) consists of the set of Z n k vertices. There is an edge between two vertices if and only if their labels differ by exactly one bit. H ( n ) is an undirected graph with k n vertices. Consider two vertices x and y of H ( n ) . Proceeding from x , it is possible to reach y in, at most, n hops.
 For a positive m ,anorder-m deBruijn graph D ( m ) consists of the set Z m k of vertices. where  X   X  Z k . The order-m deBruijn is a directed graph with k m vertices. Consider two vertices x and y of D ( m ) . Proceeding from x , it is possible to reach y in, at most, m hops.
 Definition 1. Let G ( V G ,E G ) and H ( V H ,E H ) be two graphs. The direct product graph of G and H , denoted by G  X  H , has a node set V G  X  V H . For any u, v  X  G and x, y  X  H , x = y ,or ( x, y ) is an edge of H and u = v Definition 2. Let H ( n ) be an order-n Hypercube graph and D ( m ) an order-m de-Bruijn digraph. Then an order-( n, m ) Hyper-deBruijn graph HD ( n, m ) is the direct product of H ( n ) and D ( m ) , denoted as H ( n )  X  D ( m ) .
 Figure 1 shows the HD ( 2 , 2 ) of Hyper-deBruijn. 2.2 Construction of FISH Hyper-deBruijn is a combination of Hypercube and deBruijn, thus inheriting desirable features of both topologies. However, Hyper-deBruijn is a static structure and only has desirable features with concrete number of nodes, i.e., 2 2  X  2 2 =16 in Fig. 1. This requirement is difficult to meet in dynamic scenarios, and a P2P network should support arbitrary number of nodes. In this section, we present how to use the topology feature of Hyper-deruijn to construct a randomized topology that is suitable for P2P networks.
Suppose the ID of a node of Hyper-deBruijn is &lt;h,d&gt; which represents the Hyper-cube part and deBruijn part respectively. Let a deBruijn have M nodes and a Hypercube have N nodes. The randomized topology can be constructed as follows:
Firstly, for d , it employs a constant routing table with multiple entries, where each entry represents a matching suffix up to a di git position in its ID. The connection from d to another d is the same as deBruijn graph introduced in the last subsection, i.e, d =( x m ,x m  X  1 , ... ,x 1 ) connecting to d =( x m  X  1 ,x m  X  2 , ... ,x 1 , X  ) .
Secondly, for Hypercube part h = h 1  X  X  X  h i  X  X  X  h k ( 1  X  i  X  k ) h makes a connection with another h as follows: h i bit is flipped, and each of the remaining k  X  1 bits is chosen uniformly at random.

Finally, the SHA-1 hashing function is adopted for producing an ID for each node and data evenly. To support more data than nodes, the node ID is the prefix of data ID. Then the data can be distributed across t he network according to the longest prefix matching rule.

As a result, the topology of FISH becomes a deterministic deBruijn and a completely randomized Hypercube. The deBruijn graph with constant degree has an optimal au-tonomy and routing efficiency, but has a poor fault tolerance due to its constant degree. Hypercube can make up the disadvantage of deBruijn. However, the self-stabilization of Hypercube topology is computationally e xpensive. A randomized Hypercube is easy to control in dynamic scenarios since it provides a large set of possible connections for a given node ID. That also means the randomized Hypercube provides more fault tolerance than traditional Hypercube. The refore, FISH has a good autonomy and fault tolerance.
 According to [23], as the construction scheme for Hyper-deBruijn, the topology of FISH has become a  X  X mall-world percolation X  network which satisfies the following condition.
 Definition 3. A  X  X mall-world percolation X  network of dimension d is a graph whose vertex set is associated with the d  X  dimensional mesh. The probability t hat an edge Hyper-deBruijn, || u  X  v || stands for the distance in Hyper-deBruijn hashing namespace. FISH can only theoretically be a  X  X mall-world percolation X  network. In distributed and dynamic scenarios, it is difficult for each node of FISH to satisfy the condition (given by Definition 3) of the  X  X mall-world X  network. For example, the nodes satisfying || u  X  v || =1 may not have an edge each other. Therefore, the traditional greedy routing for the  X  X mall-world percolation X  network [23] may fail for FISH in some cases. To solve the problem, we adopt the following method.

The topology still owns the  X  X mall-world X  network feature that FISH is a  X  X ower-law X  network. The random  X  X ower-law X  network has a degree distribution: where and  X  (  X  ) is the Riemann zeta function. k max is the maximum degree of the network.
The  X  X ower-law X  network means some fractions of the network nodes have a high degree. For any node with degree k , we say it is a high degree node if k  X  k max / 2 . From the Equation (1), we can get the number of high degree nodes G given by: where N is the total number of nodes.
 b f ( k ) dk and and For k max  X  X  X  ,wehavethat 1 k We have shown that G = O ( N the Definition 2, Hyper-deBruijn can be viewed as a Hypercube where each node rep-resents a deBruijn graph (deBruijn group), and symmetrically it can also be a deBruijn graph with each node having a Hypercube group. When  X  = 2 , there is at least one high degree node in each Hypercube or deBruijn group.

As noted above, the greedy routing algorithm used for  X  X mall-world X  network may fail for FISH. The failures often happen when querying the low degree ( k&lt; lo g N ) formation for a routing algorithm to discover such nodes. To solve this problem, the problematic nodes are forced to have an edge to the high degree nodes in its deBruijn group. According to the above analysis, there should be at least one high degree node in each deBruijn group. The high degree nodes can be found using the deBruijn part rout-ing algorithm that will be proposed in section 2.3. As a result, high degree nodes have edges to most nodes of the network, while ot her nodes are connected using the Hyper-deBruijn construction rule. To apply the information, we adopt an improved routing algorithm to speed up the routing for FISH in section 2.3. Though a randomized topol-ogy may lead to imbalanced node degrees that have impacts on routing efficiency, our improved routing method can avoid this.

The construction method of FISH can guarantee that FISH obtains a good tradeoff among autonomy, efficiency, robustness and load balancing in some points. 2.3 Fault Tolerance Routing Algorithm Since nodes often fail without notifying other nodes in the P2P network, a fully dis-tributed routing algorithm is very important for being adaptable to one or more node failures. To address this problem, the routing algorithm should provide as many as rout-ing paths between any pair of nodes.

Suppose a node &lt;h, d&gt; originates a message or receives a message from a neighbor, and the destination node of the message is &lt;h ,d &gt; . This message might be used to of resource. A greedy routing algorithm designed for FISH is described as follows. Here, Hyper-algorithm represents the routing algorithm for Hypercube proposed in [6] and De-algorithm represents the routing algorithm for deBruijn shown in [8]. 1. ( h = h ) and ( d = d ) 2. ( h = h ) and ( d = d ) 3. ( h = h ) and ( d = d ) Next we use the features of the  X  X ower-law X  network to improve the algorithm.
To make most use of features of the randomized topology, a randomized selection neighbor scheme is proposed to improve the fault-tolerant routing algorithm. Assuming node i with capacity X  X  metric c i has k i edges, the randomized scheme is given by:
Node i select a neighbor j with probability: p i,j = 1 k
For each scenario of the fault-tolerant r outing algorithm, in every hop, suppose cur-rent node A selects a neighbor B with the random selection neighbor scheme, and the Hyper-deBruijn neighbor of node A is C . Node B checks its neighbor identifiers to see if there is a neighbor D closer to the destination node than C . If there exists such a D node, the query is forwarded to D via node B . Otherwise the query reaches node C ,then C repeats to route the query based on this algorithm until the query meets its destination.

From the selection probability formul a, we know the message from a node is usu-ally forwarded to the highest degree and most powerful node among all its neighbors. The proposed routing algorithm is similar to the first max-degree search algorithm [22], which has been proven to be more efficient than other routing algorithms for  X  X mall-world X  networks. The actual performance of the traditional first max-degree search al-gorithm is far worse than the theoretically predicted value due to the fact that the as-sumption that the nodes scanned during a walk are unique, i.e., no node is scanned more than once. Besides applying the principle of the first max-degree search algorithm, our improved routing algorithm also adopts the greedy routing which makes the query to be approaching the destination node more gr adually. Therefore, the scheme avoids the same node being scanned twice. Furthermore, unlike the traditiona l greedy routing al-gorithm [23], the improved algorithm uses the high degree nodes to speed up the query. Note that high degree nodes have been chosen according to the node X  X  capacity. The selection neighbor probability can guarantee that the query is forward to a powerful neighbor. Therefore, the routing scheme reduces the impact on the search efficiency due to the degree imbalance of the randomized network. The improved routing algo-rithm is a reasonable merge of routing algorithms for a  X  X mall-world X  network and a structured network. 2.4 Self-Stabilization of FISH Self-stabilization is important to P2P networks, since they usually suffer from highly dynamic nodes operations. We deal with these operations in the following cases. Join. Consider that peer A wants to join the system. Peer A first finds a peer B with closest ID to A in FISH using the fault-tolerant routing algorithm. Then peer A updates its routing table according to peer B  X  X . Finally peer B transfers half its data to A . Departure. Consider that peer A wants to leave from the system. Peer A finds another neighbors update their routing tables.
 Failure. A super node is selected in each deBruijn group, and suppose this super node is A . Peer A constructs a local queue and a statistical model, by considering some factors such as which peers are more important nodes; which data is most frequently queried; which peers are often failed. A can get these statistical information from high degree nodes in that deBruijn group. A puts k nodes with the highest probability of failure in front of the queue after analyzing these factors using the statistical model. These k nodes may vary periodically. For each X of the k nodes, peer A periodically visits X to see if it fails. Once it fails, then peer A notices neighbors of X . The problem of designing an optimal diameter for a graph with a fixed degree has been extensively studied in the past. Assume that a graph has a fixed degree k and a diameter D . The minimum diameter in any graph built on the top of N nodes is given as follows [16,18]: When k is lo g 2 N , the lower bound of the diameter is O ( log 2 N log
Next we first analyze the diameter of the general design of FISH, then propose an asymptotical optimal diameter design for FISH.

Suppose N = n  X  m , n is the number of Hypercube nodes and m is for deBruijn. Then nm =lo g 2 N . This means the diameter of Hyper-deBruijn is independent of the com-bination of Hypercube and deBruijn. Compared with the theoretical lower bound D M given by Formula (4), it can be concluded that the diameter is not optimal.
An intuitive idea for improving the diameter design of Hyper-deBruijn is reducing n since deBruijn has optimal diameter. As n decreases, Hyper-deBruijn adopts more deBruijn protocol, and therefore getting a better diameter design. However, this solution has the following main shortcomings.

As m increases, the degree of the Hyper-deBruijn decreases. In this case, the Hyper-deBruijn cannot get a good tradeoff amongst search efficiency, fault tolerance and load balancing when the degree is less than lo g 2 N . Since it can be proven that if a P2P net-work is a fault tolerant and load balanci ng network, then the degree is at least lo g 2 N [8]. Moreover, reducing n will cause the drawbacks of deBruijn to be more prominent. In the following, we show how to improve FISH so as to make the diameter be asymp-totical optimal while keeping a good tradeoff amongst search efficiency, fault tolerance and load balancing.
 Let n = u v and m = v +1 .Then N = u v  X  ( v +1) ,where u and v are positive integers. In the following, we will construct the topology which has an asymptotical diameter and a good tradeoff for both the constant degree and the logarithmic degree. 3.1 Constant Degree 1. Topology Construction In this case, u is a constant. A constant degree topology with an asymptotical optimal diameter can be constructed in two steps.

Firstly, u v deBruijn groups are constructed in advance and there are v +1 nodes within each deBruijn group. Since deBruijn is a Hamiltonian graph, there is a cycle passing through all the nodes in the deBruijn group exactly, and all the nodes in the Hamiltonian circle are numbered as 0 , 1 , ... ,v .

Next, Hypercube neighbors are construc ted for nodes in the deBruijn groups. For node i ( 0  X  i&lt;v ) in a group, u  X  1 nodes whose IDs are i +1 are randomly selected from the u v  X  1 deBruijn groups and connected to node i as the Hypercube neighbors of node i .

For the above constructed topology, the degree is u +( u  X  1) = 2 u  X  1 ,where u and ( u  X  1 ) are the degree of the deBruijn part and the Hypercube part respectively. since u v ( v +1) = N  X  v +lo g u ( v +1) = lo g u N . To the best of our knowledge, the above constructed topology is a new kind of P2P overlay network with a constant degree and an asymptotical optimal diameter.

Figure 2 shows an example of the proposed topology, and the topology consists of 8 deBruijn groups within each which there are 4 nodes. In this figure, there are N = u ( v +1)= 2 3  X  (3 + 1) = 3 2 nodes, and the diameter and degree are 3 and 5. From the figure, we know that the diagonal lines are Hypercube connections and the lines with an arrow are deBruijn connections. 2. Routing Algorithm Although the new topology can also use the fault tolerant routing algorithm to perform a query, the new topology is different from general Hyper-deBruijn, so a new routing algorithm is proposed to perform a query more efficiently.
 We still use the SHA-1 hashing functio n to produce data and node IDs. The node ID is the prefix of data ID. Since all the nodes in a deBruijn group have been num-described as follows.
 Step 1. Routing within the Hypercube section while using the sequence of Hamilto-Step 2. Routing in the deBruijn group Step 1 is a Hypercube part routing which can find the string using at most k hops. Step 2 is deBruijn part routing using at most lo g u ( v +1) hops. Therefore the diame-ter is v +lo g u ( v +1)=lo g u N and the routing algorithm can be performed efficiently. For example, in Fig. 2, suppose the message is routed from peer (000 , 00 , 0) to peer (111 , 00 , 0) . 3.2 Logarithmic Degree 1. Topology Construction A logarithmic degree topology with an asymptotical optimal diameter is constructed as follows.

Similar to the constant degree topology, u v deBruijn groups are constructed first resulting in v +1 nodes within each deBruijn group. These v +1 nodes are numbered as 0 , 1 , ... ,v according to the hamiltonian circle.
 Secondly, Hypercube neighbors are constr ucted for nodes in the deBruijn groups. For node i ( 0  X  i&lt;v ) in a group, u  X  1 nodes whose IDs are i +1 are randomly selected from the u v  X  1 deBruijn groups and connected to node i as the Hypercube neighbors of node i .

Finally, for all u v deBruijn groups, additional v  X  u edges are added to every node in the same deBruijn group. In this case, each gr oup becomes a complete connected graph. This means the diameter of every group is 1 .

For the same reason of the constant degree topology, the degree of the above con-structed topology is ( u  X  1) + v = u + v  X  1 . The diameter is v +1 .Let v be log 2 N log lo g 2 N  X  1 . The diameter is v +1= log 2 N log theoretical lower bound. This leads to a constructed topology that has a logarithmic degree and an asymptotical optimal diameter. An example of the topology is similar as the Fig. 2. The Hypercube part is the same, and the deBruijn part for the logarithmic degree topology is a complete graph. 2. Routing Algorithm The node and data IDs for the logarithmic degree topology are the same as the con-stant degree topology. The only difference i s that the node ID of the logarithmic degree akeywhoseprefixis ( y 0 y 1 ... y v  X  1 ; s ) . The routing algorithm for the logarithmic de-gree topology is described as follows.
 Step 1. Hypercube domain routing while using the sequence of Hamiltonian circle Step 2. Complete graph routing Step 1 is a Hypercube domain routing to find the key using at most v hops. To optimize the procedure in the situation that there is no path in the Hypercube-domain, step 2 can be run first, after which step 1 is executed. Step 2 only uses one hop. Therefore the We use PeerSim to implement proposed algorithms of FISH. PeerSim is a P2P simu-lation framework aimed at developing and testing any kind of P2P protocols [24]. The experiment environment is a PC with Pentium 4-3.0G, 2 G memory.

We use FISH to denote the general design of Hyper-deBruijn and FISH+ to denote the optimal diameter design (with the logarithmic degree) of Hyper-deBruijn. We also implement Pastry [4] and Chord [5] to comp are FISH, and Koorde [8] based on deBruijn andViceroy[20]basedonButterflytocompareFISH+.Forafaircomparison,we design the routing table size of each network to be lo g 2 N as the corresponding protocol of the network. All queries are generat ed randomly and uniformly at each node for each network. We evaluate these networks usi ng the number of nodes from 256 to 1 million.
Figure 3 shows the worst case path lengths of routes (also called network diameter) taken by queries for different networks. Figur e 4(a) shows the result for general designs. The result shows that the maximum number of hops required for a query is almost same for Chord and Pastry. That is because they both own a length of lo g 2 N diameter, but Pastry provides a more flexible and efficien t routing scheme. FISH has the smallest di-ameter which is smaller than half of the diameter of Pastry and Chord with the help of high degree nodes. As given in Fig. 3(b), the maximum numbers of hops for optimal di-ameter networks are much smaller than the numbers in Fig. 3(a). When these networks have a lo g 2 N degree, their diameters are asymptotically optimal. In the Figure, FISH+ has the smallest diameter, since FISH+ has a deBruijn subgraph while others only have a line as subgraph.

Figure 4(a) shows the average number of hops required for a query for Chord, Pastry and FISH networks. FISH has a smaller average distance than others, which shows that it has the best search delay. From Fig. 4(b), it can be concluded that for the optimal diameter networks the average number of hops required for a query of FISH+ is smaller than Viceroy and Koorde.

Next we examine the effects of dynamic networks on the routing efficiency. In this experiment, each system initially has 16k peers, then the same number of peers begin concurrently join and (depart) in (from) the network. Thus the number of peers in the network hardly changes. Figure 5(a) shows the variation of the average querying path lengths of general designs. As shown in the result, the degree of the fluctuation for FISH is close to the degrees of Pastry and Chord, but FISH provides more flexible autonomy in terms of each node. Almost the same result is presented in Fig. 5(b) for the networks with optimal diameters. Though the number of querying hops have been small, the variations of Viceroy and Koorde are still se rious. FISH+ adapts to the dynamic network well, which validates our design.

Figure 6 presents the degree distribution of our proposed networks consisting of 2 12 = 4k nodes. This metric reflects the load balance of topology. As our experimental configuration, the theoretical value of the degree is lo g 2 N =1 2 . From the figure, for FISH+, the ratio of the node degrees equaling 12 exceeds 4 0% , and that of the remaining peers are close to the two side trails of the curve. The distribution of FISH spans more, since its neighbor-chosen scheme is random. However, the imbalanced node degrees do not have an effect on the routing efficiency.

Figure 7 plots the probability that a query encounters a node failure while following a path to its destination using the forwarding algorithm of the corresponding protocol. For the same percentage of node failures, the pr obabilities that a query in Koorde and FISH+ encounters a failure on its path are higher than other networks, but FISH+ encounters much fewer failed nodes than Koorde. The robustness of FISH is much superior over Pastry, FISH+ and Koorde with the help of the randomized construction method for the Hypercube domain. In this paper, we present a novel P2P overlay network, FISH, based on the Hyper-deBruijn topology. It inherits advantages of Hypercube and deBruijn while strongly re-ducing the influence of the disadvantages. We first introduced Hyper-deBruijn topology, then gave a randomized general design of Hyper-deBruijn for P2P networks including the construction methods, self-stabilizatio n mechanism of topology, and a fault-tolerant routing algorithm. Next, we proposed two improved Hyper-deBruijn topologies to get an asymptotically optimal diameter. Finally, we evaluated FISH using simulation. The results verify our designs for Hyper-deBruijn. This research was supported by the National Natural Science Foundation of China (Grant Nos. 60873011,60803026 and 60933001) and National Basic Research Program of China (Grant No. 2006CB303103).

