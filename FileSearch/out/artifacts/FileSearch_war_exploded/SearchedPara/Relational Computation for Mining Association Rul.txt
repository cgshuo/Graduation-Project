 We develop a fixpoint operator for computing large item sets and demonstrate three query paradigm solutions for associ-ation rule mining that use the idea of least fixpoint compu-tation and indicates some optimisation issues. The results of our research provide theoretical foundation for relational computation of association rules and its application on XML mining.
 H.2. 8[ Database Management ]: Database Applications X  data mining Languages, Theory Association rules, fixpoint operator, query optimisation
The fast-growing amount of available XML data raises a pressing need for languages and tools to manage collections of XML documents, as well as mine interesting information .
Knowledge discovery from large databases has gained pop-ularity and its importance is well recognised. While research on developing novel algorithms and data structures to aid efficient computation of association rules has been extensive, little object-relational technology has yet been significantly exploited in mining XML data even though XML data is often stored in (object)-relational databases.

Several encouraging attempts at developing methods for mining XML data have been proposed. In principle, we can express and implement association rule mining in con-ventional SQL language (transaction databases) or XQuery (XML data). However, the resulting code is less than intu-itive, unnecessarily long and complicated. Relational opti-misation has yet to be exploited in their proposals. As most XML data is stored in (object-) relational database systems, it is meaningful to investigate relational computation of as-sociation rule mining in the context of XML data.
In this paper, we focus on computation methods from three paradigms that have been developed for querying rela-tional databases. We demonstrate three paradigm solutions for association rule mining that use the idea of least fixpoint computation and also indicate some optimisation issues.
Declarative query language support acts as an important role in the next generation of Web database systems with data mining functionality. We introduce three query lan-guage paradigms for association rule mining.
We provide a noninflationary extension of the complex value calculus with recursion and aggregate operation. We define a fixpoint operator which allows the iteration of cal-culus formulas up to a fixpoint. In effect, this allows us to define large item sets inductively using calculus formu-las. Let S k ( V ) denote the set of all degree-k subset of V . For any two sets S and s , s is said to be a degree-k subset of S if s  X  X  ( S )and | s | = k . P ( S ) denotes the powerset of S . The noninflationary version of the fixpoint operator is presented as follows. Consider association rule mining from XML data. Suppose that raw data in the in-put XML document is first preprocessed to transform to an object-relational database. Let D =( x, y )beanestedta-ble in the mapped object-relational database. For example, x = items , y = count . Items is a set valued attribute. Let S ( D )= { t | X  u  X  D,v = S k ( u [ x ]) ,t =( v,y ) } .Wede-velop a fixpoint operator for computing the large item set as follows. The relation J n holding the large item set with support value greater than a threshold  X  can be defined in-ductively using the following formulas:  X  ( T,k )= T ( x, y )  X   X  y  X   X  ( x G sum ( y ) (  X  u, v { as follows: J 0 =  X  ; J n =  X  ( J n  X  1 ,n ) ,n&gt; 0. Where aggregation operator. Here  X  ( J n  X  1 ,n ) denotes the result of evaluating  X  ( T,k ) when the value of T is J n  X  1 and the value of k is n. Note that, for each input database D ,andthe support threshold  X  ,thesequence { J n } n  X  0 converges. That is, there exists some k for which J k = J j for every j&gt;k . Clearly, J k holds the set of large items of D .Thusthelarge item set can be defined as the limit of the forgoing sequence. The relation J k thereby obtained is denoted by  X  T (  X  ( T,k )). By definition,  X  T is an operator that produces a new nested relation (the fixpoint J k ) when applied to  X  ( T,k ).
The least fixpoint operator of [1] is based on bottom-up computation approach which starts from the  X  X istance-1 X  subsets of the input database. We believe that our fix-point operator is more appropriate as it can take advantage of anti-monotonicity property to do cross examination and make the computation method more efficient.
The extension of the complex value algebra with recur-sion and a while construct is consistent with the imperative paradigm and can express association rule mining queries. We define a new join operator called sub-join .

Definition 1. Let us consider two relations with the same schemes { Item,Count } . r  X  sub,k s = { t | X  u  X  r, v  X  s such that u [ Item ]  X  v [ Item ]  X  X  X  t such that ( u [ Item ] v [ Item ]  X | t | = k ), t = &lt;t ,v [ Count ] &gt; } Here, we treat the result of r  X  sub,k s as multiset meaning, as it may produce two tuples of t with the same count value.
Example : Given two relations r and s ,theresultof r  X  sub, 2 s is shown as follows.
Given a database D =( Item, Support ) and support thresh-old  X  , the following fixpoint algorithm computes large item set of D .
 Algorithm fixpoint Input: An XML-mapping database D and support thresh-old  X  Output: The large item set of D begin end
Theorem 1. For any XML document and minimum thre-shold  X  , the fixpoint defined in the association rule mining expressed in Calculus+fixpoint and the fixpoint algorithm, compute the identical large item set.
In this section, we present an operational semantics for as-sociation rule mining queries expressed in Datalog cv,  X  pro-gram from fixpoint theory. It is difficult to cast inherent procedurality into the declarativity of logic-based systems.
We present a deductive mining program which can com-pute the large item set. 1 .cand ( J, C )  X  freq ( I,C ), J  X  I , | J | =1 2 .large ( J, C )  X  cand ( J, C ), C&gt; X  3 .T ( genid () ,x,C 2 )  X  large ( J, C 1 ), freq ( I,C 2 4 .cand ( x, sum &lt; C &gt; )  X  T ( id, x, C ) 5 .large ( x,y )  X  cand ( x, y ) ,y &gt; X  The rule 1 generates the set of 1-itemset from the input frequency table. The rule 2 selects the frequent 1-itemset whose support is greater than the threshold. Let us assume that we have a sub-join relation, where sub join ( J, I, k, x )is interpreted as  X  x is obtained by applying sub function to two operands J and I  X , i.e., x = J  X  sub,k I . The rule 3 performs the sub-join operation on the table large generated in the rule 2 and the input frequency table. Datalog system is of set semantics. In the above program, we treat T facts as multisets, i.e., bag semantics, by using system generated id to simulate multiset operation. The rule 4 counts the total sum of all supports corresponding to each candidate item set generated in table T so far. Finally, rule 5 computes the large item sets by selecting the item sets in the candidate set whose support is greater than the threshold. Suppose that n is the maximum cardinality of the item sets in the frequency table. The above program is bounded by n .Once the large itemset table has been generated, we can easily produce all association rules.
There exists some opportunities for optimisation in the ex-pressions and algorithms expressed in the three paradigms. In algebraic paradigm, we may improve performance by ap-plying algebraic optimisation techniques, for example, opti-mizing subset queries [3], algebraic equivalences for nested operators [2]. In the deductive paradigm, we may apply pruning techniques by using the anti-monotonicity. How-ever, it is not easy to achieve in a declarative way as pruning of any itemset depends on its support value which may not be finalised until at a later stage.

In the datalog program expressed in the preceding sec-tion, we used an explicit generation of the powerset of each item to be able to compute the large item set. This is a huge space overhead. Therefore, we require optimisation techniques that exploit anti-monotonicity or other heuristic rulestoprunealargesetofitems.
We presented our preliminary ideas first and comprehen-sive query optimisation work and experiments will be car-ried out at a later stage. The results of our research could be useful for data mining query language design in the next generation of database systems. [1] H. M. Jamil. On the equivalence of top-down and [2] H.-C. Liu and J. Yu. Algebraic equivalences of nested [3] C. Masson, C. Robardet, and J.-F. Boulicaut.

