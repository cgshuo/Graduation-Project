 Location-based social networks (LBSNs) have attracted an inordi-nate number of users and greatly enriched the urban experience in recent years. The availability of spatial, temporal and social in-formation in online LBSNs o ff ers an unprecedented opportunity to study various aspects of human behavior, and enable a variety of location-based services such as location recommendation. Pre-vious work studied spatial and social influences on location rec-ommendation in LBSNs. Due to the strong correlations between a user X  X  check-in time and the corresponding check-in location, recommender systems designed for location recommendation in-evitably need to consider temporal e ff ects. In this paper, we in-troduce a novel location recommendation framework, based on the temporal properties of user movement observed from a real-world LBSN dataset. The experimental results exhibit the significance of temporal patterns in explaining user behavior, and demonstrate their power to improve location recommendation performance. H.4 [ Information Systems Applications ]: Miscellaneous; D.2.8 [ Software Engineering ]: Metrics X  complexity measures, perfor-mance measures Location Recommendation, Location-Based Social Networks, Tem-poral E ff ects
The rapid growth of location-based social networks (LBSNs) has attracted billions of users, promoting our urban experience to a new stage [30]. Typical location-based social networking sites in X  at a location of interest with her smartphone, which informs her friends, along with creating the opportunity to make new friends http://foursquare.com/ http://www.facebook.com/about/location/ or receive better recommendations. To benefit LBSN users and ad-vance location-based marketing, location recommendation on LB-SNs has become an essential task [24, 25], aiming to recommend new POIs (Points of Interest) to a user according to his personal preferences and facilitate his exploration of new areas of the city.
Location-based social networks present unprecedented large-scale check-in data to describe a user X  X  mobile behavior in spatial, tem-poral, and social aspects. In previous work researchers explored users X  personal static check-in preferences through geographical check-ins for location recommendation [28, 1, 29, 26]. Inspired by social influence theories that social friends tend to have simi-lar check-in behavior, researches started to investigate the explicit social friendships on LBSNs [5, 9, 8] and leverage their power for improving location recommendation services [23, 3, 25]. Among existing work, the temporal patterns of a user X  X  check-in actions have not been explored in depth.

As suggested in [22, 4, 16], human geographical movement ex-hibits significant temporal patterns on LBSNs and is highly rele-vant to the location property, while the daily pattern (hours of the day) is one of the most fundamental patterns that reflects a user X  X  mobile behavior. For example, a user may regularly arrive to the o ffi ce around 9:00 am, go to a restaurant for lunch at 12:00 pm, and watch movies at night around 10:00 pm. Therefore, investigating the features embedded in daily patterns enables us to better under-stand human mobile behavior, providing a potential opportunity to design more advanced location recommender systems on LBSNs.
Previous work reports that a user X  X  preferences change contin-uously over time [21, 10], indicating two temporal properties of a user X  X  daily check-in preferences: (1) non-uniformness : a user exhibits distinct check-in preferences at di ff erent hours of the day; and (2) consecutiveness : a user tends to have more similar check-in preferences in consecutive hours than in non-consecutive hours. In Section 5 we validate these properties experimentally on a real-world dataset. Figure 1 plots an illustrative example of a user X  X  aggregated check-in activities on his top 5 most visited locations over 24 hours on a real-world LBSN. Each cell represents the to-tal number of check-in activities happened at a specific location during the corresponding hour, colored from black (least active) to white (most active). The user X  X  check-in behavior presents a dif-ferent check-in location distribution at each hour, which changes continually over time.

The non-uniformness and consecutiveness properties suggest strong correlations between a user X  X  check-in time and the corresponding check-in preferences. However, these properties have not been ex-ploited for location recommendation on LBSNs. In this paper, we aim to leverage them for location recommendation. To the best of our knowledge, this is the first work of modeling temporal ef-fects on location-based social networks for location recommenda-tion. The contributions of this paper are summarized below:
The remainder of this paper is organized as follows. We first give a brief review of some related work in Section 2, then introduce a basic location recommendation model and discuss the modeling of temporal properties in Section 3. Next we introduce our location recommendation framework LRT with temporal e ff ects in terms of temporal regularization and temporal aggregation in Section 4, followed by the discussion of experimental design and results on a real-world LBSN dataset in Section 5. We conclude this work with future work in Section 6.
The properties of location-based social networks has been widely studied w.r.t. the geographical and social aspects. Cheng et al. [4] investigated the  X  X  X vy Flight X  property of human check-in pat-terns, and discovered that social status is a ff ected by geographic constraints. In [19, 18], the authors investigated the spatial proper-ties of the social networks on main popular LBSNs. They observed strong heterogeneity across users with di ff erent characteristic geo-graphic scales of interactions across social ties. E ff orts have also been made to utilize the geo and social properties for improving location-based social services. Gao et al. [9] studied geo-social correlations on LBSNs to solve the  X  X old start X  location prediction problem. Zhang et al. [27] proposed a unified influence metric to evaluate the geo-social influence among users in LBSNs.
Ye et al. [24] introduced location recommendation into location-based social networks. Specifically, the authors investigated the geographical influence [25] and social influence [23] for location recommendation, and discovered that user preference plays a more important role in contributing to the recommendation than social and geographical influence. Berjani et al. [1] proposed a loca-tion recommendation system utilizing matrix factorization meth-ods. Cheng [3] investigated the geographical influence through a multi-center Gaussian model, together with matrix factorization and social influence for location recommendation. Zhou et al. [29] studied the location recommendation problem on location-based social networks with various collaborative filtering approaches. Ying et al. [26] proposed a set of features related to social factor, individ-ual preference, and location popularity, and utilized a regression-tree model to recommend POIs. Most recently, Yang et al. [7] intro-duced sentiment information into location recommendation system, and reported its good performance over state-of-the-art approaches.
Among the current work in LBSNs, temporal information has not been explored for location recommendation. Temporal infor-mation has been studied for other location-based social services such as location prediction and location classification. Liu et al. [14] analyzed the daily temporal distribution of check-ins and leveraged them to infer the types of locations. Cho et al. [5] proposed a Pe-riodic &amp; Social Mobility Model for location prediction with two temporal states ( X  X ome X  and  X  X ork X ) a ff ected by social e ff ects and non-social e ff ects. Chang et al. [2] proposed a logistic regression model with observed temporal patterns as one type of feature, and found that hourly patterns have a small but significant e ff ect, while weekly patterns are not predictive.
The large-scale check-in data on LBSNs is usually very sparse due to the user-driven check-in property [19, 17, 8]. To solve large-scale recommendation problems, matrix factorization is state-of-the-art technology that has been proven to be successful in the Net-flix Competition [11, 12], and is being used for item recommen-dation and trust prediction on product review sites like Epinions and Ciao for research purposes [15, 20, 21]. Therefore, in this pa-per, we leverage the temporal properties on LBSNs with low-rank matrix factorization for location recommendation.
We first introduce a basic location recommendation model based on low-rank matrix factorization without considering temporal ef-fects. Let u = { u 1 , u 2 ,..., u m } be the set of users, and l = { l be the set of locations, where m and n denote the number of users each element C ij representing the number of check-ins made by and L  X  R n  X  d be the location characteristics, with d  X  min ( m , n ) being the number of latent preference factors. The basic location recommendation model approximates u i  X  X  check-in preference on an unvisited l j via solving the following optimization problem: where Y  X  R m  X  n is a check-in indicator matrix, Y ij = 1 indicating that u i has checked in at l j , Y ij = 0 otherwise.

After obtaining U i and L j , the missing value in C , represented as e C , indicating the preference of a user u i at an unvisited location l is then approximated by U i L  X  j . To avoid over-fitting, two smooth-ness regularizations are added on U i and L j respectively. Eq.(1) can then be represented in matrix format as where  X  and  X  are non-negative parameters to control the capability of U and L .  X  is the Hadamard product operator, where ( A  X  B ) A i , j  X  B i , j . |||| F is the Frobenius norm of a matrix.
According to the temporal property of non-uniformness as de-scribed above, users exhibit distinct check-in preferences at di ff er-ent hours of the day. This inspires us to consider a user X  X  check-in behavior as a set of time-dependent check-in preferences, with each preference corresponding to an hour of the day. To model this property, we first introduce temporal state t  X  [1 , T ] to represent the hour of the day, where T = 24 is the total number of tempo-ral states. For example, t = 1 for check-in time at  X 2012-10-24 00:30:00pm X , indicating the check-in happens during hour 0 to 1. preferences under temporal state t . As observed in [22], location characteristics are inherent properties that do not change much as time goes by. Therefore, we define location characteristics to be check-in activities at each temporal state t and minimizing their aggregation, we obtain time-dependent user check-in preferences via the following optimization problem: t , and Y t is the corresponding indicator matrix.
Inspired by the temporal consecutiveness property, which im-plies that users on LBSNs tend to have closer check-in preferences on consecutive temporal state, we propose a temporal regulariza-tion to minimize the following terms: where  X  i ( t , t  X  1)  X  [0 , 1] is defined as a temporal coe ffi cient that measures the temporal closeness of u i  X  X  check-in preferences between temporal state t and t  X  1. The larger  X  i ( t , t  X  1) is, the closer u i  X  X  check-in preferences between t and t  X  1. We use cosine similarity to measure  X  i ( t , t  X  1), defined as Note that we consider the temporal state t  X  1 as T when t = 1, e.g., U t  X  1 = U T when t = 1. After some derivations, we can get the matrix form of temporal regularization, where  X  t is the diagonal temporal coe ffi cient matrix among m users, defined as
In this section, we formally introduce our location recommen-dation framework LRT . Figure 2 illustrates the working flow of our location recommendation framework.  X  x  X  denotes the observed check-in frequency by the user on the corresponding location, and  X ? X  represents the user X  X  check-in preferences on an unvisited lo-cation that the framework is going to infer. The whole framework consists of three steps: temporal division, temporal factorization, and temporal aggregation. Firstly, the original user-location ma-trix C is divided into T sub-matrices according to the T temporal states, with each sub-matrix only containing check-in actions that happened at the corresponding temporal state. Secondly, each C is factorized into the user check-in preference U t and the location characteristics L based on the model presented in Section 3, while L is shared by all of U t . Finally, the corresponding low-rank ap-proximation e C t is constructed and aggregated into e C , representing the user check-in preferences of each location.

Since the temporal division is straightforward to implement, in the following, we will describe in details the second and third steps, i.e., learning user temporal check-in preferences at each temporal state and aggregating temporal check-in preferences for location recommendation.
Based on the discussion of modeling temporal non-uniformness and consecutiveness properties in the above sections, the user tem-poral check-in preferences can be obtained by solving the following optimization problem: where  X  is a non-negative parameter to control the temporal regu-larization. The corresponding objective function J is where  X  U t and  X  L are Lagrangian multipliers for non-negativity of U and L , respectively. By taking the derivation of J with respect to U t and L , we obtain
 X  U t =  X  2( Y t  X  C t ) L + 2( Y t  X  U t L  X  ) L + 2  X   X   X  V =  X  2 According to the Karush-Kuhn-Tucker condition, We obtain the following updating formula of U t and L with a simi-lar derivation process in [6]
By solving the above optimization problem, the user check-in preferences e C t ( i , j ) at each temporal state can be computed through U (i,:) L ( j , :)  X  . To recommend locations to a user w.r.t. each we define an aggregation function f ( ) to compute the final user check-in preferences e C ( i , j ). In this paper, we propose four aggregation strategies for f ( ), de-fined below: The location recommendation will then be performed based on the final user check-in preference e C ( i , j ).
Algorithm 1 presents the detailed procedures of the proposed framework. Compared to the temporal division of C and tempo-ral aggregation of e C , the updating rules for U t and L in each it-eration corresponds to the major cost of Algorithm 1. Therefore, we next analyze the time complexity of updating U t and L . For the sparsity of Y t and C t . Since  X  t is a diagonal matrix, the time erations, while the time complexity of  X   X  t U t and  X  U t Therefore, it takes O ( mndT ) operations to update all of U ilarly, the time complexity of O ( md 2 T ).
 takes O ( nd ) operations, resulting in the time complexity of updat-ing L as O ( mndT ). Since T is usually a constant of small value, in sum, the time complexity of Algorithm 1 is O ( mnd ).
 Algorithm 1 Location Recommendation with Temporal E ff ects Input: user-location check-in matrix C ,  X  ,  X  , possible temporal states {1, 2, ..., T } Output: approximated user-location preference matrix e C 1: Divide C into { C 1 , C 2 ,..., C T } according to T 2: Generate { Y 1 , Y 2 ,..., Y T } based on { C 1 , C 2 ,..., C 3: Construct {  X  1 ,  X  2 , ...,  X  T } based on { C 1 , C 2 4: Initialize { U 1 , U 2 ,..., U T } and L randomly 5: while Not Convergent do 6: for t = 1 to T do 7: for i = 1 to m do 8: for k = 1 to d do 9: U t ( i , k )  X  U t ( i , k ) 10: end for 11: end for 12: end for 13: for i = 1 to n do 14: for k = 1 to d do 15: L ( i , k )  X  L ( i , k ) 16: end for 17: end for 18: end while 19: for t = 1 to T do 20: Set e C t = U t L  X  21: end for 22: for i = 1 to m do 23: for j = 1 to n do 24: Set e C ( i , j ) = f ( e C 1 ( i , j ) , e C 2 ( i , j ) ,..., 25: end for 26: end for 27: return e C In this section, we evaluate the performance of our framework LRT for location recommendation. In particular, we evaluate the following: (1) how the proposed framework fares in comparison with state-of-the-art models that capture static check-in preferences; (2) how the proposed framework recommends locations with vari-ous temporal aggregation strategies; and (3) whether other temporal patterns could be leveraged for location recommendation with the proposed framework. Before we delve into experiment details, we first discuss an LBSN dataset and evaluation metrics.
We crawled the experimental dataset from Foursquare and ob-tained check-ins for three months (Jan 2011 -Mar 2011) to evaluate our proposed framework. The dataset is publicly available from the physical location via his cellphone, and then let his online friends know where he is by publishing such check-in action online. We select check-in locations which have been visited by at least two distinct users, and users who have checked in at least 10 distinct locations. The statistics of the final dataset are shown in Table 1. The majority of check-ins happened in the U.S.; Figure 3 shows the corresponding check-in distributions in the U.S.

We organize the dataset as a user-location matrix. The check-in density of the matrix is 8 . 84  X  10  X  4 . Logistic function commonly used in recommender system [15] to map each matrix element into [0,1]. We notice that in contrast with online item rec-ommendation, where x (the rating of an item) is usually ranging from 1 to 5, in location recommendation, the value of x (check-in frequency of a location) is commonly large, while the function with x being larger than 7. Therefore, we adjust the mapping func-works better than the logistic function in our experiment. http://www.public.asu.edu/~hgao16/dataset. html
For each individual user in the dataset, we randomly mark o ff 20% and 40% of all locations that he has checked-in for testing. The rest of the user-location pairs are used as training data to infer U and L for location recommendation. The random selection is conducted 5 times individually, and we report the average results.
To evaluate the recommendation performance, we are interested in: (1) how many previously marked o ff locations are recommended to the users among the total number of recommended locations, and (2) how many previously marked o ff locations are recommended to the users among the total number of marked o ff locations. Thus, we use precision @ N and recall @ N as our evaluation metrics, defined as follows: where TopN ( u i ) is the set of locations recommended to user u u has been visited by u i in the testing set. In our experiment, N is set to 5 and 10, respectively.
 All the parameters in this paper are set through cross-validation. For the proposed method, the experimental results use d = 10 dimen-sions to represent the latent features, the regularization coe ffi cients  X  and  X  are set to 2, and  X  is set to 1. As suggested in [23], the ef-fectiveness of recommender systems with sparse datasets (i.e., low-density user-item matrix) is usually not high. For example, the re-ported top 5 precision is 5% over a dataset with 8 . 02  X  10  X  3 density and 3 . 5% over a dataset with 4 . 24  X  10  X  5 density [23, 25]. There-fore, the low precision obtained in our experiment is reasonable. In this paper, we focus on comparing the relative performance of algorithms instead of comparing their absolute performance .
In this section, we discuss the properties of temporal non-uniformness and temporal consecutiveness in our dataset. The temporal non-uniformness property, which states that a user exhibits distinct check-in preferences at di ff erent hours of the day, is straightforward to evaluate with a two-sided hypothesis testing on the check-in be-havior of two temporal states for each user. Our experiment shows that this property does hold in our dataset. Due to the space limit, we will ignore its evaluation details and focus on evaluating tem-poral consecutiveness. We firstly define the check-in similarity of a user between two temporal states t i and t j : where C t ( u , :) is the check-in vector of user u at temporal state t . | X | 2 is the 2-norm of a vector.

To evaluate temporal consecutiveness, we calculate two similari-similarity S n ( u ). S c ( u ) is the average similarity of all sim where t i and t j are consecutive temporal states. Note that T tem-poral states have T consecutive temporal similarities in total, i.e., sim u ( t 1 , t 2 ), sim u ( t 2 , t 3 ),..., sim u ( T  X  1 , T ), and sim larly, S n ( u ) is the average similarity of all sim u ( t are non-consecutive temporal states. For fair comparison, we ran-domly sample T non-consecutive temporal similarities sim u to ensure that both S c ( u ) and S n ( u ) have the same sample size and then take the average to calculate S n ( u ).

We conduct a two-sample t-test on the vectors S c and S n null hypothesis is H 0 : S c  X  S n , i.e., check-ins between consecutive temporal states are less or equally similar than that between non-consecutive temporal states. The alternative hypothesis is H S . In our experiment, the null hypothesis is rejected at significant two consecutive temporal states have a higher similarity than those in non-consecutive temporal states.
In this section, we compare our proposed location recommenda-tion framework LRT with various recommendation models. Three baseline methods are introduced w.r.t. time-dependent and static check-in preferences, as defined below: Figure 4 reports the comparison results of LRT with the proposed baseline methods. The aggregation strategy is selected as voting due to its superior performance (more details on the comparison of aggregation strategies will be discussed in the next subsection). The results precipitate several observations, which we summarize below:
LRT performs the best among all the baseline methods. It con-siders time-dependent check-in preferences and outperforms ap-proaches that capture static check-in preferences. The standard de-confirming the reliability of our comparison results. As we men-tioned before, the recommendation e ff ectiveness is usually low due to the sparseness of data with low density . Therefore, the absolute performance on precision and recall of LRT seems to be small but is still reasonable and significant compared to other base-line methods.

To further evaluate the significance of our framework, we launch a random recommendation [24]. For each user, we randomly select 5 / 10 locations from the total 26 , 381 locations (excluding locations that have been previously visited by the user), and recommend them to the user. The recommendation performance with this strategy is shown in Table 2. Compared to the random recommendation, our proposed framework is, on average, 73 . 27 times better than the random performance, demonstrating the power of temporal e ff ects for improving location recommendation performance.

In this subsection, we discuss the performance of various aggre-gation strategies. We compare the recommendation performance
Figure 4: Performance of Location Recommendation Models of four aggregation strategies and list the results in Table 3 and Ta-ble 4. We summarize the essential observations below: Table 3: Comparison of Aggregation Strategies (Precision)
LRT is designed to recommend locations to a user by taking ad-vantage of temporal patterns. So far, we have evaluated its recom-mendation performance with daily patterns, while its recommenda-tion ability is not limited to one specific temporal pattern. By taking di ff erent definitions of temporal state, many other temporal patterns can be used for location recommendation with LRT , as long as they contain the non-uniformness and consecutiveness properties. For example, we could define the temporal state as t = [1,T], with T = 7 for weekly (day of the week) patterns, T = 2 for weekday / weekend patterns, and T = 12 for monthly (month of the year) patterns, etc. The only change is to divide the original user-location matrix C into a set of C t according to the corresponding temporal state. Ta-ble 5 shows the recommendation results of LRT with weekly pat-terns and weekday / weekend patterns. Due to the space limit, we only present the results on testing size = 40%. The results indicate that weekly patterns and weekday / weekend patterns can also cap-ture users X  temporal check-in preferences and improve the location recommendation performance.

In this paper, we investigated the temporal properties of user check-in behavior on location-based social networks, and leveraged them to generate a location recommendation framework with tem-poral e ff ects. The experimental results exhibit the power of tem-poral e ff ects for capturing a user X  X  mobile behavior, and demon-strate their potential ability in improving location recommendation performance. Considering the various types of temporal patterns, investigating other patterns (e.g., monthly / yearly patterns) could provide the model with potential power to predict the future. On the other hand, how to integrate these patterns for location recommen-dation could also be an interesting direction for future work. Fur-thermore, it would be interesting to study the complementary ef-fects of temporal patterns with social and geographical information on LBSNs, and leverage multiple resources to generate a spatial-temporal-social framework for location recommendation.
This work is supported, in part, by ONR (N000141010091). [1] B. Berjani and T. Strufe. A recommendation system for spots [2] J. Chang and E. Sun. Location 3: How users share and [3] C. Cheng, H. Yang, I. King, and M. Lyu. Fused matrix [4] Z. Cheng, J. Caverlee, K. Lee, and D. Sui. Exploring [5] E. Cho, S. Myers, and J. Leskovec. Friendship and mobility: [6] C. Ding, T. Li, and M. Jordan. Nonnegative matrix [7] Z. Y. Dingqi Yang, Daqing Zhang and Z. Wang. A [8] H. Gao, J. Tang, and H. Liu. Exploring social-historical ties [9] H. Gao, J. Tang, and H. Liu. gSCorr: Modeling geo-social [10] H. Gao, J. Tang, and H. Liu. Mobile location prediction in [11] Y. Koren. Factorization meets the neighborhood: a [12] Y. Koren, R. Bell, and C. Volinsky. Matrix factorization [13] D. Lee, H. Seung, et al. Learning the parts of objects by [14] H. Liu, B. Luo, and D. Lee. Location type classification [15] H. Ma, H. Yang, M. Lyu, and I. King. Sorec: social [16] E. Malmi, T. Do, and D. Gatica-Perez. Checking in or [17] A. Noulas, S. Scellato, C. Mascolo, and M. Pontil. An [18] S. Scellato, C. Mascolo, M. Musolesi, and V. Latora. [19] S. Scellato, A. Noulas, R. Lambiotte, and C. Mascolo. [20] J. Tang, H. Gao, and H. Liu. mTrust: Discerning [21] J. Tang, H. Gao, H. Liu, and A. D. Sarma. eTrust: [22] M. Ye, K. Janowicz, C. M X lligann, and W. Lee. What you [23] M. Ye, X. Liu, and W. Lee. Exploring social influence for [24] M. Ye, P. Yin, and W. Lee. Location recommendation for [25] M. Ye, P. Yin, W. Lee, and D. Lee. Exploiting geographical [26] J. Ying, E. Lu, W. Kuo, and V. Tseng. Urban point-of-interest [27] C. Zhang, L. Shou, K. Chen, G. Chen, and Y. Bei. Evaluating [28] Y. Zheng, L. Zhang, Z. Ma, X. Xie, and W. Ma.
 [29] D. Zhou, B. Wang, S. Rahimi, and X. Wang. A study of [30] K. Zickuhr. Three-quarters of smartphone owners use
