 An isochrone in a spatial network is the minimal, possibly discon-nected subgraph that covers all locations from where a query point is reachable within a given time span and by a given arrival time. In this paper we formally define isochrones for multimodal spatial networks with different transportation modes that can be discrete or continuous in, respectively, space and time. For the computation of isochrones we propose the multimodal incremental network expan-sion (MINE) algorithm, which is independent of the actual network size and depends only on the size of the isochrone. An empirical study using real-world data confirms the analytical results. H.2 [ Database Management ]: Database Applications X  Spatial Databases and GIS Algorithms
Reachability analyses are important in many applications of spa-tial network databases. For example, in urban planning it is im-portant to assess how well a city is covered by various public ser-vices such as hospitals or schools. An effective way to do so is to compute isochrones. An isochrone is the minimal, possibly discon-nected subgraph that covers all locations from where a query point, q , is reachable within a given time span. When schedule-based networks, such as the public transport system, or time-dependent edge costs are considered, isochrones depend additionally on the arrival time at q . Isochrones can also be used as a primitive to effi-ciently answer other spatial network queries, such as range queries, by retrieving all objects within the isochrone without the need to compute the distance to the individual objects. For instance, by joining an isochrone with an inhabitants database, the citizens liv-ing in the area of the isochrone or the (number of) kids who can reach a school in 10 minutes can be determined.  X  T his work is partially funded by the Municipality of Bolzano.
Figure 1 shows the 10 min isochrone at 10:00 am for a query point (*) in Bolzano-Bozen. The isochrone consists of the bold street segments that cover all points from where the query point is reachable in less than 10 minutes, starting at 09:50 am or later and arriving at 10:00 am or before. A large area around the query point is within 10 minutes walking distance. Smaller areas are around bus stops, from where the query point can be reached by first walking to the bus stop and then taking the bus towards the query point. The box in the lower right corner shows the number of inhabitants in the isochrone area.

S patial networks can be classified as continuous or discrete along, respectively, the space and the time dimension. Continu-ous space means that all points on an edge are accessible, whereas in a discrete space network only the vertices can be accessed. Con-tinuous time networks can be traversed at any point in time, dis-crete time networks follow an associated schedule. For instance, the pedestrian network is continuous in time and space, whereas public transport systems are discrete in both dimensions.
Most of the past research work in spatial network databases is on shortest path (SP), nearest neighbor (NN), and range queries, predominantly in continuous road networks, e.g., [5, 6, 9, 12, 14]. Dijkstra X  X  [6] incremental network expansion algorithm is the most basic solution to the SP problem and influenced much of the later works. The A  X  algorithm [9] uses a lower bound estimate of the SP to get a more directed search with less vertex expansions. Pa-padias et al. [14] present two disk-based frameworks for different network queries: Incremental Euclidean Restriction (IER) repeat-edly uses the Euclidean distance to reduce the number of objects for which the network distance is computed; Incremental Network Expansion (INE) is an adaptation of Dijkstra X  X  SP algorithm. Deng et al. [5] improve over Papadias et al. [14] by exploiting the incre-mental nature of the lower bound to limit the number of distance calculations to only vertices in the final result set. Almeida and G X ting [4] present an index structure and an algorithm for kNN queries to allow a one-by-one retrieval of objects. Other approaches take advantage of partitioning a network and pre-computing all or s ome of the SPs to save computation cost at query time. Exam-ples are Voronoi regions [13], shortest path quadtrees [16], precom-puted NN lists [3], and hierarchically organized subgraphs [1, 11]. For traffic networks that are too large for exact solutions in reason-able time, efficient approximation techniques have been proposed, most prominently based on the landmark embedding technique and sketch-based frameworks, e.g., [8, 15]. While most of the works assume a fixed cost value associated with each edge, only a few models support time-varying edge costs [7, 12]. There is far less work on schedule-based transportation networks and networks that support different transportation modalities [10].

In this paper we formally define isochrones for multimodal spa-tial networks that support different classes of transport modes, namely continuous and discrete in space and/or time, respectively, and we provide a disk-based evaluation algorithm. Isochrones con-stitute a new query type in spatial network databases. An isochrone query returns the possibly disconnected minimal subgraph that cov-ers all space points in the network from where q is reachable within a given time span d max and by a given arrival time t (i.e., space points with a time-dependent SP to q that is smaller than d Isochrones are closest to range queries which return all objects that are within a given distance, whereas isochrone queries return all space points within a given distance. Indeed, by joining an isochrone with a relation of objects, range queries can be answered without the need to compute the distance to the individual objects. At the algorithmic level, the major difference to range queries (and other network queries) is that most optimization techniques are not effective for isochrones. For instance, search space pruning is not applicable since all edges that are (partially) reachable need to be explored. In contrast, in Papadias et al. [14] the search is driven by candidate objects that are computed using the Euclidean dis-tance. Early termination of the search is possible if all candidates are explored, and a more directed search for the computation of the network distance to the candidate objects can be applied.
Isochrones have been introduced informally by Bauer et al. [2] together with a main memory evaluation algorithm that suffers from a high initial loading cost and is limited by the available memory since the entire network is loaded. In this paper we pro-vide a precise formalization of isochrones in multimodal networks, and give a disk-based, multimodal incremental network expansion (MINE) algorithm that leverages Dijkstra X  X  SP algorithm to the computation of isochrones and overcomes the major limitations of the main memory algorithm. Since only network portions are loaded that eventually will be part of the result, MINE X  X  runtime and space complexity is independent of the actual network size and depends only on the size of the isochrone, i.e., O ( | V iso | V iso | is the number of vertices in the isochrone.

The technical contributions can be summarized as follows:
The rest of the paper is organized as follows. In Section 2 we formally define isochrones for multimodal networks. Section 3 presents the MINE algorithm. Section 4 reports experimental re-sults. Section 5 concludes the paper and points to future work.
In this section we provide a formal definition of isochrones in multimodal spatial networks that support different transport modes.
Definition 1. ( Multimodal Network ) A multimodal network is a seven-tuple N = ( G, R, S,  X ,  X ,  X ,  X  ) . G = ( V, E ) is a di-rected multigraph with a set V of vertices and a multiset E of ordered pairs of vertices, termed edges. R is a set of transport systems. S = ( R, TID , W,  X  a ,  X  d ) is a schedule, where TID is a set of trip identifiers, W  X  V , and  X  a : R  X  TID  X  W 7 X  T and  X  d : R  X  TID  X  W 7 X  T determine arrival and departure time, respectively ( T is the time domain). Function  X  : R 7 X  transport mode, and the functions  X  : E 7 X  R ,  X  : E 7 X  R and  X  : E  X  T 7 X  R + assign to each edge transport system, length, and transfer time, respectively.

A multimodal network allows to represent several transport sys-tems, R , with different modalities in a single network: continuous space and time mode,  X  ( . ) =  X  csct  X , e.g., pedestrian network; dis-crete space and time mode,  X  ( . ) =  X  dsdt  X , e.g., the public transport system such as trains and buses; discrete space continuous time mode,  X  ( . ) =  X  dsct  X , e.g., moving walkways or stairs; continuous space discrete time mode,  X  ( . ) =  X  csdt  X , e.g., regions or streets that can be passed by pedestrians or cars only in specific time slots. Vertices represent crossroads of the street network and/or stops of the public transport system. Edges represent street segments, trans-port routes, moving walkways, etc. The schedule stores for each discrete time ( X  dsdt  X  ,  X  csdt  X ) transport system in R the arrival and departure time at the stop nodes for the individual trips. For an edge e = ( u, v ) , function  X  ( e, t ) computes the time-dependent transfer time that is required to traverse e , when starting at u as late as pos-sible yet arriving at v no later than time t . For discrete time edges, the transfer time is the difference between t and the latest possible departure time at u according to the given schedule in order to reach v before or at time t . This includes a waiting time should the ar-rival at v be before t . For continuous time edges, the transfer time is modeled as a time-dependent function that allows to consider, e.g., different traffic conditions during rush hours.

Figure 2 shows a multimodal network with two transport sys-tems, R = {  X  X  X  ,  X  X  X  } , representing the pedestrian network with mode  X  (  X  X  X  ) =  X  csct  X  and bus line B with mode  X  (  X  X  X  ) =  X  dsdt  X , respectively. Solid lines are street segments of the pedestrian net-work, e.g., edge e = ( v 1 , v 2 ) with  X  ( e ) =  X  X  X . An undirected edge is a shorthand for a pair of directed edges in opposite direc-tions. Pedestrian edges are annotated with the edge length, which is the same in both directions, e.g.,  X  (( v 1 , v 2 )) =  X  (( v For simplicity, we assume a constant walking speed of 2 m/s, yield-ing a fixed transfer time,  X  ( e, t ) =  X  ( e ) 2 m /s bus line B. An excerpt of the schedule is shown in Fig. 2(b), e.g., TID = { 1 , 2 , . . . } ,  X  a (  X  X  X  , 1 , v 6 ) =  X  d (  X  X  X  , 1 , v The transfer time of a bus edge e = ( u, v ) is computed as  X  ( e, t ) = the latest departure time at u .

A location in a multimodal network N is any point on an edge e = ( u, v )  X  E that is accessible. We represent it as l = ( e, o ) , where 0  X  o  X   X  ( e ) is an offset that determines the relative po-sition of l from u on edge e . A location represents vertex u if o = 0 and vertex v if o =  X  ( e ) ; any other offset refers to an intermediate point on edge e . In continuous space networks all points on the edges are accessible. Since a pedestrian segment is modeled as a pair of directed edges in opposite direction, any point on it can be represented by two locations, (( u, v ) , o ) and cation of q is l q = (( v 2 , v 3 ) , 180) = (( v 3 , v 2 space networks only vertices are accessible, thus o  X  { 0 ,  X  ( e ) } and locations coincide with vertices.

An edge segment , ( e, o 1 , o 2 ) , with 0  X  o 1  X  o 2  X   X  ( e ) repre-sents the contiguous set of space points between the two locations ( e, o 1 ) and ( e, o 2 ) on edge e . We generalize the length function for edge segments to  X  (( e, o 1 , o 2 )) = o 2  X  o 1 .

Definition 2. ( Path, Path Cost ) A path from a source location l = (( v 1 , v 2 ) , o s ) to a destination location l d = (( v is defined as a sequence of connected edges and edge segments, p ( l s , l d ) = h x 1 , . . . , x k i , where x 1 = (( v 1 , v x i = ( v i , v i +1 ) for 1 &lt; i &lt; k , and x k = (( v With arrival time t at l d , the path cost is  X  ( h x 1 , . . . , x k i , t ) =
The first and the last element in a path can be edge segments, whereas all other elements are entire edges. Since isochrones de-pend on the arrival time at the query point, we define the path cost recursively as the cost of traversing the last edge (segment), x considering the arrival time t at the destination l d , plus the cost of traversing h x 1 , . . . , x k  X  1 i , where the arrival time at v vertex of edge x k  X  1 ) is determined as t minus the cost of travers-ing x k . The cost of traversing a single edge is the transfer time  X  . Edges along a path may belong to different transport systems, which enables the changing of transport system along a path.
In Fig. 2, a path from v 7 to q is to take bus B from v 7 then walk to q , i.e., p ( v 7 , l q ) = h x 1 , x 2 , x 3 and x 2 = ( v 6 , v 3 ) are complete edges and x 3 = (( v is an edge segment. With arrival time t = 06:06:00, the path cost is  X  ( p ( v 7 , l q ) , t ) = ( 06:03:00  X  06:02:00 )+( 06:05:20  X  06:03:00 )+ 80 / 2 = 240 s. To reach q at 06:06:00, the bus must arrive at v later than 06:05:20. Since the latest bus that matches this constraint arrives at 06:05:00, we have a waiting time of 20 s at v 3
The network distance , d ( l s , l d , t ) , from a source location l a destination location l d with arrival time t at l d is defined as the minimum cost of any path from l s to l d with arrival time t at l such a path exists, and  X  otherwise.

We proceed with the definition of an isochrone as the minimal subgraph of a multimodal spatial network that covers all locations from where a query point q is reachable under the given time con-straints.
 Definition 3. ( Isochrone ) Let N = ( G, R, S,  X ,  X ,  X ,  X  ) with G = ( V, E ) be a multimodal network, q be the query point with arrival time t , and d max &gt; 0 be the time span. An isochrone , N iso = ( V iso , E iso ) , is defined as the minimal and possibly dis-connected subgraph of G that satisfies the following conditions:
The first condition requires the vertices of the isochrone to be a subset of the vertices of the multimodal network. The second con-dition constrains an isochrone to cover exactly those locations l that have a network distance d ( l, q, t ) to q that is smaller or equal than d max , taking into consideration the arrival time t . Notice the use of edge segments in E iso to represent edges that are only partially reachable. Whenever an edge e is entirely covered by an isochrone, we use e instead of ( e, 0 ,  X  ( e )) .

In Fig. 3, the subgraph in bold represents the isochrone for d max = 5 min and t = 06:06:00. The numbers in parentheses are the network distance to q . Edges close to q are entirely reachable, whereas edges on the isochrone border are only partially reachable. For instance, ( v 0 , v 1 ) is only reachable from offset 80 to v edges are not included in the isochrone since intermediate points on bus edges are not accessible. Formally, the isochrone in Fig. 3 is represented as N iso = ( V iso , E iso ) with V iso = { v and E iso = { (( v 0 , v 1 ) , 80 , 200) , (( v 8 , v 1 ) , 150 , 250) , ( v ( v 2 , v 1 ) , ( v 2 , v 3 ) , ( v 3 , v 2 ) , ( v 3 , v 4 ) , ( v (( v 9 , v 4 ) , 120 , 200) , (( v 5 , v 6 ) , 60 , 300) , (( v (( v 6 , v 7 ) , 380 , 500) , (( v 8 , v 7 ) , 80 , 200) } .
Algorithm 1 shows the incremental network expansion algo-rithm (MINE) for computing isochrones in multimodal networks. It maintains two sets of vertices: closed vertices ( C ) that have already been expanded and open vertices ( O ) that have been encountered but are not yet expanded. For each vertex v  X  O  X  C , we maintain the distance d ( v, q, t ) to q . C is initialized to the empty set. O is initialized to q with d ( q, q, t ) = 0 (without loss of generality we assume that q coincides with a vertex). O is maintained as a prior-ity queue. During the expansion phase, vertex v with the smallest network distance is dequed from O and added to C . All incoming edges, e = ( u, v ) , are retrieved from the database and considered in turn. If vertex u is visited for the first time, it is added to O with a distance of  X  . The distance of u when traversing e is incremen-tally updated. If e is a continuous space edge, the reachable part of e is added to the result. Discrete space edges produce no direct out-put, since they have no accessible locations except the end vertices that are added when the incoming continuous space edges are pro-cessed. The algorithm terminates when O is empty or the network distance of the closest vertex in O exceeds d max .
Algorithm 1: M INE ( N , q, t, d max )
W e compare MINE with Dijkstra X  X  algorithm [6], which initially loads the entire network in memory, and Incremental Euclidean re-striction (IER) [14], which instead of loading the entire network uses the Euclidean lower bound property to incrementally load smaller network chunks. The networks together with the schedules are stored in an Oracle Spatial 11g Enterprise database. All ex-periments run in a virtual machine on a dual processor Intel Xeon 2.67 GHz with 3 GB RAM.We test two real-world street and public transport networks: San Francisco/SF ( | V | =33 K, | E | =96 K) and Bozen-Bolzano/BZ ( | V | =3 K, | E | =8 K).

Figures 4(a) X 4(b) analyze the memory requirements. As ex-pected, MINE X  X  memory consumption is independent of the net-work size and depends only on the isochrone size. It grows quadrat-ically in d max until the isochrone approaches the network border, where the growing slows down. The memory of Dijkstra is equal to the size of the entire network. IER is in between since many vertices are loaded that eventually will not be part of the isochrone.
Figures 4(c) X 4(d) show the results of the runtime analysis for a central query point with arrival time 9:50 am on a weekday. For small values of d max and small isochrones, Dijkstra has the worst performance due to the initial loading of the entire network. For large d max , Dijkstra (though limited by the available memory) is more efficient since the initial loading of the network using a full table scan is faster than the incremental loading in MINE and IER. IER performs worse than MINE due to multiple loadings of edges.
In this paper we formally defined isochrones for multimodal spa-tial networks that can be discrete or continuous in, respectively, space and time. We proposed the MINE algorithm to compute isochrones, which is independent of the network size and depends only on the isochrone size. An empirical study confirmed the ana-lytical results.

Future work includes the study of various optimization tech-niques in MINE as well as approximation algorithms. We will also study the use of isochrones in new application scenarios. [1] V. Balasubramanian, D. V. Kalashnikov, S. Mehrotra, and [2] V. Bauer, J. Gamper, R. Loperfido, S. Profanter, S. Putzer, [3] H.-J. Cho and C.-W. Chung. An efficient and scalable [4] V. T. de Almeida and R. H. G X ting. Using Dijkstra X  X  [5] K. Deng, X. Zhou, H. T. Shen, S. W. Sadiq, and X. Li. [6] E. W. Dijkstra. A note on two problems in connexion with [7] B. Ding, J. X. Yu, and L. Qin. Finding time-dependent [8] A. Gubichev, S. Bedathur, S. Seufert, and G. Weikum. Fast [9] P. Hart, N. Nilsson, and B. Raphael. A formal basis for the [10] R. Huang. A schedule-based pathfinding algorithm for transit [11] N. Jing, Y.-W. Huang, and E. A. Rundensteiner. Hierarchical [12] E. Kanoulas, Y. Du, T. Xia, and D. Zhang. Finding fastest [13] M. R. Kolahdouzan and C. Shahabi. Voronoi-based k nearest [14] D. Papadias, J. Zhang, N. Mamoulis, and Y. Tao. Query [15] M. Potamias, F. Bonchi, C. Castillo, and A. Gionis. Fast [16] H. Samet, J. Sankaranarayanan, and H. Alborzi. Scalable
