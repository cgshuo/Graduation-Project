 1. Introduction
Flexible manufacturing systems (FMSs) are considered as one of the most important production technologies to efficiently handle current changes in market requirements. An FMS is a network of workstations interconnected by material-handling devices, where a low or medium volume of parts can be manufactured. It combines an efficient use of resources such as machines, tools, and storage places, with high flexibility. Flex-ibility is a key issue in current manufacturing systems. It refers to the ability of the system to respond cost effectively and rapidly to changing production needs and requirements. This capability is becoming more and more important as FMSs do operate nowa-days in highly variable, dynamic, and unpredictable environ-ments.

In the context of FMSs, the current literature offers several competing definitions and classifications of flexibility types.
According to Browne et al. (1984) , there are eight different classes, which have been analyzed in various contributions. Two of the most important types are the possibility of performing an operation on more than one machine and the ability of a manufacturing system to use multiple alternative routes to produce a given part ( Chan, 2001, 2003, 2004 ).
 sequence of workstations that a given part must successively visit to have all its required operations executed. Tool allocation determines the number of tool copies of each type to be employed and assigns them to machines. On the other hand, MHD loading establishes the allocation of transport tasks to units having a limited transport capacity, whereas MHD routing determines the routes that each device has to follow. Finally, the various tasks (machining, transport, and storage) have to be given start and completion times. All these problems have to be tackled simultaneously while pursuing the optimization of a performance measure.

In industrial environments, schedules are influenced by part priorities and due dates, machine and part release times, cost bounds, machine availability and capability constraints, other resource (fixtures, transportation devices, etc.) availabilities, operation precedence restrictions, etc. In addition, FMS-schedul-ing problems are strongly affected by the number of tool copies at hand. Veeramani et al. (1992) and Mohamed and Bernardo (1997) emphasized that the lack of proper attention to this number can prevent manufacturing systems from achieving their maximum flexibility and may result in an unacceptable level of downtime, leading to a reduced FMS productivity. Thus, the tool planning subproblem, which determines the required number of tool copies to achieve the production requirements, is another critical issue associated with the problem.

An analysis of the most relevant contributions reveals that most of the approaches reported in literature decompose the FMS-scheduling problem and adopt assumptions that aim at making it tractable. Thus, proposals can be grouped under two categories: firstly, the ones that consider that MHDs represent a limiting resource and secondly, contributions in which tools appear to be the critical component.

Some of the most relevant and recent contributions related to the former case are the ones of Bilge and Ulusoy (1995) , Ulusoy et al. (1997) , Liu and MacCarthy (1997) , Sabuncuoglu and Karabuk (1998) , Smith et al. (1999) , and El Khayat et al. (2006) .
Bilge and Ulusoy (1995) presented two heuristics linked by an iterative solution procedure to deal with the machine and material-handling scheduling problems, without taking into account work in process buffers. The first one generates a machine schedule and the second one finds a feasible solution to the vehicle-scheduling problem given the machine schedule. Later,
Ulusoy et al. (1997) developed a genetic algorithm approach that simultaneously addressed both problems. In turn, Liu and
MacCarthy (1997) took into account aspects associated with part storage places. Their proposal presented a mixed integer linear programming (MILP) model. However, considering the weak suboptimal solutions are likely to be obtained. Moreover, the proposal does not suggest any systematic procedure to obtain a solution when the assignment step leads to an infeasible schedule.
Another limitation is that only one tool copy per tool type is allowed.

Finally, Chan and Swarnkar (2006) developed an ant colony approach for solving a problem similar to the one considered by
Atmani and Lashkari (1998) . Their objective was to minimize various costs (machining, set-up, and material handling). One of its disadvantages is that the performance depends on several parameters that need to be tuned.

The previous contributions addressed the scheduling problem by assuming that both the FMS and the production requirements will remain unchanged in the entire horizon. Thus, schedules were typically generated based on assumptions of static part lists, deterministic processing times as well as no machine and MHD failures. Nevertheless, industrial environments are highly dy-namic and, therefore, the proposed schedule can rapidly become infeasible after the occurrence of an unexpected event. Despite the importance of revising the schedule after these unforeseen circumstances, few contributions have tackled the FMS reschedul-ing problem ( Chan and Chan, 2001 ; Jain and Foley, 2002 ; Kumar et al., 2008 ).

As seen, the FMS-scheduling problem has been addressed by a wide variety of solution techniques as well as from different perspectives. Nevertheless, the reported proposals still have several weaknesses. Some approaches lead to high dimensionality formulations, which are consequently hard to solve. Others do not deal with the scheduling problem in an integrated fashion or adopt heuristic procedures. In these cases suboptimal solutions are likely to be reached. Furthermore, certain proposals resort to assumptions (e.g. an operation can be executed in only one machine) that are valid in many industrial settings, to simplify the problem.

The goal of this contribution is to overcome some of the limitations pointed out before. This paper presents a constraint programming (CP) formulation that addresses the scheduling problem of FMSs in an integrated way, considering the tool allocation, machine loading, part routing, as well as timing decisions. It is worth noting that since there is a strong dependency among them, all these decisions are simultaneously addressed to avoid low-quality schedules. Transport-related issues are not tackled since it is assumed that MHDs do not act as critical resources. In addition, machine buffers are not taken into account due to the fact that their capacities are not regarded as limiting.

The model has been implemented in the ILOG OPL CP language (Van Hentenryck, 1999 ), embedded in the OPL Studio Package (OPL Studio 3.7, 2003 ). It resorts to some specific scheduling constructs that are available in the ILOG Scheduler ( ILOG
Scheduler 6.0, 2003 ) software package. The formulation can handle a variety of performance functions.

The rest of the paper is structured as follows. Section 2 describes the scheduling problem under consideration, Section 3 presents an overview of CP approaches, and Section 4 introduces the CP model for the FMS-scheduling problem at hand. Results are presented in Section 5. The computational performance of the model is shown through the solution of eight case studies that consider different numbers of parts, operations, as well as machines. Finally, conclusions are pointed out in Section 6. 2. Problem description
This work considers a resource-constrained FMS in which an a priori known number of parts i A I should be manufactured. The
The model includes the possibility of dealing with various performance measures or OFs, such as makespan Mk , the total number of tool copies TNTC , and two multiobjective functions.
One of them contains as terms the makespan and the total number of copies of all tool types available in the system. The other, which was originally introduced by Gamila and Motavalli (2003) , is considered for comparison purposes. It includes as terms the makespan, the load of the MHDs in terms of part movements, and the total processing time. 3. Constraint programming (CP) approaches
Traditionally, scheduling problems have been tackled with various approaches. In the last 20 years, some methods based on artificial intelligence techniques have been successfully used to deal with different classes of scheduling problems. Among them, constraint satisfaction (CS; Brailsford et al., 1999 ) is one that has been applied recently. The implementation of algorithms able to solve CS problems is known as constraint programming ( Van
Hentenryck, 1999 ). CP is able to address optimization problems since they can be expressed as a sequence of CS problems. Their objective function (OF) is included as another constraint and at each iteration, the variable representing the OF is required to assume a better value than the one reached at the previous one. Many efficient algorithms are nowadays included in commercial 4. CP model problem constraints are described in detail. 4.1. Nomenclature 4.1.1. Subscripts i part to be processed p, p 0 operations executed on the parts to be machined m, m 0 machines that carry out the required operations l tool type 4.1.2. Sets I set of parts P set of operations M set of alternative machines L set of alternative tool types PermMach ip set of permitted machines according to the part i and the operation p PermTool ip set of allowed tool types depending on the part i and the operation p 4.1.3. Parameters d i due date of part i
P
CO
TM m number of slots that the machine m tool magazine contains
SC i set-up cost associated with part i MSC upper limit on the overall set-up cost MPC maximum processing cost
LT l life-time of a tool copy that belongs to type l
TS l number of tool slots required by any copy of type l MNCT l maximum number of allowed copies per tool type l
Mk max maximum value that the variable representing makespan may assume
Mk min minimum value that the variable representing makespan may assume TNTC max upper bound on the total number of tool copies
TNTC min lower bound on the total number of tool copies w
Mk weighing factor associated with the makespan objective w TNTC weighing factor associated with the total number of tool copies objective The model handles the following special parameters: 4.1.4. Model variables these sets of tasks, it handles the following six types of variables: TaskMach ip .duration duration of operation p performed on part i by a given unit and require tool copies of different types.
 In addition, the model resorts to the following variables: XM i number of movements of part i between machines NTCM ml number of tool copies of type l assigned to machine m TNTC total number of tool copies Mk maximum completion time or makespan U utility function that involves makespan and the total number of tool copies 4.2. Model characteristics
TaskMach ip 0 states that the TaskMach ip 0 cannot start until the TaskMach high-level construct that is equivalent to the following mathematical expression: TaskMac h ip : end r TaskMac h ip 0 : start  X  1  X  to as AlternativeResourceSetX . Thus, activityHasSelectedResource ( TaskMach 4.3. Problem constraints 4.3.1. Assignment constraints other activities while carrying out TaskMach ip and TaskTool without requiring additional constraints to forbid their overlapping. TaskMac h ip requires M 8 i A I ; 8 p A P  X  2  X  TaskToo l ip requires L 8 i A I ; 8 p A P  X  3  X 
Constraints (4) and (5) specify the length of TaskMach ip activityHasSelectedResource  X  TaskToo l ip ; L ; Too l l  X  X  1 3 TaskMac h ip : duration  X  P ipml 8 i A I ; 8 p A P ; 8 m A TaskToo l ip : duration  X  TaskMac h ip : duration 8 i A I ; 8 p must be selected: activityHasSelectedResource  X  TaskToo l ip ; L ; Too l l  X  X  1 )
X 8 i A
I ; 8 p A P ; 8 l A PermToo l ip  X  6  X  activityHasSelectedResource  X  TaskMac h ip ; M ; Machin e
X 8 i A I ; 8 p A P ; 8 m A PermMac h ip  X  7  X  4.3.2. Precedence and timing constraints date. Finally, relation (10) is employed to define the makespan concept: TaskMac h ip precedes TaskMac h ip 0 8 i A I ; 8 p ; p 0 TaskMac h ip : end r d i 8 i A I ; 8 p A P ; ord  X  p  X  X  last  X  P  X   X  9  X  TaskMac h ip : end r Mk 8 i A I ; 8 p A P ; ord  X  p  X  X  last  X  P  X   X  10  X  out of the model, once it is solved.
 feasibility is reached. 4.3.3. Cost-related constraints the machine employed to carry out the activity:
X activityHasSelectedResource  X  TaskMac h ip ; M ; Machin e number of part movements between machines is represented by means of variable XM limit.
 XM i Z activityHasSelectedResource  X  TaskMac h ip 0 ; M ; Machin e
X
SC i XM i r MSC  X  13  X  4.3.4. Constraints defining the number of tool copies or equal to the total life-time of the number of tool copies (represented by NTCM
X activityHasSelectedResource  X  TaskMac h ip ; M ; Machin e
X
X NTC M ml TS l r TM m 8 m A M  X  16  X  4.3.5. Constraints that speed up the search process computational load point of view:
TaskMac h ip : duration Z min
X
X 4.4. Objective functions case, the minimum value of the TNTC variable is sought: TNTC Z proposal with the work of Gamila and Motavalli (2003). them are included in a utility function without previously normalizing them. ( Mk these components, terms are affected by means of normalized weighing factors ( w classic literature ( Zeleny, 1974, 1982 ): w assumes is less significant: Mk  X 
X activityHasSelected Re source  X  TaskMac h ip ; M ; Machin e 5. Results and discussion
In this work, the computational performance of the CP formulation is illustrated through the solution of eight case case studies that take into account other limiting resources are reported in the literature. Among these examples, Gamila and
Motavalli (2003) included two problem instances. One of them is very simple and was originally introduced by Sarin and Chen (1987). One of the examples reported by Gamila and Motavalli (2003) is addressed in this contribution. However, given that in the open literature there are few benchmark problems that tackle tool issues, the other problem instances were randomly generated.

In order to illustrate the behavior of the CP formulation when the number of parts, operations, and machines is increased, the reported case studies consider five to seventeen parts, four to ten operations, and five to eight machines. In addition, the perfor-mance was analyzed employing the four OFs already presented.
Problems are identified through an alphanumeric code, where the first two characters refer to the problem itself, and the last one the OF being considered; for example, M for makespan, T for TNTC as well as U and U 0 for both multiobjective functions. Thus, P1M represents problem 1 and makespan minimization. Table 1 summarizes the characteristics of the various case studies, where P8 corresponds to the second problem instance addressed by Gamila and Motavalli (2003). In these case studies all the machines have tool drums with a 60-tool-slot capacity. Data for problems P1 X  X 7 are given in Tables A.1 X  X .4 of
Appendix A. Table A.1 shows processing times, machining costs, and the sets of permitted machine X  X ool pairs. It also shows that the sets of permitted machines and tool types depend on both the part and the operation. Thus, the groups of allowed workstations and tool types for part i 2 and operation p 1 are PermMach m , m 6 , m 7 } and PermTool i 2 p 1 ={ l 1 , l 3 }. They are different from the sets corresponding to other parts and/or operations. For instance, the sets for operation p 1 , but part i 3 ,are PermMach i 3 p 1 m } and PermTool i 3 p 1 ={ l 6 , l 12 }. In addition, if operation p out on part i 3 using workstation m 7 and one tool copy of type l presents problem sizes for these case studies, showing the impact of an increase in the number of parts to be scheduled. The fourth and fifth columns of this table show the first feasible solutions that were found and the CPU time, respectively. The sixth and seventh columns present in bold the results that were obtained when makespan and TNTC were minimized, respectively. The following column presents the results that were achieved when the utility function (21) was maximized. Finally, the last column shows the time required to attain the best or optimal solution reported for each case study.

It is worth noting that parameters Mk min , TNTC min , Mk
TNTC max , which are part of OF (21), were specified by taking into account the following aspects. The values of the first two were obtained when minimizing, in a separate way, makespan and
TNTC , respectively. On the other hand, parameter Mk max corre-sponds to the value of the makespan variable when TNTC was minimized. On the contrary, TNTC max represents the value of TNTC when makespan was minimized. For example, when problem P1 was tackled, these parameters assumed the following values:
Mk min = 353min, TNTC min =30, Mk max =355min, and TNTC max =33.
In addition, the two terms of the multiobjective function (21) were considered to be equally important in all cases ( w Mk w
Table 2 shows that optimal solutions were obtained for case studies P1M, P1T, P1U, and P2M, and that the first feasible solutions were reached in short CPU times for all the problems. On the contrary, the CP approach was able to find just good-quality solutions within the time limit for examples P2T, P2U, P3M, P3T, and P3U. The worst performance was obtained when solving problem P3, which includes the greatest number of parts. Thus, the effect of problem size on computational performance can be seen.

The best solution that was reached for Case Study P3, when considering makespan as the OF, is shown in Figs. 3 and 4 . Fig. 3 presents a Gantt diagram illustrating the sequence of operations assigned to each machine. Fig. 4 depicts a diagram showing the tool types chosen to execute the machining operations and the intervals during which each tool copy is employed by the assigned machine in order to carry out the required operations on parts. As can be seen in Fig. 4 , 21 of the 22 available tool types are employed. In addition, this diagram illustrates the number of copies of each tool type that are assigned to machines. For example, given that the processing times of the activities executed by machines m 1 and m 2 , which both require tools of type l model size turned into a greater demand of CPU time. It can be noted that a small increment in problem dimensionality produced four orders of magnitude growth in the required CPU time.
Nevertheless, it was still possible to find P7M optimal solution without resorting to model simplifications. contributions. Gamila and Motavalli (2003) addressed this problem by means of a decomposition approach and solved two different case studies, identified as first and second examples. In order to compare the results achieved by the CP model with the ones found employing the decomposition formulation of these authors, their second example, identified in this contribution as P8, was solved. l require more than 150min of machining time (more than the life-time of this tool type), two copies of l 12 will be needed.
In addition, since the activities requiring tool copies of type l are allocated to machines m 3 and m 5 , but the processing times of these activities do not exceed the tool life-time, just two copies of type l 5 will be required. Thus, while the number of required tool types is 17, the number of tool copies to be employed is 19.

Table 6 presents a comparison between the results obtained with the CP model and the decomposition approach proposed by Gamila and Motavalli (2003), which was implemented in CPLEX in
ILOG OPL Studio 3.7 for evaluation purposes. The CP model employed 467 variables and 587 constraints, but despite its high dimensionality, it was solved to optimality in only 16.75s. The proposal of Gamila and Motavalli (2003), which was implemented allowing the use of several copies per tool type, reached the same suboptimal solution reported in their paper in 2.31s.
As can be seen in Table 6 , the solution reached with the CP model is better than the one obtained with the decomposition method, since the utility function decreased its value from 2250 to 2201. This reduction was achieved because the maximum completion time went down from 443 to 437min, the total processing time reduced considerably its value from 1796 to 1753, whereas the set-up costs ($1210) and the total number of part movements (11) were the same in the two solutions. This reduction in U 0 is not unexpected due to the strong influence of processing time in it. On the other hand, the total processing cost increased from $5080 to $5160, though it remained below its maximum allowed value of $5200.

An analysis of the sensitivity of the solution with respect to the bound on total processing cost showed that such a limit affects the solution quality. In fact, when it was reduced from $5200 to $5050, both the makespan and the total processing time increased, rendering a worse value of the OF, which increased from 2201 to 2215. Nevertheless, this new solution is still better than the one obtained by Gamila and Motavalli X  X  (2003) decom-position method.

Table 7 presents the OF values corresponding to the distinct solutions of this case study when different performance measures (makespan, TNTC , and utility function U ) were pursued. A comparative analysis of columns 2 and 3 of this table reveals that a trade-off exists between makespan and TNTC . When the first was minimized ( Mk =421min), the number of required tool copies was 19. On the other hand, when TNTC was minimized ( TNTC =18), makespan increased to 470min. Moreover, when both variables were included in utility function U , another solution was
In addition, the proposed formulation represents tool management issues in terms of tool types and not in terms of tool copies. In fact, tool characteristics are modelled at the level of tool classes and the needs of tool copies are indirectly determined.
By adopting this simplified representation, the computational complexity of the model is also reduced. Since this approach does not explicitly model tool copies, it is neither able to handle situations in which a given tool copy reaches the end of its life-time while it is actually in operation, nor is it capable of considering tool copies of the same type having different life-times. However, future work will take these features into account by explicitly representing tool copies. Nevertheless, the model complexity is expected to increase, demanding perhaps a domain-
