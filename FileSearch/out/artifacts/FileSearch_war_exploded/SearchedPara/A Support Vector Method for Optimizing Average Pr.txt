 Machine learning is commonly used to improve ranked re-trieval systems. Due to computational difficulties, few learn-ing techniques have been developed to directly optimize for mean average precision (MAP), despite its widespread use in evaluating such systems. Existing approaches optimiz-ing MAP either do not find a globally optimal solution, or are computationally expensive. In contrast, we present a general SVM learning algorithm that efficiently finds a globally optimal solution to a straightforward relaxation of MAP. We evaluate our approach using the TREC 9 and TREC 10 Web Track corpora (WT10g), comparing against SVMs optimized for accuracy and ROCArea. In most cases we show our method to produce statistically significant im-provements in MAP scores.
 H.3.3 [ Information Search and Retrieval ]: Retrieval Models Algorithm, Theory, Experimentation Machine Learning for Information Retrieval, Support Vector Machines, Ranking
State of the art information retrieval systems commonly use machine learning techniques to learn ranking functions. However, most current approaches do not optimize for the evaluation measure most often used, namely Mean Average Precision (MAP).

Instead, current algorithms tend to take one of two gen-eral approaches. The first approach is to learn a model that estimates the probability of a document being relevant given Copyright 2007 ACM 978-1-59593-597-7/07/0007 ... $ 5.00. a query (e.g., [18, 14]). If solved effectively, the ranking with best MAP performance can easily be derived from the prob-abilities of relevance. However, achieving high MAP only requires finding a good ordering of the documents. As a re-sult, finding good probabilities requires solving a more diffi-cult problem than necessary, likely requiring more training data to achieve the same MAP performance.

The second common approach is to learn a function that maximizes a surrogate measure. Performance measures op-timized include accuracy [17, 15], ROCArea [1, 5, 10, 11, 13, 21] or modifications of ROCArea [4], and NDCG [2, 3]. Learning a model to optimize for such measures might result in suboptimal MAP performance. In fact, although some previous systems have obtained good MAP performance, it is known that neither achieving optimal accuracy nor ROC-Area can guarantee optimal MAP performance[7].

In this paper, we present a general approach for learning ranking functions that maximize MAP performance. Specif-ically, we present an SVM algorithm that globally optimizes a hinge-loss relaxation of MAP. This approach simplifies the process of obtaining ranking functions with high MAP performance by avoiding additional intermediate steps and heuristics. The new algorithm also makes it conceptually just as easy to optimize SVMs for MAP as was previously possible only for accuracy and ROCArea.

In contrast to recent work directly optimizing for MAP performance by Metzler &amp; Croft [16] and Caruana et al. [6], our technique is computationally efficient while finding a globally optimal solution. Like [6, 16], our method learns a linear model, but is much more efficient in practice and, unlike [16], can handle many thousands of features.
We now describe the algorithm in detail and provide proof of correctness. Following this, we provide an analysis of run-ning time. We finish with empirical results from experiments on the TREC 9 and TREC 10 Web Track corpus. We have also developed a software package implementing our algo-rithm that is available for public use 1 .
Following the standard machine learning setup, our goal is to learn a function h : X  X  Y between an input space X (all possible queries) and output space Y (rankings over a corpus). In order to quantify the quality of a prediction,  X  y = h ( x ), we will consider a loss function  X  : Y  X Y  X  &lt; .  X ( y ,  X  y ) quantifies the penalty for making prediction  X  y if the correct output is y . The loss function allows us to incorpo-rate specific performance measures, which we will exploit http://svmrank.yisongyue.com for optimizing MAP. We restrict ourselves to the supervised learning scenario, where input/output pairs ( x , y ) are avail-able for training and are assumed to come from some fixed distribution P ( x , y ). The goal is to find a function h such that the risk (i.e., expected loss), is minimized. Of course, P ( x , y ) is unknown. But given a finite set of training pairs, S = { ( x i , y i )  X  X  X Y : i = 1 , . . . , n } , the performance of h on S can be measured by the empirical risk,
In the case of learning a ranked retrieval function, X de-notes a space of queries, and Y the space of (possibly weak) rankings over some corpus of documents C = { d 1 , . . . , d
We can define average precision loss as where rank ( y ) is a vector of the rank values of each doc-ument in C . For example, for a corpus of two documents, { d 1 , d 2 } , with d 1 having higher rank than d 2 , rank ( y (1 , 0). We assume true rankings have two rank values, where relevant documents have rank value 1 and non-relevant doc-uments rank value 0. We further assume that all predicted rankings are complete rankings (no ties).

Let p = rank ( y ) and  X  p = rank (  X  y ). The average precision score is defined as where rel = |{ i : p i = 1 }| is the number of relevant docu-ments, and P rec @ j is the percentage of relevant documents in the top j documents in predicted ranking  X  y . MAP is the mean of the average precision scores of a group of queries. Most learning algorithms optimize for accuracy or ROC-Area. While optimizing for these measures might achieve good MAP performance, we use two simple examples to show it can also be suboptimal in terms of MAP.

ROCArea assigns equal penalty to each misordering of a relevant/non-relevant pair. In contrast, MAP assigns greater penalties to misorderings higher up in the predicted ranking. Using our notation, ROCArea can be defined as where p is the true (weak) ranking,  X  p is the predicted rank-ing, and 1 [ b ] is the indicator function conditioned on b .
Suppose we have a hypothesis space with only two hy-pothesis functions, h 1 and h 2 , as shown in Table 1. These two hypotheses predict a ranking for query x over a corpus of eight documents.

Table 2 shows the MAP and ROCArea scores of h 1 and h . Here, a learning method which optimizes for ROC-Area would choose h 2 since that results in a higher ROC-Area score, but this yields a suboptimal MAP score.
Using a very similar example, we now demonstrate how optimizing for accuracy might result in suboptimal MAP. Models which optimize for accuracy are not directly con-cerned with the ranking. Instead, they learn a threshold such that documents scoring higher than the threshold can be classified as relevant and documents scoring lower as non-relevant.
 rank ( h 1 ( x )) 11 10 9 8 7 6 5 4 3 2 1 rank ( h 2 ( x )) 1 2 3 4 5 6 7 8 9 10 11
We consider again a hypothesis space with two hypothe-ses. Table 3 shows the predictions of the two hypotheses on a single query x .

Table 4 shows the MAP and best accuracy scores of h 1 ( q ) and h 2 ( q ). The best accuracy refers to the highest achiev-able accuracy on that ranking when considering all possi-ble thresholds. For instance, with h 1 ( q ), a threshold be-tween documents 1 and 2 gives 4 errors (documents 6-9 in-correctly classified as non-relevant), yielding an accuracy of 0 . 64. Similarly, with h 2 ( q ), a threshold between documents 5 and 6 gives 3 errors (documents 10-11 incorrectly classi-fied as relevant, and document 1 as non-relevant), yielding an accuracy of 0 . 73. A learning method which optimizes for accuracy would choose h 2 since that results in a higher accuracy score, but this yields a suboptimal MAP score.
We build upon the approach used by [13] for optimiz-ing ROCArea. Unlike ROCArea, however, MAP does not decompose linearly in the examples and requires a substan-tially extended algorithm, which we describe in this section.
Recall that the true ranking is a weak ranking with two rank values (relevant and non-relevant). Let C x and C  X  x note the set of relevant and non-relevant documents of C for query x , respectively.

We focus on functions which are parametrized by a weight vector w , and thus wish to find w to minimize the empirical discriminant function F : X  X Y  X  &lt; over input-output pairs. Given query x , we can derive a prediction by finding the ranking y that maximizes the discriminant function: We assume F to be linear in some combined feature repre-sentation of inputs and outputs  X ( x , y )  X  R N , i.e., The combined feature function we use is  X ( x , y ) = 1 | C x | X | C  X  x | X where  X  : X  X C  X  &lt; N is a feature mapping function from a query/document pair to a point in N dimensional space 2 We represent rankings as a matrix of pairwise orderings, Y  X  { X  1 , 0 , +1 } |C| X |C| . For any y  X  Y , y ij = +1 if d ranked ahead of d j , and y ij =  X  1 if d j is ranked ahead of d and y ij = 0 if d i and d j have equal rank. We consider only matrices which correspond to valid rankings (i.e, obeying antisymmetry and transitivity). Intuitively,  X  is a summa-tion over the vector differences of all relevant/non-relevant document pairings. Since we assume predicted rankings to be complete rankings, y ij is either +1 or  X  1 (never 0).
Given a learned weight vector w , predicting a ranking (i.e. solving equation (1)) given query x reduces to picking each y ij to maximize w T  X ( x , y ). As is also discussed in [13], this is attained by sorting the documents by w T  X  ( x , d ) in descending order. We will discuss later the choices of  X  we used for our experiments.
The above formulation is very similar to learning a straight-forward linear model while training on the pairwise dif-ference of relevant/non-relevant document pairings. Many SVM-based approaches optimize over these pairwise differ-ences (e.g., [5, 10, 13, 4]), although these methods do not optimize for MAP during training. Previously, it was not clear how to incorporate non-linear multivariate loss func-tions such as MAP loss directly into global optimization problems such as SVM training. We now present a method based on structural SVMs [19] to address this problem.
We use the structural SVM formulation, presented in Op-timization Problem 1, to learn a w  X  R N .

Optimization Problem 1. (Structural SVM) The objective function to be minimized (3) is a tradeoff between model complexity, k w k 2 , and a hinge loss relaxation of MAP loss, P  X  i . As is usual in SVM training, C is a
For example, one dimension might be the number of times the query words appear in the document.
 Algorithm 1 Cutting plane algorithm for solving OP 1 within tolerance . 1: Input: ( x 1 , y 1 ) , . . . , ( x n , y n ), C , 2: W i  X  X  X  for all i = 1 , . . . , n 3: repeat 4: for i = 1 , . . . , n do 5: H ( y ; w )  X   X ( y i , y ) + w T  X ( x i , y )  X  w T  X ( x 6: compute  X  y = argmax y  X  X  H ( y ; w ) 7: compute  X  i = max { 0 , max y  X  X  i H ( y ; w ) } 8: if H (  X  y ; w ) &gt;  X  i + then 9: W i  X  X  i  X  X   X  y } 10: w  X  optimize (3) over W = S i W i 11: end if 12: end for 13: until no W i has changed during iteration parameter that controls this tradeoff and can be tuned to achieve good performance in different training tasks.
For each ( x i , y i ) in the training set, a set of constraints of the form in equation (4) is added to the optimization problem. Note that w T  X ( x , y ) is exactly our discriminant function F ( x , y ; w ) (see equation (2)). During prediction, our model chooses the ranking which maximizes the discrim-inant (1). If the discriminant value for an incorrect ranking y is greater than for the true ranking y i (e.g., F ( x i F ( x i , y i ; w )), then corresponding slack variable,  X  at least  X ( y i , y ) for that constraint to be satisfied. There-fore, the sum of slacks, P  X  i , upper bounds the MAP loss. This is stated formally in Proposition 1.

Proposition 1. Let  X   X  ( w ) be the optimal solution of the slack variables for OP 1 for a given weight vector w . Then
P n i =1  X  i is an upper bound on the empirical risk R  X  S (see [19] for proof)
Proposition 1 shows that OP 1 learns a ranking function that optimizes an upper bound on MAP error on the train-ing set. Unfortunately there is a problem: a constraint is required for every possible wrong output y , and the num-ber of possible wrong outputs is exponential in the size of C . Fortunately, we may employ Algorithm 1 to solve OP 1. Algorithm 1 is a cutting plane algorithm, iteratively intro-ducing constraints until we have solved the original problem within a desired tolerance [19]. The algorithm starts with no constraints, and iteratively finds for each example ( x the output  X  y associated with the most violated constraint. If the corresponding constraint is violated by more than we introduce  X  y into the working set W i of active constraints for example i , and re-solve (3) using the updated W . It can be shown that Algorithm 1 X  X  outer loop is guaranteed to halt within a polynomial number of iterations for any desired precision .

Theorem 1. Let  X  R = max i max y k  X ( x i , y i )  X   X ( x  X   X  = max i max y  X ( y i , y ) , and for any &gt; 0 , Algorithm 1 terminates after adding at most constraints to the working set W . (see [19] for proof) However, within the inner loop of this algorithm we have to compute argmax y  X  X  H ( y ; w ), where or equivalently, since w T  X ( x i , y i ) is constant with respect to y . Though closely related to the classification procedure, this has the substantial complication that we must contend with the ad-ditional  X ( y i , y ) term. Without the ability to efficiently find the most violated constraint (i.e., solve argmax y  X  X  H ( y , w )), the constraint generation procedure is not tractable.
Using OP 1 and optimizing to ROCArea loss ( X  roc ), the problem of finding the most violated constraint, or solving argmax y  X  X  H ( y , w ) (henceforth argmax H ), is addressed in [13]. Solving argmax H for  X  map is more difficult. This is primarily because ROCArea decomposes nicely into a sum of scores computed independently on each relative order-ing of a relevant/non-relevant document pair. MAP, on the other hand, does not decompose in the same way as ROC-Area. The main algorithmic contribution of this paper is an efficient method for solving argmax H for  X  map .
One useful property of  X  map is that it is invariant to swap-ping two documents with equal relevance. For example, if documents d a and d b are both relevant, then swapping the positions of d a and d b in any ranking does not affect  X  By extension,  X  map is invariant to any arbitrary permuta-tion of the relevant documents amongst themselves and of the non-relevant documents amongst themselves. However, this reshuffling will affect the discriminant score, w T  X ( x , y ). This leads us to Observation 1.

Observation 1. Consider rankings which are constrained by fixing the relevance at each position in the ranking (e.g., the 3rd document in the ranking must be relevant). Every ranking which satisfies the same set of constraints will have the same  X  map . If the relevant documents are sorted by w
T  X  ( x , d ) in descending order, and the non-relevant docu-ments are likewise sorted by w T  X  ( x , d ) , then the interleav-ing of the two sorted lists which satisfies the constraints will maximize H for that constrained set of rankings.

Observation 1 implies that in the ranking which maxi-mizes H , the relevant documents will be sorted by w T  X  ( x , d ), and the non-relevant documents will also be sorted likewise. By first sorting the relevant and non-relevant documents, the problem is simplified to finding the optimal interleaving of two sorted lists. For the rest of our discussion, we assume that the relevant documents and non-relevant documents are both sorted by descending w T  X  ( x , d ). For convenience, we also refer to relevant documents as { d x 1 , . . . d x when the highest ranked relevant document ranked after d  X  x is d x i 1 to when it is d x i 2 . For i 2 = i 1 + 1, we have  X  ( i, i + 1) = 1 |C x | where s i = w T  X  ( x , d i ). The first term in (5) is the change in  X  map when the i th relevant document has j non-relevant documents ranked before it, as opposed to j  X  1. The second term is the change in the discriminant score, w T  X ( x , y ), when y ij changes from +1 to  X  1.
Figure 1 gives a conceptual example for  X  j ( i, i + 1). The bottom ranking differs from the top only where d  X  x j slides up one rank. The difference in the value of H for these two rankings is exactly  X  j ( i, i + 1).

For any i 1 &lt; i 2 , we can then define  X  j ( i 1 , i 2 or equivalently,  X  ( i 1 , i 2 ) = documents, where d x o j is the highest ranked relevant docu-ment ranked after the j th non-relevant document. Due to Observation 1, this encoding uniquely identifies a complete ranking. We can recover the ranking as y We can now reformulate H into a new objective function, where  X  y is the true (weak) ranking. Conceptually H 0 starts with a perfect ranking  X  y , and adds the change in H when each successive non-relevant document slides up the ranking.
We can then reformulate the argmax H problem as s.t.
Algorithm 2 describes the algorithm used to solve equa-tion (8). Conceptually, Algorithm 2 starts with a perfect ranking. Then for each successive non-relevant document, the algorithm modifies the solution by sliding that docu-ment up the ranking to locally maximize H 0 while keeping the positions of the other non-relevant documents constant.
Algorithm 2 is greedy in the sense that it finds the best position of each non-relevant document independently from the other non-relevant documents. In other words, the al-gorithm maximizes H 0 for each non-relevant document, d  X  x Algorithm 2 Finding the Most Violated Constraint (argmax H ) for Algorithm 1 with  X  map 1: Input: w , C x , C  X  x 2: sort C x and C  X  x in descending order of w T  X  ( x, d ) 3: s x i  X  w T  X  ( x, d x i ), i = 1 , . . . , |C x | 5: for j = 1 , . . . , |C  X  x | do 6: opt j  X  argmax k  X  j ( k, |C x | + 1) 7: end for 8: encode  X  y according to (7) 9: return  X  y without considering the positions of the other non-relevant documents, and thus ignores the constraints of (9).
In order for the solution to be feasible, the j th non-relevant document must be ranked after the first j  X  1 non-relevant documents, thus satisfying If the solution is feasible, the it clearly solves (8). Therefore, it suffices to prove that Algorithm 2 satisfies (10). We first prove that  X  j (  X  ,  X  ) is monotonically decreasing in j .
Lemma 1. For any 1  X  i 1 &lt; i 2  X  |C x | + 1 and 1  X  j &lt; |C  X  x | , it must be the case that
Proof. Recall from (6) that both  X  j ( i 1 , i 2 ) and  X  j +1 are summations of i 2  X  i 1 terms. We will show that each term in the summation of  X  j +1 ( i 1 , i 2 ) is no greater than the corresponding term in  X  j ( i 1 , i 2 ), or for k = i 1 , . . . , i 2  X  1.

Each term in  X  j ( k, k +1) and  X  j +1 ( k, k +1) can be further decomposed into two parts (see (5)). We will show that each part of  X  j +1 ( k, k + 1) is no greater than the corresponding part in  X  j ( k, k + 1). In other words, we will show that both and are true for the aforementioned values of j and k .
It is easy to see that (11) is true by observing that for any two positive integers 1  X  a &lt; b , and choosing a = j and b = j + k .

The second inequality (12) holds because Algorithm 2 first sorts d  X  x in descending order of s  X  x , implying s  X  x
Thus we see that each term in  X  j +1 is no greater than the corresponding term in  X  j , which completes the proof.
The result of Lemma 1 leads directly to our main correct-ness result:
Theorem 2. In Algorithm 2, the computed values of opt j satisfy (10), implying that the solution returned by Algorithm 2 is feasible and thus optimal.

Proof. We will prove that holds for any 1  X  j &lt; |C  X  x | , thus implying (10).
Since Algorithm 2 computes opt j as then by definition of  X  j (6), for any 1  X  i &lt; opt j , Using Lemma 1, we know that which implies that for any 1  X  i &lt; opt j , Suppose for contradiction that opt j +1 &lt; opt j . Then which contradicts (13). Therefore, it must be the case that opt j  X  opt j +1 , which completes the proof.
The running time of Algorithm 2 can be split into two parts. The first part is the sort by w T  X  ( x, d ), which re-quires O ( n log n ) time, where n = |C x | + |C  X  x | . The second part computes each opt j , which requires O ( |C x | X |C  X  x Though in the worst case this is O ( n 2 ), the number of rel-evant documents, |C x | , is often very small (e.g., constant with respect to n ), in which case the running time for the second part is simply O ( n ). For most real-world datasets, Algorithm 2 is dominated by the sort and has complexity O ( n log n ).

Algorithm 1 is guaranteed to halt in a polynomial num-ber of iterations [19], and each iteration runs Algorithm 2. Virtually all well-performing models were trained in a rea-sonable amount of time (usually less than one hour). Once training is complete, making predictions on query x us-ing the resulting hypothesis h ( x | w ) requires only sorting by w T  X  ( x , d ).
 We developed our software using a Python interface 3 to SVM struct , since the Python language greatly simplified the coding process. To improve performance, it is advisable to use the standard C implementation 4 of SVM struct .
The main goal of our experiments is to evaluate whether directly optimizing MAP leads to improved MAP perfor-mance compared to conventional SVM methods that opti-mize a substitute loss such as accuracy or ROCArea. We empirically evaluate our method using two sets of TREC Web Track queries, one each from TREC 9 and TREC 10 (topics 451-500 and 501-550), both of which used the WT10g corpus. For each query, TREC provides the relevance judg-ments of the documents. We generated our features using the scores of existing retrieval functions on these queries. While our method is agnostic to the meaning of the fea-tures, we chose to use existing retrieval functions as a simple yet effective way of acquiring useful features. As such, our http://www.cs.cornell.edu/ ~ tomf/svmpython/ http://svmlight.joachims.org/svm_struct.html experiments essentially test our method X  X  ability to re-rank the highly ranked documents (e.g., re-combine the scores of the retrieval functions) to improve MAP.

We compare our method against the best retrieval func-tions trained on (henceforth base functions ), as well as against previously proposed SVM methods. Comparing with the best base functions tests our method X  X  ability to learn a use-ful combination. Comparing with previous SVM methods allows us to test whether optimizing directly for MAP (as opposed to accuracy or ROCArea) achieves a higher MAP score in practice. The rest of this section describes the base functions and the feature generation method in detail. We chose two sets of base functions for our experiments. For the first set, we generated three indices over the WT10g corpus using Indri 5 . The first index was generated using default settings, the second used Porter-stemming, and the last used Porter-stemming and Indri X  X  default stopwords.
For both TREC 9 and TREC 10, we used the descrip-tion portion of each query and scored the documents using five of Indri X  X  built-in retrieval methods, which are Cosine Similarity, TFIDF, Okapi, Language Model with Dirichlet Prior, and Language Model with Jelinek-Mercer Prior. All parameters were kept as their defaults.

We computed the scores of these five retrieval methods over the three indices, giving 15 base functions in total. For each query, we considered the scores of documents found in the union of the top 1000 documents of each base function.
For our second set of base functions, we used scores from the TREC 9 [8] and TREC 10 [9] Web Track submissions. We used only the non-manual, non-short submissions from both years. For TREC 9 and TREC 10, there were 53 and 18 such submissions, respectively. A typical submission con-tained scores of its top 1000 documents.
In order to generate input examples for our method, a concrete instantiation of  X  must be provided. For each doc-http://www.lemurproject.org Model MAP W/L MAP W/L SVM  X  map 0.242  X  0.236  X 
Best Func. 0.204 39/11 ** 0.181 37/13 ** 2nd Best 0.199 38/12 ** 0.174 43/7 ** 3rd Best 0.188 34/16 ** 0.174 38/12 ** ument d scored by a set of retrieval functions F on query x , we generate the features as a vector where f ( d | x ) denotes the score that retrieval function f as-signs to document d for query x , and each K f is a set of real values. From a high level, we are expressing the score of each retrieval function using | K f | + 1 bins.
Since we are using linear kernels, one can think of the learning problem as finding a good piecewise-constant com-bination of the scores of the retrieval functions. Figure 2 shows an example of our feature mapping method. In this example we have a single feature F = { f } . Here, K f = { a, b, c } , and the weight vector is w =  X  w a , w b , w document d and query x , we have This is expressed qualitatively in Figure 2, where w a and w are positive, and w c is negative.

We ran our main experiments using four choices of F : the set of aforementioned Indri retrieval functions for TREC 9 and TREC 10, and the Web Track submissions for TREC 9 and TREC 10. For each F and each function f  X  F , we chose 50 values for K f which are reasonably spaced and capture the sensitive region of f .

Using the four choices of F , we generated four datasets for our main experiments. Table 5 contains statistics of the generated datasets. There are many ways to generate features, and we are not advocating our method over others. This was simply an efficient means to normalize the outputs of different functions and allow for a more expressive model.
For each dataset in Table 5, we performed 50 trials. For each trial, we train on 10 randomly selected queries, and se-lect another 5 queries at random for a validation set. Mod-els were trained using a wide range of C values. The model which performed best on the validation set was selected and tested on the remaining 35 queries.

All queries were selected to be in the training, validation and test sets the same number of times. Using this setup, we performed the same experiments while using our method (SVM  X  map ), an SVM optimizing for ROCArea (SVM  X  roc ) [13], and a conventional classification SVM (SVM acc ) [20]. All SVM methods used a linear kernel. We reported the average performance of all models over the 50 trials.
In analyzing our results, the first question to answer is, can SVM  X  map learn a model which outperforms the best base Table 8: Comparison with TREC Subm. (w/o best) functions? Table 6 presents the comparison of SVM  X  map with the best Indri base functions. Each column group contains the macro-averaged MAP performance of SVM  X  map or a base function. The W/L columns show the number of queries where SVM  X  map achieved a higher MAP score. Significance tests were performed using the two-tailed Wilcoxon signed rank test. Two stars indicate a significance level of 0.95. All tables displaying our experimental results are structured identically. Here, we find that SVM  X  map significantly outper-forms the best base functions.

Table 7 shows the comparison when trained on TREC sub-missions. While achieving a higher MAP score than the best base functions, the performance difference between SVM  X  map the base functions is not significant. Given that many of these submissions use scoring functions which are carefully crafted to achieve high MAP, it is possible that the best performing submissions use techniques which subsume the techniques of the other submissions. As a result, SVM  X  map would not be able to learn a hypothesis which can signifi-cantly out-perform the best submission.

Hence, we ran the same experiments using a modified dataset where the features computed using the best submis-sion were removed. Table 8 shows the results (note that we are still comparing against the best submission though we are not using it for training). Notice that while the perfor-mance of SVM  X  map degraded slightly, the performance was still comparable with that of the best submission.
The next question to answer is, does SVM  X  map produce higher MAP scores than previous SVM methods? Tables 9 and 10 present the results of SVM  X  map , SVM  X  roc , and SVM when trained on the Indri retrieval functions and TREC sub-missions, respectively. Table 11 contains the corresponding results when trained on the TREC submissions without the best submission.

To start with, our results indicate that SVM acc was not competitive with SVM  X  map and SVM  X  roc , and at times un-derperformed dramatically. As such, we tried several ap-proaches to improve the performance of SVM acc .
One issue which may cause SVM acc to underperform is the severe imbalance between relevant and non-relevant doc-uments. The vast majority of the documents are not rele-vant. SVM acc 2 addresses this problem by assigning more penalty to false negative errors. For each dataset, the ratio of the false negative to false positive penalties is equal to the ratio of the number non-relevant and relevant documents in that dataset. Tables 9, 10 and 11 indicate that SVM acc 2 performs significantly worse than SVM  X  map .

Another possible issue is that SVM acc attempts to find just one discriminating threshold b that is query-invariant. It may be that different queries require different values of b . Having the learning method trying to find a good b value (when one does not exist) may be detrimental.

We took two approaches to address this issue. The first method, SVM acc 3 , converts the retrieval function scores into percentiles. For example, for document d , query q and re-trieval function f , if the score f ( d | q ) is in the top 90% of the scores f (  X | q ) for query q , then the converted score is f ( d | q ) = 0 . 9. Each K f contains 50 evenly spaced values between 0 and 1. Tables 9, 10 and 11 show that the perfor-mance of SVM acc 3 was also not competitive with SVM  X  map
The second method, SVM acc 4 , normalizes the scores given by f for each query. For example, assume for query q that f outputs scores in the range 0 . 2 to 0 . 7. Then for document d , if f ( d | q ) = 0 . 6, the converted score would be f spaced values between 0 and 1. Again, Tables 9, 10 and 11 show that SVM acc 4 was not competitive with SVM  X  map
SVM  X  roc performed much better than SVM acc in our ex-periments. When trained on Indri retrieval functions (see Table 9), the performance of SVM  X  roc was slight, though not significantly, worse than the performances of SVM  X  map However, Table 10 shows that SVM  X  map did significantly out-perform SVM  X  roc when trained on the TREC submissions.
Table 11 shows the performance of the models when trained on the TREC submissions with the best submission removed. The performance of most models degraded by a small amount, with SVM  X  map still having the best performance.
Table 11: Trained on TREC Subm. (w/o Best)
We have presented an SVM method that directly opti-mizes MAP. It provides a principled approach and avoids difficult to control heuristics. We formulated the optimiza-tion problem and presented an algorithm which provably finds the solution in polynomial time. We have shown em-pirically that our method is generally superior to or com-petitive with conventional SVMs methods.

Our new method makes it conceptually just as easy to optimize SVMs for MAP as was previously possible only for Accuracy and ROCArea. The computational cost for training is very reasonable in practice. Since other methods typically require tuning multiple heuristics, we also expect to train fewer models before finding one which achieves good performance.

The learning framework used by our method is fairly gen-eral. A natural extension of this framework would be to develop methods to optimize for other important IR mea-sures, such as Normalized Discounted Cumulative Gain [2, 3, 4, 12] and Mean Reciprocal Rank. This work was funded under NSF Award IIS-0412894, NSF CAREER Award 0237381, and a gift from Yahoo! Re-search. The third author was also partly supported by a Microsoft Research Fellowship. [1] B. T. Bartell, G. W. Cottrell, and R. K. Belew. [2] C. Burges, T. Shaked, E. Renshaw, A. Lazier, [3] C. J. C. Burges, R. Ragno, and Q. Le. Learning to [4] Y. Cao, J. Xu, T.-Y. Liu, H. Li, Y. Huang, and H.-W. [5] B. Carterette and D. Petkova. Learning a ranking [6] R. Caruana, A. Niculescu-Mizil, G. Crew, and [7] J. Davis and M. Goadrich. The relationship between [8] D. Hawking. Overview of the TREC-9 web track. In [9] D. Hawking and N. Craswell. Overview of the [10] R. Herbrich, T. Graepel, and K. Obermayer. Large [11] A. Herschtal and B. Raskutti. Optimising area under [12] K. Jarvelin and J. Kekalainen. Ir evaluation methods [13] T. Joachims. A support vector method for [14] J. Lafferty and C. Zhai. Document language models, [15] Y. Lin, Y. Lee, and G. Wahba. Support vector [16] D. Metzler and W. B. Croft. A markov random field [17] K. Morik, P. Brockhausen, and T. Joachims.
 [18] S. Robertson. The probability ranking principle in ir. [19] I. Tsochantaridis, T. Hofmann, T. Joachims, and [20] V. Vapnik. Statistical Learning Theory . Wiley and [21] L. Yan, R. Dodier, M. Mozer, and R. Wolniewicz.
