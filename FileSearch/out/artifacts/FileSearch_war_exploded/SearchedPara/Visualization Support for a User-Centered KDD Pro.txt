
Viewing knowledge discovery as a user-centered process that requires an effective collaboration between the user and the discovery system, our work aims to support an active role of the user in that process by developing synergistic visualization tools integrated in our discovery system D2MS. These tools provide an ability of visualizing the entire process of knowledge discovery in order to help the user with data preprocessing, selecting mining algorithms and parameters, evaluating and comparing discovered models, and taking control of the whole discover process. Our case-studies with two medical datasets on meningitis and stomach cancer show that, with visualization tools in D2MS, the user gains better insight in each step of the knowledge discovery process as well the relationship between data and discovered knowledge. model selection, knowledge discovery process, knowledge visualization, the user's active role. 
The process of knowledge discovery in databases (KDD) can be viewed inherently consists of five steps: (1) understanding the application domain, (2) data preprocessing, (3) data mining, (4) post-processing, and (5) applying discovered knowledge, where each step requires many decisions being made by the user [10]. 
To find implicit but potentially useful patterns/models from large databases, one cannot expect just to push a large amount of data into a KDD system without the user's participation. In other words, the KDD process can be alternatively viewed as a process of model selection, i.e., that of choosing by the user the most interesting discovered patterns/models or algorithms and their settings for obtaining such patterns/models in a given application. 
Model selection in KDD is a complicated human-centered and domain-centered process in which the participation of the user plays a key role to the success. Visualization has proven its effectiveness in exploratory data not made or distributed for profit or commercial advantage and that requires prior specific permission and/or a fee. SIGKDD "02, July 23-26, 2002, Edmonton, Alberta, Canada. 
Copyright 2002 ACM 1-58113-567-X/02/0007...$5.00. The key idea of our solution to model selection in D2MS is to support an effective participation of the user in this process. Concretely, D2MS first supports the user in doing trials on combinations of algorithms and their parameter settings in order to produce competing models, and then it supports the user in evaluating them quantitatively and qualitatively by providing both perforrnanee metrics values as well as visualization of these models (Figure 2). The model selection in D2MS mainly involves with three steps of data pre-processing, data mining, and post-processing as shown in Figure 1. There are three phases in doing model selection in D2MS, and all are managed by the plan management module: (i) registering plans of selected algorithms and their settings; (ii) executing the plans to discover models; (iii) selecting appropriate models by a comparative evaluation of competing models. These phases can be done interactively in all three steps of the KDD process. The first phase is to register plans. A plan is an ordered list of algorithms associated with their parameter settings that can yield a model or an intermediate result when being executed. The plans are represented in a tree form called plan tree whose nodes are selected algorithms associated with their settings (the top-left window in Figure 3). The nodes on a path of the plan tree must follow the order of preprocessing, data mining, and postprocessing. A plan may contain several algorithms (nodes) of the preprocessing and postprocessing steps, for example filling missing values by natural cluster-based mean-and-mode then discretizing continuous attributes by entropy-based algorithm in preprocessing. A plan can be edited in D2MS during the KDD process. The second phase is to execute registered plans. While registering gradually a plan the user can run an algorithm just after adding it to the plan, then evaluate its results before deciding whether to continue this plan from its current stage with other algorithms, or to backtrack and try the plan with another algorithm or setting. The user also can run a plan after fully registering it, or even register a number of plans then run them altogether. The intermediate results, the discovered models and their summaries and exported forms will be automatically created and stored in the model base. The third phase is to select appropriate models by the user. D2MS provides a summary table presenting performance metrics of discovered models according to executed plans (the bottom-right window in Figure 3). However, the user can evaluate each model in deep by visualizing it, browsing its slructure, checking its relationship with the dataset, etc. (the top-middle and top-right windows in Figure 3) The user can also visualize several models simultaneously for comparing them. By getting insights into competing models, the user certainly can make a better selection of models. The plan manager allows the user to create, edit, and manager plans with the help of the plan visualizer. In Figure 3, the plan visualizer displays a plan tree in the top-left window. A plan tree is displayed in the form of a tree, where each node represents a dataset, a model, or an algorithm. If the user double clicks on a data or model node, the data or model visualization will be Figure 3: A screen shot of D2MS in selecting models learned from Wisconsin breast cancer data. The top-left window shows the plan tree; the top-middle window shows a tightly-coupled view of a decision tree learned by CABRO; the top-right window shows a rule set learned by LUPC; the bottom-left window for displaying intermediate computation results, and the bottom-right window shows the summary table of performance metrics of discovered models. This view serves the hypothesis generation and hypothesis testing by the user. It allows the user to view subsets of the dataset determined by queries. There are three types of queries: (i) based on a value of the class attribute where the query determines the subset of all instances belonging to the indicated class; (ii) based on a value of a descriptive attribute where the query determines the subset of all instances having this value, (iii) based on a conjunction of attribute-values pairs where the query determines the subset of all instances satisfied this conjunction. The queries can be determined by just using point-and-click. The subset of instances matched the query is visualized in viewing data mode and in summarizing data mode. The gray regions on each axis show the proportions of specified instances on values of this attribute as shown in bottom-right window in Figure 4). A rule is a pattern related to several attribute-values and a subset of instances. The importance in visualizing a rule is how this local structure is viewed in its relation to the whole dataset, and how the view supports the user's evaluation on the rule interestingness. D2MS's rule visualizer allows the user to visualize rules in the form antecedent ~ consequent where antecedent is a conjunction of attribute-value pairs, consequent is a conjunction of attribute-value pairs in case of association rules, and is a value of the class attribute in case of prediction rules. A rule is simply displayed by a subset of parallel coordinates included in antecedent and consequent. The D2MS's rule visualizer has the following fimctions: 3.2.1 Fiewing rules Each rule is displayed by polyline that goes through the axes containing attribute-values occurred on the antecedent part of the rule leading to the consequent part of the rule that are displayed with different color. In the case of prediction rules, the ratio associated with each class in the class attribute corresponds to the 
T2.5D is inspired by the work of Reingold and Tilford [13] that draws tidy trees in a reasonable time and storage. Different from tightly-coupled and fish-eye views that can be seen as location-based views (view of objects in a region), T2.5D can be seen as a relation-based view (view of related objects). The starting point of 
T2.5D is the observation that a large tree consists many subtrees that are not usually and necessarily viewed simultaneously. The key idea of T2.5D is to represent a large tree in a virtual 3D space (subtrees are overlapped to reduce occupied space) while each subtree of interest is displayed in a 2D space. To this end, T2.5D determines the fixed position of each subtree (its root node) in two axes X and Y, and in addition, it computes dynamically a Z-order for this subtree in an imaginary axis Z. A subtree with a given Z-order is displayed "'above" its siblings those have higher Z-orders. 
When visualizing and navigating a tree, at each moment the Z-order of all nodes on the path from the root to a node in focus in the tree is set to zero by T2.SD. The active widepath to a node in focus, which contains all nodes on the path from the root to this node in focus and their siblings, is displayed in the front of the screen with highlighted colors to give the user a clear view. Other parts of the tree remain in the background to provide an image of the overall structure. With Z-order, T2.5D can give the user an impression that trees are drawn in a 3D space. The user can easily change the active wide path by choosing another node in focus [12]. 
We have experimented T2.5D with various real and artificial datasets. It has been verified that T2.5D can handle well trees with more than 20,000 nodes,' and more than 1,000 nodes can be displayed together on the screen [12]. Figure 7 illustrates a pruned tree of 1795 nodes learned from stomach cancer data and drawn by T2.5D (note that the original screen with colors gives a better view than this black-white screen). 
Figure 4: Rule visualization in D2MS, top-left window shows the list of discovered rules, the middle-left and the top-right windows show a rule under inspection, and bottom window displays the instances covered by that rule. and accuracy of the rule. For example, two rules predicting a target class has the same support and confidence but the one wrongly covered more instances belonging to classes different from the target class would be considered worse. 
Figure 4 illustrates rule visualization in D2MS where the top-left and bottom left windows display a discovered rule, and the top-right and bottom right windows show the instances covered by that rule. 
Three main criteria for selecting hierarchical models are their size, accuracy and understandability. The tree size and accuracy can be quantitatively evaluated, among them the accuracy is widely considered to be of great importance. The understandability of trees is difficult to be quantified or measured, and the idea here is to use tree visualizer to support the understanding of users. 
In the current version of CABRO in D2MS, the user can generate new models each is composed by an attribute selection measure chosen from the gain-ratio, the gini-index [1], Z2 and R-measure; a pruning technique from error-complexity, reduced-error and pessimistic error [1]; and a discretization technique from the entropy-based and error-based techniques. 
For each model candidate, D2MS tree visualizer displays graphically the corresponding pruned tree, its size, and its prediction error rate. It offers the user a multiple view of these make his/her final selection of techniques/models of interest. 
D2MS tree visualizer is used not only in inducing decision trees but also in classifying unknown objects. It plays the role of the interface for visual explanation of the matching process, in a way similar to the explanation in knowledge-based systems. D2MS tree visualizer supports three modes of matching an unknown object according to the way that the unknown object is declared.  X  The whole record of the unknown object is read from a database: D2MS directly show the leaf node that matches the highlighted. Information accumulated along the path can be  X  Values of attributes are given by the user when answering  X  The user declares values of attributes he/she knows: The user 
This section illustrates the utility of synergistic visualization of data and knowledge of D2MS in extracting knowledge from a stomach cancer dataset. Figure 6: Visualization of data suggested rare events to be investigated. not useful by domain experts. Also, these discovered rules usually cover only a subset of patients of this class. This low coverage means that there are patients of the class who are not included in "liver metastasis" and, therefore, it is difficult to detect them. Using visual interactive LUPC, we ran different trials and specified parameters and constraints to find only rules that do not contain the attribute "liver_metastasis" and/or its combination with two other typical attributes, "Peritonealmetastasis" and "Serosal_invasion?' Below is a rule with accuracy 100% discovered by LUPC that can be seen as a rare and irregular event in the target class. Rule 8 [accuracy = 1.0 (4/4), cover = 0.001 (416712) ] IF category = R AND sex = F AND proximal3.hird = 3 THEN class = death within 90 days REFERENCES [1] Breiman, L., Friedman, J., Olshen, R., and Stone, C., [2] Card, S. K., Mackinlay, J. D., Shneiderman, B., Readings in [3] Fayyad, U.M., Grinstein. G.G., and Wierse, A., Information [4] Furnas, G.W., "The FISHEYE View: A New Look at [5] Han, J. and Cercone, N., "RuleViz: A Model for Visualizing [6] Ho, T.B., Nguyen, D.D., and Kawasaki, S., "Mining [7] Kumar, H. P., Plaisant, C., Shneiderman, B., "Browsing 
