 We consider the semantic parsing problem of map-ping natural language utterances into logical forms to be executed on a knowledge base (KB) (Zelle and Mooney, 1996; Zettlemoyer and Collins, 2005; Wong and Mooney, 2007; Kwiatkowski et al., 2010). Scaling semantic parsers to large knowledge bases has attracted substantial atten-tion recently (Cai and Yates, 2013; Berant et al., 2013; Kwiatkowski et al., 2013), since it drives applications such as question answering (QA) and information extraction (IE).

Semantic parsers need to somehow associate natural language phrases with logical predicates, e.g., they must learn that the constructions  X  X hat does X do for a living? X  ,  X  X hat is X X  X  profes-sion? X  , and  X  X ho is X? X  , should all map to the logical predicate Profession . To learn these map-pings, traditional semantic parsers use data which pairs natural language with the KB. However, this leaves untapped a vast amount of text not related to the KB. For instance, the utterances  X  X here is ACL in 2014? X  and  X  X hat is the location of ACL 2014? X  cannot be used in traditional semantic parsing methods, since the KB does not contain an entity ACL2014 , but this pair clearly contains valuable linguistic information. As another refer-ence point, out of 500,000 relations extracted by the ReVerb Open IE system (Fader et al., 2011), only about 10,000 can be aligned to Freebase (Be-rant et al., 2013).

In this paper, we present a novel approach for semantic parsing based on paraphrasing that can exploit large amounts of text not covered by the KB (Figure 1). Our approach targets factoid ques-tions with a modest amount of compositionality. Given an input utterance, we first use a simple de-terministic procedure to construct a manageable set of candidate logical forms (ideally, we would generate canonical utterances for all possible logi-cal forms, but this is intractable). Next, we heuris-tically generate canonical utterances for each log-ical form based on the text descriptions of predi-cates from the KB. Finally, we choose the canoni-cal utterance that best paraphrases the input utter-ance, and thereby the logical form that generated it. We use two complementary paraphrase mod-els: an association model based on aligned phrase pairs extracted from a monolingual parallel cor-pus, and a vector space model , which represents each utterance as a vector and learns a similarity score between them. The entire system is trained jointly from question-answer pairs only.

Our work relates to recent lines of research in semantic parsing and question answering. Kwiatkowski et al. (2013) first maps utterances to a domain-independent intermediate logical form , and then performs ontology matching to produce the final logical form. In some sense, we ap-proach the problem from the opposite end, using an intermediate utterance , which allows us to em-ploy paraphrasing methods (Figure 2). Fader et al. (2013) presented a QA system that maps ques-tions onto simple queries against Open IE extrac-tions, by learning paraphrases from a large mono-lingual parallel corpus, and performing a single paraphrasing step. We adopt the idea of using paraphrasing for QA, but suggest a more general paraphrase model and work against a formal KB (Freebase).
 We apply our semantic parser on two datasets: W
EB Q UESTIONS (Berant et al., 2013), which contains 5,810 question-answer pairs with common questions asked by web users; and F
REE 917 (Cai and Yates, 2013), which has 917 questions manually authored by annota-tors. On W EB Q UESTIONS , we obtain a relative improvement of 12% in accuracy over the state-of-the-art, and on F REE 917 we match the current best performing system. The source code of our system P ARA S EMPRE is released at http://www-nlp.stanford.edu/ software/sempre/ . Our task is as follows: Given (i) a knowledge base K , and (ii) a training set of question-answer pairs { ( x i ,y i ) } n i =1 , output a semantic parser that maps new questions x to answers y via latent log-ical forms z . Let E denote a set of entities (e.g., BillGates ), and let P denote a set of properties (e.g., PlaceOfBirth ). A knowledge base K is a set of assertions ( e 1 ,p,e 2 )  X  E  X  P  X  E (e.g., ( the Freebase KB (Google, 2013), which has 41M entities, 19K properties, and 596M assertions.
To query the KB, we use a logical language called simple  X  -DCS . In simple  X  -DCS, an entity (e.g., Seattle ) is a unary predicate (i.e., a subset of E ) denoting a singleton set containing that entity. A property (which is a binary predicate) can be joined with a unary predicate; e.g., Founded.Microsoft denotes the entities that are Microsoft founders. In an intersection operator allows us to denote the set of Seattle-born Microsoft founders. A reverse operator reverses the order of ar-denotes Bill Gates X  X  birthplace (in con-ity, in this case, the number of Microsoft founders. The denotation of a logical form z with respect to a KB K is given by J z K of simple  X  -DCS, see Liang (2013) and Berant et al. (2013). We now present the general framework for seman-tic parsing via paraphrasing, including the model and the learning algorithm. In Sections 4 and 5, we provide the details of our implementation. Canonical utterance construction Given an ut-terance x and the KB, we construct a set of candi-date logical forms Z x , and then for each z  X  Z x generate a small set of canonical natural language utterances C z . Our goal at this point is only to gen-erate a manageable set of logical forms containing the correct one, and then generate an appropriate canonical utterance from it. This strategy is feasi-ble in factoid QA where compositionality is low, and so the size of Z x is limited (Section 4). Paraphrasing We score the canonical utter-ances in C z with respect to the input utterance x using a paraphrase model, which offers two ad-vantages. First, the paraphrase model is decoupled from the KB, so we can train it from large text cor-pora. Second, natural language utterances often do not express predicates explicitly, e.g., the question  X  X hat is Italy X  X  money? X  expresses the binary predicate CurrencyOf with a possessive construc-tion. Paraphrasing methods are well-suited for handling such text-to-text gaps. Our framework accommodates any paraphrasing method, and in this paper we propose an association model that learns to associate natural language phrases that co-occur frequently in a monolingual parallel cor-pus, combined with a vector space model , which learns to score the similarity between vector rep-resentations of natural language utterances (Sec-tion 5).
 Model We define a discriminative log-linear model that places a probability distribution over pairs of logical forms and canonical utterances ( c,z ) , given an utterance x : p ( c,z | x ) = where  X   X  R b is the vector of parameters to be learned, and  X  ( x,c,z ) is a feature vector extracted from the input utterance x , the canonical utterance c , and the logical form z . Note that the candidate set of logical forms Z x and canonical utterances C x are constructed during the canonical utterance construction phase.

The model score decomposes into two terms:  X  ( x,c,z ) &gt;  X  =  X  pr ( x,c ) &gt;  X  pr +  X  lf ( x,z ) where the parameters  X  pr define the paraphrase model (Section 5), which is based on features ex-tracted from text only (the input and canonical ut-terance). The parameters  X  lf correspond to seman-tic parsing features based on the logical form and input utterance, and are briefly described in this section.

Many existing paraphrase models introduce la-tent variables to describe the derivation of c from x , e.g., with transformations (Heilman and Smith, 2010; Stern and Dagan, 2011) or alignments (Haghighi et al., 2005; Das and Smith, 2009; Chang et al., 2010). However, we opt for a sim-pler paraphrase model without latent variables in the interest of efficiency.
 Logical form features The parameters  X  lf corre-spond to the following features adopted from Be-rant et al. (2013). For a logical form z , we extract the size of its denotation J z K nary predicates in z as features. Moreover, we ex-tract a popularity feature for predicates based on the number of instances they have in K . For Free-base entities, we extract a popularity feature based on the entity frequency in an entity linked subset of Reverb (Lin et al., 2012). Lastly, Freebase for-mulas have types (see Section 4), and we conjoin the type of z with the first word of x , to capture the correlation between a word (e.g.,  X  X here X  ) with the Freebase type (e.g., Location ).
 Learning As our training data consists of question-answer pairs ( x i ,y i ) , we maximize the log-likelihood of the correct answer. The proba-bility of an answer y is obtained by marginaliz-ing over canonical utterances c and logical forms z whose denotation is y . Formally, our objective function O (  X  ) is as follows: The strength  X  of the L 1 regularizer is set based on cross-validation. We optimize the objective by initializing the parameters  X  to zero and running AdaGrad (Duchi et al., 2010). We approximate the set of pairs of logical forms and canonical ut-terances with a beam of size 2,000. We construct canonical utterances in two steps. Given an input utterance x , we first construct a set of logical forms Z x , and then generate canon-ical utterances from each z  X  Z x . Both steps are performed with a small and simple set of deter-ministic rules, which suffices for our datasets, as they consist of factoid questions with a modest amount of compositional structure. We describe these rules below for completeness. Due to its so-porific effect though, we advise the reader to skim it quickly.
 Candidate logical forms We consider logical forms defined by a set of templates, summarized in Table 1. The basic template is a join of a bi-nary and an entity, where a binary can either be one property p.e (#1 in the table) or two proper-ties p 1 .p 2 .e (#2). To handle cases of events in-volving multiple arguments (e.g.,  X  X ho did Brad Pitt play in Troy? X  ), we introduce the template p. ( p 1 .e 1 u p 2 .e 2 ) (#3), where the main event is modified by more than one entity. Logical forms can be further modified by a unary  X  X ilter X , e.g., the answer to  X  X hat composers spoke French? X  is a set of composers, i.e., a subset of all people (#4). Lastly, we handle aggregation formulas for utterances such as  X  X ow many teams are in the NCAA? X  (#5).

To construct candidate logical forms Z x for a given utterance x , our strategy is to find an en-tity in x and grow the logical form from that en-tity. As we show later, this procedure actually pro-duces a set with better coverage than construct-ing logical forms recursively from spans of x , as is done in traditional semantic parsing. Specifi-cally, for every span of x , we take at most 10 en-tities whose Freebase descriptions approximately match the span. Then, we join each entity e with all type-compatible 1 binaries b , and add these log-ical forms to Z x (#1 and #2).

To construct logical forms with multiple en-tities (#3) we do the following: For any logical form z = p.p 1 .e 1 , where p 1 has type signa-ture ( t 1 ,  X  ) , we look for other entities e 2 that were matched in x . Then, we add the logical form p. ( p 1 .e 1 u p 2 .e 2 ) , if there exists a binary p 2 with a compatible type signature ( t 1 ,t 2 ) , where t 2 is one of e 2  X  X  types. For example, for if we match the entity Troy in x , we obtain We further modify logical forms by intersecting with a unary filter (#4): given a formula z with some Freebase type (e.g., People ), we look at all Freebase sub-types t (e.g., Composer ), and check whether one of their Freebase descriptions (e.g.,  X  X omposer X  ) appears in x . If so, we add the formula Type .t u z to Z x . Finally, we check whether x is an aggregation formula by identifying whether it starts with phrases such as  X  X ow many X  or  X  X umber of  X  (#5).

On W EB Q UESTIONS , this results in 645 for-mulas per utterance on average. Clearly, we can increase the expressivity of this step by expand-ing the template set. For example, we could han-dle superlative utterances (  X  X hat NBA player is tallest? X  ) by adding a template with an argmax operator.
 Utterance generation While mapping general language utterances to logical forms is hard, we observe that it is much easier to generate a canoni-cal natural language utterances of our choice given a logical form. Table 2 summarizes the rules used to generate canonical utterances from the template p.e . Questions begin with a question word, are fol-lowed by the Freebase description of the expected answer type ( d ( t ) ), and followed by Freebase de-To fill in auxiliary verbs, determiners, and prepo-sitions, we parse the description d ( p ) into one of NP, VP, PP, or NP VP. This determines the gen-eration rule to be used.

Each Freebase property p has an explicit prop-erty p 0 equivalent to the reverse R [ p ] (e.g., ContainedBy and R [ Contains ] ). For each logical form z , we also generate using equivalent logical forms where p is replaced with R [ p 0 ] . Reversed formulas have different generation rules, since en-tities in these formulas are in the subject position rather than object position.

We generate the description d ( t ) from the Free-base description of the type of z (this handles #4). For the template p 1 .p 2 .e (#2), we have a similar set of rules, which depends on the syntax of d ( p 1 ) and d ( p 2 ) and is omitted for brevity. The tem-plate p. ( p 1 .e 1 u p 2 .e 2 ) (#3) is generated by ap-pending the prepositional phrase in d ( e 2 ) , e.g,  X  X hat character is the character of Brad Pitt in Troy? X  . Lastly, we choose the question phrase  X  X ow many X  for aggregation formulas (#5), and  X  X hat X  for all other formulas.

We also generate canonical utterances using an alignment lexicon, released by Berant et al. (2013), which maps text phrases to Freebase bi-nary predicates. For a binary predicate b mapped from text phrase d ( b ) , we generate the utterance WH d ( t ) d ( b ) d ( e ) ? . On the W EB Q UESTIONS dataset, we generate an average of 1,423 canonical utterances c per input utterance x . In Section 6, we show that an even simpler method of gener-ating canonical utterances by concatenating Free-base descriptions hurts accuracy by only a modest amount. Once the candidate set of logical forms paired with canonical utterances is constructed, our problem is reduced to scoring pairs ( c,z ) based on a para-phrase model. The NLP paraphrase literature is vast and ranges from simple methods employing surface features (Wan et al., 2006), through vec-tor space models (Socher et al., 2011), to latent variable models (Das and Smith, 2009; Wang and Manning, 2010; Stern and Dagan, 2011).

In this paper, we focus on two paraphrase mod-els that emphasize simplicity and efficiency. This is important since for each question-answer pair, we consider thousands of canonical utterances as potential paraphrases. In contrast, traditional para-phrase detection (Dolan et al., 2004) and Recog-nizing Textual Entailment (RTE) tasks (Dagan et al., 2013) consider examples consisting of only a single pair of candidate paraphrases.

Our paraphrase model decomposes into an as-sociation model and a vector space model : 5.1 Association model The goal of the association model is to deter-mine whether x and c contain phrases that are likely to be paraphrases. Given an utterance x =  X  x 0 ,x 1 ,..,x n  X  1  X  , we denote by x i : j the span from token i to token j . For each pair of utterances ( x,c ) , we go through all spans of x and c and identify a set of pairs of potential paraphrases ( x i : j ,c i 0 : j 0 ) , which we call associations . (We will describe how associations are identified shortly.) We then define features on each association; the weighted combination of these features yields a score. In this light, associations can be viewed as soft paraphrase rules. Figure 3 presents exam-ples of associations extracted from a paraphrase pair and visualizes the learned scores. We can see that our model learns a positive score for associ-ating  X  X ype X  with  X  X enres X  , and a negative score for associating  X  X s X  with  X  X lay X  .

We define associations in x and c primarily by looking up phrase pairs in a phrase table con-structed using the P ARALEX corpus (Fader et al., 2013). P ARALEX is a large monolingual parallel corpora, containing 18 million pairs of question paraphrases from wikianswers.com , which were tagged as having the same meaning by users. P
ARALEX is suitable for our needs since it fo-cuses on question paraphrases. For example, the phrase  X  X o for a living X  occurs mostly in ques-tions, and we can extract associations for this phrase from P ARALEX . Paraphrase pairs in P AR -ALEX are word-aligned using standard machine translation methods. We use the word alignments to construct a phrase table by applying the con-sistent phrase pair heuristic (Och and Ney, 2004) to all 5-grams. This results in a phrase table with approximately 1.3 million phrase pairs. We let A denote this set of mined candidate associations.
For a pair ( x,c ) , we also consider as candidate associations the set B (represented implicitly), which contains token pairs ( x i ,c i 0 ) such that x and c i 0 share the same lemma, the same POS tag, or are linked through a derivation link on WordNet (Fellbaum, 1998). This allows us to learn para-phrases for words that appear in our datasets but are not covered by the phrase table, and to han-dle nominalizations for phrase pairs such as  X  X ho designed the game of life? X  and  X  X hat game de-signer is the designer of the game of life? X  .
Our model goes over all possible spans of x and c and constructs all possible associations from A and B . This results in many poor associations (e.g.,  X  X lay X  and  X  X he X  ), but as illustrated in Fig-ure 3, we learn weights that discriminate good from bad associations. Table 3 specifies the full set of features. Note that unlike standard para-phrase detection and RTE systems, we use lexi-calized features, firing approximately 400,000 fea-tures on W EB Q UESTIONS . By extracting POS features, we obtain soft syntactic rules, e.g., the feature  X  JJ N  X  N  X  indicates that omitting ad-jectives before nouns is possible. Once associa-tions are constructed, we mark tokens in x and c that were not part of any association, and extract deletion features for their lemmas and POS tags. Thus, we learn that deleting pronouns is accept-able, while deleting nouns is not.

To summarize, the association model links phrases of two utterances in multiple overlapping ways. During training, the model learns which associations are characteristic of paraphrases and which are not. 5.2 Vector space model The association model relies on having a good set of candidate associations, but mining associations suffers from coverage issues. We now introduce a vector space (VS) model, which assigns a vec-tor representation for each utterance, and learns a scoring function that ranks paraphrase candidates.
We start by constructing vector representations of words. We run the WORD 2 VEC tool (Mikolov et al., 2013) on lower-cased Wikipedia text (1.59 bil-lion tokens), using the CBOW model with a win-dow of 5 and hierarchical softmax. We also ex-periment with publicly released word embeddings (Huang et al., 2012), which were trained using both local and global context. Both result in k -dimensional vectors ( k = 50 ). Next, we construct a vector v x  X  R k for each utterance x by simply averaging the vectors of all content words (nouns, verbs, and adjectives) in x .

We can now estimate a paraphrase score for two utterances x and c via a weighted combination of the components of the vector representations: of our earlier notation, we have  X  vs = vec ( W ) and  X  trix into a vector. In Section 6, we experiment with W equal to the identity matrix, constraining W to be diagonal, and learning a full W matrix.

The VS model can identify correct paraphrases in cases where it is hard to directly associate phrases from x and c . For example, the answer to  X  X here is made Kia car? X  (from W EB Q UES -TIONS ), is given by the canonical utterance  X  X hat city is Kia motors a headquarters of? X  . The as-sociation model does not associate  X  X ade X  and  X  X eadquarters X  , but the VS model is able to de-termine that these utterances are semantically re-lated. In other cases, the VS model cannot distin-guish correct paraphrases from incorrect ones. For example, the association model identifies that the paraphrase for  X  X hat type of music did Richard Wagner Play? X  is  X  X hat is the musical genres of Richard Wagner? X  , by relating phrases such as  X  X ype of music X  and  X  X usical genres X  . The VS model ranks the canonical utterance  X  X hat com-position has Richard Wagner as lyricist? X  higher, as this utterance is also in the music domain. Thus, we combine the two models to benefit from their complementary nature.

In summary, while the association model aligns particular phrases to one another, the vector space model provides a soft vector-based representation for utterances. In this section, we evaluate our system on W E -
Q UESTIONS and F REE 917. After describing the setup (Section 6.1), we present our main empirical results and analyze the components of the system (Section 6.2). 6.1 Setup We use the W EB Q UESTIONS dataset (Berant et al., 2013), which contains 5,810 question-answer pairs. This dataset was created by crawling questions through the Google Suggest API, and then obtaining answers using Amazon Mechani-cal Turk. We use the original train-test split, and divide the training set into 3 random 80% X 20% splits for development. This dataset is character-ized by questions that are commonly asked on the web (and are not necessarily grammatical), such as  X  X hat character did Natalie Portman play in Star Wars? X  and  X  X hat kind of money to take to Bahamas? X  .

The F REE 917 dataset contains 917 questions, authored by two annotators and annotated with logical forms. This dataset contains questions on rarer topics (for example,  X  X hat is the engine in a 2010 Ferrari California? X  and  X  X hat was the cover price of the X-men Issue 1? X  ), but the phrasing of questions tends to be more rigid com-pared to W EB Q UESTIONS . Table 4 provides some statistics on the two datasets. Following Cai and Yates (2013), we hold out 30% of the data for the final test, and perform 3 random 80%-20% splits of the training set for development. Since we train from question-answer pairs, we collect answers by executing the gold logical forms against Freebase.
We execute  X  -DCS queries by converting them into SPARQL and executing them against a copy of Freebase using the Virtuoso database engine. We evaluate our system with accuracy, that is, the proportion of questions we answer correctly. We run all questions through the Stanford CoreNLP pipeline (Toutanova and Manning, 2003; Finkel et al., 2005; Klein and Manning, 2003).

We tuned the L 1 regularization strength, devel-oped features, and ran analysis experiments on the development set (averaging across random splits). On W EB Q UESTIONS , without L 1 regularization, the number of non-zero features was 360K; L 1 regularization brings it down to 17K. 6.2 Results We compare our system to Cai and Yates (2013) (CY13), Berant et al. (2013) (BCFL13), and Kwiatkowski et al. (2013) (KCAZ13). For BCFL13, we obtained results using the S EMPRE tem on the datasets.

Table 5 presents results on the test set. We achieve a substantial relative improvement of 12% in accuracy on W EB Q UESTIONS , and match the best results on F REE 917. Interestingly, our system gets an oracle accuracy of 63% on W EB Q UES -TIONS compared to 48% obtained by BCFL13, where the oracle accuracy is the fraction of ques-tions for which at least one logical form in the candidate set produced by the system is correct. This demonstrates that our method for construct-ing candidate logical forms is reasonable. To fur-ther examine this, we ran BCFL13 on the devel-opment set, allowing it to use only predicates from logical forms suggested by our logical form con-struction step. This improved oracle accuracy on the development set to 64.5%, but accuracy was 32.2%. This shows that the improvement in accu-racy should not be attributed only to better logical form generation, but also to the paraphrase model.
We now perform more extensive analysis of our system X  X  components and compare it to various baselines.
 Component ablation We ablate the association model, the VS model, and the entire paraphrase model (using only logical form features). Table 5 shows that our full system obtains highest accu-racy, and that removing the association model re-sults in a much larger degradation compared to re-moving the VS model.
 Utterance generation Our system generates relatively natural utterances from logical forms us-ing simple rules based on Freebase descriptions (Section 4). We now consider simply concate-nating Freebase descriptions. For example, the would generate the utterance  X  X hat location Elvis Presley place of birth? X  . Row S IMPLE G EN in Ta-ble 6 demonstrates that we still get good results in this setup. This is expected given that our para-phrase models are not sensitive to the syntactic structure of the generated utterance.
 VS model Our system learns parameters for a full W matrix. We now examine results when learning parameters for a full matrix W , a diago-nal matrix W , and when setting W to be the iden-tity matrix. Table 6 (third section) illustrates that learning a full matrix substantially improves accu-racy. Figure 4 gives an example for a correct para-phrase pair, where the full matrix model boosts the overall model score. Note that the full ma-trix assigns a high score for the phrases  X  X fficial language X  and  X  X peak X  compared to the simpler models, but other pairs are less interpretable. Baselines We also compared our system to the following implemented baselines:  X  J ACCARD : We compute the Jaccard score  X  E DIT : We compute the token edit distance  X  WDDC06: We re-implement 13 features
Table 6 demonstrates that we improve perfor-mance over all baselines. Interestingly, J ACCARD and WDDC06 obtain reasonable performance on F REE 917 but perform much worse on W E -
Q UESTIONS . We surmise this is because ques-tions in F REE 917 were generated by annotators prompted by Freebase facts, whereas questions in W EB Q UESTIONS originated independently of Freebase. Thus, word choice in F REE 917 is of-ten close to the generated Freebase descriptions, allowing simple baselines to perform well.
 Error analysis We sampled examples from the development set to examine the main reasons P
ARA S EMPRE makes errors. We notice that in many cases the paraphrase model can be further improved. For example, P ARA S EMPRE suggests that the best paraphrase for  X  X hat company did Henry Ford work for? X  is  X  X hat written work novel by Henry Ford? X  rather than  X  X he em-ployer of Henry Ford X  , due to the exact match of the word  X  X ork X  . Another example is the question  X  X here is the Nascar hall of fame? X  , where P ARA S EMPRE suggests that  X  X hat hall of fame discipline has Nascar hall of fame as halls of fame? X  is the best canonical utterance. This is because our simple model allows to associate  X  X all of fame X  with the canonical utterance three times. Entity recognition also accounts for many errors, e.g., the entity chosen in  X  X here was the gallipoli campaign waged? X  is Galipoli and not handle temporal information, which causes errors in questions like  X  X here did Harriet Tubman live after the civil war? X  In this work, we approach the problem of seman-tic parsing from a paraphrasing viewpoint. A fundamental motivation and long standing goal of the paraphrasing and RTE communities has been to cast various semantic applications as para-phrasing/textual entailment (Dagan et al., 2013). While it has been shown that paraphrasing meth-ods are useful for question answering (Harabagiu and Hickl, 2006) and relation extraction (Romano et al., 2006), this is, to the best of our knowledge, the first paper to perform semantic parsing through paraphrasing. Our paraphrase model emphasizes simplicity and efficiency, but the framework is ag-nostic to the internals of the paraphrase method.
On the semantic parsing side, our work is most related to Kwiatkowski et al. (2013). The main challenge in semantic parsing is coping with the mismatch between language and the KB. In both Kwiatkowski et al. (2013) and this work, an inter-mediate representation is employed to handle the mismatch, but while they use a logical represen-tation, we opt for a text-based one. Our choice allows us to benefit from the parallel monolingual corpus P ARA L EX and from word vectors trained on Wikipedia. We believe that our approach is particularly suitable for scenarios such as factoid question answering, where the space of logical forms is somewhat constrained and a few gener-ation rules suffice to reduce the problem to para-phrasing.

Our work is also related to Fader et al. (2013), who presented a paraphrase-driven question an-swering system. One can view this work as a generalization of Fader et al. along three dimen-sions. First, Fader et al. use a KB over natu-ral language extractions rather than a formal KB and so querying the KB does not require a gener-ation step  X  they paraphrase questions to KB en-tries directly. Second, they suggest a particular paraphrasing method that maps a test question to a question for which the answer is already known in a single step. We propose a general paraphrasing framework and instantiate it with two paraphrase models. Lastly, Fader et al. handle queries with only one property and entity whereas we general-ize to more types of logical forms.

Since our generated questions are passed to a paraphrase model, we took a very simple ap-proach, mostly ensuring that we preserved the se-mantics of the utterance without striving for the most fluent realization. Research on generation (Dale et al., 2003; Reiter et al., 2005; Turner et al., 2009; Piwek and Boyer, 2012) typically fo-cuses on generating natural utterances for human consumption, where fluency is important.

In conclusion, the main contribution of this pa-per is a novel approach for semantic parsing based on a simple generation procedure and a paraphrase model. We achieve state-of-the-art results on two recently released datasets. We believe that our ap-proach opens a window of opportunity for learn-ing semantic parsers from raw text not necessarily related to the target KB. With more sophisticated generation and paraphrase, we hope to tackle com-positionally richer utterances.
 We thank Kai Sheng Tai for performing the er-ror analysis. Stanford University gratefully ac-knowledges the support of the Defense Advanced Research Projects Agency (DARPA) Deep Ex-ploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract no. FA8750-13-2-0040. Any opinions, findings, and conclusion or recommendations ex-pressed in this material are those of the authors and do not necessarily reflect the view of the DARPA, AFRL, or the US government. The second author is supported by a Google Faculty Research Award.
