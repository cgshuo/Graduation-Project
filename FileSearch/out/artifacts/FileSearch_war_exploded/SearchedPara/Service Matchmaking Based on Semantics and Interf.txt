 Web service technologies provide a new way for business enterprises to communicate with their partners and customers. The number of services presented on the open Internet is growing at an explosive speed, which subsequently brings great challenges Much work aspires to solve this challenge. Among those efforts, SWS (Semantic Web Service) is regarded as the most promising technology to retrieve services in an accu-rate and automatic way. Relying on related languages and inference engines, it aims at providing machine understandable descriptions of what services do and how they achieve their goals [1]. Based on it, many service matchmaking algorithms are pro-posed [2-6]. 
However, most of the service matchmaking algorithms are based on the presuppo-words, it is imperative for service consumers to provide all the inputs of the service in order to get even one output of the service. This requirement leads to some unwanted situations. If those algorithms are used, some deserved target services are not returned service request, even other information is the same. Consider such a matchmaking target service for R . 
The presupposition is accepted by the existing service matchmaking algorithms be-cause the current service specification languages, such as WSDL and OWL-S, do not provide such a mechanism to depict and publish interface dependency information inside a service. We argue that interface dependencies should be added to the current service specifications and a good service matchmaking algorithm should take the interface dependencies into consideration. 
The remainder of this paper is organized as follows. First, a formal service model matchmaking algorithm is presented in Section 3. After that, its implementation in our service composition framework -DartFlow is described in Section 4. The major re-lated work and their comparison with the proposed algorithm are discussed in Section 5. Finally, Section 6 concludes this paper. Definition 1. A service is a 9-tuple: (, , , ,, , ,, ) SIOpe  X   X  X  X   X  = where: (1)  X  is a service name. (2)  X  depicts some general information about the service in natural language for human reading, such as the functional description. (3)  X  is a provider description of the service, which contains information about the service provider such as the provider name and the corresponding method. (4)  X  is a category name of the service based on the taxonomies such as NAICS 1 and UNSPSC 2 . (5) 12 { , , ... , } n Iii i = is the set of inputs. vice. eI O  X  X   X  is expressed using a domain-dependent ontology class with some properties. (7) p is the precondition. (8) e is the effect. (9) :2 I O  X   X  is the dependency function from the output set to the input power set. 
For an output oO  X  ,() 2 I o  X  X  = X  , meaning that o depends on input set  X  .  X  can be regarded as an extension to OWL-S, which as the specification of SWS is an provides public information for advertisement and discovery, the process model that tells  X  X ow the service works X  in detail, and the grounding that tells  X  X ow to access the service X  [1]. The service model extends the service profile of OWL-S by providing a mechanism for service providers to depict and publish interface dependency informa-tion. The meaning of dependency between outputs and inputs is defined below. noted as oi % ) if and only if i must be provided in order to get o in the service invo-cation. dependent output. i . So o 1 ad o 2 are fully-dependent outputs and o 3 is a partially-dependent output. We represent a fully-dependent output as a dot-filled rectangle and a partially-dependent output as a fork-filled rectangle as shown in Fig.1. 
Note that a service specification based on Definition 1 is used not only for service ontology for OWL-S is illustrated in Fig. 2. Compared with the standard service pro-file ontology of OWL-S, the extended one has a new ontology classes named par-tially-dependent output. It has three properties named output , dependOnInput and dependOnInputs , respectively. rithm is an improved version of our pre-published algorithm [16], in which we present some semantic similarity definitions and computations in order to do service match-making based on semantics . In this paper, the improved version also makes use of the semantic similarity definitions and computations shown as below. 3.1 Semantic Similarity Computation Definition 4. For two ontology classes X and Y , X is semantically similar to Y (denoted as XY ) if they have one of the following four relations: tree { , } GVE = , where: Figure 3 is an example of the semantic tree. dashed dotted edges emitted from the vertex a . the path, including a and b . vertex b , ( , ) VexP a b contains all the vertexes in the path except b . 
X can provide all the properties that Y embodies, they are totally matched. If X can only partially provide the properties that Y embodies, they are partially matched. The cally similar to Y at all, while the value 1 means X is the same as Y . Note evaluation. (1) XY = : ( , ) ( , ) 1 Similarity X Y Similarity Y X == =1. ies. For example, in Fig. 3, Similarity (H, A) =1. tor of X and Y . We hypothesize that the whole information of some class can be described by its properties. Child class possesses not only its own properties, but also properties they possess. For example, in Fig. 3, Similarity (A, H) =3/6. (3) XY % : ( , ) Similarity Y X =1. 
For example, in Fig. 3, Similarity (A, I) =1. 
We hypothesize that all the properties of some class are of the same weight. If some class possesses n properties, then any one of the properties, namely X , contains 1/n information. If the class itself is a property of some class, namely Y , with m prop-defined as the above formula. For example, in Fig. 3, Similarity (I, A) =1/6. 
For example, in Fig.3, Similarity (H, B) = 1. (5) Otherwise, ( , ) ( , ) Similarity X Y Similarity Y X = =0 3.2 Service Matchmaking Based on Semantics and Interface Dependencies In general, a service request specifies its input/output requirements, optional QoS criteria and additional information such as the service category name and description matchmaking algorithms. For the purpose of simplicity, this paper discusses only the input/output requirements in a service request. Definition 10. A service request is a 2-tuple: ( , ) rr R IO = , where (1) 12 { , ,..., } rrr r m Iii i = is the set of inputs, and (2) 12 { , ,..., } rrr r n Ooo o = is the desired set of outputs. 
Note that all the elements in r I and r O can be expressed using a domain-dependent ontology class with some properties.

RIO = , the matching degree between S and R is denoted as ( , ) SR  X  , which is calculated according to the algorithm SERVICE_MATCHMAKING below. matching degree. If there are the following relations in the example: SERVICE_MATCHMAKING. The relation 12 () r oo  X  = means that within the set . SO set . r R I the most similar concept to 2 i of . SI is 1 r i . The proposed formal service model and the SERVICE_MATCHMAKING algorithm have been applied in DartFlow [7], which as a sub-project of DartGrid (http://ccnt.zju.edu.cn/projects/dartgrid) [8, 9] is a framework for service composition way for TCM (Traditional Chinese Medi cine) researchers to collaborate with each other in research activities and experiments. It offers interfaces to allow researchers to register, query, compose and execute services at the semantic level. 
So far we have teamed up with China Academy of Chinese Medical Sciences (http://www.catcm.ac.cn/) to establish the TCM domain ontology using Prot X g X  and the OWL-plug-in, which covers about 8000 class concepts and 50,000 instance con-cepts [10]. Figure 5 (A) is a snapshot of our TCM ontology in Prot X g X . Moreover, we have implemented a novel semantic-b ased grid client called Semantic Browser as shown in Fig. 5 (B), which not only sketches out a semantic view of domain-ontology for end-users but also provides a friendly interface for end-users to browse and search for different resources such as TCM services and databases. 
Based on the TCM domain ontology, we have developed a service registration services are provided by different TCM research organizations distributed in over 20 profile specifying their require ments to the portal. The portal invokes the matchmak-ing agent to retrieve target services for users. The agent has implemented the proposed SERVICE_MATCHMAKING algorithm. Figure 5 (D) illustrates the work-space for service composition. DartFlow. We select the standard UDDI and Paolucci X  X  method as reference. Here we randomly select 200 services from 6 different categories registered in DartFlow as the test set. The name of category and the number of services of each category are shown in the top two rows of Table 1. 
Totally six experiments are conducted. Each time we make three queries on the test service set to retrieve one category of service using the key-based, Paolucci X  X  and the proposed methods, respectively. From the third to fifth row in Table 1, each row re-brackets denotes the total number of services retrieved from the method in an experi-ment and the number in a pair of brackets denotes the number of target services in the total number. For example, we get 13 services in total while using the semantic-based method to retrieve symptomatology analysis (SA) services from the test set. However, rate and precision calculated from Table 1. The average recall rates for these methods are 15.5%, 59.5% and 81.5%, respectively. The average precisions are 12.9%, 70.4% and 81.1%, respectively. It shows that the semantic-based method can get better recall rate and precision than the key-based method and our method gets better results than the semantic-based method. Compared to the semantic-based method, our proposed method gains improvements of 22% and 10.7% in recall rate and precision, respec-tively. Thus we can draw a conclusion th at mining functional unit relations and con-sidering interface dependencies within services will enhance the performance of matchmaking algorithms. Service matchmaking has captured many researchers X  attraction and much work has been done [2-6]. Researchers aim at pursuing high recall rate and precision while designing their service matchmaking algorithms. Precision is the proportion of re-trieved documents that are relevant, and recall is the proportion of relevant documents two categories: keyword and semantic-based methods. As a de-facto standard registry for Web services, UDDI provides the typical keyword-based service matchmaking function based on only names, comments and service descriptions. Because the key-and precision. To address this limitation, great efforts have been made to import ser-vice semantics and non-functional attributes into UDDI and to propose alternative ways to enhance its search functions [4, 12]. 
As a result, many semantic-based service query/matchmaking algorithms appear [2, 3, 6]. Klein [2] defines a fully-typed process ontology and then proposes an ontology-based approach that employs the characteristics of process taxonomy to increase recall without sacrificing precision and computational complexity of the service re-trieval process. Paolucci [3] introduces a matc hmaking algorithm based on the service profile of DAML-S, which considers the matc hing of input/output concepts defined by the same ontology. And also his group has developed a system called DAML-S Matchmaker to augment current UDDI architecture with semantic service descrip-tions. The matchmaker improves the discovery process by allowing location of ser-vices based on their capabilities described in DAML-S. Syeda-Mahmood [6] explores the use of domain-independent and domain-specific ontologies to find matching ser-vice descriptions. The domain-independent relationships are derived using an English thesaurus after tokenization and part-of-speech tagging. 
Besides what is mentioned above, there are still many other semantic-based service matchmaking algorithms [13, 14, 15]. They will gain better recall rate and precision if they take into consideration the interface dependency information within a service. This paper proposes a novel service matchmaking algorithm to retrieve target services in an accurate, efficient and automatic way based on the extended service profile ontology of OWL-S. The main contributions of this work are (1) it is the first time to point out the presupposition accepted by the current service matchmaking algorithms and find out that it lower the recall rate and the precision of matchmaking algorithms; (2) it extends the service profile ontology of OWL-S with feasible and convenient mechanisms to describe and publish interface dependencies implied in services for matchmaking algorithms. Those mechanisms can be regarded as important supple-matchmaking algorithm. Compared with other algorithms, the proposed one takes into account the interface dependencies implied within a functional unit. The experiments carried out in DartFlow show that the proposed algorithm has both a better recall rate and precision than others. However, this work has not taken into account the QoS and other additional requirements in service requests. They also influence the matchmak-future research. This work is supported by China 973 fundamental research and development project: The research on application of semantic grid on the sharing of knowledge and service of Traditional Chinese Medicine; Intel / University Sponsored Research Program: DartGrid: Building an Information Grid for Tr aditional Chinese Medicine; and China 211 core project: Network-based Intelligence and Graphics. 
