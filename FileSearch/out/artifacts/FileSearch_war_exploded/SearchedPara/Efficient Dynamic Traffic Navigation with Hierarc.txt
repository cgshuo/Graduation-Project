 The advanced technologies, such as Global Positioning System (GPS), and the progress of wireless communication techniques, mobile computing, make it possible for a equipment installed at a reasonable price [1]. On this condition, location-based services are becoming more and more popular. Traffic navigation service, qua one of this kind of services, receives the special attention because of the closed relation with modern monitoring and broadcasting of traffic conditi ons in real time. This encourages some promising applications such as dynamic traffic navigation service. It is believed that the dynamic traffic navigation will become wide ly spread because it can provide exact useful information on driver X  X  current position, optimal path to destination, traffic congestion and so on and so forth. Yet, it is a challenge due to the highly variable traffic state and the requirement of fast, on-line computations. In research side, certain work, such as [2], uses the technique of prediction, which forecasts potential congestions and thus calculates the optimal path for each m oving object. It needs each moving object to information of each object is unrealistic, and traffic conditions are difficult to forecast (e.g. traffic jams produced by any unpredictable bursting event such as an accident). Therefore, dynamic navigation techniques can not be totally based upon prediction models. In other words, efficient dynamic navigation is a challenge due to the highly variable traffic conditions and the requirement of fast, on-line computations. 
This motivates us to design an intelligent city traffic control system, providing the user, always in a continuous fashion, the optimal path to destination considering traffic conditions. Although the optimal path finding problems is one of the most fundamental problems in transportation networks analysis [3, 4], here we will not attempt to propose an algorithm to solve another variation of path finding problems. Instead, we have adapted the most efficient Dijkstra algorithm [5] for shortest path calculating in order to answer path finding request. In this paper, we propose a novel indexing method, namely HAT, combining spatial indexing technology and pre-aggregation for traffic measures. On one hand, this spatial index is more suitable to road networks, and could support other kinds of location-based services especially on road network; on the other hand, the aggregated information stored in each hierarchy level may filter congested zones in advance. Then, based on this index structure, a notion of personal  X  X iew X  is defined. First, it improves the performances of optimal path finding by limiting search optimizes the local memory occupancy. Finally, we derive a navigation algorithm and a Dynamic Navigation System, named DyNSA , and prove, through extensive experi-ments, its efficiency and effectiveness. The paper is organized as follow: Section 2 describes, in detail, a novel road index HAT; Based on this index structure, section 3 depicts an efficient method for searching optimal path within the person  X  X iew X ; Section 4 details the architecture and experimentation of the system. Finally, summary is presented in Section 5. Navigation intensively uses the retrieval of network sections in which objects move. So, an efficient spatial index is then a key issue. A road is usually represented as a line string in a 2-dimensional space. Spatial access methods, such as R-tree, PMR Quad-tree [6] and Grid file [7], can be consequently adopted for networks X  indexing. However, R-tree indexing structure produces large overlapping MBRs (Minimum Bounding Rectangle), which makes the search inefficient Furthermore, originally tailored for indexing rectangles, applying R-tree to a network will result in large amount of dead space indexing. Although PMR Quadtree and Grid File have not the overlapping problems, the uniform geometric partition do not adapt to non-uniform road distribution in space. Since these in dices are not suitable for optimal path searching in traffic environments, to improve the efficiency of query processing, we put forward a new indexing method named Hierarchy Aggregation Tree (HAT). It is based intersection with other road except two extremities. The latter is similar to a MBR, in addition, it contains a supplement information which stores an aggregated value over it. The principal functionality of this aggregated information is to filter the regions having a high traffic density on the same hierarchy level. 2.1 Basic Idea HAT is set up based on the spatial information of roads. Unlike R-tree, HAT references, edges and nodes so that it avoids dead space. Moreover, because node MBRs do not overlap, the search is more efficient. Basically, this method is inspired from PMR Quadtree X  X  non-overlapping index, except that the space partition in HAT may be skewed and the resulting tree will be balanced. Furthermore, for each region, HAT stores additional information on traffic density at different granularity levels. As shown later, this brings a filter capability for path finding process. 2.2 Index Building HAT is constructed by partitioning the index space recursively. The space is divided according to the distribution of network segments, by an adaptive and recursive split of space in four sub-regions. When the amount of roads, namely capacity in a leaf node N region is to be partitioned into four sub-regions. The split method of HAT satisfies the following two rules: Rule 1 : Capacities in four sub-regions should almost be the same. Suppose Max is the maximum capacity and Min is the minimal capacity of four sub-regions. Then the difference between Max and Min should not exceed predefined proportion P1 , which is expressed by the following inequality: (Max-Min)  X   X  Max  X  P1  X  . Symbol  X   X  denotes the minimal integer more than the value in it. Rule 2 : The sub-regions crossed by a road should be as few as possible, namely the copies of entries for the road should be as few as possible. Suppose S is the sum of four the difference between S and C should not exceed the predefined proportion P2 , which is expressed by the following inequality: (S-C)  X   X  S  X  P2  X  .
 equal size; then no more modification is needed if the result satisfies Rule1 and Rule2 . Otherwise the partition point is adjusted. Let N be an overflowing node, and let R be its ( m edian , y median ), i.e. the median point among road coordinates in R , then, it should be adjusted to fulfil the above rules. To do so, the split axis is pushed so that it minimizes segment split, as sketched in Fig.1 and Fig.2. 
By the above method, although the partition of index space is skewed, the resulting tree is balanced and the copies of roads are reduced which save the occupancy of index and the searching efficiency. Dynamic navigation query refers to finding a path through which a user will take least method for path searching, using the available moving objects stream aggregation and HAT index. 3.1 Optimal Path Search Based on View We notice that in real world, users do not pref er detour. Thus their travel only involves parts of the whole map. Considering this, referring to the concept of  X  view  X  in relational databases, we carry out the view-based searching method. When finding the optimal which is referred to as  X  X eference area X  shown in Fig.3. The resulting path is then found from the set of those roads crossing the reference area, which are referred to as  X  X andidate roads X . 
Reference area is a logic notion. To retrieve all the candidate roads in HAT, firstly the algorithm retrieves those underlying regions contained in or intersects with the reference area. This spatial union of underlying regions is then referred to as  X  X earching area X  which is a partial view of the whole map shown in the right figure. Since HAT corresponds to the whole map, the  X  view  X  corresponds to some nodes of implementing the dynamic navigation task. In addition, with the user becoming closer and closer to the destination, the size of the view tree will surely reduce, and release memory resources. Processing on such a smaller and smaller view tree will surely enhance the efficiency. 3.2 Hierarchy Search Based on the structure of view tree, we adopt a method similar to  X  X rill-down X  process in OLAP, named  X  X ierarchy search X . The hierarchy search is a top down process that always chooses the region of better traffic conditions as the mid region to go through until it finds the resulting path. Considering a movement from S to D , the user may go through different regions along different paths. 
Actually, several cases could be distinguished. The first is when S and D belong to the same finest region, which means they are in the same leaf-node. In this case, a direct call to Dijkstra search suffices. The second case is when S and D belong to the same region, but at a higher level of the tree. We then continue to descendant nodes till S and D will appear in different sub-regions or in a leaf-node. In the other cases, when S and D belong to two different regions (denoted as R s and R d ), we should find mid regions from S to D by selecting a sub-region (denoted as R m ) providing the rough direction of R  X  R adjacent to each other, or separated by one region of the same level as shown in Fig.4. If R and R d are adjacent, the algorithm makes recursive calls to HierarchySearch , starting from their corresponding nodes. Whereas, if they are not adjacent, recursive calls will include one of the two sub-regions according to its aggregate value. For instance, in the right of Fig.4, suppose the density in R 3 is smaller, then the determined direction will be R  X  R
Notice that the path from one region R s to an adjacent region R d will necessarily pass through a road that crosses their frontier. Suppose r 1 , ..., r m are m such roads spanning R r ( r among every pathi as the final optimal path from S to D . 4.1 The Architecture of DyNSA System Adopting the aforementioned index structure and navigation method, we have designed and implemented an intelligent city traffic control system, named DyNSA (Dynamic Navigation System based on moving objects stream Aggregation), which aims at providing high quality of dynamic navigation services for Beijing Olympics in 2008. An overview of this system architecture is shown in Fig.5. 
This system consists of multiple managers: TIR (Taffic Information Reciever), TIM (Traffic Information Manager) and Query Processor . TIR is an information receiver, which continuously sends traffic information to TIM , it can be considered like current TMC, which captures real traffic information. In TIM , aggregated information of each road segment is timely refreshed according to current traffic information and the region charge of users X  navigation requests. When a navigation request is coming, it will send it to a View Manager , and then a corresponding view tree on HAT will be created. The Service Agent will perform the view based hierarchy searching on it, and finally, the optimal path will return to the user. Since the View Manager keeps a consistency between the view tree and the HAT, a recalculation will happen if necessary and will be sent to the user until she/he arrives to her/his destination. The underlying index structure of RIM and Query Processor are both based on HAT. 4.2 Performance Studies DyNSA was implemented in Java, so that both PMR Quadtree and Grid index were also implemented respectively in the same platform. For the experimental data, we have adopted several real road network datasets on which some moving object datasets are generated by Brinkhoff X  X  generator [8]. The parameters used are summarized in Table 1, where values in bold denote default used values. The performance studies are concentrated in 4 points: (1) Moving Object X  X  Localization Efficiency; (2) Aggregation computing efficiency; (3) View trees X  creating performance; (4) Searching fastest path performance. 
Due to the limited paper space, we give only the comparison results respectively in figure6-9. These figures show evidently that HAT performs better that the other two indexing methods not only in the aspect of structure size, but also in querying processing. This paper has proposed a novel indexing technique HAT, in order to improve the efficiency of dynamic navigation techniques. In essence, it is a balanced Quadtree that adapts to the road network distribution, attached with pre-aggregated traffic measurement by its spatial hierarchy. This feature allows the navigation process to detail traffic information of each road segment. Thus, it can efficiently perform path searching process from macro to micro. Another contribution of this paper is the concept of  X  X iew tree X  that restricts the op timal finding computation only within a part of the data structure that interests the user. Based upon the above techniques, we have proposed a system architecture, DyNSA , allowing dynamic navigation service in the prospect of Olympic Games in Beijing. The implementation and the experimentation results have validated our approach and demonstrated its efficiency and effectiveness. In perspective, we will test the HAT index in the context of data warehouses, and particularly to optimize OLAP. It would be also interesting to data to allow prediction of traffic stat e and adapt the navigation accordingly. This research was partially supported by the grants from the Natural Science Foundation of China under grant number 60573091, 60273018; China National Basic Research and Development Program's Semantic Grid Project (No. 2003CB317000); the Key Project of Ministry of Education of China under Grant No.03044; Program for New Century Excellent Talents in University(NCET). 
