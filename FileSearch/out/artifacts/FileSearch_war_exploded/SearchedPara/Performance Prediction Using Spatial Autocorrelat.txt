 Evaluation of information retrieval systems is one of the core tasks in information retrieval. Problems include the inabil-ity to exhaustively label all documents for a topic, non-generalizability from a small number of topics, and incor-porating the variability of retrieval systems. Previous work addresses the evaluation of systems, the ranking of queries by difficulty, and the ranking of individual retrievals by per-formance. Approaches exist for the case of few and even no relevance judgments. Our focus is on zero-judgment perfor-mance prediction of individual retrievals.

One common shortcoming of previous techniques is the as-sumption of uncorrelated document scores and judgments. If documents are embedded in a high-dimensional space (as they often are), we can apply techniques from spatial data analysis to detect correlations between document scores. We find that the low correlation between scores of topi-cally close documents often implies a poor retrieval per-formance. When compared to a state of the art baseline, we demonstrate that the spatial analysis of retrieval scores provides significantly better prediction performance. These new predictors can also be incorporated with classic pre-dictors to improve performance further. We also describe the first large-scale experiment to evaluate zero-judgment performance prediction for a massive number of retrieval systems over a variety of collections in several languages. H.3.3 [ Information Search and Retrieval ]: Retrieval models; H.3.4 [ Systems and Software ]: Performance eval-uation (efficiency and effectiveness) Performance, Design, Reliability, Experimentation autocorrelation, regularization, performance prediction Copyright 2007 ACM 978-1-59593-597-7/07/0007 ... $ 5.00. In information retrieval, a user poses a query to a system. The system retrieves n documents each receiving a real-valued score indicating the predicted degree of relevance. If we randomly select pairs of documents from this set, we expect some pairs to share the same topic and other pairs to not share the same topic. Take two topically-related docu-ments from the set and call them a and b . If the scores of a and b are very different, we may be concerned about the per-formance of our system. That is, if a and b are both on the topic of the query, we would like them both to receive a high score; if a and b are not on the topic of the query, we would like them both to receive a low score. We might become more worried as we find more differences between scores of related documents. We would be more comfortable with a retrieval where scores are consistent between related documents.
Our paper studies the quantification of this inconsistency in a retrieval from a spatial perspective. Spatial analysis is appropriate since many retrieval models embed documents in some vector space. If documents are embedded in a space, proximity correlates with topical relationships. Score con-sistency can be measured by the spatial version of autocor-relation known as the Moran coefficient or I M [5, 10]. In this paper, we demonstrate a strong correlation between I and retrieval performance.

The discussion up to this point is reminiscent of the clus-ter hypothesis. The cluster hypothesis states: closely-related documents tend to be relevant to the same request [12]. As we shall see, a retrieval function X  X  spatial autocorrelation mea-sures the degree to which closely-related documents receive similar scores. Because of this, we interpret autocorrela-tion as measuring the degree to which a retrieval function satisfies the clustering hypothesis. If this connection is rea-sonable, in Section 6, we present evidence that failure to satisfy the cluster hypothesis correlates strongly with poor performance.

In this work, we provide the following contributions, 1. A general, robust method for predicting the perfor-2. A theoretical treatment of the similarities and motiva-3. The first large-scale experiments of zero-judgment, sin-
Given a query , an information retrieval system produces a ranking of documents in the collection encoded as a set of scores associated with documents. We refer to the set of scores for a particular query-system combination as a re-trieval . We would like to predict the performance of this retrieval with respect to some evaluation measure (eg, mean average precision). In this paper, we present results for ranking retrievals from arbitrary systems. We would like this ranking to approximate the ranking of retrievals by the evaluation measure. This is different from ranking queries by the average performance on each query. It is also differ-ent from ranking systems by the average performance on a set of queries.

Scores are often only computed for the top n documents from the collection. We place these scores in the length n vector, y , where y i refers to the score of the i th-ranked document. We adjust scores to have zero mean and unit variance. We use this method because of its simplicity and its success in previous work [15].
In information retrieval, we often assume that the repre-sentations of documents exist in some high-dimensional vec-tor space. For example, given a vocabulary, V , this vector space may be an arbitrary |V| -dimensional space with cosine inner-product or a multinomial simplex with a distribution-based distance measure. An embedding space is often se-lected to respect topical proximity; if two documents are near, they are more likely to share a topic.

Because of the prevalence and success of spatial models of information retrieval, we believe that the application of spatial data analysis techniques are appropriate. Whereas in information retrieval, we are concerned with the score at a point in a space, in spatial data analysis, we are concerned with the value of a function at a point or location in a space. We use the term function here to mean a mapping from a location to a real value. For example, we might be interested in the prevalence of a disease in the neighborhood of some city. The function would map the location of a neighborhood to an infection rate.

If we want to quantify the spatial dependencies of a func-tion, we would employ a measure referred to as the spatial autocorrelation [5, 10]. High spatial autocorrelation suggests that knowing the value of a function at location a will tell us a great deal about the value at a neighboring location b . There is a high spatial autocorrelation for a function representing the temperature of a location since knowing the temperature at a location a will tell us a lot about the temperature at a neighboring location b . Low spatial au-tocorrelation suggests that knowing the value of a function at location a tells us little about the value at a neighboring location b . There is low spatial autocorrelation in a function measuring the outcome of a coin toss at a and b .

In this section, we will begin by describing what we mean by spatial proximity for documents and then define a mea-sure of spatial autocorrelation. We conclude by extending this model to include information from multiple retrievals from multiple systems for a single query.
Our work does not focus on improving a specific similarity measure or defining a novel vector space. Instead, we choose an inner product known to be effective at detecting inter-document topical relationships. Specifically, we adopt tf.idf document vectors, where d is a vector of term frequencies, c is the length-|V| document frequency vector. We use this weighting scheme due to its success for topical link detection in the context of Topic Detection and Tracking (TDT) evaluations [6]. As-suming vectors are scaled by their L 2 norm, we use the inner product,  X   X  d i ,  X  d j  X  , to define similarity.
Given documents and some similarity measure, we can construct a matrix which encodes the similarity between pairs of documents. Recall that we are given the top n documents retrieved in y . We can compute an n  X  n simi-larity matrix, W . An element of this matrix, W ij represents the similarity between documents ranked i and j . In prac-tice, we only include the affinities for a document X  X  k -nearest neighbors. In all of our experiments, we have fixed k to 5. We leave exploration of parameter sensitivity to future work. We also row normalize the matrix so that P n j =1 W ij = 1 for all i .
Recall that we are interested in measuring the similarity between the scores of spatially-close documents. One such suitable measure is the Moran coefficient of spatial autocor-relation. Assuming the function y over n locations, this is defined as where e T We = P ij W ij .

We would like to compare autocorrelation values for dif-ferent retrievals. Unfortunately, the bound for Equation 2 is not consistent for different W and y . Therefore, we use the Cauchy-Schwartz inequality to establish a bound, And we define the normalized spatial autocorrelation as Notice that if we let  X  y = Wy , then we can write this formula as, which can be interpreted as the correlation between the orig-inal retrieval scores and a set of retrieval scores  X  X iffused X  in the space.

We present some examples of autocorrelations of functions on a grid in Figure 1.
Sometimes we are interested in the performance of a single retrieval but have access to scores from multiple systems for (a) I M = 0 . 006 (b) I M = 0 . 241 (c) I M = 0 . 487 Figure 1: The Moran coefficient, I M for a several binary functions on a grid. The Moran coefficient is a local measure of function consistency. From the perspective of information retrieval, each of these grid spaces would represent a document and docu-ments would be organized so that they lay next to topically-related documents. Binary retrieval scores would define a pattern on this grid. Notice that, as the Moran coefficient increases, neighboring cells tend to have similar values. the same query. In this situation, we can use combined information from these scores to construct a surrogate for a high-quality ranking [17]. We can treat the correlation between the retrieval we are interested in and the combined scores as a predictor of performance.

Assume that we are given m score functions, y i , for the same n documents. We will represent the mean of these vectors as y  X  = P m i =1 y i . We use the mean vector as an ap-proximation to relevance. Since we use zero mean and unit variance normalization, work in metasearch suggests that this assumption is justified [15]. Because y  X  represents a very good retrieval, we hypothesize that a strong similarity between y  X  and y will correlate positively with system per-formance. We use Pearson X  X  product-moment correlation to measure the similarity between these vectors, We will comment on the similarity between Equation 3 and 4 in Section 7.

Of course, we can combine  X  ( y ,  X  y ) and  X  ( y , y  X  ) if we as-sume that they capture different factors in the prediction. One way to accomplish this is to combine these predictors as independent variables in a linear regression. An alterna-tive means of combination is suggested by the mathematical form of our predictors. Since  X  y encodes the spatial depen-dencies in y and y  X  encodes the spatial properties of the multiple runs, we can compute a third correlation between these two vectors, We can interpret Equation 5 as measuring the correlation between a high quality ranking ( y  X  ) and a spatially smoothed version of the retrieval (  X  y ).
One way to predict the effectiveness of a retrieval is to look at the shared vocabulary of the top n retrieved doc-uments. If we computed the most frequent content words in this set, we would hope that they would be consistent with our topic. In fact, we might believe that a bad re-trieval would include documents on many disparate topics, resulting in an overlap of terminological noise. The Clarity of a query attempts to quantify exactly this [7]. Specifically, Clarity measures the similarity of the words most frequently used in retrieved documents to those most frequently used in the whole corpus. The conjecture is that a good retrieval will use language distinct from general text; the overlapping language in a bad retrieval will tend to be more similar to general text. Mathematically, we can compute a representa-tion of the language used in the initial retrieval as a weighted combination of document language models , where  X  i is the language model of the i th-ranked docu-ment, P ( Q |  X  i ) is the query likelihood score of the i th-ranked document and Z = P n i =1 P ( Q |  X  i ) is a normalization con-stant. The similarity between the multinomial P ( w |  X  Q and a model of  X  X eneral text X  can be computed using the Kullback-Leibler divergence, D V KL (  X  Q k  X  C ). Here, the distri-bution P ( w |  X  C ) is our model of general text which can be computed using term frequencies in the corpus. In Figure 2a, we present Clarity as measuring the distance between the  X  X eighted center of mass X  of the retrieval (labeled y ) and the  X  X nweighted center of mass X  of the collection (labeled O ). Clarity reaches a minimum when a retrieval assigns every document the same score.

Let X  X  again assume we have a set of n documents retrieved for our query. Another way to quantify the dispersion of a set of documents is to look at how clustered they are. We may hypothesize that a good retrieval will return a single, tight cluster. A poorly performing retrieval will return a loosely related set of documents covering many topics. One proposed method of quantifying this dispersion is to mea-sure the distance from a random document a to it X  X  nearest neighbor, b . A retrieval which is tightly clustered will, on average, have a low distance between a and b ; a retrieval which is less tightly-closed will, on average have high dis-tances between a and b . This average corresponds to using the Cox-Lewis statistic to measure the randomness of the top n documents retrieved from a system [18]. In Figure 2a, this is roughly equivalent to measuring the area of the set n . Notice that we are throwing away information about the retrieval function y . Therefore the Cox-Lewis statistic is highly dependent on selecting the top n documents. 1 Remember that we have n documents and a set of scores. Let X  X  assume that we have access to the system which pro-vided the original scores and that we can also request scores for new documents. This suggests a third method for pre-dicting performance. Take some document, a , from the re-trieved set and arbitrarily add or remove words at random to create a new document  X  a . Now, we can ask our system to score  X  a with respect to our query. If, on average over the n documents, the scores of a and  X  a tend to be very dif-ferent, we might suspect that the system is failing on this query. So, an alternative approach is to measure the simi-
The authors have suggested coupling the query with the distance measure [18]. The information introduced by the query, though, is retrieval-independent so that, if two re-trievals return the same set of documents, the approximate Cox-Lewis statistic will be the same regardless of the re-trieval scores .
 larity between the retrieval and a perturbed version of that retrieval [18, 19]. This can be accomplished by either per-turbing the documents or queries. The similarity between the two retrievals can be measured using some correlation measure. This is depicted in Figure 2b. The upper grid represents the original retrieval, y , while the lower grid rep-resents the function after having been perturbed,  X  y . The nature of the perturbation process requires additional scor-ings or retrievals. Our predictor does not require access to the original scoring function or additional retrievals. So, al-though our method is similar to other perturbation methods in spirit, it can be applied in situations when the retrieval system is inaccessible or costly to access.

Finally, assume that we have, in addition to the retrieval we want to evaluate, m retrievals from a variety of differ-ent systems. In this case, we might take a document a , compare its rank in the retrieval to its average rank in the m retrievals. If we believe that the m retrievals provide a satisfactory approximation to relevance, then a very large difference in rank would suggest that our retrieval is mis-ranking a . If this difference is large on average over all n documents, then we might predict that the retrieval is bad. If, on the other hand, the retrieval is very consistent with the m retrievals, then we might predict that the re-trieval is good. The similarity between the retrieval and the combined retrieval may be computed using some corre-lation measure. This is depicted in Figure 2c. In previous work, the Kullback-Leibler divergence between the normal-ized scores of the retrieval and the normalized scores of the combined retrieval provides the similarity [1].
Our experiments focus on testing the predictive power of each of our predictors:  X  ( y ,  X  y ),  X  ( y , y  X  ), and  X  (  X  y , y stated in Section 2, we are interested in predicting the per-formance of the retrieval generated by an arbitrary system. Our methodology is consistent with previous research in that we predict the relative performance of a retrieval by compar-ing a ranking based on our predictor to a ranking based on average precision.

We present results for two sets of experiments. The first set of experiments presents detailed comparisons of our pre-dictors to previously-proposed predictors using identical data sets. Our second set of experiments demonstrates the gen-eralizability of our approach to arbitrary retrieval methods, corpus types, and corpus languages.
In these experiments, we will predict the performance of language modeling scores using our autocorrelation predic-tor,  X  ( y ,  X  y ); we do not consider  X  ( y , y  X  ) or  X  (  X  y , y cause, in these detailed experiments, we focus on ranking the retrievals from a single system. We use retrievals, values for baseline predictors, and evaluation measures reported in previous work [19].
These performance prediction experiments use language model retrievals performed for queries associated with col-lections in the TREC corpora. Using TREC collections al-lows us to confidently associate an average precision with a retrieval. In these experiments, we use the following topic collections: TREC 4 ad hoc, TREC 5 ad hoc, Robust 2004, Terabyte 2004, and Terabyte 2005.
We provide two baselines. Our first baseline is the clas-sic Clarity predictor presented in Equation 6. Clarity is designed to be used with language modeling systems. Our second baseline is Zhou and Croft X  X   X  X anking robustness X  predictor. This predictor corrupts the top k documents from retrieval and re-computes the language model scores for these corrupted documents. The value of the predictor is the Spearman rank correlation between the original rank-ing and the corrupted ranking. In our tables, we will label results for Clarity using D V KL and the ranking robustness predictor using P .
Our predictors do not require a particular baseline re-trieval system; the predictors can be computed for an arbi-trary retrieval, regardless of how scores were generated. We believe that that is one of the most attractive aspects of our algorithm. Therefore, in a second set of experiments, we demonstrate the ability of our techniques to generalize to a variety of collections, topics, and retrieval systems. We gathered a diverse set of collections from all possible TREC corpora. We cast a wide net in order to locate collec-tions where our predictors might fail. Our hypothesis is that documents with high topical similarity should have corre-lated scores. Therefore, we avoided collections where scores were unlikely to be correlated (eg, question-answering) or were likely to be negatively correlated (eg, novelty). Nev-ertheless, our collections include corpora where correlations are weakly justified (eg, non-English corpora) or not justi-fied at all (eg, expert search). We use the ad hoc tracks from TREC3-8, TREC Robust 2003-2005, TREC Terabyte 2004-2005, TREC4-5 Spanish, TREC5-6 Chinese, and TREC En-terprise Expert Search 2005. In all cases, we use only the automatic runs for ad hoc tracks submitted to NIST.
For all English and Spanish corpora, we construct the ma-trix W according to the process described in Section 3.1. For Chinese corpora, we use na  X  X ve character-based tf.idf vectors. For entities, entries in W are proportional to the number of documents in which two entities cooccur.
In our detailed experiments, we used the Clarity measure as a baseline. Since we are predicting the performance of retrievals which are not based on language modeling, we use a version of Clarity referred to as ranked-list Clarity [7]. Ranked-list clarity converts document ranks to P ( Q |  X  values. This conversion begins by replacing all of the scores in y with the respective ranks. Our estimation of P ( Q |  X  from the ranks, then is, where c is a cutoff parameter. As suggested by the authors, we fix the algorithm parameters c and  X  2 so that c = 60 and  X  2 = 0 . 10. We use Equation 6 to estimate P ( w |  X  D
KL (  X  Q k  X  C ) to compute the value of the predictor. We will refer to this predictor as D V KL , superscripted by V to indicate that the Kullback-Leibler divergence is with respect to the term embedding space.

When information from multiple runs on the same query is available, we use Aslam and Pavlu X  X  document-space multi-nomial divergence as a baseline [1]. This rank-based method first normalizes the scores in a retrieval as an n -dimensional multinomial. As with ranked-list Clarity, we begin by re-placing all of the scores in y with their respective ranks. Then, we adjust the elements of y in the following way, In our multirun experiments, we only use the top 75 docu-ments from each retrieval ( n = 75); this is within the range of parameter values suggested by the authors. However, we admit not tuning this parameter for either our system or the baseline. The predictor is the divergence between the candi-date distribution, y , and the mean distribution, y  X  . With the uniform linear combination of these m retrievals repre-sented as y  X  , we can compute the divergence as D n KL (  X  y k  X  y where we use the superscript n to indicate that the sum-mation is over the set of n documents. This baseline was developed in the context of predicting query difficulty but we adopt it as a reasonable baseline for predicting retrieval performance.
When given multiple retrievals, we use documents in the union of the top k = 75 documents from each of the m re-trievals for that query. If the size of this union is  X  n , then y  X  and each y i is of length  X  n . In some cases, a system did not score a document in the union. Since we are mak-ing a Gaussian assumption about our scores, we can sample scores for these unseen documents from the negative tail of the distribution. Specifically, we sample from the part of the distribution lower than the minimum value of in the normalized retrieval. This introduces randomness into our algorithm but we believe it is more appropriate than assign-ing an arbitrary fixed value.

We optimized the linear regression using the square root of each predictor. We found that this substantially improved fits for all predictors, including the baselines. We considered linear combinations of pairs of predictors (labeled by the components) and all predictors (labeled as  X  ).
Given a set of retrievals, potentially from a combination of queries and systems, we measure the correlation of the rank ordering of this set by the predictor and by the perfor-mance metric. In order to ensure comparability with previ-ous results, we present Kendall X  X   X  correlation between the predictor X  X  ranking and ranking based on average precision of the retrieval. Unless explicitly noted, all correlations are significant with p &lt; 0 . 05.

Predictors can sometimes perform better when linearly combined [9, 11]. Although previous work has presented the coefficient of determination ( R 2 ) to measure the quality of the regression, this measure cannot be reliably used when comparing slight improvements from combining predictors. Therefore, we adopt the adjusted coefficient of determina-tion which penalizes models with more variables. The ad-justed R 2 allows us to evaluate the improvement in predic-tion achieved by adding a parameter but loses the statistical interpretation of R 2 . We will use Kendall X  X   X  to evaluate the magnitude of the correlation and the adjusted R 2 to evalu-ate the combination of variables.
We present results for our detailed experiments comparing the prediction of language model scores in Table 1. Although the Clarity measure is theoretically designed for language model scores, it consistently underperforms our system-agnostic predictor. Ranking robustness was presented as an improve-ment to Clarity for web collections (represented in our exper-iments by the terabyte04 and terabyte05 collections), shift-ing the  X  correlation from 0.139 to 0.150 for terabyte04 and 0.171 to 0.208 for terabyte05. However, these improvements are slight compared to the performance of autocorrelation on these collections. Our predictor achieves a  X  correlation of 0.454 for terabyte04 and 0.383 for terabyte05. Though not always the strongest, autocorrelation achieves correla-tions competitive with baseline predictors. When examin-ing the performance of linear combinations of predictors, we note that in every case, autocorrelation factors as a neces-sary component of a strong predictor. We also note that the adjusted R 2 for individual baselines are always significantly improved by incorporating autocorrelation.

We present our generalizability results in Table 2. We begin by examining the situation in column (a) where we are presented with a single retrieval and no information from additional retrievals. For every collection except one, we achieve significantly better correlations than ranked-list Clarity. Surprisingly, we achieve relatively strong correla-tions for Spanish and Chinese collections despite our na  X  X ve processing. We do not have a ranked-list clarity correlation for ent05 because entity modeling is itself an open research question. However, our autocorrelation measure does not achieve high correlations perhaps because relevance for en-tity retrieval does not propagate according to the cooccur-rence links we use.

As noted above, the poor Clarity performance on web data is consistent with our findings in the detailed experi-ments. Clarity also notably underperforms for several news corpora (trec5, trec7, and robust04). On the other hand, au-tocorrelation seems robust to the changes between different corpora.

Next, we turn to the introduction of information from multiple retrievals. We compare the correlations between those predictors which do not use this information in column (a) and those which do in column (b). For every collection, the predictors in column (b) outperform the predictors in column (a), indicating that the information from additional runs can be critical to making good predictions.

Inspecting the predictors in column (b), we only draw weak conclusions. Our new predictors tend to perform bet-ter on news corpora. And between our new predictors, the hybrid  X  (  X  y , y  X  ) predictor tends to perform better. Recall that our  X  (  X  y , y  X  ) measure incorporates both spatial and multiple retrieval information. Therefore, we believe that the improvement in correlation is the result of incorporat-ing information from spatial behavior.

In column (c), we can investigate the utility of incor-porating spatial information with information from multi-ple retrievals. Notice that in the cases where autocorrela-tion,  X  ( y ,  X  y ), alone performs well (trec3, trec5-spanish, and trec6-chinese), it is substantially improved by incorporat-ing multiple-retrieval information from  X  ( y , y  X  ) in the lin-ear regression,  X  . In the cases where  X  ( y , y  X  ) performs well, incorporating autocorrelation rarely results in a significant improvement in performance. In fact, in every case where our predictor outperforms the baseline, it includes informa-tion from multiple runs.
The most important result from our experiments involves prediction when no information is available from multiple runs (Tables 1 and 2a). This situation arises often in system design. For example, a system may need to, at retrieval time, assess its performance before deciding to conduct more intensive processing such as pseudo-relevance feedback or interaction. Assuming the presence of multiple retrievals is unrealistic in this case.

We believe that autocorrelation is, like multiple-retrieval algorithms, approximating a good ranking; in this case by diffusing scores. Why is  X  y a reasonable surrogate? We know that diffusion of scores on the web graph and language model graphs improves performance [14, 16]. Therefore, if score diffusion tends to, in general, improve performance, then diffused scores will, in general, provide a good surrogate for relevance. Our results demonstrate that this approximation is not as powerful as information from multiple retrievals. Nevertheless, in situations where this information is lacking, autocorrelation provides substantial information.

The success of autocorrelation as a predictor may also have roots in the clustering hypothesis. Recall that we regard autocorrelation as the degree to which a retrieval satisfies the clustering hypothesis. Our experiments, then, demonstrate that a failure to respect the clustering hypoth-esis correlates with poor performance. Why might systems fail to conform to the cluster hypothesis? Query-based in-formation retrieval systems often score documents indepen-dently. The score of document a may be computed by exam-ining query term or phrase matches, the document length, and perhaps global collection statistics. Once computed, a system rarely compares the score of a to the score of a topically-related document b . With some exceptions, the correlation of document scores has largely been ignored.
We should make it clear that we have selected tasks where topical autocorrelation is appropriate. There are certainly cases where there is no reason to believe that retrieval scores will have topical autocorrelation. For example, ranked lists which incorporate document novelty should not exhibit spa-tial autocorrelation; if anything autocorrelation should be negative for this task. Similarly, answer candidates in a question-answering task may or may not exhibit autocor-relation; in this case, the semantics of links is questionable too. It is important before applying this measure to confirm that, given the semantics for some link between two retrieved items, we should expect a correlation between scores.
In this section we draw more general comparisons to other work in performance prediction and spatial data analysis.
There is a growing body of work which attempts to predict the performance of individual retrievals [7, 3, 11, 9, 19]. We have attempted to place our work in the context of much of this work in Section 4. However, a complete comparison is beyond the scope of this paper. We note, though, that our experiments cover a larger and more diverse set of retrievals, collections, and topics than previously examined.

Much previous work X  X articularly in the context of TREC X  focuses on predicting the performance of systems . Here, each system generates k retrievals. The task is, given these retrievals, to predict the ranking of systems according to some performance measure. Several papers attempt to ad-dress this task under the constraint of few judgments [2, 4]. Some work even attempts to use zero judgments by lever-aging multiple retrievals for the same query [17]. Our task differs because we focus on ranking retrievals independent of the generating system. The task here is not to test the hypothesis  X  X ystem A is superior to system B X  but to test the hypothesis  X  X etrieval A is superior to retrieval B X . Autocorrelation manifests itself in many classification tasks. Neville and Jensen define relational autocorrelation for rela-tional learning problems and demonstrate that many classi-fication tasks manifest autocorrelation [13]. Temporal auto-correlation of initial retrievals has also been used to predict performance [9]. However, temporal autocorrelation is per-formed by projecting the retrieval function into the temporal embedding space. In our work, we focus on the behavior of the function over the relationships between documents. trec4 0.353 0.548 0.513 0.168 0.363 0.422 0.466 0.420 0.557 0.553 trec5 0.311 0.329 0.357 0.116 0.190 0.236 0.238 0.244 0.266 0.269 robust04 0.418 0.398 0.373 0.256 0.304 0.278 0.403 0.373 0.402 0.442 trec3 0.201 0.461 0.461 0.439 0.456 0.444 0.395 0.394 0.386 0.498 trec4 0.252 0.396 0.455 0.482 0.489 0.379 0.263 0.429 0.482 0.483 trec5 0.016 0.277 0.433 0.459 0.393 0.280 0.157 0.375 0.323 0.386 trec6 0.230 0.227 0.352 0.428 0.418 0.203 0.089 0.323 0.325 0.325 trec7 0.083 0.326 0.341 0.430 0.483 0.264 0.182 0.363 0.442 0.400 trec8 0.235 0.396 0.454 0.508 0.567 0.402 0.272 0.490 0.580 0.523 robust03 0.302 0.354 0.377 0.385 0.447 0.269 0.206 0.274 0.392 0.303 robust04 0.183 0.308 0.301 0.384 0.453 0.200 0.182 0.301 0.393 0.335 robust05 0.224 0.249 0.371 0.377 0.404 0.341 0.108 0.313 0.328 0.336 terabyte04 0.043 0.245 0.544 0.420 0.392 0.516 0.105 0.357 0.343 0.365 terabyte05 0.068 0.306 0.480 0.434 0.390 0.491 0.168 0.384 0.309 0.403 ent05 -0.181 0.324 0.305 0.282 0.211 0.043 0.158 0.155 0.179 correlation for that test/collection pair.

Finally, regularization-based re-ranking processes are also closely-related to our work [8]. These techniques seek to maximize the agreement between scores of related docu-ments by solving a constrained optimization problem. The maximization of consistency is equivalent to maximizing the Moran autocorrelation. Therefore, we believe that our work provides explanation for why regularization-based re-ranking works.
We have presented a new method for predicting the per-formance of a retrieval ranking without any relevance judg-ments. We consider two cases. First, when making predic-tions in the absence of retrievals from other systems, our predictors demonstrate robust, strong correlations with av-erage precision. This performance, combined with a simple implementation, makes our predictors, in particular, very at-tractive. We have demonstrated this improvement for many, diverse settings. To our knowledge, this is the first large scale examination of zero-judgment, single-retrieval perfor-mance prediction. Second, when provided retrievals from other systems, our extended methods demonstrate competi-tive performance with state of the art baselines. Our exper-iments also demonstrate the limits of the usefulness of our predictor swheninformatio nfrommultipl erunsisprovided.
Our results suggest two conclusions. First, our results could affect retrieval algorithm design. Retrieval algorithms designed to consider spatial autocorrelation will conform to the cluster hypothesis and improve performance. Second, our results could affect the design of minimal test collection algorithms. Much of the recent work in ranking systems sometimes ignores correlations between document labels and scores .Webelie vetha tthesetwodirection scoul dbereward-ing given the theoretical and experimental evidence in this paper.
This work was supported in part by the Center for In-telligent Information Retrieval and in part by the Defense Advanced Research Projects Agency (DARPA) under con-tract number HR0011-06-C-0023. Any opinions, findings and conclusions or recommendations expressed in this ma-terial are the author X  X  and do not necessarily reflect those of the sponsor. We thank Yun Zhou and Desislava Petkova for providing data and Andre Gauthier for technical assis-tance.
