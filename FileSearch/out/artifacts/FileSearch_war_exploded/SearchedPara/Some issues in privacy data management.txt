 1. Introduction
The management of privacy sensitive information is a very critical and important need for every enterprise, while ensuring the compliance with various rules and regulations relating to data management. This poses sev-eral challenging problems, such as the need to translate the high-level business goals into system-level privacy policies, administration of privacy sensitive data, privacy data integration and engineering, privacy access con-trol mechanisms, information-oriented security and query execution on privacy sensitive data for partial answers.

Privacy may be defined as the claim of individuals, groups and institutions to determine for themselves when, how and to what extent information about them is communicated to others (this definition is attrib-uted to Professor Alan Westin, Columbia University, 1967). However, with the growth of the web and asso-ciated technologies for accessing and processing large quantities of information at a faster rate, the privacy issues gain additional significance in view of the increasing volumes of data that may have sensitive infor-mation about business entities, and the increasing rules and regulations for safe-guarding the sensitive infor-mation. Role-based access control [11] has been widely used for data protection, especially when the data resides in relational tables. Further modifications were proposed to the database at different levels of gran-ularity for additional protection [1,7] . There are several regulations, such as Sarbannes-Oxley Act (SOX) and Health Insurance Portability and Accountability Act (HIPAA), that aim to provide regulatory control, by mandating disclosure of certain information or restricting or imposing conditions for sharing other kinds of information. 2. Privacy policy language
The Platform for Privacy Preferences (P3P) is a standard established by the World Wide Web Consor-tium (see http://www.w3.org/P3P ) that served as a first step for building customer trust and goodwill. P3P enables web site owners to define and publish their privacy policies in manual and machine-readable for-mats. This allows user-agents to read and interpret privacy policies automatically on behalf of users. Users may then decide what information to share and what not to disclose, based on the site X  X  privacy policy.
However, P3P does not state how the policies will be enforced, leaving it to the individual enterprises. P3P has been widely adopted as a front-end measure by companies hoping to establish trust and build confi-dence in the users. These standards have served as a basis for client-side implementations of privacy pol-icies. For instance, browsers such as Netscape 7.0 and Internet Explorer 6.0 support the standards by providing users more control over cookies and allowing the user to easily view the web site X  X  privacy policy.
 XACML or extensible access control language (see http://www.oasis-open.org/committees/xacml )isan
XML-based language for access control, standardized by the Organization for the Advancement of Struc-tured Information Standards (OASIS). XACML describes both the access control policy language (to represent access control policies of who can do what and when) and a request/response language to ex-press queries about whether a particular access should be allowed (request) and describes answers to those queries (responses).

Rei [8] is a policy specification language based in OWL-Lite that allows policies to be specified as con-straints over allowable and obligated actions on resources in the environment. Rei includes meta-policy spec-ification for conflict resolution, speech acts for remote policy management and policy analysis specifications like what-if analysis and use-case management, making it a suitable candidate for adaptable security in the environment under control. 3. Hippocratic databases
In [2] , the authors define a set of standards in terms of data access and protection that would comprise the Hippocratic Database (HDB). Here it is advocated that future databases should include responsibility for the privacy of the data that they manage. In addition to the existing capabilities of databases today, such as the ability to manage persistent data and the ability to access a large amount of data efficiently, data repos-itories in future would also need to ensure that they adhere to a certain set of standards in terms of data access and protection. These privacy principles, also borrowing from the OECD guidelines (see http://www.oecd.org ), include broadly purpose specification, consent, limited collection, limited use, limited disclosure, limited reten-tion, accuracy, safety, openness and compliance. The paper also presents a strawman architecture that uses pur-pose as the concept around which privacy protection is centered. Privacy metadata tables are defined, that describe the set of authorized users, the external recipients with whom the information may be shared and the retention period. A privacy constraint validator checks whether the privacy policy of the enterprise is accept-able to the user, before actually receiving any data from the user. While recording the data, the purpose for which it is being shared by the user is also recorded. For instance, one user could have  X  X urchase X  as a single purpose, when sharing his name and address, while another user could have  X  X urchase X  and  X  X romotions X  as pur-pose , for sharing the same pieces of information. In HDB, when a user submits the query to the system, she also submits the intended purpose for requesting the data. The system validates the identity of the user and then checks whether the user is allowed to access the requested data for a given purpose . The HDB system returns only those data records whose purpose attribute includes the query X  X  purpose attribute. 4. Privacy preserving data mining
Privacy considerations are also impacting areas other than those concerned with the design of next gener-ation databases, or influencing standards for the client-side privacy protection. Privacy preserving data mining focusses on building data aggregate models that do not access precise information but rather use data at aggregate level. In [14] , the authors present a classification of privacy preserving techniques, along with a de-tailed review of the work in privacy preserving data mining that has been driven by issues of privacy in data handling, data processing, data mining and integration. For instance, in [3] a technique is discussed for pre-serving information at the aggregate level, while hiding information at the individual level by perturbing the sensitive values of individual records using a randomization function.

Data anonymization [4] is another area of work that is driven by the need to protect the confidentiality of sensitive information when it has to be shared for some purposes. There are several techniques proposed for data anonymization or data sanitization [6,13] . One such technique is discussed in [12] which presents the k -anonymization protection model. Here, protection for sensitive data is provided by ensuring that the released information corresponds to k entities and hence the information relating to one person cannot be distinguished from at least k 1 other individuals whose information also appears in the release. While most of data anonymization techniques deal with relational data, data obfuscation [4] has also been used for obfuscating sensitive information in text data. Techniques include data scrubbing, where explicit identifiers are removed by the data de-identification system. For instance, natural language processing tools have been used for locating and removing personally-identifying information in patient records, in the system dis-cussed in [10] . 5. Privacy policy obligation enforcement
In this section, we briefly describe the artifacts of a privacy data management system that can be used for privacy protection of data at an enterprise level; the middleware architecture is scaleable, application-neutral and data repository neutral, and lends itself to automation.

The privacy policy of an enterprise mandates how information is collected, how it is used and how long it is retained. As such, the policy could impact the data at different stages of the information life cycle. Information may be added to different repositories when people register and submit information, when sales transactions happen, and at various other points. The creation of such information may itself be within the scope of the privacy policy. The privacy policy itself may be viewed as comprising a number of rules. Each rule in turn could comprise many components. Each rule may be viewed as a 4-tuple that comprises an event, a condition, a permission and optionally, zero, one or more obligations. Further, each event may in itself be viewed as a 4-tuple, comprising a user category, a data category, an action, and a purpose associated with the user request.
Here, each user in the system is assigned to one or more user categories, based on the user roles. The user categories could themselves be hierarchical. Each data item that is to be privacy-protected is assigned to a spe-cific data category. The data categories could be hierarchical. Users may access the data items to perform one or more of the specified set of actions. A representative set of actions could be for instance,  X  X iew X ,  X  X odify X ,  X  X elete X . Further, users may access the data items for a specific purpose, from one of a pre-specified set of pur-poses. A representative set of purposes could be  X  X arketing X ,  X  X esearch X ,  X  X egal X ,  X  X dministrative X . A data item is an entity that is to be privacy-protected, ie., whose access is controlled by one or more rules in the pri-vacy policy. Each data item belongs to some data category. Examples of data items include emails, facsimile documents, customer records and scanned images (of X-rays, for instance, when the domain is the health industry.)
The privacy rule comes into effect when a user makes a request on the system. A user request in itself is a 4-tuple comprising the user id, the data item being requested, the intended action and purpose. In addi-tion, as stated earlier, privacy rules may have other clauses associated, such as conditions and obligations [5] . Conditions are clauses that need to evaluate to true, for the access to be allowed. Obligations are tasks that are optionally associated with some rules, that specify one or more actions that need to be manda-torily performed after the user request is fulfilled. An example could be  X  X mail the customer if this infor-mation is used for marketing. X  The rule finally specifies an  X  X llow X  or  X  X eny X  depending on whether the data access rules satisfy all the above requirements in terms of user category, data category, purpose, in-tended action and condition. Further, if there are any obligations associated with the rule, then the obli-gations are to be mandatorily executed.

Here, we assume that though the rules may initially be written in a high-level language such as English, using business terminology, these are subsequently translated to the various components understandable by a parser. We also briefly describe one such middleware system that automates data access requests in the context of the above rule framework. The main components are shown in Fig. 1 and include:  X  The request interceptor, which is the module that intercepts user requests, and breaks them into their different components such as the user, query, intended action and purpose. The query is executed using the application specific API, but further processing is done to determine the conditions, obliga-tions, and whether the user is authorised to receive the results. This is done by communicating to the event handler the information on the data items that result from the query execution, so that the event handler can construct the relevant data access event and determine the relevant rule/s to apply.  X  An event handler that looks at each access request as it receives it from the request interceptor and con-structs the relevant access event. The event handler then determines whether access is allowed for this event, as per the rules that apply. This module may rely on other modules for additional help to determine if the necessary conditions associated with that data access are satisfied and if any obligations need to be met, before the access is allowed. Further, if any obligations are specified, the module needs to inform the obli-gation management/enforcement system of the same.
  X  The obligation manager that enforces obligations automatically. Most often, this is a weak link in the sys-tem, in the sense that data requests are met after checking the correctness of various parameters, but asso-ciated obligations need to be executed manually. Hence the overall system is not foolproof or scaleable. By connecting the event manager to the obligation enforcement system, it is possible to automate the execution of obligations. The obligation manager needs to record the obligation that is to be enforced and invoke the appropriate obligation handling system.

As shown in Fig. 1 , various other tasks are also required in the end-to-end system, such as the setup time tasks of mapping data items to data categories, users to user categories, performing the rule obligation map-ping, registering the various data repositories in the system, listing their query APIs, mapping obligations to their execution routines, and other related tasks. These are shown at a high-level in the picture, and the details of the various runtime tasks are shown in steps (2) X (7), in the figure.

Further, many issues arise in the end-to-end automation of the privacy management. For instance, there could be conflicts between the obligations specified by the various rules, and conflict resolution has to defined and enforced [9] . Issues such as support for auditing and support for long-running transactions have to be taken care of. Formal registration mechanisms may be defined to register new applications and their relevant
APIs for data access. In spite of these additional issues that need to be factored into the complete design, such a middleware approach provides a scaleable solution to the problem of automating the data protection based on the privacy policy in place. The rule format is sufficiently general to accomodate various kinds of rule sys-tems. The system is also application neutral and data-repository neutral. 6. Summarization of papers in this special issue
While the earlier section discusses a solution at the enterprise level to provide privacy and enable automated privacy rule execution at the level of each data request, many related areas of privacy protection arise in shar-ing data for various purposes. This special issue contains a set of papers that focus on some of the related issues such as privacy concerns in agent-supported e-commerce, extension of privacy concerns to non-disclo-sure agreements in the event of takeovers, and other issues in privacy management.
 Acknowledgements
We thank Prof. Dr. Reind van de Riet and the management team of Data &amp; Knowledge Engineering Jour-nal (Elsevier Publishing) for giving us this opportunity to complete this special issue on  X  X rivacy Data Man-agement. X  We also thank Prof. Tharam Dillon and Prof. Elizabeth Chang for their help and support.
References
