 We study the problem of discovering a team of experts from a social network. Given a project whose completion re-quires a set of skills, our goal is to find a set of experts that together have all of the required skills and also have the minimal communication cost among them. We propose two communication cost functions designed for two types of communication structures. We show that the problem of finding the team of experts that minimizes one of the pro-posed cost functions is NP-hard. Thus, an approximation algorithm with an approximation ratio of two is designed. We introduce the problem of finding a team of experts with a leader. The leader is responsible for monitoring and co-ordinating the project, and thus a different communication cost function is used in this problem. To solve this problem, an exact polynomial algorithm is proposed. We show that the total number of teams may be exponential with respect to the number of required skills. Thus, two procedures that produce top-k teams of experts with or without a leader in polynomial delay are proposed. Extensive experiments on real datasets demonstrate the effectiveness and scalability of the proposed methods.
 H.2.8 [ Database Management ]: Database Applications-Data Mining Algorithms, Experimentation, Theory Team Formation, Approximation Algorithms, Social Net-works
A project cannot be successfully completed without ef-fective communications and collaborations among its team members. Given a project whose completion requires a set of skills, we tackle the problem of finding from a social network a team of individuals that not only cover all the required skills but can also communicate and collaborate effectively. The social network is modeled as a graph whose nodes rep-resent experts, each with one or more skills, and whose edge between two nodes is weighted by the communication cost between the two corresponding experts.

This problem has been introduced in the data mining com-munity by Lappas et al. [10]. They defined two functions for estimating the communication cost of a team. The first function uses the diameter of the subgraph formed by the team to measure the team communication cost, which is the largest shortest path between any two nodes in the sub-graph. The second function uses the cost of the minimum spanning tree (MST) on the subgraph. However, such func-tions may not measure the communication cost well, espe-cially when the project requires that the holders of each pair of the required skills communicate with each other to per-form the corresponding tasks in the project. The diameter function only measures the communication cost between the two experts that are furthest away from each other, and the MST function does not measure the cost of all the required communication either. Another disadvantage of these func-tions is their instability: a slight change in the graph may result in a radical change in the solution. At the same time, the diameter and MST based functions may be insensitive to adding or deleting a connection in the graph since they only measure part of the communication cost.

In this paper, we introduce two new cost functions. We consider two types of communication structures within a team. Assume that each required skill corresponds to a task in the project. In the first communication structure, the ex-perts for each pair of required skills need to communicate to each other to complete the corresponding tasks. For such a structure, we define a cost function, called Sum of Dis-tances , to measure the communication cost of a team using the sum of the shortest distances between the experts for each pair of skills. In the second type of communication structure, a leader needs to communicate with each team member to monitor and coordinate the project. For such a structure we define a cost function, named Leader Distance , that computes the sum of shortest distances between the leader and each skill holder in the team.

Based on these two new cost functions, we define two prob-lems of team formation from a social network. One is to find a team of experts without a leader which covers the re-quired skills and minimizes the Sum of Distances function. The other is to find a team of experts with a leader which covers the required skills but minimizes the Leader Distance function. We propose algorithms for solving both problems. In many situations, the user is not satisfied with only one answer. Instead, he/she is interested in exploring top-k an-swers. Previous work in this area only found one single best answer [10]. We present two procedures that enumerate top-k teams of experts with or without a leader in polynomial delay. The contributions of this paper are summarized be-low: 1. We propose two new functions for measuring the com-2. We prove that the problem of finding a team of experts 3. We introduce the problem of finding a team of experts 4. To generate more answers, we design two procedures 5. We conduct extensive experimental evaluations on real
The paper is organized as follows. Problem statements and definitions are given in section 2. The algorithms for finding the best team of experts with/without a leader are presented in sections 3 and 4. Procedures for enumerating top-k teams of experts are presented in section 5. The ex-perimental results are illustrated in section 6. Related work is presented in section 7 and section 8 concludes the paper. Let C = { c 1 ,c 2 ,...,c n } denote a set of n experts, and S = { s 1 ,s 2 ,...,s m } denote a set of m skills. Each expert c has a set of skills, denoted as Q ( c i ), and Q ( c i )  X  s  X  Q ( c i ), expert c i has skill s j . In addition, a subset of experts C  X  C have skill s j if at least one of them has s . For each skill s j , the set of all experts having skill s is denoted as C ( s j )= { c i | s j  X  Q ( c i ) } .Aproject P defined as a set of skills required to complete the project. A subset of experts C  X  C is said to cover aproject P if  X  s j  X  P  X  c i  X  C ,s j  X  Q ( c i ).

The experts in C are connected together in a social net-work, which is modeled as an undirected and weighted graph G .Eachnodein G represents an expert in C . In the fol-lowing, terms expert and node are used interchangeably. Two nodes in G are connected by an edge if the experts have collaborated or communicated before. The weight of an edge represents the communication cost between two ex-perts. The lower the weight of the edge between two nodes, the more easily the two experts can collaborate or communi-cate, and the lower the communication cost between them.
The distance between two nodes c i and c j ,denotedas d ( c i ,c j ), is the sum of the weights on the shortest path be-tween them in G . It should be noted that the shortest dis-tance function is a metric and satisfies the triangle inequal-ity. If c i and c j are not connected in G (directly or indi-rectly), the distance between them is set to a large value, bigger than the sum of all the pairwise shortest distances between two connected nodes in G [10]. In addition, the distance between a node c i and a subset of nodes C is de-fined as d ( c i ,C )=min d ( c i ,c j )  X  c j  X  C . The node that has the closest distance to c i among the nodes in C is de-fined as N ( c i ,C )= c x | X  c j  X  C d ( c i ,c x )  X  d ( c C =  X  ,wedefine d ( c i ,C )=  X  ,and N ( c i ,C )=  X  .Now, we are ready to formally define a team of experts and the problems we tackle.
Definition 1. (Team of Experts) Given a set of ex-perts C and a project P that requires a set of skills { s a team of experts for P is a set of p skill-expert pairs: { C having skill s j for j =1 ,...,p . A skill-expert pair s means that expert c s i is responsible for skill s i in the project. According to this definition, for each skill s j in project P , there is one and only one skill-expert pair in the team that contains s j . In other words, each skill is coupled with exactly one expert, but an expert may be assigned to more than one skill in the project. Clearly, the number of possible teams is O ( | C max | p ), where | C max | =max | C ( s i is exponential with respect to the number of required skills, i.e. p . Thus, it is not feasible to produce all the teams and rank them according to the cost function.

Definition 2. (Sum of Distances) Given a team T of experts for a project: { s 1 ,c s 1 , s 2 ,c s 2 ,..., s sum of distances of T is defined as
In other words, the sum of distances of a team of experts is the sum of the shortest distances between the experts responsible for each pair of skills. It measures the commu-nication cost of the team, assuming that the experts with each pair of required skills need to communicate in order to coordinate on the two corresponding tasks in the project.
Problem 1. (Team Formation without a Leader) Given aproject P and a graph G representing the social network of a set of experts C , the problem of team formation without a leader is to find a team of experts T for P from G so that the communication cost of T , defined as the sum of distances of T , is minimized.

Below we compare the sum of distances with two other functions defined in [10]. Suppose the two subgraphs G 1 and G 2 in Figure 1 represent two teams of experts for a project that requires skills a , b , c and d .Experts P and T are responsible for skills a and b in the two teams, respec-tively. The other experts are each responsible for only one skill ( c or d ). Suppose the weight on each edge is the shortest distance between the two nodes. The diameter of G 1 is 10, while the diameter of G 2 is 11. The MST cost of G 1 and G is 5+9=14 and 7+8=15 respectively. Thus, the algorithm that minimizes the diameter or MST considers G 1 as the better team. Let d i  X  j denote the shortest distance between the experts for skills i and j in a team. The sum of distances of G 1 is equal to d a  X  b + d a  X  c + d a  X  d + d b  X  c + d 0 + 9 + 10 + 9 + 10 + 5 = 43. Using the same method, the sum of distances of G 2 is 41. Thus, with the sum of dis-tances function, G 2 is chosen as the better team. As can be seen, the diameter and MST cost functions take into ac-count only part of the communication cost in a team, while the sum of distances adds up the costs between experts for each pair of required skills. Also, our cost function is differ-ent from a function that would add up the shortest distances between each pair of experts in the team. Such a function would give G 1 a value of 10 + 9 + 5 = 24 and G 2 avalueof 7 + 8 + 11 = 26, which results in the selection of G 1 .The sum of distances function considers each pair of skills in its computation. We argue that this is more reasonable because for each pair of tasks (i.e., skills) the experts responsible for them need to communicate to coordinate on the tasks. For example, expert T in G 2 needs to communicate with expert V twice, one to coordinate between a and d and the other between b and d . Thus, the contribution of an expert to the total communication cost of the team is proportional to the number of tasks he/she performs in the project.

Theorem 1. Solving Problem 1 with the sum of distances communication cost function introduced in Definition 2 is an NP-hard problem.

Proof. We prove that the decision version of the problem is NP-hard. Thus, as a direct result, Problem 1 is NP-hard too. The decision problem asks whether there exists a team C which covers a project P with the communication cost at most w ( w&gt; 0), for some constant w . The communication cost of C is defined in Definition 2.

The problem is obviously in NP. We prove the theorem by a reduction from 3-satisfiability (3-SAT) 1 . First, consider a set of m clauses D k = x k  X  y k  X  z k ( k =1 ,...,m )and { x k ,y k ,z k } X  X  u 1 , u 1 ,...,u n , u n } . We define an instance of the above problem as follows. For each pair of variables u i and u i , two experts are created. Thus, we have 2  X  n experts. For each pair of variables u i and u i , we create one skill s i ( i =1 ,...,n ). Thus, u i and u i have skill s and the only holders of s i are u i and u i . In addition, for every clause D k , we create one skill s n + k ( k =1 ,...,m )
Note that the same approach is used in [2] and [9] for prov-ing the NP-hardness of the multiple choice cover problem and a graph keyword search problem, respectively. such that the holders of skill s n + k consists of the triplet of experts associated with those of x k , y k and z k . Therefore, the number of required skills is n + m . We set the distance between each variable and its negation (i.e. u i and u i )to 2  X  w . The distance between other variables is set to w Thedistanceofeachnodetoitselfissettozero.

A feasible solution to the above problem with sumDistance at most w is any set of experts such that from each pair of experts corresponding to u i and u i , exactly one is selected and from each triplet of experts corresponding to x k , y and z k , one is selected. Thus, if there exists a subset of sumDistance at most w , then there exists a satisfying as-signment for D 1  X  D 2  X  X  X  X  X  D m . On the other hand, a satisfying assignment apparently determines a feasible set of experts with sumDistance at most w . Therefore, the proof is complete.
A project team often has a leader who is responsible for monitoring and coordinating the project. In such a case, each expert in the team needs to communicate with the leader to report the progress and discuss issues related to the project. Thus, the communication cost of the team heavily depends on the distance between the leader and each of the project members. We define the leader distance to measure such a communication cost.

Definition 3. (Leader Distance) Given a project P = { s 1 ,s 2 ,...,s p } ,ateam T of experts selected from graph G T has a leader L ,where L is an expert in graph G ,which may or may not belong to { c s 1 ,c s 2 ,...,c s p } .The leader distance of T with leader L is defined as
In other words, the leader distance of a team of experts is the sum of the shortest distances between its leader and the expert for each required skill. We consider each skill (instead of each expert) when computing the leader distance because for each task an expert performs, communication with the leader is often needed. Thus, the more skills an expert is responsible for in the team, the more important his/her cost of communication with the leader is to the total communication cost of the team.

Problem 2. (Team Formation with a Leader) Given aproject P and a graph G representing the social network of a set of experts C , the problem of team formation with a leader is to find a team of experts T for P and an expert L from C as the leader of the team so that the communication cost, defined as the leader distance of T with leader L ,is minimized.

Note that leader L is chosen from C , meaning that it is not necessary for L to have a skill required by project P .Our priority here is to minimize the leadership communication cost, i.e. the leader distance. A leader that can communicate the most effectively with all the other members of the team is most preferable, no matter whether the leader possesses any of the required skills. The number of possible teams of experts with a leader is O ( | C max | p  X  n ), where p is the number of required skills in the project, n is the number of experts in G and | C max | =max | C ( s i ) | 1  X  i  X  p .
Itcanbeprovedthat leaderDistance  X  sumDistance p  X  1 , where sumDistance is the sum of distances defined in Defi-nition 2 and p is the number of required skills in the project Thus, minimizing the leader distance is equivalent to mini-mizing an upper bound of sumDistance . A practical benefit of finding a team with the least leader distance is that poly-nomial algorithms can be designed to find teams that min-imize the leader distance. We propose such an algorithm in Section 4 and demonstrate in Section 6.4 that such an exact algorithm outperforms the approximation algorithm for minimizing the diameter, MST or the sum of distances when using the diameter, MST and the sum of distances as performance measures.
Since Problem 1 is an NP-hard problem, we hereby pro-pose an approximation algorithm that finds the best team with 2-approximation. The pseudo code of this algorithm is presented in Algorithm 1. It takes as input a graph G (i.e., the social network) and a project P = { s 1 ,s 2 ,...,s representing the required skills. In addition, for each skill s , the set of experts in G having s i (i.e., C ( s i )) can be ob-tained by the algorithm through a pre-built inverted index. The algorithm returns a team, denoted as bestT eam , whose communication cost is at most twice that of the optimal team. It also returns the communication cost of bestT eam .
The algorithm works as follows. It first initializes bestT eam to  X  and its communication cost, leastSumDistance ,to  X  . Then, for each required skill s i ( i =1 ,...,p ), the follow-ing steps are performed. For each expert, candidate , having skill s i , a team is initialized to have s i , candidate and its sumDistance is initialized to 0 (lines 5-6). Then, in lines 7-11, for each of the other required skills, s j , the algorithm finds the expert with s j that is closest to candidate and adds it (coupled with s j ) to the team. The sumDistance of the team is updated by adding the shortest distance between candidate and the selected expert. After the team has all the required skills (if none of the C ( s i )s is empty), if its sumDistance is smaller than that of the current bestT eam , it replaces the bestT eam (lines 12-14).

As defined in Section 2, d ( candidate, C ( s j )) is the short-est distance between candidate and the set of experts C ( s which is the shortest distance between candidate and its nearest neighbor. To efficiently find the shortest distance be-tween an expert and a set of experts, the shortest distance between each pair of experts in G , i.e., d ( c i ,c j ), has been pre-computed and a hash table is used to store the shortest distances of all pairs for quick access by this algorithm
This is due to the triangle inequality: d ( c i ,L )+ d ( c d ( c i ,c j ), where c i and c j are two team members and L is the leader. The proof is omitted due to the space limit.
Note that the pre-computation of the shortest distances was done in [10] as well. If the hash table cannot reside in memory, other indexing techniques such as the one intro-duced in [6] can be used.
 Thus, the run time of functions d ( candidate, N ( s N ( candidate, C ( s j )) is O ( | C max | ), where | C max 1  X  i  X  p .The time complexity of Algorithm 1 is O ( p 2  X | C max | 2 ), where p is the number of required skills. In the worst case, | C max | = O ( n ) and the run time of the algorithm is O ( p 2  X  n 2 ), where n is the number of nodes in G . However, in real data sets, | C max | is smaller than n by orders of magnitude [10]. Below we prove that the algorithm finds the best answer with the approximation ratio of two. Algorithm 1 Finding Best Team without a Leader Input :graph G ,project P = { s 1 ,s 2 ,...,s p } and the set of experts with skill s i , C ( s i ), for i =1 ,...,p . Output : the best team and its cost 1: leastSumDistance  X  +  X  2: bestT eam  X  X  X  3: for i  X  1 to p do 4: for every candidate  X  C ( s i ) do 5: sumDistance  X  0 6: team  X  X  s i , candidate } 7: for j  X  1 to p and j = i do 8: distance  X  d ( candidate, C ( s j )) 9: selectedExpert  X  N ( candidate, C ( s j )) 10: sumDistance  X  sumDistance + distance 11: team. add( s j , selectedExpert ) 12: if sumDistance &lt; leastSumDistance then 13: leastSumDistance  X  sumDistance 14: bestT eam  X  team 15: return bestT eam , leastSumDistance
Theorem 2. Algorithm 1 finds the team of experts that minimizes the sum of distances defined in Definition 2 with 2-approximation.

Proof. Consider two teams, one optimal team and the team produced by Algorithm 1, denoted here as best team 4 Assume that the number of required skills is p .Wedenote anodeinthe best team that has the smallest sum of the shortest distances to the other nodes in the team as can-didate node . Without loss of generality, assume that the candidate node is the node related to the first required skill, i.e. s 1 . Let X  X  call the shortest distance from the candidate node to each of the other nodes in the team d 12 ,d 13 ,...,d Thus, the sum of shortest distances from this candidate to all the other nodes in the team is p i =2 d 1 i . Let X  X  call this distance the sum of the nearest neighbor distances of the candidate. Based on Algorithm 1, the candidate node has the smallest sum of the nearest neighbor distances among all the nodes in the team and also among all the nodes of all the possible teams including the optimal team because Algorithm 1 minimizes such a sum of distances. Let X  X  con-sider the node with skill s j in the optimal team . Its shortest distance to the node with each of other skills in the opti-mal team is denoted as o 1 j ,o 2 j ,...,o ( j  X  1) j ,o j respectively. Based on Algorithm 1, the following holds for each j (where j =1 ,...,p ):
A similar proof is given for the third theorem in our paper [9] for a graph keyword search algorithm.
If we write the above equation for all the p nodes of the optimal team and sum up both sides of the inequalities, we have the following equation:
The left side of the above equation is twice the communi-cation cost of the optimal team .Thus,wehave:
The communication cost of the best team is:
Since the shortest distances satisfy triangle inequality (i.e., d ij  X  d 1 i + d 1 j ,i = j = 1), the following holds:
In the right side of the above equation, each distance d 1 appears exactly p  X  1 times. Thus, we have:
As a result, we have:
Based on equations 3 and 7, we have:
It proves that the sum of the distances of the best team is at most twice that of the optimal team .
To solve Problem 2, we propose the following exact poly-nomial algorithm. The pseudo code of the algorithm is shown in Algorithm 2. The input of the algorithm is the same as the one for Algorithm 1. The output is the best team of experts with the lowest leader distance ( bestT eam ), its cost ( leastLeaderDistance ) and leader ( bestLeader ). The algorithm works as follows. Each expert in G is a candi-date for the leadership. For each node (expert) in graph G , denoted as leader ,a team and its leaderDistance are initialized in lines 5 and 6. Then, for each of the skills s , 1  X  i  X  p , the closest expert to leader with skill s and its distance to the leader are identified in lines 8 and 9. The identified expert is added to the team coupled with skill s i and the leaderDistance is updated accordingly in lines 10-11. After the team has all the required skills, if its leaderDistance is smaller than leastLeaderDistance ,the value of leastLeaderDistance , bestT eam and bestLeader are updated in lines 13-15. The bestT eam , leastLeaderDistance and bestLeader are returned in line 16. In summary, the al-gorithm selects a leader from all the nodes in G that has the smallest sum of the distances to all sets C ( s i )(1  X  i and forms the team using the expert in each C ( s i )thatis closest to the leader.
 C ( s j )) is O ( | C max | ), the time complexity of Algorithm 2 is O ( p  X | C max | X  n ), where p is the number of required skills, |
C max | =max | C ( s i ) | 1  X  i  X  p and n is the total number of nodes (experts) in G . One way to reduce the time com-plexity is to choose the leader from p i =1 C ( s i ). That is, the algorithm does not check all of the nodes in G but only the ones with the required skills. This can be done by adopting Algorithm 1 that finds the team of experts without a leader and returning the candidate node in the best team as the leader of the team. However, the team of experts generated in this way may not be an optimal team with respect to the leader distance because it does not check all the possible leaders in G . Similar to the proof of Theorem 2, it can be proved that the approximation ratio of the revised algorithm is two. Due to the space limit, we omit the proof. In the experiments, we use the exact algorithm, i.e., Algorithm 2, for finding the best team of experts with a leader. Algorithm 2 Finding Best Team with a Leader Input :graph G ,project P = { s 1 ,s 2 ,...,s p } and the set of experts with skill s i , C ( s i ), for i =1 ,...,p . Output : the best team, its cost and leader 1: leastLeaderDistance  X  +  X  2: bestT eam  X  X  X  3: bestLeader  X  X  X  4: for every leader  X  G do 5: leaderDistance  X  0 6: team  X  X  X  7: for i  X  1 to p do 8: distance  X  d ( leader, C ( s i )) 9: selectedExpert  X  N ( leader, C ( s i )) 10: team. add( s i , selectedExpert ) 11: leaderDistance  X  leaderDistance + distance 12: if leaderDistance &lt; leastLeaderDistance then 13: leastLeaderDistance  X  leaderDistance 14: bestT eam  X  team 15: bestLeader  X  leader 16: return bestT eam , leastLeaderDistance , bestLeader
Sometimes people are interested in finding more than one team with lowest communication costs to form up alterna-tive teams. Since it is infeasible to produce all the teams because the number of possible teams is exponential in the number of required skills, we propose a procedure for pro-ducing top-k teams of experts in polynomial delay. Our algo-rithm for producing a ranked list of results is an adaption of Lawler X  X  procedure [11] for calculating the top-k answers to discrete optimization problems. In Lawler X  X  procedure, the Table 1: Dividing the search space into disjoint sub-spaces for finding the teams of experts without a leader.
 search space is first divided into disjoint sub-spaces; then the best answer in each subspace is found and used to pro-duce the current global best answer. The sub-space that produces the best global answer is further divided into sub-subspaces and the best answer among its sub-subspaces is used to compete with the best answers in other sub-spaces in the previous level to find the next best global answer. Two main issues in this procedure are how to divide a space into disjoint subspaces and how to find the best answer within a (sub)space. Lawler proved that if these two issues are solved in polynomial time, the procedure generates ranked list of answers in polynomial delay [11].
We first informally describe the idea for dividing the search space into disjoint subsets using an example 5 . Suppose that the project consists of four skills, i.e., { s 1 ,s 2 ,s 3 want to find the top-k teams of experts without a leader. Let C ( s i ) be the set of experts in graph G that have skill s . Thus, the search space that contains the best answer can be represented as C ( s 1 )  X  C ( s 2 )  X  C ( s 3 )  X  this space, we can use Algorithm 1 for finding the best (ap-proximate) team in polynomial time. Assume that the best graph G which has skill s i . Basedonthisbestanswer,the search space is divided into 5 subspaces SB 0 , SB 1 , SB SB 3 and SB 4 as shown in Table 1, where SB 0 contains only the best answer. It should be noted that the subspaces are disjoint and their union covers the whole search space.
After finding the best answer and dividing the search space into disjoint subsets, the best answer in each subspace except SB 0 is found using Algorithm 1. These best answers are inserted into a priority queue, where the answers are ranked in ascending order according to their communica-tion cost. Obviously, the second best answer is the one at the top of the priority queue. Then, the top answer is re-turned and removed from the queue, its corresponding space is divided into subspaces and the best answer (if any) in each new subspace is added to the priority queue. This procedure continues until the priority queue becomes empty or the re-quired number of teams, i.e. k , is returned by the algorithm.
The pseudo code of algorithm that generates top-k teams without a leader is presented in Algorithm 3. The main body of the algorithm is similar to other polynomial delay algo-rithms discussed in [7, 13]. It is modified to perform in the setting of producing ranked teams of experts from a graph. In line 2, procedure F indBestT eam is called to find the best answer in space W in polynomial time. This procedure can be Algorithm 1 or one of the two algorithms introduced in [10], all having polynomial time complexity. It should be
Our approach for dividing a search space is similar to the idea used in [13].
 Algorithm 3 Algorithm for Generating Top-k Teams with a Leader in Polynomial Delay Input :graph G ;project P = { s 1 ,s 2 ,...,s p } ;numberof required teams k and the sets of experts each with a required skill W = { C ( s 1 ) ,C ( s 2 ) ,...,C ( s p ) } Output : the set of top-k ordered teams of experts printed with polynomial delay 1: Queue  X  an empty priority queue 2: A, cost  X  FindBestTeam ( G , T , W ) 3: if A =  X  then 4: Queue . insert ( A, cost, W ) 5: while Queue =  X  do 6: A, V  X  Queue . removeTop () 7: print ( A ) 8: k  X  k  X  1 9: if k =0 then 10: return 11: SV 1 , SV 2 , ..., SV p  X  ProduceSubSpaces ( A, V ) 12: for i  X  1 to p do 13: A i ,cost i  X  FindBestTeam ( G , T , SV i ) 14: if A i =  X  then 15: Queue . insert ( A i ,cost i ,SV i ) noted that W is the whole search space that contains all of the experts with their skills. Thus, the first best answer should be found in this space. If the best answer exists (i.e., A is not empty), A , together with its cost and related space W ,isinsertedinto Queue in line 4. The Queue is main-tained in the way that its elements are ordered in ascending order according to their communication costs. The while loop starting at line 5 is executed until the Queue becomes empty or k answers have been outputted. In line 6, the top of the Queue is removed, which contains the best answer in the Queue and the space that this answer is produced from. We assign this space to V and the best answer to A .The answer in A is outputted in line 7. If the number of answers has reached k , the algorithm terminates in line 10. In line 11, procedure P roduceSubSpaces produces p new subspaces based on the current answer A and current search space V . These subspaces are shown by SV i . In lines 12-15, for each of these new subspaces, the best answer is found and in-serted into the Queue with its cost and related subspace. As stated before, procedure F indBestT eam terminates in polynomial time. Thus, if procedure P roduceSubSpaces terminates in polynomial time, then Algorithm 3 produces answers in polynomial delay. The pseudo code of procedure P roduceSubSpaces is presented in Algorithm 4. It takes the best answer of the previous step, i.e. A , and the search space of previous step, i.e. V , as input. It produces p disjoint sub-spaces, SV 1 ,...,SV p , as output. In this procedure, SV specifies the j -th element of SV i . It is a polynomial proce-dure and runs in O ( p 2 ).
The procedure for finding the top-k teams with a leader is similar to Algorithm 3. But since the search space for the set of experts in G from which the leader is chosen, the search space is divided into p + 2 subspaces after the best answer is found (instead of p + 1 subspaces as in Algorithm 3). Table 2 illustrates the subspaces divided from the search Table 2: Dividing the search space into disjoint sub-spaces for finding the teams of experts with a leader. C is the set of experts in G . The leader of the best space after the first best team with a leader is found for the same example in Table 1. Both Algorithms 3 and 4 are changed to reflect the extension of the search space and difference in partitioning the search space. For example. P roduceSubSpaces takes also the leader of the best team and the previous search space for the leader as input. It produces p + 1 (instead of p as in Algorithm 4) subspaces. The F indBestT eam procedure should be Algorithm 2 and returns a leader in addition to the best team and its cost. Due to the space limit, we omit further details.
 Algorithm 4 Algorithm for Producing Sub Spaces Input : the best answer of previous step A = c 1 ,c 2 ,...c and set of experts which have the required skills V = { C ( s 1 ) ,C ( s 2 ) ,...,C ( s p ) } Output : p new subspaces SV 1 ,...,SV p 1: for i  X  1 to p do 2: for j  X  1 to i  X  1 do 3: SV j i  X  X  c j } 4: SV i i  X  V i  X  X  c i } 5: for j  X  i +1 to p do 6: SV j i  X  V j 7: return SV 1 ,...,SV p ,where SV i = SV 1 i  X  X  X  X  X  SV p i
In this section, we refer to the approximation Algorithm 1 as Best-SumDistance and Algorithm 2 as Best-Leader . For the purpose of comparison, we implemented two algo-rithms introduced in [10]. The first algorithm that mini-mizes the diameter of the team is referred to as Rarest-First and the second one that minimizes the weight of the MST of the team is referred to as Enhanced-Steiner [10]. All the algorithms are implemented in Java. The experi-ments are conducted on an Intel(R) Core(TM) i7 2.80GHz computer with 4GB of RAM.
The DBLP and IMDb data sets are used in our experi-ments. The DBLP graph is produced from the DBLP XML data 6 taken on June 24, 2010. The dataset contains infor-mation about a collection of papers and their authors. The set of experts and skills are generated in the same way as in [10] as follows. We only keep the papers of some major con-ferences in computer science: Data Base = { sigmod , vldb icde , icdt , edbt , pods } , Data Mining = { kdd , www , sdm , pkdd , icdm } , Artificial Intelligence = { icml , ecml http://dblp.uni-trier.de/xml/ colt , uai } and Theory = { soda , focs , stoc , stacs } .The set of experts consists of authors that have at least three papers in the DBLP. The skills of each expert is the set of terms that appear in the titles of at least two publications of the expert. Two experts are connected together if they have at least two papers together. The weight of the edge between two nodes n i and n j is equal to 1  X  X  p n i p n i is the set of papers of author (node) n i . The final graph has 5,658 nodes (experts) and 8,588 edges.

The part of the IMDb dataset used in our experiments contains information about the actors and the list of movies that each actor played in 7 . The titles of the movies and the names of the actors are specified in the dataset. We consider as experts the actors who have played at least eight movies from 2000 to 2002. The skills of each actor is the set of terms that appear in the title of a movie of the actor. Two actors are connected together if they played in at least four movies together. The weight of an edge is determined in the same way as for DBLP. The final graph has 6,784 nodes and 35,875 edges. Clearly, the graph of IMDb is denser than that of DBLP. We do not use movie genres as skills because the number of genres in IMDb is only 20 and many actors have played in a great portion of genres, which leads to generation of top-100 teams each with only one member since many actors have played in all the required genres. Although using terms in movie titles as skills may not be meaningful, the data set is still good to use for the purpose of comparing the algorithms in some performance measures.
The projects used in the experiments are generated as fol-lows. Each project is specified by a set of skills. We allow the number of skills in a project, i.e., p ,tovaryfrom4to 10. For each value of p , we randomly generate 100 projects and compute the average result obtained by each algorithm. Skills have different frequencies. The frequency of a skill is the percentage of experts in the social network that pos-sess the skill. The frequency of the skills in our experiments varies from 0.5 to 5.0 percent. Other values of skill fre-quency lead to similar conclusions. We run the top-k pro-cedures proposed in Section 5 using 4 different algorithms as the F indBestT eam procedure (i.e., Best-SumDistance , Best-Leader , Rarest-First ,or Enhanced-Steiner ). We experimented with different values of k from 1 to 100. When it is not varied, the value of k is set to 50 by default. Also, the same as in [10], if, for a project, the team produced by at least one of the algorithms does not lead to a connected graph, the result of this project is ignored.
We use two sets of performance measures to evaluate the quality of the teams produced by different algorithms. The first set contains three communication cost measures: (1) the diameter of the team, which is the largest shortest dis-tance between any two nodes in the team, (2) the cost of the minimum spanning tree (MST) on the subgraph of the team and (3) the sum of distances measure defined in this paper. Recall that Rarest-First is a greedy algorithm that aims at minimizing the diameter of the team, Enhanced-Steiner is an approximation algorithm that tries to min-imize MST, and Best-SumDistance is an approximation http://www.imdb.com/interfaces algorithm for minimizing the sum of distances. The purpose of using these performance measures is to see how well each algorithm minimizes each of these cost measures in compar-ison to other algorithms.

The second set of performance measures is for evaluating the team quality on the DBLP data set. It contains three metrics. The first one is the cardinality of the team. To reduce the communication cost of a project, we usually pre-fer teams with smaller cardinality [10]. The second metric is the number of common publications shared by at least two experts in the team, which is the number of the papers in DBLP co-authored by at least two experts in the team. The more common publications the experts have, the higher chance that they can communicate well with each other. The third metric is the skill count, defined as the average num-ber of times that a skill appears in the list of papers of an expert in the team, averaged over all the skills required in the project and over all the experts in the team. The higher the skill count, the more expertise the team has with respect to the set of skills in the project. The purpose of using these performance measures is to look at the quality of resulting teams from aspects different than communication costs.
Figures 2 and 3 show the results of the four algorithms in terms of the diameter, MST, and sum of distances costs of the top ranking teams on the DBLP and IMDb datasets respectively. Each bar represents the average cost of the top-50 answers from an algorithm over 100 randomly generated projects for a specific number of required skills. In each sub-graph, we also include the results of an exact algorithm that minimizes the cost metric used as the performance measure. For example, the results of the exact algorithm that min-imizes the diameter of the team on the DBLP data set is shown in Figure 2 (A) and is named as Exact-Diameter . Note that finding a team of experts that minimizes the di-ameter or MST is an NP-hard problem [10]. We proved that finding teams of experts which minimizes the sum of the dis-tances is also NP-hard. Thus, it is not possible to find the best team of experts that minimizes any of these measures in polynomial time. The exact algorithms use exhaustive search to find all the possible teams for each project, rank the teams based on their respective cost measure, and out-put the top ranking teams. The purpose of showing the exact algorithm results is to provide the ground truth for each measure and see how close each approximation algo-rithm performs to the ground truth.

As shown in the results, in almost all of the experiments, algorithms Best-SumDistance and Best-Leader outper-forms Rarest-First and Enhanced-Steiner on all of the three cost measures. Their results are very close to the op-timal answers produced by the exact algorithms whose per-formance is the best in each subgraph as expected. Note that although Best-SumDistance and Best-Leader do not minimize the diameter or the MST cost of the teams, they produce better teams with lower diameter and MST costs than Rarest-First and Enhanced-Steiner .Thisis due to the search strategy used in the Rarest-First and Enhanced-Steiner approximation algorithms: Rarest-First only checks the nodes having the skill with the low-est cardinality support [10], and Enhanced-Steiner starts with a random node from the set of skill holders [10]. Both algorithms might miss some good teams.

Between Best-Leader and Best-SumDistance ,there-sults of Best-Leader are a bit better. This is because Best-Leader evaluates all nodes in the graph for finding the best leader. Comparing the results of Best-SumDistance to those of Exact-SumDistance in subgraph (C) of Figure 2 or 3, we observe that although in theory the sum of dis-tances of an answer from Best-SumDistance can be twice that of the corresponding optimal answer, the difference is small in practice (less than 10% in the worst case). This indicates that the quality of the proposed approximation al-gorithm is high.
Figure 4 compares the four algorithms in terms of the car-dinality, the number of common publications and the skill count of the team. The results show that Best-SumDistance and Best-Leader outperforms Rarest-First and Enhanced-Steiner on all these metrics, that is, they produce smaller teams with higher number of shared publications and more expertise in the required skills. The results of Best-SumDistance and Best-Leader are very close to each other. Although our proposed algorithms do not explicitly optimize these metrics, they generate teams with higher quality than two other algorithms with respect to these metrics.

In order to see which cost function (diameter, MST, sum of distances and leader distance) is the best to optimize regardless of the search strategies (i.e., the approximation algorithms designed for them), we present in Figure 5 the results of the four exact algorithms in terms of the team car-dinality, common publication number and skill count. Note that the Best-Leader algorithm is an exact algorithm for minimizing the leader distance of a team. The results show that the MST and sum of distances functions have very sim-ilar performance in all the three metrics. Both of them are better than the diameter and leader distance functions in terms of team cardinality and common publication num-bers. The four functions perform almost the same on the skill count. The reason why the leader distance leads to a bit larger team and fewer common publications than the sum of distances and MST is that the selected leader may be an  X  X xtra X  member without a required skill.

Since it is not possible to have polynomial exact algo-rithms that minimize diameter, MST or sum of distances, how to design the approximation algorithm is important. The results in Figures 2, 3 and 4 indicate that our pro-posed polynomial algorithms (i.e., Best-SumDistance and Best-Leader ) for finding teams of experts with or with-out a leader outperform the existing approximation algo-rithms that minimize the diameter or MST function.
To test the scalability of the proposed algorithms, we generate DBLP graphs of different sizes by using different thresholds for the number of papers an expert has authored to determine whether a node (i.e., expert) should be in-Figure 6: Scalability of Best-SumDistance on DBLP. cluded in the graph. The threshold is set to 6, 5, 4 and 3 to generate graphs of 4 different sizes ranging from 2.2k to 5.6k nodes. Figure 6 (A) illustrates how the average run time of algorithm Best-SumDistance for producing one team changes with the number of nodes in the DBLP graph for different numbers of required skills. Although in the worst case (when all the experts in the graph possess a required skill), the run time is quadratic with respect to the number of nodes (as discussed in Section 3), in practice this rarely happens and we observe that the run time increases (almost) linearly when the number of nodes increases. Figure 6 (B) shows how the average time for producing one team (which is the total run time divided by k ) changes with k , i.e., the number of top teams produced. Obviously, the time does not change with the value of k , which indicates that the to-tal run time of our top-k algorithm grows linearly when k increases. This indicates that Best-SumDistance and our top-k procedure scale well with the number of nodes and k values. Due to the space limit, the results of Best-Leader are not presented. But they showed similar trends.
We compare the algorithms through an example. We form a project by randomly selecting 4 keywords as the required skills from the paper titles listed on the  X  X wards X  page of the CIKM 2010 web site 8 . The keywords are multilingual , inter-face , ranking and constraints . The best team formed by each algorithm is shown in Table 3. The common publication number (denoted as Pub. No )ofboth Best-SumDistance http://www.yorku.ca/cikm10/awards.php and Best-Leader is 3 while it is 0 for Rarest-First and Enhanced-Steiner . Also, Best-SumDistance and Best-Leader produce teams with less MST and sum of distances costs than Rarest-First and Enhanced-Steiner .Allthe teams have the same diameter in this example.
Discovering a team of experts from a social network has been introduced in [10]. Authors of [12] generalize this prob-lem by associating each required skill with a specific number of experts. However, they do not provide an approximation ratio for their heuristic algorithms. Authors of [1] proposed methods for finding teams of experts in which the load of the experts are balanced in the presence of several tasks. They do not consider finding teams with low communica-tion cost. In this work, we extend the work of [10] in several directions as follows. Two new communication cost func-tions are proposed. An approximation algorithm which find the best team of experts is proposed. The problem of find-ing a team of experts with a leader is defined. A procedure for producing top-k teams of experts is also designed.
The team formation problem has been studied in the op-eration research community. The authors use branch and bound, genetic algorithms and simulated annealing to solve the problem [4, 14, 5]. The authors of [3] study the dynamics of group formation procedures and how they affect on the formation of groups in the network. In a later work, authors discuss this problem from a game-theoretic point of view [8]. The basic difference between our work and the works in op-eration research is that they do not assume the existing of a social network behind the experts.

The problem of keyword search in graphs takes a consid-erable amount of attention in the database community in re-cent years [7, 13, 9]. Each node in the graph consists of some keywords. The purpose is to find a subgraph that covers the input keywords and whose nodes are close to each other, which is similar to the objective of team formation in social networks that minimizes the team communication cost. The leader distance function defined in this paper has not been used in either team formation or keyword search. Also, in algorithms for keyword search over graphs, a threshold is usually set for the maximum distance between two nodes in a final answer [13], but it is not used here.
We studied the problem of discovering a team of experts from a social network that minimizes the communication cost among team members. We defined two communication cost functions and proposed an approximation algorithm for finding the best team of experts without a leader that min-imizes the sum of distance function. We proved that the approximation ratio of the algorithm is 2. We also defined the problem of finding a team of experts with a leader and proposed an exact polynomial algorithm to solve this prob-lem. In addition, we proposed procedures for producing top-k teams of experts with or without an expert in polynomial delay. Our experiments on two real data sets showed that the proposed algorithms produce teams with lower commu-nication costs than two existing approximation algorithms. We also showed that our algorithms produce smaller teams with more common publications and more expertise in the required skills than the two existing approximation algo-rithms on the DBLP dataset. In the future, we will explore how to incorporate constraints in team formation in social networks. [1] A. Anagnostopoulos, L. Becchetti, C. Castillo, [2] E. M. Arkin and R. Hassin. Minimum-diameter [3] L. Backstrom, D. Huttenlocher, J. Kleinberg, and [4] A. Baykasoglu, T. Dereli, and S. Das. Project team [5] E. Fitzpatrick and R. Askin. Forming effective worker [6] R. Goldman, N. Shivakumar, S. Venkatasubramanian, [7] K. Golenberg, B. Kimelfeld, and Y. Sagiv. Keyword [8] M. Jackson. Network formation . The New Palgrave [9] M. Kargar and A. An. Keyword search in graphs: [10] T. Lappas, L. Liu, and E. Terzi. Finding a team of [11] E. Lawler. A procedure for computing the k best [12] C. Li and M. Shan. Team formation for generalized [13] L. Qin, J. Yu, L. Chang, and Y. Tao. Querying [14] H. Wi, S. Oh, J. Mun, and M. Jung. A team formation
