 1. Introduction
Considerable research has investigated automated searching assistance in hopes of resolving some of the issues users have when interacting with information retrieval (IR) systems. These searching issues include failure to find sufficient relevant information and not understanding searching features of the system.
Although many IR systems contain advanced features that may improve the IR process, users seldom uti-lize these features or have difficulty implementing them. Automated assistance systems attempt to assist the user during the search process by either executing search tactics for or offering assistance to the user in or-der to locate relevant information. The success of these intelligent systems depends in part on their ability to generate appropriate advice or action at opportune times.
 There has been little empirical research into when in the search process to provide automated assistance.
Thus, it is not clear whether or to what extent that automated assistance is of actual benefit to searchers at various stages of the information searching process. We also do not know when searchers actually desire assistance from the system. The research results presented in this article address the frequency of user inter-action with automated assistance, when they view this assistance and when they implement the assistance.
This knowledge can improve the design of future IR systems by personalizing and timing assistance to im-prove the effectiveness of the search process.

We begin with a review of literature concerning intelligent IR systems, explanation systems, contextual help systems and intelligent IR interfaces. Using various but related methods, these systems attempt to aid the searcher during the searching process. We then provide a short description of the automated assistance system we developed and utilized in an empirical study. Following this, we discuss the evaluation identify-ing the interactions during the search process between the users and automated assistance. We present the results of our evaluation and the implications for IR system design, along with a discussion of directions for future research.

From a synthesis and analysis of the literature presented in the next section, we provide a general def-inition of automated assistance. Automated assistance as a concept within information searching (IS) is not clearly articulated despite the significant body of research on IS models (e.g., Beaulieu, 2000 ; Belew, 2001 ;
Cool, 1992 ; Saracevic, 1996 ) and IS within hypertext environments ( Choo &amp; Turnbell, 2000 ; Marchionini, 1995 ), along with search tactics (e.g., Bates, 1979, 1989 ; Belkin, Oddy, &amp; Brooks, 1982 ) and user studies (e.g., Siegfried, Bates, &amp; Wilde, 1993 ). Discussing explanation systems, Johnson and Johnson (1993) note that few researchers have defined  X  X  X xplanation X  X . Examining intelligent interfaces, Mizzaro (1996) notes that there is no theoretical foundation for the functionalities of intelligent interfaces for IR, and Bates (1990) argues for searcher systems that are inline with searcher preferences.

Withinthesystemdevelopmentarea,researchersgenerallydonotdefineautomatedassistance,ortheypre-sentadescriptionthatisinlinewithaparticularsystem. Meadow,Hewett,andAversa(1982b) statethattheir system can  X  X  X ell when the human makes a mistake, provide supporting information, or offer, general advice on how to proceed. X  X  Belkin (1988, p. 138) defines explanation as  X  X  X rimarily prompted justification of inter-mediaryactivities,orunpromptedexplanationofsystemcapabilitiesandcharacteristics. X  X  JohnsonandJohn-son (1993, p. 159) define intelligent interfaces as having the  X  X  X bility to assist users in their tasks and can be seen to display context sensitive behavior. X  X  Oakes and Taylor (1998, p. 645) state that automated assistance  X  X  X ssist the nonexpert user in the formulation of ... search statements. X  X  Taking a script-based approach, Bel-kinetal.(1995,p.10) say, X  X  X hesescriptswouldcharacterizethemostusual,ormosteffective,orinsomesense standard means by which the user and the rest of the system interact. X  X  Mizzaro (1996) presents a matrix of functionsthatintelligentinterfacesforIRtypicallypossess. Belkinetal.(2001,p.1) seesintelligentIRas X  X  X he machine (orprogram)doingsomethingfortheuser,orthemachine(orprogram)takingoversomefunctions that previously had to be performed by humans (either user or intermediary). X  X 
We believe that these and similar definitions of automated assistance are narrowly focused on a partic-ular methodology, system, or viewpoint. Therefore, one cannot easily integrate the concept of automated assistance into existing models of IS. As information systems become more active participants in the search-ing process, models of this process must begin including system actions and responses. What is needed is a more general definition that is not system based and is inline with existing IS models. With this in mind, we define automated assistance as: Aview of automated assistance containing these elements of evaluation, dialogue and time will facilitate the incorporation of automated assistance into IS models. Many IS models view the interaction between a searcher and system as a dialogue ( Saracevic, 1997 ) with a temporal element (e.g., Beaulieu, 2000 ; Belew, 2001 ; Belkin et al., 1995 ; Brajnik et al., 1987 ; Ingwersen, 1992 ; Kuhlthau et al., 1992 ; Saracevic, 1996 ).
External metrics measuring the effectiveness of the IS process are usually relevance-based ( Saracevic, 1975 ), such as precision, recall ( Salton &amp; McGill, 1983 ) or shortest path ( Cooper, 1968 ). 2. Literature review
The IS process is a special form of human computer interaction, with its own unique operational tasks ( Beaulieu, 2000 ), and IR systems are a special form of information systems. People use these IR systems in an attempt to locate information relevant to their information need. Many searchers have difficulty effectively utilizing IR systems ( Jansen, Spink, &amp; Saracevic, 1998 ; Yee, 1991 ). Issues include finding appropriate query terms, retrieving too many results, not retrieving enough results, and retrieving zero results ( Yee, 1991 ), among many others. These issues occur across the spectrum of IR systems, including online public access catalogs ( Peters, 1993 ) and Web systems ( Jansen et al., 1998 ). Although there has been considerable research and development incorporating advanced searching features into these IR sys-tems, users generally do not use these features ( Hunter, 1991 ) and have problems with them when they do ( Jansen et al., 1998 ). Researchers have referred to systems designed to assist the user with searching issues and to better utilize advanced searching methods by a variety of names, including intelligent IR systems, explanation systems, intelligent interfaces, agent-based systems, contextual help systems, recom-mender systems, and relevance feedback systems. We collectively refer to all of these as automated assist-ance systems.

Meadow, Hewitt, and Aversa (1982a) and Meadow et al. (1982b) present one of the first accounts of a system using contextual help. The system provides searching instructions and diagnostic help. Croft and
Thompson (1986) developed a user modeling system where the user supplied a natural language query or relevant document as a seed. Chen and Dhar (1991) developed a system for key word selection and the-saurus browsing. OddyandBalakrishnan(1991) developed anetworked X  X odeledsystem whereanapproxi-mately one million node-and-edge network represented 10,000 document abstracts. In what appears to be the first published use of the phrase automated assistance in the IR literature, Oakes and Taylor (1998) de-signed an automated assistance system for pharmacology offering query formulation options.

In efforts using new interfaces, researchers ( Brajnik et al., 1987 ) implemented an adaptive IR interface that utilizes natural language queries. OAKDEC ( Meadow, 1988 ) is a front end to a database management system that suggested to users what searching tactic to employ. Also utilizing intelligent interfaces, Gauch and Smith (1993) developed an expert system interface for a rudimentary IR system. In one of the few user evaluations of these types of systems, the researchers noted no improvement in precision, but they did note a reduction in the number of queries to achieve comparable results.

Herlocker, Konstan, and Riedl (2000) examined methods to design intelligent systems. Within the field of automated collaborative filtering, the researchers examined the optimal degree of transparency for sys-tems offering automated assistance. They concluded that automated assistance could be a valuable compo-nent of a system. However, their user evaluation did not indicate any improvement in system performance.
Brajnik, Mizzaro, Tasso, and Venuti (2002) take a collaborative coaching approach in designing the FIRE system.

Focusing on Web systems, Google ( http://www.google.com ) offers spelling assistance with a Did you mean function. Alta Vista ( http://www.altavista.com ) offers spelling assistance, also with a Did you mean function, and term relevance feedback with its Prisma feature. Middleton, Roure, and Shadbolt (2001) investigate the issue of capturing user information preferences in the hypermedia environment. The researchers took the approach of unobtrusively monitoring users  X  browsing behaviors. They then used a machine learning approach coupled with an ontology representation in an attempt to extract user informa-tion preferences. Their system calculated a correlation between browsed Web pages and information topics, calculating a topic history weights.

Using agents, several researchers have explored intelligent IR systems for the Web, including Letizia ( Lieberman, 1995 ) and Alexa ( Kahle, 1999 ) to aid in the browsing process. ResearchIndex uses agents to recommend articles based on a user profiles ( Lawrence, Giles, &amp; Bollacker, 1999 ). Chen, Meng, Fowler, and Zhu (2001) developed an intelligent Web meta-indexer for Web searching.

From a review of the literature, it is apparent that there has been much work into developing IR systems that offer some type of automated assistance. However, there has been little evaluation of these systems.
Evaluation is absolutely critical in order to understand when and how searchers utilize these systems during the searching process. From this understanding, one can develop systems that provide the proper type of assistance, offer it when it is most beneficial to or at least desired by the user, and also identify system fea-tures that are not helpful to users.

In this research, we developed a system that provides personalized and timed automated assistance for searchers using IR systems. In an evaluation, we then analyzed the user interactions with the automated assistance in order to investigate when in the IS process users are open to intervention by the system. 3. Research questions
In our research, we are interested in improving the search experience for the user by developing auto-mated assistance systems that provide the proper type of assistance and offer it during the search process when it is most beneficial to the user. Our rational is that the user will be more open to assistance from the system and may then engage some of the advanced searching features that current IR systems offer. In order to achieve these goals, we investigate three research questions, which are: a. How often do users seek and implement automated assistance in the search process? b. Where in the search process do users seek automated assistance? c. Where do users implement automated assistance in the search process? 4. System development
We designed and developed a software application to integrate with a variety of existing IR systems. This application gleans information solely from typical user X  X ystem interactions during the search process, using these interactions to determine what assistance to provide. In this respect, our approach is similar to pre-vious work of Kamba, Bharat, and Albers (1993) who used user actions to personalize an online newspa-per, Go  X  ker (1999) who used user context to help determine information need, and Oard and Kim (2001) who classified types of implicit feedback for recommender systems. We present a brief overview of the sys-tem with a complete description presented in Jansen and Pooch (2003) . 4.1. Development
The system builds a model of user X  X ystem interactions using a technique similar to that utilized in some adaptive hypermedia systems. In adaptive hypermedia, a model of the user is represented by a set of pairs area. In our system, an action X  X bject pair ( a , o ) captures an instance of a user X  X ystem interaction, where a is an action taken by a searcher and o is the object that receives that action. Aseries of ( a , o ) pairs models a searcher  X  s chain of interactions during the session. Using this series, the system can make determinations of the user  X  s information need and provide appropriate assistance by associating certain actions with specific types of assistance.

Using the ( a , o ) pairs methodology has several advantages compared to other methods of gathering information from a user during a session. One advantage is time. Some automated systems build a model of the user  X  s information need and then take action or provide suggestions for the user ( Maes, 1994 ). The basis of this approach is usually relative long-term interaction between the user and the system. Unfortu-nately, most interactive sessions between searchers and Web IR systems are typically extremely short both sen &amp; Spink, 2003 ). For example, Jansen and Spink (2003) have shown that 26% Web search sessions are approximately 5 min or less. Relying solely on user X  X ystem interactions, the ( a , o ) pairs methodology can immediately begin forming a model of the user  X  s information need.
 Asecond advantage is that the ( a , o ) pairs methodology utilizes the full range of searcher X  X ystem dia-logue. In the traditional view of IR interaction, the query is usually the only source of information from the user. Other techniques for gathering information (e.g., answering questions, completing profiles, judg-ing relevance judgments) require the user to take additional actions beyond those typical of user interac-tions during an online search (e.g., Croft &amp; Thompson, 1986 ; Gauch &amp; Smith, 1993 ; Koenemann &amp; Belkin, 1996 ). Using ( a , o ) pairs, the user  X  s query is not the sole representation of the information need.
The system obtains addition information is obtained with user actions, such as bookmarking, printing, emailing, etc. without requiring the user to take additional actions that divert attention from the search process.

The application currently monitors the searcher  X  s interactions with the system, logging actions of book-mark , copy , print , save , submit ,and view results . There are currently three objects that the system currently recognizes, which are documents , passages from documents , and queries .

When a session begins, the system monitors the user for one of the six actions, via a communication line using an application program interface (API), a technique commonly used to integrate software programs.
When the system detects a valid action, it records the action and the specific object receiving the action. For example, if a searcher was viewing this _ document and saved it, the system would record this as ( save this _ document ). The system then offers appropriate search assistance to the user based on the particular ac-tion and the system  X  s analysis of the object. In this example, the system would offer the searcher relevance feedback terms to the user from this _ document . The more ( a , o ) pairs the system records and integrates these pairs, the more complex the model of the information need. 4.2. Assistance offered
We focused on five user X  X ystem interaction issues and corresponding system assistance, which we present in Table 1 .

Our system design aim was the development a system with automated assistance representing the general state of the art in order to provide a realistic environment for the evaluation of searcher X  X ystem interaction. We believe the methods we use are generally effective for our research goals.
 4.3. Application modules The automated assistance system has three major modules, as Fig. 1 displays.

The Process Query module records ( a , o ) pairs in a transaction log. When a session begins, the module checks to see if the transaction log is empty and if not, it empties it. While the user is logged in, the user log saves the user  X  s actions and source to the file log, adds to the list the action query and the corresponding query for that particular action, and appends to the list if the user bookmarks, saves, prints, or copies a section of text and the source of that action. The Process Query module stores these actions and objects until the Feedback module accesses the transaction log and retrieves the actions and the objects.
The Retrieve Results module receives results from the search engine and passes the results to the Feed-back module. One can modify the second of two modules for the particular search engine and graphical user interface. The Retrieve Results module accepts the results from the search engine. It then reformats the search results to a form suitable for the particular interface, which the application does not need if the interface already does this. Once the search engine returns the results, the Feedback module begins its analysis.

The Feedback module provides five types of information to the user. It offers (1) spelling suggestions for query terms, (2) terms from the query that have not appeared in the current results list nor in any former results list (i.e., a special case of out-of-vocabulary terms), (3) synonyms for query terms along with con-textual definitions, and (4) suggestions to improve query structure. Once the user looks at a document from the results list, the application provides (5) relevance feedback on that document and returns a list of terms from the document that the user may want to add to the query. In order to provide minimal interruption of the searching process, the assistance is display with the search results. 4.4. Assistance interface
The system communicates with the user via a button appearing on the interface. If the user selects the automated assistance button, the assistance appears in a dialog box, along with a brief explanation of each type of assistance. Once the user views what the system has to offer, the button disappears until the system has more assistance to offer. The user can ignore the assistance with no impact on the normal operation of the interface or IR system. For this experiment, the system offered aid whenever assistance was available.
Fig. 2 shows the interface, dialog box, and text blocks with explanations. 5. Empirical evaluation
In this section, we describe the empirical evaluation we conducted to investigated our three research questions. We pilot tested the application using four subjects to ensure the effectiveness of the system and the evaluation design. We made changes in the system, primarily dealing with the presentation of the assistance. 5.1. Evaluation design The IR system we utilized for the empirical study was MG ( Witten, Moffat, &amp; Bell, 1994 ) with a TCL/
TK hypertext Web browser. We modified no MG code to integrate the automated assistance application with the MG system, other than establishing the API. We installed the IR system on a SPARC book 3 run-ning Solaris 2.5. The subjects for the evaluation were 30 freshman college students (26 males and 4 females) in their second semester at a four-year undergraduate university. For this experiment, the system offered assistance whenever assistance was available.

The document collection we utilized for the evaluation was the Text REtrieval Conference (TREC) vol-umes number 4 and 5. The document collection is approximately 2 GB, containing approximately 550,000 documents. The randomly selected topics we used for this evaluation were Topic 301 :International Organ-ized Crime and Topic 340 :Land Mine Ban . There were 474 relevant documents for Topic 301 :International Organized Crime in the document collection. There were 81 relevant documents for Topic 340 :Land Mine
Ban for total of 555 (0.01%) relevant documents in the collection. We chose two topics to provide some searching variety in terms of focus and difficulty.

We provided each of the subjects a short statement instructing them to search on a given topic in order to prepare a report and the TREC definition of relevance judgment for TREC documents. The subjects had 5 min to find as many relevant documents as possible. We determined the length of the search session by measuring the length of time it would take to implement a  X  X  X ypical X  X  Web search session, as outlined in Jan-sen, Spink, and Saracevic (2000) . Web research has also noted a large percentage of Web sessions of 5 min or less. Jansen and Spink (2003) report that more than 26% of all Web sessions were 5 min or less. In a study of AltaVista searchers, Jansen, Spink, and Pederson (in press) note that more than 70% of searcher sessions are 5 min or less.

We notified each of the test subjects that the system contained an automatic feature to assist them with their searching. When the system had searching advice to offer, an assistance button would appear on the browser. The user could access the assistance by clicking the button, or they could ignore the offer of assist-ance with no detrimental effect on the system. We gave each subject one of the two search topics and the one paragraph explanation provide by the TREC collection. We directed the subject to search as when con-ducting online research.

We videotaped the users during the searching process, and a transaction log recorded user X  X ystem inter-actions. In order to add further robustness to the analysis, we instructed the subjects to think out loud dur-ing the searching process. Although transaction logs are excellent data collection tools, one should use transaction logs in conjunction with other data collection methods whenever possible ( Borgman, Hirsh, action log recorded 503 interactions for the 30 subjects.

In analyzing the video, we coded the utterances using verbal protocol analysis ( Ericsson &amp; Simon, 1984 ), specifically the thinking-aloud protocol where the verbalization occurs in conjunction with a task. We used these coded utterances to clarify user interactions with the system recorded by the transaction log. After the search session, each searcher completed a subjective evaluation of the automated assistance. The combina-tion of the protocol analysis, TL, and user evaluations provided a robust data source to conduct our analysis.

For the analysis presentation, we used 10 s for the temporal granularity, which permitted us to annotate each interaction within its own time hack. With these time periods, we could conduct cross sectional anal-ysis of interactions that may have occurred ten seconds or less apart. Aperiod larger than 10 s would in-clude more than one user X  X ystem interaction within some periods. Aperiod smaller than 10 s introduces unnecessary empty periods in the analysis. Other researchers have noted this very short temporal interac-tion period. Kelly and Belkin (2001) also reported a 10 s interaction period. Jansen and Spink (2003) noted that a sizable percentage of Web search engine users spend less than 30 s interacting with the search engine per session. If an interaction exceeded 10 s in duration, we counted it only once, in the period that the searcher initiated the interaction.

In analyzing the transaction logs and video, we explored the use of tools specifically designed for obser-vational data analysis, specifically MacSHAPA ( Sanderson, Scott, Johnston, &amp; Mainzer, 1994 ); however, modern spreadsheet programs have much of the needed functionality for this type of empirical analysis. We coded each interaction between the user and the IR system. For our analysis, we performed the pattern rec-ognition of the codes and follow-on calculations using Microsoft Excel and Visual Basic for Applications (VBA) scripts. We used Microsoft Bayesian Network (MSBNx) for the manipulation and creation of the
Bayesian probability models. 6. Results
We first present data on the categories of user X  X ystem interaction and frequencies of occurrence. The results of a pattern analysis of the user X  X ystem interaction follows. 6.1. User X  X ystem interaction taxonomy
We identified the specific user actions on the system using the transaction log, supplemented by coded protocols from the video analysis. Jansen and Kroner (2003) reported initial results of this section. These interactions relate to searcher tasks during the search process. From this task analysis, we developed a tax-onomy of user X  X ystem interactions, as shown in Table 2 .

We identified seven categories, shown in Table 2 , which account for 99.66% (501) of all user interactions with the system. There were 2 user actions that this taxonomy does not describe. There was one action to resize the browser and one action to access the normal help features of the system. Accounting for these two actions, there were 503 user interactions with the system representing 55.9% of the 899 possible observation periods. There were 396 periods (44.1%) where no interaction occurred. During these periods, the users were involved in some individual process, such as evaluating the assistance, processing information from a document, or determining the next interaction, etc., that did not involve physical interaction with the system.

We did not engage multiple reviewers in the classification exercise since the interactions are nearly binary (e.g., a particular interaction occurred or it did not occur). Descriptions of the taxonomy categories are:  X  View Results Page : Interaction in which the user viewed or scrolled one or more pages from the results listing. If a results page was present and the user did not scroll, we counted this as a View Results Page.  X  View Particular Document : Interaction in which the user viewed or scrolled a particular document in the results listings.  X  View Offered Assistance : Interaction in which the user viewed the assistance offered by the application.  X  Execute Query : Interaction where the user entered, modified, or submitted a query without visibly incor-porating assistance from the system. This category includes submitting the original query, which was always the first interaction with system.  X  Implement Assistance : Interaction where the user entered, modified, or submitted a query utilizing assist-ance offered by the application.  X  Navigation : Interaction where the user activated a navigation button on the browser, such as Back or
Home.  X  Action Indicating Relevance : Interaction such as print, save, bookmark, or copy.

Addressing our first research question (e.g., How often do users seek and implement automated assist-ance in the search process?), Table 2 shows the users accepted the offer of assistance 76 times (15.1% of all user X  X ystem interactions) or 54% of the 141 times the system offered assistance. All 30 subjects viewed the assistance at least once.

The mean number of interactions with the application per subject was 3.67 with a standard deviation of 2.91 interactions. The searchers implemented the assistance 63 times (12.5% of all user X  X ystem interaction and 82% of the times viewed) for an average of 2.1 interactions per searcher with a standard deviation of 2.41. There were three users (10%) of the 30 that did not implement any assistance offered by the application.

The search process is composed of multiple interactions. Asearcher enters a query, evaluates the results list or individual results. If the searcher does not locate documents or enough documents to satisfy the information need, the searcher may mentally reformulate the query, repeating the process ( Robertson, 1977 ). This search process unfolds sequentially over time. Each interaction is discrete, but not necessarily independent. Therefore, in order to understand how searchers interact with automated assistance, we also analyzed these interactions within a process unfolding overtime.
 We present a temporal view of when in the search process searchers interacted with the system in Fig. 3 .
As we see in Fig. 3 , there are corresponding peaks and valleys between viewing the assistance and imple-menting the assistance. There is also a noticeable lag between the two categories. There was a reduction in the viewing of the automated assistance after the initial period representing a drop of approximately 9% between the first and second periods. The implementation of assistance held relatively steady until the last period, where it dropped off substantially. Table 3 displays the numbers of occurrences of View Assistance and Implement Assistance by minute of the search process. 6.2. Patterns of user X  X ystem interaction
In order to address the second (e.g., Where in the search process do users seek automated assistance?) and third (e.g., Where in the search process do users implement automated assistance?) research questions, we examined the transitions between interaction categories using exploratory sequential data analysis ( Sanderson &amp; Fisher, 1994 ). We examined these first at the single transition (i.e., users moving from one category to another category) and then at multiple transitions (i.e., users moving from one category to a second category to a third category, etc.).
Table 4 illustrates an example of the transition analysis we conducted. Column 1 is the entire code se-quence ofone user  X  s actions during the session (see Notes below Table 4 ). The other columns along the rows contain the set of all sub-patterns derived from that sequence at the single transition and two transaction levels of analysis.

In Table 4 , the user sequence EVADNEVEAIV is composed of a sequence of 10 single-transition pat-terns (e.g., EV, VA, AD, etc.) and a sequence of 9 two-transition patterns (e.g., EVA, VAD, ADN, etc.).
We conducted this analysis for all 30 users. We utilized an automated VB Ascript to identify the transition patterns within each sequence. To test the accuracy of the script, the single and two transitions patterns were manually generated for two randomly selected user sequences. The outcomes were identical. So, we feel comfortable that our script is accurate.

In addition to the one and two transition patterns, we also identified the three transition patterns; how-ever the most common View Assistance pattern occurred less than 3% of the time and the most common
Implement Assistance occurred approximately 4% of the time of all patterns. Given these low levels of occurrences, we did not examine these or lengthier transition patterns further. Prior research has also noted little gain from lengthy patterns ( Marchionini, 1989 ). 6.3. Single transitions
Using our taxonomy, we identified the action immediately preceding a user requesting assistance and the action immediately preceding a user implementing the assistance. We coded each transaction from the first category to the second category taken by each user, assigning a code to each category-to-category pair. The codes we used are: (1) E X  X  X xecute query; (2) V X  X  X iew results; (3) A X  X  X iew assistance; (4) I X  X  X mplement assistance; (5) D X  X  X iew document; (6) R X  X  X elevance action; and (7) N X  X  X avigation.

There were 37 unique patterns with 780 total pattern occurrences. From these occurrences, we isolated the patterns that terminated with a View Assistance ( A )or Implement Assistance category ( I ). There were six unique View Assistance transition patterns with a total of 76 occurrences. For Implement Assistance ( I ), there were five unique transition patterns with 59 total occurrences. Table 5 displays the results of this analysis.

In Table 5 , column 1 is all occurring initial categories. Each cell in column 2 is the number of unique patterns that begin with a particular category. Column 3 is the number of occurrences for those unique pat-terns. Column 4 is the number of pattern occurrences terminating with View Assistance ( A ), along with the percentage relative to the total occurrences with that Initial State. Column 5 is the number of pattern occur-rences terminating with Implement Assistance ( I ), along with the percentage relative to the total occurrences with that Initial State. For example, row 1 shows that there were six unique single-transition patterns begin-ning with the category View Document ( D ). For these six unique patterns, there were 76 total occurrences, of which 11 (14.5%) were of the pattern View Document  X  View Assistance ( DA ) and none were of the pattern View Document  X  Implement  X  Assistance ( DI ).

The most common View Assistance pattern was the View Results  X  View Assistance ( VA ) pattern, which represented 38% of all View Assistance pattern occurrences. The Relevance  X  View Assistance ( RA ) and Nav-igation  X  View Assistance ( NA ) patterns also had relatively high occurrence rates of 36% and 25%, respec-tively; although numerical the RA only occurred four times.

For implementing assistance, the most commonly occurring pattern was View Assistance  X  Implement ( AI ) pattern, which occurred 67% of the time. The Navigation  X  Implement ( NI ) also occurred fairly frequently at 17%.

Figs. 4 and 5 display the Bayesian graphs of the single-transition patterns, terminating with View Assist-ance ( A ) and Implement Assistance ( I ) respectively. 6.4. Multiple transitions
We next analyzed dual transition patterns, where the searcher went from one category to a second cat-egory to a third category. There were 92 unique two-transition patterns and 445 two-transition occurrences.
We were interested in the two-transition patterns that terminated with the user viewing the automated assistance and implementing the automated assistance. The results of our analysis are displayed in Tables 6 and 7 .
 In Table 6 , column 1 lists multiple transition patterns we identified where the next category was a View
Assistance state ( A ). We include only the patterns that occurred more than once. Column 2 is the number of unique patterns that begin with the transition pattern in column 1. Column 3 is the total number of occur-rences for these unique patterns. Column 4 is the number of pattern occurrences terminating with View
Assistance and the percentage relative to the total occurrences for that single-transition pattern. For exam-ple, row 1 shows that for that there were five unique two-transition patterns beginning with Execute Query  X 
View Results ( EV ). Of these five unique patterns, there were 55 total occurrences of which 29 (52.7%) were of the pattern Execute Query  X  View Results  X  View Assistance ( EVA ). Table 7 displays similar information for the Implement Assistance patterns.
 For View Assistance , the most frequently occurring pattern was EV Arepresenting 52% EV patterns.
IV Awas also a frequent occurrence at 29%, as was VD Aat 20%. Other patterns, such as EI Ahad high percentages but occurred very infrequently. For Implement Assistance , the most frequently occurring pat-tern was VAI at 58% of all VA patterns. The remaining seven patterns terminating with Implement Assist-ance had very low occurrence rates, although some of the percentages of occurrences were very high (e.g., DVI with seven occurrences representing 70% of all DV patterns).

Figs. 6 and 7 display the Bayesian graph of the two-transition patterns terminating with View Assistance and Implement Assistance . 7. Discussion
For this research, we were interested in when in the search process searchers desire active involvement from the system, versus preferring to search without assistance. We investigated and analyzed users inter-acting with an automated assistance application. Returning to our research questions, we first investigated how often users seek and implement automated assistance. In this evaluation, the searchers interacted with the automated searching assistance 54% of the time (76 of the 141 offers). All 30 subjects viewed the assist-ance at least once. The implication of these results is that users will seek assistance if offered but also have a preference to work through the searching process on their own.

Searchers reject the offer of assistance nearly 50% of the time (46); however, searchers also implemented the assistance 82% (63) of the times they viewed the assistance. Therefore, although users may exhibit ten-dencies suggesting that they prefer to search without assistance, if the system provides assistance, users gen-erally implement it. It also indicates that the users perceived the offered assistance as beneficial.
The temporal examination of the data shows that the searchers viewed and utilized the automated assist-ance more in the beginning of the search process, relative to later in the search process. After the initial surge, the level of interaction stabilizes. Users appear to settle into a comfortable level of interaction after the initial period of exploration. The initial surge in viewing may be due a novelty factor of the assistance. There was a drop in the final periods of searching, probably due to the effect of the time factor.
Investigating where in the search process users view assistance and when they implement it, there are certainly re-occurring patterns. Fifty-seven percent (57%) of all accesses to the automated assistance oc-curred after viewing the results listings. This would indicate that the users make some determination of the relevance of the results based solely on the meta-data presented in the results list. So, one might be able to develop a system using the meta-data from the result page and a searcher  X  s reaction to that meta-data.
Twenty-five percentage of the time, searchers viewed assistance occurred after a Navigation action, indicat-ing that navigation actions may indicate indecision, frustration, or a transition point for searchers. Inter-estingly, searchers viewed assistance 36% of time after locating a relevant document. The initial success may lead to a desire to locate more relevant documents.

Users most commonly implemented the assistance immediately after viewing the feedback. However, perhaps surprisingly, users took some other action 22% of the time before implementing the assistance. This would again indicate that a sizable set of users, even after viewing assistance, prefer to attempt to proceed in the IS process on their own first. Even in these cases, however, they will eventually implement the assistance.

Over 53% of the time, searchers will View Assistance following an Execute Query  X  View Results ( EV )pat-tern, without viewing any documents. Again, this is an indication that the searchers are reviewing the meta-data from the results pages, and finding nothing that appears relevant, they seek assistance from the system. This apparent behavior occurs again with the Implement Assistance  X  View Results ( IV ), followed by View
Assistance . In this pattern (29% of all View Assistance patterns), searchers seek addition assistance from the system based solely on the results listing. Again, there was a high occurrence of seeking system assist-ance after locating relevant information, with View Document  X  Relevance Action  X  View Assistance ( DRA ) being 44% of all DR patterns.

Using these results, we are updating the automated assistance component to offer assistance at the most appropriate location in the search process. In the updated version, system logs the ( a , o ) pairs, generating searching advice as before, but the system offers the assistance to the user only after detecting a Execute
Query  X  View Results ( EV ) and Implement Assistance  X  View Results ( IV ) pattern occurrences. Further enhancements are planned based on the results of this research, namely further refinement of the categories include sub-categories (e.g., scrolling of results listings, scrolling of documents, view next results page, or view previous results page). We are also investigating how to incorporate the meta-data from the results pages and searcher interactions to provide personalized and targeted assistance. 8. Conclusion
Despite an impressive array of IR systems that have been developed, many with advanced assistance fea-tures, few searchers utilize these mechanisms for improving search results ( Jansen et al., 2000 ). Algorithmi-cally, many of these features have been shown to be effective tools for enhancing the search process (e.g.,
Cronen-Townsend, Zhou, &amp; Croft, 2002 ; Ruthven, 2003 ). Unfortunately, if searchers outside of the lab environment do not use them, these features are of little practical benefit. Researchers have developed auto-mated assistance IR systems that take a more active role in the search process rather than passively waiting for the searcher to access assistance ( Meadow, 1988 ). However, few of these systems have been widely adopted, especially on the Web ( Sparck-Jones &amp; Willett, 1997 ). One reason may be that these systems do not support the manner in which searchers actually prefer to search, namely they do not provide assist-ance when a searcher actually wants it. Conversely, these systems may intervene in the search process at times when the user prefers to search alone.

Much of the research in developing automated assistance systems has focused on automating strategy, tactics, and features. There has been much less research on when searchers actually desire this automated assistance. Other researchers have also raised this issue, calling for research into how these automated assistance system should interact with searchers ( Bates, 1989, 1990 ; Belkin, 1988 ). It is this concern that this research addresses by examining how searchers interact with automated assistance while using IR systems.
Overall, the results of the research conducted so far shows potential to improve the searching process for the user. The results indicate that searchers have preferred points in the search process where they desire assistance and when they implement it. By detecting the patterns of user X  X ystem interaction, designers can tailor automated assistance systems to intervene at opportune temporal states when the probability is greatest that the user is willing to view the assistance or implement the assistance. With this knowledge, IR systems can more effectively assist users in finding the information they desire.
 For future research, we are implementing the current version utilizing Microsoft Internet Information
Service (IIS) as the backend IR system, running on an IBM-compatible platform using the Windows XP operating system and Microsoft Internet Explorer as the system interface. The system integration occurs via an API wrapper to the browser. This wrapper permits the monitoring of the user X  X ystem interactions and the presentation of the assistance to the user. Fig. 8 is a image of the current system, with automated assistance displayed.
 References
