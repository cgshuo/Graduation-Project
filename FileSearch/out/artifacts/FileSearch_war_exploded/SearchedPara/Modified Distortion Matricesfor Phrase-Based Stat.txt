 Despite the large research effort devoted to the mod-eling of word reordering, this remains one of the main obstacles to the development of accurate SMT systems for many language pairs. On one hand, the phrase-based approach (PSMT) (Och, 2002; Zens et al., 2002; Koehn et al., 2003), with its shallow and loose modeling of linguistic equivalences, appears as the most competitive choice for closely related language pairs with similar clause structures, both in terms of quality and of efficiency. On the other, tree-based approaches (Wu, 1997; Yamada, 2002; Chiang, 2005) gain advantage, at the cost of higher complexity and isomorphism assumptions, on lan-guage pairs with radically different word orders.
Lying between these two extremes are language pairs where most of the reordering happens locally, and where long reorderings can be isolated and de-scribed by a handful of linguistic rules. Notable examples are the family-unrelated Arabic-English and the related German-English language pairs. In-terestingly, on these pairs, PSMT generally pre-vails over tree-based SMT 1 , producing overall high-quality outputs and isolated but critical reordering errors that undermine the global sentence meaning.
Previous works on this type of language pairs have mostly focused on source reordering prior to trans-lation (Xia and McCord, 2004; Collins et al., 2005), or on sophisticated reordering models integrated into decoding (Koehn et al., 2005; Al-Onaizan and Pap-ineni, 2006), achieving mixed results. To merge the best of both approaches  X  namely, access to rich con-text in the former and natural coupling of reorder-ing and translation decisions in the latter  X  we intro-duce modified distortion matrices : a novel method to seamlessly provide to the decoder a set of likely long reorderings pre-computed for a given input sentence. Added to the usual space of local permutations de-fined by a low distortion limit (DL), this results in a linguistically informed definition of the search space that simplifies the task of the in-decoder reordering model, besides decreasing its complexity.

The paper is organized as follows. After review-ing a selection of relevant works, we analyze salient reordering patterns in Arabic-English and German-English, and describe the corresponding chunk-based reordering rule sets. In the following sections we present a reordering selection technique based on reordered n-gram LMs and, finally, explain the no-tion of modified distortion matrices. In the last part of the paper, we evaluate the proposed techniques on two popular MT tasks. Pre-processing approaches to word reordering aim at permuting input words in a way that minimizes the reordering needed for translation: determinis-tic reordering aims at finding a single optimal re-ordering for each input sentence, which is then translated monotonically (Xia and McCord, 2004) or with a low DL (Collins et al., 2005; Habash, 2007); non-deterministic reordering encodes mul-tiple alternative reorderings into a word lattice and lets a monotonic decoder find the best path accord-ing to its models (Zhang et al., 2007; Crego and Habash, 2008; Elming and Habash, 2009; Niehues and Kolss, 2009). The latter approaches are ideally conceived as alternative to in-decoding reordering, and therefore require an exhaustive reordering rule set. Two recent works (Bisazza and Federico, 2010; Andreas et al., 2011) opt instead for a hybrid way : rules are used to generate multiple likely reorder-ings, but only for a specific phenomenon  X  namely verb-initial clauses in Arabic. This yields sparse re-ordering lattices that can be translated with a regular decoder performing additional reordering.

Reordering rules for pre-processing are either manually written (Collins et al., 2005) or automat-ically learned from syntactic parses (Xia and Mc-Cord, 2004; Habash, 2007; Elming and Habash, 2009), shallow syntax chunks (Zhang et al., 2007; Crego and Habash, 2008) or part-of-speech labels (Niehues and Kolss, 2009). Similarly to hybrid ap-proaches, in this work we use few linguistically in-formed rules to generate multiple reorderings for se-lected phenomena but, as a difference, we do not employ lattices to represent them. We also include a competitive in-decoding reordering model in all the systems used to evaluate our methods.

Another large body of work is devoted to the mod-eling of reordering decisions inside decoding, based on a decomposition of the problem into a sequence of basic reordering steps. Existing approaches range from basic linear distortion to more complex models that are conditioned on the words being translated.
The linear distortion model (Koehn et al., 2003) encourages monotonic translations by penalizing source position jumps proportionally to their length. If used alone, this model is inadequate for language pairs with different word orders. Green et al. (2010) tried to improve it with a future distortion cost es-timate. Thus they were able to preserve baseline performance at a very high DL, but not to improve it. Lexicalized phrase orientation models (Tillmann, 2004; Koehn et al., 2005; Zens and Ney, 2006; Gal-ley and Manning, 2008) predict the orientation of a phrase with respect to the last translated one. These models are known to well handle local reordering and are widely adopted by the PSMT community. However, they are unsuitable to model long reorder-ing as they classify as  X  X iscontinuous X  every phrase that does not immediately follow or precede the last translated one. Lexicalized distortion models pre-dict the jump from the last translated word to the next one, with a class for each possible jump length (Al-Onaizan and Papineni, 2006), or bin of lengths (Green et al., 2010). These models are conceived to deal with long reordering, but can easily suffer from data sparseness, especially for longer jumps occur-ring less frequently.
 Following a typical sequence modeling approach, Feng et al. (2010) train n-gram language models on source data previously reordered in accordance to the target language translation. This method does not directly model reordering decisions, but rather word sequences produced by them. Despite their high perplexities, reordered LMs yield some im-provements when integrated to a PSMT baseline that already includes a discriminative phrase orientation model (Zens and Ney, 2006). In this work we use similar models to rank sets of chunk permutations.
Attempting to improve the reordering space def-inition, Yahyaei and Monz (2010) train a classifier to guess the most likely jump length at each source position, then use its predictions to dynamically set the DL. Translation improvements are obtained on a simple task with mostly short sentences (BTEC).
Modifying the distortion function, as proposed in this paper, makes it possible to expand the pemuta-tion search space by a much finer degree than vary-ing the DL does. Our study focuses on Arabic-English and German-English: two language pairs characterized by uneven distributions of word-reordering phenomena, with long-range movements concentrating on few pat-terns. In Arabic-English , the internal order of most noun phrases needs to be reversed during translation, which is generally well handled by phrase-internal reordering or local distortion. At the constituent level, instead, Arabic admits both SV(O) and VS(O) orders, the latter causing problematic long reorder-ings. Common errors due to this issue are the ab-sence of main verb in the English translation, or the placement of the main verb before its own subject. In both cases, adequacy is seriously compromised. In German-English , the noun phrase structure is similar between source and target languages. How-ever, at the constituent level, the verb-second order of German main clauses conflicts with the rigid SVO structure of English, as does the clause-final verb position of German subordinate clauses. As a fur-ther complication, German compound verbs are split apart so that the non-finite element (main verb) can appear long after the inflected auxiliary or modal.
Thanks to sophisticated reordering models, state-of-the-art PSMT systems are generally good at han-dling local reordering phenomena that are not cap-tured by phrase-internal reordering. However, they typically fail to predict long reorderings. We believe this is mainly not the fault of the reordering mod-els, but rather of a too coarse definition of the search space. To have a concrete idea, consider that a small change of the DL from 5 to 6 words, in a sentence of 8, makes the number of explorable permutations increase from about 9,000 to 22,000 . Existing mod-els cannot be powerful enough to deal with such a rapidly growing search space.

As a result, decoding at very high DLs is not a good solution for these language pairs. Indeed, decent performances are obtained within a low or medium DL, but this obviously comes at the expense of long reorderings, which are often crucial to pre-serve the general meaning of a translated sentence. For instance, taking English as the target language, it is precisely the relative positioning of predicate ar-guments that determines their role, in the absence of case markers. Thus, a wrongly reordered verb with minor impact on automatic scores, can be judged very badly by a human evaluator.

We will now describe two rule sets aimed at cap-turing these reordering phenomena. To compute the source reorderings, we use chunk-based rules following Bisazza and Federico (2010). Shallow syntax chunking is indeed a lighter and simpler task compared to full parsing, and it can be used to constrain the number of reorderings in a softer way. While rules based on full parses are generally deterministic, chunk-based rules are non-deterministic or fuzzy, as they generate sev-eral permutations for each matching sequence 2 . Be-sides defining a unique segmentation of the sen-tence, chunk annotation provides other useful infor-mation that can be used by the rules  X  namely chunk type and POS tags 3 .

For Arabic-English we apply the rules proposed by Bisazza and Federico (2010) aimed at transform-ing VS(O) sentences into SV(O). Reorderings are generated by moving each verb chunk (VC), alone or with its following chunk, by 1 to 6 chunks to the right. The maximum movement of each VC is lim-ited to the position of the next VC, so that neigh-boring verb-reordering sequences may not overlap. This rule set was shown to cover most (99.5%) of the verb reorderings observed in a parallel news cor-pus, including those where the verb must be moved along with an adverbial or a complement.

For German-English we propose a set of three rules 4 aimed at arranging the German constituents in SVO order:
The application of chunk reordering rules is illus-trated by Fig. 1: in the Arabic sentence (a), the sub-ject  X  X ozens of militants X  is preceded by the main verb  X  X ook part X  and its argument  X  X o the march X  . The rules generate 5 permutations for one matching se-best for translation. The German sentence (b) con-tains a broken VC with the inflected auxiliary  X  X as X  separated from the past participle  X  X nitiated X  . Here, the rules generate 3 permutations for the chunk se-quence 2 to 5, corresponding to likely locations of
By construction, both rule sets generate a limited number of permutations per matching sequence: in Arabic at most 12 for each VC; in German at most 3 for each infinitive VC and for each VC-punctuation sequence, at most 10 for each broken VC. Empiri-cally, this yields on average 22 reorderings per sen-tence in the NIST-MT Arabic benchmark dev06-NW and 3 on the WMT German benchmark test08 . Ara-bic rules are indeed more noisy, which is not surpris-ing as reordering is triggered by any verb chunk. The number of chunk-based reorderings per sen-tence varies according to the rule set, to the size of chunks and to the context. A high degree of fuzzi-ness can complicate the decoding process, leaving too much work to the in-decoding reordering model. A solution to this problem is using an external model to score the rule-generated reorderings and discard the less probable ones. In such a way, a further part of reordering complexity is taken out of decoding.
At this end, instead of using a Support Vector Ma-chine classifier as was done in (Bisazza et al., 2011), we apply reordered n-gram models that are lighter-weight and more suitable for a ranking task.
Differently from Feng et al. (2010), we train our models on partially reordered data and at the level of chunks. Chunks can be represented simply by their type label (such as VC or NC), but also by a com-bination of the type and head word, to obtain finer lexicalized distributions. LMs trained on different chunk representations can also be applied jointly, by log-linear combination.

We perform reordering selection as follows: 1. Chunk-based reordering rules are applied de-2. One or several chunk-level 5-gram LMs are 3. Reordering rules are applied to the test sen-
In experiments not reported here, we obtained accurate rankings by scoring source permutations with a uniformly weighted combination of two LMs trained on chunk types and on chunk-type+head-word, respectively. In particular, 3-best reorderings of each rule-matching sequence yield reordering re-calls of 77.2% in Arabic and 89.3% in German. We present here a novel technique to encode likely long reorderings of an input sentence, which can be seamlessly integrated into the PSMT framework.
During decoding, the distance between source po-sitions is used for two main purposes: (i) generating a distortion penalty for the current hypothesis and (ii) determining the set of source positions that can be covered at the next hypothesis expansion. We can then tackle the coarseness of both distortion penalty and reordering constraints, by replacing the distance function with a function defined ad hoc for each in-put sentence.

Distortion can be thought of as a matrix assigning a positive integer to any ordered pair of source posi-tions ( s x ,s y ) . In the linear distortion model this is defined as: so that moving to the right by 1 position costs 0 and by 2 positions costs 1. Moving to the left by 1 posi-tion costs 2 and by 2 positions costs 3, and so on. At the level of phrases, distortion is computed between the last word of the last translated phrase and the first word of the next phrase. We retain this equa-tion as the core distortion function for our model. Then, we modify entries in the matrix such that the distortion cost is minimized for the decoding paths pre-computed with the reordering rules.

Given a source sentence and its set of rule-generated permutations, the linear distortion matrix is modified as follows: 1. non-monotonic jumps (i.e. ordered pairs 2. then, for each extracted pair, the corresponding Although this technique is approximate and can overgenerate minimal-distortion decoding paths 7 , it practically works when the number of encoded per-mutations per sequence is limited. This makes mod-ifed distortion matrices particularly suitable to en-code just those reorderings that are typically missed by phrase-based decoders (see Sect. 3).

Since in this work we use chunk-based rules, we also have to convert chunk-to-chunk jumps into word-to-word shortcuts. We propose two ways to do this, given an ordered pair of chunks ( c x , c y ): mode A  X  A : create a shortcut from each word of mode L  X  F : create only one shortcut from the last The former solution admits more chunk-internal per-mutations with the same minimal distortion cost, whereas the latter implies that the first word of a re-ordered chunk is covered first and the last is covered last.
Fig. 2 shows the distortion matrix of the German sentence of Fig. 1, with starting positions as columns and landing positions as rows. Suppose we want to encode the reordering shown on top of Fig. 2, cor-responding to the merging of the broken VC  X  X at ... eingeleitet X  . This permutation contains three jumps: (2,5), (5,3) and (4,6). Converted to word-level in A  X  A mode, these yield five word shortcuts 8 : one for the onward jump (2,5) assigned 0 distortion; two for the backward jump (5,3), assigned 2; and two for the onward jump (4,6), also assigned 0. The desired reordering is now attainable within a DL of 2 words instead of 5. The same process is then applied to other permutations of the sentence.

If compared to the word reordering lattices used by Bisazza and Federico (2010) and Andreas et al. (2011), modified distortion matrices provide a more compact, implicit way to encode likely reorderings in a sentence-specific fashion. Matrix representation does not require multiplication of nodes for the same source word and is naturally compatible with the PSMT decoder X  X  standard reordering mechanisms. In this section we evaluate the impact of modified distortion matrices on two news translation tasks.
Matrices were integrated into the Moses toolkit (Koehn et al., 2007) using a sentence-level XML markup. The list of word shortcuts for each sentence is provided as an XML tag that is parsed by the decoder to modify the distortion matrix just before starting the search. As usual, the distortion matrix is queried by the distortion penalty generator and by the hypothesis expander 9 . 7.1 Experimental setup For Arabic-English , we use the union of all in-domain parallel corpora provided for the NIST -MT 09 evaluation 10 for a total of 986K sentences, 31M En-glish words. The target LM is trained on the English side of all available NIST -MT 09 parallel data, UN in-cluded (147M words). For development and test, we use the newswire sections of the NIST benchmarks, hereby called dev06-NW, eval08-NW and eval09-NW : 1033, 813 and 586 sentences, respectively, each provided with four reference translations.

The German-English system is instead trained on WMT 10 data: namely Europarl (v.5) plus News-commentary-2010 for a total of 1.6M parallel sen-tences, 43M English words. The target LM is trained on the monolingual news data provided for the con-strained track (1133M words). For development and test, we use the WMT 10 news benchmarks test08, test09 and test10 : 2051, 2525 and 2489 sentences, respectively, with one reference translation.
Concerning pre-processing, we apply standard to-kenization to the English data, while for Arabic we use our in-house tokenizer that removes diacritics and normalizes special characters. Arabic text is then segmented with AMIRA (Diab et al., 2004) ac-cording to the ATB scheme 11 . German tokenization and compound splitting is performed with Tree Tag-ger (Schmid, 1994) and the Gertwol morphological analyser (Koskenniemi and Haapalainen, 1994) 12 .
Using Moses we build competitive baselines on the training data described above. Word alignment is produced by the Berkeley Aligner (Liang et al., 2006). The decoder is based on the log-linear com-bination of a phrase translation model, a lexicalized reordering model, a 6-gram target language model, distortion cost, word and phrase penalties. The re-ordering model is a hierarchical phrase orientation model (Tillmann, 2004; Koehn et al., 2005; Galley and Manning, 2008) trained on all the available par-allel data. We choose the hierarchical variant, as it was shown by its authors to outperform the default word-based on an Arabic-English task. Finally, for German, we enable the Moses option monotone-at-punctuation which forbids reordering across punc-tuation marks. The DL is initially set to 5 words for Arabic-English and to 10 for German-English. According to our experience, these are the optimal settings for the evaluated tasks. Feature weights are optimized by minimum error training (Och, 2003) on the development sets ( dev06-NW and test08 ). 7.2 Translation quality and efficiency results We evaluate translations with BLEU (Papineni et al., 2002) and METEOR (Banerjee and Lavie, 2005). As these scores are only indirectly sensitive to word order, we also compute KRS or Kendall Reorder-ing Score (Birch et al., 2010; Bisazza et al., 2011) which is a positive score based on the Kendall X  X  Tau distance between the source-output and source-reference permutations. To isolate the impact of our techniques on problematic reordering, we extract from each test set the sentences that got permuted by  X  X racle reordering X  (see Sect. 5). These consti-tute about a half of the Arabic sentences, and about a third of the German. We refer to the KRS com-puted on these test subsets as KRS(R). Statistically significant differences are assessed by approximate randomization as in (Riezler and Maxwell, 2005) 13 .
Tab. 1 reports results obtained by varying the DL and modifying the distortion function. To evalu-ate the reordering selection technique, we also com-pare the encoding of all rule-generated reorderings against only the 3 best per rule-matching sequence, as ranked by our best performing reordered LM (see end of Sect. 5). We mark the DL with a  X + X  to denote that some longer jumps are being allowed by modi-fied distortion. Run times refer to the translation of the first 100 sentences of eval08-NW and test09 by a 4-core processor.

Arabic-English. As anticipated, raising the DL does not improve, but rather worsen performances. The decrease in BLEU and METEOR reported with DL=8 is not significant, but the decrease in KRS is both significant and large. Efficiency is heavily af-fected, with a 42% increase of the run time.
Results in the row  X  X llReo X  are obtained by encod-ing all the rule-generated reorderings in L  X  F chunk-to-word conversion mode. Except for some gains in KRS reported on eval08-NW , most of the scores are lower or equal to the baseline. Such inconsistent be-haviour is probably due to the low precision of the Arabic rule set, pointed out in Sect. 4.

Finally, we arrive to the performance of 3-best re-orderings per sequence. With L  X  F we obtain sev-eral improvements, but it X  X  with A  X  A that we are able to beat the baseline according to all metrics. BLEU and METEOR improvements are rather small but significant and consistent across test sets, the best gain being reported on eval09-NW (+.9 BLEU). Most importantly, substantial word order improve-ments are achieved on both full test sets (+.7/+.6 KRS) and selected subsets (+.7/+.6 KRS(R)). Ac-cording to these figures, word order is affected only in the sentences that contain problematic reordering. This is good evidence, suggesting that the decoder does not get  X  X onfused X  by spurious shortcuts.
Looking at run times, we can say that modified distortion matrices are a very efficient way to ad-dress long reordering. Even when all the generated reorderings are encoded, translation time increases only by 4%. Reordering selection naturally helps to further reduce decoding overload. As for conversion modes, A  X  A yields slightly higher run times than L  X  F because it generates more shortcuts.

German-English. In this task we manage to im-prove translation quality with a setting that is almost twice as fast as the baseline. As shown by the first part of the table, the best baseline results are ob-tained with a rather high DL, that is 10 (only KRS improves with a lower DL). However, with modified distortion, the best results according to all metrics are obtained with a DL of 4.

Looking at the rest of the table, we see that re-ordering selection is not as crucial as in Arabic-English. This is in line with the properties of the more precise German reordering rule set (two rules out of three generate at most 3 reorderings per se-quence). Considering all scores, the last setting (3-best reordering and A  X  A ) appears as the best one, achieving the following gains over the base-line: +.4/+.5 BLEU, +.2/+.1 METEOR, +1.6/+1.7 KRS and +1.7/+1.8 KRS(R). The agreement ob-served among such diverse metrics makes us con-fident about the goodness of the approach. In Arabic-English and German-English, long re-ordering concentrates on specific patterns describ-able by a small number of linguistic rules. By means of non-deterministic chunk reordering rules, we have generated likely permutations of the test sentences and ranked them with n-gram LMs trained on pre-reordered data. We have then introduced the notion of modified distortion matrices to naturally encode a set of likely reorderings in the decoder input. Modified distortion allows for a finer and more linguistically informed definition of the search space, which is reflected in better translation outputs and more efficient decoding.

We expect that further improvements may be achieved by refining the Arabic reordering rules with specific POS tags and lexical cues. We also plan to evaluate modified distortion matrices in conjunc-tion with a different type of in-decoding reorder-ing model such as the one proposed by Green et al. (2010). Finally, we may try to exploit not only the ranking, but also the scores produced by the re-ordered LMs, as an additional decoding feature. This work was supported by the T 4 ME network of excellence ( IST -249119 ) funded by the European Programme. We thank Christian Hardmeier for helping us define the German reordering rules, and the anonymous reviewers for valuable suggestions.
