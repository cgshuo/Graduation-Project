 Workflow views are derived from workflows as the fundamental support for workflow inter-operability and visibility by external partie s [1-3]. The components of a workflow view include the process flow graph, input/output parameters, documents, and so on, which are also contained in a wo rkflow. Hence, a workflow view encloses the information about business process st ructure and contents. Based on specific business collaborations, a company may derive corresponding workflow views based on the local workflow process. Such a wo rkflow view includes all the necessary information of the company for this business. It can be used as the interaction interface in a business transaction which is carried out with external parties. 
However, until now most of existing works focus on the conceptual model of workflow views. There is little work investigating the implementation details of workflow views. In [4], a workflow deputy model was proposed to support the realization of workflow views. However, that approach limits the implementation of workflow and workflow views in the SmallTalk [5] environment, which makes it uneasy for enterprises to develop the view functions for existing workflow systems. In this paper, we describe a light-weighted implementation model for workflow views, by defining an easy-to-deploy approach for the workflow view implementation based on existing WFMSs. This model keeps the integrity of the existing WFMS while setting up a workflow view layer based on the exposed workflow APIs and devising objective here is to develop the view functions without modifying the workflow kernel engine. Via such an approach, enterprises can obtain the advantages of workflow views in an efficient and lost-cost way. 
The remainder of the paper is organized as follows. Section 2 introduces the background of workflow views and its meta-model. Section 3 investigates the research works related to this paper. Section 4 presents the light-weight implementation model for workflow views. Section 5 displays the functionality of the model via a sample prototype system. Section 6 concludes the paper with discussion issues and future research plans. A business process usually involves many pa rticipating organizations in a B2B e-commerce environment (i.e., such a busine ss process involves several inter-operating and interacting workflows from different organizations). This is often referred as a cross-organizational workflow. To support workflow inter-operability, we need a mechanism to allow au thorized external parties to acces s only the related and relevant parts of a workflow while maintaining the privacy of other unnecessary or proprietary information. Motivated by views of databases, Chiu et al. proposed the use of workflow views as a fundamental mechan ism for cross-organizational workflow interaction [2]. A workflow view involves all the components included in a workflow, view is a structurally correct subset of a workflow. The use of workflow views facilitates sophisticated interactions am ong workflow management systems (WFMSs) and allows these interactions to inter-operate in a gray box mode (i.e., they can therefore a handy mechanism to enact and enforce cross-organizational inter-operability over the Internet. In addition, workflow views are useful in providing access to business processes for external customers or users, including B2C e-commerce. Even within an organization, workflow views are useful for security of views in databases). A meta-model of workflow views in UML class diagram is shown in Fig. 1, illustrating the relation between workflow and workflow view. areas of workflow views. 
There have been some earlier works in the area of workflow views. Liu and Shen [6] presented an algorithm to construct a pr ocess view from a given workflow, but did approach of workflow views has been presented in [2]. From then, workflow views processes in E-service environment [1, 3]. However, most of these works focused on the conceptual level. The realization issues , especially the underlying implementation approach, are largely neglected. To address the derivation of private workflows from inter-organizational workflows, Van der Aalst and Weske [7] used the concept of workflow projection inheritance introduced in [8]. A couple of derivation rules are proposed so that a derived workflow is behaviorally bi-similar to the original workflow based on branching semantics, in contrast to the tr ace semantics adopted in the workflow view model. 
Schulz and Orlowska [9] considered commu nication aspects of workflow views in terms of state dependencies and control flow dependencies. They proposed to tightly couple private workflow and workflow view with state dependencies, whilst to loosely couple workflow views with control flow dependencies. A Petri-Net-based state transition method was proposed to bind st ates of private workflow tasks to their adjacent workflow view-task. This approach only considered the state aspect of workflow views. Moreover, it is difficult to accomplish the explicit modeling of state mapping. In our previous work [4], we extended the object deputy model [10] to the workflow deputy model, supporting the realization of workflow views. The deputy class and the deputy algebra are formally defined for workflow classes. Also, specific deputy operations were designed for each kind of workflow component classes. The disadvantage of this approach is that the whole workflow system should be developed within the deputy framework, i.e. a SmallTalk [5] environment, which makes it infeasible to be adopted by the enterprises who already have legacy workflow systems. As mentioned earlier, the motivation of our light-weight implementation model (LWIM) is to define a feasible approach for the implementation of workflow views based on the existing WFMSs. As shown in Fig. 2, its key idea is to keep the integrity of existing WFMSs, develop the workflow view layer based on exposed workflow workflow views. The information related to workflow views will be loaded and stored in a unified way as original workflow info rmation. The workflow view characteristic can be recorded in specific parameters, su ch as extended attribute in XPDL [11], which can be recognized by the workflow view layer. With this information, the workflow view layer can track the original workflow information and perform corresponding actions. In this section, we introduce the three major components of this model, i.e., the view definition la nguage, the view management module and the view functional module. 4.1 Workflow View Definition Language In order to execute and manage workflow views, a workflow view definition language is devised. It presents the execution patterns of workflow views, and stores the reference information to original workflows, providing a base for the workflow view layer to parse and execute. As noted, a workfl ow view is a structurally correct subset of a workflow. It involves all the components included in a workflow, such as a flow graph of activities, workflow relevant data, etc. Fig. 3 shows a meta-model of workflow view definition language, where the primitive of workflow view definition is presented. For each entity in the workflow view derived from the original workflow definition. If an activity view contains more than one original workflow activities, the reference attribute may refer to several entities in the original workflow definition. A workflow view definition la nguage should be compatible with the workflow language recognized by the WFMS. Hence, the view definition can be regarded as a common workflow definition. 
As shown in Fig. 3, a workflow process may have more than one workflow views existing. Each workflow view only corresponds to one original workflow process. In corresponding workflow process ID in the workflow definition file. One major advantage of view is its superiority on customization convenience, which focuses on the congregation of activities and transitions in definition schema. That means, one activity view may be the congregation of more than one activity elements of the source workflow. A simple way to describe this congregation is via a link set, which includes all the link information to those activities. Transition view connects activity concept of limited information disclosed. Via relevant data view, we can only construct views for the data desired to be released. Also, relevant data view can be a composite one aggregated from several data sources. Workflow views and source workflows share the participant and application information. Workflow views can be linked applications can also be invoked by the views. 4.2 Workflow View Management Module control of workflow view definitions and instances. In LWIM, the workflow view module takes the same loading and unloading approach as that of workflow definitions. During the initialization of workflow view instances, the management module will search for the source workflow instances via the link information stored in the view definition, and establish the linkage between workflow view instances and source workflows instances. The management module also provides the monitor and control interface to workflow view instan ces. We can monitor execution of workflow view instances, their states and properties, and relevant information defined in the view. As for the interaction between work flow view instances and source workflow instances, it is controlled by the workflow view function module. 4.3 Workflow View Function Module The workflow view function module contains two components, i.e., presentation engine and update mechanism. The presentation engine interprets the link attributes, retrieve the data from source workflows, and display the information in the view admin and client. The update mechanism tr anslates the view operations into the underlying operations on source workflows via pre-defined rules. They provide the bi-directional communication between view in stance and source instance. In this paper, we mainly concentrate on activity state and relevant data. State Mapping: According to [12], the activity st ates can be classified into six categories:
The activity views also have these six states. When an activity view only have one linked source activity, the activity transfer is straight-forward. However, when an unclear. Here, we constructed a mapping table (Table 1) to do this job. This approach is also adopted in [9]. Update on Relevant Data Views: The relevant data view can be defined on one or more source relevant data in read-only or writable model. For the ready-only model, the presentation engine controls the interpretation from the sources to the view based on the defined one-to-one or one-to-many relation. The update mechanism controls the behavior from the view update to source update. For the one-to-one case, the update on the relevant data view is directly mapped to the update on the source data. For the one-to-many case, the update mechanism will block the update request because of the semantic ambiguity. In order to show the functionality of the light-weight model discussed in Section 4, we have built a prototype system based on an open source WFMS, named Enhydra Shark [13]. Enhydra Shark is a workflow engine completely based on WfMC and OMG specifications. It uses WfMC X  X  XML Process Definition Language (XPDL) [11] as its native definition format. XPDL is a standard of process languages proposed by WfMC, which has been widely accepted by the academ ic and industry world. Based on the meta-model defined in Fig. 3, we extended XPDL to XPVDL (XML Process View Definition Language) supporting the view presentation. The XPVDL not only describes the source process definition. In order to keep the compatibility with XPDL, the linkage tags are added in the section of extended attribute. Hence, XPVDL shares the same schema with XPDL and can be resolved by the workflow engine. The correctness of view definitions is guaranteed by the view management module. 5.1 Demonstration Example In order to illustrate the functionality of workflow views, we adopt a real-life workflow case of information system integrator in this section. 
Fig. 4 shows an example of the workflow for the system integrator that provides organizations involved that collaborates with the system integrator to perform the procurement, namely, end user. In order to improve the business efficiency and win the market competition, the system integrator goes through a business workflow, say, for an advanced server system. 1. Order Making Stage : First, when receiving the quotation enquires, the system 2. System Developing Stage : Now the system integrator needs order the hardware, 3. Payment Settling Stage : In the final stage, payment would be conducted. There 
Considering the business interaction with the end user, the system integrator may be unwilling to shown some business details and only wish to present to the end user the parts involved in the business interactio n. So a workflow view to the end user is defined via the following steps: 1. For the private block activity, namely, Price Check , its detailed activities in the 2. The system integrator hides the activity Prepare Quotation . 3. The sub-flow that is composed of Order Confirmation , Order Validity Check , 4. The sub-process Order Hardware includes the information of system 5. For the block activity Software Design and Development , the activities which 6. Hardware Test and Software Test need to be merged into one activity in order to 7. The system integrator does not care the payment type and only an activity 
After a series of clippings, the workflow view that the system integrator may wish to present to the end user is depicted as Fig. 5. 5.2 View Admin Interface Fig. 6 shows the monitoring interface for vi ew instances. Via this interface, users can supervise the execution of view instances. Also, users can investigate the relevant data via the view mode. As shown in Fig. 6, none of the process variables is updatable, since all of them are defined in a read-only mode. 5.3 View Client Interface monitoring component. Via such an interf ace, users can not only accept and complete from the corresponding view. By this way, they may understand their works X  importance in the whole process, and be aware of the progress status. Workflow views are derived from workflows as a fundamental support for workflow inter-operability and visibility by external parties in a web service environment. Most of the previous works concentrated on the conceptual model and application scenarios of workflow views [1-3, 14]. In this paper, we have presented a light-weight implementation model for workflow views. The primary goal is to develop the view functions for any existing workflow system without altering the workflow kernel engine. With this approach, enterprises can equip and upgrade their workflow systems with the versatile workflow views in an efficient and lower-cost way. 
To the best of our knowledge, view instances are mapped to source instances in a Hence, the transaction management and exception handling issues that pertain to conventional workflow systems are not concerned by our workflow views mechanism. Our future work will focus on the implementation of the B2B interface of our prototype system based on the LWIM model. By targeting at the public E-services environments including both BPEL4WS [15] and ebXML [16], we are especially interested in tackling the message management issues occurring in the B2B enactment interface. 
