 1. Introduction
Finding semantic correspondences between ontologies is fundamental work for ontology-based applica-tions such as Semantic Web, Knowledge Management System, and E-Commerce, because of the need for multi-strategic Topic Map matching and merging methodologies to establish interoperability between services or applications based on Topic Maps. Topic Maps ( Biezunski, Bryan, &amp; Newcomb, 2002 ) as well as RDF (Resource Description Framework) ( Lassila &amp; Swick, 1999 ), and OWL (Web Ontology Language) ( McGuin-ness &amp; Harmeba, 2003 ) are data models for representing and building machine-understandable ontologies on the computer.

In recent years, many approaches for ontology matching have been proposed. All of these earlier approaches for schema or ontology matching, however, focused on providing various techniques for effective siderations and thus are not suitable for practical applications based on ontologies of real world domains oriented database, and XML, into a graph model with only nodes and edges for supporting different applica-version results in low efficiency because the characteristics of ontologies that are useful for similarity computation are overlooked. Another problem with the existing matching methods is that given two ontolo-gies 01 and 02, for each entity in ontology 01, they are compared with all entities in ontology 02. This full scanning on ontology 01 and 02 also ends up with low efficiency.

In this paper, we present an approach that considers features of both Topic Maps to reduce the matching complexity and linguistic analysis to improve the matching performance. Our approach does not require ontologies to be converted into a graph model and the entities to be fully scanned into two ontologies. Fur-thermore, our approach is a composite combination of four matching techniques from both a linguistic and a
Topic Maps module: name matching, internal structure matching, external structure matching, and associa-tion matching. This composite matching approach combines the results of four matching techniques that are independently processed to measure the unified similarity of each pair.
 To evaluate the quality of our approach, we apply it on three kinds of experimental data ontology group A,
B, and C. The ontology group A includes ontologies constructed from one knowledge domain, i.e. philosophy by a group of domain experts, which explains why they have similar structure of knowledge organization. The ontology group B includes ontologies constructed from similar knowledge domains but have different struc-tures of knowledge organization. The ontology group C includes ontologies constructed from different knowl-edge domains, i.e. philosophy and literature. We built an ontology for philosophy learning domain, hence given the name philosophy ontology ( Kim, Choi, &amp; Kim, 2004 ). We use the philosophy ontology, Wikipedia philosophy ontology which is constructed from philosophy-related contents of Wikipedia, and German liter-ature ontology which is constructed from contents on German literature in the Yahoo encyclopedia as experi-mental data.

We use three measurements such as precision, recall, and overall, which were derived from the Information retrieval field, to evaluate the quality of our approach. We then evaluated the approach by computing three measurements based on a set of manually determined matches and a set of automatically generated matches by matching operations. Based on the experimental results, we could conclude that automatically generated matches by our matching operation can cover most of the manually determined matches. 2. Related work
Schema matching is a process of finding semantic correspondences between entities of two schemas. It is a critical operation found in many schema and data integration applications, such as data warehouse, electronic consumer, data integration, and so on. Earlier approaches for semi-automatic matching between two schemas 2000 ), and Similarity Flooding ( Melnik, Garcia-Molina, &amp; Rahm, 2002 ). These approaches propose tech-niques to solve the problems of matching between entities of a relational database, XML, ER model, and graph.

A recent survey on schema matching showed a classification of schema matching approaches in terms of the scope of entities to compare and matching techniques. Schema matching approaches are classified into instance-level approaches, schema-level approaches, element-level approaches, and structure-level approaches in terms of the scope of entities to compare. They are also classified into syntactic approaches, structural approaches, and semantic approaches in terms of matching techniques ( Rahm &amp; Bernstein, 2001 ).
Semlnt is an element-level and structural approach as it determines matches between attributes of tables on relational database schema and processes matching operation on data types, length, and key information, whereas Cupid is a hybrid matching technique which combines results of syntactic, structural, and semantic techniques.

Ontology matching approaches are influenced by the schema matching approaches, and thus, have similar-ities with schema matching approaches in matching operations ( Shvaiko &amp; Euzenat, 2004 ). With respect to matching and merging ontologies, there have been a few approaches, such as PROMPT ( Noy &amp; Musen, 2000 ), Anchor-PROMPT ( Noy &amp; Musen, 2001 ), information flow ( Kalfoglou &amp; Schorlemmer, 2002 ), FCA-Merge ( Stumme &amp; Madche, 2001 ), QOM ( Ehrig &amp; Staab, 2004 ), and so on.

Topic Maps Reference Model ( Durusau, Newcomb, &amp; Barta, 2006 ) defines a generic merging function based on the equivalence rules to determine if two or more topic items can be merged. The equivalence rules include topic items, topic name item, variant name, occurrence item, association items, and association role Maps. They do not consider the similarity of entities and composite match results of each entitie types.
To overcome this weakness, Subject Identity Measure (SIM) ( Maicher &amp; Witschel, 2004 ) was used to mea-sure the similarity between topics based on their name similarity and occurrence similarity. In the SIM, the processes were only string comparison of the name of topics and resource data of occurrences. The hierarchi-cal structure and association in Topic Maps are not considered.

Table 1 represents characteristics of the methods at a glance. Abbreviated column names mean that Lan-guage (L), Patterns (P), Experimental Data (D), Results (R), and Complexity (C). Patterns column indicates matching approaches such as terminological (T), internal structure (IS), external structure (ES), extensional (E), and instance (I). Our approach called TM-MAP is similar with QOM in terms of the use of features of a data model for an ontology to reduce the complexity of matching operation. Our approach is different from the previous ones in that it treats the matching problem of distributed Topic Maps. 3. Matching problem and process definition 3.1. Overview of topic maps data model
Topic Map is a technology for encoding knowledge and connecting this encoded knowledge to relevant information resources, It is used as a formal syntax for representing and implementing ontologies. Topic maps between the subjects; and occurrences, which connect the subjects to pertinent information resources. Definition 1. We define a Topic Map model as following seven tuples: T C denotes a set of topic types T O denotes a set of occurrence types T A denotes a set of association types T R denotes a set of role types T I denotes a set of instance topics R H denotes a set of subsumption hierarchy relations R A denotes a set of associative relations
These entities have different meaning and usage, and so we measure the similarity between same entity types only. 3.2. Topic Map matching
Matching function f takes two source Topic Maps and domain-specific terminology dictionary Dict input and generates a set of match results M and increased dictionary Dict
Definition 2. A matching function map is defined as following expression:
A and B are source Topic Maps and D is term dictionary. A matching function map (A,B,D) is processed by matching functions of different entity types. 3.3. Topic map matching process
The Topic Map matching process takes two Topic Maps as input and determines semantic correspondences between entities of the input Topic Maps. Our Topic Map matching process is composed of seven steps as depicted in Fig. 2 .

Initialization. Step takes two serialized Topic Map documents, so-called XTM (XML Topic Maps) ( Pepper &amp; Moore, 2001 ), as input and interprets them to build Topic Maps in memory. During interpretation, PSI (Published Subject Indicator), which is used to share common description of topics between Topic Maps, and TopicWord indexes are generated for each Topic Map. Figs. 3 and 4 show the structure of PSI and TopicWord indexes respectively.
 Topic Maps.
 hierarchy of entities. Using a bottom-up approach we select entities to be measured from leaves to root. Selected pair of entities is given to the next step to generate the similarity value between two entities.
Similarity computation. Step applies composite combination of matching techniques to measure similarity between entities based on the linguistic analysis. Our composite matching approach combines the results of independently executed four matching operations: name matching operation, property matching operation, hierarchy matching operation, and association matching operation.

Similarity aggregation. Step aggregates similarity values of four matching operations to generate a com-bined similarity value for each entity pair.

Match candidates selection. Step automatically chooses match candidates for an entity by selecting the enti-ties of the other Topic Map with the best similarity value exceeding a certain threshold.
Post-processing. Step manually corrects the errors of automatically generated match results by domain experts. 4. Multi-strategies for match operations 4.1. Indexes for match operations During interpretation of source Topic Maps, PSI and TopicWord indexes are generated for each Topic Map. The PSI index classifies topics by their subjects called Subject Identifier or Subject Locator in Topic
Maps. According to Topic Maps standards, two topics will only be merged if their subjects are completely we can include them into the match results without processing any matching operation.

The TopicWord index is an inverted index of words in base names, variant names, and internal occurrences of topics and it is used to measure similarity between names or occurrences of topics. We extract words from topic names and internal occurrences and remove special characters, numbers, and stop words. For each word, we attach ID of topics which include the word in their names or occurrences. The TopicWord index is used to compute the similarity. 4.2. Name-based strategy
Name-based strategy compares strings of base names and variant names of topics. In the field terminology, a single term can refer to more than one concept and multiple terms can be related to a single concept. Name based strategy finds multiple terms referring to a same concept by applying two main categories of methods to the comparing terms. The methods are domain dictionary-based methods, string-based methods (simple token-based methods and token and substring-based method) and linguistic knowledge-based methods.
Name-based similarity value, SIM name ( t 1 , t 2 ), between two topics t SIM string ( t 1 . names , t 2 . name ).

Our string comparison methods are token-based distance functions because most of all ontologies including our experimental ontologies use noun words or phrases for concept naming, e.g.  X  X  X erms of Ancient Philos-ophy X  X  is used for a concept name instead of  X  X  X ncPhilosophy_Terms X  X . 4.2.1. Domain dictionary-based string matching
We developed a domain-specific dictionary to represent syntactic, synonymous, and antonymous relation-ships between terms using one or more philosophy thesauri written in Korean and English, i.e. Library of Con-
For example, in the scope of terms of western modern philosophy, reason and wisdom have a similarity score 1 but in the scope of terms of oriental philosophy, a similarity score of the terms may be below 1.
Currently our dictionary has about 2100 terms of western and oriental philosophy which are defined as top-ics in Philosophy Topic Maps and will be increased by domain experts to include the popular terms of phi-losophy. Our domain-specific dictionary is useful to compute similarity values between two terms which have different strings but similar meaning because string matching can produce a very low similarity value between them. 4.2.2. Simple token-based string matching
In token-based string matching methods, a string is a set of tokens (or words) rather than characters. These methods compare sets of tokens instead of strings. We use the Jaccard similarity method to compute similarity value between two strings.
 a and b are sets of tokens of two strings to be compared and SIM tokens to all tokens. 4.2.3. Token and substring-based string matching
A space between words is an obstacle to simple token matching. If two strings s and t have identical words except for spaces of string s , then these two strings have possibility to be matched.

To solve this mismatching problem we adopt a substring-based match operation between tokens. We use the following expression to measure the similarity between tokens:
Both x and y are tokens and c is the largest common substring of them. The similarity value between two strings based on the token and substring-based method is computed by following expression. In this expres-sion x i is the i th token of string a and y j is the j th token of string b .
 4.2.4. Linguistic knowledge-based string matching
Given two strings  X  Western Philosopher  X  and  X  Western Philosopher  X , a SIM matched. To improve the quality of string matching we use morphological and syntactic analysis to perform  X  Philosopher  X  from a morphological analyzer. In many cases, a concept name can be a phrase or even a sen-tence in ontologies, to represent more specific semantics. For example, in the philosophy ontology, many con-about being  X , and so on.

In our morphological analysis for Korean and English, these phrases or sentences are divided into a several stems and inflectional endings, which attached to stems and represent various inflections or derivations in
Korean. We process string matching between words and analyze their orders in the concept names. A word to improve the quality of string match results between words, we use word order and ending information, which classify corresponding ending groups according to their meaning and usage. 4.3. Property-based strategy
If two topics have m occurrences and n occurrences each other, property-based strategy computes similarity values of m by n pairs of occurrences to measure the similarity between topics. An occurrence is denned by an occurrence type and an occurrence value which is a textual description or URI address. For example, a topic, mine the occurrence-based similarity value of the paired topics.
For the property-based similarity between two topics t 1 and t rence i , t 2 . occurrence j )and SIM occvalue ( t 1 . occurrence are computed for each occurrence. According to Topic Maps Data Model ( Garshol &amp; Moore, 2005 ), an occur-used as occurrence types of philosopher topics. Thus, if an occurrence type of occurrence t and an occurrence type of occurrence j of topic t 2 is another topic t types is determined by the following expression in which SIM ( t and t q .

The similarity value between occurrence values is computed by string comparing methods because occur-ilarity values range from 0 to 1. If occurrence values are URI addresses, the similarity values are 0 or 1. 4.4. Hierarchy-based strategy
Hierarchy matching measures the similarity between two class topics based on the combined similarity between their child topics as well as their parent topics. For instance, we know that philosopher of topic map B is closer to modern philosopher rather than philosopher of topic map A from an example of hierarchy depicted in Fig. 5 . Name matching operation determines higher similarity value between philosopher topics than the one between philosopher and modern philosopher . Whereas, hierarchy matching operation determines that philosopher of topic map B matches well with modern philosopher of topic map A because both topics have similar child topics.

The following expression computes the similarity value between two topics based on the similarity of their topics respectively. And t 1 . parent i is i th parent topic of t
SIM name and SIM occ of t 1 . parent i and t 2 . parent j ics of t 1 and t 2 . Likewise, t 1 . child k is k th child topic of t
SIM name , SIM occ , and of t 1 . child k and t 2 . child
In the expression, w is a weight ranging from 0 to 1. We set a different value to w in order to emphasize the similarity of parent topics or child topics.
 4.5. Association-based strategy Association matching operation determines the similarity between association types. For example, Topic
Map A has an  X  X  author of  X  X  association between Kant with author role and Critique of Practical Reason with text role and Immanuel Kant with writer role. Association matching operation measures the similarity between the  X  X  author of  X  X  of Topic Map A and the  X  X  written by  X  X  of Topic Map B.

An association type is composed of a set of members, which have their roles in the relation. Thus, the sim-ilarity between association types is determined by similarities between members of them. Following expression measures the similarity between association types. Given two association types, t members, the similarity value between paired members is computed.

M and N is the number of members of two association types each other. m the j th member of t 2 . r i is role of m i and r j is role of m 4.6. Match candidates selection
Similarity values computed by four matching operations are collected to generate a combined similarity value for each pair of topics. There are several approaches to generating a combined value, such as Max,
Weighted, Average, and Min ( Do &amp; Rahm, 2002 ). The Max approach determines a combined value to the maximal value of similarity values. The Weighted approach computes a weighted sum of similarity values of four matching operations for a combined value. Weight, as used herein, means the importance of the matching operations. The Average approach computes an average similarity of all matching operations. Aver-age means that weights of four matching operations are equal. The Min approach chooses the lowest similar-because it is difficult to determine adequate weights for combining independent single operations. For exam-ple, the combined similarity value of a pair, ( a 1 , b 1
To determine the match candidate from input Topic Map T 2 methods for selecting the match candidates from ranked pairs are MaxN, MaxDelta, and Threshold ( Do &amp;
Rahm, 2002 ). The MaxN method selects N pairs from top rank of ordered list of pairs. The MaxDelta method t = 0.8 and displacement ( d ) = 0.07 is used to select match candidates from a list of pairs. 5. Merging between topic maps
Merging between topic maps describes the process of integrating two topic maps into a new topic map. For creating an integrated topic map, we remove duplicates and union entities from two source topic maps. We define a merge operation for topic maps as the following expression.

Definition 3. Given a set of topic maps S a merge operation is defined as the following expression:
If two topic maps TM A and TM B are elements of S , merging between them is defined as the following expression:
The merge function, MERGE, takes three input values such as two source topic maps and a mapping matrix M AB , in which correspondences between two topic maps are stored. Using this mapping information our merge function integrates corresponding entities from two topic maps into a new merged entity. Then it adds remain entities of two topic maps, which do not exist in the mapping matrix, to the merged topic map. Our merge function satisfies the following merge requirements to improve the quality of merge result: Entity preservation. If an entity a , which has a corresponding entity b , is a entity of TM new entity c merging a and b must be created in the topic map TM ing entities, i.e. a 0 2 TM A and a 0 2 M AB or a 0 2 TM B TM C .

Property preservation. If an entity a has a property p and its corresponding entity b has a property q ,a merged entity c must have a property r , which is union of p and q only if p is corresponding to q . When p is not similar to q a merged entity c must have all of two properties p and q .

Relationship preservation. Relationships belong to an entity a and its corresponding entity b must be pre-served as relationships of a new entity c in the merged topic map TM
R ( a 1 , a 2 ), exists between two entities, a 1 and a 2 . In a topic map TM two entities b 1 and b 2 . A merged entity c 1 of a 1 and b ing to their types.

We define a taxonomy of merging conflicts which categorize conflicts with element-level, structure-level, and temporary-level. The taxonomy of merging conflicts is depicted in Fig. 6 .
 into naming conflicts and property conflicts. Naming conflicts are caused when two mapping topics have different or similar topic names. Property conflicts are caused when two mapping topics have same values for different property types or different values for same property types.

Structure-level conflicts are generated by different level of conceptualization of two source topic maps. For example, TM 1 has simple conceptualization in which Philosopher topic is specialized with Kant, Hegel, Men-cius , and so on without geographic and periodic classification. Whereas TM which Philosopher topic is specialized with Ancient Philosopher, Medieval Philosopher, Modern Philosopher , and so on by a periodic viewpoint. These TM 1 and TM 2 have structure-level conflicts.

Temporary-level conflicts arise when the merged topic map has inconsistency during merging of mapping caused when a topic has invalid reference, are specialized with dangling reference conflicts and duplicated
ID conflicts. A dangling reference means that a topic X  X  reference is invalid because the referenced topic is removed. Duplicated ID conflicts arise when the merged Topic map has topics whose IDs are identical. Unde-fined identity conflicts are produced when a merged topic has one or more undefined properties, undefined roles, or undefined associations. 6. Experiments 6.1. Experiment setup We set up three kinds of data groups, which are group A, group B, and group C, for our experiment. Group
A includes Topic Maps which were constructed from philosophy knowledge domain and by same group of domain experts. Oriental philosophy ontology, modern western philosophy ontology, and contemporary wes-tern philosophy ontology are grouped in group A, because these ontologies are philosophy domain X  X  ontolo-gies and created by the same philosophy experts.
 Group B includes Wikipedia philosophy Topic Maps constructed from philosophy-related contents of
Wikipedia. Group C includes Topic Maps constructed from literature knowledge domain. We translate some of German literature encyclopedia provided by Yahoo Korea portal into Topic Maps. Table 2 shows the char-acteristics of our experimental data. 6.2. Measurement and experiment results
In this work, we use performance measurement of information retrieval such as precision, recall, and overall, to measure performance of our ontology matching operations. To evaluate the quality of our matching operations, we need to know the manually determined match set (M) and the automatically generated match set (A) which can be obtained by matching the processes. By comparing these match results, we get and false X  X egative set (R-I) which includes missed matches. We can measure match quality of automatic matching processing by evaluating following expression. Table 3 and Fig. 7 shows the experimental result that represents high recall and precision.
Pairs of ontologies in group A are matched based on the ontology schema layer because these ontologies are constructed from the same knowledge domain and a group of experts. These ontologies share a common schema, known as the philosophy reference ontology, for standardizing and validating them. In the philoso-referenced by component ontologies of the philosophy ontology, i.e. oriental ontology, modem western ontol-ogy, contemporary western ontology, and so on. Thus, most matches between ontologies in group A include topic types, occurrence types, and association types referenced by ontologies. The pair ( T maximal matches because both ontologies are components of the philosophy ontology and have some rela-tionships in terms of philosophers, texts, terms, doctrines, and so on.
 matching operation because paired Topic Maps have topics describing same philosophers, i.e. Kant, Hume, and Marx, same texts of philosophy, i.e. Philosophy of Right, Critique of Pure Reason, and Discourse on
Maps have better accuracy than pairs of Topic Maps of group A, because Topic Maps of group A have many topics whose names are phrases or sentences. But a difference of measures of two groups is an insignificant value because our morphological analysis-based string match evaluates the similarity of phrases or sentences correctly.

The recall of a pair of modern western philosophy and German literature, ( T of matches between different domain X  X  ontologies are very low and matching operations easily find matches based on topic names, such as Nietzsche, Philosophy of Right , and so on. This pair has poor overall, 0.38, but in contrast to recall, it is not that low accuracy. This means that domain experts must make more efforts to adopt automatically generated matches than to determine matches in manual. In other words, it seems useless to match ontologies between different knowledge domains. 6.3. Performance evaluation 6.3.1. Comparison of name matching operations
Fig. 8 shows performance evaluation of the string match methods introduced in Section 4 . We average pre-ations. The simple token-based string match method has the lowest recall because it can not find matches between phrases or sentences. But it has higher precision than Token + Substring method because
Token + Substring finds more true-negative matches in comparison between phrases or sentences. Morpholog-string methods. 6.3.2. Comparison of single matching strategies
Fig. 9 shows the result of performance evaluation of the single matching operations. We average precisions, recalls, and overalls of pairs of Topic Maps to represent simplified comparison of matching strategies. We evaluate the quality of four kinds of combinations of matching operations, (1) Name , (2) Name + Property , (3) Name + Hierarchy , and (4) Composite . Name is the name matching operation and Name + Property is a combination of the name matching operation and internal structure matching operation. Name + Hierarchy is a combination of name matching operation and external structure matching operation. Composite is a com-bination of all matching operations.

Values of Fig. 9 show average precision, recall, and overall of pairs of Topic Maps for each match oper-ations. According to the chart depicted in Fig. 8 , we know that four combinations have similar recall values but higher precision and overall values. 6.3.3. Comparison of topic maps matching performance
We compare our matching method, which is named TM-MAP, with other Topic Maps matching methods, which are Subject Identity Measure and Topic Maps Reference Model(ISO/IEC JTC1/SC34 2003), to represent the performance of proposed matching strategies. Fig. 10 shows precisions of matching methods for each pairs of Topic Maps. Figs. 11 and 12 show recalls and overalls of matching methods each other.
SIM measures the similarity between topics based on their names similarity and occurrence similarity. It does not consider external structures of Topic Maps, such as hierarchy and association. TMRM maps only that TMRM has higher precisions than SIM and TM-MAP because false matches of TMRM are lower than other methods.

Unlike precisions in Fig. 10 , recalls of TMRM are lower than other methods because it matches only topics having identical names. Our matching method TM-MAP has higher recalls than SIM and TMRM because
TM-MAP generates more true matches than other methods through the processing of composite matching operations. SM cannot map between topics having phrases or sentences as their names because it performs a token-based string matching operation only. Thus, SIM has low recalls when it measures the similarity of
Philosophy Topic Maps. Because overall is determined by recall and precision, TM-MAP has higher overalls than other methods. 7. Conclusions
In this paper, we propose a multi-strategic matching approach to determine semantic correspondences between Topic Maps. Our multi-strategic matching approach takes advantage of the combination of linguistic module and Topic Maps constraints including name matching, internal structure matching, external structure matching, and association matching. By doing this, the system achieves higher match accuracy than the one of a single match technique.

Our approach simplifies the matching computation but still preserves the quality of ontology matching, because it takes into account the characteristics of Topic Maps which define formal syntax and constraints for representing ontologies. Furthermore, unlike the existing approaches, our approach does not require con-version of ontologies into a graph model and full scanning of entities in two ontologies.
The experiment results shows that precision of automatically generated match set is more than 87%, but the all manually determined matches. Matched topics are merged into a new topic or connected by a semantic rela-tionship to enable ontology-based systems to provide knowledge-related services on multiple Topic Maps. How-ever, merging or alignment of Topic Maps is not easy work although we found matches between Topic Maps.
The MERGE function for merging Topic Maps has been developed, which takes advantage of mapping infor-mation and integrates corresponding entities form two Topic Maps into a new merged entity. We are aware that lished matching and merging operations will make Topic Maps easier to use in large-scale applications. References
