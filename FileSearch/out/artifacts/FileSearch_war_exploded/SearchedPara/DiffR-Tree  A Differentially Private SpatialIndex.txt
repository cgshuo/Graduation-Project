 Spatial data exists pervasively in business information systems. It is claimed that 80% of the overall information stored in computers is geo-spatial related [1]. While, geographic Information Systems(GIS) and On Line Analytical Process-ing(OLAP) integrated queries(briefly c alled spatial OLAP queries) have been a rising type of queries in spatial data. Because the multidimensional spatial data in data warehouse does not have explicit or implicit concept hierarchy, traditional data warehouse and OLAP techniques cannot exploit spatial infor-mation in coordinates fully. This model of query is firstly implemented in 2007 by Leticia Gomez[2], it presents a formal model for representing spatial data, integrates in a natural way geographic data and information contained in data warehouses external to the GIS. This type of spatial aggregation is very com-mon when the data analyzers do not want to concern about a specific person X  X  data but the overall statistics of the data distribution. For example,  X  X he average salaries of 30-40 year-old males in District Haidian of Beijing, China X . While, in many cases, the underlying spatial data contains sensitive information, such as the disease or salary in the OLAP information part, and the location in-formation in the GIS information part. Then query processing on the sensitive data may compromise individual X  X  privacy. Especially, based on the background knowledge, an adversary can infer sensitive information about a specific indi-vidual from spatial queries. For example, if an adversary knows that Mary is the only aged 30-40 female in a query region A, then he/she can get Mary X  X  salary 50k by submitting  X  X he average salary of 30-40 female in the region A X  query. Another example, if the adversary possesses powerful background knowl-edge, he/she knows everyone X  X  informat ion in the Region A except Mary X  X , then he/she ask for  X  X he average salary in Region A X , and combines the query result and his own background knowledge to infer Mary X  X  salary information.

To prevent such information leakage, the query results must be sanitized be-fore release. Although different privacy models can be used, one of the only mod-els that provide strong privacy guarantees is differential privacy [3]. The main idea of differential privacy is to inject sufficient noise to the query results so that an adversary cannot decide whether the information of a particular record owner was used to generate the sanitized result or not. In this paper, we utilize the notion of differential privacy[3] to support the spatial OLAP query index structure which combin es data cubes and R-tree.
 Contributions. First, We present an interactive differentially private frame-work to answer the GIS-OLAP integrated spatial OLAP queries for some low timeliness data sets. Second, we implem ent the framework by combining R-tree structure and OLAP technique with differential privacy. Based on this combi-nation, a differentially private R-Tree(DiffR-Tree) index is built to support the OLAP queries (as we have shown in Section 4). Thirdly, we design heuristic query method satisfying differential pr ivacy to further improve the efficiency of query processing. Finally, extensive expe riments using real datasets demostrate that our algorithm achieves highly accurate query results. Spatial OLAP system is designed to link the spatial data and the multidimensional data for OLAP queries in a specific spatial region bound. GIS-OLAP integration is firstly raised by Rivest et al.[5], it introduces the concept of SOLAP, which means standing for Spatial OLAP, and also talks about a SOLAP system X  X  necessary operators and features. However, this work does not define a formal model for GIS-OLAP integration. Then Han et al.[6] present a model named Spatial Data cube, which adapts OLAP techniques to materialize spatial objects. But the model only supports spatial objects aggregation. After several former works, Rao et al.[7] and Zang et al.[8] attempt a novel approach to integrate GIS and OLAP for spatial data warehouses query processing, in thi s method they use R-tree to access data in fact tables. There are some other works but none of them present a formal model of integrating GIS and OLAP information until Gomez et al.[2] defines a formal GIS and OLAP integrated model for spatial aggregation, and also formalizes a notion geometric aggregation.

While, when handling the query processing in spatial aggregation, the privacy of the data becomes a concern for research ers. And a lot of privacy protection al-gorithms have been proposed and promoted all the time, such as k-anonymity[9], l-diversity[10] and so on. While, Differential privacy is a new privacy-preserving model which is presented by C.Dwork[3]. It provides a strong privacy guarantee that the outcome of a calculation to be insensitive to any particular record in the data set. During the last five years, differential privacy has been adapted to a lot of applications. The most popular research is on differential private query processing, Hay et al.[11] proposes the adoption of count queries with a range selection on the attributes of a one-dimension database. Not only the counting queries, there are also a number of other specific types of queries have been adapted to differential privacy, for example, graph queries[12], histogram analy-sis queries[11]and linear counting queries[13]. Xiao et al.[14][15] proposes wavelet transforms, which is to adapt differential privacy to multi-dimension data count queries and achieves the same utility as Hay et al.s solution. Cormode et al.[16] propose several spatial data decomposition techniques under differential privacy, which are based on quadtree and kd-tree. The two type of decompositions first partition the spatial data and then add the noise the transformed data. More-over, Friedman and Schuster [17] construct a differentially private decision tree to do differentially private knowledge discovery, and Bhaskar et al.[18] present an approach to solve the frequent pattern mining problems in a differentially pri-vate way. In contrast to the above research works on specific analysis purposes, several differential privacy systems ha ve been implemented to operate on a wide variety of data queries. Specially, PINQ[19] and GUPT[20]. PINQ[19] does not consider the probability that the application developer may be an adversary, it enables application developers or data analyzers to write differential private programs using basic functional blocks of differential privacy, such as exponen-tial mechanism, Laplace mechanism, etc. While GUPT[20] provides a flexible system that supports many different types of data analysis programs, it achieves reasonable accuracy for problems like clustering and regression. Ding et al.[21] introduce a general noise-control framework to release all or part of a data cube in an -differentially private way. The paper only focuses on reducing the noise in the released cuboids. 3.1 Differential Privacy Differential privacy, in general, guarantees that changing or removing any record from a database has negligible impact on the output of any analysis based on the databases. Therefore, an adversary will learn nothing about an individual, regardless of whether her record is present or absent in the database. Formally, in the context of incremental updates, differential privacy is defined below. Definition 1. (Neighboring Datasets) We say two datasets D and D are neigh-boring datasets when they contain one record different, that is | D X D | =1. Definition 2. ( -differential privacy) A randomized algorithm Ag is differen-tially private if for all datasets D and D where they are neighbor datasets, and for all possible anonymized datasets  X  D where the probabilities are over the randomness of the Ag .Theparameter &gt; 0 controls the level of privacy.
 To introduce the mechanism to satisfy differential privacy, it is necessary to understand Sensitivity . The sensitivity of an algorithm expresses the maximal possible change of its outputs from two neighbor datasets.
 Definition 3. (Sensitivity) For any function f : D  X  R d , the sensitivity of f is for all neighbor datases D , D .
 Given the sensitivity of a function f , there are two popular mechanisms to achieve -differential privacy.
 Laplace Mechanism. Dwork et al.[22] propose the Laplace mechanism. The mechanism takes a dataset D , a function f , and a parameter  X  that deter-mines the magnitude of noise as inputs. It first computes the true output f ( D ), and then perturbs the output by adding laplace noise. The noise is gener-ated according to the Laplace distribution with probability density function magnitude of noise, and guarantees the perturbed output f (  X  D )= f ( D )+ Lap (  X  ) satisfying -differential privacy, where Lap (  X  ) is a random variable sampled from the Laplace distribution.
 Theorem 1. For any function f : D  X  R d , the algorithm Ag that adds inde-pendently generated noise with distribution Lap (  X f/ ) to each of the d outputs satisfies -differential privacy.[22] Exponential Mechanism. Mcsherry and Talwar[23] propose the exponential mechanism that can choose an output t  X  T that is close to the optimum with respect to a utility function while preserving differential privacy. The exponential mechanism takes as inputs a data set D , output range T , privacy parameter , and a utility function u :( D  X  T )  X  R that assigns a real valued score to every output t  X  T , where a higher score means better utility. The mechanism induces a probability distribution over the range T and then samples an output t from the whole range T .Let  X u = max  X  D,D | u ( D,t )  X  u ( D ,t ) | be the sensitivity of the utility function. The probability associated with each output is proportional to exp ( u ( D,t ) 2  X u ); that is, the output with a higher score is exponentially more likely to be chosen.
 Theorem 2. For any function u :( D  X  T )  X  R , an algorithm Ag that chooses privacy.[23] Besides, there are two important composition properties of differential privacy, which is necessary for the privacy budget allocation on our method.
 Lemma 1. (Sequential Composition[19]) Let each randomized algorithm Ag i provides i -differential privacy. A sequence of Ag i ( D ) over the data set D pro-vides ( i i )-differential privacy.
 Lemma 2. (Parallel Composition[19]) Let each randomized algorithm Ag i pro-vides i -differential privacy. A sequence of Ag i ( D i ) over a set of disjoint data sets D i provides ( max 4.1 The Framework The framework of our spatial OLAP query index is shown in Fig 1. The frame-work contains four steps as shown in Algorithm 1. Firstly we read the record data from a data file which contains the OLAP information and the location GIS information at the same time. Secondly, we build the R-tree using the location information of records, which is the GIS index of our final query index DiffR-tree. Then we transform the data records located in the MBR of each leaf into a data cube, and put the key-value pair (leafID, cube) into the OLAP data container of DiffR-tree. Thirdly, to improve the query efficiency, we pre-computation the data cubes of each non-leaf node in R-tr ee. After that, to protect the data sensi-tive information, we add Laplace noise to each data cube. But the laplace noises would make the metrics in data cubes be deprived of consistency, so we have to refine the data to keep data consistency in the spatial OLAP query index. At last, we have built a differentially private spatial OLAP index, we design an adaptive heuristic process based on Exponential mechanism to improve the query efficiency further, which satisfies differential privacy and keeps the accu-racy as high as possible. We introduce the key steps in the following several subsections. 4.2 The Construction of DiffR-tree The mechod to building the differentially private spatial OLAP index is descried in Algorithm 2. The DiffR-tree has two main parts: the GIS part and the OLAP part. We use R-tree as our GIS part, and the data is the location information of records in the database table(Line 2). While to build the OLAP part, we need to transform the database data into data cubes. In this step, we transform the records located in each MBR of leaf nod es into data cube, and link them into DiffR-tree OLAP parts(Line 3-5). The transform algorithm is very similar to the attribute-oriented induction method in common OLAP process(Line 6-10), we do not talk about it in detail here. 4.3 Pre-computation and Enforce Consistency In the above step, we just link the leaf nodes to data cubes. To improve the query efficiency in the following query step, we also need to get the non-leaf nodes linked with data cubes. Here we use a bottom-top way to compute a non-leaf node related data cube by combining the data cubes of its subnodes. After finishing this step, all of the nodes in the DiffR-tree GIS index has corresponding data cubes in DiffR-tree OLAP parts(Line 2-6).

But we need to realize that all of data cubes have not been noised, since R-tree and data cubes are both data-dependent structure, if we use the index to process queries directly the sensitive da ta in original records will be leaked to the adversary. So we need to add noise in a diff erentially private method to protect the privacy in the DiffR-tree(Line 7-8). B ecause of the Sequential Composition and Parallel Composition properties introduced in Section 3, we can get that in the GIS part, a path from root to leaf conforms to Sequential Composition property, and the nodes in the same layer are disjoint. So if the privacy budget is , then each node should be allocated h , here h is the height of the tree. In the OLAP part, the allocated h privacy budget of each node would be used to add Laplace noise into data cubes. Since every metric in a data cube is independent, so each one metric can get h budget.

Since Laplace noise is random, so it may occur data inconsistency. For exam-ple, if we me measure count metric, some node related cubes it is 7, but the its subnodes counts are 2,6,1, the sum value is inconsistent with 7. So to enforce consistency we need to refine the metrics number in a top-down way(Line 9-14), which is shown in Algorithm 3.
 4.4 Query Processing After building a differentially private query index, we can use it to process spa-tial OLAP aggregation queries, the algorithm is shown in Algorithm 4. In this step we have two important techniques. The first one is the adaptive heuristic selection based on Exponential mechanism. In a traditional heuristic in R-tree query processing, if the joint area percentage between the query area and the non-leaf node MBR area is larger than a threshold, then return the non-leaf node information. In our method, we modify the percentage threshold into a probabil-ity selection event. We use the Exponential selection directly proportional to the joint area. We define u ( D,t ) as the joint area percentage, and the output range Tis { TRUE,FALSE } which represent whether to traverse sub nodes. That is, the larger the joint area, the bigger the probability to use the non-leaf node as part of the query result(the choice is TRUE), or it goes down to traversal sub nodes(Line 8-15)(the choice is FALSE). With the resulted elements, we integrate the data information and get the query result to return to query analyzers. In this section, we use composition properties to prove that our algorithm satis-fies differential privacy. We know that any sequence of computations that each provides differential privacy in isolation is differentially private in sequence, and any parallel computations can also satisfy differential privacy in parallel. Then we can get the following theorem.
 Theorem 3. Algorithm 1 is -differential private.
 Proof. Our algorithm can be partition into two parts: build index and query processing. First of all, we allocate 3 privacy budget to the original record data to make it satisfy 3 -differential privacy. Then in the index tree, we allocate 3  X  h privacy budget to each node in the R-tree. Since nodes in the same layer satisfy Parallel Composition property and a path from root to leaf satisfies Sequential Composition property, then we know the DiffR-tree building satisfy 3  X  h  X  h = 3 -differential privacy. Last in the query processing, since which layer the query goes to and what data cubes the query returns are data-dependent, so it is necessary to protect the query process privacy. Her e we use Exponential selection adapted heuristic algorithm, and allocate 3 privacy budget for Exponential mechanism. According to Lemma 1, Algorithm 1 satisfies 3 + 3 + 3 = -differential privacy. To evaluate the accuracy and efficiency o f our method, we perform the experi-ments on synthetical and real data sets. All of these data sets have the following necessary information: sex , age , salary , latitudeLocation , longitudeLocation .The two synthetical data sets are generated following normal and uniform distribution respectively. The real data set is the locat ion-based data set from Stanford Large Network Dataset Collection[24]. The data sets are depicted in Figure 3(uniformly distributed data), Figure 4(normally distributed data), Figure 5(real data).
We will evaluate the query processing a ccuracy when considering two factors: query size and total privacy budget . We change the query size from 10% to 90% of the whole data area, the privacy budget from 0.1 to 1. Given a query size s and a privacy budget , we generate 100 queries of the given query size with query region X  X  center ra ndomly generated, and build index then process query in -differential privacy, we measure the average accuracy of the 100 queries results.
Moreover, to prove the efficiency of our algorithm, we compare the query accuracy and efficiency with a baseline. In the baseline, we traversal the index tree until the records in the bottom layer, and return the query results without adding noises.
From the experiment results from Figure 5,6,7, we can get the relative error rate by changing the query size from 10% to 90% in uniformly distributed data, normally distributed data and rea l data respectively, here we set =1.Wecan get one common trend from the three figures that when query size increases, the relative error rate decreases. Another trend is when the original data size increases, the relative error decreases. The reason for both the trends is that the more points the query region contains, the heuristic technique and estimation in query processing are more accurate.
The Figure 8,9,10 show the relative error rate when changing privacy budget from 0.2 to 1.0 in uniformly distributed data, normally distributed data and real data respectively, here we set querySize=50%. We can know from the ex-perimental results in three figures that when the privacy budget increases, the accuracy increases obviously. That means, we should choose = 1 if we want to get the best accuracy.
In Figure 11, we prove our method is mo re efficient the R-tree query pro-cessing, in this figure, we depict the time cost (in  X  s) between DiffR-tree and R-tree query performance in uniformly distributed data of size 10000, 50000 and 100000. We can see that when the original data size increases, the primordial R-tree query processing time increases sha rply, while the time cost of our method holds steady and even decreases. When da ta size is larger, the difference in time cost is obvious. This is because we use differentially private adaptive heuristic technique to handle queries and return the non-leaf as results. Since the above experiment results show the accuracy of our method, the experiment indicates that the perfect query efficiency of our method. In this paper, we propose a differentially private spatial OLAP query index and implement it. We use R-tree as the GIS index of our spatial OLAP query index, then combine data cube technique as OLAP part with the spatial index, while all of the algorithm satisfies differential privacy. In our method, we design the key steps of building GIS-OLAP integrated index, enforcing consistency, and heuristically handling queries in a differentially private way, and we prove it satisfy differential privacy in a theorema tic proof. Experiments results show the accuracy and efficiency of our algorithm.

