 Na  X   X ve context-free grammars, such as those em-bodied by standard treebank annotations, do not parse well because their symbols have too little context to constrain their syntactic behavior. For example, to PPs usually attach to verbs and of PPs usually attach to nouns, but a context-free PP symbol can equally well attach to either. Much of the last few decades of parsing research has therefore focused on propagating contextual in-formation from the leaves of the tree to inter-nal nodes. For example, head lexicalization (Eis-ner, 1996; Collins, 1997; Charniak, 1997), struc-tural annotation (Johnson, 1998; Klein and Man-ning, 2003), and state-splitting (Matsuzaki et al., 2005; Petrov et al., 2006) are all designed to take coarse symbols like PP and decorate them with additional context. The underlying reason that such propagation is even needed is that PCFG parsers score trees based on local configurations only, and any information that is not threaded through the tree becomes inaccessible to the scor-ing function. There have been non-local ap-proaches as well, such as tree-substitution parsers (Bod, 1993; Sima X  X n, 2000), neural net parsers (Henderson, 2003), and rerankers (Collins and Koo, 2005; Charniak and Johnson, 2005; Huang, 2008). These non-local approaches can actually go even further in enriching the grammar X  X  struc-tural complexity by coupling larger domains in various ways, though their non-locality generally complicates inference.

In this work, we instead try to minimize the structural complexity of the grammar by moving as much context as possible onto local surface fea-tures. We examine the position that grammars should not propagate any information that is avail-able from surface strings, since a discriminative parser can access that information directly. We therefore begin with a minimal grammar and it-eratively augment it with rich input features that do not enrich the context-free backbone. Previ-ous work has also used surface features in their parsers, but the focus has been on machine learn-ing methods (Taskar et al., 2004), latent annota-tions (Petrov and Klein, 2008a; Petrov and Klein, 2008b), or implementation (Finkel et al., 2008).
By contrast, we investigate the extent to which we need a grammar at all. As a thought experi-ment, consider a parser with no grammar, which functions by independently classifying each span ( i,j ) of a sentence as an NP, VP, and so on, or null if that span is a non-constituent. For exam-ple, spans that begin with the might tend to be NPs, while spans that end with of might tend to be non-constituents. An independent classification approach is actually very viable for part-of-speech tagging (Toutanova et al., 2003), but is problem-atic for parsing  X  if nothing else, parsing comes with a structural requirement that the output be a well-formed, nested tree. Our parser uses a min-imal PCFG backbone grammar to ensure a ba-sic level of structural well-formedness, but relies mostly on features of surface spans to drive accu-racy. Formally, our model is a CRF where the fea-tures factor over anchored rules of a small back-bone grammar, as shown in Figure 1.

Some aspects of the parsing problem, such as the tree constraint, are clearly best captured by a PCFG. Others, such as heaviness effects, are nat-urally captured using surface information. The open question is whether surface features are ade-quate for key effects like subcategorization, which have deep definitions but regular surface reflexes (e.g. the preposition selected by a verb will often linearly follow it). Empirically, the answer seems to be yes, and our system produces strong results, e.g. up to 90.5 F1 on English parsing. Our parser is also able to generalize well across languages with little tuning: it achieves state-of-the-art re-sults on multilingual parsing, scoring higher than the best single-parser system from the SPMRL 2013 Shared Task on a range of languages, as well as on the competition X  X  average F1 metric.

One advantage of a system that relies on surface features and a simple grammar is that it is portable not only across languages but also across tasks to an extent. For example, Socher et al. (2013) demonstrates that sentiment analysis, which is usually approached as a flat classification task, can be viewed as tree-structured. In their work, they propagate real-valued vectors up a tree using neural tensor nets and see gains from their recur-sive approach. Our parser can be easily adapted to this task by replacing the X-bar grammar over treebank symbols with a grammar over the sen-timent values to encode the output variables and then adding n-gram indicators to our feature set to capture the bulk of the lexical effects. When applied to this task, our system generally matches their accuracy overall and is able to outperform it on the overall sentence-level subtask. In order to exploit non-independent surface fea-tures of the input, we use a discriminative formula-tion. Our model is a conditional random field (Laf-ferty et al., 2001) over trees, in the same vein as Finkel et al. (2008) and Petrov and Klein (2008a). Formally, we define the probability of a tree T conditioned on a sentence w as where the feature domains r range over the (an-chored) rules used in the tree. An anchored rule r is the conjunction of an unanchored grammar rule rule( r ) and the start, stop, and split indexes where that rule is anchored, which we refer to as span( r ) . It is important to note that the richness of the backbone grammar is reflected in the structure of the trees T , while the features that condition di-rectly on the input enter the equation through the anchoring span( r ) . To optimize model parame-ters, we use the Adagrad algorithm of Duchi et al. (2010) with L2 regularization.

We start with a simple X-bar grammar whose only symbols are NP, NP-bar, VP, and so on. Our base model has no surface features: formally, on each anchored rule r we have only an indicator of the (unanchored) rule identity, rule( r ) . Because the X-bar grammar is so minimal, this grammar does not parse very accurately, scoring just 73 F1 on the standard English Penn Treebank task.
In past work that has used tree-structured CRFs in this way, increased accuracy partially came from decorating trees T with additional annota-tions, giving a tree T 0 over a more complex symbol set. These annotations introduce additional con-text into the model, usually capturing linguistic in-tuition about the factors that influence grammati-cality. For instance, we might annotate every con-stituent X in the tree with its parent Y , giving a tree with symbols X [ X  Y ] . Finkel et al. (2008) used parent annotation, head tag annotation, and hori-zontal sibling annotation together in a single large grammar. In Petrov and Klein (2008a) and Petrov and Klein (2008b), these annotations were latent; they were inferred automatically during training. Hall and Klein (2012) employed both kinds of an-notations, along with lexicalized head word anno-tation. All of these past CRF parsers do also ex-ploit span features, as did the structured margin parser of Taskar et al. (2004); the current work pri-marily differs in shifting the work from the gram-mar to the surface features.

The problem with rich annotations is that they increase the state space of the grammar substan-tially. For example, adding parent annotation can square the number of symbols, and each subse-quent annotation causes a multiplicative increase in the size of the state space. Hall and Klein (2012) attempted to reduce this state space by fac-toring these annotations into individual compo-nents. Their approach changed the multiplicative penalty of annotation into an additive penalty, but even so their individual grammar projections are much larger than the base X-bar grammar.

In this work, we want to see how much of the expressive capability of annotations can be cap-tured using surface evidence, with little or no an-notation of the underlying grammar. To that end, we avoid annotating our trees at all, opting instead to see how far simple surface features will go in achieving a high-performance parser. We will re-turn to the question of annotation in Section 5. To improve the performance of our X-bar gram-mar, we will add a number of surface feature tem-plates derived only from the words in the sentence. We say that an indicator is a surface property if it can be extracted without reference to the parse tree. These features can be implemented with-out reference to structured linguistic notions like headedness; however, we will argue that they still capture a wide range of linguistic phenomena in a data-driven way.

Throughout this and the following section, we will draw on motivating examples from the En-glish Penn Treebank, though similar examples could be equally argued for other languages. For performance on other languages, see Section 6.
Recall that our CRF factors over anchored rules r , where each r has identity rule( r ) and anchor-ing span( r ) . The X-bar grammar has only indi-cators of rule( r ) , ignoring the anchoring. Let a surface property of r be an indicator function of span( r ) and the sentence itself. For example, the first word in a constituent is a surface property, as Figure 1: Features computed over the application of the rule VP  X  VBD NP over the anchored span averted financial disaster with the shown in-dices. Span properties are generated as described throughout Section 4; they are then conjoined with the rule and just the parent nonterminal to give the features fired over the anchored production. is the word directly preceding the constituent. As illustrated in Figure 1, the actual features of the model are obtained by conjoining surface proper-ties with various abstractions of the rule identity. For rule abstractions, we use two templates: the parent of the rule and the identity of the rule. The surface features are somewhat more involved, and so we introduce them incrementally.

One immediate computational and statistical is-sue arises from the sheer number of possible sur-face features. There are a great number of spans in a typical treebank; extracting features for ev-ery possible combination of span and rule is pro-hibitive. One simple solution is to only extract features for rule/span pairs that are actually ob-served in gold annotated examples during train-ing. Because these  X  X ositive X  features correspond to observed constituents, they are far less numer-ous than the set of all possible features extracted from all spans. As far as we can tell, all past CRF parsers have used  X  X ositive X  features only.
However, negative features X  X eatures that are not observed in any tree X  X re still powerful indica-tors of (un)grammaticality: if we have never seen a PRN that starts with  X  X as, X  or a span that be-gins with a quotation mark and ends with a close bracket, then we would like the model to be able to place negative weights on these features. Thus, we use a simple feature hashing scheme where posi-tive features are indexed individually, while nega-W A A good yet simple parser. tive features are bucketed together. During train-ing there are no collisions between positive fea-tures, which generally receive positive weight, and negative features, which generally receive nega-tive weight; only negative features can collide. Early experiments indicated that using a number of negative buckets equal to the number of posi-tive features was effective. Our goal is to use surface features to replicate the functionality of other annotations, without in-creasing the state space of our grammar, meaning that the rules rule( r ) remain simple, as does the state space used during inference.

Before we present our main features, we briefly discuss the issue of feature sparsity. While lexical features are a powerful driver of our parser, firing features on rare words would allow it to overfit the training data quite heavily. To that end, for the purposes of computing our features, a word is rep-resented by its longest suffix that occurs 100 or more times in the training data (which will be the
Table 1 shows the results of incrementally building up our feature set on the Penn Treebank development set. R ULE specifies that we use only indicators on rule identity for binary production and nonterminal unaries. For this experiment and all others, we include a basic set of lexicon fea-tures, i.e. features on preterminal part-of-speech tags. A given preterminal unary at position i in the sentence includes features on the words (suf-fixes) at position i  X  1 , i , and i + 1 . Because the lexicon is especially sensitive to morphological ef-fects, we also fire features on all prefixes and suf-fixes of the current word up to length 5, regardless of frequency.

Subsequent lines in Table 1 indicate additional surface feature templates computed over the span, which are then conjoined with the rule identity as shown in Figure 1 to give additional features. In the rest of the section, we describe the features of this type that we use. Note that many of these fea-tures have been used before (Taskar et al., 2004; Finkel et al., 2008; Petrov and Klein, 2008b); our goal here is not to amass as many feature tem-plates as possible, but rather to examine the ex-tent to which a simple set of features can replace a complicated state space. 4.1 Basic Span Features We start with some of the most obvious proper-ties available to us, namely, the identity of the first and last words of a span. Because heads of con-stituents are often at the beginning or the end of a span, these feature templates can (noisily) cap-ture monolexical properties of heads without hav-ing to incur the inferential cost of lexicalized an-notations. For example, in English, the syntactic head of a verb phrase is typically at the beginning of the span, while the head of a simple noun phrase is the last word. Other languages, like Korean or Japanese, are more consistently head final.
Structural contexts like those captured by par-ent annotation (Johnson, 1998) are more subtle. Parent annotation can capture, for instance, the difference in distribution in NPs that have S as a parent (that is, subjects) and NPs under VPs (ob-jects). We try to capture some of this same intu-ition by introducing a feature on the length of a span. For instance, VPs embedded in NPs tend to be short, usually as embedded gerund phrases. Because constituents in the treebank can be quite long, we bin our length features into 8 buckets, of Figure 2: An example showing the utility of span context. The ambiguity about whether read is an adjective or a verb is resolved when we construct a VP and notice that the word proceeding it is un-likely. Figure 3: An example showing split point features disambiguating a PP attachment. Because impact is likely to take a PP, the monolexical indicator feature that conjoins impact with the appropriate rule will help us parse this example correctly. lengths 1, 2, 3, 4, 5, 10, 20, and  X  21 words.
Adding these simple features (first word, last word, and lengths) as span features of the X-bar grammar already gives us a substantial im-provement over our baseline system, improving the parser X  X  performance from 73.0 F1 to 85.0 F1 (see Table 1). 4.2 Span Context Features Of course, there is no reason why we should con-fine ourselves to just the words within the span: words outside the span also provide a rich source of context. As an example, consider disambiguat-ing the POS tag of the word read in Figure 2. A VP is most frequently preceded by a subject NP, whose rightmost word is often its head. Therefore, we fire features that (separately) look at the words immediately preceding and immediately follow-ing the span. 4.3 Split Point Features Another important source of features are the words at and around the split point of a binary rule ap-plication. Figure 3 shows an example of one in-( CEO of Enron ) Figure 4: Computation of span shape features on two examples. Parentheticals, quotes, and other punctuation-heavy, short constituents benefit from being explicitly modeled by a descriptor like this. stance of this feature template. impact is a noun that is more likely to take a PP than other nouns, and so we expect this feature to have high weight and encourage the attachment; this feature proves generally useful in resolving such cases of right-attachments to noun phrases, since the last word of the noun phrase is often the head. As another example, coordination can be represented by an indicator of the conjunction, which comes imme-diately after the split point. Finally, control struc-tures with infinitival complements can be captured with a rule S  X  NP VP with the word  X  X o X  at the split point. 4.4 Span Shape Features We add one final feature characterizing the span, which we call span shape. Figure 4 shows how this we indicate whether that word begins with a cap-ital letter, lowercase letter, digit, or punctuation mark. If it begins with punctuation, we indicate the punctuation mark explicitly. Figure 4 shows that this is especially useful in characterizing con-structions such as parentheticals and quoted ex-pressions. Because this feature indicates capital-ization, it can also capture properties of NP in-ternal structure relevant to named entities, and its sensitivity to capitalization and punctuation makes it useful for recognizing appositive constructions. We have built up a strong set of features by this point, but have not yet answered the question of whether or not grammar annotation is useful on top of them. In this section, we examine two of the most commonly used types of additional annota-tion, structural annotation, and lexical annotation. Table 2: Results for the Penn Treebank develop-ment set, sentences of length  X  40 , for different annotation schemes implemented on top of the X-bar grammar.
 Recall from Section 3 that every span feature is conjoined with indicators over rules and rule par-ents to produce features over anchored rule pro-ductions; when we consider adding an annotation layer to the grammar, what that does is refine the rule indicators that are conjoined with every span feature. While this is a powerful way of refining features, we show that common successful anno-tation schemes provide at best modest benefit on top of the base parser. 5.1 Structural Annotation The most basic, well-understood kind of annota-tion on top of an X-bar grammar is structural an-notation, which annotates each nonterminal with properties of its environment (Johnson, 1998; Klein and Manning, 2003). This includes vertical annotation (parent, grandparent, etc.) as well as horizontal annotation (only partially Markovizing rules as opposed to using an X-bar grammar).
Table 2 shows the performance of our feature set in grammars with several different levels of find large gains (6% absolute improvement, 20% relative improvement) going from v = 0 ,h = 0 to v = 1 ,h = 1 ; however, we do not find the same level of benefit. To the extent that our parser needs to make use of extra information in order to ap-ply a rule correctly, simply inspecting the input to determine this information appears to be almost as effective as relying on information threaded through the parser.

In Section 6 and Section 7, we use v = 1 and h = 0 ; we find that v = 1 provides a small, reli-able improvement across a range of languages and tasks, whereas other annotations are less clearly beneficial. Table 3: Final Parseval results for the v = 1 ,h = 0 parser on Section 23 of the Penn Treebank. 5.2 Lexical Annotation Another commonly-used kind of structural an-notation is lexicalization (Eisner, 1996; Collins, 1997; Charniak, 1997). By annotating grammar nonterminals with their headwords, the idea is to better model phenomena that depend heavily on the semantics of the words involved, such as coor-dination and PP attachment.

Table 2 shows results from lexicalizing the X-bar grammar; it provides meager improvements. One probable reason for this is that our parser al-ready includes monolexical features that inspect the first and last words of each span, which cap-tures the syntactic or the semantic head in many cases or can otherwise provide information about what the constituent X  X  type may be and how it is likely to combine. Lexicalization allows us to cap-ture bilexical relationships along dependency arcs, but it has been previously shown that these add only marginal benefit to Collins X  X  model anyway (Gildea, 2001). 5.3 English Evaluation Finally, Table 3 shows our final evaluation on Sec-tion 23 of the Penn Treebank. We use the v = 1 ,h = 0 grammar. While we do not do as well as the Berkeley parser, we will see in Section 6 that our parser does a substantially better job of gener-alizing to other languages. Historically, many annotation schemes for parsers have required language-specific engineering: for example, lexicalized parsers require a set of head rules and manually-annotated grammars require detailed analysis of the treebank itself (Klein and Manning, 2003). A key strength of a parser that does not rely heavily on an annotated grammar is that it may be more portable to other languages. We show that this is indeed the case: on nine lan-guages, our system is competitive with or better than the Berkeley parser, which is the best single aggregate and on the majority of individual languages.
We evaluate on the constituency treebanks from the Statistical Parsing of Morphologically Rich Languages Shared Task (Seddah et al., 2013). We compare to the Berkeley parser (Petrov and Klein, 2007) as well as two variants. First, we use the  X  X eplaced X  system of Bj  X  orkelund et al. (2013) (Berkeley-Rep), which is their best fies the Berkeley parser by replacing rare words with morphological descriptors of those words computed using language-specific modules, which have been hand-crafted for individual languages or are trained with additional annotation layers in the treebanks that we do not exploit. Unfor-tunately, Bj  X  orkelund et al. (2013) only report re-sults on the development set for the Berkeley-Rep model; however, the task organizers also use a ver-sion of the Berkeley parser provided with parts of speech from high-quality POS taggers for each language (Berkeley-Tags). These part-of-speech taggers often incorporate substantial knowledge of each language X  X  morphology. Both Berkeley-Rep and Berkeley-Tags make up for some short-comings of the Berkeley parser X  X  unknown word model, which is tuned to English.

In Table 4, we see that our performance is over-all substantially higher than that of the Berkeley parser. On the development set, we outperform the Berkeley parser and match the performance of the Berkeley-Rep parser. On the test set, we outper-form both the Berkeley parser and the Berkeley-Tags parser on seven of nine languages, losing only on Arabic and French.

These results suggest that the Berkeley parser may be heavily fit to English, particularly in its lexicon. However, even when language-specific unknown word handling is added to the parser, our model still outperforms the Berkeley parser over-all, showing that our model generalizes even bet-ter across languages than a parser for which this is touted as a strength (Petrov and Klein, 2007). Our span features appear to work well on both head-initial and head-final languages (see Basque and Korean in the table), and the fact that our parser performs well on such morphologically-rich languages as Hungarian indicates that our suf-fix model is sufficient to capture most of the mor-phological effects relevant to parsing. Of course, a language that was heavily prefixing would likely require this feature to be modified. Likewise, our parser does not perform as well on Arabic and He-brew. These closely related languages use tem-platic morphology, for which suffixing is not ap-propriate; however, using additional surface fea-tures based on the output of a morphological ana-lyzer did not lead to increased performance.
Finally, our high performance on languages such as Polish and Swedish, whose training tree-banks consist of 6578 and 5000 sentences, respec-tively, show that our feature-rich model performs robustly even on treebanks much smaller than the 2  X  ( 4 While...) 1 Figure 5: An example of a sentence from the Stan-ford Sentiment Treebank which shows the utility of our span features for this task. The presence of  X  X hile X  under this kind of rule tells us that the sentiment of the constituent to the right dominates the sentiment to the left. Finally, because the system is, at its core, a classi-fier of spans, it can be used equally well for tasks that do not normally use parsing algorithms. One example is sentiment analysis. While approaches to sentiment analysis often simply classify the sen-tence monolithically, treating it as a bag of n -grams (Pang et al., 2002; Pang and Lee, 2005; Wang and Manning, 2012), the recent dataset of Socher et al. (2013) imposes a layer of structure on the problem that we can exploit. They annotate every constituent in a number of training trees with an integer sentiment value from 1 (very negative) to 5 (very positive), opening the door for models such as ours to learn how syntax can structurally
Figure 5 shows an example that requires some analysis of sentence structure to correctly under-stand. The first constituent conveys positive senti-ment with never lethargic and the second conveys negative sentiment with hindered , but to determine the overall sentiment of the sentence, we need to exploit the fact that while signals a discounting of the information that follows it. The grammar rule 2  X  4 1 already encodes the notion of the senti-ment of the right child being dominant, so when this is conjoined with our span feature on the first word ( While ), we end up with a feature that cap-tures this effect. Our features can also lexicalize on other discourse connectives such as but or how-ever , which often occur at the split point between two spans. 7.1 Adapting to Sentiment Our parser is almost entirely unchanged from the parser that we used for syntactic analysis. Though the treebank grammar is substantially different, with the nonterminals consisting of five integers with very different semantics from syntactic non-terminals, we still find that parent annotation is ef-fective and otherwise additional annotation layers are not useful.

One structural difference between sentiment analysis and syntactic parsing lies in where the rel-evant information is present in a span. Syntax is often driven by heads of constituents, which tend to be located at the beginning or the end, whereas sentiment is more likely to depend on modifiers such as adjectives, which are typically present in the middle of spans. Therefore, we augment our existing model with standard sentiment anal-ysis features that look at unigrams and bigrams in the span (Wang and Manning, 2012). More-over, the Stanford Sentiment Treebank is unique in that each constituent was annotated in isolation, meaning that context never affects sentiment and that every word always has the same tag. We ex-ploit this by adding an additional feature template similar to our span shape feature from Section 4.4 which uses the (deterministic) tag for each word as its descriptor. 7.2 Results We evaluated our model on the fine-grained sen-timent analysis task presented in Socher et al. (2013) and compare to their released system. The task is to predict the root sentiment label of each parse tree; however, because the data is annotated with sentiment at each span of each parse tree, we can also evaluate how well our model does at these intermediate computations. Following their exper-imental conditions, we filter the test set so that it only contains trees with non-neutral sentiment la-bels at the root.

Table 5 shows that our model outperforms the model of Socher et al. (2013) X  X oth the published numbers and latest released version X  X n the task of root classification, even though the system was not explicitly designed for this task. Their model has high capacity to model complex interactions of words through a combinatory tensor, but it ap-pears that our simpler, feature-driven model is just as effective at capturing the key effects of compo-sitionality for sentiment analysis. Stanford CoreNLP current 50.7 80.8 Stanford CoreNLP current 49.1 80.2 Table 5: Fine-grained sentiment analysis results on the Stanford Sentiment Treebank of Socher et al. (2013). We compare against the printed num-bers in Socher et al. (2013) as well as the per-formance of the corresponding release, namely the sentiment component in the latest version of the Stanford CoreNLP at the time of this writ-ing. Our model handily outperforms the results from Socher et al. (2013) at root classification and edges out the performance of the latest version of the Stanford system. On all spans of the tree, our model has comparable accuracy to the others. To date, the most successful constituency parsers have largely been generative, and operate by refin-ing the grammar either manually or automatically so that relevant information is available locally to each parsing decision. Our main contribution is to show that there is an alternative to such anno-tation schemes: namely, conditioning on the input and firing features based on anchored spans. We build up a small set of feature templates as part of a discriminative constituency parser and outperform the Berkeley parser on a wide range of languages. Moreover, we show that our parser is adaptable to other tree-structured tasks such as sentiment anal-ysis; we outperform the recent system of Socher et al. (2013) and obtain state of the art performance on their dataset.

Our system is available as open-source at https://www.github.com/dlwh/epic .
 This work was partially supported by BBN un-der DARPA contract HR0011-12-C-0014, by a Google PhD fellowship to the first author, and an NSF fellowship to the second. We further gratefully acknowledge a hardware donation by NVIDIA Corporation.

