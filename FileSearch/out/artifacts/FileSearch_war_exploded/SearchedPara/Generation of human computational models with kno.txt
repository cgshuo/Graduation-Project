 1. Introduction
Ambient Intelligence (AmI) is an emerging discipline in informa-tion technology, in which people are empowered through a digital environment mainly consisting of complex software and devices (sensors and actuators) connected through a network ( Cook et al., 2007 ). AmI is based on technologies from the following areas: Arti fi cial Intelligence, Human Computer Interaction, Sensors and
Ubiquitous Computing. The main goal of AmI is to offer a digital environment which is possible to support the cooperation of the devices, services and people. By using AmI, it is possible to create sensitive, adaptive and responsive scenarios which interact with users seamlessly by providing them with implicit and unobtrusive interaction paradigms. AmI applications are endless: smart homes ( Silva et al., 2012 ), health monitoring and assistance ( Suryadevara et al., 2013 ), hospitals ( Cheng et al., 2013 ), transportation ( Garc X a-
Nieto et al., 2012 ), emergency services, education ( Kaklauskas et al., 2013 ), workplaces, and etcetera. In all these applications, the user is the central entity. And the usual tendency is the incorporation of groups of users into the development process of
AmI systems. Nonetheless, this comes with an extra cost which sometimes is not affordable. There are mainly three phases of the development process in which users are a must: requirements speci fi cation, testing, and validation. In all these phases, agent-based social simulation (ABSS) is a promising technology which can support AmI development ( Serrano and Bot X a, 2013 ).
 revolutionary paradigm which changes the vision of IT (Informa-tion Technology) systems. And new paradigm's particularities are hard to grasp by customers when it comes to explain what AmI systems can do for them. This makes requirements speci fi hard task. The use of ABSS allows customers to approach to visualizations of different scenarios and to understand quickly and intuitively the concepts behind the system. Moreover, the customer can criticize and propose new ideas which, in turn, are again simulated and visualized. This iterative fashion of working with requirements has proven to be useful not only in AmI but also in general software engineering.
 approach for testing AmI systems is by using Living Labs . These laboratories allow users and researchers to work together in real life environments to evaluate the quality of the services developed.
Although this testing approach is intuitive and ultimately neces-sary, it is possible to anticipate a large number of faults before software deployment using ABSS techniques ( Campillo-Sanchez et al., 2013 ). This anticipation involves a signi fi cant cost reduction in fi xing these faults because one of the bases of software engineering is that the earlier a fault is found, the cheaper it is to fi xit( McConnell, 2004 ).

As explained, users are the main entity in AmI systems because these systems provide users with personalized facilities in a non-intrusive way. Therefore, a major issue when studying AmI systems by simulations is the realistic modelling of users and its validation ( Garcia-Valverde et al., 2012a ). To address this challen-ging research problem, the authors introduced a methodology called CHROMUBE (CHROnobiology for Modelling hUman BEha-viour) ( Campuzano et al., 2012a ). Unlike a great number of related works which propose methodologies for the agent based model-ling, CHROMUBE allows developers to model realistic users with the purpose of helping on various phases of AmI systems' deve-lopment: requirements speci fi cation, testing and validation. The main principles of this methodology are the following: (1) The AmI development process can be enhanced by modelling realistic human behaviours and simulating them. (2) Chronobiology ( Halberg et al., 1977 ), which is an area of science which studies how time affects living organisms, can assist in the characteriza-tion of human behaviours. (3) Knowledge extracted from sensor data allow creating realistic CMHBs (Computational Models of Human Behaviour).

CHROMUBE has been successfully employed to test AmI envir-onments where realistic users were simulated from extensive data retrieved from sensors ( Campuzano et al., 2012a; Mu X oz et al., 2012 ). Nonetheless, requiring experiences registered by sensors is an important shortcoming in the methodology. There are a large number of cases where this assumption is simply unfeasible: sensors can be seen as an invasive technology by users; sensors may not be allowed because of ethical reasons; and, more importantly, aspects of users' behaviours may not be accessible by the imperfect vision of the world that sensors are capable of offering, e.g. social interactions.

Due to the aforementioned drawbacks in the methodology, this paper presents an extension of CHROMUBE which allows it to use an additional information source to generate human models: domain experts. This CHROMUBE extension proposal consists of obtaining knowledge about human behaviours from these experts and to model this knowledge with an ontology and timelines.
Benjamin et al. (2006) explained that although ontological analysis has been shown to be an effective step in the construction of robust knowledge based systems, the modelling and simulation community, in general, has not enjoyed the bene fi ts of ontology management methods and tools such as the one proposed in this
CHROMUBE extension. Due to the ontologies expressiveness limitations related to temporal reasoning, the ontology model is combined with timelines, which have been extensively used for representing the order of the events, tasks and human behaviours.
These knowledge models ease to developers the implementation of CMHBs and their subsequent validation.

Although the knowledge engineering techniques that this contribution relies on are not novel, to the best of the authors' knowledge, this paper is the fi rst work where (1) the domain experts' knowledge is aimed at reproducing the behaviour of running AmI systems by simulations; (2) a common methodolo-gical framework is given for combining information obtained from sensors and experts' expertise to create realistic agent-based social simulations; and (3) open and free tools are given to allow the interested reader to follow and evaluate the approach presented.
These contributions are illustrated with the modelling of users' behaviours during a complete morning in the operating theatre of a Spanish hospital. A number of incorrect assumptions and programming faults were detected thanks to the CHROMUBE extension proposed here. Besides, the resulting models (CMHBs) proved to be a powerful tool to test AmI systems in this hospital and, more speci fi cally, to test indoor location based services.
The paper outline is the following. After revising the related works in Section 2 , the CHROMUBE methodology is detailed in Section 3 . Section 4 focuses on the last and more challenging phase of the methodology: the validation of the human models produced. Section 5 gives a full case study to illustrate the use of the approach presented and, fi nally, Section 6 concludes. 2. Related works
CHROMUBE proposes using expert knowledge to develop realistic models of human behaviours. There are many examples of works using the elicitation of knowledge from experts to create realistic model of human behaviours ( Bos et al., 1997; Jones et al., 1999 ). Moreover, some works combine expert knowledge with other information sources. For example, Hattori et al. (2011) combine log data from trials performed on a simulator with expert knowledge in order to identify and formalize driving behaviour models. In the same vein, Murakami et al. (1999, 2005) combine domain knowledge obtained from interviews with data from observations of some simulations for the construction of realistic behaviour models used in a virtual training system. Although most proposals consider several sources of information, such assump-tion is not always feasible in real scenarios. In many cases, experts are the only information source available. In that sense, Garro and Russo (2010) present the easyABMS methodology. This work is oriented to provide domain experts with a methodology for the agent-based modelling and simulation of complex systems. This methodology is user-friendly and does not require advanced knowledge or skills. However, the expert is in charge of the whole process in this methodology. This requires the domain experts to make a special effort and, in some cases, this causes the simula-tions to be incorrectly simpli fi ed or modelled.

In order to address these issues, this paper presents an extension of the CHROMUBE methodology, which provides full assistance in the process of obtaining computational human models from expert knowledge. This extension offers support from the knowledge capture until the validation of the CMHBs.
Regarding the fi rst step, the knowledge capture, there are several methods for acquiring data about people's activities in their daily lives. These methods can be classi fi ed in at least three categories: (1) data collection from sensors, (2) observation-based data collection, and (3) data collection based on survey techniques ( Monitoring et al., 2009; Tapia et al., 2004 ).

In the fi rst group, data collection is made by the use of sensors attached to the body or included in the environment. This method is a promising and relatively inexpensive technique to acquire data about certain human behaviours. Examples of sensors attached to the body are the accelerometers ( Amini et al., 2011; Makikawa et al., 2001 ), biometric wearable sensors (for measuring heart rate, blood pressure, temperature, etc.) ( Pantelopoulos and Bourbakis, 2010 ), sensors integrated into clothes ( Pacelli et al., 2006 )or sensors integrated into mobile phones or PDAs ( Liao et al., 2007 ). Among the sensors embedded in the environment, typical devices are the following: motion sensors, pressure pads, and door latch sensors ( Beth et al., 2003; Orr and Abowd, 2000 ).
The main advantage of this kind of data collection techniques is that sensors are usually not intrusive for people and they can be easily deployed in actual environments. However, some activities that include complex physical motion and interactions among people cannot be correctly differentiated from others ( Serrano et al., 2012; Guti X rrez et al., 2013 ). Another important disadvan-tage is that the use of sensors could not be allowed in some scenarios, therefore data must be extracted from other sources.
The second group of methods is the observation-based data collection. The observation of human behaviours involves follow-ing the target subjects and recording their movements, actions and activities. This can be undertaken in a simply manner by writing-down the activities (i.e. direct observation) or by using sensors such as microphones and cameras ( H.-S. Chen et al., 2006;
Hoey et al., 2005; Kern et al., 2003 ). In the case of direct observation, the problem is that the presence of the observers could annoy people. In the case of remote observation, an issue is that sensors can be perceived as invasive and, as in the previous case, they might be not allowed.

In such situations, the remaining alternative is data collection based on survey techniques, where information of behaviours is based on users' self-assessments or on experts' knowledge. The most common techniques in that group are interviews ( Corbetta, 2003 ) and trip diaries ( Thornton et al., 1997 ).

Trip diaries are usually written in real-time and, therefore, they can provide very detailed information. Since a great deal of effort is needed, this can cause the subjects to avoid participating.
Besides, in some cases, these subjects are unable to participate (e.g. an Alzheimer patient).

Interview techniques involve questioning the experts. They can be structured, where the questions are standardized, or unstruc-tured, where a freestyle chat with the expert is established.
However, the most common method is the semi-structured inter-view, where pre-de fi ned questions are planned and more addi-tional questions are asked according to the answers obtained. The main advantages of the use of interviews in data collection are that they are relatively cheap, easy to develop and allow the collection and analysis of data taken from comparatively large samples.
Furthermore, this kind of technique is the only available in some scenarios where sensors cannot be installed or other sources of information are not available.

When the knowledge has been extracted and analysed, creat-ing the models which represent such knowledge is needed. This work proposes the use of ontologies as part of the knowledge modelled. Ontologies aim to structure and represent domain knowledge in a generic way which may be reused and shared across various applications and groups of people ( Razmerita, 2011 ). The use of ontologies for user modelling is not novel and has been proposed for several scenarios in ubiquitous computing environments ( Heckmann et al., 2005, 2007 ), real-time ubiquitous applications ( Hatala et al., 2005 ), e-learning environments ( Dolog et al., 2004; Kay and Lum, 2005 ), and etcetera.

For a general purpose, the work presented in Napierski et al. (2004) and Young and Harper (2005) describes an ontology-based approach to develop human behaviour models. This ontology emerges from the need of a common model where the knowledge is modelled in a very understandable manner by the model analysts and the users. Authors illustrate how the ontology is used to capture human behaviour models and domain speci fi cknowledgeina generic manner. In this process, au thors detect the need of present-ing the chronological order of the behaviours in a clear and intuitive manner. This problem is solved by the use of timelines as in the paper presented here. Timelines have been extensively used for representing the order of the events, tasks and human behaviours ( Addlesee et al., 2001; Corker and Smith, 1993; Flores and Sep X lveda, 2011 ). Furthermore, they are usually complemented with other techniques as in the approach this paper presents.

Finally, in order to validate if the CMHBs generated are realistic enough for their purpose, this work proposes the use of produc-tion rules with work fl ow to validate temporal restrictions.
The validation of computational models is usually conducted by comparing the model output to real or synthetic data generated by simulations or statistical methods ( Campuzano et al., 2012a; Garcia-Valverde et al., 2012a; Mu X oz et al., 2012; Pentland and Liu, 1999;
Salvucci et al., 2001 ). In other works, this kind of validation is improved using assessments by domain experts or rules that incorporate the experts' judgements ( Collopy and Armstrong, 1992;
Moss et al., 1994, 1997 ). A number of works only use experts' knowledge for the validation, i.e. experts employ their expertise and intuition to validate the models ( Eddy and Schlessinger, 2003 ). validation  X  (EVV) ( Shervais and Wakeland ), which are based on evolutionary techniques to test and exploit unusual combinations of parameters and models in order to compare their results ( Axtell et al., 1996; L.-C. Chen et al., 2006 ).
 validation can be undertaken theoretically by utilizing formal methods based on de fi ning a previous formal speci fi cation ( Fitzgerald, 2005; Hinchey, 2003; Weiss, 1999 ). Formal methods use a precise speci fi cation which could reveal ambiguities and omissions. Furthermore, these methods can enhance the commu-nication among developers and experts ( Yahja, 2006 ). edge. In fact, rule-based systems are considered to be the most appropriate paradigm to capture and re fi ne human expertise, and to automate reasoning for problem solving ( Hayes-Roth, 1985; Lu and Sadiq, 2007 ). However, systems with large and complex rule sets are incomprehensible and can lead users to mistrust, misuse or abandon this system ( Bellotti et al., 2002; Bellotti and Edwards, 2001; Muir, 1994 ). This case is usual in context-aware systems where complex rules and machine learning models ( Lim et al., 2009; Serrano et al., 2013 ) are employed.
 constraints and relationships among the behaviours. Nonetheless, this could result in a larger and more complex rule set. A usual solution to this problem is the use of work fl ows. Even so, using work fl ows to specify complex temporal constraints and relation-ships is not trivial for people with little modelling experience, typically the domain experts ( Flores and Sep X lveda, 2011 ). ontologies with timelines to achieve a more understandable knowledge representation. Nevertheless, the use of production rules and work fl ows is also recommended for validation purposes.
Therefore, this work employs production rules to validate that behaviours are as expected and work fl ows to validate the timing of these behaviours. 3. Methodology models of human behaviour (CMHBs) which are useful for realistic simulations. This process starts with information about how the target subject (TS) behaves. Up to now, the only information source considered in CHROMUBE was sensor data. However, this information source may not be available. In this case, other sources must be considered, e.g. documents, databases, websites, or IT systems. The main difference between these information sources and sensors is that sensors supply raw behaviour data which must be interpreted in order to obtain more structured information about behaviours. On the other hand, documents, databases or websites could contain structured information that can be used for
CMHBs. Still, fi nding human behaviour information encoded into documents is not very frequent. According to our experience, the companies interested in the CMHBs creation do not dissemi-nate encoded information about their TSs' behaviour. They often have related documentation but which is incomplete to achieve realistic CMHBs.
 alternative information source, domain experts. An expert is a person who has expertised in a certain fi eld or domain. Expertise is the ability of people to do effective and ef fi cient work and to deal with complex situations. In this case, an expert must know how the TSs behave on a daily basis (e.g. the manager of a hospital must know their hospital employees). Experts can provide all their knowledge about the TSs routines, timetables, their interactions with other people, or their abnormal behaviours. This paper presents an extension of CHROMUBE that allows developers to generate CMHBs using expert knowledge.

Knowledge acquisition techniques allow us to obtain knowl-edge from experts and to create a knowledge base. A knowledge base ( Russell et al., 1995 ) is a special kind of database that stores general knowledge about a particular domain. This knowledge base can be used to build knowledge models (i.e. formal repre-sentation of knowledge) integrated into the CMHBs. Once the CMHBs are created, and following the usual steps in CHROMUBE, they must be simulated and validated in order to check if their synthetic behaviours correspond to the real ones.

Fig. 1 shows how to apply CHROMUBE for both sensor data and expert knowledge. Step 1 is in charge of selecting the target subjects to model. Social simulation research always starts study-ing the  X  real world  X  phenomenon that researchers are interested in. This is called the target system or target subject (TS) in ABSS terminology ( Gilbert and Troitzsch, 2005 ). The basic research guidelines include the following: modelling this target; imple-menting the model in a simulation; and, after verifying and Behaviour model Behaviour data NO validating the implemented model, studying the output of simula-tion executions to gain insights into the TS. As stated in the introduction, a major issue when studying AmI systems by simulations is the realistic modelling of users and its validation ( Garcia-Valverde et al., 2012a ). In CHROMUBE, the TSs are these users and the results of a research conducted by the presented methodology are computational models of human behaviour (CMHBs). Therefore, the whole process starts with information about how the TSs behave.

In the CHROMUBE extension presented in this paper, expert knowledge is captured, analysed and modelled to create and validate a CMHB. Therefore, while steps 2  X  4a of the methodology are previous contributions ( Campuzano et al., 2012a ), steps 2 have been added to consider this new kind of information. The work fl ow path to follow is chosen depending on the available data source. Steps 2  X  4a, not detailed in this paper, receive sensor data representing facts or events as input. On the other hand, steps 2  X  4b deal with expert knowledge which is a highly structured form of information. One of the challenges this contribution addresses is that the knowledge that an expert can give in step 2b will be unstructured. Therefore, it needs to be analysed to extract its basic concepts and relations (step 3b) before the knowledge modelling (step 4b). The result is a well highly structured knowledge model of the TSs' behaviour which is the input of step 5. Therefore, steps 5  X  7, which were already included in previous works ( Campuzano et al., 2012a ) when sensors data were employed, have to be reconsidered and extended to deal with this new possible input. In this context, the validation step (explained in Section 4 ) is specially challenging since it funda-mentally de fi nes the rigour of an agent-based model ( North and Macal, 2007 ).

As explained above, steps 2  X  4b represent the application of the experts' variant of CHROMUBE this paper focuses on. These steps are inspired by the Knowledge Acquisition methodology by Milton (2007) . Milton's work is an excellent survey which offers a wide range of information about processing techniques and methods in the fi elds of knowledge acquisition, analysis, and modelling. This proposal addresses these three key areas. In the fi eld of Knowledge
Acquisition, it is similar to a number of other methodologies, notably CommonKADS ( Schreiber, 2000 ) and MOKA ( Stokes, 2001 ). The main difference between these approaches lies in the type of knowledge modelling projects they support. Common-
KADS is oriented to very specialized knowledge engineers that need to create expert systems using speci fi c templates. MOKA is more focused on the development of computer aided design (CAD) software. The main advantage of Milton's methodology over the others is its generality. Its knowledge acquisition procedures can be used virtually on any development project. It is composed of a set of simple techniques whose main goal is capturing knowledge from experts and creating computer based models of this knowledge. 3.1. Step 2b: knowledge capture
A key part of a knowledge acquisition project is concerned with knowledge elicitation. This step is not as easy as asking an expert a rather obvious set of questions and obtaining knowledge. Dealing with different psychological phenomena is also required (such as memory effects, communication dif fi culties, lack of understanding, and experts having different opinions). A number of circumstances make the problem even harder. Shadbolt (2005) presents a wide set of techniques developed by knowledge engineers to cope with these issues. Methods based on interviews are the techniques most commonly used for knowledge capture. The interview process is an art ( Weiss, 2008 ), not a quantitative methodology.
This section offers some guidelines illustrated with an example of how to capture knowledge related to the human behaviours topic in the context of the CHROMUBE step 2b.
 wants to simulate the behaviour of the of fi ce workers during an emergency in order to validate an emergency management appli-cation. There is not any sensor deployed inside the building and the only information source about the protocols to follow in case of emergency is the person in charge of the building security. This person, due to his/her experience, knows everything about how to perform the protocols during an emergency, the building struc-ture, the workers' timetables, and typical behaviour patterns these workers present. This person can be considered as an expert due to the great amount of knowledge he/she has about the target subjects and the problem itself.
 expert as the main technique for o btaining knowledge about human behaviour in these cases. In addition to a set of pre-de fi questions, additional questions may arise during the semi-structured interview, making the interview experience richer and allowing it to obtain a higher amount of knowledge. The elaboration of the question set is directly related to the abstraction level the developer needs. The most important topics to focus on are the following: (1) what target subjects need to be modelled?; (2) what behaviours do they usually man ifest and when?; (3) how do they interact with their environment an d other subjects? It is advisable to de fi ne a set of questions about these topics and to send it to the expert at least one day before the interview. Thereby, the expert will have time to think about them in a deliberate and conscious manner.
The question set must help the expert to focus on the required knowledge. In the case of our example, the simulation of the of building involves a high number of users. It is important to identify all the target subjects (i.e. workers and visitors), their timetables, the tasks that all of them should perform during an emergency (i.e. emergency protocols), the inter actions and coordination among people, even possible sensory and physical disabilities of some of them. The service or application, which is going to be validated with simulations (i.e. the model speci fi c purpose), guides the developer to con fi gure the abstraction level of the knowledge needed. the expert, some speci fi c situations will usually arise, e.g. suppose that the expert says that Bob is the employee responsible for evacuating a determined sector of the building. The developer could be interested in obtaining more information about this person, such as of fi ce, roommates, and timetable.
 set consisting of transcriptions or/and audio recordings. The next step of the methodology uses this material as input and analyses it to extract the most relevant knowledge concepts. 3.2. Step 3b: knowledge analysis 2b. Knowledge analysis is an activity performed by the knowledge engineer after the knowledge capture. It is concerned with identifying elements of knowledge that will be entered into the knowledge base to form its structure and basic components. There are four main elements to consider regarding knowledge structure:
Concepts : This set will include the following: the different target subjects; the behaviours to simulate; the physical envir-onment, i.e. rooms or zones where the TSs behave; and the objects they could interact with.

Attributes : They are crucial to obtain more realistic models, by describing the interval when the TS manifests a behaviour, the role and name of the target subject, physical attributes like the weight or height, etc.

Values : For the attributes, they can be precise or approximate, e.g. the approximate time when the TS is used to go to sleep is 9 p.m. or the weight of the TS is 200 lbs.

Relations : How the concepts are related between them. This includes a behaviour of a TS that produces other behaviour in another TS, e.g. a TS sends a task to another TS, the behaviour
Sending a task produces a new behaviour on the latter TS ( Accomplishing the task ).
 Let us illustrate this step following a subcase of the example of
Section 3.1 , referring to a concrete worker called Bob. Note that the full problem complexity is considerably higher but we are focusing on a subcase for illustrative purposes only. Then, suppose that we have previously obtained the following annotations (i.e. unstruc-tured knowledge) about the worker Bob from the expert:
Bob is a worker responsible of evacuating the people working at room 23. Every day he enters the room number 23 at 9:00.
According to the emergency protocol, what must he do when detecting a fi re at this room? (1) warning to any person who is present at the room, (2) making use of the fi re alarm located at the room, (3) fl eeing. The rest of workers must start fl towards the main stairs of the building once they have been advertised of the emergency.

The fi rst step after capturing this unstructured knowledge is analysing and decomposing it into concepts, attributes, values and relations. The most important concept to extract is which TS will be simulated. In this case explained above, there are two target subjects, TS 1 and TS 2. Note that it is possible to use the same
CMHB for different persons if all of them behave similarly. In this case, TS 1 represents the worker in charge of evacuation and
TS 2 represents the rest of the workers in the building. Then some attributes of these two subjects can be de fi ned: (1) Name and (2) Role during an emergency. The values of the Name attribute for
TS 1is Bob and, with respect to the attribute Role, TS 1isa Member of evacuation team while TS 2isa Common worker .

Once the knowledge about the subjects is extracted, let us analyse the concepts related to the behaviours. The following concepts can be obtained from the text above: Entering a room , Detecting a fi re , Warning colleagues , Activating alarm and Fleeing .
Some of these behaviours have attributes associated, e.g. the time they are accomplished. For example, the text says that one possible value of this attribute for Bob and the behaviour Entering the room is 9:00, i.e. when he enters the room at the beginning of the morning. Other concepts that must be considered, as they have an important role as part of the physical environment where the behaviours occur, are the following: Room number 23, Fire alarm and Stairs . Finally, relations among concepts are de fi ned. Detecting a fi re is causally related to Warning and Activating alarm following the emergency protocol. Warning is causally related to Fleeing ,as every subject who receives a warning starts fl eeing immediately.
The next step deals with creating a knowledge base composed of knowledge models. These models represent the concepts, attributes, values and relations obtained in this step 3b. This is achieved in step 4b of the CHROMUBE methodology. 3.3. Step 4b: how to model knowledge
Knowledge models are useful because, on the one hand, they allow experts to easily validate them and, on the other hand, they can be used to create CMHBs either manually or automatically. Thus, step 4b deals with creating simple visual models under-standable by humans and machines.

An ontology ( McGuinness et al., 2004 ) is a (meta) data schema that gives structure to informal sources of data and information. Ontologies are regularly used to represent knowledge models. Information about the target subjects and their environment can be stored in an ontology by using the knowledge extracted from the previous analysis (step 3b). In CHROMUBE, ontologies are used for the speci fi cation of both the users and the environment.
It is important to note that although there exists a clear mapping from ontologies to human models, ontologies have expressive limitations that make more information necessary. In the semantic web literature, these limitations are usually over-come by rule-based knowledge. One of our main research lines attempts to simplify the presented proposal by replacing most of its modelling techniques and tools (see Fig. 5 ) with semantic web technologies such as SPARQL ( Garlik et al., 2011 ) for queries and SWRL ( Horrocks et al., 2004 ) for rules. Nonetheless, as explained in Section 2 , the rule-based knowledge and semantic reasoners also have limitations that motivate the inclusion of other model-ling techniques in our approach. For example, because of the open-world assumption, SWRL rules that attempt to enumerate indivi-duals or properties in an ontology are not always possible ( http:// www.protege.cim3.net/cgi-bin/wiki.pl?SWRLLanguageFAQ ).
Despite these limitations, ontologies are still necessary and useful in the approach presented. The ontology de fi nition allows obtaining a controlled vocabulary of concepts with explicitly and formally de fi ned semantics to be shared and understood by machines and humans. Therefore, after the knowledge extraction process in the step 3b of the methodology, an ontology building process is needed in the step 4b to translate experts' requirements from natural language into an ontology language such as OWL ( McGuinness et al., 2004 ). Although, for the sake of brevity, this paper does not detail the process of creating an ontology, it can be a challenging and time-consuming process which has motivated a number of methodologies devoted just to this task ( Fern X ndez-L X pez and G X mez-P X rez, 2002 ). This process was undertaken using the open-source ontology editor Protege ( http://www. protege.stanford.edu ) although there are plenty of alternatives. As explained, an ontology is not only readable by machines but also a very intuitive knowledge representation for humans. This allows the human-domain experts to validate that the ontologies cover correctly the requirements formerly expressed in natural language. Additionally, as Section 5.5 describes, an ontology reader plug-in for the UbikSim simulator ( https://github.com/emilioserra/ UbikSim/wiki ) has been developed to partially automate the implementation of CMHBs from ontologies.

In CHROMUBE, the use of ontologies is combined with time-lines for temporal speci fi cation of users behaviours and their interactions with the environment. Timelines ( Harrison et al., 1994 ) are one of the most recommended kinds of knowledge models to represent human behaviour at work. A timeline is a graphical representation of when tasks are executed. Tasks are represented as nodes, disposed along an horizontal axis represent-ing time. The width of each node shows when the task starts and fi nishes. It is useful to represent the different tasks of a work routine. Every node of the timeline represents, in this case, a behaviour. The timeline allows declaring behaviours that precede other behaviours (i.e. a causal relation) and behaviours that occur simultaneously to other behaviours.

Timelines ( Smith et al., 2001 ) can be automatically translated to computational models of temporal processes (i.e. those whose relevant information is when they start and their duration). Thus, they are suitable to represent when behaviours start and end.
However, they have not enough expressiveness to represent the whole picture of behaviours in a simulation. Neither TS roles nor environment details can be represented by this method. As explained above, ontologies are employed to represent this kind of knowledge. Thus, the knowledge base of a CHROMUBE simula-tion speci fi cation is composed of two kinds of knowledge models: a timeline for temporal aspects of behaviours and an ontology for the rest of information related to the TSs (e.g. physical environ-ment, objects, human actors, etcetera).

Fig. 2 presents the timeline and the ontology for the knowledge analysed in Section 3.2 . How to create these models from the concepts obtained in step 3b follows:
Firstly, we model the concepts related to users and environ-ment (i.e. objects and physical spaces) by considering the ontology classes. Three main entities were created to represent these concepts: Person , Object and Space . Two subclasses of Person were needed to represent the two target subjects de fi ned in step 3b: TS 1 and TS 2. These subclasses have a pair of attributes: Name and
Role . These attributes are added to the ontology as string proper-ties. At this modelling stage, the ontology is not instantiated yet.
Therefore, the values of these properties are not assigned. For example, the CMHB representing Bob will be an instance of TS 1in next steps.

The rest of the concepts related to Object and Space were created in the same way. Note that the property location of the entity Fire Alarm is a reference to an entity Space . This reference models the relation existing between the object fi re alarm and the location where it is allocated, that could be in a room or on the stairs.

Secondly, using the timeline we model the human behaviours and the temporal relations between them. The timeline of Fig. 2 models the behaviours of both target subjects: TS 1 and TS 2.
Following the knowledge analysis of step 3b, we know that the working day begins at 9:00, when TS 1 enters the room. At this point, we suppose that his/her roommates are working since this hour. At some point of the morning, TS 1 detects a fi re and warns the rest of the people in the room. Note that there is an arrow from the behaviour Warning colleagues that provokes a change of behaviour in TS 2. This dependence models an interaction between
TS 1 and TS 2 as the warning that TS 1 makes to TS 2 for starting fl eeing. Finally, while the rest of the workers are fl eeing, TS activates the alarm and starts fl eeing too.
 compose our knowledge base in the approach presented. This knowledge base will be needed in the next steps in order to create the CMHBS and to simulate them.
 create CMHBs, it is important to ensure that such knowledge is accurate. Thus, it must be checked by at least the expert who provided the knowledge. Unless only one expert is available, cross-validation with alternative experts can help to assure that the models developed with the primary expert are as correct and complete as possible. Cross-validation consists of showing the knowledge models to an alternative expert for review. When some discrepancy arises, a consensus session can be programmed to solve it. As Fig. 1 shows, if no consensus can be reached, the knowledge models cannot be validated. Then it is recommended to return to step 2b and refocus the interviews. Once the knowl-edge models are validated, they can be used to create CMHBs (step 5). 3.4. Step 5: how to generate CMHBs identify four elements in the knowledge base: (1) the target subjects to simulate; (2) the behaviours they can manifest; (3) the physical places where they are going to manifest the behaviours; and (4) the parts of the physical environment the subjects can affect and/or use (e.g. tools, furniture, mobile devices, etcetera). CHROMUBE includes the following steps to generate the
CMHBs starting from the knowledge base constructed in step 4b: 1. Identify all the TSs in the knowledge base and create one CMHB 2. For all TS in the knowledge base,
CHROMUBE already includes from its previous version a rather generic abstract machine that can be used to develop CMHBs called the hierarchical automaton of behaviours (HAB). The HAB is a hierarchical automaton whose states can be themselves other auto-mata. States represent behaviours and the current state of the automaton represents the behaviour the CMHB is having at the time. It is possible to simulate the transitions between behaviours using probability distribution functions (pdfs). One of the main reasons of recommending HABs is that there is an open and free implementation as the next step of the methodology covers. How-ever, other alternatives are perfectly feasible. For example, Lacroix et al. (2013) have formalized the construction of populations in multi-agent simulations and implemented various driving styles in the traf fi c (e.g. aggressive, cautious drivers) in a commercial simulator.

The following subsection is devoted to introduce how to work with HABs in CHROMUBE. 3.4.1. How to model behaviours with a HAB
A HAB is a hierarchical automaton of behaviours, whose transitions between states are generated by a set of random abstract machine is very convenient in this context because it allows mapping every behaviour concept from the knowledge base to a state of the HAB. Thus, given a concrete CMHB to create, let its HAB be denoted as  X  . The HAB is formally de fi ned as a triple  X f q 0 ; Q ; T g , where Q is the set of states. State q 0 from the triple refers to the single default behaviour that any  X  must have. Thus, the automaton switches to this state when no other transition remains so far.

Every behaviour q i of the HAB is de fi ned as q  X  X  label ; t left ; p ; I  X  where label is the label of the state, the element t left average time for the subject to stay in this state, and p is a priority for this state. Priorities are useful in cases where a number of transitions must be done at the same time. I i  X f I i ; j intervals during the day which modulate how the subject behaves in the state depending on the active interval. In each
I the ts ij is the time of the day in which the j -th interval of the q state starts, and te ij is the time of de day in which the same interval for the same state ends. Finally, pdf i ; j  X   X   X  refers to a parametric probability distribution (pdf) function (e.g. an exponential func-tion) whose parameters are de fi ned by the  X  vector of values (e.g. parameter of the exponential pdf). The last element of the is T . It refers to an interpreter algebraically de fi ned as
T :
Q t 24 t 24 -f X  q ; t  X  ;  X  q 0 ; t 0  X  ;  X  q  X  X  ; t  X  X   X 
T takes an argument in the set of the automaton states, and two other parameters in the time domain bounded on the interval  X  00 : which there is a behaviour change. For example, the pair of consecutive states  X  q ; t  X  ;  X  q 0 ; t 0  X  indicates a change from state interpreter, see Campuzano et al. (2012a) .

Once the states q i are de fi ned, the process for creating CMHBs with the HAB component follows: 1. Identify all the TSs in the knowledge base and create one CMHB per TS. 2. For all TS in the knowledge base, (a) Identify all the behaviours the TS can manifest. (b) For all of these behaviours, (d) Create an automaton structure (i.e. de fi ning its nodes and Creating a CMHB is a simple process once the necessary knowl-edge about behaviours is codi fi ed in a knowledge model (i.e. a timeline). The pseudocode of Fig. 3 provides the reader with a description of the automatic translation process of a timeline into a HAB model. The algorithm keeps track of a set of nodes, a set of internal transitions (i.e. those that join two behaviour nodes of the same target subject) and a set of external transitions (i.e. those that join two behaviour nodes of different target subjects). Each node of the timeline has an associated state in the resulting automaton. Fig. 4 shows the automaton which corresponds to the timeline of Fig. 2 . Only one level of hierarchy is required in this case. 3.5. Step 6: simulation of CMHBs Step 6 of CHROMUBE is concerned with how to simulate the CMHBs once they are created. CHROMUBE relies on the use of UbikSim ( https://github.com/emi lioserra/UbikSim/wiki ) for this pur-pose. UbikSim is a social simulator (i.e. it is based on the MASON social simulation software) which addresses the simulation of users realistically and offers the required software classes to use HABs with little effort ( Campuzano et al., 2012b ). It also eases creating the virtual world and people with an editor based on Java3D ( Campuzano et al., 2011 ). This editor allows creating virtual worlds by simply dragging and dropping objects from a palette. Moreover, this editor reads the ontology model within the knowledge base and includes all the relevant concepts in the editor palette. Within the same editor, the developer can assign a 3D model to each one of these objects and introduce them in the simulation scenario. In other words, the ontology created in step 4b can be instantiated in this step using an ontology reader plugin and the UbikSim editor. The ontology reader parses the OWL fi le which describes the ontology and loads all the entities of the ontology on the editor palette (i.e. target subjects, objects and spaces).

The instantiation of these entities is performed by the developer, who is in charge of creating the instances needed for the simulation by adding the entities of the palette to the simulation scenario and giving them appropriated values. For example, following the example of previous sections about the worker Bob, the developer may instantiate and add to the 3D environment an instance of the entity TS 1 whose name value is Bob and its role value is evacuation team member. Moreover, a set of instances of TS 2mustbecreatedto represent the rest of the workers. The rest of the entities of the ontology (i.e. fi re alarm, room and stairs) must be instantiated too, paying special attention to attributes and relations, e.g. the property location of the fi re alarm must be a reference to the room number 23 where Bob works. Taking into account that the timeline was used in step 5b to implement the automaton that manages the behaviour of the instances of TS1 and TS2, now all the knowledge previously acquired and modelled has been successfully employed for creating the simulated environment. This a pproach provides the cooperation between simulated persons and their simulated environment (e.g. objects or devices) using the knowledge models of CHROMUBE step 4b, the ontology and the timeline.

Then, once the simulation scenario and the arti fi cial behaviours are completely created, the simulation in UbikSim is immediate ( Serrano and Bot X a, 2013 ). The results of these simulations can be used to validate the CMHBs in step 7 of CHROMUBE. 4. Step 7: Validation
Step 7 of the methodology deserves its own section. Probably it is the most challenging phase of the methodology as it is not easy to validate simulation models of human behaviour. Validation is the process of evaluating software during or at the end of the development process to determine whether it satis fi es speci requirements ( IEEE, 1990 ). Within the modelling and simulation community, the de fi nition of validation is the process of determin-ing to what extent a computerized model or simulation and their associated data are accurate representations of the real world from the perspective of the intended use ( Schlesinger et al., 1979 ). 4.1. Validating CMHBs
CMHBs are used for testing AmI services and applications (e.g. an indoor location service, an in-home monitoring service for elders, motion detection services, Huang and Cheng, 2012 , energy ef fi ciency measures, Silva et al., 2012 , and etcetera) before their real deployment. CMHBs represent users of the service or applica-tion. Each simulation run represents a software test. Thus, the key is to de fi ne good software tests (i.e. good simulations in this case).
It is important to know, at this point, the service's expected functionality. This functionality is required to test the service by simulations because it allows us to check if the CMHB behaves as expected. For further detail of the process proposed by CHRO-
MUBE for validating CMHBs created from sensor data, see the previous work ( Campuzano et al., 2012a ).

CHROMUBE relies on the knowledge base for comparing it with the behaviour generated by the CMHBs. Note that, at this point of the CHROMUBE application, this knowledge base is already vali-dated by experts. Thus, the only source of errors to be considered is the CMHB created from the knowledge base. Anomalies or misunderstandings of the knowledge interpretation during the
CMHB creation process can lead to faulty behaviour at run-time (i.e. the CMHB does not behave as the expert said).
 is advisable. Ideally, the same e xpert used in the generation of the knowledge base is provided with an animated simulation by using the 3D viewer of UbikSim ( Garcia-Valverde et al., 2012b ). The expert reviews the simulation looking for inexact physical elements, objects or behaviours. However, visual inspections are usually not enough to validate the model when either the virtual world is large or the simulation takes too much time. An a utomated validation process is necessary at a second stage. 4.2. Towards an automatic validation
CHROMUBE focuses on how to create CMHBs whose routines are performed, during work or leisure time for example, in a timely and realistic manner. Thus, the methodology includes means to validate the following issues with respect to CMHBs for each behaviour: (1) where the CMHB is when manifesting a given behaviour?; (2) what changes are produced in the environ-ment by the behaviour?; (3) who is manifesting a given beha-viour?; and (4) is it valid the order in which the behaviours from all the CMHBs were executed?
Note that all these questions may be answered by using the knowledge base (at least to some extent). CMHB uses all the possible answers as the source information for validation. CHRO-
MUBE proposes validating answers for questions (1)  X  (3) with production rules and answers for question (4) by de fi ning a behaviour work fl ow.

Production rules consist of conditional statement and express relationships between parameters and variables. The rule premise and consequent are series of clauses that can be used to describe the state of characters in the simulation, objects, time, location, etc. Production rules are a very comprehensible form of knowl-edge representation. De fi ning the answer to questions (1) the form of production rules delivers a natural way of checking if the simulation was incorrect: if a rule did not fi re during the whole simulation, a fault is detected.
 To automate the creation process of production rules, CHRO-
MUBE delivers generic templates for the behaviours involved in the simulation. These templates are composed of a set of blank sections concerning about the situation before and after the execution of a concrete behaviour. Thanks to these templates, the production rules can be generated automatically.

A generic behaviour template is given below containing the most important attributes a CMHB usually includes. Developers are free to add any attribute of their interest: Behaviour name.
 CMHB who manifests the behaviour.

Antecedents:  X  Interval time or concrete time of beginning.  X  Physical zone/s where the behaviour begins.  X  Previous status of all the resources which the behaviour is
Consequent:  X  Interval time or concrete time of ending.  X  Physical zone/s where the behaviour ends.  X  Status of all the resources which the behaviour alters,
After ful fi lling the general template with antecedents and consequents, its implementation in an inference-based rules engine, such as http://www.jboss.org/drools which is employed in the case study of Section 5 , is straightforward. Following the example introduced in previous sections and whose knowledge base is shown in Fig. 2 , the ful fi lled template associated with the behaviour Activating alarm could be de fi ned as follows: Behaviour name: Activating alarm.
 CMHB who manifests the behaviour: TS 1.

Antecedents:  X  Interval time or concrete time of beginning: Indifferent (it is
Consequent:
The production rule associated with this example is the following: behaviour  X  TS 1 ; InitActivatingAlarm  X  4 location  X  TS 1 state  X  alarm ; inactive  X  -behaviour  X  TS 1 ; EndActivatingAlarm  X  location  X  TS 1 ; 23  X  4 state  X  alarm ; active  X  .

This rule can detect automatically possible fl aws in the simu-lated model such as an alarm which remains inactive after the execution of the behaviour Activating alarm or the execution of this behaviour when the TS is not located at the appropriate room. Moreover, if one or several of the antecedents are not satis when the behaviour begins, it could be an indicator of an incorrect implementation of the previous behaviour as discussed below.
In order to check type of question (4), it could be possible to use temporal reasoning ( Allen, 1983 )soastokeepusingtheproduction rules formalism. Nevertheless, this approach makes hard to manage a high number of rules. The alternative proposal of CHROMUBE is using a work fl ow structure oriented to validate temporal restrictions between behaviours. De fi ning a work fl ow allows the developer to describe the order in which a seri es of steps must occur. This eases the description of complex compositions of behaviours.
BPMN 2.0 ( Business Process Modelling Notation ) is a popular work fl ow notation language used for modelling business pro-cesses, and it provides the necessary node types for representing a behaviour work fl ow such as start/end nodes, split/join nodes, wait states, timers, events, and composite nodes. Coupling the work fl ow with the production rules engine improves the valida-tion process making easy to detect behaviours executed in an altered order. Note that behaviours are represented in the knowl-edge base with a timeline. To encode the timeline as a BPMN work fl ow we rely on the proposal of Flores and Sep X lveda (2011) . This proposal describes the equivalence between a BPMN diagram and timelines, allowing the automation of the conversion process. Fig. 5 shows a diagram depicting the validation process of CMHB simulations using a production rule base and a BPMN work fl ow. One rule must be created for every behaviour concept contained in the knowledge base. The BPMN work fl ow is created by mapping the behaviour concepts and their relations from the timeline. Every node of the work fl ow represents either a single behaviour or a group of behaviours. While the simulation is running, the CMHBs produce events that represent the behaviour they manifest. The rule engine and the work fl ow check that all conditions of the behaviours are being satis fi ed on real time.
Two kinds of events can be received from the simulation as seen in Fig. 5 : behaviour initiation and behaviour end. When a beginning event arrives, the work fl ow must be checked in order to assure that the fl ow is not altered. Then, the next step is to check the antecedents of the production rule associated with the behaviour. If the antecedents are not satis fi ed, the rule will not be launched. This could be an indicator of an incorrect implemen-tation of the previous behaviour. Note that the sequence, order and inference of the production rules for the speci fi c behaviour are internally managed by the inference-based rules engine. This is one of the cornerstones of the declarative programming: the developer speci fi es  X  what to do  X  but not  X  how to do it in the approach presented there is just one rule for each behaviour.
The second kind of event indicates that a behaviour ends. In this case, the work fl ow is updated advancing one node in the
Then the consequent of the production rule associated with the behaviour has to be checked to ensure that the behaviour is correctly implemented.

Therefore, as explained at the beginning of this section, both the production rules and the work fl ows automatically validate if there are requirement violations in the CMHBs simulated. The difference is that production rules address aspects of individual behaviours which can be extracted from the ontologies built based on experts knowledge, while work fl ows ensure that the sequence of behaviours is correct according to the experts speci fi gathered in timelines.

An illustrative example of the process followed to validate behaviours is detailed in Section 5.6 , including a ful fi of production rules ( Table 3 ) and a BPMN work fl owofthecasestudy.
Both tools are employed to detect a number of fl aws in the CMHBs simulatedinanautomaticmanner. 5. Case study CHROMUBE is used for the generation and the validation of CMHBs using the knowledge obtained from domain experts.
Depending on the TS to be modelled, different experts could be consulted. This section presents a case study concerned with generating CMHBs that represent the working routine of hospital workers. This case study was developed in the scope of the project
CADUCEO. 1 CADUCEO is concerned with the introduction of new indoor location technologies in the Hospital of Terrassa (Spain).
These location technologies (i.e. Zigbee and RFID) improve the resources control and management of the hospital by using location information of their personnel and surgical equipment.
Before the implantation of the pilot experience, the hospital is interested in the simulation of these location technologies in a simulated environment. CMHBs produced by applying CHROMUBE are used for testing the functionality of the system avoiding premature physical deployments in the hospital. Realistic human models of the hospital staff should be created for an effective validation of the system. CHROMUBE uses knowledge from the staff members considered as experts (i.e. the management team of the hospital). For this purpose, the knowledge referred to time-tables, routines, interactions, work teams, etcetera is essential. The following subsections illustrate the application of the methodol-ogy to the modelling of a complete morning in the operating theatre within CADUCEO. The interest lies in the following issues:
The equipment is very costly and its use must be optimized when shared across operating theatres. The material used must be available before the different surgeries scheduled start thus the assistant personnel can transport it from the storage rooms to the operating theatres. Both the equipment and the material are transported with trolleys. Trolleys and the human staff carry a badge used by the ZigBee location system to locate them in real time. 5.1. Step 2b: knowledge capture after a semi-structured interview maintained with a member of the hospital management team. To model the CMHBs, the follow-ing information is taken into account: their location (i.e. the room where the TS is at every moment), the hour the behaviours manifest and what surgical equipment they use. Given that this case focuses on representing how the staff and equipment move, the question set did not go further than looking for those details. For instance, an extract of the question set is described as follows:
Could you enumerate the rooms where the workers spend the workday?
Which equipment is required during an intervention? Where is it stored?
Who is in charge of collecting the medical equipment before the intervention?
In addition to the initial interview, an alternative domain expert of the management team checked our knowledge models and validated them. During this cross-validation stage, the alter-native expert con fi rmed that the models were correct and also added some more knowledge about abnormal situations which can occur during a workday, e.g. a lack of material occurs during a surgery, the nurse goes from the operating theatre to the storage room number 12 and returns to the operating theatre again.
Table 1 presents a summary of the most important concepts related to the TSs which were obtained after knowledge analysis. 5.2. Step 3b: knowledge analysis
Knowledge analysis generated relevant concepts for the following: the roles which every worker must assume during an workday, the working methods and timetables assigned for each one of these roles and the routes they follow when performing their tasks.
 Moreover, knowledge about abnormal situations was also gener-ated, e.g.  X  if a lack of material occurs during a surgery, the nurse goes from the operating theatre to the storage room number 12 and returns to the operating theatre again  X  . Table 1 presents a summary of the most important concepts related to the TSs which were obtained after knowledge analysis.

All the CMHBs created must have a role. Depending on this role, the CMHB can manifest a speci fi cbehaviour. Table 2 , explained in this section, de fi nes which behaviours correspond to every role. Besides, the rooms and the objects of the table are physical elements that must be created in the social simulator environment. They are required because the CMHBs will interact with them during the simulations.
The knowledge capture, analysis and modelling tasks per-formed in this work took about six man-days (including the ontology and timeline de fi nitions which required just two man-days). Although the modelling stage could be much more time-consuming and challenging, the domain experts of the presented case study had very clear ideas about the expected human models and were able to provide the knowledge base in a very complete (although informal) manner. Based on this description, identifying the most important concepts, attributes, values and relations for de fi ning the ontology and the timeline was straightforward. 5.3. Step 4b: knowledge modelling
An ontology was created using the previous concepts and some others. The full ontology schema of the hospital including con-cepts, relations and attributes is available online ( http://www.ants. inf.um.es/staff/emilioserra/ubiksim/EAAI ). This schema is not included in the paper due to size reasons. Additionally, the time-line of Fig. 6 represents a fragment of the typical working day. This fi gure shows a structured knowledge of which behaviour concepts and relations among them were extracted from the interview. It represents the following course of actions: it starts with the nurse going to the storage room number 14, the nurse collects the material from a cabinet and puts it in a trolley ( B 1 in the timeline). Then, the nurse goes again to the operating theatre and puts the material on the table ( B 2). Once everything is ready, the surgery begins ( B 3). Surgery is performed by various TSs at the same time: the nurse, a surgeon, an anesthesiologist and an assistant. The nurse may go again to the storage room to collect more material during the intervention ( B 4 and B 5). When the surgery fi he/she carries the consumed material to the sterilization zone ( B 6) while the cleaner comes to the operating theatre and tidies up ( B 7). These last two behaviours occur simultaneously.
The ontology and the timeline knowledge models complement each other. The ontology contains all the TS concepts and their relations with the physical environment (rooms and objects they use) while the timeline contains all the timing information related to their behaviours. Note that the ontology and the timeline presented contain CMHB  X  CMHB interactions (e.g. the surgeon starts the surgery once the nurse has brought him/her the required equipment).
Therefore, the case study presented in this paper only deals with interactions between CMHBs  X  CMHBs (between computational models of human behaviours), and CMHBs  X  environment (interactions between CMHBs and general spaces or objects which are not necessarily computational devices). These interactions are one of the main concerns of the subsequent steps of the methodology: modelling them with the HAB, implementing the model in UbikSim, and validating these interactions t hrough production rules and time reasoning. On the other hand, interactions among people, services and devices are ultimately necessary to assist AmI systems' development by social simulation. One of our ongoing works is the combination of the HAB with a hierarchical automaton of interactions (HAI) to simplify the modelling and implementation of these complex interactions ( Campuzano et al., 2012b ). However, for the sake of simplicity, these preliminary results are not discussed in the contribu-tion presented. 5.4. Step 5: creation of CMHBs
To generate the CMHBs, all behaviour of the timeline must be represented in the hierarchical automata. Due to the use of UbikSim ( https://github.com/emilioserra/UbikSim/wiki ) as social simulator in the next step, the HAB architecture is considered. A CMHB for every
TS has to be created. In this case study, there are fi ve TSs: nurse, surgeon, anesthesiologi st, assistant and cleaner. Table 2 indicates the set of behaviours of the timeline that must be implemented for every CMHB. Note that the HAB is an architecture which fosters code reuse.
Hence, as some TSs share behaviours, those behaviours must be implemented only once and be reused in each TS using it. At this point, the required behaviours are created. Remind from
Section 3.4.1 that a behaviour within the HAB architecture needs the following parameters: time duration, daytime intervals and a probability distribution function. Regarding the pdf, the hospital was interested in simulating common delays when the behaviour occurs. According to the management team, delays usually are within a range of 0  X  5 min, but never higher than 10 min. A gamma distribution following this speci fi cation was chosen because it can model waiting times ( Garcia-Valverde et al., 2012a ). The complete list of behaviours used in the simulation follows: q 1  X  X   X  CollectEquipmentFromStorage  X  ; 15 ; 1 ; I q 1  X  ,
I q 1  X f X  08 : 00 ; 08 : 10 ; gamma  X  shape  X  5 ; scale  X  1 q 2  X  X   X  GetEquipmentFromStorage  X  ; 15 ; 1 ; I q 2  X  ,
I q 2  X f X  08 : 15 ; 08 : 25 ; gamma  X  shape  X  5 ; scale  X  1 q 3  X  X   X  Surgery  X  ; 10800 ; 1 ; I q 3  X  ,
I q 3  X f X  08 : 30 ; 08 : 40 ; gamma  X  shape  X  5 ; scale  X  1 q 4  X  X   X  CollectEquipmentDuringSurgery  X  ; 15 ; 1 ; I q 3
I q 3  X f X  10 : 00 ; 10 : 10 ; gamma  X  shape  X  5 ; scale  X  1 q 5  X  X   X  GetEquipmentDuringSurgery  X  ; 15 ; 1 ; I q 4  X  ,
I q 4  X f X  10 : 15 ; 10 : 25 ; gamma  X  shape  X  5 ; scale  X  1 q 6  X  X   X  CarryEquipmentToSterilizationRoom  X  ; 15 ; 1 ; I
I q 5  X f X  11 : 30 ; 11 : 40 ; gamma  X  shape  X  5 ; scale  X  1 ment from a cabinet at the storage room (room 14) and putting it on a trolley (i.e. q 1 ). The nurse goes with the trolley to the operating theatre (room 17) and puts the equipment on a table (i.e. q 2 ). Then, the surgery begins (i.e. q 3 ). This behaviour is performed simultaneously by the nurse, the surgeon, the anesthe-siologist and the assistant. Behaviours q 4 and q 5 model the nurse going to another storage room (room 12) to collect new equipment and bring it to the operating theatre table, respectively. Now, q represents the nurse carrying unused equipment to the steriliza-tion room (room 21). Meanwhile, the cleaner enters the operating theatre and removes all the single use equipment (i.e. disposables) from the table (i.e. q 7 ). A priority value of 1 was assigned to all the q i ; 0 r i r 6. The resulting set of automata for the timeline of Fig. 6 appears in Fig. 7 . These automata correspond to a concrete CMHB for the nurse, which is one of the most interesting CMHBs due to its number of behaviours. The main automaton corresponds to level 0, the highest on the hierarchy. The developer has to consider whether to add new levels to the main automaton depending on the simplicity of every state. If a state is simple enough, then it is not necessary to discompose it in a new automaton. In this case, three levels of hierarchical automata have been de fi ned for behaviour B2. The rest of the behaviours are not shown for the sake of brevity. 5.5. Step 6: simulation the entities of the ontology are i nstantiated and imported to the social simulator ( https://github.com/emil ioserra/UbikSim/wiki )to simulate them (step 6 of CHROMUBE). On the one hand, one instance for every kind of CMHB is required (a nurse, a surgeon, an assistant, an anesthesiologist and a cleaner). On the other hand, instances for every one of the objects and rooms are needed for simulating the environment (a trolley, an operating theatre, etc.). The simulation of the CMHBs must be understood as test of the simulation model, and used as an input to Step 7 (see next subsection).
 depends of the complexity of the model and the stringency level required for the model. All behaviours have to be tested exhaustively in order to detect possible con fi guration or implementation errors.
The developer must take into account that some con fi guration parameters of a behaviour are static, i.e. the priority, the time duration and the intervals of a behaviour will not change during the simulation. However, the pdf parameter is a random process that generates different values along the simulation and also different values for every simulation. For that reason, a large number of simulations are necessary to va lidate the model. Note that an improper pdf may induce a behaviour to be launched after or before than that expected causing abn ormal results in the model. all behaviours have been tested at least  X  times, where  X  goodness parameter de fi ned by the developer. This parameter can be de fi ned depending on the stringency level required by the experts. Note that the more the behaviours and alternative there are, the more the simulations are required. Fig. 8 shows a snapshot of the plug-in developed for UbikSim which reads an ontology and allows the developer to instantiate subjects and physical objects to the scenario. This snapshot shows the worker roles which were parsed from the ontology.
 of UbikSim. The medical staff is shown (nurse, surgeon, anesthe-siologist and assistant). At the right of the fi gure, some relevant physical concepts of the case study as the table and the trolley are displayed. Additional contents including a video and a detailed explanation of the simulation are available online ( http://www. ants.inf.um.es/staff/emilioserra/ubiksim/EAAI ). 5.6. Step 7: validation
The methodology CHROMUBE proposes using two different tools to validate simulation models created with the presented extension. On the one hand, production rules are employed for automatically checking that (1) all CMHBs are executed at the right physical place; (2) the effects of these are the speci fi the CMHBs are executed by the right simulation objects. On the other hand, work fl ows are needed to validate that CMHBs satisfy the precedence order required. Drools ( http://www.jboss.org/ drools ) is used for production rules and Eclipse BPMN2 Modeler ( http://eclipse.org/bpmn2-modeler ) for BPMN work fl ows.
Using the template described in Section 4.2 , the resulting produc-tion rules required for each behaviour are shown in Table 3 .Notethat the most important attributes are the same which were previously de fi ned in Section 4.2 : hour , physical zone (with a granularity of room locations), modi fi ed resources and the CMHBs who manifest the behaviour . Note also that not all the entries contain all the attributes, e.g. B 1 behaviour has the hour attribute in the antecedent but not in the consequent. The reason is that the behaviour must begin approxi-mately at 8:00 but its end time is not relevant. It is worth noting that concrete timestamps are random by nature, i.e. they are generated by a pdf. In line with this, the validation process must check only if they do not differ in more than 10 min of the time speci fi ed at the template. These 10 min of difference was obtained from the experts. A similar example is that of B 7. In this behaviour, the resource Table only appears in the consequent. This means that the validation process only needs to check if the behaviour updated the table's state as empty, regardless of its previous state. The production rules resulting from these templates were Drools rules, and automatically generated from the templates. This process exceeds this paper scope.

The BPMN work fl ow that corresponds to the timeline of Fig. 6 is shown in Fig. 10 , remind that it has been created following the approach presented in Flores and Sep X lveda (2011) . A detailed explanation of the creation process follows. The temporal relation-ship between B 1 and B 2isa Finish to Start (FS) relationship. This relationship implies that B 2 cannot begin before B 1 ends. In other words, the nurse cannot go to the surgery if he/she has not gone previously to the storage room. When B 2 ends, a parallel gateway (i.e. the diamond with a cross inside) with three outputs is considered. When a parallel gateway has one incoming sequence fl ow and more than one outgoing sequence fl ow, all outgoing sequence fl ows are produced in parallel.

This parallel gateway has three fl ow sequences. The upper includes the task B 3. When this behaviour fi nishes, the halted in a catch signal event ( S 2). Signals are used for sending or receiving general communication messages within and across BPMN processes (i.e. behaviours in this case). Thus, the behaviour should wait for an event arrival in order to fi nish. The main purpose of this signal is to control that B 3 does not end before B 4 and B 5 execution. In other words, the nurse must collect equipment from the storage room before the surgery ends.
An important detail is that a timer event is collocated before B 4. It is used to represent a necessary delay in launching the behaviour. In this case, it assures that B 4 starts after B 3. The timer value might be synchronized with the behaviour times, e.g. if B 4 must begin 1 h after the beginning of B 3, the timer value should be 1 h. In this case, B 4 begins approximately 90 min after the beginning of B 3. B 4 and B 5 have the same FS relationship as B 1 and B 2. Once B 5 ends, a throw signal event labelled with S 1is generated. That kind of throw signal events generates a signal sent to the corresponding catch signal events that react on arrival. Note that the same happens with S 2.

Then, the catch signal event labelled with S 1 of the fl ow situated in the middle of the work fl ow will receive this event. The timer event between S 1 catch signal event and S 2 throw signal event assures that B 5 fi nishes before B 3 fi nishes. 60 min after the end of B 5, B 3 is ready to be fi nished so the signal S 2 is thrown and the upper fl ow ends. The three parallel fl ows are incoming sequence fl ows of the following parallel gateway. Thus, unless all of them have fi nished, the fl ow cannot continue through the gateway.

When the surgery ends, it is time to carry equipment to the sterilization room ( B 6) and clean the operating theatre ( B 7). Both behaviours must be executed at the same time. The gateways after and before B 6 and B 7 are parallel gateways.
These gateways assure that both behaviours can be executed at the same time.
 work fl ow of Fig. 10 is modelled with the Eclipse BPMN Modeller, a batch of simulation runs can be launched and monitored. The application of the CHROMUBE methodology was found to be very useful for this particular case and three kinds of errors were detected: incorrect duration of behaviours : behaviours duration is checked in the validation process. Whether a behaviour did not take as long as expected, this fault was be detected.

Instances of these three kinds of errors for the presented case study are presented:
The states Surgery , CollectEquipmentDuringSurgery and GetE-quipmentDuringSurgery were all implemented with the same priority. That was an error since CollectEquipmentDuringSurgery and GetEquipmentDuringSurgery must have a greater priority than Surgery . The main reason is that Surgery must be inter-rupted by them. This error was detected because CollectEquip-mentDuringSurgery was launched after the end of Surgery . There was an error in the behaviour GetEquipmentFromStorage .
The consequent trolley  X  { empty } was not satis fi ed because the behaviour implementation was incorrect.

The duration of Surgery was incorrectly set to zero and the state had fi nished before the CollectEquipmentDuringSurgery state began.

These errors which were detected in the validation step helped to improve the CMHBs simulated according to the experts' needs and knowledge. However, no fl aw was found with respect to the knowledge modelling (step 4b). Consequently, the iterative pro-cess was re-executed from step 7 to step 5 three times (once for each error detected). The iterations allowed modifying the CMHB con fi guration by fi xing the correct parameters. Therefore the validation process was worthy and useful to obtain more accurate computational models.

In this step, a visual validation was also performed by a group of over 10 domain experts (i.e. the full management team includ-ing the two experts consulted in step 2b). This validation allowed deciding if a new iteration was needed after checking that the physical elements, objects and behaviours involved in the simula-tion were correctly simulated. 6. Conclusion and future works
This paper has proposed an extension of the CHROMUBE (CHROnobiology for Modelling hUman BEhaviour) methodology which focuses on the use of domain experts' knowledge. This methodology aims at creating CMHBs (Computational Models of Human Behaviour) for assisting in several phases of the Ambient
Intelligence (AmI) development process: requirements speci testing, and validation. The employment of experts' knowledge, combined with data from sensors or in an isolated manner, has been extensively justi fi ed by the inherent limitations in the use of sensors technologies.

Regarding the knowledge capture , the semi-structured inter-views have been recommended due to their fl exibility. At this stage of the methodology, the conclusion is that the main information required from these interviews is the target subjects; their behaviours; and their interactions with the environment or other subjects. Concerning the knowledge analysis , the methodol-ogy concludes that four main elements have to be found and categorized in the knowledge previously gathered: concepts, attributes, values for the attributes, and relations.

These elements are typically found in the semantic web specialized literature and, therefore, the modelling step of CHRO-MUBE proposes de fi ning ontologies as primary knowledge model. Moreover, due to the ontologies expressiveness limitations, the ontology model is combined with timelines , which have been extensively used for representing the order of the events, tasks and human behaviours.
 With regard to the CMHBs generation , a formal model called Hierarchical Automaton of Behaviours (HAB) has been detailed and implemented in the open and free simulator UbikSim ( https:// github.com/emilioserra/UbikSim/wiki ). The HAB provides devel-opers with a natural transition from the models of the previous step to the simulation implementation and execution. The inter-ested reader may download UbikSim ( https://github.com/ emilioserra/UbikSim/wiki ), creating environments models using a drag and drop editor, and simulate the CMHBs implemented in the context of these environments.

Finally, the most challenging task identi fi ed is the validation of the CMHBs. For this purpose, CHROMUBE has proposed the use of production rules implemented in Drools and automatically gener-ated from templates. These rules are able to detect automatically faults regarding users' locations, changes produced in the envir-onment, and behaviours assigned. This mechanism is combined with temporal reasoning implemented in BPMN 2.0 (Business Process Modelling Notation) to validate the correct time order and coordination among the simulated events.

A full case study where the CHROMUBE methodology has been instantiated and detailed. In the scope of the CADUCEO project, where indoor location based technologies have to be studied, this case study hints at the potential of CHROMUBE to model realistic human models from domain experts' knowledge. Furthermore, the number of recommendations and techniques proposed has proved to be effective to detect faults in the human modelling process.
These faults have been classi fi ed in three main categories: priority errors, incorrectly programmed behaviours, and incorrect duration of behaviours.

In spite of the advantages presented in these conclusions, the work still presents some shortcomings which must be addressed on future works.

Firstly, in order to get realistic human behaviours and due to the dif fi culty of this task, this work is focused only on the modelling of such behaviours. However, the interactions among humans, ubiquitous services and devices are still needed to get a whole AmI system simulation. This fact affects mainly the ontol-ogy which should be completed with more concepts and relations from the ubiquitous domain.

Secondly, regarding the de fi nition of the ontology, more changes are still necessary. On the one hand, as described above, it should be extended with new concepts. On the other hand, the existing vocabulary de fi ned is not able to take advantage of all the bene fi ts that the semantic web technologies can offer. The inclu-sion of more relations, restrictions and rules should be set according to the domain to allow detecting inconsistencies and reasoning for discovering facts that have not been explicitly de fi ned in the knowledge base. In that sense, some of the technologies proposed in this paper could be replaced for the ontology and semantic web tools, like the inference based on
Drools. However, at this moment, the complexity of the presented ontology is limited and the use other formalisms such as timelines is necessary. Thirdly, one of the main dif fi culties in following the presented methodology is the large quantity of technologies and tools involved. Therefore, one of our main research lines involves simplifying the presented approach to enhance its usability.
Finally, we also aim to maximize the diffusion of these research results by their inclusion in the open and free simulator used in this paper to support CHROMUBE, the UbikSim simulator ( https:// github.com/emilioserra/UbikSim/wiki ).
 Acknowledgements This research work is supported by the Spanish Ministry of Economy and Competitiveness under the R&amp;D projects Social Ambient Assisting Living -Methods (SociAAL) (TIN2011-28335-C02-02) and CALISTA (TEC2012-32457).
 References
