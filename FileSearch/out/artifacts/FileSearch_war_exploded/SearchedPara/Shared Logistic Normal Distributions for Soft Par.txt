 Probabilistic grammars have become an important tool in natural language processing. They are most commonly used for parsing and linguistic analy-sis (Charniak and Johnson, 2005; Collins, 2003), but are now commonly seen in applications like ma-chine translation (Wu, 1997) and question answer-ing (Wang et al., 2007). An attractive property of probabilistic grammars is that they permit the use of well-understood parameter estimation methods for learning  X  X oth from labeled and unlabeled data. Here we tackle the unsupervised grammar learning problem, specifically for unlexicalized context-free dependency grammars, using an empirical Bayesian approach with a novel family of priors.

There has been an increased interest recently in employing Bayesian modeling for probabilistic grammars in different settings, ranging from putting priors over grammar probabilities (Johnson et al., 2007) to putting non-parametric priors over deriva-tions (Johnson et al., 2006) to learning the set of states in a grammar (Finkel et al., 2007; Liang et al., 2007). Bayesian methods offer an elegant frame-work for combining prior knowledge with data. The main challenge in Bayesian grammar learning is efficiently approximating probabilistic inference, which is generally intractable. Most commonly vari-ational (Johnson, 2007; Kurihara and Sato, 2006) or sampling techniques are applied (Johnson et al., 2006).

Because probabilistic grammars are built out of multinomial distributions, the Dirichlet family (or, more precisely, a collection of Dirichlets) is a natural candidate for probabilistic grammars because of its conjugacy to the multinomial family. Conjugacy im-plies a clean form for the posterior distribution over grammar probabilities (given the data and the prior), bestowing computational tractability.

Following work by Blei and Lafferty (2006) for topic models, Cohen et al. (2008) proposed an alter-native to Dirichlet priors for probabilistic grammars, based on the logistic normal (LN) distribution over the probability simplex. Cohen et al. used this prior to softly tie grammar weights through the covariance parameters of the LN. The prior encodes informa-tion about which grammar rules X  weights are likely to covary, a more intuitive and expressive represen-tation of knowledge than offered by Dirichlet distri-butions. 1
The contribution of this paper is two-fold. First, from the modeling perspective, we present a gen-eralization of the LN prior of Cohen et al. (2008), showing how to extend the use of the LN prior to tie between any grammar weights in a probabilistic grammar (instead of only allowing weights within the same multinomial distribution to covary). Sec-ond, from the experimental perspective, we show how such flexibility in parameter tying can help in unsupervised grammar learning in the well-known monolingual setting and in a new bilingual setting where grammars for two languages are learned at once (without parallel corpora).

Our method is based on a distribution which we call the shared logistic normal distribution , which is a distribution over a collection of multinomials from different probability simplexes. We provide a variational EM algorithm for inference.

The rest of this paper is organized as follows. In  X  2, we give a brief explanation of probabilistic gram-mars and introduce some notation for the specific type of dependency grammar used in this paper, due to Klein and Manning (2004). In  X  3, we present our model and a variational inference algorithm for it. In  X  4, we report on experiments for both monolingual settings and a bilingual setting and discuss them. We discuss future work (  X  5) and conclude in  X  6. A probabilistic grammar defines a probability dis-tribution over grammatical derivations generated through a step-by-step process. HMMs, for exam-ple, can be understood as a random walk through a probabilistic finite-state network, with an output symbol sampled at each state. Each  X  X tep X  of the walk and each symbol emission corresponds to one derivation step. PCFGs generate phrase-structure trees by recursively rewriting nonterminal symbols as sequences of  X  X hild X  symbols (each itself either a nonterminal symbol or a terminal symbol analo-gous to the emissions of an HMM). Each step or emission of an HMM and each rewriting operation of a PCFG is conditionally independent of the other rewriting operations given a single structural ele-ment (one HMM or PCFG state); this Markov prop-erty permits efficient inference for the probability distribution defined by the probabilistic grammar.
In general, a probabilistic grammar defines the joint probability of a string x and a grammatical derivation y : p ( x , y |  X  ) = where f k,i is a function that  X  X ounts X  the number of times the k th distribution X  X  i th event occurs in the derivation. The  X  are a collection of K multi-nomials  X   X  1 ,...,  X  K  X  , the k th of which includes N k events. Note that there may be many derivations y for a given string x  X  X erhaps even infinitely many in some kinds of grammars. 2.1 Dependency Model with Valence HMMs and PCFGs are the best-known probabilis-tic grammars, but there are many others. In this paper, we use the  X  X ependency model with va-lence X  (DMV), due to Klein and Manning (2004). DMV defines a probabilistic grammar for unla-beled, projective dependency structures. Klein and Manning (2004) achieved their best results with a combination of DMV with a model known as the  X  X onstituent-context model X  (CCM). We do not ex-periment with CCM in this paper, because it does not fit directly in a Bayesian setting (it is highly defi-cient) and because state-of-the-art unsupervised de-pendency parsing results have been achieved with DMV alone (Smith, 2006).

Using the notation above, DMV defines x =  X  x 1 ,x 2 ,...,x n  X  to be a sentence. x 0 is a special  X  X all X  symbol, $, on the left of every sentence. A tree y is defined by a pair of functions y left and y each word to its sets of left and right dependents, respectively. Here, the graph is constrained to be a projective tree rooted at x 0 = $ : each word except $ has a single parent, and there are no cycles or cross-ing dependencies. y left (0) is taken to be empty, and y probability P ( y ( i ) | x i ,  X  ) of generating this sub-tree, given its head word x i , is defined recursively, as described in Fig. 1 (Eq. 2).

The probability of the entire tree is given by p ( x , y |  X  ) = P ( y (0) | $ ,  X  ) . The  X  are the multi-,
D , [ y ,
D , first follow the general setting of Eq. 1, we index these distributions as  X  1 ,...,  X  K .

Headden et al. (2009) extended DMV so that the distributions  X  c condition on the valence as well, with smoothing, and showed significant improve-ments for short sentences. Our experiments found that these improvements do not hold on longer sen-tences. Here we experiment only with DMV, but note that our techniques are also applicable to richer probabilistic grammars like that of Headden et al. 2.2 Learning DMV Klein and Manning (2004) learned the DMV prob-abilities  X  from a corpus of part-of-speech-tagged sentences using the EM algorithm. EM manipulates  X  to locally optimize the likelihood of the observed portion of the data (here, x ), marginalizing out the hidden portions (here, y ). The likelihood surface is not globally concave, so EM only locally opti-mizes the surface. Klein and Manning X  X  initializa-tion, though reasonable and language-independent, was an important factor in performance.
 Various alternatives to EM were explored by Smith (2006), achieving substantially more accu-rate parsing models by altering the objective func-tion. Smith X  X  methods did require substantial hyper-parameter tuning, and the best results were obtained using small annotated development sets to choose hyperparameters. In this paper, we consider only fully unsupervised methods, though we the Bayesian ideas explored here might be merged with the bias-ing approaches of Smith (2006) for further benefit. As stated above,  X  comprises a collection of multi-nomials that weights the grammar. Taking the Bayesian approach, we wish to place a prior on those multinomials, and the Dirichlet family is a natural candidate for such a prior because of its conjugacy, which makes inference algorithms easier to derive. For example, if we make a  X  X ean-field assumption, X  with respect to hidden structure and weights, the variational algorithm for approximately inferring the distribution over  X  and trees y resembles the tradi-tional EM algorithm very closely (Johnson, 2007). In fact, variational inference in this case takes an ac-tion similar to smoothing the counts using the exp- X  function during the E-step. Variational inference can be embedded in an empirical Bayes setting, in which we optimize the variational bound with respect to the hyperparameters as well, repeating the process until convergence. 3.1 Logistic Normal Distributions While Dirichlet priors over grammar probabilities make learning algorithms easy, they are limiting. In particular, as noted by Blei and Lafferty (2006), there is no explicit flexible way for the Dirichlet X  X  parameters to encode beliefs about covariance be-tween the probabilities of two events. To illustrate this point, we describe how a multinomial  X  of di-mension d is generated from a Dirichlet distribution with parameters  X  =  X   X  1 ,..., X  d  X  : 1. Generate  X  j  X   X (  X  j , 1) independently for j  X  { 1 ,...,d } . 2.  X  j  X   X  j / where  X (  X , 1) is a Gamma distribution with shape  X  and scale 1.

Correlation among  X  i and  X  j , i 6 = j , cannot be modeled directly, only through the normalization in step 2. In contrast, LN distributions (Aitchison, 1986) provide a natural way to model such correla-tion. The LN draws a multinomial  X  as follows: 1. Generate  X   X  Normal(  X  ,  X  ) . 2.  X  j  X  exp(  X  j ) / Blei and Lafferty (2006) defined correlated topic models by replacing the Dirichlet in latent Dirich-let allocation models (Blei et al., 2003) with a LN distribution. Cohen et al. (2008) compared Dirichlet and LN distributions for learning DMV using em-pirical Bayes, finding substantial improvements for English using the latter.

In that work, we obtained improvements even without specifying exactly which grammar proba-bilities covaried. While empirical Bayes learning permits these covariances to be discovered without supervision, we found that by initializing the covari-ance to encode beliefs about which grammar prob-abilities should covary, further improvements were possible. Specifically, we grouped the Penn Tree-bank part-of-speech tags into coarse groups based on the treebank annotation guidelines and biased the initial covariance matrix for each child distri-bution  X  c (  X  |  X  ,  X  ) so that the probabilities of child tags from the same coarse group covaried. For ex-ample, the probability that a past-tense verb (VBD) has a singular noun (NN) as a right child may be correlated with the probability that it has a plu-ral noun (NNS) as a right child. Hence linguistic knowledge X  X pecifically, a coarse grouping of word classes X  X an be encoded in the prior.

A per-distribution LN distribution only permits probabilities within a multinomial to covary. We will generalize the LN to permit covariance among any probabilities in  X  , throughout the model. For example, the probability of a past-tense verb (VBD) having a noun as a right child might correlate with the probability that other kinds of verbs (VBZ, VBN, etc.) have a noun as a right child.

The partitioned logistic normal distribution (PLN) is a generalization of the LN distribution that takes the first step towards our goal (Aitchison, 1986). Generating from PLN involves drawing a random vector from a multivariate normal distribu-tion, but the logistic transformation is applied to dif-ferent parts of the vector, leading to sampled multi-nomial distributions of the required lengths from different probability simplices. This is in principle what is required for arbitrary covariance between grammar probabilities, except that DMV has O ( t 2 ) weights for a part-of-speech vocabulary of size t , re-quiring a very large multivariate normal distribution with O ( t 4 ) covariance parameters. 3.2 Shared Logistic Normal Distributions To solve this problem, we suggest a refinement of the class of PLN distributions. Instead of using a single normal vector for all of the multinomials, we use several normal vectors, partition each one and then recombine parts which correspond to the same multinomial, as a mixture. Next, we apply the lo-gisitic transformation on the mixed vectors (each of which is normally distributed as well). Fig. 2 gives an example of a non-trivial case of using a SLN distribution, where three multinomials are generated from four normal experts.

We now formalize this notion. For a natural num-ber N , we denote by 1: N the set { 1 ,...,N } . For a vector in v  X  R N and a set I  X  1: N , we denote by v I to be the vector created from v by using the coordinates in I . Recall that K is the number of multinomials in the probabilistic grammar, and N k is the number of events in the k th multinomial. Definition 1. We define a shared logistic nor-mal distribution with N  X  X xperts X  over a collec-tion of K multinomial distributions. Let  X  Normal(  X  variables for n  X  1: N , where the length of  X  is denoted ` n . Let I n = { I n,j } L n tion of 1: ` n into L n sets, such that  X  L n 1: for k  X  1: K be a collection of (disjoint) sub-sets of { I n,j | n  X  1: N,j  X  1: ` n , | I n,j | = N k } , such that all sets in J k are of the same size, N k . Let  X   X  k exp(  X   X  according to the shared logistic normal distribution with partition structure S = ( { I n } N and normal experts { (  X   X   X  SLN(  X  ,  X  , S ) .

The partitioned LN distribution in Aitchison (1986) can be formulated as a shared LN distribution where N = 1 . The LN collection used by Cohen et al. (2008) is the special case where N = K , each L
The covariance among arbitrary  X  k,i is not defined directly; it is implied by the definition of the nor-mal experts  X  that a SLN can be represented as a PLN by relying on the distributivity of the covariance operator, and merging all the partition structure into one (perhaps sparse) covariance matrix. However, if we are inter-ested in keeping a factored structure on the covari-ance matrices which generate the grammar weights, we cannot represent every SLN as a PLN.

It is convenient to think of each  X  i,j as a weight associated with a unique event X  X  probability, a cer-tain outcome of a certain multinomial in the prob-abilistic grammar. By letting different  X  i,j covary with each other, we loosen the relationships among  X  k,j and permit the model X  X t least in principle X  to learn patterns from the data. Def. 1 also implies that we multiply several multinomials together in a product-of-experts style (Hinton, 1999), because the exponential of a mixture of normals becomes a prod-uct of (unnormalized) probabilities.

Our extension to the model in Cohen et al. (2008) follows naturally after we have defined the shared LN distribution. The generative story for this model is as follows: 1. Generate  X   X  SLN(  X  ,  X  , S ) , where  X  is a col-2. Generate x and y from p ( x , y |  X  ) (i.e., sample 3.3 Inference In this work, the partition structure S is known , the sentences x are observed , the trees y and the gram-mar weights  X  are hidden , and the parameters of the shared LN distribution  X  and  X  are learned . 2
Our inference algorithm aims to find the poste-rior over the grammar probabilities  X  and the hidden structures (grammar trees y ). To do that, we use variational approximation techniques (Jordan et al., 1999), which treat the problem of finding the pos-terior as an optimization problem aimed to find the best approximation q (  X  , y ) of the posterior p (  X  , y x ,  X  ,  X  , S ) . The posterior q needs to be constrained to be within a family of tractable and manageable distributions, yet rich enough to represent good ap-proximations of the true posterior.  X  X est approx-imation X  is defined as the KL divergence between q (  X  , y ) and p (  X  , y | x ,  X  ,  X  , S ) .

Our variational inference algorithm uses a mean-bution q (  X  ) is assumed to be a LN distribution with |  X  ,  X  k )] + P all off-diagonal covariances fixed at zero (i.e., the variational parameters consist of a single mean  X   X  k,i and a single variance  X   X  2 an additional variational parameter,  X   X  k per multino-mial, which is the result of an additional variational approximation because of the lack of conjugacy of the LN distribution to the multinomial distribution. The distribution q ( y ) is assumed to be defined by a DMV with unnormalized probabilities  X   X  .

Inference optimizes the bound B given in Fig. 3 (Eq. 3) with respect to the variational parameters. Our variational inference algorithm is derived simi-larly to that of Cohen et al. (2008). Because we wish to learn the values of  X  and  X  , we embed variational inference as the E step within a variational EM algo-rithm, shown schematically in Fig. 4. In our exper-iments, we use this variational EM algorithm on a training set, and then use the normal experts X  means to get a point estimate for  X  , the grammar weights. This is called empirical Bayesian estimation . Our approach differs from maximum a posteriori (MAP) estimation, since we re-estimate the parameters of the normal experts. Exact MAP estimation is prob-ably not feasible; a variational algorithm like ours might be applied, though better performance is ex-pected from adjusting the SLN to fit the data. Our experiments involve data from two treebanks: the Wall Street Journal Penn treebank (Marcus et al., 1993) and the Chinese treebank (Xue et al., 2004). In both cases, following standard practice, sentences were stripped of words and punctuation, leaving part-of-speech tags for the unsupervised in-duction of dependency structure. For English, we train on  X  2 X 21, tune on  X  22 (without using annotated data), and report final results on  X  23. For Chinese, we train on  X  1 X 270, use  X  301 X 1151 for development and report testing results on  X  271 X 300. 3
To evaluate performance, we report the fraction of words whose predicted parent matches the gold standard corpus. This performance measure is also known as attachment accuracy. We considered two parsing methods after extracting a point estimate for the grammar: the most probable  X  X iterbi X  parse ( argmax (MBR) parse ( argmin dependency attachment error as the loss function (Goodman, 1996). Performance with MBR parsing is consistently higher than its Viterbi counterpart, so we report only performance with MBR parsing. 4.1 Nouns, Verbs, and Adjectives In this paper, we use a few simple heuristics to de-cide which partition structure S to use. Our heuris-tics rely mainly on the centrality of content words: nouns, verbs, and adjectives. For example, in the En-glish treebank, the most common attachment errors (with the LN prior from Cohen et al., 2008) happen with a noun (25.9%) or a verb (16.9%) parent. In the Chinese treebank, the most common attachment errors happen with noun (36.0%) and verb (21.2%) parents as well. The errors being governed by such attachments are the direct result of nouns and verbs being the most common parents in these data sets.
Following this observation, we compare four dif-ferent settings in our experiments (all SLN settings include one normal expert for each multinomial on its own, equivalent to the regular LN setting from Cohen et al.):  X 
T IE V: We add normal experts that tie all proba-bilities corresponding to a verbal parent ( any par-ent, using the coarse tags of Cohen et al., 2008).
Let V be the set of part-of-speech tags which be-long to the verb category. For each direction D (left or right), the set of multinomials of the form  X  c (  X | v, D ) , for v  X  V , all share a normal expert.
For each direction D and each boolean value B of the predicate first y (  X  ) , the set of multinomials  X  s (  X | x, D ,v ) , for v  X  V share a normal expert.  X 
T IE N: This is the same as T IE V, only for nominal parents.  X 
T IE V&amp;N: Tie both verbs and nouns (in separate partitions). This is equivalent to taking the union of the partition structures of the above two set-tings.  X 
T IE A: This is the same as T IE V, only for adjecti-val parents.

Since inference for a model with parameter tying can be computationally intensive, we first run the in-ference algorithm without parameter tying, and then add parameter tying to the rest of the inference algo-rithm X  X  execution until convergence.

Initialization is important for the inference al-gorithm, because the variational bound is a non-concave function. For the expected values of the normal experts, we use the initializer from Klein and Manning (2004). For the covariance matrices, we follow the setting in Cohen et al. (2008) in our ex-periments also described in  X  3.1. For each treebank, we divide the tags into twelve disjoint tag families. 4 The covariance matrices for all dependency distri-butions were initialized with 1 on the diagonal, 0 . 5 between tags which belong to the same family, and 0 otherwise. This initializer has been shown to be more successful than an identity covariance matrix. 4.2 Monolingual Experiments We begin our experiments with a monolingual set-ting, where we learn grammars for English and Chi-nese (separately) using the settings described above.
The attachment accuracy for this set of experi-ments is described in Table 1. The baselines include right attachment (where each word is attached to the word to its right), MLE via EM (Klein and Man-ning, 2004), and empirical Bayes with Dirichlet and LN priors (Cohen et al., 2008). We also include a  X  X eiling X  (DMV trained using supervised MLE from the training sentences X  trees). For English, we see that tying nouns, verbs or adjectives improves per-formance compared to the LN baseline. Tying both nouns and verbs improves performance a bit more. 4.3 Bilingual Experiments Leveraging information from one language for the task of disambiguating another language has re-ceived considerable attention (Dagan, 1991; Smith and Smith, 2004; Snyder and Barzilay, 2008; Bur-kett and Klein, 2008). Usually such a setting re-quires a parallel corpus or other annotated data that ties between those two languages. 5 Our bilingual experiments use the English and Chinese treebanks, which are not parallel corpora, to train parsers for both languages jointly. Shar-ing information between those two models is done by softly tying grammar weights in the two hidden grammars.

We first merge the models for English and Chi-nese by taking a union of the multinomial fami-lies of each and the corresponding prior parame-ters. We then add a normal expert that ties be-tween the parts of speech in the respective parti-tion structures for both grammars together. Parts of speech are matched through the single coarse tagset (footnote 4). For example, with T IE V, let V = V Eng  X  V Chi be the set of part-of-speech tags which belong to the verb category for either tree-bank. Then, we tie parameters for all part-of-speech tags in V . We tested this joint model for each of T
IE V, T IE N, T IE V&amp;N, and T IE A. After running the inference algorithm which learns the two mod-els jointly, we use unseen data to test each learned model separately.
 Table 1 includes the results for these experiments. The performance on English improved significantly in the bilingual setting, achieving highest perfor-mance with T IE V&amp;N. Performance with Chinese is also the highest in the bilingual setting, with T IE A and T IE V&amp;N. In future work we plan to lexicalize the model, in-cluding a Bayesian grammar prior that accounts for the syntactic patterns of words . Nonparametric mod-els (Teh, 2006) may be appropriate. We also believe that Bayesian discovery of cross-linguistic patterns is an exciting topic worthy of further exploration. We described a Bayesian model that allows soft pa-rameter tying among any weights in a probabilistic grammar. We used this model to improve unsuper-vised parsing accuracy on two different languages, English and Chinese, achieving state-of-the-art re-sults. We also showed how our model can be effec-tively used to simultaneously learn grammars in two languages from non-parallel multilingual data.
