 H.3.3 [ Information Search and Retrieval ] Given a user keyword query, current Web search engi nes return a list of pages ranked by their  X  X oodness X  with respe ct to the query. However, this technique misses results whose conten ts are distributed across multiple physical pages and are connected via hyperlinks and frames [3]. That is, it is often the case that no single page contains all query keywords. Li et al. [3] make a first step towards this problem by returning a tree of hy perlinked pages that collectively contain all query keywords. The l imitation of this approach is that it operates at the page-level gran ularity, which ignores the specific context where the keywords are found within the pages. More importantly, it is cumbersome for t he user to locate the most desirable tree of pages due to the amount of data in each page tree and a large number of page trees. keyword query, generates new pages containing all q uery keywords on-the-fly. We view a web page as a set of interconnected text fragments. The composed pages a re generated by stitching together appropriate fragments from hy perlinked Web pages, and retain links to the original Web pages. To rank the composed pages we consider both the hyperlink struc ture of the original pages, as well as the associations between the fragments within each page. In addition, we propose heuristic algorithms to efficiently generate the top composed pages. Experi ments are conducted to empirically evaluate the effectiveness of the proposed algorithms. In summary, our contributions are listed as follows: (i) we introduce composed pages to improve the quality of search; composed pages are designed in a way tha t they can be viewed as a regular page but also describe the stru cture of the original pages and have links back to them, (ii) we rank the composed pages based on both the hyperlink structur e of the original pages, and the associations between the te xt fragments within each page, and (iii) we propose efficient he uristic algorithms to compute top composed pages using the uniformity factor. The effectiveness of these algorithms is sh own and evaluated experimentally. Let D={d 1 ,d 2 ,,...,d n } be a set of web pages d size(d i ) be the length of d i in number of words. Term frequency tf(d,w) of term (word) w in a web page d is the number of occurrences of w in d . Inverse document frequency idf(w) is the inverse of the number of web pages containing term w in them. The web graph G W (V W ,E W ) of a set of web pages d defined as follows: A node v i  X  V W , is created for each web page d in D . An edge e(v i ,v j )  X  E W is added between nodes v is a hyperlink between v i and v j . Figure 1 shows a web graph. The hyperlinks between pages are depicted in the web gr aph as edges. The nodes in the graph represent the web pages and inside those nodes, the text fragments, into which that web page has been split up using html tag parsing, are displayed (see [5]).
 beyond the page granularity. To do so, we view each page as a set of text fragments connected through semantic associations. The page graph G D (V D ,E D ) of a web page d is defined as follows: (a) d is split to a set of non-overlapping text fragment s t(v) , each corresponding to a node v  X  V D , (b) An edge e(u,v)  X  E between nodes u,v  X  V D if there is an association between t(u) and t(v) in d . Figure 2 shows the page graph for Page 1 of Figu re 1. As denoted in Figure 1, page 1 is split into 7 text fr agments and each one is represented by a node. An edge between two n odes denotes semantic associations. Higher weights denote greate r association. In this work nodes and edges of the page graph are assigned weights using both query-dependent and independent factors (see [5]). The semantic association between the nodes is used to compute the edge weights (query-independent) while the relevance of a node to the query is used to define the node w eight (query-dependent). search result of a keyword query is a subtree of the web graph, consisting of pages d 1 ,...,d l , where a subtree s G
Di of d i is associated with each d i . A result is total  X  all query keywords are contained in the text fragments  X  and minimal  X  by removing any text fragment a query keyword is misse d. For example, Table 1 shows the Top-3 search results for the query  X  X raduate Research Scholarships X  on the Web graph o f Figure 1. Problem 1 (Find Top-k Search Results). Given a web graph G the page graphs G D for all pages in G W , and a keyword query Q, find the k search results R with maximum Score(R). principles. First, search results R involving fewer pages are ranked higher [3]. Second, the scores of the subtrees of t he page graphs of the constituting pages of R are combined using a monotonic aggregate function to compute the score of the sear ch result. A modification of the expanding search algorithm of [ 1] is used where a heuristic value combining the Information R etrieval (IR) score, the PageRank score [4], and the inverse of t he uniformity factor (uf) of a page is used to determine the next expansion page. The uf is high for pages that focus on a single or few to pics and low for pages with many topics. The uf is computed using the edge
Rank Score Search Results weights of the page graph of a page (high average e dge weights imply high uf ). The intuition behind expanding according to the inverse uf is that among pages with similar IR scores, pages with low uf are more likely to contain a short focused text fr agment relevant to the query keywords. Figure 3 shows the quality of the results of our heuristic search vs. the quality of the results of the non-heuristic expanding search [1] (a random page i s chosen for expansion since hyperlinks are un-weighted) compare d to the optimal exhaustive search. The modified Spearman X  X  rho metr ic [2] is used to compare two Top-k lists. [1] G. Bhalotia, C. Nakhe, A. Hulgeri, S. Chakrabarti a nd S,Sudarshan: [2] Ronald Fagin, Ravi Kumar, and D. Sivakumar: Compari ng top-k lists. [3] W.S. Li, K. S. Candan, Q. Vu and D. Agrawal: Retrie ving and [4] L. Page, S. Brin, R. Motwani, and T. Winograd: The pagerank citation [5] R. Varadarajan, V Hristidis: Structure-Based Query-Specific 
