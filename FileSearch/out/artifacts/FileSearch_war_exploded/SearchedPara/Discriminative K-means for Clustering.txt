 jieping.ye@asu.edu Applications in various domains such as text/web mining and bioinformatics often lead to very high-dimensional data. Clustering such high-dimensional data sets is a contemporary challenge, due to the curse of dimensionality. A common practice is to project the data onto a low-dimensional subspace through unsupervised dimensionality reduction such as Principal Component Analysis (PCA) [9] and various manifold learning algorithms [1, 13] before the clustering. However, the projection may not necessarily improve the separability of the data for clustering, due to the inherent separation between subspace selection (via dimensionality reduction) and clustering.
 One natural way to overcome this limitation is to integrate dimensionality reduction and clustering in a joint framework. Several recent work [5, 10, 16] incorporate supervised dimensionality reduc-tion such as Linear Discriminant Analysis (LDA) [7] into the clustering framework, which performs clustering and LDA dimensionality reduction simultaneously. The algorithm, called Discrimina-tive Clustering (DisCluster) in the following discussion, works in an iterative fashion, alternating between LDA subspace selection and clustering. In this framework, clustering generates the class labels for LDA, while LDA provides the subspace for clustering. Empirical results have shown the benefits of clustering in a low dimensional discriminative space rather than in the principal com-ponent space (generative). However, the integration between subspace selection and clustering in DisCluster is not well understood, due to the intertwined and iterative nature of the algorithm. In this paper, we analyze this discriminative clustering framework by studying several fundamental and important issues: (1) What do we really gain by performing clustering in a low dimensional discriminative space? (2) What is the nature of its iterative process alternating between subspace selection and clustering? (3) Can this iterative process be simplified and improved? (4) How to estimate the parameter involved in the algorithm? The main contributions of this paper are summarized as follows: (1) We show that the LDA pro-jection can be factored out from the integrated LDA subspace selection and clustering formulation. This results in a simple trace maximization problem associated with a regularized Gram matrix of the data, which is controlled by a regularization parameter  X  ; (2) The solution to this trace max-imization problem leads to the Discriminative K-means (DisKmeans) algorithm for simultaneous LDA subspace selection and clustering. DisKmeans is shown to be equivalent to kernel K-means, where discriminative subspace selection essentially constructs a kernel Gram matrix for clustering. This provides new insights into the nature of this subspace selection procedure; (3) The DisKmeans algorithm is dependent on the value of the regularization parameter  X  . We propose an automatic parameter tuning process (model selection) for the estimation of  X  ; (4) We propose the nonlinear extension of DisKmeans using the kernels. We show that the learning of the kernel matrix over a convex set of pre-specified kernel matrices can be incorporated into the clustering formulation, resulting in a semidefinite programming (SDP) [15]. We evaluate the presented theories and algo-rithms through experiments on a collection of benchmark data sets. centered, that is, be the cluster indicator matrix defined as follows: We can define the weighted cluster indicator matrix as follows [4]: It follows that the j -th column of L is given by where n j is the sample size of the j -th cluster C j . Denote  X  j = as follows [7]: distance. It can be shown that S t = S w + S b .
 Given the cluster indicator matrix F (or L ), Linear Discriminant Analysis (LDA) aims to compute a linear transformation (projection) P  X  R m  X  d that maps each x i in the m -dimensional space to such that the following objective function is maximized [7]: trace S t = S w + S b , the optimal transformation matrix P is also given by maximizing the following objective function: The regularization technique [6] is commonly applied to improve the estimation as follows: where I m is the identity matrix of size m and  X  &gt; 0 is a regularization parameter. In Discriminant Clustering (DisCluster) [5, 10, 16], the transformation matrix P and the weighted cluster indicator matrix L are computed by maximizing the following objective function: The algorithm works in an intertwined and iterative fashion, alternating between the computation of L for a given P and the computation of P for a given L . More specifically, for a given L , P is given by the standard LDA procedure. Since trace ( AB ) = trace ( BA ) for any two matrices [8], for a given P , the objective function f ( L, P ) can be expressed as: The optimal L can be computed by applying the gradient descent strategy [10] or by solving a kernel K-means problem [5, 16] with X T P ( P T ( XX T +  X I m ) P )  X  1 P T X as the kernel Gram matrix [4]. the value of f ( L, P ) monotonically increases and is bounded from above.
 Experiments [5, 10, 16] have shown the effectiveness of DisCluster in comparison with several other popular clustering algorithms. However, the inherent relationship between subspace selection via LDA and clustering is not well understood, and there is need for further investigation. We show in the next section that the iterative subspace selection and clustering in DisCluster is equivalent we propose the Discriminative K-means (DisKmeans) algorithm for simultaneous LDA subspace selection and clustering. Here, P is a transformation matrix and L is a weighted cluster indicator matrix as in Eq. (3). It follows from the Representer Theorem [14] that the optimal transformation matrix P  X  IR m  X  d can be expressed as P = XH , for some matrix H  X  IR n  X  d . Denote G = X T X as the Gram matrix, which is symmetric and positive semidefinite. It follows that We show that the matrix H can be factored out from the objective function in Eq. (10), thus dramat-ically simplifying the optimization problem in the original DisCluster algorithm. The main result is summarized in the following theorem: Theorem 3.1. Let G be the Gram matrix defined as above and  X  &gt; 0 be the regularization param-Eq. (7). Then L  X  solves the following maximization problem: Proof. Let G = U  X  U T be the Singular Value Decomposition (SVD) [8] of G , where U  X  IR n  X  n IR n  X  t consist of the first t columns of U and  X  t = diag (  X  1 ,  X  X  X  ,  X  t )  X  IR t  X  t . Then N are orthogonal and  X  R is diagonal with rank ( X  R ) = rank ( R ) = q . Define the matrix Z as Z = U diag where  X   X  = ( X  R ) 2 is diagonal with non-increasing diagonal entries. It can be verified that where the equality holds when P = XH and H consists of the first q columns of Z . 3.1 Computing the Weighted Cluster Matrix L The weighted cluster indicator matrix L solving the maximization problem in Eq. (11) can be com-puted by solving a kernel K-means problem [5] with the kernel Gram matrix given by Thus, DisCluster is equivalent to a kernel K-means problem. We call the algorithm Discriminative K-means (DisKmeans). 3.2 Constructing the Kernel Gram Matrix via Subspace Selection The kernel Gram matrix in Eq. (15) can be expressed as Recall that the original DisCluster algorithm involves alternating LDA subspace selection and clus-tering. The analysis above shows that the LDA subspace selection in DisCluster essentially con-structs a kernel Gram matrix for clustering. More specifically, all the eigenvectors in G is kept unchanged, while the following transformation is applied to the eigenvalues: This elucidates the nature of the subspace selection procedure in DisCluster. The clustering algo-rithm is dramatically simplified by removing the iterative subspace selection. We thus address issues (1) X (3) in Section 1. The last issue will be addressed in Section 4 below. 3.3 Connection with Other Clustering Approaches Consider the limiting case when  X   X  X  X  . It follows from Eq. (16) that  X  G  X  G/ X  . The optimal L is thus given by solving the following maximization problem: The solution is given by the standard K-means clustering [4, 5].
 the columns of U 1 form the full set of (normalized) principal components [9]. Thus, the algorithm is equivalent to clustering in the (full) principal component space. Our experiments show that the value of the regularization parameter  X  has a significant impact on the performance of DisKmeans. In this section, we show how to incorporate the automatic tuning of  X  into the optimization framework, thus addressing issue (4) in Section 1.
 The maximization problem in Eq. (11) is equivalent to the minimization of the following function: It is clear that a small value of  X  leads to a small value of the objective function in Eq. (17). To matrix I n + 1  X  G . This leads to the following optimization problem: function in Gaussian Process [12] with I n + 1  X  G as the covariance matrix. We have the following main result for this section: Theorem 4.1. Let G be the Gram matrix defined above and let L be a given weighted cluster the optimal  X   X  solving the optimization problem in Eq. (18) is given by minimizing the following objective function: Proof. Let U = [ U 1 , U 2 ] , that is, U 2 is the orthogonal complement of U 1 . It follows that trace The result follows as the second term in Eq. (21), trace We can thus solve the optimization problem in Eq. (18) iteratively as follows: For a fixed  X  , we update L by maximizing the objective function in Eq. (17), which is equivalent to the DisKmeans algorithm; for a fixed L , we update  X  by minimizing the objective function in Eq. (19), which is a single-variable optimization and can be solved efficiently using the line search method. We call the algorithm DisKmeans  X  , whose solution depends on the initial value of  X  . The DisKmeans algorithm can be easily extended to deal with nonlinear data using the kernel trick. Kernel methods [14] work by mapping the data into a high-dimensional feature space F equipped with an inner product through a nonlinear mapping  X  : IR m  X  F . The nonlinear mapping can be implicitly specified by a symmetric kernel function K , which computes the inner product of the function: of kernel Gram matrices { G i } ` i =1 as G K = P computed by solving a Semidefinite programming (SDP) problem as follows: Theorem 5.1. Let G K be constrained to be a convex combination of a given set of kernel matrices minimizing the objective function in Eq. (22) is given by solving the following SDP problem: Proof. It follows as L T j This leads to an iterative algorithm alternating between the computation of the kernel Gram matrix G
K and the computation of the cluster indicator matrix L . The parameter  X  can also be incorporated into the SDP formulation by treating the identity matrix I n as one of the kernel Gram matrix as in [11]. The algorithm is named Kernel DisKmeans  X  . Note that unlike the kernel learning in [11], the class label information is not available in our formulation. In this section, we empirically study the properties of DisKmeans and its variants, and evaluate the performance of the proposed algorithms in comparison with several other representative algorithms, including Locally Linear Embedding (LLE) [13] and Laplacian Eigenmap (Leigs) [1]. Experiment Setup: All algorithms were implemented us-ing Matlab and experiments were conducted on a PEN-TIUM IV 2.4G PC with 1.5GB RAM. We test these al-gorithms on eight benchmark data sets. They are five UCI data sets [2]: banding, soybean, segment, satimage, pendigits; one biological data set: leukemia ( http://www. upo.es/eps/aguilar/datasets.html ) and two image data sets: ORL ( http://www.uk.research.att.com/ facedatabase.html , sub-sampled to a size of 100*100 = 10000 from 10 persons) and USPS ( ftp://ftp.kyb.tuebingen.mpg.de/pub/bs/ data/ ). See Table 1 for more details. To make the results of different algorithms comparable, we first run K -means and the clustering result of K -means is used to construct the set of k initial centroids, for all experiments. This process is repeated for 50 times with different sub-samples from the original data sets. We use two standard measurements: the accuracy (ACC) and the normalized mutual information (NMI) to measure the performance. Effect of the regularization parameter  X  : Figure 1 shows the accuracy ( y -axis) of DisKmeans and DisCluster for different  X  values ( x -axis). We can observe that  X  has a significant impact on the performance of DisKmeans. This justifies the development of an automatic parameter tuning process in Section 4. We can also observe from the figure that when  X   X   X  , the performance of DisKmeans approaches to that of K -means on all eight benchmark data sets. This is consistent with Effect of parameter tuning in DisKmeans  X  : Figure 2 shows the accuracy of DisKmeans  X  using DisKmeans  X  . The result of DisKmeans (without parameter tuning) is also presented for comparison. We can observe from the figure that in many cases the tuning process is able to significantly improve the performance. We observe similar trends on other four data sets and the results are omitted. Figure 2 also shows that the tuning process is dependent on the initial value of  X  due to its non-convex optimization, and when  X   X   X  , the effect of the tuning process become less pronounced. Our results show that a value of  X  , which is neither too large nor too small works well. DisKmean versus DisCluster: Figure 3 compares the trace value achieved by DisKmean and that the trace value of DisCluster increases in each iteration but is bounded from above by that of DisKmean. We observe a similar trend on the other four data sets and the results are omitted. This is consistent with our analysis in Section 3 that both algorithms optimize the same objective function, and DisKmean is a direct approach for the trace maximization without the iterative process. Clustering evaluation: Table 2 presents the accuracy (ACC) and normalized mutual information (NMI) results of various algorithms on all eight data sets. In the table, DisKmeans (or DisCluster) with  X  X ax X  and  X  X ve X  stands for the maximal and average performance achieved by DisKmeans and DisCluster using  X  from a wide range between 10  X  6 and 10 6 . We can observe that DisKmeans  X  is competitive with other algorithms. It is clear that the average performance of DisKmeans  X  is robust against different initial values of  X  . We can also observe that the average performance of DisKmeans and DisCluster is quite similar, while DisCluster is less sensitive to the value of  X  . In this paper, we analyze the discriminative clustering (DisCluster) framework, which integrates subspace selection and clustering. We show that the iterative subspace selection and clustering in DisCluster is equivalent to kernel K-means with a specific kernel Gram matrix. We then propose the DisKmeans algorithm for simultaneous LDA subspace selection and clustering, as well as an auto-matic parameter tuning procedure. The connection between DisKmeans and several other clustering algorithms is also studied. The presented analysis and algorithms are verified through experiments on a collection of benchmark data sets.
 We present the nonlinear extension of DisKmeans in Section 5. Our preliminary studies have shown the effectiveness of Kernel DisKmeans  X  in learning the kernel Gram matrix. However, the SDP formulation is limited to small-sized problems. We plan to explore efficient optimization techniques for this problem. Partial label information may be incorporated into the proposed formulations. This leads to semi-supervised clustering [3]. We plan to examine various semi-learning techniques within the proposed framework and their effectiveness for clustering from both labeled and unlabeled data.
