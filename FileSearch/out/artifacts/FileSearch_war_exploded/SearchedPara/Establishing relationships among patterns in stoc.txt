 Dietmar H. Dorr, Anne M. Denton * 1. Introduction
Time series data are ubiquitous in fields as diverse as economics, science, and industry; hence, it is not surprising that there has been a strong interest in applying data mining techniques to time series data. Time series can be very long, and users are often interested in similarities that extend over a comparatively short time interval, which suggests the use of sliding-window techniques. An approach that is based on sliding windows starts with all possible fixed length, contiguous subsequences of the time series under consideration. Note that the term  X  X  X ubsequence X  has multiple meanings in the liter-ature. We use subsequence in the sense of a contiguous section of a sequence that is also sometimes called  X  X  X ubstring X . In order to address the properties of time series data, special similarity measures have been devised that are defined over var-iable-length subsequences, as well as making other generalizations [45,7,6,12] . With well-established similarity measures in place, researchers have pursued pattern mining, clustering and classification tasks, as they are common in data mining.
The richness of temporal data is, however, not alone captured in modified similarity measures. In sequential data, strong reasons may be given as to why it can be beneficial to revise even the concept of pattern mining itself: conventionally pattern mining is seen as returning isolated, frequent occurrences in the data. Although relationships among patterns have been extensively used as a basis for pruning through closure properties [1], these set X  X ubset relationships do not normally con-tribute much to the expressiveness of the result when time series are considered. In comparison to record data, time series data inherently provides an additional dimension (time) for each data item. The time dimension can be utilized not only for mining patterns but also for capturing the relationships among patterns. In our interpretation, a revised concept of pattern mining should include the interrelations among patterns.
For example, knowing that a group of stock series shares a pattern over a long period of time, while other stock series show a related pattern over a much shorter interval can provide valuable insights into the price developments of stocks.
The relationships among patterns have important information content by themselves. It is our goal to capture the similarities among stock market time series such that their sequence X  X ubsequence relationships are preserved. We identify patterns representing collections of contiguous subsequences that share the same shape for a particular time interval. Patterns are defined on the basis of contiguous sections of normalized sliding windows that show pairwise similarities among sequences.
The relationships among sliding-window patterns are represented using a directed acyclic graph (DAG) that is constructed based on the overlap between patterns. Leaf nodes within the DAG denote entire sequences, internal nodes represent pat-terns, and the sequence X  X ubsequence relationships among patterns are represented by the edges. In a directed graph, an internal node, in contrast to a leaf node, has at least one directed edge to another node. The information contained within the DAG, as well as timing information, is represented using a pattern conglomerate notation that constitutes a new level of abstraction. The pattern conglomerate concept is designed to allow meta-analyses. In the context of this paper, a meta-anal-used as input to another, second analysis (meta-analysis). A pattern conglomerate incorporates the structure of the DAG and the order of clustered sequences, as well as the extent of the subsequences considered during the execution of our algorithm (Section 3.3). The panel (a) of Fig. 1 depicts an example of four time series that shows a total of three characteristic shapes.
The sliding-window pattern that is signified by is shared by all four sequences. Sequences A and B show a longer pattern that extends as far as the section with a h . Time series C and D have a different extended pattern comprised of and s . The corresponding DAG representation is shown in panel (b) of Fig. 1 . Each time series is represented by a leaf node, and all three patterns are represented as internal nodes. The root node, , connects to the two other internal nodes, which represent the longer patterns. Note that the DAG is different from similarity-based representations that are common in hierarchical clus-tering, where degrees of similarities are used to group sequences. In our case, length of overlap determines the position in the DAG and similarity is defined through a single window-based threshold. Accordingly, the node is created based on the overlap between patterns A/B ( h ) and C/D ( s ) rather than the degree of the similarity between the sequences. The third panel (c) of Fig. 1 depicts the abstraction of the DAG in form of a pattern conglomerate. The structure of the DAG is repre-sented using parentheses, and the beginning and ending of regions of similarity between pairs of sequences are indicated by braces with subscripts.
We demonstrate the usefulness of our pattern conglomerates by determining timing patterns of the form begins earlier , ends later , and is longer between time series of the same pattern conglomerate. Examples for timing patterns in Fig. 1 a are A and B begin earlier than C and D. We apply our algorithm to 460 stock market time series of the S&amp;P 500 index as well as to four additional time series data sets (Section 5.1). The additional data sets serve as a means to highlight the applicability of our approach to different time series data sets (Section 5.5) and to provide a more comprehensive performance analysis (Sec-tion 5.7). 1.1. Financial interpretation
The stock price of a company is influenced by a wealth of internal and external factors. An internal factor may be the per-ceived potential of the company to be successful in the future (e.g., competent management or ability to generate profit), and an external factor could be the future expectations of a market in which the company operates. There have been several studies addressing the influence of external factors such as news on stock market behavior [48,26,49,5,30] . We do not re-strict our analysis by the assumption that there is a single external factor, such as a news report, affecting stock prices. It is our objective to observe the effects of combinations of external influences that have an impact on the stock prices of two or more companies. Note that we do not attempt to identify the nature of any factors but rather observe their effects.
We assume that stocks of two companies may show a similar shape when major influences or economic pressures on these companies are similar. For example, if the future expectations of a particular market (e.g., e-commerce) are very positive (or negative), then the stock time series of companies that operate in this market are likely to show a very similar shape. The application of our algorithm to stock time series results in a DAG representation, e.g., Fig. 1 b, where contiguous subse-quences of stocks that exhibit a similar shape for some time interval are grouped together. Based on the above interpretation, the companies that issue these stocks are under the pressure of similar factors for that particular interval. Our exemplary meta-analysis focuses on the onset and progression of factors affecting two companies. Temporal relationships of interest include the observation that the impact of factors on some companies begin earlier , end later , and are longer than others. 1.2. Related work
Traditionally, work on stock market data has focused on predictive modeling [4,11] and study of anomalies [41]. In recent years, data mining approaches have increasingly gained importance [19,25,40,31,15] , despite negative connotations of the term  X  X  X ata mining X , which is sometimes interpreted as being  X  X  X ynonymous with data dredging and fishing X  [21]. Predictive tasks are still in the foreground of data mining [25] and machine learning [43,46,27] technique development. Applications have been introduced to address the technical challenges of monitoring and mining time-critical financial data in conjunc-tion with mobile computing devices [23].

The utilization of standard clustering algorithms for grouping fixed length, contiguous subsequences of time series [14] has been shown to be a challenging problem [24]. Although the observed problems are not insurmountable [16,10] , this pa-per avoids them by only comparing windows at a fixed time point and only considering windows that have matches that are statistically significant. Relationships between different time series have been studied in [2,50,36,9] . These techniques are based on the interpretation of a sequence as an ordered list of events and are usually discussed under the term sequential pattern mining. Sequential pattern mining addresses the identification of frequent, but not necessarily contiguous subse-quences [2,36] .

Analysis of time series is also discussed in the area of stream mining [18]. Typically, the application of mining algorithms to continuous data streams has real-time constraints and requires one-pass searches or fast responses [28,47] . Accordingly, stream mining approaches are limited by the available computational resources and the frequency of newly arriving data.
Similar techniques to the ones discussed in this work have been applied to categorical gene sequences [17]. Fundamental ideas can often be applied both to sequences of categorical values such as gene sequences and to time series data. An exam-ple is dynamic time warping for time series data which corresponds to the Needleman X  X unsch alignment algorithm for cat-egorical sequences. Differences in normalization, similarity measures and evaluation of thresholds require substantial new algorithm development. The focus of Dorr and Denton [17] is on the identification of motifs in biological sequences and it is shown that the identified motifs are useful for assigning functional annotations to protein sequences. In contrast, this paper addresses the sequence X  X ubsequence relationships among stock market time series, and the usefulness of abstracting these relationships to pattern conglomerates is shown through timing patterns. Since time series are based on real numbers (Def-inition 1) and protein sequences are composed of categorical values, time series data must be processed differently than pro-tein sequences. Several algorithms have been proposed for discovering motifs in general, and for addressing specific aspects of the discovery problem in particular. Some algorithms focus on the discovery of motifs with a particular length [8,13] , and others address the problem of identifying motifs satisfying certain composition criteria [51,52] . The maximization of the number of sequences associated with a motif is the focus of Gouzy et al. [20] as well as Sonnhammer and Kahn [42], and the discovery of motifs that cannot be extended without reducing the number of supporting sequences is addressed by the algorithms TEIRESIAS [39] and Gemoda [22].

This paper explicitly focuses on the identification of relationships among patterns and their abstraction to pattern con-glomerates. Pattern conglomerates are derived through a clustering-like algorithm that establishes a DAG representing the relationships among patterns. Algorithms have been proposed focusing on decomposition of clusterings [34], or utilizing resent the relationships among subsequences of time series. Villafane et al. [44] focus on containment relationships among time series subsequences and use a DAG for representing these relationships. Our approach also captures the containment relationships among time series subsequences and additionally considers the overlap between subsequences that do not sat-
Freska X  X  relations between intervals [31,33] . We address the identification and abstraction of relationships among patterns and show the usefulness of our pattern conglomerates by deriving timing patterns.

In Section 2, fundamental definitions related to time series are introduced. Our approach is discussed in Sections 3 and 4 provides an exemplary meta-analysis that utilizes our pattern conglomerates. The experimental evaluation in Section 5 pro-discussion addressing additional data sets (Section 5.5), as well as a significance (Section 5.6) and performance analysis (Sec-tion 5.7). 2. Background 2.1. Time series
Often sequences are formed by collecting attributes of the same type at different points in time. If those data are real-val-ued, which is the case for stock prices, we commonly talk of time series data. For this paper we will limit our discussion to real-valued time series.

Definition 1. A time series T = t 1 , ... , t n is a sequence of real numbers, corresponding to values of an observed quantity, collected at regular time intervals.

Definition 2. A subsequence of a time series T = t 1 , ... , t 1 6 u 6 n w 0 +1.

The process of extracting contiguous subsequences of a fixed length w 0 by incrementing u in steps of one is called appli-cation of a sliding-window. A subsequence of length w 0 represents the atomic unit, for which a similarity to other subse-quences may be observed and sequence X  X ubsequence relationships determined. We use differences between successive time points to define n w 0 + 1 vectors ~ v in a w = w 0 1 dimensional vector space. The rationale for this choice is that noise in time series data often has the shape of a random walk time series [37] rather than that of white noise. Given the definition of a random walk time series in [37], differences between adjacent time points generate a white noise time series, which cessive time points of the time series T beginning at position u
Following [19], we apply piecewise z -normalization, i.e., we subtract the mean and divide by the standard deviation for each shaped signals can be identified independently from the amplitude: where l is the mean of values of the vector, and r is the standard deviation. 2.2. Alignment
In order to evaluate the similarity between two time series, we compare vectors as defined in Eq. 2 using the Euclidean distance measure. If the distance is smaller than a threshold h for one or more consecutive windows we consider the two corresponding subsequences to be aligned. We refer to regions, in which two time series satisfy a similarity criterion, as alignments, in analogy to the terminology used for genomic sequences.

Definition 3. Two time series subsequences T a and T b have an alignment of length l P w if the following holds
In general, the two subsequences of an alignment do not have to start at the same time point. However, for the purpose of this paper we only consider alignments for which u = x . There are multiple reasons for restricting the subsequences within alignments to begin and end at the same time point. First, the concept of timing patterns that are used in the evaluation depends on comparisons that are specific to points in time (Section 4). It is in the nature of our meta-analysis that relative ordering in the actual time is to be studied. Second, we use a threshold h such that spurious matches are rare (Section 5.6). If we were to allow arbitrary alignments, h would have to be chosen much smaller to achieve the same level of significance.
That would mean that many of the alignments discussed in the evaluation would be lost. Allowing a choice of h that disre-gards statistical significance is not considered an option due to the known problems related to clustering of arbitrary time series windows [24]. Notice that the performance is primarily governed by large hierarchies that are expected when there are strong external factors that affect several time series simultaneously. If the algorithm were applied without the con-straint that alignments start and end at the same time we would expect the additional hierarchies to be comparatively small.
Definition 4. A sliding-window alignment of length l between two sequences T maximal, if there is no i 2 { 1, u + l w + 1} such that j v  X  T
Note that there can be longer, non-overlapping alignments between the same two sequences. The above definition only excludes shorter alignments that are included in a maximal alignment. 3. Approach 3.1. Clustering
Our algorithm represents sequence X  X ubsequence relationships as edges in a DAG. Each leaf node within the DAG denotes a time series. An internal node represents a set of subsequences that show a direct or indirect mutual similarity. We refer to the internal nodes as sliding-window patterns.

Definition 5. A sliding-window pattern is given by a set of sequence sections of uniform length, all of which are nodes in a connected graph of sliding-window alignments (see Definition 4). All alignments are required to extend at least over the full length of the sequence sections, but may extend longer.
The directed edges of the DAG of sliding-window patterns can be interpreted as representing a  X  X  X as-subsequence(s)-of X  relationship. Edges begin at an internal node and end either at another internal node or a leaf node. In Fig. 1 b, the s node has subsequences of the time series C and D. Similarly, the root node has subsequences of the remaining two internal nodes, which in turn have subsequences of the time series A and B as well as C and D.

Since our algorithm also has some similarity to agglomerative hierarchical clustering, we refer to nodes as clusters. A sub-graphoftheDAGthatisinducedbyasetofnodesconnectedtoacommonrootnodeisequivalenttoahierarchyinagglomerative clustering. The higher a cluster is in a hierarchy, the more subsequences it contains. Since our DAG represents  X  X  X as-subse-quence(s)-of X  relationships, the subsequences of a cluster are at most as long as the subsequences within a connected cluster.
A cluster can have direct  X  X  X as-subsequence(s)-of X  relationships with two time series, another cluster and a time series, or two different clusters. If a cluster combines subsequences of two time series, then it extends over the full length of the cor-responding alignment. Clusters that combine a time series and a cluster, or two clusters, only contain those sections of sub-sequences that overlap with each other. Thus, non-overlapping sections of subsequences are not represented in clusters. For example, in Fig. 1 b, the root node ( ) only represents the subsequences signified by , although the subsequences of the connected clusters represent longer subsequences. Alignments are defined to start at the same time point ( u = x in Definition 3). As a result, all subsequences within a cluster begin and end at the same positions u and u + l 1.

Non-overlapping parts of a long alignment can be contained in separate hierarchies within the DAG. An example depict-in the sequence X  X ubsequence relationships. The sections of the sequences that are signified by s in Fig. 1 a are divided into s and + sections in Fig. 2 a. As before, the longest alignment is clustered first, which combines the subsequences of C and D (signified by s +). The second cluster h represents sections of the time series A and B. This is followed by the creation of of the sequences B X  X . Note that after the creation of the third cluster ( ), non-overlapping subsequences of the second clus-could not have been created. The corresponding pattern conglomerate of the example shown in Fig. 2 a is depicted in panel (c). A discussion addressing pattern conglomerates follows in Section 3.3. One might think that our DAG representation bears strong similarities to the lattice structure of frequent itemset generation. However, an itemset lattice structure strictly rep-resents set X  X ubset relationships and the sequential information is lost. This becomes clear when applying frequent itemset mining to sequences as transactions, where subsequences are considered to be the items. The relationships among the sub-sequences are lost in such an approach and an itemset lattice structure cannot capture the sequence X  X ubsequence relation-ships among the time series. For the example shown in Fig. 1 , all itemsets with non-zero support count are depicted in Fig. 3 b in form of an itemset lattice structure. In this setting, an item is a characteristic shape ( h , ,or s ), and the number of se-quences exhibiting a particular shape combination denote the support count. The same itemset lattice structure, as shown in ture is less suitable for representing the sequence X  X ubsequence relationships among time series. In contrast, the correspond-ing DAG representation to the example shown in Fig. 3 a is depicted in panel (c) of Fig. 3 . While the representations of the examples in Figs. 1a and 3a using the itemset lattice structure result in the same depiction, our approach using a DAG pro-vides two very different representations. 3.2. Algorithm
The pseudocode of the clustering algorithm is shown in Algorithm 1. Input to the algorithm are the set of all maximal, sliding-window alignments (Definition 4) and the window length w . At each step the next longest alignment is considered, (described later). Since these alignments do not satisfy the sliding-window alignment criterion, the clustering process stops once all alignments with length P w have been processed and the created clusters are returned. After validating the length, clusters are identified that overlap with a subsequence of the currently processed alignment . Depending on the presence of overlapping clusters and the type of overlap, one of two different paths is taken.

Algorithm 1. Clustering algorithm. (1) If a subsequence of the alignment partially overlaps with a cluster, then the alignment is split into fragments. The posi-(2) If neither subsequence of the alignment partially overlaps with a cluster the second path is taken; hence, an existing
There are some minor details that are not shown in the clustering algorithm: in some situations, there are multiple op-combination of clusters ( cluster 1 and cluster 2) that yields the longest overlap with the alignment . Another detail has been omitted addressing the trimming of clusters. In deep hierarchies of three or more levels, clusters may be trimmed multiple times. After each addition of a level, the subsequences within lower levels are trimmed and the resultant fragments are added to the set of all unprocessed alignments . In order to guarantee that the alignments considered by the clustering algo-rithm are maximal, alignment fragments resulting from trimming clusters are combined and represented as a single align-ment in the alignments list. 3.3. Pattern conglomerate
Typically, the DAG of a clustering result contains multiple hierarchies. Each hierarchy represents a subgraph of the DAG that is induced by the set of nodes connected to a common root node. We represent the internal nodes (clusters) of each hierarchy in postorder and distinguish between partial subgraphs using parentheses. Each internal node is denoted by the alignment (Definition 4) that has been used to create the cluster. While the DAG aids the clustering algorithm, a general-ized representation is more useful for the application of meta-analyses and additional mining algorithms, because the begin-ning and ending of clustered subsequences are included within the pattern conglomerates.

Definition 6. A pattern conglomerate is a notation for sliding-window patterns (Definition 5) that are uniquely specified by overlapping sliding-window alignments (Definition 4).
 In the panels (c) of Figs. 1 and 2 our pattern conglomerates are shown for the two example clusterings. Since the
DAG in Fig. 2 b contains two hierarchies, two pattern conglomerates are depicted. The left hierarchy is based on the clus-ters h , s +, and the root cluster . In our representation the cluster h is denoted by the alignment { A , B } s + and clusters are represented by the alignments { C , D } the right shares its alignments with the left hierarchy, but denotes a different sequential feature ( s ). The alignments in the second representation are shown in gray in order to indicate that the same alignments are also used for repre-senting the left hierarchy.

The pattern conglomerates can be used to determine the time interval each cluster represents. The time interval of a clus-ter corresponds to the maximum overlap of the alignments that has been used to create the cluster. For example, the root node of the left hierarchy in Fig. 2 b is based on the alignments { A , B } these alignments represents the time interval from max{2,5,5} = 5 to min{8,13,10} = 8, which corresponds to the time inter-val denoted by the root cluster ( ). 4. Example meta-analysis: timing patterns
We show the usefulness of our pattern conglomerates by utilizing them in a meta-analysis. Timing patterns are deter-mined that describe relationships between time series represented in the same pattern conglomerate. We determine whether a subsequence of one time series begins earlier , ends later ,or is longer than a subsequence of another time series.
Since a time series can be involved in multiple pattern conglomerates, relationships between subsequences of several time series can be observed multiple times. The example in Fig. 1 a supports the following timing patterns: The subsequences of C and D are longer and end later than the subsequences of A and B. The timing patterns represent a proper subset of Allen X  X  as well as Freska X  X  relations between intervals [31]. We focus on the subset of these relations that appears most immediately relations between intervals does not constitute a limitation of our approach. Additional relations or operators could be deter-mined through a different meta-analysis, e.g., some of Roddick X  X  49 midpoint interval operators [31]. In order to discover timing patterns, at least three sequences have to have a similar shape within the same time interval. Since sliding-window patterns are identified based on alignments between two time series, three or more subsequences must be present within a pattern conglomerate to possibly observe differences in the beginning and ending positions. Also note that we only focus on timing patterns relating pairs of sequences. Timing patterns among three or more time series could be easily identified by evaluating multiple time series within each pattern conglomerate.

For identifying timing patterns, only pattern conglomerates with three or more time series have to be considered. Within a pattern conglomerate, we focus on each path of alignments from a leaf node to the root node, and compare the beginning and ending positions of the alignments to each other. For example, the time series T
T , whenever the longest alignment of T a begins earlier than the longest alignment of T pattern conglomerate there are possibly multiple, overlapping paths of alignments from a leaf node to the root node. For example, in Fig. 2 b, the pattern conglomerate of the left hierarchy is composed of two overlapping paths of alignments: { A , B } 2:8 { B , C } 5:10 and { C , D } 5:13 { B , C } is used multiple times to cluster time series. In order to prevent that the same pair of alignments is used multiple times for determining a timing pattern between two time series, a function  X  X  X lreadyProcessed X  is introduced that tests if the com-bination of alignments and time series has already been considered.

We formalize the criteria for timing patterns using the above test function. The formulae are based on two different time series T a and T b as well as two different alignment { T pattern conglomerate. The time series of T a begins earlier than the time series T
The time series T a ends later than the time series T b ,if
The time series T a is longer than the time series T b ,if
Support count and confidence measures can be defined as usual in pattern mining. The support count denotes the number of identified occurrences (pattern conglomerates) of the corresponding timing pattern.

Definition 7. The support count for a relationship T a T b number of pattern conglomerates r exhibiting the relationship: suppc  X  T
The confidence is the ratio of the support count and the number of occurrences identified for the particular combination of time series and relationship type. For the relationship begins earlier and two time series T confidence value is the sum of the support counts for T a
Definition 8. The confidence for a relationship T a T b of type between two time series T 4.1. Algorithm
In Algorithm 2, the pseudocode is shown for determining timing patterns based on our pattern conglomerates (Section 3.3). Input to the algorithm is a list of all pattern conglomerates ( R ) that are derived from a clustering DAG. The support series. The algorithm traverses through each alignment path p of each pattern conglomerate r and considers every combi-nation of time series { T a , T b } within the alignment path. Subsequently, for both time series T of the time series on the path is determined. In the case that the two longest alignment { T or have already been processed, the algorithm proceeds to the next combination of time series. Otherwise, the beginning and ending positions of the alignments are compared to each other, in order to determine whether one time series begins earlier , ends later ,or is longer than the other time series.

Algorithm 2. Example meta-analysis: timing patterns. 5. Experimental evaluation 5.1. Data and parameter choices
We use daily historical data for stocks of the S&amp;P 500 index from http://kumo.swcp.com/stocks/ . The obtained data set includes stock prices for an entire year from 02/01/2006 to 01/31/2007. The analysis of the stocks is done using the closing values of each day, and excludes all those stocks that have not been a member of the S&amp;P 500 index for the entire year. How-ever, our approach does not need to be limited to time series of a particular length. Overall, the data set consists of 460 dif-ferent stocks each having 250 prices. For brevity, we refer to specific stocks using their ticker symbol.

The stocks in the S&amp;P 500 index are assigned a sector based on the type of business conducted. This categorization is available at the Standard &amp; Poor X  X  website (http://www2.standardandpoors.com/spf/csv/index/sp500.csv ), and includes 10 sectors, such as energy, financials and health care. The entire list of sectors together with their abbreviations is shown in Table 1 . Ticker symbols and corresponding company names of the stocks in the energy sector are provided in Table 2 .
The crude oil price shown in panel (a) of Fig. 4 is the Cushing, Oklahoma WTI (West Texas Intermediate) spot price FOB (Free On Board) in dollars per barrel obtained from the Energy Information Administration (http://tonto.eia.doe.gov/dnav/ pet/pet_pri_spt_s1_d.htm ), which is a statistics agency of the US Department of Energy.
 Furthermore, we use three multivariate time series data sets as well as an artificial data set from E. Keogh X  X  UCR Time
Series Data Mining Archive ( http://www.cs.ucr.edu/eamonn/TSDMA/index.html ). The buoy_sensor data set consists of four time series, each with 13,991 values. Both the spot_exrates and wind data sets contain 12 time series with 2567 and 6574 values, respectively. The artificial random_walk data set consists of a single time series with 65,536 values.
The time series are aligned and clustered using a single parameter, window size w . The window size w of 10 is chosen such that the shortest similarity between two subsequences extends over two workweeks in the case of the stock market data and 10 consecutive values in case of the additional data sets. Especially considering the volatility of the stock market, we regard similarities between stock time series that extend over 2 weeks of particular interest. The maximum Euclidean distance h varies for different data sets. The threshold is calculated such that a similarity between two subsequences of length w has a p -value of approximately 0.04. See Section 5.6 for a discussion addressing the significance. A change of either value, w or h , affects the definition of an alignment (Definition 3). A more stringent similarity criterion is obtained by decreasing the similarity threshold h or increasing the window length w . In the latter case, more time series data points are considered in the determination of the similarity between two windows. However, a modification of the values also af-fects the p -value of a similarity between two subsequences (Section 5.6). An equivalent p -value can be obtained by multiple value combinations of w and h . The longer the window size w chosen, the higher may be the maximum Euclidean distance h to achieve an equivalent p -value. However, the relationship between the window size w and distance threshold h is not lin-ear. By varying the value combination of w and h , different but equally significant sets of alignments may be obtained that result in different DAGs and pattern conglomerates. Since the focus of this paper is on capturing of similarities among se-quences in form of a DAG and their abstraction to pattern conglomerates, we merely analyze the data sets using a single window size. 5.2. Examples
The alignment algorithm determines 1269 alignments for the stocks in the energy sector, which are grouped into 213 clusters and result in 67 pattern conglomerates. Fig. 4 a shows the clustered subsequences of one hierarchy extending from 10/05/06 to 11/01/06. In Fig. 4 a, it can be seen that the sequences are clustered over a variety of lengths. The longest sub-sequences are represented by the cluster combining RIG and WFT and consisting of 19 prices, and the shortest subsequences are represented by the root cluster, which includes 12 consecutive prices of each stock shown in the hierarchy. The stock prices of RIG and WFT are clustered first, since their alignment is longest. Other stock series that match the pattern over shorter time intervals are clustered later.

Fig. 4 a also includes the crude oil price. Although crude oil is not part of the S&amp;P 500 index, this time series is shown, because of the apparent economic connections between crude oil and stocks in the energy sector. Surprisingly, we find that similarities among different stocks dominate the pattern DAG, which is depicted in panel (b) of Fig. 4 . If we clustered the crude oil time series with the stocks in the energy sector, only the highlighted subsequence of crude oil, which is shorter than any of the stock series sections, would be included in the hierarchy. The corresponding DAG would be ex-tended and receive a new root cluster that combines the root cluster of the DAG shown with an additional node repre-senting crude oil. This indicates that we can find patterns that are not directly a consequence of a single external factor such as crude oil. Multiple timing patterns are supported by the corresponding pattern conglomerate shown in Fig. 4 c. For example, the subsequences of RIG and WFT are longer , and end later than the subsequence of RDC, but the subsequence of
RDC begins earlier than the subsequences of RIG and WFT. Furthermore, the subsequences of RIG and WFT begin and end at the same time and therefore have the same length. In this situation none of the timing patterns under consideration is observed.

Table 3 lists 10 pattern conglomerates utilizing the notation introduced in Section 3.3. The table includes all clustering results among the sequences of the energy sector that are based on a hierarchy whose root cluster represents a time interval within the first 30 days. Note that half of these pattern conglomerates cannot be used for determining timing patterns, be-cause they are only based on a single alignment between two sequences.
 5.3. Results per sector
It is in the nature of our cluster hierarchies that they can contain clusters and thereby sequences of varying length. We now look at the length distribution of sequences. For this analysis we consider only the longest subsequence of each time series in each hierarchy. Referring back to the DAG representation in Fig. 1 b, it can be seen that subsequences of the same time series may be represented in two connected clusters with different lengths. For example, a subsequence of A is included in the h and cluster as well as in the cluster. For this analysis we consider only the subsequence in the longest cluster, i.e., the h and cluster.

Fig. 5 depicts the histogram for the clustering results of the energy and financials sectors. Since pattern conglomerates only consisting of two subsequences cannot be used to derive timing patterns, the subsequences of these hierarchies are not included in the histogram shown. Also note, that there is no subsequence shorter than the window size w of 10, because the clustering algorithm terminates once an alignment shorter than w is encountered. Fig. 5 shows that the time series of the energy sector appear to be similar over longer time intervals. A second histogram is depicted by Fig. 6 . It shows the number of time series clustered in different hierarchies for the energy and financials sectors. As with the previous histogram, Fig. 6 only includes those hierarchies that combine three or more time series. It can be seen that in the energy sector there are hierarchies that combine most of the 26 time series, while the largest hierarchy in the financials sector only includes 10 stocks out of a total of 78. 5.4. Resulting timing pattern
We now address timing patterns as introduced in Section 4 and focus on one relationship type, begins earlier , in order to discuss a visualization in form of a matrix. Table 4 shows such a visualization matrix for the begins earlier relationship and the stocks in the energy sector. Each row and column represents a time series, and the relationship between two time series is represented by the color of the corresponding matrix element. A white matrix element indicates that the time series of the row begins earlier than the time series of the column in more than 50% of the cases. Black matrix elements represent begins relationship. By comparing the number of white matrix elements in individual rows, it can be observed that some time series begin earlier than most other time series.

Example timing patterns for several sectors of the stock data set and different relationship types are shown in Table 5 . The support count and confidence values are provided in parentheses following each timing pattern. The table also includes tim-ing patterns that are determined using pattern conglomerates obtained from clustering all 460 stock market time series.
Such timing patterns are listed in the row labeled stock-ALL, and represent a relationship between two time series that be-long to different sectors. The sector abbreviation of the ticker symbols are provided in brackets. 5.5. Additional data sets
We have applied our approach to four additional data sets (Section 5.1) in order to highlight its applicability to different time series data sets, as well as to provide a more comprehensive performance analysis (Section 5.7).

Since our approach is designed for multiple time series, the random_walk data set, which only consists of a single time series, must be processed before the algorithm can be applied. We utilize the first 6500 values of the random_walk data set in order to create 26 time series each with 250 values. The resultant data set (called random), thereby, resembles the setup of the energy sector, which is also composed of 26 sequences with 250 values. We choose the same values ( w = 10 and h = 1.16) used for the time series of the energy sector in order to determine sliding-window alignments (Definition 4) and clusters among the 26 random time series of the constructed data set. Only three sliding-window alignments are found among the 26 random sequences. Two of these alignments have the minimum length of 10, and the third alignment is based on 12 value differences. In contrast, 1269 alignments are found among the sequences of the energy sector. The clustering of the three alignments results in three clusters as well as three hierarchies. Each hierarchy is merely composed of a single clus-ter and is based on a single alignment. Since none of these hierarchies combines three or more time series, no timing patterns are determined between pairs of the 26 random sequences.

The last four rows of the Table 5 provide example timing patterns for the additional data sets and different relationship types. Note that the support depends on the number of similarities among the sequences under consideration, which in turn is affected by the length of the time series. The sequences of the stock market data set only contain 250 prices and the time series of the buoy_sensor, spot_exrates, and wind data sets are composed of more than 2000 values (Section 5.1). The sup-port counts of timing patterns from different data sets have to be normalized before they can be compared. The normaliza-tion has to take the length of the time series into consideration, because more alignments (Definition 4), pattern conglomerates (Section 3.3), and timing patterns (Section 4) may be derived based on longer sequences. In addition, we take the lengths of alignments into account for normalizing the support count of timing patterns. The alignments between time series of one data set may be very long, so that only a few timing patterns can be derived and the alignments between time series of another data set could be rather short resulting in many pattern conglomerates and timing patterns. For each data set, we normalize the support count by multiplying the ratio of the average alignment length used in pattern conglomerates
L and the length of the time series | T a |: where we assume that | T a |=| T b |. The normalized support count measure n_suppc typically results in a number between zero and one that indicates the cumulative portion of a time series represented in timing patterns with a particular support count. For example, a normalized support count close to one means that the respective timing patterns represent nearly all elements of the time series. Correspondingly, only a small portion of the time series is represented by timing patterns with a normalized support count close to zero. Table 6 shows the average alignment length and the normalized support count for the begins earlier timing patterns in Table 5 . For most data sets, the average alignment length used in pattern conglomerates is close to the window size w of 10. The spot_exrates and wind data sets show longer average alignment lengths of 25.77 and 17.43, respectively. The normalized support count of the begins earlier timing patterns also varies for the different data sets.
Especially, the timing patterns of the energy sector, as well as the spot_exrates and wind data sets show a relatively high normalized support count, which indicates that these timing patterns represent extended portions of the corresponding time series. 5.6. Significance
In general, the probability of finding an alignment with a Euclidean distance smaller than the threshold depends on the time series; hence, taking differences between successive time points is expected to result in attributes that have an approx-imately normal distribution. Fig. 7 shows the distribution of attribute values for the energy sector time series discussed in the previous sections. Note that all individual attributes share the same general shape. This observation is important: had we used the data without taking differences, then the first and last values within each window would have a much broader dis-tribution than values in the middle of the window. Taking differences effectively removes this systematic dependence on position within a window. The figure also shows that the attributes are not perfectly represented by a normal distribution with standard deviation equal to one. This is not surprising since we base the normalization on only w attribute values. This results in much smaller tails than would be expected for a normal distribution. We nevertheless use the normal approxima-tion for estimating the significance of window matches, but it should be understood that the result is only an estimate.
The probability distribution of the Euclidean distance among w components of vectors x and y that are normally distrib-uted with l x = l y = 0 and r x = r y = 1 can be derived as follows
Coordinate transformation z =| x y | results in The integration over x represents convolution of Gaussians, which can be performed using a Fourier transform. The result is a
Gaussian with r  X 
Hence the distribution of distances is a normal distribution with r  X 
That means that  X  z 2 = degrees of freedom is w 2 since mean and variance were set as part of the normalization. For w = 10 and a distance thresh-old of h = 1.16 the p -value is p 1 = 1.5E 3 for each match between two windows to be the result of random chance. The p -value for not finding a match in any of N sequences is p =1 exp( p get p = 0.037 which is below the 5% significance level. That means that h = 1.16 can be considered a threshold, for which spu-rious matches are expected to be rare. In practice, we consider hierarchies that involve many windows and are far less likely to be encountered by random chance. 5.7. Performance
The performance of the clustering algorithm depends on (1) the number and length of time series under consideration, (2) the number of alignments between the sequences, and (3) the number of overlaps among the alignments. The data sets (Sec-stock-ALL), and (3) data sets that are expected to have many patterns (i.e., buoy_sensor, spot_exrates, and wind). The time series of different data sets show varying degrees of similarity between each other, which results in different numbers of alignments. Fig. 8 shows the number of alignments determined for each sector and data set in relation to the number of time series under consideration. In addition, the graph of the function sequences showed one alignment, we would expect the points to lie on this line. The time series of the energy sector and the sequences of three additional data sets (buoy_sensor, spot_exrates, and wind) show a particularly large number of align-ments in relation to the number of time series. Due to the measured quantity of the buoy_sensor, spot_exrates, and wind data sets, it is not surprising that the time series of these data sets have many similarities to each other. The time series of each data set are related to each other, and expected to be similar.

In bioinformatics, efficient algorithms have been devised for identifying alignments among genome sequences. These heuristic algorithms, e.g., BLAST [3] and FASTA [35], have limitations such that they do not guarantee to determine all or entire alignments. However, since these algorithms balance efficiency and sensitivity considerations, they are useful for identifying alignments among a massive number of sequences. An algorithm that utilizes similar heuristics for identifying alignments among time series could be a means for improving the performance of our approach. In order to take advantage of an existing algorithm that is designed for sequences of categorical values, the time series have to be discretized. Ap-proaches like SAX [29] and Persist [32] address time series discretization and can be used as a preliminary step. As a con-sequence of utilizing a heuristic algorithm for identifying alignments: (1) the obtained alignments do not necessarily satisfy Definition 3, (2) a different DAG as well as pattern conglomerates could be determined, and (3) a different set of tim-ing patterns are possibly identified. Nevertheless, timing patterns with a high support count (Definition 7) and confidence (Definition 8) are likely to be determined using either alignment algorithm. An alternate approach towards decreasing the running time for determining the alignments between time series is the modification of the value combination w and h . For a discussion addressing the parameter choices see Section 5.1.

Two limiting cases can be considered to determine the performance of our algorithm. If the alignments among the se-quences do not overlap with each other, then our clustering algorithm has a linear time complexity in relation to the number of alignments. However, in the worst case scenario, all determined alignments overlap with each other. Then, the clustering algorithm may determine fragments of all previously considered alignments and adds them to the list of unprocessed align-ments. This results in a quadratic worst case time complexity in relation to the number of alignments.
Empirical results are depicted in Fig. 9 . It shows the execution times for clustering the alignments of each sector and data set. The worst performance is obtained by clustering the spot_exrates and wind data sets, which also show the two largest numbers of alignments in Fig. 8 . On average, each time series of the wind data set participates in 952 alignments, and a se-quence of the spot_exrates data set shows an average of 282 similarities. In contrast, all other data sets as well as the indi-vidual sectors only have an average number of alignments per sequence that is below 85 and the majority is even below 10.
Hence, it is the large number of overlapping alignments among few sequences that causes the unusually high execution time for these two data sets.
 In Fig. 10 , the overall performance of our approach is shown in relation to the number of sequences under consideration.
Note the strong similarity between the number of alignments of a data set (Fig. 8 ) and the overall performance of our ap-proach ( Fig. 10 ). The performance of our clustering algorithm is mostly affected by the number of alignments determined among the sequences. The number of alignments, in turn, depends on the similarities among the time series data. Strongly similar data, e.g., wind and spot_exrates data sets, show a much larger number of alignments and running time than less similar data, e.g., random data set. 6. Conclusions
We introduce an algorithm for representing the sequence X  X ubsequence relationships among patterns based on subse-quence similarities. The relationships between similar, contiguous subsequences are based on their overlap and result in a directed acyclic graph (DAG). Our DAG representation is abstracted to pattern conglomerates, which in turn are evaluated by examining the differences between the beginning and ending positions of similar subsequences. We apply our approach to stock market time series of the S&amp;P 500 index as well as to four additional time series data sets, and determine timing patterns that capture relations between time series intervals. The extension of pattern discovery to include temporal rela-tionships among patterns, in the form of pattern conglomerates, opens up the field of time series pattern mining to further meta-analyses and mining algorithms.
 Acknowledgement This material is based upon work supported by the National Science Foundation under Grant No. IDM-0415190.

References
