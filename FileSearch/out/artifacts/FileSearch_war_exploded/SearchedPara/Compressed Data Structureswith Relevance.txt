 We describe recent breakthroughs in the field of compressed data structures, in which the data structure is stored in a compressed representation that still allows fast answers to queries. We focus in particular on compressed data struc-tures to support the important application of pattern match-ing on massive document collections. Given an arbitrary query pattern in textual form, the job of the data struc-ture is to report all the locations where the pattern appears. Another variant is to report all the documents that contain at least one instance of the pattern. We are particularly interested in reporting only the most relevant documents, using a variety of notions of relevance. We discuss recently developed techniques that support fast search in these con-texts as well as under additional positional and temporal constraints.
 E.4 [ Data ]: Coding and Information Theory X  data com-paction and compression ; F.2.2 [ Analysis of Algorithms and Problem Complexity ]: Nonnumerical Algorithms and Problems X  pattern matching ; H.3.1 [ Information Stor-age and Retrieval ]: Content Analysis and Indexing X  in-dexing methods ; H.3.2 [ Information Storage and Re-trieval ]: Information Storage X  file organization ; H.3.3 [ In-formation Storage and Retrieval ]: Information Search and Retrieval X  search process.
 Algorithms, Design, Performance, Theory.
 Compressed data structure, compression, data compression, entropy, external memory, index, pattern matching, search. The field of compressed data structures began over 20 years ago [9] with the goal of achieving fast query time while using a compressed representation. The challenge is to construct a compressed representation of the input data  X  substantially rather than all the matching locations within those docu-ments. It is even more meaningful to report only the most relevant documents that contain the query pattern. We can define relevance in various ways  X  such as by the frequency of the pattern in the document, or perhaps by how close the pattern is to other instances, or as in Google by the static notion of the document X  X  PageRank.

The document indexing problem, for a query pattern and query parameter k , is to find the top-k most relevant doc-uments containing the pattern; in the absolute version, we find those documents that have a relevance value of at least k . We discuss recent advances [11, 7, 13, 17] in the standard RAM model as well as in the external memory model [19], when the data collection and the index are too massive to fit into the internal memory of a computer and must instead be stored externally, such as on disk. We give algorithmic paradigms in these models for efficient indexing, including dealing with approximations, and illustrate some biological applications.
 In summary, inverted indexes have well-known strengths: They are relatively easy to implement using small amounts of memory space. They can be readily adapted for efficient implementation in external memory. They allow dynamic updates and distributed operations. And they are easily tuned for top-k applications. However, they are inherently word-based and cannot readily handle searches for arbitrary patterns. Nor are they self-indexing. An ongoing challenge in the field is to simultaneously achieve the many advan-tages inverted indexes offer as well as the important fea-tures of self-indexing and the ability to search for general patterns. In this presentation, we discuss several exciting developments toward answering that challenge.

For more details, the reader is referred to surveys on in-dexing for massive string data [12, 8] as well as to recent papers with several co-authors, which can be found on the author X  X  web page [18]. Support was provided in part by National Science Founda-tion grants CCF X 0621457 and CCF X 1017623. Thanks go to Wing-Kai Hon, Rahul Shah, and Cheng Sheng for helpful comments. [1] P. Ferragina and G. Manzini. Opportunistic data [2] P. Ferragina and G. Manzini. Indexing compressed [3] L. Foschini, R. Grossi, A. Gupta, and J. S. Vitter. [4] R. Grossi, A. Gupta, and J. S. Vitter. High-order [5] R. Grossi and J. S. Vitter. Compressed suffix arrays
