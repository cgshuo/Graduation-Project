 An average white collar worker deals with enormous amount of digital information on daily basis. Recently, there has been a growing interest to support their work. However, in order to be really supportive there is a need to know the current activity of the user at all times. In this paper we present a new technique that takes advantage of temporal aspects of user activity behavior to infer when it is most likely that an activity switch is occurring. We then describe  X  X ctivity Switch Detector X  an interactive switch notification system embodying these ideas, and an extensive user study by ten participants to test the validity of the approach and present its results. H.1.2 [ User/Machine Systems ]: Human factors; H.5.2 [ Information Interfaces and Presentation ]: User Interfaces X  Graphical user interfaces Algorithms, Experimentation, Human Factors. Activity switching, modeling and prediction of user behavior, user interaction. In today X  X  world, knowledge work plays an ever more important role in organizations of all sorts. An average white collar worker deals with enormous amount of digital information on daily basis. Previously efforts have been made to support their work by employing different indexing and search tools that make information more accessible. However, recently it has been realized that to be really supportive all these systems have to take user X  X  context into account. Awareness of the user X  X  current context, i.e., the  X  X ctivity X  that a user resides in, allows various ways of support, like for example activity management and recovery, ranked search results, providing workflow guidance and suggesting experts. In this work, our goal is to automatically identify and distinguish users X  activities from their everyday desktop interactions. The work is primarily based on the assumption that; user activities can be characterized by actions that are executed with in a close temporal proximity to each other. Following are the definitions of the terms used in this paper: Action (Ac): An action is an interaction that a user performs with corresponds to a desktop event, such as opening a file, bringing a focus to an application window, clicking a hyperlink, sending an e mail; associated with a time stamp t . Interaction History (H): Let an individual X  X  desktop interaction history H be represented as a sequence of actions he/she has performed with corresponding transition time t i (1 X  i  X  n ) and is defined as H = { Ac 1 , Ac 2 , Ac 3 ,..., Ac n }, where t time interval between two actions. Activity (At): In an interaction history H , Activity At is characterized by a set of consecutive actions Ac that have been performed by a user in a close temporal proximity, and is defined as At = { Ac 1 , Ac 2 ,..., Ac m } where m  X  n . Recently, systems such as TaskTracer [1] and SWISH [2] have used sophisticated methods to automatically identify current activities and adapt to user behavior. TaskTracer uses machine learning to detect undeclared activity switches and predict the correct activity switches. SWISH system recognizes users X  activities by analyzing the windows switching history and tf idf extracted terms from windows titles. However, these works have not utilized the time distances between users X  actions and have used predefined time windows of fixed lengths. Whereas we believe that duration information is crucial in identifying the activity switches. Our work is closely related to [3] that draw on the frequency of user interaction with desktop windows to infer the occurrence of activity switch. However for detecting the switch they have used a simple heuristic of using the moving average between the last k user interactions. Moreover, again they have enforced a fixed five minutes interval before notifying the user that an activity switch might have occurred. In our work, we have studied average time distance between actions on a daily and weekly basis. Moreover, application specific focus time behavior is also analyzed and incorporated into a real time activity switch detection system. The framework of switch detector consists of three steps. First we log system wide user desktop interactions. Next; filtered user actions are fed to the time based switch detection algorithm. In the last step the detected activity switches are presented to the user through a real time user interface for analysis and evaluation purposes. Below we discuss each step in detail. While designing the logging mechanism, we had three considerations in mind: First, How to gather user interaction data in a most unobtrusive way? For this, we opted for an implicit feedback approach for recording the user actions. An adaptation of a logging utility developed by [4] is used to automatically log user actions without interrupting their workflow and no explicit input is required at any stage. Second, What data should be collected for best possible user activity analysis? Keeping in view the diversity of knowledge work environment, an attempt has been made to acquire cross application data from file system, web browsers, office tools and instant messengers (see Figure 1). Third, How to preserve user X  X  privacy while logging interaction data? Since the logged data is very personal and represents user X  X  interaction history in detail, therefore it also raises many privacy concerns. An effort has been made to alleviate those concerns by keeping the log files at the user specified location on his/her computer and it is up to them to release the data to anyone in any form. Moreover the log is kept in a simple human readable plain text file format, so that the user can easily edit or delete any private entries from it. Our system begins by filtering the user activity log, any actions that are not explicitly performed by the user e.g. system calls and repeated consecutive actions with any single resource are filtered out. The timestamps are then used to calculate average time distance between user actions for last one week. The system also calculates the application specific focus time averages for the same period of time; e.g. Figure 2 illustrates a scenario where we calculate the focus time of the actions that were performed using MS Word. Algorithm Detect_Switch ( log, week_avg, app_avg ) 1: Current_Activity =  X  2: last action Ac 3: add Ac to Current_Activity 4: for each action A i in log 5: current action Ac = A i 6: if app_avg is not null 7: T d = app_avg 8: else 9: T d = week_avg 10: end if 11: if interval (Ac, A i ) &lt; T d 12: add Ac to Current_Activity 13: else 14: add Ac to New_Activity 15: Current_Activity is null 16: Ac = A i 17: add Ac to Current_Activity 18: end if 19: end for Figure 3. Switch detection algorithm The algorithm in Figure 3 takes as input the filtered interaction log  X  log  X , average time distance between last one week X  X  actions  X  week_avg X  and application specific average focus time for different applications  X  app_avg  X . In case the focus time of the currently used application type is not known then weekly average time distance is used (lines 6 to 10). Any two consecutive actions whose time distance is less than computed average time distance  X  X  d  X  are grouped together in one activity (lines 11 and 12). On the other hand, whenever two actions have a time distance more than the threshold a new activity is created (lines 14 to 17). The purpose of the interface is to evaluate the accuracy of different activity switch detection methods. The system as illustrated in Figure 4, presents the real time user activities at the bottom of the screen (just above the Windows OS task bar) and notifies the identified activity switches to the user. The user can simply respond by clicking once on the separator bar to reject the detected switch (bar turns red) or clicking again to revert back to accept (bar turns green). The system registers and remembers the user X  X  decision. Action Icons Activity Separator b) User views the activity details and rejects the identified switch Figure 4. Interaction between Switch Detector and the user Also user can scroll through the activities before making a decision. One can either hover the mouse over a single action to view its information or double click the activity separator (green or red bar) to view the details of whole activity (see Figure 4b). Activity start/end times and all the actions of the activity are displayed. Moreover, to help the user better analyze the activities we allocate each activity to a category by using some static rules e.g. resources accessed with MS Word and Notepad are allocated to editing category. Also activity keywords are extracted from its action titles by using keyphrase extraction algorithm (Kea) [5]. We also implemented a more interactive user interface with a sliding activity separator; through which user can correct the detected activity switch by sliding it between different actions. Figure 5 illustrates a scenario where the user felt that identified activity switch is not precise and corrects it by sliding the separator bar between a MS Word and MS PowerPoint resource. All changes are reflected in background files and remembered by the currently implemented system. However, if the user feels that automatically detected switch is correct then no action is required. 
Word 09:12 Notepad 09:14 Word 09:17 Excel 09:20 2 minutes 3 minutes User corrects the switch by sliding it by two resources to the right Figure 5. User providing feedback by correcting the switch Since by correcting the switch user is providing us with ground truth, therefore system can learn from this rich contextual information. Though in our current implementation we have not used any learners for switch prediction, however we have identified and recorded the following activity specific features [6] that might indicate that activity switch is occurring: (a) Window captions and associated application types of resources accessed in an activity, to see if user follows a certain pattern for carrying out activities. (b) No of resources closed in the last s seconds, if a user is closing windows it is likely to be an end of activity. (c) No of actively accessed resources in the last s seconds, if the user is actively accessing open resources it is unlikely to be an activity switch. (d) Time duration of an activity and no of actions performed in that time span. (e) Time distance between the last and first action of any two consecutive activities. The goal of the experiments was to study the temporal aspects of participant X  X  desktop interaction behavior. Specifically, for the purpose of activity switch detection, we studied the suitability of using the daily and weekly average time distances between the users X  actions. Also we analyzed the significance of using average focus time of specific application types for deciding when the switch is probably occurring. We collected desktop activity data from ten participants; the participants consisted of Masters and PhD students in a computer science laboratory. Data was collected for an average of 55 active working days per participant, the days when the user performed some desktop actions with the activity logger running in the background. A total of 5,19,449 actions were recorded. Table 1 illustrates the fields of the activity log. A simple comparison (see Table 2) among the daily and weekly average time distance between actions of different participants shows that for each participant there is a significant amount of deviation between his/her daily behavior. However in comparison, week wise result exhibits a much more consistent behavior with negligible deviation for most of the participants. Also, Figure 6 shows a clear pattern in activity behavior of three different users over a period of ten weeks. These results justify our choice of using the last week X  X  average time distance to determine the current activity switches. 
Figure 6. Week wise average time distance between actions We also analyzed the temporal aspects of application specific usage behavior of individual users e.g. typically how much more time (focus time) user spends on editing tools than web browsers? The results in Table 3 depict that there is a significant variation in time spent by different participants on different applications. For instance, on average Participant 3 when using the editing tools e.g. MS Word spends 57% more time (i.e. focus time for that application) than when using the web browsers. On the other hand, on average Participant 4 spends 61% more time on web browsing than editing. Figure 7 shows average focus times of different applications for three participants. Overall, it can be observed that MS Word i.e. editing tools stay in focus for longer time spans than other categories and there are more chances that users when working with editing tools will stay focused for longer time span before switching the activity. This observation motivated us to use application specific behavior knowledge for deciding an activity switch, however in case of a new application type where prior user interaction experience is not available then we opt for week wise average time distance. We evaluated the switch detection system by deploying it with five users from the original pool of ten participants. All participants were proficient in computer use, two of them were using Windows 7 and other three were using Windows Vista as their main operating system. Each participant interacted with the interface for two hours and during this time they were not manually shadowed and were encouraged to carry out their normal work activity. By the end of the study, for all the users our proposed method detected 92 switches with 54 (58.69%) being accepted. Whereas the moving average method [3] detected 165 switches with 73 (44.24%) being accepted and the commonly used 5 minutes fix time window method detected 126 switches with only 43 (34.12%) being accepted. Table 4 shows the individual results for five participants. It can be seen that acceptance rate varies among different users with Participant 1 accepting only 38% of the switches across all methods whereas Participant 4 accepted 56% switches. This observed variation can be explained by the differences in work patterns. However, despite of the variation in the accuracy, this study has demonstrated the feasibility of using temporal aspects of user interaction behavior for detecting activity switches. This paper introduced a new technique that takes the advantage of temporal aspects of user activity behavior to infer when it is most likely that an activity switch is occurring. Implementation of the  X  X ctivity Switch Detector X  an interactive switch notification system allowed us to present the notifications in an effective way. Our findings show that temporal aspects of user activity, specifically the application specific behavior is very effective in identifying the user activity switches. Additionally, the computational cost of calculating simple averages is much lower than traditional machine learning based techniques. This research was funded by the Natural Science Foundation of China (No. 60703040), the Zhejiang Provincial Natural Science Foundation of China (No. Y107178), Science and Technology Department of Zhejiang Province (No.2007C13019), and the Ministry of Industry and Information Technology of China (No.2010ZX01042 002 003 001). [1] J. Shen, L. Li, and T. G. Dietterich. Real time detection of [2] N. Oliver, G. Smith, C. Thakkar, and A. C. Surendran. [3] R. Nair, S. Voida, and E. Mynatt. Frequency based detection [4] S. Chernov, G. Demartini, E. Herder, M. Kopycki, and W. [5] I. H. Witten, P. Gordon, F. Eibe, G. Carl, and G. C. Nevill [6] J. Shen , J. Irvine , X. Bao , M. Goodman , S. Kolibaba , A. Editing Tools e.g. MS Word 
Document Readers e.g. Adobe Reader Web Browser e.g. Internet Explorer PC Folder Browsing 
