 1. Introduction
Traditional hierarchical control architectures based on the computer integrated manufacturing (CIM) concept are known to provide near optimal solutions when some hard assumptions (e.g., long-term availability and reliability of the supply and the demand, optimal behavior and high reliability of production systems, low product diversity and observability and controll-ability of all the possible internal variables) are met. However, nowadays, these assumptions can rarely be met. Since the 1990s, other kinds of control architectures have also been considered ( Duffie and Prabhu, 1996 ). These architectures were adopted due to the emerging need for local reactivity. The main argument was that, in hierarchical control, the time spent informing the correct controller within the hierarchy (bottom X  X p), who then made and applied the decision (top X  X own), generated lags and instabilities. The idea was to permit the decisional entities to work together in order to react quickly, instead of wasting time requesting control decisions from upper decisional levels. These new architectures introduced  X  X  X eterarchical X  X  relationships among decisional enti-ties, with other interaction processes than coordination, essen-Heterarchical control is increasingly being studied and several high-quality surveys have been made in this domain (e.g.,
Tharumarajah, 2001; Bousbia and Trentesaux, 2002; Shen et al., 2006; Babiceanu and Chen, 2006; Leit ~ ao, 2009 ). In our opinion, the growing domain of heterarchical control is driven by the current technological offerings and the evolution of the industrial requirements (see Ma  X  r X   X  k and Lazansky, 2007; Morel et al., 2007;
Haller et al., 2005 ). Indeed, these requirements have evolved from the usual traditional performance criteria, described in terms of static optimality or near-optimality, towards new performance criteria, described in terms of reactivity, adaptability and robust-ness. A growing number of industrialists now want control systems that provide satisfactory, adaptable and robust solutions rather than optimal solutions that require that several hard assumptions be met. Of course, this is not true for all industries.
However, there is one common denominator that holds true for those that are concerned with high tech and mass customization, including the automotive, computer, phone and communication systems industries. For example, a recent study highlighted that, for European factory equipment suppliers, the priority among ten major concerns was the need for  X  X  X ntelligent products X  X , including self-optimizing systems ( Schreiber, 2007 cited in Sauer, 2008 ).
However, real implementations of heterarchical control sys-tems are often incomplete, with implementations of complete systems being very rare (see Bussmann and Schild, 2001 ). Ma  X  r X   X  k and Lazansky (2007) pointed out that the development of industrial heterarchical control systems is slowed by the lack of real applications.

This paper aims to highlight the potential benefits of heterarchical control of production systems, especially in terms of agility, where conclusions are drawn from a real application and real experiments. Moreover, our control system naturally considers some constraints that are hard to manage using hierarchical approaches, such as limited capacity of resources and storage areas, dynamic and non-negligible travel times, dynamic integration of customized products and resource unavailability. For integration purposes, our control architecture is also designed to be consistent with the current research activities of major enterprise resource planning (ERP) system providers, such as SAP ( Haller et al., 2005 ).
 heterarchy are formalized and the proposed control architecture is described. In Section 3, the complete control model is presented. Section 4 details the real implementation of our approach, and in Section 5, several scenarios that highlight the agility of our control system are presented. Finally, the last section offers our conclusions and some prospects for future research. 2. Semi-heterarchical control 2.1. Short description of the theoretical context in non-centralized control accepted as the whole loop that allows a process or a system to be controlled, from sensors to actuators. In this context, Baker (1998) proposed a block-diagram model of manufacturing control (Fig. 1).

Fig. 2 summarizes the different ways of distributing control decisions, from fully hierarchical control systems to semi-heterarchical control systems to fully heterarchical control systems. These distribution decisions are based on fundamental design choices: using hierarchical relationships or using heterarchical relationships or using a combination of the two.
Given the different ways of distributing control decisions, it is possible to construct an architecture typology that is inspired by designing a control architecture led to Class I control architectures, and the desire to use heterarchical relationships (cooperation, architectures, being semi-heterarchical (or semi-hierarchical), fall somewhere in the middle, integrating both hierarchical and heterarchical relationships. A typical Class II control architecture is a class III control system with a supervisory level.
According to Bousbia and Trentesaux (2002) , control architec-tures supporting classes II and III mainly use three kinds of modeling approaches: bionic and bio-inspired, as proposed by Okino (1993) , Ueda et al. (2001) and Sallez et al. (2009) ;
Factory Desire to design heterarchical relationships Class I Fully hierarchical control system Class 0
Distribution of decisional multi-agent, as proposed by Maione and Naso (2003) and
Ma  X  r X   X  k et al. (2005) and holonic, as proposed by Van Brussel et al. (1998) and Leit ~ ao and Restivo (2008) .

For more information about these modeling approaches and the formalization of the different control classes, interested readers can refer to the special issue of Engineering Applications of Artificial Intelligence dedicated to  X  X  X istributed control of production systems X  X  ( Trentesaux, 2009 ). 2.2. Proposed control architecture
Since the end of the 1990s, studies about class III control systems based on multi-agent systems have been conducted in our laboratory. In the beginning, only the production resources were considered as decisional entities (see Trentesaux et al., 1998 ). Several simulations were performed to illustrate the potential benefits of heterarchy in the context of dynamic task allocation compared to static optimization approaches ( Trentesaux et al., 2000 ).

More recently, the products were enriched with decisional be passive entities: they never communicate, decide or act during production process. However, current technology (e.g., RFID, smart cards, embedded systems, wifi and infrared communica-tion) has recently led to some new procedures involving  X  X  X ctive X  X  decisional entities, in which products are able to act based on the real state of the production system. This new ability can be embedded in the product itself ( McFarlane et al., 2002; Zbib et al., 2008; Meyer et al., 2009 ).

The current technological offerings led us to develop heter-archical control models and to apply them in an existing production cell. Our first incomplete attempts were described by Sallez et al. (2009) .
 In this paper, a multi-agent modeling approach is still used. Resources and products are assumed to be the decisional entities composing the control system. Called resource agents (RA), and product agents (PA), these decisional entities are able to communicate and to act on the environment. A comparison with a holonic modeling approach is under consideration, but the relevant models have not yet been completed. Adam et al. (2009) gives a presentation of our first studies on holonic modeling.
The proposed control architecture was designed to determine in real time the ordered list of each service that a RA has to deliver, taking into account both allocation and routing issues.
Thus, two important processes must be controlled: the dynamic allocation process (DAP) to tell a PA where to go and the dynamic routing process (DRP) to tell a PA how to go where the first process has decided it will go. Allocation is thus controlled prior to routing. Consequently, the control architecture proposed, shown in Fig. 3, is for a class II control system: allocation (level 2) is controlled prior to routing (level 3) and is subject to the ERP constraints (level 1).

Related to the manufacturing order, the production constraints express what production activity must be done within a certain time window, without however explicitly stating which resource should be used and when it should be used (which is done at the
DAP level). Nonetheless, the global architecture is not fully hierarchical since each of the two control systems (DAP and
DRP) is fully heterarchical to allow each of them to be as reactive and agile as possible. Then, there are no hierarchical relationships in any of the individual control subsystems (decisional entities) in levels 2 and 3. More, data management is not centralized nor are there centralized processing capabilities.

Allocation and routing control processes are described in detail in the following section. To design these processes, the topology of the transportation system is assumed be a strongly connected, directed graph. In this graph, nodes can be both resources and disjunction points, and arcs are the parts of the system that require no routing decisions since the product can only move in one direction towards the next node. Resources are also assumed flexible, meaning that the same type of operation can be executed on several resources, with the possibility of different processing times. 3. Allocation and routing control processes
After a first section describing their articulation, the allocation and routing processes are explained one after another.
Real optimized transportation times for routed products 3.1. Hierarchical articulation between the allocation and routing processes resources located at the resource nodes (Fig. 4a). The PA move from node to node on the transportation system until they reach their destination nodes where the desired service(s) can be obtained. The PA use data stored on each node to update their embedded FMS routing map and to discover the current state of the resources. (1) Once a service list has been downloaded into a PA (in level 1), (2) At this point, the routing process (DRP), which takes place on (3) When it arrives, the PA waits to obtain the requested service
As illustrated in Fig. 4a, the PA repeats these three steps until the service list is empty. Fig. 4b shows the associated interactions. Each time a target resource fails (dotted arrows), the
PA restarts the sequence at the allocation process for the current service. 3.2. Description of the dynamic allocation process The allocation process, shown in Fig. 4b, is based on Contract
Net ( Smith, 1980 ). The steps of the allocation process are described below: (1) The interactions begin with a call for a proposal ( X  X  X fPp X  X  (2) The resources send to the PA their  X  X  X roposal (1) X  X  messages, (3) The PA decides which resource will be used, taking into (Allocation -Resource Reservation) (Failure of the Allocated Resource)
Use of the allocated Resource  X  nP (4) During the routing process, the PA can intercept an  X  X  X llocated 3.3. Description of the dynamic routing process
Our routing process is innovative because the PAs themselves choose their path dynamically and adapt naturally to perturba-tions. Like the allocation process, the routing process is fully heterarchical. At this level, each PA chooses its path via an embedded routing map (i.e., a topological graph of the FMS cell, with updated travel times on each arc). Each divergent node, where routing decisions must be made, uses a routing table containing the updated travel time values on each arc of the graph system.

Fig. 5 illustrates the interactions between a PA and each divergent node X  X  controller.

When a PA arrives at a divergent node, it dialogues with the divergent node controller: (1) The PA transmits the time it spent to travel from the previous (2) The divergent node controller broadcasts this time to the (3) Each node controller updates the arc values in its own routing (4) The different arc values in the routing table are transferred (5) The PA chooses the best neighbor by applying an embedded (6) The PA asks the node controller for a route towards the chosen (7) The node controller manages the service transfer according to
The following section describes the experimental context in which our real implementation was carried out. 4. Experimental context
The implementation was carried out on a flexible assembly cell at the Valenciennes AIP-Primeca pole. This cell and implementa-tion details, respectively, are provided in the following two subsections. A third subsection describes the mixed-integer linear approach used to generate the first lower bounds, which are compared to our experimental results. This approach is only used for purposes of comparison and does not play a role in the allocation and routing processes described previously. 4.1. FMS description 4.1.1. Description of the resources and the transportation system
The cell is composed of seven Wi workstations placed around a flexible transportation system (Figs. 6 and 7):
Workstation W1 loads the base plates onto the PA, performs the visual control and unloads the product.

Workstations W2, W3 and W4 use Kuka robots to automati-cally assemble the components. Each robot is able to assemble three types of components. Each component can be picked from two different workstations. This redundancy introduces flexibility into the system, which is particularly useful in cases of robot malfunctions (Fig. 8).

Workstation W6 is an automated control station, visually verifying finished products.

Workstation W5 and W7 were not used for this implementa-tion.

The flexible transportation system is based on Montrac technology ( Montech Technology, 2010 ). This system is a mono-rail transport system using self-propelled shuttles to transport materials on tracks. According to our previous assumptions introduced at the end of Section 2, the cell can be described by
Routing node a graph with the following nodes: 4.1.2. Product description of five components ( X  X  X xis_comp X  X ,  X  X  X _comp X  X ,  X  X  X _comp X  X ,  X  X  X _comp X  X  and  X  X  X crew_comp X  X ). For each product, the required components have to be assembled on a plate (Fig. 9). Each configuration has to be assembled according to an imposed mounting sequence (Table 1).

Depending on the situation (e.g., component inventory levels), the production cycle times range between 17 and 20 s to attach a component to the plate. Visual inspection and loading/unloading all take 17 s. 4.2. Implementation 4.2.1. PA and nodes instrumentation
Two types of equipment were used to implement our proposed approach:
PA instrumentation : As Fig. 10 illustrates, the passive product is transformed into a PA by adding an embedded decision module, which is based on an eeePC (with IrDA). Obviously, this instrumentation is only a prototype and constitutes the first step towards an integrated industrial system. For our experiments, three shuttles were used.

Node instrumentation : Each resource or divergent node is equipped with a Wago 750 X 841 controller ( Wago, 2010 ) and two data communication systems: Ethernet for node-to-node interaction and IrDA (infrared) for node-to-PA communication (esb-101 Clarinet system ( Clarinet System, 2010 )). IrDA (among eeePC and esb-101) technology was chosen because of its short range, which enables geographic node localization, n n and its light-based physical layer, which is naturally robust to electromagnetic noise. Fig. 11 shows the distribution of different controllers X  control zones in the cell. (Interested readers can consult Berger et al. (2010) for more details.)
The interactions between a PA and node controllers are detailed in the following section. 4.2.2. Product agent X  X ode controllers interactions
Fig. 12 illustrates the interactions between a product agent and the node controllers during the dynamic routing process introduced in Section 3.3. When the PA arrives at a routing node, it dialogues with the node controller by means of an IrDA system, and a series of steps occur. See Section 3.3 for a description of these steps. The node controller has a key role: it oversees the transfer gate, helping to avoid collisions, and also updates its own routing table with the travel times measured on each arc by each PA.

The next section describes the mixed-integer linear approach used to produce the results for the comparison with our experimental results. 4.3. FMS mixed-integer linear program
Our system has m resources/machines, n jobs and four types of jobs ( X  X  X  X  X ,  X  X  X  X  X ,  X  X  X  X  X  and  X  X  X  X  X ). Each job is defined by its type ( Type_Job j ). Each type of job is composed of a sequence of operations. The execution of each operation requires one machine out of the set of m machines. For this problem, the storage capacities are assumed unlimited, the transport delays are set to zero, and the transportation system capacity is unlimited (i.e., an infinite number of shuttles).

In the literature, our problem is identified as a flexible job-shop problem (FJSP). The flexible job-shop problem is an important extension and generalization of the classic job-shop scheduling problem (JSP), which allows an operation to be processed by any machine from a given set, thus creating additional complexity ( Dugardin et al., 2007 ). The FSJP is considered to be a strongly NP-hard, combinatorial problem ( Fattahi et al., 2007 ).

Our formulation of the problem is adapted from the model presented in Penz (1994) , a simplification of integer linear programming model proposed by Wagner (1959) . The problem is formulated as follows: Data and parameters M : number of machines.

N : number of jobs. t : number of types of jobs.

Hj t : number of operations of type t of jobs. pi : processing time of machine i .
 Type_Job j : type of job j .

L : a large number ( N ); Variables
C max : Makespan. t : Start time of operation h of job j .

X Mixed-integer linear program Min  X  C max  X  X  1  X 
C Robot 1 Robot 2 Robot 3 RESOURCES
The objective is to minimize th e makespan (1). Constraint (2) determines the makespan. Constraint (3) assures that each opera-tion can be performed only on one machine. Constraint (4) forces each job to follow a specified sequence of operations. Constraints (5) X (7) are disjunctive constraints for operations performed on the same machines. Results for X i,j,h yield an assignment for all operations on all machines and t heir operational sequences.
In the near future, this model will be used to define more accurate lower bounds, which will be computed using a genetic algorithm or tabu search that takes into account the transporta-tion times and a limited number of shuttles. 5. Experimental results
In this section, experimental results are provided for global performance (completed production time: C max ) and dynamic behavior. 5.1. Global performance (C max )
Three production campaigns were launched, and the mixed-integer linear programming model introduced above was used to generate the lower bounds. These campaigns were planned at the
ERP level 1 (Fig. 3). For the first campaign, normal operating times were used, and each kind of product was requested once (i.e., one product  X  X  X  X  X , one product  X  X  X  X  X , one product  X  X  X  X  X  and one product  X  X  X  X  X ). For the second campaign, each kind of product was again requested once, but all the operating times were all multiplied by 5 to reduce the influence of transportation time. For the last campaign, normal operating times were again used, but 12 products were requested: three of each type.

Fig. 14 provides a resource Gantt chart illustrating the second campaign (colored rectangles represent working times). Since three shuttles were available for the experiments, there are a maximum of three PAs in the system at each moment. This implies that the cell was not really overloaded, as shown in
Fig. 13.  X L  X  product w4 w4 w7 w7 w1 w1 w13 w13 w16 w16 Transfer Gate IrDA Clarinet (1) (4) (6) (7) mixed integer program (MIP) problem. Table 2 summarizes all the obtained C max values and provides a comparison of the MIP results for the first two campaigns. For the third campaign, the search space was too large to explore optimally.
 mathematically (e.g., no transport time, infinite storage capacity and infinite capacity of the transportation system), the compar-ison of the MIP results does not really make sense. However, the
MIP results obtained using C max can be considered as a lower bound. When operating times were multiplied by 5, the comparison with the lower bound proposed by the MIP was more accurate since this multiplication reduces the influence of transportation time. measured one is only multiplied by 2.1). 5.2. Dynamic behavior capabilities of our approach with respect to self-adaptation to perturbations (e.g., curative maintenance of resources, shuttle slowdowns or traffic jams, urgent and/or cancelled orders, re-manufacturing of products after failed quality control).
In this study, the system X  X  ability to manage routing perturba-tions was tested first. 5.2.1. Routing perturbations
Three PAs were successively launched from source node n 25 towards destination node n 22 . As explained in Section 3.3, each PA uses Dijkstra X  X  algorithm to elaborate in real time the best path (i.e., the path with the shortest travel time) using the arc values on the embedded routing map.

The first PA was launched and logically took the shortest path [ n 25  X  n 26  X  n 27  X  n 20 -n 21  X  n 22 ] for a travel time of 75 s.
For the second PA, a perturbation was introduced (e.g., bottleneck, slow down) that affected the fluidity of the arc [ n 27  X  n 20 ] at time t  X  110 s. The PA slowed down, with a resulting time of 200 s. When the PA arrived at the divergent node n 21 , the PA travel time was transmitted to the node controller (Wago #16), which broadcast this time to the other node controllers so that each node controller could update its local routing table. Time (sec) Time (sec) 300 400 500
When the third PA was launched from node n 25 , it updated its routing map with the value provided in the routing table of the node controller (Wago #1). Exploiting this new graph value, the Dijkstra algorithm computed an alternative path The PA traveled this alternative path in 180 s.

As a result, after the perturbation, only the first affected PA was delayed; the other PAs took the perturbation on arc [ n into account and chose the alternative path. The PAs took the path [ n informed the nodes controllers that the perturbation had been resolved.

Figs. 14 X 16 provide, respectively, the product Gantt chart, the different time evolutions and the paths used during the three successive trials. This scenario was reproduced several times at different production dates. 5.2.2. Resources breakdown
To test the system X  X  ability to manage resources perturbations (e.g., breakdown or maintenance operations), campaign #3 was run twice: once without any breakdown, once with two break-downs. Workstation 2 on node n 6 (resource Kuka 1) became unavailable at time 418 s. and workstation 6 (visual inspection) at time 1746 s. Fig. 17 illustrates the dynamic trajectories followed by two PAs, given that for PA #2, resource Kuka 1, which should have been selected by PA #2, was unavailable. PA #2 found another less efficient but still satisfactory target resource, Kuka 2.
 Figs. 18 and 19 give the two Gantt charts obtained a posteriori .
In this experiment, the value of the C max did not increase, meaning that the cell is in fact not really overloaded. 6. Conclusion
In this paper, a semi-heterarchical approach to the control of the dynamic allocation and routing processes in FMS is presented.
Several features of our control system have been highlighted, especially concerning its ability to deal with perturbations.
Contrary to traditional static optimization models, our modeling approach supports realistic assumptions, such as limited storage capacity, limited reliability of the transportation system and
Time n to n (sec) n n n variable transportation times. Our model should lead to more realistic agile control systems.
 system was studied, our future research could examine the integration of a heterarchical control system and its potential benefits, from an ERP point of view. Our mixed-integer linear model could also be improved to support more realistic assump-tions (e.g., non-negligible transportation times) to allow more accurate comparisons of the lower bounds with our experimental results using, for example, genetic algorithms or tabu search. Acknowledgments Campus on Safety and Intermodality in Transportation, the Nord/ Pas-de-Calais Region, the European Community, the Regional Delegation for Research and Technology, the French Ministry of Higher Education and Research, and the National Center for
Scientific Research. The authors gratefully acknowledge the support of these institutions.
 References Time (sec)
Time (sec)
