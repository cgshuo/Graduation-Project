 1. Introduction
Community-wide evaluations such as TREC, NTCIR, and CLEF have been a major driving force in the development of question answering technology over the past several years. While such events bring together the research community and provide a neutral forum where results can be meaningfully compared, formal evaluations have the downside of focusing attention on what can be easily measured, which may differ from what X  X  actually important, realistic, or useful. In this paper, we describe shortcomings in the present TREC methodology for evaluating question series, propose an alternative framework based on user simulations, and use this new tool to examine interesting information-seeking behaviors brought to light by a previous user study.

Recent implementations of the question answering task have focused on contextualized information needs, which stands in contrast to earlier work on isolated  X  X  X actoid X  X  questions such as  X  X  X hat membrane controls the amount of light entering the eye? X  X  Since 2004, the main task at NIST-sponsored TREC QA tracks have con-sisted of question series organized around topics (called  X  X  X argets X  X ) X  X hich can be people, organizations, events, or entities ( Voorhees, 2004, 2005 ; cf. Kato, Fukumoto, Masui, &amp; Kando, 2004 ). Questions in a series inquire about different facets of a target, but are themselves either factoid or list questions. In addition, each series contains an explicit  X  X  X ther X  X  question (always the last one), which can be paraphrased as  X  X  X ell me other interesting things about this target that I don X  X  know enough to ask directly. X  X  Table 1 shows a few sample question series.

Question series represent an attempt to incorporate context-processing as a component of the evaluation: anaphors are liberally used to generate natural-sounding questions, and earlier questions may provide context for later ones. Systems are required to process questions within a series sequentially (with no look-ahead) and are allowed to preserve state (not the case with previous TREC QA evaluations). For  X  X  X ther X  X  questions, credit is not awarded for returning information already explicitly asked for; this setup forces systems to keep track of the current state of knowledge.

Question series can be viewed as abstractions of information-seeking dialogs, where a user interacts with a system to accumulate a body of knowledge (i.e., facts) about a topic. This development occurred in response to the realization that factoid questions, the focus of much previous research, do not usually occur in isolation, but are typically components of broader information needs that can only be fulfilled through multiple user X  system iterations. Since fully-interactive user studies are difficult to organize within the TREC setting, question series were seen as an acceptable compromise.

Despite a focus on question series, the evaluation methodology at TREC has yet to incorporate notions of context or models of the user. Individual questions in a series are still evaluated as if they occurred in isolation, and then aggregated by a weighted sum ( Voorhees, 2004, 2005 ). This implicitly assumes a hypothetical user who methodically types in each natural language question and assesses the response. Needless to say, such a model vastly oversimplifies the information seeking process, which is a complex dance of broad and directed searching, browsing, serendipitous knowledge discovery, etc. Evaluations aimed at studying information-seek-ing dialogs should attempt to model some of these interactions.

In many cases, user studies represent the most  X  X  X atural X  X  method for studying the information-seeking behavior of humans. However, the high-cost and time-consuming nature of such experiments limit the range of hypotheses that can be considered, the speed at which variables can be explored, and the statistical signi-ficance of results. The dominant paradigm of TREC-style batch evaluations (i.e., the Cranfield methodology) is plagued with the opposite sets of problems X  X hile reusable test collections allow for rapid experimentation, removing the user from the loop eliminates arguably the single most important variable in the information-seeking process, thus affecting the conclusions that can be drawn. Different (and sometimes conflicting) results from system-and user-oriented evaluations have been noted by a variety of researchers, e.g., Hersh et al. (2000) and Allan et al. (2005) . As an attempt to retain the best of both worlds, i.e., conduct interactive system evaluations in a rapid, affordable, and repeatable manner, user simulations have gained traction as an alter-native experimental methodology ( Chi, Pirolli, Chen, &amp; Pitkow, 2001; Harman, 1988; Magennis &amp; van Rijsbergen, 1998; Mostafa, Mukhopadhyay, &amp; Palakal, 2003; White, Ruthven, Jose, &amp; van Rijsbergen, 2005 ).
Taking inspiration from previous work in IR research, this paper develops a framework for evaluating question answering systems with user simulations. In our setup, systems are plugged into user models that sim-ulate the actions that a real user would take given certain observations (system output). To assess the effec-tiveness of different user X  X ystem combinations, we introduce a novel measure that quantifies the number of facts acquired as a function of time. Using this simulation framework, we explore two different types of user behaviors: one focused on question asking, and one focused on reading retrieved results. These two behaviors essentially boil down to using a QA system vs. using an IR system to answer question series. Surprisingly, our user simulations show that a baseline document retrieval system beats all but the top-ranking question answer-ing systems.

This paper is organized as follows: Section 2 discusses the motivation for this work. Section 3 outlines the simulation-based evaluation methodology adopted in our study. Detailed evaluations of factoid, list, and  X  X  X ther X  X  questions are discussed in Sections 4 X 6 , respectively. An attempt at aggregating performance across these three disparate question types is described in Section 7 . The limitations of this evaluation framework and related issues are discussed in Section 8 , and the paper concludes in Section 9 . 2. Motivation
The user study on context in question answering conducted by Lin et al. (2003) serves as a starting point for this work. Using a QA system, subjects in their study were asked to find answers to groups of related factoid questions centered around a topic, much like question series. The independent variable in the study was the amount of answer context presented to the user. In one condition, only the exact noun phrase answer was given; in three other conditions, the system presented the entire sentence, paragraph, and document in which the answer was found, respectively (with the answer highlighted). When given only the exact answers (and to a large extent, sentence-based answers), users were forced to ask each question in sequence (as there was nothing else the user could possibly do). This type of user behavior implicitly underlies the current setup of the TREC
QA task: the user types in a question, reads the response, and proceeds to the next question, repeating until all questions have been answered.

Richer behaviors emerged when users were given the answer to a question embedded in a paragraph or the entire source document. Instead of proceeding to ask the next question in the series, users would read the con-text surrounding the given answer, which often incidentally contained answers to other questions in the series.
Hence, users were able to satisfy their information needs  X  X  X erendipitously X  X . If reading system output did not yield any interesting information (e.g., answers to more questions), users would continue with the next ques-tion in the series (by typing in the query box).

In the document-length response condition, a few users appeared to not be using the test system X  X  question answering capabilities at all. These subjects would simply type in a few general keywords and read the result-ing document end-to-end. Since the experiment used high-quality encyclopedia articles and the questions were focused on coherent, well-defined topics, users were able to answer all the questions by simply reading the entire article (which varied in length, however).

Interestingly, Lin et al. found no statistically significant differences in the amount of time required to answer each series or the answer accuracy between each of the four conditions. They, however, did note a very significant decrease in the number of questions posed to the system with increasing amounts of context, sug-gesting a tradeoff between reading and typing time. Overall, users preferred the paragraph condition because it represented a good balance between establishing context and maintaining brevity.

This previous work brought to light several interesting user behaviors. On one extreme is a methodical question-asking behavior in which the user simply poses each question in the series sequentially. The other extreme is a behavior that involves minimal querying, but a significant amount of reading. These two approaches roughly translate into using a QA system and using an IR system to gather information about a target, respectively. In this paper, we explore both behaviors with the aid of user simulations.
The use of user simulations to evaluate information retrieval systems is relatively well established; see ( Chi et al., 2001; Harman, 1988; Magennis &amp; van Rijsbergen, 1998; Mostafa et al., 2003; White et al., 2005 ) for a few examples. Such studies can be used as formative tools to rapidly assess the interactive capabilities of dif-ferent information systems. As far as we are aware, this work represents the first attempt at applying such a methodology to question answering evaluation. 3. Evaluation methodology
The current TREC evaluation methodology for question series is based on an aggregation of individual scores (first within a series, then across series) that does not take into account context, the relationship between each question, or a model of the user. Although questions in a series are related, they are evaluated in isolation. Furthermore, metrics focus on either precision (in the case of factoids) or a combination of pre-cision and recall (list and  X  X  X ther X  X  questions); these are not the best measures for quantifying performance if the overall goal is to gather a number of facts about a target.

We propose user simulations as an alternative evaluation methodology that addresses some of the short-comings associated with the existing TREC paradigm. Our evaluation framework, which consists of three components, is shown in Fig. 1 . The user model, which simulates users X  information-seeking behavior, is con-nected to the system under study in such a way that user actions become system inputs and system outputs become user observations. System output also serves as the input to the evaluation module, which measures the effectiveness of the interaction (i.e., user X  X ystem combination).

Using this evaluation methodology, we explore the two types of user behaviors described by Lin et al. (2003) , in an effort to better understand QA and IR systems. The first model (model A) simulates a user who types in a question, reads the system X  X  response, and repeats. Such a user is looking only for the answer to the current question, and sequentially goes through all questions in this narrowly focused manner X  X ssen-tially, all questions are treated as if they occurred in isolation. This is, in fact, the implicit user model that underlies the current TREC QA setup. To complete the simulation, this user model is paired with systems that were evaluated in the TREC 2004 QA track: the top-ranking, second-ranking, and third-ranking systems (by different organizations), and the median system (across all submitted runs). The second user model (model B) simulates someone who prefers reading over typing: a user who issues a simple query, obtains a ranked list, and starts reading the documents in search of answers X  X .e., a user employing a document retrieval system for a question answering task. This model is paired with two different document retrieval systems: Lucene, a pop-ular open-source retrieval engine, and Indri ( Metzler &amp; Bruce Croft, 2004 ), a state-of-the-art language mod-eling toolkit for information retrieval. For both systems, the target itself was used as the query. To give a specific example, consider again the sample question series in Fig. 1 : the queries issued to the IR systems would be  X  X  X he band Nirvana X  X ,  X  X  X uarks X  X , and  X  X  X rance wins World Cup in soccer X  X , respectively. Since model B attempts to simulate a user who is interested in documents about the general topic (and is willing to examine the documents manually), additional query terms from individual factoid or list questions are not used. The simulations explored in this work are summarized in Table 2 , and the realism of these runs is discussed in Section 8 .

Instead of traditional TREC evaluation measures based on precision and recall, we propose a novel eval-uation metric 1 based on the number of facts gathered (i.e., recall) as a function of time. Since time is not a directly measurable quantity in our simulations, response length is used as a surrogate, under an assumption of constant reading time. This evaluation model is attractive for several reasons. For one, it is easy to interpret and compare: naturally, a system that allows the user to gather more facts in a shorter amount of time is pre-ferred. Single-point measures can still be computed at a given time cutoff, reflecting specific situations (e.g., writing a complete report in an hour, quick fact-checking in 5 min, etc.).

By measuring recall as a function of response length, we can create plots analogous to precision X  X ecall curves in ad hoc retrieval that explicitly show the tradeoffs between completeness and brevity. Note that this tradeoff is especially important for list and  X  X  X ther X  X  questions, whose responses potentially vary greatly in length; the current metric ( F -measure) hides this important issue with arbitrary settings of the b parameter.
In the following sections, we describe the results of each simulation in Table 2 . Runs for factoid, list, and  X  X  X ther X  X  questions are discussed separately. 4. Factoid questions
Before the general evaluation methodology described in the previous section can be implemented, there are a number of details that must be worked out. The first involves preparing the dataset, and the second involves more concretely fleshing out the scoring methodology.

As discussed above, user model A is paired with the top-three scoring runs (by unique organizations) and median run (across all submitted runs) from the TREC 2004 QA track. However, it does not make sense to use those system outputs verbatim. Submitted factoid answers to TREC are by requirement  X  X  X xact X  X  (but they are paired with a supporting document). Such short answers (usually noun phrases) provide no context for the user to ascertain the correctness of the response. More realistically, users would require some fragment of a source document surrounding the answer to make sense of the response X  X his context is reconstructed by finding the first sentence in the supporting document that contains the answer string; if no exact match could be found, the sentence with the most terms in common with the exact answer is chosen.

The next issue with model A simulations concerns user backoff strategies when the QA system fails to return correct answers. Although the current TREC evaluation model does not specify a  X  X  X epair strategy X  X , it is reasonable to assume that users would revert back to keyword-based querying to find the remaining answers. This is simulated by appending Lucene results (described below) as the final system response with model A.

The results of Lucene and Indri, which are paired with model B, are also processed. Within the documents retrieved, it is likely that matched terms will be highlighted, drawing user attention to areas in the document that contain query terms. We assume that users will read those regions more carefully, and quickly skim (or altogether skip) areas of the document that do not contain query terms. To approximate this effect, we discard all sentences that do not contain at least one term from the target. Documents from the hit list were processed in this manner and concatenated together until a quota of 15,000 non-whitespace characters was filled (the length at which we stopped plotting the performance graphs). We assume that the model B user will method-ically read documents in the hit list, one after another, until either all questions have been answered or the user gives up. The length of 15,000 non-whitespace characters represents an upper bound, but we expect that few real users would actually read that much text.

How do we actually evaluate answer recall as a function of response length? While intuitively simple, there are many details that must be considered. First, there must exist an automatic method for determin-ing if an answer is contained within a span of text. For this, we employ regular expression answer patterns distributed by NIST, which have become a widely-accepted method for evaluating answers to factoid ques-tions. Although there are a number of known issues with these patterns ( Lin, 2005 ), they equally affect both model A and model B simulations X  X lthough absolute numbers may not be accurate, relative rankings will be stable. As a note, although it is possible to compute official answer accuracy scores as a function of response length given NIST judgments, doing so would prevent us from comparing model A simulations to model B simulations (which were not submitted to NIST for evaluation). In summary, what we measure is the fraction of factoid questions in a series that has been answered after going through a certain amount of system output, under the assumption that sentences are read one at a time and answers aren X  X  acquired until the complete sentence has been read. No ordering relationship is enforced among the questions, i.e., a particular sentence might answer the first question in the series, the last, or even multiple questions simultaneously. Naturally, however, answers retrieved multiple times are given credit only for their first occurrence. The behavior of model A, however, ensures that questions are answered sequentially (since each is explicitly asked); the order of answers with model B, on the other hand, exhibit much greater freedom.

The next issue that needs to be addressed concerns the length unit of evaluation. Possibilities include (at least) characters, terms, and sentences. Since we have projected exact answers onto complete sentences, it makes sense to evaluate answer recall at the sentence level. However, since sentences vary greatly in length, characters seem like a more comparable unit of measurement (following TREC, we only count non-white-space characters).

We adopted a method for interpolating between lengths and aggregating results that is very similar to the computation of precision X  X ecall curves in ad hoc retrieval tasks. For each question series, recall values were interpolated to the nearest 50 character increment higher than the current length (i.e., the length count after the current sentence has been  X  X  X ead X  X ). Furthermore, recall was interpolated to be monotonically increasing so that score variations at different lengths were smoothed out. In this manner, the graph for all factoid questions within a given series can be plotted. Results across different series were aggregated by averaging recall values at the fixed length increments (50, 100, 150, etc. characters).

Results of this evaluation are shown in Fig. 2 , where answer recall is plotted against response length (on a log scale). The user model is omitted in the key because it is unambiguously identified by the system. Further-more, Lucene was found to outperform Indri, and hence Indri results were not plotted to reduce clutter. This graph has a very intuitive interpretation: after reading so much response from the system, one can expect to have obtained answers to a certain fraction of all factoid question in the series. Naturally, higher and faster-rising curves indicate better performance. The horizontal lines in Fig. 2 indicate the performance of each QA system alone (i.e., if the IR results had not been appended to the end of the QA run). Note that for the appended IR runs, answers that have already been returned were not removed.

For the top three systems, recall rises very quickly at first due to their high accuracy in retrieving factoid answers, then tapers off because users must resort to IR results to find the remaining answers. As a reference, the top three runs in TREC 2004 obtained an official factoid accuracy of 0.770, 0.643, and 0.625, respectively ( Voorhees, 2004 ). Note, however, that these official scores differ from the scores automatically computed using answer patterns. Interestingly, the median QA system does not appear to outperform Lucene at higher levels of recall. Because the median system is only able to answer 17% of all factoid questions (official NIST score), the user must resort to reading IR results to find most of the answers. 5. List questions
Answers to list questions in TREC consist of an unordered set of strings; as with the factoid questions, the exactness criterion also applies. In the NIST evaluation, responses from all systems are pooled to create the known set of correct answers, which is then applied to evaluate each individual run. The official score is an F -measure with equal balance on precision and recall. As previously discussed, such a single-point measure hides important tradeoffs that are relevant for different situations.

We evaluated answers to list questions in the same way we evaluated answers to factoid questions: recall as a function of response length (non-whitespace characters). The systems under comparison were prepared in a similar manner. Answers from the top three runs from unique teams, along with the median across all runs (some overlap, but not the same as the factoid runs), were projected onto the sentence containing the exact answer (or closest match). The baseline Lucene and Indri runs were exactly the same as those in the factoid evaluation. The IR results were also appended to the end of the TREC runs. Answers were auto-matically evaluated with patterns distributed by NIST, and results were aggregated in the same manner as factoids: first on a per-series basis to the nearest higher 50 non-whitespace character increment (interpo-lated so that recall values were monotonically increasing), and then averaged at each length quanta. As with factoid questions, no ordering relationship was enforced among answer instances X  X ven if a question series had multiple list questions, our evaluation method accepted answers in arbitrary order, including an inter-leaving of responses.
 Results of this experiment are shown in Fig. 3 . As before, since we discovered that Lucene outperformed Indri, the latter results are not shown to reduce graph clutter. Horizontal lines mark the performance of each
QA system alone, without contributions from the appended IR results. For reference, official NIST scores are shown in Table 3 . Once again, these figures differ from the automatically-generated scores. As can be seen from the graph, the performance of the median QA run does not appear to be better than Lucene X  X ; both were approximately equal to the third-highest scoring run at high recall levels. Based on this evaluation methodol-ogy, only the top-ranked and second-ranked run conclusively  X  X  X eats X  X  Lucene on list questions. 6. Other questions  X  X  X ther X  X  questions can be paraphrased as  X  X  X ell me interesting stuff about the target that I didn X  X  explicitly ask about X  X . System responses consist of a set of answer strings, making the task quite similar to passage retrie-val. The goal is to retrieve as many  X  X  X uggets X  X  (essentially, facts) about the target as possible (beyond information already asked about by the other questions in the series). NIST assessors create an answer key of  X  X  X eference nuggets X  X  by examining the pooled response of all systems (plus their own research), and each nug-get is labeled as either  X  X  X ital X  X  or  X  X  X kay X  X  to qualitatively denote their importance (cf. Lin &amp; Demner-Fushman, 2006 ). There are two components to the evaluation metric: recall is computed on vital nuggets only, while pre-cision is approximated by a length allowance per vital or okay nugget X  X ore details are provided in Voorhees (2004) and Voorhees (2005) .An F 3 score combines the precision and recall components, and the setting of b = 3 (weighting recall over precision by a factor of three) was arbitrarily determined.

In this experiment, we examined the same user simulations outlined in Table 2 : model A paired with the top three and median runs from TREC 2004, and model B paired with Lucene and Indri (same exact runs as before). We employed a similar evaluation methodology that characterizes recall as a function of response length. With factoid and list questions, regular expression patterns provided by NIST were used to automat-ically assess answer accuracy X  X  corresponding method to evaluate answers to  X  X  X ther X  X  questions was needed for our experiments. For this purpose, we employed P OURPRE evaluating answers to complex questions ( Lin &amp; Demner-Fushman, 2005 ). The metric is based on unigram overlap between answer strings and the assessors X  reference nuggets. We used the (term count, macroaverag-ing) variant, which was found to produce the highest correlation with official results. Since we were only inter-ested in recall, we discarded the precision component generated by P possible to reconstruct official nugget recall scores as a function of response length given NIST judgments, doing so would prevent us from evaluating runs that did not participate in the original TREC evaluation. Thus, the use of P OURPRE is critical to these experiments. As with the factoid and list experiments, P accepts relevant nuggets in any order.

The results of our experiments on TREC 2004  X  X  X ther X  X  questions is shown in Fig. 4 , under two different conditions: one in which only vital nuggets are considered, and one in which all nuggets are considered. In the same manner as before, the Lucene results were appended to the end of the QA system runs. As with the other graphs, Indri results are not plotted due to its lower performance. Similarly, horizontal bars denote the performance of each QA run without contributions from Lucene. For reference, the average response lengths and official F -scores are shown in Table 4 . It does not appear that the median QA run (with model A) outperforms Lucene (with model B), and it is unclear if the top three QA runs are actually better, especially at high recall levels. Furthermore, despite relatively large differences in official scores, the top three QA runs don X  X  seem to behave all that differently under this scoring model. The official metric represents a single trade-off point between brevity and completeness X  X lthough these measures may appear different, the performance curves they lie on are actually quite similar. Our findings are consistent with results from the TREC 2003 QA track, where it was discovered that a baseline IR run beat all but the best submission at answering definition questions ( Voorhees, 2003 ). 7. Aggregate performance In the previous sections, we described separate user simulations for factoid, list, and  X  X  X ther X  X  questions.
Given that a series is comprised of all three types, it would be desirable to compute aggregate performance on a per-series basis.

Unfortunately, there are many difficulties in developing an aggregation method that makes sense. The big-gest barrier is the incomparability of basic answer units for each of the three question types. What is the rel-ative importance of answering a factoid question, compared to retrieving a correct answer instance for a list question, compared to extracting a relevant nugget for an  X  X  X ther X  X  question? In absence of a more well-defined task model to ground these individual facts, e.g., a final report to be prepared about the target, it is difficult to develop an aggregation method that makes sense. For TREC, NIST settled on an arbitrary weighting scheme: a weight of 0.50 to factoid questions (answer accuracy), 0.25 to list questions ( F questions ( F 3 score). Each component score is aggregated on a per-series basis, and then averaged across all series.

We can straightforwardly apply this weighting scheme to produce an overall recall X  X ength plot for the sim-ulation with model B and Lucene. Recall that the input to each of the three individual evaluations is exactly the same; hence, we can simply compute the weighted average of all three recall scores at each length incre-ment. We aggregated the scoring condition of the  X  X  X ther X  X  questions that took into account all nuggets, both vital and okay. 2 For the model A simulations, the computation was a lot more complex because the output of the three different question types was different. In absence of a reasonable user model for reading answers to factoid, list, and  X  X  X ther X  X  answers simultaneously, we settled on a  X  X  X ound-robin X  X  baseline. We computed weighted recall averages in chunks of 150 non-whitespace characters, taking 50 from factoid, list, and  X  X  X ther X  X  questions, respectively. Note that for both cases, we were aggregating results that already captured the perfor-mance of each question type across all question series. An alternative would be to first aggregate each question type within a series (i.e., take factoid, list, and  X  X  X ther X  X  responses in a round-robin fashion), and then aggregate across all question series.

The results of this experiment are shown in Fig. 5 . A caveat: the graph shows the aggregated performance of the top factoid run with the top list run and the top  X  X  X ther X  X  run (and similarly for the rest of the runs) X  these were in actuality taken from different TREC submissions since no single run placed highest in all three categories. Although we readily concede that this aggregation method does not actually reflect any real user behavior, it nevertheless gives us a rough idea of how state-of-the art QA systems compare to IR system.
The shape of these curves do make intuitive sense. If the goal is to accumulate a body of knowledge about a topic, then retrieving documents about the topic in general (using IR) is a good strategy because results can simultaneously provide answers to different questions and question types. Current question answering systems can only focus on one type of question at a time, to the exclusion of other potentially-relevant information.
However, the rate of fact accumulation slows down for IR systems due to redundancy in the retrieved results (since documents lower in the ranked list might contain duplicate information), and performance falls below the top-ranking QA systems above a certain length threshold. Since all the QA runs were padded with IR results, Lucene again becomes competitive at longer answer lengths. Nevertheless, the Lucene performance curve lies above the median QA system performance curve, suggesting that unless an information seeker was using one of the top-ranking QA systems at TREC, she would be better off using an off-the-shelf IR engine. 8. Discussion
Question answering is an area of research that lies at the intersection of information retrieval and natural language processing. Since the development of large-scale open-domain factoid systems in the late 90s, the rel-ative contribution between the two technologies has been a matter of debate. Some researchers have ques-tioned the importance of linguistic analysis, compared to, say focused passage retrieval, while others have questioned the entire QA paradigm ( Spa  X  rck Jones, 2003 ). This paper explores these important issues using a novel simulation-based framework. Surprisingly, our experiments reveal that an off-the-shelf retrieval engine (Lucene) is quite competitive, and actually outperforms the median TREC QA system in many cases. Under a few circumstances, the effectiveness of Lucene rivals that of the best question answering systems.
With the growing focus on complex questions and a better understanding user preferences, the  X  X  X ap X  X  between IR and QA has narrowed over the past few years. Researchers had believed that since answers to factoid questions consist of short noun phrases, a QA system with answer pinpointing capabilities would be superior to information retrieval systems, which operated at the level of documents and other more coarse-grained segments. However, two relatively recent developments have altered this landscape: the shift towards complex questions meant that system responses were now much longer, and it appears that humans prefer contextualized answers anyway, even for factoid questions. The results of our simulation experiments are consistent with these trends, and the growing emphasis on richer answers will reward systems with good passage retrieval ( Monz, 2003; Tellex, Katz, Lin, Marton, &amp; Fernandes, 2003 ). Nevertheless, we believe that many of the linguistic analysis techniques from existing QA systems will remain relevant and applicable in the future.

This work demonstrates that user simulations provide a useful framework for exploring research issues in question answering. Nevertheless, there are a number of limitations that should be discussed. One limitation concerns the nature of the experimental setup: the placement of the evaluation module represents an oversim-plification because it derives quantitative measures solely from system output, as opposed to the (simulated) user X  X  internal state. This choice means that our framework cannot, for example, actually measure how sim-ulated subjects  X  X  X earn X  X , only what they  X  X  X ee X  X  X  X ince it is entirely possible to read a piece of text without understanding its contents. Overcoming this limitation requires the development of more sophisticated user models that better capture cognitive states. The evaluation module can then  X  X  X robe X  X  different components of the user model to quantify appropriate aspects of the simulation.

Another potential limitation of the evaluation methodology concerns its reliance on automatic means for assessing the score of runs (answer patterns for factoid and list questions, and P
There is a certain amount of error associated with these scoring devices, which may potentially affect the results. However, this is tempered by the fact that both the TREC system runs and the IR runs were evaluated in the same manner, and hence whatever issues plague the use of these automatic evaluation devices affected all simulations equally.

Other limitations of this work concern the realism of the user models. Obviously, neither model A nor model B represents real users. When using a QA system, humans are likely to drill down into documents con-taining answers and examine surrounding contexts (if given the choice in the interface). On the other hand, a human using an IR system would not simply issue one query and read all resulting documents X  X ore realis-tically, we would expect multiple iterations of broad and targeted searching combined with examination of the results. Although real-world user behaviors are vastly more complex, the two user models examined in this work are instructive because they bracket the space of user X  X ystem interactions. Furthermore, evaluations based on user-simulations provide a key advantage over TREC-style batch experiments in that they incorpo-rate limited elements of interaction.

In designing model A and model B, we have made a number of simplifying assumptions that are unrealistic, beyond the points already mentioned above, in an attempt to balance evaluation complexity and insightfulness of evaluation results X  X t is worthwhile to point them out here. In projecting exact answers onto sentences for the TREC runs, we assume that sentences provide adequate answer justifica-tion. As Lin et al. (2003) discovered, this may not necessarily be the case. Many short sentences are bur-dened with linguistic phenomena such as dangling anaphoric references that make them difficult to comprehend in isolation. Although expanding the contextual window increases the response length, it may be balanced by other facts serendipitously appearing in the surrounding text. Another oversimplifi-cation is represented by appending IR results to the end of the TREC runs, simulating a user X  X  backoff attempt at answering questions on which the QA systems failed. At that point, a user is much more likely to pose focused queries, which means that the current tail of the performance curves are conservative underestimates.

Similarly, a number of simplifying assumptions were made in model B. Sentences without query terms were thrown away, even though they may contain useful information. Recall that this represented a simplified model of scanning results X  X nder the assumption that with proper keyword highlighting, users would natu-rally focus on regions in the documents with query terms. However, humans are very adept at skimming, and may potentially pick up other relevant information in the document. A more refined model of how users interact with information objects could be built from studies that employ eye-tracking, for example, Granka, Joachims, and Gay (2004) .

It is important to note that most of the issues discussed above are criticisms about the realism of the specific implementations examined in our experiments, and not about the general approach. We believe that the eval-uation methodology based on user simulations yields more insight and better models real world usage of retrieval systems, compared to traditional TREC-style batch evaluations. Most importantly, simulation-based evaluations are not limited to measuring one-shot retrieval effectiveness, but provide a method for assessing system performance in interactive settings. 9. Conclusion
The two primary contributions of this work are a general framework for simulation-based evaluations of question answering and a concrete instantiation of this general approach to compare QA systems from TREC 2004 to existing off-the-shelf IR engines. This work represents the first such application of user simulations that we are aware of. The methodology allows one to introduce the important roles of interaction and context in large-scale automatic evaluations, thereby simultaneously capturing many benefits of TREC-style batch experiments and user studies. Although the types of user models explored in this work are relatively primitive, our experiments do reveal interesting relationships between IR and QA technologies. Ultimately, we hope that the simulation-based evaluation methodology will drive the development more effective interactive retrieval systems.
 Acknowledgements
This work has been supported in part by DARPA contract HR0011-06-2-0001 (GALE). Some of the ideas behind the user simulation approach to IR evaluation originated at the 2004 SWIRL workshop, organized by
Alistair Moffatt and Justin Zobel. I would like to thank Doug Oard and Ryen White for many discussions that have contributed substantially to the shaping of the framework described in this paper. In addition, I would also like to thank Esther and Kiri for their loving support.
 References
