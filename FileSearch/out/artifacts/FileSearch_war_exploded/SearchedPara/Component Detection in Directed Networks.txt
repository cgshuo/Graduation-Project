 Community detection has been one of the fundamental problems in network analysis. Results from community detection (for ex-ample, grouping of products by latent category) can also serve as information nuggets to other business applications, such as product recommendation or taxonomy building. Because several real net-works are naturally directed, e.g. World Wide Web, some recent studies proposed algorithms for detecting various types of commu-nities in a directed network. However, few of them considered that nodes play two different roles, source and terminal, in a directed network.

In this paper, we adopt a novel concept of communities, direc-tional community , and propose a new algorithm based on Markov Clustering to detect directional communities. We then first com-pare our algorithm, Dual R-MCL, on synthetic networks with two recent algorithms also designed for detecting directional commu-nities. We show that Dual R-MCL can detect directional commu-nities with significantly higher accuracy and 3x to 25x faster than the two other algorithms. Second, we compare a set of directed network community detection algorithms on a one-day Twitter in-teraction network and demonstrate that Dual R-MCL can generate clusters more correctly matched to hashtags. Finally, we exhibit our algorithm X  X  capacity to identify directional communities from product description networks, where nodes are otherwise not di-rectly connected.

Results indicate that directional communities exist in real net-works, and Dual R-MCL can effectively detect these directional communities. We believe it will enable the discovery of interesting components in a diverse types of networks where existing methods cannot, and it manifests strong application values.  X 
T his work was done while these two authors were PhD students at The Ohio State University.
 G.2.2 [ Graph Theory ]: Graph algorithms Directional Community; Directed Network; Clustering
Many real world datasets can be effectively modeled as networks (graphs) where nodes represent entities (e.g. persons, papers, pro-teins) and edges mimic the interactions or relationships among those nodes (e.g. friendship, citation, protein interactions). One par-ticularly interesting area in studying network structures is detect-ing important sub-networks which are usually called communities. A community detection algorithm can cluster the network and the generated clusters are predicted as communities. Community de-tection is in growing attention not only because it leads to under-standing of the complex network structure, but also it allows further analysis such as studies on information flows in networks, evolu-tion of networks and visualization of networks.

A community in an undirected network is typically defined as a group of nodes that have more edges (links) connected within the community than connected to outside the community [9]. How-ever, this typical definition of communities may not discover real groups of nodes in a directed network. A recent survey [18] de-fines the community (or cluster) as a set of nodes that share com-mon or similar features. This survey categorizes clusters in a di-rected network into three types: density-based, flow-based, and citation-based clusters. The definition of density-based clusters is the same as the traditional definition of clusters in an undirected network, and several algorithms [20, 21, 19, 33] are proposed to detect density-based clusters in a directed network. The flow-based cluster is a set of nodes where a random walk is more likely to be kept inside the cluster, such as a loop. Infomap [25] is one of the algorithms designed for detecting flow-based clusters. The citation-based cluster is a set of nodes with similar in-link nodes and/or out-link nodes. It is not necessary for nodes in the same citation-based cluster to be connected. An example is given in Fig. 2(a). A recent study [28] shows that nodes in a citation-based cluster in several real networks have similar properties, and citation-based clustering might more correctly detect communities in a directed network than density-based clustering. Therefore, in different directed networks, we might adopt different definitions of communities for detecting nodes with similar properties. In many practical applicatio ns, there is a large number of networks that are directed in nature, such as the World Wide Web, Twitter X  X  follower-followee network, and paper citation networks. Although a few algorithms developed for undi-rected networks can be extended to apply on directed networks [7, 9, 6], they can only detect density-based clusters. A common ap-proach to handle directed networks is symmetrizing the network by simply removing the direction of edges. However, it is com-mon to see that ignoring the direction of edges results in abnormal communities [16, 18].

The aim of this work is to develop community detection algo-rithms that explicitly incorporate the direction of links. There are several existing works [34, 10, 3] point out the importance of rec-ognizing the dual roles, source and terminal of edges, that nodes play in a directed network. In this context Kleinberg [13] differen-tiated these two different roles of webpages in the World Wide Web network and proposed a hyperlink-induced topic search (HITS) al-gorithm to find important websites. Kleinberg notes the property of reinforcement relationship among nodes , which means that good hubs are the nodes that refer to good authorities and good author-ities are the nodes that are referred by good hubs. This reinforce-ment relationship suggests that the nodes that make themselves good hubs and good authorities each other can be placed together in the same community.

In this paper, therefore, we consider a community structure that treats the dual roles separately. We start with a novel definition of community, directional community , proposed in [12]. A directional community contains a source part and a terminal part based on the connectivity between nodes following a sequence of the edges in alternative directions. In a directional community, nodes in the source part should have more out-links to nodes in the correspond-ing terminal part and than out-links to other nodes. Similarly, nodes in a terminal part should have more in-links from nodes in the cor-responding source part than other nodes. The previous study [12] has reported that several existing community detection algorithms for a directed network, such as Infomap [24] and DI-SIM [23], can-not effectively detect directional communities.

In order to detect such directional communities, we begin with focusing on an undirected network clustering algorithm, Markov Clustering (MCL) [8]. MCL and its variant, R-MCL [26, 29], are a class of simple yet elegant algorithms based on the natural phenomenon of stochastic flow or transition probabilities and have been successfully deployed for community discovery in a wide va-riety of networks [4, 2, 5]. MCL detects communities by group-ing nodes with the same attractor as a cluster. Although the clus-ters generated by MCL are density-based, in this work, we find that MCL can also be used to detect directional communities by manipulating the stochastic flows. The new algorithm, Dual R-MCL , can successfully separately detect groups of nodes that play the source role and the terminal role, and more importantly, auto-matically match the source parts to terminal parts into directional communities.

We first compare Dual R-MCL with two recent algorithms which are also designed for detecting directional communities. The exper-iments are performed on synthetic networks with gold standard di-rectional communities. The experimental results show that Dual R-MCL can achieve higher accuracy in any noise level. Addi-tionally, Dual R-MCL can more efficiently process a moderately large network than the other two algorithms, achieving 3x to 25x speed. Then, we compare Dual R-MCL with several directed net-work clustering algorithm on a Twitter user interaction network, in which hashtags in tweets are used to define communities. The re-sults demonstrate that the directional community can model com-m unities in some real networks and Dual R-MCL can effectively detect these directional communities. Finally, we utilize Dual R-MCL to identify components of products from a product phrase network, which contains product entities and description phrases. We find that our algorithm is able to discover groups of products that belong to the same category (for instance, digital cameras) even when they are not directly connected in the network.

We believe the proposed algorithm is suitable for a vast array of real-world networks, and directional communities identified by Dual R-MCL can serve as nuggets to other high-level applications. To name a few, the grouping of products can be used to enhance existing product query substitution algorithms, and it can also be used for automatically construction of product taxonomy, a time-consuming task if performed manually.
The nodes and edges in a directed network are often represented by a graph G = ( V, E ) , where V is the set of nodes, E is the set of directed edges, and n = | V | . Let A be the n by n adjacency matrix of the network such that A ( j,i ) is the weight of edges from node i to node j or 0 if the edge does not exist. Note that here A is the transpose of the usual definition of an adjacency matrix in order to be consistent with the definition of the flow matrix in MCL, which will be introduced in Sec. 3.1.

We start start with introducing a novel definition of connectivity in a directed network.

D EFINITION 1. D-connectivity: (Fig. 1) Two nodes s and t are D-connected , denoted by s  X  t , if there exists a sequence of edges ( e 1 ,..., e 2 m  X  1 ), m is a positive integer, satisfying v for k = 1 , 2 , ..., max { m  X  1 , 1 } , where v s ( e ) and v source node and the destination node of the edge e respectively.
In other words, D-connectivity follows the edges in alternating directions, one forward and then backward. This sequence of edges is called a D-connected path. There are two different roles of nodes recognized in a D-connected path, sources and terminals, where a source node has one or two incident forwarding edges and a termi-nal node has one or two incident backward edges. These two roles lead to a new type of community structure, directional community:
D EFINITION 2. A directional community DC consists a source part S and a terminal part T ( S, T  X  V and S, T 6 =  X  ) and  X  s  X  S and  X  t  X  T , s is D-connected to t . We denote DC = ( S, T ) .
The concept of directional communities provides a potential way to cluster a directed network. First, a node v in a directional com-munity belongs to either the source part S or the terminal part T (a) Citation-based clusters. (b) Directional community. or both. Second, in a directed network that contains multiple di-rectional communities DC 1 , DC 2 , ..., DC k , any node v  X  V can only belong to at most one source part S i  X  DC i and at most one terminal part T j  X  DC j . In other words, the source parts S , ..., S k are disjoint and the same holds for T 1 , ..., T tional community may include the source part and the terminal part that share few common nodes. This asymmetricity is possible be-cause the nodes in a D-connectivity path need to play only a single role, source or terminal.

Figure 2(b) shows a directed network with two directional com-munities. The left directional community consists of the blue nodes as the source part and the green nodes as the terminal part, while the right directional community consists of the green nodes as the source part and the yellow nodes as the terminal part. This two-way partition of nodes respects the asymmetric property of the directed network.

A directional community detection algorithm should be able to detect all directional communities and identify each community X  X  source part and terminal part, where nodes in the source part share similar out-link nodes and nodes in the terminal part share similar in-link nodes. Moreover, the a node playing the source role should have few out-links to nodes not in the terminal part, and a node playing the terminal role should have few in-links from nodes not in the source part.
A column stochastic matrix M is a n by n matrix which can be interpreted as the transition probabilities of a random walk (or a Markov chain) defined on the network. Specifically, M ( i,j ) sents the probability of a transition from v j to v i . We also refer to the transition probability from v i to v j as the flow from v v . Given an adjacency matrix A , a corresponding canonical flow matrix flow ( A ) = M G is column-normalize A , i.e.,
MCL and R-MCL are community detection algorithms based on a simulation of stochastic flows on the network. MCL con-sists of two operations on a stochastic matrix: Expand and flate . The Expand operation is simply M = M  X  M , and the Inflate operation raises each entry in the matrix M to the infla-tion parameter r ( r &gt; 1 , and is typically set to 2) followed by re-normalizing the sum of each column to 1. These two opera-tions are applied in alternation iteratively, starting with M = M Algorithm 1 R -MCL Input: T he canonical flow matrix M G , the balance parameter b , Output: A set of clusters C and their corresponding attractors. 1: M = M G //Initialize M 2: repeat 3: M R = RegularizationMatrix ( M, M G , b ) 4: M = M  X  M R //Regularize operation 5: M = M. r //Inflate: Raise each entry to the power of r . 6: M = P rune ( M ) //Remove insignificant values. 7: until M converges 8: Interpreting M as clustering result. where M G = f low ( A + I ) . The addition of self-loops to the ad-jacency matrix avoids dependence of the flow distribution on the length of the random walk simulated in MCL. In R-MCL, Expand is replaced by Regularize , which is M = M  X  M G . Regularize ensures that the original topology of the graph still influences the graph clustering process beyond the first iteration and thus gener-ates more accurate clusters [26]. The Regularize step updates a node X  X  flow to the weighted average of the node X  X  neighbors X  (or the node X  X  out-link nodes X  in a directed network) current flow M . M
G ( i,j ) can be considered as the weight of node j when updating node i  X  X  flow. The Expand (or Regularize) operation spreads the flow out of a vertex to potentially new nodes. This has the effect of enhancing within-cluster flows as there are more paths between two nodes that are in the same cluster than between those in different clusters. At the start of this process, the distribution of flows out of a node is relatively smooth and uniform; as more iterations are exe-cuted, all the nodes within a tightly-linked group of nodes will start to flow to one node within the group. This allows us to identify all the nodes that flow to the same attractor node as belonging to one cluster. Note that it is not necessary for an attractor to be contained by its representing cluster. [29] additionally introduced a balance parameter b into R-MCL. When b is large, the flow to a node which already attracts a large number of nodes would be inhibited, so the resulting clusters are more balanced in size, and the number of gen-erated clusters is increased. The pseudo code of R-MCL is shown in Algorithm 1. For a complete description of MCL and R-MCL, the reader is referred elsewhere [8, 26, 29].
R-MCL is originally designed for clustering a undirected net-work. If R-MCL is executed directly on a directed network, the flow follows the direction of each edge. The attractors are likely to be nodes without out-link, and the attractor X  X  representing cluster mainly contains nodes strongly connecting to the attractor. How-ever, as stated earlier, nodes play the role of source and terminal in a directed network, and a node might share similar features only with other nodes in a dense directional community. In order to detect dense directional communities, we manipulate the flow in R-MCL and propose a new algorithm Dual R-MCL.

The main intuition of Dual R-MCL is (1) to cluster nodes sep-arately based on out-link similarity and in-link similarity to obtain source parts and terminal parts respectively and (2) to manipulate the stochastic flow so the source parts can be efficiently matched to the terminal parts. The source parts can be detected by us-ing the canonical flow matrix generated from out-link similarity, flow ( A T  X  A ) . Similarly, the terminal parts can be detected by using the canonical flow matrix generated from in-link similarity, flow ( A  X  A T ) . Then, if the flow follows D-connected paths, it is simple to match the source parts with the terminal parts by consid-Figure 3: An example illustrates the difference between the fl ows in R-MCL and Dual R-MCL in a directed network. The color of each node represents node v a  X  X  current flow: White represents 0 and darker blue represents a larger value. ering what cluster the attractor belongs to in the other clustering result. Specifically, when clustering nodes based on out-link sim-ilarity, we can manipulate node v  X  X  flow, making it always point to nodes which v is D-connected to. The initial flow matrix is set to flow ( A ) , so each node X  X  initial flow points to each node X  X  out-link nodes. When the flow matrix is iteratively regularized by flow ( A T  X  A ) , a node X  X  flow is updated to the weighted average of the node X  X  out-link-similar nodes X  flow. Note that here the canon-ical flow matrix does not contain self-loops, so a node X  X  flow does not point to itself and thus after regularize step, a node X  X  flow al-ways points to nodes which this node is D-connected to. Thus, when the flow matrix is converged, node v  X  X  attractor is likely to be a node in the corresponding terminal part.
 Figure 3 is an example indicating the difference of flows between R-MCL and Dual R-MCL by showing node v a  X  X  flow. In R-MCL the initial flow contains self-loops, and the flow simply follows the direction of edges during Regularize step. As a result, the flow will spread to nodes which are not in the same directional community but are strongly connected to, such as v f and v g in this example. Because v a is out-link-similar to v b (they share two common out-link nodes, v c and v d ), when Dual R-MCL tries to detect source parts, v a  X  X  flow is updated to the weighted average of v flow and v b  X  X  current flow during Regularize step. Therefore, v flow after the first Regularized step will point to node v is D-connected to.

Similarly, when clustering nodes based on in-link similarity, we can manipulate node v  X  X  flow, making it always point to nodes which are D-connected to v by setting the initial flow matrix to flow ( A T ) . Therefore, when the flow matrix is converged, node v  X  X  attractor is likely to be a node in the corresponding source part. After obtaining the set of source parts and the set of terminal parts, we can simply match a source part S to a terminal part T if the attractor of S belongs to T and also the attractor of T belongs to S . Algorithm 2 is the pseudo code of Dual R-MCL.

Figure 4 shows a simple example how Dual R-MCL matches source parts with terminal parts. The red rectangle in the bottom left matrix indicates a source part { v a , v b , v c , b v , and the green rectangle in the bottom right matrix indicates a terminal part { v e , v f , v g } with an attractor v a . Because this source part X  X  attractor belongs to this terminal part and also this termi-nal part X  X  attractor belong to this source part, these two parts are matched together to form a directional community. Similarly, we can construct two other directional communities DC 2 = ( S = { v e , v f , v g } , T = { v h , v i } ) and DC 3 = ( S = { v Algorithm 2 D ual R-MCL Input: T he adjacency matrix A , the balance parameter b , the in-Output: A set of directional communities. 1: M out G = flow ( A ) 2: M in G = flow ( A T ) 3: M outSim G = flow ( A T  X  A ) 4: S = RMCL ( M outSim G , b, r ) but initialize M to M out 5: M inSim G = flow ( A  X  A T ) 6: T = RMCL ( M inSim G , b, r ) but initialize M to M in 7: for all S  X  S do 8: Find T  X  T such that attractor ( S )  X  T . 9: if attractor ( T )  X  S then 10: Generate a new directional community DC = ( S, T ) . Figure 4: An example illustrates how Dual R-MCL can iden-t ify directional communities. The wider arrow in the network represents higher weight. White entries in the matrix mean zero flow as a darker entry represents larger flow. The red and green rectangles in the bottom matrices indicates a source part S = { v a , v b , v c , b d } and a terminal part T = { v spectively, and they form a directional community.
Dual R-MCL does not require a user to input the number of gen-erated directional communities as an input parameter. However, in some applications, a user might need a clustering result with a fix number of clusters or a coarse clustering result, as Dual R-MCL might generate a finer clustering result than what the user requires. In this scenario, we can use directed Normalized-cut (d-Ncut) [12] as a criterion to iterative merge generated directional communities. Given two node sets N 1 and N 2 , the cut from edges starting from N 1 and ended at N 2 is Cut ( N 1 , N 2 ) = P v i  X  N 1 ,v j d-Ncut of a directional community ( S, T ) is defined as w here  X  S and  X  T are the compliment nodes sets of S and T respec-tively, Vol ( S ) is the sum of the out-degrees of the nodes in S , and Vol ( T ) is the sum of the in-degrees of the nodes in T . The d-Ncut can be a metric for evaluating how ideal a directional community is. Thus, we can merge directional communities as an agglomerative clustering algorithm. We can iteratively merge a pair of directional communities that reduces the d-Nut most until the desired number of clusters is achieved or d-Ncut cannot decrease anymore. We can also merge directional communities based on the domain knowl-edge of nodes and edges, if available, and an exemplar approach is introduced in Sec. 4.3.3 for a specific network.
We begin by examining the performance of the proposed meth-ods on synthetic networks generated by LFR [14]. The advantage here is that in such networks we have ground truth and can evalu-ate how well the proposed methods as well as competitive straw-men recently published in the literature can recover the ground truth components.

LFR can randomly construct a power-law network with various tunable parameters. In this study, we set | V | = 10000 nodes whose in-degrees follow a power law distribution with decay rate  X  and maximal out-degree 200. The size of the original gold standard clusters follow a power law with a decay rate  X  2 =  X  1 and belong to the range [40 , 200] . We then tune the proportion of external edges (noise level)  X  for all nodes from 0.2 to 0.6 with an interval 0.1, and set the average out-degree deg avg to 10 or 20. The gold standard clusters generated by LFR are density-based. In order to construct gold standard directional communities, the original gold standard clusters are considered as gold standard source parts. Then, the destination indices of all edges are randomly shuf-fled. The original gold standard clusters are also shuffled with the same permutation, and then the shuffled clusters become gold standard terminal parts. The gold standard source part is matched to the corresponding terminal part after shuffle. Therefore, each node belongs to exactly one source part and one terminal part. For example, if LFR originally generates two gold standard clusters { v a , v b , v c } and { v d , v e } in a 5-nodes network, and the destina-tion indices are randomly shuffled: ( v a , v b , v c , v index should be replaced by the new index, and two directional communities DC 1 = ( S = { v a , v b , v c } , T = { v c , v d , v e } ) and DC 2 = ( S = { v d , v e } , T = { v constructed. The advantage of this procedure is that the distribution of in-degree and out-degree are retained. A drawback is that and the size of source part and terminal part of each directional community are the same, but this should not affect the measure of accuracy or the execution time much. The experiments were performed on a machine with Intel core i5 650 and 16GB of main memory.
We compare Dual R-MCL with two recent algorithms L 0 -harvesting and EN-harvesting [12], which are also designed for detecting di-rectional communities. L 0 -harvesting and EN-harvesting are reg-ularized Singular Value Decomposition (SVD) based algorithms which sequentially identify dense directional communities rather than attempting to detect all of them in one run of a clustering algo-rithm. We do not include DI-SIM [23] here, as it is less effective in practice, especially for large and sparse networks [12]. Major lim-itations of it include (1) the need to specify the number of commu-nities in advance, and (2) the quadratic complexity of SVD which will increase rapidly with the number singular vectors. It has been shown that L 0 -harvesting and EN-harvesting outperform DI-SIM in detecting citation-based clusters. Let Q be D  X  1 / 2 r where D r and D c are the diagonal matrices of out-degree and in-degree respectively, and let u,v be two score vectors with size n . L -harvesting solves the SVD with L 0 penalty, by an iterative hard-thresholding algorithm. EN-harvesting solves the SVD with Elastic-net type of penalty [35], max u,v u by an iterative soft-thresholding algorithm. The solution ( leads to a directional community ( S, T ) with S = { v : u ( v ) 6 = 0 } and T = { v : v ( v ) 6 = 0 } .  X  and  X  are sparsity parameters and these two algorithms iteratively try different values of these two parameters and pick the directional community with the smallest Directional Conductance [12]. Both algorithms then remove the edges between S and T and sequentially detect the next directional community.

We have tested other algorithms designed for detecting other types of communities, but none of them can generate clusters that can be matched to the gold standard directional communities here. For example, LinkCommunity [1] is a well-known algorithm to de-tect overlapping clusters in an undirected network. After ignoring the direction of edges and shuffling the destination indices o f all edges, LinkCommunity is unable to detect any significant cluster even if  X  is small, showing that the partition density [1] is 0.
The evaluation metric we use here is normalized mutual infor-mation (NMI) [15]: Given a set of gold standard communities the NMI of a set of generated clusters X is where H ( X | Y ) is the conditional entropy of X given Y tween 0 and 1. 1 means a perfect match between the generated clus-ters and gold standard. This NMI is designed for overlapping clus-ters, as a directional community X  X  source / terminal part might over-lap with another directional community X  X  terminal/source part. One assumption of this NMI is that X and Y cover all nodes. Although the results of Dual R-MCL, L 0 -harvesting and EN-harvesting might not contain all nodes, they always cover more than 95% nodes so NMI can still be adopted. For each LFR parameter setting, ten net-works are generated and the average NMI is calculated.
The results of NMI are shown in Table 1. In Dual R-MCL, the default parameter values of R-MCL ( b = 0 . 5 and r = 2 ) are adopted unless otherwise noted. Clearly, Dual R-MCL can ob-tain higher NMI than the other two algorithms, except the case of  X  = 0 . 6 and deg avg = 10 , in which all algorithms cannot gener-ate accurate enough clusters. All algorithms always achieve higher NMI when deg avg = 20 than when deg avg = 10 . This is sim-ply because when the average degree is larger, the information is more abundant, so it is easier for algorithms to correctly detect di-rectional communities. When the noise level is higher, it is harder to detect the boundary of each directional community, so all algo-rithms tend to merge some directional communities and to gener-ate smaller number of clusters. In the extreme case of  X  = 0 . 6 and deg avg = 10 , all of these algorithms tend to merge all gold standard directional communities together and generate only one giant cluster. Dual R-MCL can ease the situation by setting a larger value of balance factor b . A larger b can inhibit the flows going to a node which already attracts a large amount of nodes [29], so that Dual R-MCL can prevent merging all the directional communities together. Therefore, when  X   X  0 . 5 , b = 2 . 0 is adopted. More-over, when deg avg = 20 and  X   X  0 . 4 , EN-harvesting X  X  NMI is higher than L 0 -harvesting, but when deg avg = 10 or  X   X  0 . 5 , EN-harvesting X  X  NMI is smaller. Similar results were observed in [12] that L 0 -harvesting can provide better accuracy when the network is sparse and EN-harvesting can generate more accurate clusters when the network is dense. However, when the noise level is very larger (  X  0 . 5 ), L 0 -harvesting always achieves higher NMI, show-ing that L 0 -harvesting is more noise-tolerant than EN-harvesting, but Dual R-MCL always has the best accuracy.

In terms of efficiency, as can be seen in Table 1, Dual R-MCL is faster than the other two algorithms. All algorithms consume more time when deg avg = 20 than when deg avg = 10 , because more non-zero values cause the matrix multiplication in R-MCL and SVD executing longer. We find that Dual R-MCL consumes longer time when  X  is larger, because it needs more iterations for the flow matrix to converge. For L 0 -harvesting and EN-harvesting, the execution time depends on the number of generated directional community and the noise level. When the noise level is increased, the execution time of SVD increased; however, since fewer clus-ters are generated as mentioned above, the process of sequentially identifying directional communities is faster (but the results tend to be incorrect). As generating accurate enough results (NMI &gt; 0 . 6 ), Dual R-MCL is much more efficient, achieving 5x to 25x and 3x to 10x speedup than L 0 -harvesting and EN-harvesting respectively. Twitter. We seek to demonstrate the value of the novel component structure we have described in this paper and describe how Dual R-MCL can more accurately detect these communities.
We extract a directed network from Twitter X  X   X  X irehose X  message stream in one full day (May 1 2012). Each node in this network represents a Twitter user, and we connect users according to the presence of interaction between them since direct interaction is a stronger signal of closeness than the following-followee relation-ship. Therefore, a directed edge from a source node u s to a termi-nal node u t is created if any of the following interactions happens between u s and u t : (1) u s retweets (forwards) a tweet created by u , (2) u s replies to a tweet created by u t , or (3) u s creates a tweet which mentions u t . Note that the edge direction is reverse to the information flow. We then remove nodes with degree lower than 25, and then retain the largest weakly connected component. The resulting network contains 51181 nodes and 417518 edges. From tweets written by those users, we extract hashtags that are used by at least 5 users in the network, and consider each group of users that adopt the same hashtag as one gold standard cluster. The mo-tivation behind creating gold standard from hashtag usage is that people often adopt hashtags to indicate topics they are interested in, and a group of users sharing common interests and interaction are reasonable communities. There are 5354 gold standard clusters with an average size of 25.43. Although the hashtags are so noisy that these hashtag cannot precisely indicate the communities a user belong to, they can still provide some topics which the users are commonly interested in.
We compare Dual R-MCL with several directed network com-munity detection algorithms here: infomap [25], WEBA [31], and MLR-MCL [26] with a symmetrized method [27]. The SVD-based spectral harvesting methods did not scale to these datasets so we do not compare with L0 or EN harvesting here. Infomap is a state-of-the-art algorithm to detect flow-based clusters. WEBA is designed to detect kernels, which is densely-connected nodes with similar in-links, and then WEBA finds the corresponding auxiliary clus-ters to each kernel and merge them to form the final clusters. The kernels cannot be overlapped but the auxiliary clusters can. The clusters found by WEBA are similar to directional communities, where the auxiliary clusters are similar to source parts and kernels are similar to terminal parts. However, WEBA further requires that the links between the kernels should be dense, while directional communities do not take the links between terminal parts into ac-count. Because the default parameters in WEBA generate a huge number of redundant (highly-overlapped) clusters, we decrease the number of iterations (steps) in WEBA from default value 100 to 10. The symmetrization method in [27] can convert a directed network into an undirected network while conserving the out-link and in-link similarity, so with an undirected network clustering algorithm, this method can detect citation-based clusters but it can still detect density-based clusters. Here we adopt another MCL-based algo-rithm, MLR-MCL, as the undirected network clustering algorithm. The singleton clusters generated by each algorithm are removed.
S ome compared algorithms only cover a small part of nodes. As this phenomenon conflicts with the assumption of NMI, we use another metric to evaluate the results here. We adopt the evalua-tion approach similar to [32]: Given a set of gold standard clus-ters (communities) Y and a set of clusters X , we use two measure scores, 1 1 | X | X and how accurately X matches to Y respectively, where  X  is a similarity function between two sets of nodes. We consider  X  as F-measure [29], Jaccard, or neighborhood affinity (NA) [17] here. Then, the arithmetic or harmonic mean of these two scores is adopted as our metric.

Additionally, because some algorithms including Dual R-MCL can generated different clusterings with different average cluster size, we further adopt a pair-precision pair-recall curve adopted in [31] to show the performance in different cluster sizes. The pair-precision and pair-recall focus on the number of correct pair of nodes assigned into the same cluster. Note that the pair-precision and pair-recall are different from the precision and recall used in F-measure above.
The results of different scores are presented in Table 2. We tune the parameters in each algorithm and choose the generally the clus-tering achieving highest performance. As can be seen, Dual R-MCL achieves the highest score in all metrics. All scores are low since the gold standard communities are noisy. Several hashtags do not present as any type of clusters. The harmonic mean of WEBA is extremely low because WEBA covers a very small number of nodes. WEBA only assigns nodes in the dense area into clusters, resulting in low 1
Fig. 5 exhibits the pair-precision pair-recall curve. We tune the kernel size in WEBA, the balance parameter b in Dual R-MCL, and the number of nodes in the coarsest graph in MLR-MCL to gener-ate clustering results with different cluster size. Infomap does not provide a parameter to change the cluster size so we can only show one point in Fig. 5. This curve again demonstrates that Dual R-MCL can most accurately detect communities in the Twitter inter-action network.
 Figure 6: The subgraph of the cluster matched to hashtag # novullpagar . Blue and yellow nodes are users only belong to source and terminal parts respectively. Green nodes are users belong to both node sets. Red edges represent that at least one of the retweets from a user to the other contains the hashtag #novullpagar .

The results on the Twitter interaction network show an example that some communities in a real network form as directional com-munities, rather than purely density-based, flow-based, or citation-based cluster. Although a citation-based cluster is similar to a source part or a terminal part, a more correct cluster can be formed by matching the source part with a correct terminal part. Through considering both roles a node might play in a directed network, Dual R-MCL might more effectively detect communities.
In this section we now drill down to a specific example of the type of cluster found within the Twitter dataset. Our algorithm de-tects a small component involving 12 users in the graph as a direc-tional community. When comparing this component with the gold standard constructed from hashtag usage, we found that all those 12 users belong to a 13-users cluster using the hashtag #novullpa-gar . This hashtag represents the  X  X o vull pagar X  ( X  X  don X  X  want to pay X ) campaign, a protest in Catalonia at early April, 2012, where local residents protested against toll fees that were seen as abusive compared with those in other regions of Spain 1 .

Table 3 shows all users in the corresponding gold standard, which in fact mistakenly contains one more user @govern (the govern-ment of Catalonia), and the component detected by Dual R-MCL does not include it. As the protest is highly related to the Cata-lan independence movement, the profile of most of these users directly show information about Catalonia or even Catalan inde-pendence. For example, users @PereBofill and @duxans use the  X  X  X  X stelada Blava X  (The Blue Starred Flag), the blue version of the pro-independence flag, as their profile picture. Two other users, @NovullpagaraEsp and @proupeatges, show links to Facebook pages directly related to the  X  X o vull pagar X  protest. Furthermore, @Joan-Tarda is Joan Tard X   X  a i Coma, a professor and a politician. He is the deputy in the Congress of Deputies in Spain and a member of Republican Left of Catalonia, which is a party committed to the independence of the Catalan.

The induced graph of these 13 users is shown in Fig. 6. Some interactions do not contain the hashtag, but they can help detect the communities. Generally, nodes with only out-links and in-links are only assigned to source part and terminal part respectively. The h ttp://en.wikipedia.org/wiki/Catalan_independence is the improvement from the lowest performance among these algorithms. (terminal and/or source) each user belongs to.
 only exception is @JosepAntonFdez, who is assigned to source part only. Although his tweet is retweeted by three other users, none of the retweets contain the hashtag #novullpagar . Without know-ing the tweet content, Dual R-MCL can surprisingly determine that @JosepAntonFdez only play the source role (only retweet from others. Note again the edge direction is reversed from the informa-tion flow) in this community. Other algorithms cannot accurately detect this community. WEBA does not cover any user posting this hashtag. The best matched cluster from MLR-MCL with sym-metrization is a cluster contains 30 users. This is probably because the symmetrization mixes in-link similarity and out-link similarity together, so several other users are included, while Dual R-MCL can consider just one similarity each time. The best matched clus-ter from Infomap does not contain nodes with only out-links or only in-links. This is because Infomap is designed to detect flow-based clusters, where users like @PereBofill playing only the source role cannot be detected since they are not part of any loop in this in-duced subgraph.
In this section we show another application of directional com-munity detection on product phrase networks. Utilizing Dual R-MCL provides us a better understanding of the association between product entities and phrases co-occurring with them, and enables automatic mining of products that belong to the same category. We envision this technique can be used by businesses to facilitate prod-uct query substitution/recommendation, as well as product taxon-omy creation with minimal human input.
From the same tweet stream dump as described in Section 4.2.1, we create another graph of product entities and product-related cessing tool [22] to identity noun, noun phrases, and product en-tities from tweets. Each tweet is viewed as a transaction, where those linguistic constituents are items. We then identify associa-tion rules from maximal itemsets with a support threshold of 10, where the consequence of each rule is restricted to be a product entity. In the case of multiple product entities in one tweet, one rule is created for each product entities as the consequence. A directed graph is then built from those rules, where a node is ei-ther the concatenation of a rule X  X  antecedent phrases, or a rule X  X  consequence phrase. Each edge corresponds to one rule, pointing from the antecedent node to the consequence node. Furthermore, each edge is weighted by its lift score. The lift score of a rule antecedent 1 , antecedent 2 ,  X   X   X   X  consequence is calculated as supp ( a ntecedent 1 , antecedent 2 ,  X   X   X  )  X  supp ( consequence ) where supp is support.
One of the distinctions between the product network and the synthetic networks as well as the interaction network is that each node in the product network has distinct labels reflecting its con-tent. Therefore, we use node labels to merge clusters according to
T his network is built by Yiye Ruan as part of his internship sup-ported by WalmartLabs. Figure 7: The subgraph of the merged directional community r elated to camera products in the product-related phrase net-work. Blue and yellow nodes are source and terminal part respectively. There are several nodes in the source parts not shown here due to space constraint. their lexical similarity. More specifically, we use Jaro distance [11] to measure the textual similarity between two nodes X  labels. Given two strings s 1 and s 2 , the Jaro distance between them is defined as
Jaro ( s 1 , s 2 ) = where m is the number of characters in s 1 and s 2 , respectively, t is defined as half of the number of characters that are the same but farther than the threshold specified above. The range of Jaro distance is [0 , 1] where 1 means an exact match.

Given the string similarity between any possible pair of nodes, we merge two directional communities if any pair of nodes in their terminal parts has a Jaro distance that is greater than 0.9. We only use terminal parts for merging because their labels are product en-tity strings. Algorithm 3 lists the pseudo-code of this single-link merging approach.
 Algorithm 3 M erging directional communities in the product net-work using Jaro distance Input: T he terminal parts of all directional communities Output: The community-to-group assignment G . 1: for i = 1 to n do 2: G i = [ i ] //Each community initially has its own group 3: for ( i, j )  X  { ( i, j ) | i, j  X  [1 , n ] and i &lt; j } 4: if  X  ( p, q ) : p  X  T i , q  X  T j , Jaro ( p, q ) &gt; 0 . 9 then 5: for all m  X  G i  X  G j do 6: G m = G i  X  G j //merge two directional communities D ual R-MCL generates 27 directional communities on this dataset. First, it is able to identify key product features that social network users are discussing. For example, the maximal itemset pointing to product  X  X indle X  contains three phrases:  X  X i-Fi X ,  X 6-inch E Ink Display X , and  X  X pecial Offers &amp; Sponsor Screensaver X . This pro-vides manufactures and retailers information on which attributes are mentioned more often, and can be leveraged to improve adver-tisement campaign and build attribute-based filtering module on a shopping website.

Second, in this dataset we can really pinpoint the benefits of postprocessing for real world performance. Here we illustrate the performance of Dual R-MCL and enhancement of post-processing on the product network, using digital camera product entities as an example. Dual R-MCL successfully identifies three directional communities, which all contain strings describing camera acces-sories to camera models (see Fig. 7). Because the product net-work is very sparse, those directional communities, though highly relevant, are fragmented and not densely connected. By applying post-processing based on Jaro distance, our system is able to merge those three communities into one, making the new cluster seman-tically more complete. Note that although  X  X ikon coolpix s630 X  is not connected to other nodes in the community, this node is D-connected to other terminal nodes via  X  X ase, 1 year warranty X . Therefore, Dual R-MCL can still detect it, while the node  X  X ase, 1 year warranty X  out-links to several other nodes, so it is clustered to another source part. Similar results are found on other products, including Kindle and others.
In this study, we adopt a novel definition of communities, direc-tional community, in a directed network. As the directional com-munity cannot be detected by most of previous algorithms, we pro-pose Dual R-MCL, which can separately discover source parts and terminal parts and efficiently match them. In the experimental re-sults, we show that Dual R-MCL outperforms other two directional community detection algorithms in terms of accuracy and execu-tion time. We further show that directional community detection can reveal communities more correctly in different types of real net-works, including social interaction networks and product descrip-tion networks. Exemplary business applications of this technique include product taxonomy building, product recommendation, etc. For future work, we intend to enhance the scalability of Dual R-MCL. A possible solution to enhance the scalability is the net-work sparsification technique analogous to [28] or the multi-level coarsening technique similar to [26]. It is also interesting to design an algorithm which can discover the overlaps between source parts and between terminal parts. One potential approach is to adopt an overlapping version of R-MCL [30].
 This material is based upon work supported by the National Science Foundation under Grant No. IIS-1111118 and DMS-1418265. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. [1] Y. Y. Ahn, J. P. Bagrow, and S. Lehmann. Link communities [2] S. Asur, D. Ucar, and S. Parthasarathy. An ensemble [3] M. Benzi, E. Estrada, and C. Klymko. Ranking hubs and [4] S. Brohee and J. V. Helden. Evaluation of clustering [5] F. Chen, A. J. Mackey, C. J. Stoeckert, and D. S. Roos. [6] M. Coscia, F. Giannotti, and D. Pedreschi. A classificatio n [7] L. Danon, A. Diaz-Guilera, J. Duch, and A. Arenas.
 [8] S. V. Dongen. Graph clustering by flow simulation. PhD [9] S. Fortunato. Community detection in graphs. Physics [10] R. Guimer X , M. Sales-Pardo, and L. A. N. Amaral. Module [11] M. A. Jaro. Advances in record-linkage methodology as [12] S. Kim and T. Shi. Scalable spectral algorithms for [13] J. M. Kleinberg, R. Kumar, P. Raghavan, S. Rajagopalan, and [14] A. Lancichinetti and S. Fortunato. Benchmarks for testing [15] A. Lancichinetti, S. Fortunato, and J. Kert X sz. Detecting the [16] E. A. Leicht and M. E. Newman. Community structure in [17] X. Li, M. Wu, C. K. Kwoh, and S. K. Ng. Computational [18] F. D. Malliaros and M. Vazirgiannis. Clustering and [19] M. Meil  X  a and W. Pentney. Clustering by weighted cuts in [20] V. Nicosia, G. Mangioni, V. Carchiolo, and M. Malgeri. [21] G. Palla, I. J. Farkas, P. Pollner, I. Derenyi, and T. Vicsek. [22] A. Ritter, S. Clark, Mausam, and O. Etzioni. Named entity [23] K. Rohe and B. Yu. Co-clustering for directed graphs; the [24] M. Rosvall, D. Axelsson, and C. T. Bergstrom. The map [25] M. Rosvall and C. T. Bergstrom. Maps of random walks on [26] V. Satuluri and S. Parthasarathy. Scalable graph clustering [27] V. Satuluri and S. Parthasarathy. Symmetrizations for [28] V. Satuluri, S. Parthasarathy, and Y. Ruan. Local graph [29] V. Satuluri, S. Parthasarathy, and D. Ucar. Markov clustering [30] Y. Shih and S. Parthasarathy. Identifying functional modules [31] L. Wang, T. Lou, J. Tang, and J. E. Hopcroft. Detecting [32] J. Yang and J. Leskovec. Overlapping community detection [33] T. Yang, Y. Chi, S. Zhu, Y. Gong, and R. Jin. Directed [34] D. Zhou, B. Sch X lkopf, and T. Hofmann. Semi-supervised [35] H. Zou and T. Hastie. Regularization and variable selection
