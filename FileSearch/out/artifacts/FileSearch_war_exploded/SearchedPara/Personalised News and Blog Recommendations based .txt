 This demo presents a prototype mobile app that provides out-of-the-box personalised content recommendations to its users by leveraging and combining the user X  X  location, their Facebook and/or Twitter feed and their in-app actions to au-tomatically infer their interests. We build individual mod-els for each user and each location. At retrieval time we construct the user X  X  personalised feed by mixing different sources of content-based recommendations with content di-rectly from their Facebook/Twitter feeds, locally trending articles and content propagated through their in-app social network. Both explicit and implicit feedback signals from the users X  interactions with their recommendations are used to update their interests models and to learn their prefer-ences over the different content sources.
  X  Information systems  X  Mobile information process-ing systems; Recommender systems; Lumi News, recommender system, mobile app
Online content is being produced at an unprecedented rate, with thousands of news stories, blogs and videos added every day by a wide range of publishers, media outlets and Internet users. At the same time, in this accelerating supply-demand cycle, consumer behaviour is changing at an equally high pace [1, 7, 2]. Users increasingly consume news and me-dia content on the go, using their smartphones, either via dedicated news apps or through social media. According to a survey by Mobiles Republic 1 , a global news syndication company, 75% of readers with smartphones and 70% with tablets check the news more than once a day. http://www.news-republic.com/infographic2013/
The increasing use of mobiles for rich media consumption is reflected in the growing number of news apps available and their growing user base. For example, news aggregator apps, such as Flipboard, BuzzFeed, Yahoo News, Feedly, News360, Pulse and Apple News present news from a range of publish-ers, but either provide no personalisation, rely on the user X  X  social networks or on the user selecting topics of interests. Research prototypes that experiment with more advanced recommendation techniques include Focal [4], PEN [3] and others, e.g. [9, 8, 6, 5]. This plethora of news portals and news apps is a clear sign of users X  need for news consump-tion, but also a sign that the question of how to serve this content to users is still very much an open problem.
The goal of mobile news recommender systems is to help users find fresh content that is relevant to them or to their particular context (e.g. location, social) from a constant stream of publications and serve this content in ways that re-quire minimal user interaction, given the limits of a device X  X  form-factors. When considering the user X  X  experience dur-ing a reading session, the feed of news stories recommended to the user should also cater for diversity and serendipity so that the user can discover new topics or stay informed on trending, but perhaps less personally relevant, events. This requires a different approach to those in traditional informa-tion retrieval, one that goes beyond optimising for relevance.
Another key challenge in recommender systems is the cold-start issue: how to recommend items to users for whom we have very little data. Typical approaches require the user to select from a list of predefined topics (e.g., Flip-board), making use of the user X  X  location information or so-cial network (e.g., Pulse) or learning the user X  X  interests over time through interactions with the recommended content (e.g., [5]).

Our system, Lumi Social News 2 , aims to provide users an out-of-the box personalised experience by leveraging both external and internal data and automatically building the user X  X  profile from their location, their Facebook or Twitter feed, while also learning from the user X  X  in-app interactions. The incoming streams of content are matched against the user X  X  evolving profile to generate recommendations, where the scoring considers the item X  X  relevance, popularity and freshness. The user X  X  feed is then composed of items rele-vant to the user X  X  interests, intermixed with locally trending stories, as well as content from other sources, such as the user X  X  Twitter feed or stories from the user X  X  social network on Lumi. Our approach thus aims to combine temporal, locational, social and preferential information to provide a android.lumi.do more fine-grained recommendation strategy.

Lumi is also different from other news recommender sys-tems in that it is not limited to publishers, but presents users with a broad range of blogs and online publications, allow-ing much greater diversity and specialisation in the content delivered to users. This is achieved by leveraging user data to identify promising sources of content.

This paper presents the implementation of our solution to recommend news and more long tail media from a large crowd-curated content stream in a way that provides the user a diverse reading experience, combining topical, location-based and socially relevant content as well as breaking or trending news. Recommendations are presented to the user through an intuitive and easy-to-use, swiping interface, one story at a time. Users X  interactions with their recommenda-tions are then used to update their models and to tune their preferences over the various content sources. Figure 1 shows a schematic overview of the data flow in Lumi. Content is ingested either via RSS or is contributed and curated by the users themselves. For example, users can sign up with Twitter and, in the process, bring the public content of those they follow on Twitter with them into Lumi. This content, after various quality filtering, becomes part of the content pool, from which recommendations can then be generated.

During the bootstrap process, Lumi automatically learns the user X  X  interests from their location, from their public Twitter and/or Facebook feeds and from their in-app ac-tions. The generated user models are then matched against the stream of incoming content and recommended to users based on a combination of their relevance and trending scores.
In addition to the model based recommendations, Lumi also serves content from a range of other sources to the user. In fact, a user X  X  Lumi feed is made up of a mixture of content from any of the following sources, depending on availabil-ity for a given user: model-based recommendations, content pulled directly from the user X  X  social media streams, e.g., Twitter/Facebook, as well as trending content with local or global relevance and content from the user X  X  Lumi connec-tions. The preferred composition of the feed across these sources is tuned based on the user X  X  in-app interactions. For Figure 2: Screenshots of user swipe actions to skip or like an article example, if a user spends longer on reading their model based recommendations than on content coming directly from their Twitter feed, Lumi updates the source weights and will include more model based recommendations in the user X  X  feed.

Lumi also has a unique user interface in comparison to other news apps. Instead of showing the user a list of recom-mendations that is typical in recommender systems, Lumi displays only a single recommended item at any given time. This item is picked from the various ingested content streams, where the selection is based on the item X  X  relevance to the user or the user X  X  location as well as its recent popularity on social media, i.e., Twitter and Facebook. Figure 2 shows an example recommended article.

All articles are shown in the same style, providing a cohe-sive and smooth experience. The header image for an article is picked based on image quality and positioning in the origi-nal text, which is followed by the title and the full text of the article. In the case of a video, the video itself is positioned at the top, followed by the title and any textual description if available on the original site. There is a reactions bar at the bottom of each article, which lists users who liked the recommended item, ordered by social closeness or similarity to the user.

To get to the next recommendation, the user needs to either like or skip the current item by swiping left or right, respectively (see Figure 2). The metaphor used is that of a stack of cards, where the user has to flick the top card out of the way to see the next card. This provides a playful element to the reading experience.

All liked stories are saved by the system and can be ac-cessed through the user X  X  profile area and can also be read offline. The explicit feedback of the like/skip actions as well as implicit signals, such as the time the user spent on an ar-ticle, are used to continually update the user X  X  model, thus learning more about the user X  X  evolving interests. The feed-back is also applied to tune the user X  X  preferences over the various sources that compose the user X  X  feed.
The system is built using a microservices architecture, with separate services, for example, to perform ingestion of new content via Twitter, Facebook or RSS, content qual-ity assessment (to determine whether to ingest a page), or generation of recommendations.

The front-end is implemented for Android phones in Java, which connects to the back-end via a restful API. User mod-els and recommendations are generated using scikit-learn li-braries and in-house developed services and methods. Most components are deployed using Docker together with Amazon EC2 Container Service.
Ingestion components process a number of incoming streams of content from RSS, Twitter and Facebook. The content is rendered (HTML content of URLs downloaded), passed through a series of quality filters and subsequently a range of features and media are extracted. Exact duplicates, e.g., when the same article is tweeted by multiple people are re-moved at this stage. A fuzzy, content based filter is used later on in the pipeline, for example, to identify when the same story is published by multiple outlets, albeit with dif-ferent details and in different editorial styles. Logistic Re-gression classifiers are used to assign topic labels, e.g., busi-ness, technology, football, etc., to the ingested articles. Con-tent is then indexed and stored in Elasticsearch 3 . For each ingested page, we maintain our own social media share and like counts, tracking their popularity on the Web.

At the time of writing, with just over 100k installs, the system processes around 200 million tweets a day, result-ing in over 100k articles curated by the Lumi users (after quality filtering and deduping), which then make it into the recommendable content pool. At signup, the public pages in a new user X  X  Twitter or Facebook feeds (i.e., public pages published by those the user is following) are analysed and an initial user model is built. As some feeds may be noisy or not necessarily representative of the user X  X  interests, we impose quality thresholds before a model can be built. While the model building is taking place in the background, the user is shown local and global trending stories. Stories explicitly liked by the user (swipe right) and stories that the user spent at least thirty seconds reading are also used as positive samples when training the user X  X  model. A key stage of the model building is the feature extraction. We extract a wide range of features, including standard word features as well as categorical data and com-bine these within a single model in order to support users X  topical interests and source preferences. We employ feature hashing to keep model sizes small. Once a model is built, the cache of stories already on the device is flushed and the new feed, containing personalised recommendations is sent to the device.
Users X  respective models are updated based on their on-going online activities, e.g. Twitter or Facebook, as well as based on their in-app actions, e.g. when they read, swipe to like or swipe to skip a story. For scalability, we follow an incremental model updating approach. Model updating happens as a background process, which loops through users in a staggered way, prioritising more active users first. This https://www.elastic.co/products/elasticsearch ensures that users ,who use Lumi multiple times a day al-ways have up to date models and fresh recommendations.
Trending content is identified by monitoring social media, e.g. likes on Facebook and tweets on Twitter. Locally trend-ing stories in a given country or region are identified through content that is popular with users who share the same loca-tion. A particular challenge with trending content detection is that most social media share counts are heavily biased to US and UK interests, so we built our own location specific trending score method, which biases towards the sites and topics that are relevant to the user X  X  location.
For each ingested page, each user X  X  model is used to gen-erate relevance scores, which are then stored in Amazon Dy-namoDB against the user. This is run as a background pro-cess, which generates recommendations for users even when they are not online, so that they don X  X  miss out on interest-ing content. Relevance scores are calculated on batches of incoming pages, against all the user models, starting with more active users, similarly to how model updating is per-formed.
Lumi users can follow each other and discover interesting content that was liked by those they follow. Recommen-dations on who to follow are based on the relevance of the suggested user X  X  liked items to the current user X  X  interests as well as based on existing social links in the user X  X  Twitter and Facebook networks.

When users follow other Lumi users, they also get to see stories that were liked by those they follow. The selection of these stories combines factors such as the user X  X  closeness to the followed users, e.g., reciprocal relationship, similarity of interests, as well as the popularity of the liked story and its freshness. Similarly, stories liked by the user are shared to the user X  X  followers in their Lumi social network. The reactions of their followers on these shared stories are then fed back to the user.
Similarly to social content, articles from the user X  X  Twitter or Facebook feed are selected based on timeliness, social factors and popularity and are then mixed into the user X  X  feed.
In order to provide diverse content, a user X  X  feed is made up of content from the model-based recommendations, from local or global trending news, content that is directly streamed from their Twitter and/or Facebook feeds and social content that has been shared on Lumi by users that the current user is following. When a mobile client requests new recommen-dations, the top ranking items are returned from all the different sources that are available for the given user. The ranking function takes into account both the relevance of an item to the user X  X  interests and its local or global popularity.
The preferences over the different sources are learnt and continually tuned based on the user X  X  interactions. For this we use a Bayesian update process, normalised across the user X  X  actions and across other users. Diversity across the recommended content is ensured by optimising the order of stories from different sources in the feed as well as using the calculated similarity between articles. This is where the fuzzy deduping takes place, making sure that the user is rec-ommended an article on a given story of interest from their preferred outlet, while ensuring that they are not recom-mended too similar articles related to the same story from other outlets.
Our ultimate goal is to make an app that people want to use every day: we want to optimise for user retention. How-ever it takes a long time to measure the impact on retention, and we have found a metric that correlates closely with it, namely, the number of recommendations that a user spends over thirty seconds reading (from now on we refer to this just as  X  X eading X ). This is a natural metric to use for a news app, and it allows us to iterate much faster when trying out different recommendation algorithms.

To account for natural variations in the user-base, and different users X  propensity for reading, we use split testing on individual recommendations, so that each user gets rec-ommendations from a variety of sources or algorithms. This allows us to see how many users prefer one source or al-gorithm to another, giving a reliable way to identify when recommendations are working or not. If we were to split the recommendations across users so that some users got one type of recommendation and some users got another, it would be harder to trust our results because some users naturally read more than others.

We use a Bayesian formula due to Evan Miller 4 to compare two types of recommendations. Specifically, we assume that there is some probability p A that a user will read a page of type A . For a new type of recommendation, B , we then estimate P ( p B &gt; p A ), the probability that the user reads a page of type B is greater than the probability that they read a page of type A . Given that the user has read r pages of type A and been presented with s A pages of the same type that they have not read, then this probability can be estimated by where B is the beta function. We evaluate this probability for each user, and look at the proportion of users where this probability exceeds a threshold of 0.9. If the proportion is high, we can be fairly certain that recommendations of type B are preferred by users.
Personalised recommendation of news and media content in general paves the way for solving the information over-load and attention scarcity problem, especially in the face of the recent increase in content publishing, including citizen journalism and other user generated content. This demo pa-per presents the development of a personalised mobile news recommender system.

The presented system is the first in its class to provide per-sonalised feeds by combining a number of different sources http://www.evanmiller.org/bayesian-ab-testing.html and model-based recommendations over a crowd curated content pool. The system non-intrusively learns users X  inter-ests from their Twitter or Facebook activities and responds to their feedback actions when reading recommended items.
It is a complex system with many moving parts that build on a combination of machine learning methods as well as information extraction and retrieval technologies to provide users with an experience of diverse, fresh, relevant content feed in a simple swiping user interface. The assessment of how recommender systems may perform in this setting with noisy and sparse data and online user feedbacks is a key challenge to deliver this service.

For future work, we will investigate combining topic based content streams into a user X  X  feed to increase coverage across user X  X  interest silos. In addition, we will experiment with various visualisations of the user X  X  profile (their liked sto-ries), for example, grouping liked stories by topics.
Lumi is a result of the efforts of a great team, see https://lumi.do/about/team . [1] M. Constantinides, J. Dowell, D. Johnson, and [2] C. Esiyok, B. Kille, B.-J. Jain, F. Hopfgartner, and [3] F. Garcin and B. Faltings. Pen recsys: A personalized [4] F. Garcin, F. Galle, and B. Faltings. Focal: A [5] J. A. Gulla, A. D. Fidjest X l, X. Su, and H. Castejon. [6] I. Ilievski and S. Roy. Personalized news [7] D. Lagun and M. Lalmas. Understanding user attention [8] A. Said, J. Lin, A. Bellog  X  X n, and A. de Vries. A month [9] M. Tavakolifard, J. A. Gulla, K. C. Almeroth, J. E.
