 1. Introduction
Proper dimensional tolerancing is critical to the success or failure of the functioning of mechanical designs. Mechanical systems are represented by parts using geometric primitives, all of which describe ideal shapes. However, actual manufactured parts are necessarily imperfect approximations to those ideal shapes. Therefore, it is necessary to specify tolerancing informa-tion during design so that it can be decided whether a manufactured part is acceptably close to the designed ideal during inspection.

While many of the actions during the detailed design process are automated, dimensional tolerancing, involve intense decision-making, and therefore, remains a time-consuming and human-intensive activity in the design and manufacturing processes. Typically, upon building the preliminary design, a designer sequentially spends a significant amount of time re-dimensioning features and  X  X nnotating X  certain tolerancing information. As correctly pointed out in ( Shen et al., 2005 ),  X  X  X anual charting is tedious and error prone, hence, attempts have been made for automation X  X . Radack and Sterling (1994) lamented that  X  X  X he designer is left with the responsibility of ensuring that the tolerances are complete and cons istent. The systems do not ensure that tolerances are reasonable or meaningful X  X . This is certainly true in the case of traditional 2-D drawing-based manufacturing as well as the up-and-coming route of releasing the mechanical database in electronic form ( Rezayat, 2000 ). For such a purpose, standards developed under ISO (International Organization for Standardiza-tion) such as ISO 10303 Product Data Representation and Exchange (STEP) Part 42  X  X  X eometric and Topological Representation X  X  ( ISO, 1999 ) and Part 47  X  X  X hape variation tolerances X  X  ( ISO, 1997 ) emphasize the proper definition a nd representation of shapes, dimensions, and tolerances. Par ameters necessary for the proper implementation of automatic tolerancing schemes and geometric data exchange are also controlled. Such definitions and practices include: tolerances as constraint s on the shape characteristics of a product, representing geometric and plus X  X inus tolerances, repre-sentation of tolerance values, syn thesis and analysis of tolerances, dimensioning and tolerancing pract ices, and presentation of toler-ances on engineering drawings.
 To mimic the designer-expert, some best-of-class mechanical
CAD/CAE/CAM platforms have received their fair share in making them generally more intelligent through the use of artificial intelligence (AI) techniques ( Roy, 1994 ; Finger et al., 2000 ). Given such applications, the use of AI as applied to design and engineering disciplines has of late become indispensable. One significant product of this synergy is what has become to be generically known as knowledge-based systems (KBS). The terminology broadly refers to intelligent software programs that apply expert knowledge to the solu tion of problems. The theoretical and methodological foundation of AI as applies to aspects of mechanical design in general is of great interest ( Chapman, 1999 ).
Specific to tolerancing, the idea of utilizing computer-based techniques (mainly computer-aided tolerancing, CAT) ( Chiesi and
Governi, 2003 ; Shen, 2003 ) for the purpose of automating tolerance generation and modelling to enhance the process of specifying proper tolerances is an area of active research ( Wang and Ozsoy, 1993 ; King and de Sam Lazaro, 1994 ; Desrochers, 2003 ; Wu and Rao, 2004 ; Hu and Peng, 2007 ). The idea being is to develop rule-based expert systems to help the designer create complete and functional designs with appropriate dimensions and tolerances in the design stage. The completeness of the design database being a manufactur-ing requirement, the 3-D database description of the part should contain meaningful geometric attributes: dimensions, tolerances, and factors of form (flatness, squareness, etc.) as alluded to in the above-mentioned ISO standards.

Prime of the tolerancing methods are the dimensional tolerancing method and the geometric dimensioning and tolerancing (GD&amp;T) method. While the former is the classical method which works in a fairly linear fashion, the more demanding GD&amp;T methodology requires that the complete description of the part should contain meaningful geometric attributes: dimensions, tolerances, as well as factors of form (flatness, squareness, etc.) ( ANSI, 1994a ; ANSI, 1994b ; Meadows, 1995 ). For proper dimensional tolerancing, it is this domain of tolerancing expertise that must be captured and represented as a design knowledge base (DKB). Ripple Down Rules (RDR) are used for such a foundational representation is this work.
While most design rationale frameworks such as IBIS, COQ or DRL are focused on the initial development of the knowledge base of a system (see, for example the review paper ( Hu et al., 2000 )), RDR shifts the development emphasis to maintenance by blurring the distinction between initial d evelopment and maintenance ( Kang et al., 1998 ). An essential requirement for the development of the KBS is the ease of acquisition and maintenance of the knowledge.
RDR ( Gaines, 1991 ) is a knowledge acquisition method which proved very successful for developing large knowledge bases for classification tasks ( Beydoun et al., 2005 ). With RDR, knowledge maintenance is a simple process which can be done by the user without guidance of a knowledge engineer ( Beydoun and Hoffmann, 2001 ). Furthermore, RDR is optimized for maintenance of proposi-tional rule-bases and ensures very high behavior coverage as the systems evolves ( Menzies and Compton, 1995 ) so that there is no need to import the rule-base in a truth maintenance system (TMS). for dimensional tolerance is presented. A knowledge base targeted towards capturing expert tolerancing knowledge is built.
The system is demonstrated by specifying dimensional tolerances on shafts and mating holes in order to meet desired classes of fit as set by relevant engineering standards. This paper begins with the methodology used to construct the KBS presenting the method of acquiring the design knowledge and the requirements of the knowledge acquisition environments. The knowledge acquisition tool and the software tool are followed. Then, the problem and an illustrative example are presented. Finally the paper closes with concluding remarks. 2. Methodology 2.1. Acquiring design knowledge edge must be acquired. In this work a spiral process of knowledge acquisition is envisaged, similar to ( Linster, 1993 ) of coming stepwise closer and closer to an operationalization of the knowl-edge in question. The present approach follows the work on knowledge acquisition which allows knowledge acquisition and maintenance without a knowledge engineer ( Compton et al., 1994 ; Kang et al., 1998 ).

Experts are usually able to explain their reasoning process on a particular problem instance in rather general terms that cover at least the given concrete next step in their design process.
However, their explanation may be quite inaccurate in the sense that for other design problems their explanation would not deliver the design step they would actually take. Either their explanation would not cover the step they would take or their explanation would suggest design steps they would not actually consider. Thus, an approach similar to ( Hoffmann and Thakar, 1991 ) it is pursued, which allows to incrementally acquiring complex concept definitions without demanding an operational definition from the expert. Rather, the expert is merely required to judge whether the concept applies to particular instances. This is a much more natural task for an expert than to articulate general rules on how to judge on any particular instance.
In ( Beydoun and Hoffmann, 2000 ), Beydoun and Hoffmann presented an approach to incrementally capture search knowl-edge in general based on collecting expert X  X  justifications for their decisions. In this paper, this approach is applied to the tolerancing problem in mechanical design following the method outlined below. Consider this simple expert design process in mechanical engineering for illustration purposes. An expert designer, thinking aloud, may report the following:
I have this new injection molding machine to be designed. In it, there these four (4) shafts that guide the lateral motion of the movable platen which in turn supports the mold X  X  core half. In this platen, I have to locate each one of these 2-inch nominal diameter shafts. Now, each one of these holes should be small enough to allow the shafts to be properly located yet be large enough so that each shaft moves freely without much friction.
I guess I better look up the class fit tables in the design handbook so that I can (1) pick a suitable fit class that meets these constraints and then to (2) calculate the upper and lower limits on the nominal 2-inch dimension for the shaft and its mating hole on the platen. From there, I will dimension the shaft and hole on the drawing so that they can be fabricated to the proper size y
But oh, on a second thought, if I can only use the same platen from this older design. I would have to check the actual measurements of the holes diameter on this old platen as well as the actual shaft diameter that we have in stock. Then, for these actual dimensions, I will look up the dimensional tolerance values in the fit tables to determine the resulting fit. If the fit class is good enough tolerance-wise, I think the design will work and lots of money will be saved by not having to fabricate a new platen y hmm, this just might work out
Such an expert design process involves more complex reason-ing than just the association of design sequences which were useful in other design instances. For example it involves some causal reasoning on a rather abstract level. However, it seems difficult to devise a general inference mechanism, which could accommodate such expert reasoning. This is particularly the case, since much of such reasoning will not be at a conscious level to the expert. More applicable to tolerancing, the example illustrates that such a dimensional tolerancing knowledge management system can be utilized either to (1) given a class fit, specify tolerances for nominal dimensions or (2) given actual dimensions, back out the corresponding fit. In Section 5 below, these two schemes are referred to as the  X  X orward scheme X  and the  X  X ack-ward scheme X , respectively. 2.2. Requirements for a KA environment
A suitable learning environment for the design software system has to support the following steps for the building of a KBS: 1. The criteria being used to select design steps worthwhile must be very flexible, i.e. the following options should be available:
The expert can freely characterise design problems as well as design actions applied to these problems.

The revision or modification or amendment of initial char-acterization of problems and actions must be possible. 2. As indicated in the example of a mechanical engineer design process, how design proceeds may depend on the findings of intermediate design steps encountered earlier in the design process. To accommodate this sort of reasoning, the system should log the intermediate design steps. This reduces computational requirements as many characteristics persist over sequences of design steps. Furthermore, the expert definable selection criteria for design steps must allow conditions which involve such findings of earlier encountered design steps. 3. A design task may have components and the expert X  X  comments will often describe relations between these compo-nents. Thus, a representation that is more powerful than propositional logic to represent expert comments about intermediate design steps is required. This representation should be adaptable easily for various design tasks. To address these issues the RDR ( Beydoun and Hoffmann, 2000 )is extended with the ability to accommodate domain specific primitives during the knowledge acquisition process. 4. The workbench must allow and accommodate the expert X  X  suggestions. That is the expert will not only comment on the solutions found by the system, she/he must suggest and justify a solution to the system when it fails to find one. When a suggestion is made, new design actions may get introduced to the system. Hence accepting suggestions ensures that the design actions used by the system are effective and speeds the knowledge acquisition process.

The fulfilment of the above requirements within the present framework is discussed in the following sections. 3. The knowledge acquisition tool
Ripple Down Rules (RDR) are used as foundational representa-tion for the present workbench. An essential requirement of the workbench is the ease of acquisition and maintenance of the search knowledge. For this purpose, RDR is used as a starting point for the implementation of the KBS and the learning module.
An RDR tree is a collection of simple rules organised in a tree structure. Every rule can have two branches to two other rules (a false and a true branch). Examples are shown in Fig. 1 ( Beydoun and Hoffmann, 1997 ) where every block represents a simple RDR.
When a rule applies a true branch is taken, otherwise a false branch is taken. The root node of an RDR tree contains the default rule whose condition is always satisfied. The root node is of the form  X  X  If true then default conclusion  X  X . The default rule has only a true-branch. In RDR, if a  X  X rue-branch X  leads to a terminal node t and the condition of t is not fulfilled the conclusion of the rule in the parent node of t is taken. If a  X  X alse-branch X  leads to a terminal node t and the condition of t is not fulfilled, then the conclusion of the last rule satisfied  X  X ippling down X  to t is returned by the knowledge base . The knowledge base is guaranteed to return a conclusion as at least the default rule is satisfied  X  X ippling down X  to t. Hence the inference is handled implicitly within the structure of the knowledge. When the expert disagrees with the conclusion returned by the knowledge base, the knowledge base is said to fail and requires modification.

An important strength of RDRs is the fact that they can be easily modified in order to become consistent with a new case without becoming inconsistent with previously classified cases.
This is because every time a rule r is added to a parent rule p , r classifies the case which triggered its addition (the so-called cornerstone case) correctly, and excludes all cases which are correctly classified by p. In their simple form, RDRs use simple attribute-value combinations as conditions for the rules ( Gaines, 1991 ; Beydoun and Hoffmann, 2001 ; Beydoun et al., 2005 ). When the expert enters a new rule r , she/he chooses the conditions of r from the so-called  X  X ifference list X  ( Compton and Jansen, 1990 ).
This list contains attributes satisfied by the case which triggered addition or r , and it excludes all attributes satisfied by any of the cases covered by the parent of r. 4. System architecture of the DesignAssistant software system. A brief discussion follows which explains the function of each subsystem. 1. User interface: This module reads the expert input and 2. Knowledge acquisition module: gets the expert input through 3. (Search control) knowledge database: It stores what the expert 4. Knowledge acquisition assistant: provides hints to the expert while ensuring the consistency of the knowledge base with the case database. It relies on past interactions with the expert stored in the case database to give these hints. 5. Knowledge (case) database: contains all cases classified by the expert. It allows retrieval of these cases according to their classifications time stamped. Thus, this database contains a complete history of the interactions with the expert. Although, not all of the interactions affect the knowledge base develop-ment, they are essential for the functionality of the knowledge acquisition assistant. 6. Search engine: It controls the generation of the search tree through interactions with the knowledge base. It saves local decisions about search tree nodes in the working memory. It also examines the pruned search tree and chooses an answer according to one of several evaluation criteria set by the user. 7. Domain specific search operators module: contains a set of search operators forming an instance generator. Given a particular search state, this module can generate all immediate next possible states. This module also allows the knowledge base to interpret any domain specific primitives used by the expert while describing his/her knowledge to the system. Also is where mathematical functions are declared. 8. Working memory: stores the progress of the search, which is often used by the expert to explain his/her decisions. In electronic circuit design, for example, and solving a component placement problem, a circuit designer chooses his/her next step based on a rough plan; this plan prevails in the progress towards finding a problem solution. Consequently, this pro-gress is also used by the knowledge base to make decisions.
The working memory also stores higher order features of steps (i.e. search states) of the evolving search plan. This reduces computational requirements as these features can get used again at a later stage of the search. 9. Dimensional tolerancing module: this constitutes the  X  X ack end X  of the DesignAssistant system and may be a standalone module or a module that interfaces with an existing CAD tool.
It contains the part X  X  engineering description: shape, size (nominal dimensions), dimensional tolerances, and factors of fit, form, and function. It inputs nominal dimensions into the intelligent modules of the KA system and retrieves the upper and lower values on the nominal value, i.e. the desired tolerances. Equally feasible is the inverse problem where the input is a pair of existing dimensions one for the shaft and the other for the hole with this module retrieving an applicable class of fit (if present). 5. The classical fit problem
A classical example common to the discipline of mechanical engineering by which the relative fit of a shaft to a hole is studied ( Shigley and Mischke, 1986 ). Depending on the desired mating functionality between a shaft and a hole, Table 1 lists 31 different classes of interference/clearance fits. These classes cover a wide range of cases varying from loose clearance fit (sliding or running, RC) to tight interference fit (force, FN). In between, there are several variations of locational classes of fit namely: locational clearance (LC), locational transitional (LT), and locational interference (LN). Table 1 lists limit values  X  designated L for the lower tolerance limit and U for the upper tolerance limit. In order to calculate the upper and lower tolerance bounds on the diametrical dimension, the limit values L and U are multiplied by the nominal dimension ( D , diameter of shaft and hole) raised to a power of 0.333 as follows:
The resulting tolerance values have units of mils (1/1000 of an inch). The toleranced dimension is, therefore, arrived at as a bounded value between the lower and the upper tolerance bounds: Toleranced dimension  X  Nominal dimension  X  Upper bound tolerance
Given a desired class of fit (e.g. LC1, LC2), the scheme gives the upper and lower tolerance bounds for the nominal diameter of the shaft/hole. This is conventionally described as the forward scheme. The backward scheme, on the other hand, is described as follows: given actual diametrical dimensions for the shaft and hole, it is desired to correctly identify the resulting class of fit. This latter scheme is demonstrated in the section below where the application in tolerancing is described. 6. Example: NRDR application to dimensional tolerancing
The above stated approach is applied to the tolerancing problem in mechanical design. The classical example of the shaft-in-a-hole mechanical fit problem as introduced above is considered. In the following scheme, the user feeds in one desired diametrical dimension for the shaft and another dimension for the mating hole. To this, the software returns a match to one of 31 possible fit criteria. Two functions are needed for the proper evaluation of this hole X  X haft fit problem. One function is needed for checking if the actual value of the hole or shaft lies within the limits of a certain class of fit. This first function is based on Eq. (1) such that
LD 1 = 3 o  X  R D  X  1000 o UD 1 = 3  X  3  X  where L , U , and D are as defined above and R stands for the actual value of the case for the hole or the shaft. The formula returns true if the inequality is true, otherwise false. The application of Eq. (3) necessitated that RDR is extended to allow for the utilization of mathematical functions and the corresponding  X  X uantitative X  values. This is a major extension over the existing applications where the focus of NRDR development has been on  X  X ualitative X  rules (e.g. chess playing ( Beydoun and Hoffmann, 1997 )). The second function needed to check whether or not the case may be classified as locational is an equality check.
 A  X  B  X  4  X 
A or B may have any value of one of the attributes. Defining a function includes both naming the function and its attributes, as well as specifying the type of each attribute. 6.1. The fits case generator generates cases of hole, shaft, and diameter to be fed to the NRDR program. These cases are such that each one corresponds to a class of fit. With the exception of case LN1 (which was found to fall completely within the limits of the class designated LT5), the tree was built to contain all cases. The tree has a separate rule for each class. (For the excepted case with common limits, the conclusion of either of the two classes LN1 or LT5 was given). are created with the desired values in the described format in order to generate the cases. The first input file / Limits.txt file created by Microsoft Excel. It contains the limits of the classes for which cases are to be generated. It also contains the nominal diameter of the case. Fig. 3 is an example of cases generated where the nominal diameter=1 in (1st column). The 2nd and 3rd columns are the lower and upper limits on the hole, respectively, while the 4th and 5th columns contain those of the shaft. For each class, a case is generated with random hole and shaft values that fit within the given limits. / Locational.txt S is the second file which is also created by Microsoft Excel. It contains only one column. The first row is the name of the cases attribute  X  X  X ocational X  X , the second row is empty, the rest of the rows, in the order of the limits in the / Limits.txt S file, are the values of the  X  X  X ocational X  X  attribute, either  X  X es X  or  X  X o X .

Fits case generator outputs the file / fits_cases.txt S the format of which is similar to that of the cases prepared by Microsoft Excel to be loaded by NRDR. The file contains a random case for each class of fit introduced by the file of the limits. Fig. 4 is an example of such a file where the first row contains the case attribute names and the rest of the rows contain the cases. 6.2. Fits domain construction
Having generated fit cases, a domain (here called Fits Domain ) will have to be constructed. Defining the domain includes case preparation, and function compilation including specifying the names and types of the relevant attributes. For example, the attribute name Nominal Diameter , which represents the nominal diameter of the hole X  X haft system the type of which is defined as  X  X UMBER X . Other attributes are Hole (actual hole diameter) and
Shaft (actual shaft diameter), which are both of the  X  X UMBER X  type. Cases generated from the Fits generator module are then loaded. Defining functions such as (3) involves naming the function and its attributes, as well as specifying the type of each attribute. Function attributes include: Lower Limit of a class of fit for the hole or the shaft, Upper Limit of a class of fit for the hole or the shaft, Real Value of the hole or the shaft, all of which being of the  X  X  X umber X  X  type. For the function in (4), both attributes A and B are defined to be of the  X  X tring X  type. Utilizing Workspace in
Microsoft visual C++, declaring these functions involves an algorithm, which results in passing all the attributes to the function. While declaring the function in (3) and in order to declare the condition for the function, two comparisons (joined with the logical AND operator) are made as shown in Fig. 5 . Note that in the figure  X  X efined X  represents a function that returns true if all the attributes passed to it are pre-defined. Also note that  X  X K X  means the function should return true. If the condition is not satisfied, false is returned. Next in the algorithm, function in (4) is declared in a similar fashion, thus, completing the task of function declaration.
 6.3. The case validation module
Next, the Case validation module performs case validation sequentially starting from the first case of fit designated RC1. The expert is asked whether he accepts the conclusion of the tree. A  X  X EFAULT X  conclusion corresponds to the first rule of the tree that is always true. This default conclusi on only appears if NRDR concludes that no other plausible conclusion exists. Selecting  X  X es X  will keep the conclusion resulting in no changes to the tree. Selecting  X  X o X  requires justification of the refusal of the conclusion. 6.4. Adding rules
A function would have to be selected in order to add a new rule. Fig. 6 shows the functions as they appear in the GUI. The first function is needed to add a condition for the size of the hole. The value of an attribute of a function can be a value entered as text or number. The value will be stored in the rule, and used whenever the rule is used. The value of an attribute of a function can also be an attribute of a case. The value of the cases will not be stored in the rule, but the name of the attribute will be stored. The function will use the value of the specified attribute of the case being evaluated. Nominal diameter is an attribute of the function. The value of this attribute should be the value of the diameter of the case. The list of the combo box contains the attributes of the case. Select  X  X  Diameter _ X  from the list as shown in Fig. 7 .
The next attribute of the function is  X  X ower Limit X . The lower and upper limit values of the hole for the class RC1 are set to 0 and 0.392, respectively. The value of the next attribute, the real value of the hole of the case  X  X eal Value X , should be retrieved from the case by selecting the second entry  X  X  Hole _ X  from the list in Fig. 7 . The first condition for the hole has been added to the rule.
Theconditionfortheshaftneedstobeaddedfortheruletobe complete ( Fig. 8 ). The lower limit of the shaft for RC1 is 0.588. The upper limit is 0.308. Adding the  X  X on-locational X  condition for the function  X  A = B  X  requires that the attribute  X  X ocational X  is assigned the value  X  X o X . To finish creating the rule, the condition:  X  X  Fit designation:
RC1  X  X  is designated. The first rule has just been created. Having validated this case, any situation that belongs to the RC1 class of fit will return the conclusion  X  X  Fit designation: RC1  X  X  as shown in Fig. 9 .
The rest of the rules are added in the same fashion. 6.5. Using the NRDR tree
When the expert has defined all the rules, the fully populated tree is, therefore, saved and will become available for later loading and viewing. Upon viewing, the tree will appear as shown in
Fig. 10 complete with the condition(s) of each rule, the cornerstone case, and the scope of the rule. 7. Discussion and summary mechanical databases (geometries and drawings), the require-ment that dimensions must be properly toleranced to reflect the design intent has been captured in such standards as ISO 10303
Product Data Representation and Exchange (STEP) Part 47  X  X  X hape variation tolerances X  X  ( ISO, 1997 ). The implications of such requirements should be reflected via an increase in the AI content of mechanical computer-aided design and drafting (MCADD) to where tolerancing of dimensions may have to become fully automated in schemes executed during the actual design process and not at a later stage.
 effective intelligent system to incrementally capture expert designer X  X  prescription in dimensional tolerancing. This was accomplished by utilizing a knowledge base system built on the
Nested Ripple Down Rules (NRDR) method. This intelligent system was successfully demonstrated in this paper by automat-ing the process of tolerancing nominal dimensions based on the classical mechanical fit problem between a shaft and a hole. The system is able to perform both forward and backward fit schemes for cases like the one presented above. A forward scheme means that given a class of fit, i.e. LC1, LC2, etc., the software will return the upper and lower tolerance bounds for the nominal shaft/hole diameter of interest. A backward scheme means that given actual hole/shaft diameters the software would correctly identify the relevant class of fit. Such a dimensional tolerancing knowledge management system may be integrated into smart CAD platform (see Fig. 2 ) to help mechanical designers become more effective by automating the task of dimensional tolerancing of their designs in the future. Such a system would help mechanical designers become more effective in the time-consuming dimen-sioning and tolerancing process of their designs given the relative complexity of some tolerancing schemes. Implicit benefits of utilizing such a smart system include: 1) Shortened product development process cycle when compared 2) identify and avoid potential design conflicts and interferences early in the development process, reducing downstream errors, and engineering change orders (ECO X  X ); 3) product lead times will be significantly reduced while improving quality and increasing the product X  X  performance-to-cost ratio.
 Acknowledgements This work was financially supported by the University
Research Board (URB) of the American University of Beirut (AUB). This support is gratefully acknowledged.
 References
