 Meetings and human interactions are integral parts of workplace dynamics for communicating between memb ers participating in a meeting. During a meeting, several kinds of human interactions may occur. Examples include (i) proposing an idea, (ii) positively or negatively reacting to a proposal, (iii) acceptance of a proposal. To gather significant infor mation regarding the success rate of the decision made in a meeting, one can mine patterns from human interactions occurred in the meeting.

Data mining is useful in discovering implicit, previously unknown, and po-tentially valuable information or knowledge from large datasets. For instance, frequent pattern mining [1,4,7] is helpful in finding frequently occurring patterns, such as interaction patterns from meetings. The discovered interaction patterns help to (i) estimate the effectiveness of d ecisions made in meetings, (ii) designate whether a meeting discussion is fruitful , (iii) compare two meeting discussions using interaction flow as a key feature [12] and (iv) index meetings for further ease of access in database.

To acquire the semantic information from a meeting, researchers extracted the meeting contents and represented them in a machine readable format. For instance, Waibel et al. [9] presented a m eeting browser that describes the dy-namics of human interactions. McCowan et al. [5] recognized group actions in meetings by modeling the joint behavior of participants and expressed group actions as a two-layer process by a hidden Markov model framework. Otsuka et al. [6] used gaze, head gestures, and utterances to determine who responds to whom in multiparty face-to-face conversations. Yu et al. [11] proposed a mul-timodal approach for interaction recognit ion; they [12] also used a tree-based mining method to discover frequent patterns from human interactions occurred in meetings. Such a method focuses mostly on capturing direct parent-child re-lations. However, there are other triggering relations in meetings as illustrated in Example 1.
 Example 1. Let us consider a scenario about a meeting of four persons (e.g., professor A , assistant professor B , and two lecturers C &amp; D ) with different weights/ranks. At the beginning of the meeting, B proposes an idea which trig-gers three interactions: (i) C expresses his negative opinion towards the proposed idea, (ii) C asks D for opinion on the idea, and (iii) A expresses some positive opinion towards the idea. Now, the interaction of C  X  X  request for D  X  X  opinion triggers a single interaction performed by D . Although the response of D is triggered by C  X  X  request of opinion, such a response is generally influenced by A  X  X  positive opinion. To elaborate, D may initially feel negatively regarding B  X  X  proposed idea. But, after listening to A  X  X  positive comments, B may change his mind and lean towards a neutral or even positive opinion.
 Example 1 reveals that (i) an interaction can be triggered or influenced by multi-ple interactions and (ii) the extent of influence can be significantly dependent on the weight/rank of the person triggering that interaction. However, the afore-mentioned tree-based method [12] does not capture these triggering relations. Moreover, as this method does not associate the actions with the rank of the person causing the actions, it does not distinguish the same kinds of actions performed by two persons having different weights/ranks.

Observing that (i) directed acyclic graphs (DAGs) and trees are both spe-cializations of graphs and (ii) trees may not capture all triggering relations or person X  X  weight/rank, we explore the use of DAGs (as alternatives to trees) for modeling meetings. As interactions occur in meetings flow in only one direc-tion with respect to time (i.e., no cycle), DAGs would be a logical choice for modeling meetings. A key contribution of this paper is our DAG-based model-ing of interactions occurred i n meetings. In particular, DAGs capture two kinds of relations: (i) temporal relations and (ii) triggering relations (cf. trees capture temporal relations but not all triggering relations). By doing so, each interaction is represented by a node in a DAG, and the label of the node indicates the class of interaction. Moreover, eve ry node is associated with a weight , indicating the rank of the person who initiates the interaction.

Another key contribution of this paper is our DAG-based mining of weighted frequent interaction patterns from meet ings. Note that, Chen et al. [3] mined DAG patterns from DAG databases. Termier et al. [8] presented DigDag as the first algorithm to mine closed frequent embedded sub-DAGs. Werth et al. [10] designed and implemented a DAG miner for mining DAGs from DAG databases. However, these related works do not consider weights of nodes in DAGs, let alone mining weighted frequent interaction patterns. Furthermore, there exist related works [2] that mine weighted frequent patterns from transactional databases (cf. DAGs ). Inspired by these works, we integrate DAG-based mining and interac-tion pattern mining [10] with weighted frequent pattern mining [2] to form our WDAGmeet algorithm for W eighted DAG -based meet ing mining.

The rest of this paper is organized as follows. Section 2 introduces our DAG-based representation of interaction flow in meetings. Section 3 presents our weighted DAG-based frequent interaction pattern mining. Evaluation results are shown in Section 4, and conclusions are given in Section 5. In this section, we introduce a DAG-based representation of interaction flow in decision-making meetings. Human intera ctions occurred in these meetings can be mainly categorized into the following nine classes: 1. PRO: A participant proposes an idea. 2. ASK: A participant asks for opinion regarding a proposal. 3. POS: A participant expresses positive attitude towards a proposal. 4. NEG: A participant expresses negative attitude towards a proposal. 5. ACK: A participant agrees on some other X  X  comment, decision, or attitude. 6. COM: A participant comments on another action (PRO, ACK, POS, etc.). 7. REQ: A participant requests information regarding an issue. 8. ACC: A participant accepts the proposed idea. 9. REJ: A participant rejects the proposed idea.
 When building a DAG to model the interaction flow occurred in meetings, we label each node in the DAG with one of the above nine classes of human interactions.
To further specify the rank of the person who initiated the interaction, we assign a weight with value ranging from 1 to n inclusive (e.g., n =3, 4 or 5). Al-though the same response can be made from different persons of different ranks, a response from a person having a heavier weight usually strongly influences the decision making process than that from a person of a lighter weight. Each node in the weighted DAG in Fig. 1 denotes an instance of human interaction occurred in a meeting. The l abel and weight of the nodes indicate the class of the interaction and the correspondi ng impact factor, respectively.
So far, we have categorized interactions into nine classes (e.g., PRO, ASK) based on the activities in a meeting. From the perspective of spontaneity, these interactions can also be categorized into two types of interactions: (i) triggering interaction and (ii) triggered interaction . For example, the PRO node in Fig. 1 re-flects a triggering interaction, which represents an assistant professor proposes an idea spontaneously. The remaining nodes (POS, ASK &amp; NEG) reflect three trig-gered interactions, which occur in respons e to the triggering interaction. Directed edges between nodes indicate triggering relations between the nodes, and the arrows point from the triggering interaction to the triggered one. Consequently, we generate a DAG-based interaction flow diagram for modeling meetings.
Besides those triggering relations, our proposed DAG-based representation of interaction flow also captures temporal relations . To elaborate, a DAG repre-sents the temporal relations by topological level. Nodes of a certain topological level appear temporally before nodes of the next/lower level. Within the same topological level, the node on the left a ppears temporally before the node on the right. See Example 2.
 Example 2. Fig. 2 shows a sample session of a meeting, in which an assistant professor A proposes an idea. Triggered by A  X  X  proposed idea, one of his col-leagues B first expresses her negative opinion and then asks others X  opinions. On the other hand, a professor C (with heavier weight) expresses his positive opinion on A  X  X  idea. An associate professor D first comments on B  X  X  negative opinions. Based on both his comments and B  X  X  negative opinion, D then ex-presses his negative opinion in response to B  X  X  asking of opinion. Finally, based on two negative opinion from assistant professor B and associate professor D as well as the positive opinion from professor C , professor E accepts A  X  X  idea, biased to the interaction performed by person of higher rank. Note that, Fig. 2 captures not only single triggering relations but also interactions triggered by multiple triggering interactions. Once the DAG-based interaction flow diagram is generated, we can mine frequent interaction patterns (sub-DAG patterns) from the diagram. Before describing the key steps in this interaction pattern mining process, let us consider the following definitions.
 Definition 1 (DAG-Based Interaction Flow). One single meeting may con-sist of several sessions. Interaction fl ow within each session can be represented by a DAG D =( V,E ), where V = { v 1 ,v 2 ,...,v n } is a set of n vertices and E = { e 1 ,e 2 ,...,e m } is a set of m directed edges. All DAGs are connected acyclic graphs and no two DAGs, representing sessions of the same meeting, are con-nected to each other. Each node v i is assigned a class label L ( v i ), where L ( v i )  X  {
PRO, ASK, POS, NEG, ACK, COM, REQ, ACC, REJ } . Each node is asso-ciated with a weight W ( v i ) that carries information regarding the (absolute or relative) rank of a participant who initiates an interaction in a meeting. Each edge is a directed connection b etween two vertices, i.e., E = { ( v i ,v j ) | 1  X  i,j  X  n ; v i ,v j  X  V } . Here, v i denotes the source/origin of the directed edge and v j denotes the destination of that edge. An edge from v i to v j implies that v i (com-pletely or partially) triggers v j . The levels of interactions can be determined according to their topological orders. Interactions of higher levels occur earlier than those of lower levels. Within the same level, interactions on the left occur earlier than those on the right.
 Definition 2 (Sub-DAG and Super-DAG). Consider two DAGs D =( V,E ) and D =( V ,E ) such that (i) D is a connected DAG; (ii) V  X  V ; (iii) E  X  E ; (iv) for each v i  X  V ,L ( v i )= L ( v i )and W ( v i )= W ( v i )fora v i  X  V ;(v)for each e =( v i ,v j )  X  E ,these v i &amp; v j  X  V are mapped to the corresponding v i &amp; v j  X  V . Then, D is a sub-DAG of D .Equivalently, D is a super-DAG of D .
 Definition 3 (Support). Given (i) a sub-DAG D and (ii) a database DB ,the support of D is defined by the following equation: This definition of support allows us to discover sub-DAGs containing nodes that are not too frequent but are associated with heavy weights. See Example 3. Example 3. Consider a sample DAG D , consisting of 10 directed edges (i.e., 10 triggering relations) on 20 nodes (i.e., 20 interactions): Professor A proposes three ideas (PRO), and each of them are rejected (REJ) by Professor B . Lec-turer C makes 7 comments (COM), and ea ch of them triggers Lecturer F  X  X  comments (COM). In other words, D =( V,E ), where (i) V = { v 1 ,...,v 20 } , (ii) L ( v 1 )= L ( v 3 )= L ( v 5 ) = PRO, (iii) L ( v 2 )= L ( v 4 )= L ( v 6 )=REJ, (vi) W ( v 1 )= ... = W ( v 6 ) = 5, and (vii) W ( v 7 )= ... = W ( v 20 )=1.Here,the frequency of the pattern  X  A proposes an idea, which is rejected by B  X  X s3;the frequency of another pattern  X  C makes a comment, which is commented by F  X  is 7. Between them, the first pattern is more interesting than the second one because interactions between persons of higher rank (i.e., heavier weights) are usually more important and useful in analyzing decision-making meetings even when the frequency of these interactions is not too high.
 Definition 4 (Frequent Pattern or Fragment). Sub-DAGs, having support greater than the user-specific minimum support threshold minsup are considered frequent sub-DAG pattern (or fragment) .
 Definition 5 (Mining Frequent Interaction Patterns from Meeting DB). Given (i) a meeting database DB capturing human interactions in meet-ings, (ii) a user-specific minimum support threshold minsup , the problem of mining frequent interaction patterns is to discover from DB every frequent in-teraction pattern, i.e., every sub-DAG D having sup ( D )  X  minsup . Our proposed weighted DAG-based meeting mining algorithm ( WDAGmeet ) discovers frequent interaction patterns in the form of frequent sub-DAGs from weighted DAG database DB as follows. The algorithm first generates a set of all frequent nodes in DB . It then expands these nodes (i.e., singleton sub-DAGs) using the following four expansion rules: 1. New Root: A new root (with no incoming edge) is inserted. 2. New Level: A new topological level is intr oduced with the insertion of a 3. New Node: A new node (with a label lexicographically greater than the 4. New Edge: A new edge from a previously inserted node to the most recently See Example 4 for illustration of these rules. Note that, these rules are designed in such a way that no duplicate DAG is generated. In the process of expansion of already found frequent sub-DAGs, duplicate sub-DAGs may be generated. Although these duplicates do not affect th e mining result, they certainly increase Algorithm 1. WDAGmeet the runtime of the algorithm. To avoid generating duplicates, all newly expanded sub-DAGs are checked for duplicate canonical form [10] because the canonical form is unique for all duplicate isomorphic DAGs.
 Example 4. Consider Fig. 3, which shows some examples of applications of the four expansion rules: WDAGmeet algorithm (a) inserts a new root PRO, (b) in-serts another new root REQ, and (c) introduces a new level with the insertion of POS and of a triggering relation from PRO to POS. Afterwards, WDAGmeet (d) inserts into the current level a new node NEG triggered by REQ, (e) adds a new edge from PRO to the most recently inserted NEG. Similarly, WDAG-meet (f) introduces another new level (with the insertion of NEG, to which a triggering relation from another NEG is inserted) and (g) adds a new edge from PRO.
 Note that, some of the expanded DAGs are connected, but some are not. WDAG-meet algorithm only inserts frequent connected DAGs to the mining result. The algorithm repeats the above expansion process until no new expansion is impossible. The pseudocode is given in Algorithm 1, and Fig. 4 illustrates the first few steps of the algorithm.

One important observation on the WDAGmeet algorithm is that, when the patterns are expanded, it adds not only frequent nodes but all possible nodes. The reason is that, the expansion rules do not satisfy the anti-monotone prop-erty: A pattern f may not be frequent because of low average-weight of the nodes contained in it, but connecting some nod es (of heavier weight or high support) can make f frequent. First, we evaluated the functionality of our proposed WDAGmeet algorithm by comparing it with the existing tree-based mining method [12]. The tree-based method misses some important frequent patterns because it does not capture all triggering relations. As illustrated in Fig. 5, only one triggering relation is captured in the tree database for each triggered interaction. For instance, the tree captures the interaction ASK triggered by PRO but misses the one triggered by POS. Similarly, the tree captures the interaction NEG triggered by PRO but misses the one triggered by ASK. As such, the tree-based method does not generate the pattern POS-ASK-NEG as these three nodes are not directly connected in the tree. In fact, fragments co ntaining siblings or ancestor X  X  siblings of a node cannot be connected in the a bsence of their common ancestor in a tree. Hence, if the common a ncestor is not frequent, the tree mining method fails to mine such fragments as a frequent pattern. In contrast, being internally connected with partial triggering relati ons, WDAGmeet discovers this kind of frequent interaction patterns, such as POS-ASK-NEG in the above example. This kind of frequent patterns revea ls highly correlated interactions.
Next, we evaluated empirically the per formance and effectiveness of WDAG-meet algorithm, which was implemented in C++. In our experiments, we used datasets based on sample meetings. We generated 10 synthetic datasets to simu-late real meeting scenarios. Each dataset contains a description of (i) the meeting captured in a DAG, (ii) labeled interactions with their corresponding weights, and (iii) triggering relations (i.e. directed edges of the DAG). We used five dis-tinct weights for ranking each nine interaction with one of the nine class labels. Experiments were run using an Intel Core i5 2.50 GHz machine with 2.94 GB of RAM and 32 bit OS (Windows 7).

Table 1 shows the number of discovered frequent patterns and the elapsed time to discover these frequent patterns when using different minimum support minsup threshold values performed on 10 different datasets having different sizes. Table 1 shows that, as the number of frequent patterns increased, the required time to discover these frequent patterns also increased.

Fig. 6 plots the number of frequent patterns and elapsed time vs. DB size in the right and left, respectively. One can observe that, on average, the number of discovered frequent patterns (or fragments) was loosely related to the size of DAGs. Dense DAGs usually generated more frequent patterns than sparse ones. When patterns were generated, it was mo re likely to locate those patterns in a dense DAG than a sparse one because the dense DAG contains most of the probable edges. In contrast, the probability of finding a frequent pattern was low in a sparse DAG. The increment of DB size can partially represent the sparseness of the DAG capturing interactions in meetings.

Then, we compared the performance of WDAGmeet algorithm with that of the existing tree-based mining method [12] empirically. Table 2 shows our experimental results, which can be explained as follows. During the mining process, any frequent pattern must be connected because neither WDAGmeet nor the tree-based method can search DB for a pattern or fragment that is not connected. As discussed earlier, the tree-based mining method missed some fre-quent patterns. In contrast, WDAGmeet algorithm did not miss these patterns. Moreover, WDAGmeet algorithm used weig hted nodes for representing the im-portance/rank of persons triggering each interaction. This cr iterion decreased the number of frequent patterns discovered by WDAGmeet. Moreover, WDAG-meet distinguished multiple interactions initiated by different persons having different weights. In contrast, the tree-based method did not distinguish mul-tiple interactions. Hence, as WDAGmeet captures all triggering and temporal relations, it generated fewer frequent patterns and did not miss any frequent patterns. In contrast, the tree-based method generat ed more frequent patterns but also missed some frequent patterns.

To summarize, WDAGmeet algorithm discov ered frequent interaction patterns from weighted DAGs capturing human interactions in meetings in reasonable amounts of time. When minsup increased, the number of discovered frequent pat-terns decreased and the elapsed time al so decreased. When compared with the existing tree-based method (which captures few triggering and all temporal relations), WDAGmeet algorithm captures all triggering relations as well as all temporal relations. Moreover, WDAGmeet algorithm does not miss any frequent interaction patterns. As an ongoing work, we plan to conduct more extensive ex-periments and compare the precision, r ecall and F-measure of our proposed WDAGmeet algorithm with those of the existing tree-based method. In this paper, we modeled human interactions in meetings using a weighted di-rected acyclic graph (DAG). The weight indicates the rank or importance of the person who initiates one of the nine classes of interactions. Such a DAG-based representation of interaction flow captures both (i) temporal relations and (ii) triggering relations (which connect the triggering interaction to the triggered interaction) in meetings. Moreover, we also proposed DAG-based frequent pat-tern mining from interaction flow DAGs. Specifically, our proposed WDAGmeet algorithm mines weighted DAG-based meeting for frequent interaction patterns. The key idea is to model each session (especially decision-making sessions) of a meeting using DAGs. Moreover, DAGs al so include patterns or fragments that are connected without any common ances tor, previously missed by the exist-ing tree-based method. The integration of weight assignment to each interaction makes the meeting mining process more robust and worthwhile.

Evaluation results show that WDAGmeet algorithm was more effective in discovering frequent interaction patte rns from weighted DAGs than the existing tree-based method. The mined frequent sub-DAGs can be served as foundations to further association rule mining. As ongoing work, we plan to integrate other types of human interactions. Moreover, the resulting mining algorithm can be customized to handle other classes of m eetings such as medical interviews and business discussions. The property of assigning weights to the interactions and preserving all kinds of partially triggering relations add functionality of WDAG-meet in mining patterns from human interactions in meetings.
 Acknowledgements. This project is partially supported by NSERC (Canada) and University of Manitoba.

