 Big data usually includes some large data sets and complex queries that exceed the capacity of the system. When dealing with this kind of workload, the performance usually decreases and the system becomes ov erloaded. If not handled properly, it may lead to a disastrous deterioration of both transaction throughput and response time. 
To prevent the database from overloading, one of the most important configuration parameter is the multi-programming level (MPL). The MPL determines the maximum number of transactions can be concurrently processed in the database. Setting the MPL is no easy task [1]: if it is set too high, the system becomes susceptible to thrash-What X  X  more, the optimal MPL strongly depends on the workload characteristics which may change with time. 
Many researches [2-8] have been taken to pursue good algorithms and tools for (semi-) automatic overloading control. Workload related information is exploited to find MPL in most approaches, except for [2] and [3]. However, the required workload characteristic is not always obtainable. For example, online retailers may have big mate. [2] and [3] give some golden standards in transaction processing systems: keep the conflict ratio below the critical threshold of 1.3, or fraction of blocked and mature transactions below 0.5. But whether it is the best value for the entire modern database systems remains unknown. 
The problem we face is similar to the problem in industrial control systems. There is a delay (query processing time) between input settings (query request) and new settings take effect (query response). And the environment (algorithms in database systems, computing power, memory capabilities, etc.) is too complex to model. In the absence of knowledge of the underlying pro cess, a PID controller is the best control-ler. A PID controller needs a fixed target point to guide the whole controlling process. for all can be found. 
In this paper, we present EasyControl  X  a prototype admission control system for determining a suitable MPL automatically. Unlike existing works, the users do not need any prior knowledge about the workload, database system or hardware configu-ration. We think this  X  X asy X  characteristic is especially important in today X  X  cloud environment, where the database in the cloud is just providing the service, not know-ing what the users X  applications are, and can X  X  estimate the workload beforehand. In database systems, there are generally two categories of controlling methods: exter-nal (admission) control and internal control. 
External control [4], [9] treats the database systems as black boxes. It determines the concurrency level by measuring the indicators outside the database systems. Ex-ternal control methods are usually adaptive, but maybe not as accurate as internal indicators inside. A typical indicator is the number of blocked transactions. Main advantage of internal control is more accurate on a per-component basis. But it usual-ly considers a single factor (usually locking) alone, not the whole system. 
EasyControl uses external control. According to our experiments, overloading of database is jointly caused by many factors. Controlling directly using the external throughput can take the combined effect into consideration. What X  X  more, setting an external controller over existing databases is much easier than altering the inside. 
Control-theory and machine learning are also used in some previous works [7], [8] targeting at web servers. The process variable is usually the response time. The main innovation of our EasyControl algorithm is that it gets rids of an explicit control target chance to train the system before it really happens. In this section we present our admission control algorithm used in EasyControl. The algorithm is based on the idea of PID controller, while it is improved and made suita-ble for the complex database overloading control environment. 3.1 Classical PID Controller Proportional X  X ntegral X  X erivative controller (PID controller) is a well-known feedback controller. Its general idea is to minimize the error between the process value and the The controller output is calculated as the sum of three terms: The proportional term considers how far away the process value is from the set point and makes adjustment immediately. The integral term accumulates previous offsets to reduce the final error. The derivative term slows the rate of change and helps reduce overshoot and ringing. p K , i K and d K are three tuning parameters representing proportional, integral and derivative gain respectively. 
Although powerful, using PID controller as a database admission controller has some difficulties: (1) Different database systems and different workloads often show PID tuning is usually done through some manual trial-and-error approaches and com-puter simulations. But in OLTP applications, data in the database is constantly chang-ing. So it is hard to find three optimum parameter values. 
To overcome these deficiencies of classical PID controller, we changed the way it is used and try to find a dynamic set point, which can represent the system X  X  real-time capability. Next we outline our overloading prevention algorithm. 3.2 Admission Control Algorithm The only two variables we measure directly are the number of user requests q N and database responses s N . And from these we derive another variable: the number of newly added pending requests p N . It is calculated as the difference between request number and response number s q p N N N  X  = . 
Due to the variance in server capability and query complexity, there is no easy way to use direct indicators like throughput or response time as set point. So our set point is a balance between requests and responses: server response number equals user request number. Three terms in the PID controller are: response number in current i.e.
Tuning parameters is another difficult problem. But an advantage of PID controller inaccurate. We maintain a separate variable a N -maximum allowed request number to do the admission control. If u is greater than 0, it suggests that the system is free to overload and can accept more requests, we increase a N and vice versa. 3.3 EasyControl Implementation Our admission controller is implemented as a proxy outside the database. Its existence Figure 1. 
When the Forwarder receives a request from the user, it checks whether the request sent in current measure interval plus the number of pending requests exceeds the max allowed request number a N . If so, the Forwarder delays the forwarding until next measure interval; otherwise it forwards the request and increase the request sent in this measure interval counter. Server X  X  responses are always forwarded immediately. 
The Controller executes the algorithm described in Section 4.2. After started it has an initialization period. During this time the max allowed request number a N is initialized to the average request number measurements from the Forwarder. At this moment no actual control is done because the system is warming up and thus unstable. Once warmed up, in every measure interval a PID controller output u is calculated using the es the max allowed request number a N , a N is increased by multiplying (1+adjust factor); if 0 u &lt; , a N is decreased by multiplying (1-adjust factor). Our experiments are conducted on two environments listed in Table 1. We use the TPC-C benchmark on MySQL 5.5. Test duration is set to 8 hours. Environment 1 is our main evaluation environment, 3 data scales is set from 100 data warehouses (about 6.4 GB data) to 300 data warehouses (about 19 GB data). Under each data scale we test 10 different user numbers from 1 times data warehouse number to 10 times data warehouse number. In Environment 2, we compare our algorithm with two existing algorithms: Incremental Steps algorithm and Parabola Approximation algo-rithm proposed by Heiss and Wagner [4]. 
The total number of server responses given per second is used as our performance metric, as this is what optimized by the EasyControl algorithm, and should be propor-tional to the tpmC metric. There are three parameters in our EasyControl proxy: measure interval, initialization time and adjust factor. To make the tuning accurate and adaptive to most systems. We fix measure interval to 1 second, initialization time to 5 minutes and adjust factor to 0.01. 
Figure 2 shows the comparison of throughput between with and without EasyCon-trol in Environment 1. The throughputs are labelled as  X  X asyControl X  and  X  X o Con-trol X  respectively. We can see from the grap h: (1) when the user load is low, MySQL with EasyControl gives almost identical throughput to naive MySQL; (2) when the user load is high, adding EasyControl significantly increases the throughput. 
Incremental Steps algorithm and Parabola Approximation algorithm [4, 6] are im-plemented on MySQL and tested on Environment 3 together with EasyControl. One two algorithms. We think the fine-grained control interval of EasyControl contributes potentially noisy measurements, we can only set the control interval of IS and PA to original result because of the output MPL is too sensitive to normal, minor workload fluctuations. Maybe it needs an even larger control interval to avoid this problem. many cases, it is still the most widely used database system. Some non-relational and high performance systems may have much greater capabilities, but the capabilities are not infinite. The systems still have the possibilities of being overloaded. We think the general approaches in dealing overloadi ng can be extended to similar systems. 
To reduce the impact of overloading, we presented EasyControl. EasyControl uses an idea similar to PID controller that considers pending requests and previous throughput to judge current databases X  status. We experimentally demonstrated that without any tuning EasyControl can improve overloaded databases X  performance. For future work, we are exploring the combination of different workload on EasyControl and its effect on real production databases. 
