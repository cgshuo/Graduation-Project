 Many data-intensive applications continuously generate an unbounded sequence of data items at a high rate in real time nowadays. These transient data streams cannot be modeled as persistent relations so that traditional database management systems are becoming inadequate in supporting the functionalities of modeling this new class of data [2]. The unbounded nature of data streams disallows the holding of the entire stream in the memory, and often incurs a high call-back cost even if the past data can be stored in external media. Any algorithm designed for streaming data processing would generally be restricted to scan the data items only once. Consequently, algo-rithms such as stream mining algorithms can present merely approximate results rather than accurate results because some data items will be inevitably discarded. 
The discovery of frequent items and frequent itemsets has been studied extensively in the data mining community, with many algorithms proposed and implemented [1, 5, 9]. The  X  X ne-pass X  constraint, however, inhibits the direct application of these algo-rithms over data streams. The mining of frequent items/itemsets in a data stream has been addressed recently. An algorithm in [10] uses the Buffer-Trie-SetGen to mine frequent itemsets in a transactional data stream. The FP-stream algorithm [4] incrementally maintains tilted-time windows for frequent itemsets at multiple time granularities. The DSM-FI algorithm [7] uses a FP-tree [5] like forest and estimated supports for the mining. In addition, the Moment algorithm [3] employs a  X  X losed enumeration tree X  for fast discovery of closed frequent itemsets in a data stream. 
Note that the above approaches for mining frequent itemsets over data streams ac-cept only one minimum support in the mining. The minimum support cannot be changed during the mining for these approaches. In reality, the minimum support is not a fixed value for the entire stream of transactions. The user may specify a thresh-old in the beginning, adjust the threshold after evaluating the discovered result, or change the threshold after a period of time after receiving volumes of transactions. The minimum support threshold therefore should be variable to suit the need of the user. In contrast to frequent itemset mining with a fixed support, the mining with respect to a changeable support is referred to as variable support mining. Although online association rule mining and interactive mining [8] may have changeable sup-port thresholds, both algorithms are inappli cable to the stream data because a scan-ning of entire transactions is required. 
In this paper, we formulate the problem of variable support mining in a data stream and propose the VSMDS (Variable Support Mining of Data Streams) algorithm for efficient variable mining of frequent itemsets in a stream of transactions. The VSMDS algorithm uses a compact structure (called PFI-tree) to maintain the set of potential frequent itemsets and update their support counts. A summary structure, called synop-sis vector, is designed to approximate past transactions with a flexible distance threshold. The comprehensive experiments conducted show that VSMDS is highly efficient and linearly scalable. ..., t c , ...} is an infinite sequence of incoming transactions, where each transaction t i coming transaction, called current transaction . The current length of the data stream is the number of transactions seen so far. A transaction t i contains an item-set e if e  X  t . The support of an item-set e , denoted by sup ( e ), is the number of transactions con-taining e divided by the current length in DS. 
The user specified a minimum support threshold ms  X  (0,1] in the beginning of the data stream. At any point of time, along with the incoming of transactions, the user may change the minimum support threshold so that the thresholds form a series of minimum supports. Let ms c , called current minimum support , be the minimum sup-port when we saw t c . An item-set e is a frequent itemset if sup ( e )  X  ms c . The objec-tive is to discover all the frequent itemsets in the data stream, with respect to current minimum support. Since the specified minimum support is not a fixed value, such a mining is called variable support mining over the data stream. In contrast, previous mining with only one unchangeable minimum support is called fixed support mining . The goal is to use the up-to-update minimum support ms c and consider all the transac-tions, including the discarded ones, for the discovery of frequent itemsets. We process the stream, in a bucket-by-bucket basis, by grouping |B| (called bucket size ) incoming transactions into a bucket. A potential frequent itemset tree (called PFI-tree) is designed to maintain the set of potential frequent itemsets. To provide the user with the up-to-date result reflecting a newly specified minimum support, the proposed algorithm effectively compresses the discarded transactions into a summary structure called synopsis vector (abbreviated as SYV). Consequently, we may use the SYV to update the PFI-tree with respect to current minimum support. We use an idea similar to Proximus [6] for compressing the transactions but carry out a structure updating for more accurate results. 
The series of minimum supports specified by the user is collectively referred to as threshold used in the PFI-tree. 
Fig. 1 depicts the overall concept of the proposed VSMDS algorithm. On seeing a The PFI i is used to output the desired patterns to the user. The SYV i-1 is used to build ms frequent itemsets that have higher supports. These itemsets can be located from PFI i-1 those itemsets having supports greater than or equal to ms i but smaller than ms PFI , thus being excluded in PFI i-1 , become frequent. Hence, VSMDS will use the SYV i-1 to build PFI i-1 for the mining of these itemsets at this moment. VSMDS utilizes the lexi-cographic property of consecutive item-comparisons [9] in PFI-tree for fast mining and updating of potential frequent itemsets. The SYV is a list of (delegate, cardinal-ity) pairs. The cardinality indicates the number of occurrences of the delegate; the delegate represents a group of approximated itemsets. A delegate dg is said to ap-proximate to an itemset e if the distance (eg. the number of different items between dg and e ) is no more than certain distance threshold (defined by the user). We have conducted extensive experiments to evaluate the algorithm. The experiments were performed on an AMD Sempron 2400+ PC with 1GB memory, running the Windows XP, using data-sets generated from [1]. Due to space limit, we only report the results on dataset T10I5D1000k. The distance threshold is 10 and |B|=10. 
Fig. 2(a) shows the performance of VSMDS algorithm with respect to a support sequence of random values ranging from 1.1% to 2%, the breakdown of execution time is shown in Fig. 2(b). The performance with respect to various bucket sizes is shown in Fig. 3(a), and the working memory sizes for the experiment are depicted in Fig. 3(b). Let the compression ratio be the size of the synopsis vector divided by that of the original transactions. Fig. 4(a) confirms that a distance threshold of 15 compresses more than 50% of the transactions in size. Fig. 4(b) indicates that VSMDS algorithm scales up linearly with respect to the dataset size (from 1000k to 10000k). In this paper, we propose the VSMDS algorithm for mining frequent itemsets over a data stream with changeable support threshold. VSMDS utilizes the PFI-tree and the synopsis vector for the mining. The extensive experiments confirm that VSMDS efficiently mines frequent patterns with respect to variable supports, and has good linear scalability. 
