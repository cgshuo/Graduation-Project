 Many situations call for a parser to return a k -best list of parses instead of a single best hypothe-sis. 1 Currently, there are two efficient approaches known in the literature. The k -best algorithm of Jim  X  enez and Marzal (2000) and Huang and Chi-ang (2005), referred to hereafter as L AZY , oper-ates by first performing an exhaustive Viterbi in-side pass and then lazily extracting k -best lists in top-down manner. The k -best A  X  algorithm of Pauls and Klein (2009), hereafter KA  X  , computes Viterbi inside and outside scores before extracting k -best lists bottom up.
 Because these additional passes are only partial, KA  X  can be significantly faster than L AZY , espe-cially when a heuristic is used (Pauls and Klein, 2009). In this paper, we propose TKA  X  , a top-down variant of KA  X  that, like L AZY , performs only an inside pass before extracting k -best lists top-down, but maintains the same optimality and efficiency guarantees as KA  X  . This algorithm can be seen as a generalization of the lattice k -best al-gorithm of Soong and Huang (1991) to parsing. Because TKA  X  eliminates the outside pass from KA  X  , TKA  X  is simpler both in implementation and specification. Because our algorithm is very similar to KA  X  , which is in turn an extension of the (1-best) A  X  parsing algorithm of Klein and Manning (2003), we first introduce notation and review those two algorithms before presenting our new algorithm. 2.1 Notation Assume we have a PCFG 2 G and an input sen-tence s 0 ...s n  X  1 of length n . The grammar G has a set of symbols denoted by capital letters, includ-ing a distinguished goal (root) symbol G . With-out loss of generality, we assume Chomsky nor-mal form: each non-terminal rule r in G has the form r = A  X  B C with weight w r . Edges are labeled spans e = ( A,i,j ) . Inside deriva-tions of an edge ( A,i,j ) are trees with root non-terminal A , spanning s i ...s j  X  1 . The weight (neg-ative log-probability) of the best (minimum) inside derivation for an edge e is called the Viterbi in-side score  X  ( e ) , and the weight of the best deriva-tion of G  X  s 0 ...s i  X  1 A s j ...s n  X  1 is called the Viterbi outside score  X  ( e ) . The goal of a k -best parsing algorithm is to compute the k best (minimum weight) inside derivations of the edge ( G, 0 ,n ) .

We formulate the algorithms in this paper in terms of prioritized weighted deduction rules (Shieber et al., 1995; Nederhof, 2003). A prior-itized weighted deduction rule has the form where  X  1 ,..., X  n are the antecedent items of the deduction rule and  X  0 is the conclusion item . A deduction rule states that, given the antecedents  X  ,..., X  n with weights w 1 ,...,w n , the conclu-sion  X  0 can be formed with weight g ( w 1 ,...,w n ) and priority p ( w 1 ,...,w n ) .
These deduction rules are  X  X xecuted X  within a generic agenda-driven algorithm, which con-structs items in a prioritized fashion. The algo-rithm maintains an agenda (a priority queue of items), as well as a chart of items already pro-cessed. The fundamental operation of the algo-rithm is to pop the highest priority item  X  from the agenda, put it into the chart with its current weight, and apply deduction rules to form any items which can be built by combining  X  with items already in the chart. When the resulting items are either new or have a weight smaller than an item X  X  best score so far, they are put on the agenda with pri-ority given by p (  X  ) . Because all antecedents must be constructed before a deduction rule is executed, we sometimes refer to particular conclusion item as  X  X aiting X  on another item before it can be built. 2.2 A  X  A  X  parsing (Klein and Manning, 2003) is an al-gorithm for computing the 1-best parse of a sen-tence. A  X  operates on items called inside edge items I ( A,i,j ) , which represent the many pos-sible inside derivations of an edge ( A,i,j ) . In-side edge items are constructed according to the IN deduction rule of Table 1. This deduction rule constructs inside edge items in a bottom-up fash-ion, combining items representing smaller edges I ( B,i,k ) and I ( C,k,j ) with a grammar rule r = A  X  B C to form a larger item I ( A,i,j ) . The weight of a newly constructed item is given by the sum of the weights of the antecedent items and the grammar rule r , and its priority is given by its weight plus a heuristic h ( A,i,j ) . For consis-tent and admissible heuristics h (  X  ) , this deduction rule guarantees that when an inside edge item is removed from the agenda, its current weight is its true Viterbi inside score.

The heuristic h controls the speed of the algo-rithm. It can be shown that an edge e satisfying  X  ( e ) + h ( A,i,j ) &gt;  X  ( G, 0 ,n ) will never be re-moved from the agenda, allowing some edges to be safely pruned during parsing. The more closely h ( e ) approximates the Viterbi outside cost  X  ( e ) , the more items are pruned. 2.3 KA  X  The use of inside edge items in A  X  exploits the op-timal substructure property of derivations  X  since a best derivation of a larger edge is always com-posed of best derivations of smaller edges, it is only necessary to compute the best way of build-ing a particular inside edge item. When finding k -best lists, this is no longer possible, since we are interested in suboptimal derivations.

Thus, KA  X  , the k -best extension of A  X  , must search not in the space of inside edge items, but rather in the space of inside derivation items D ( T A ,i,j ) , which represent specific derivations of the edge ( A,i,j ) using tree T A . However, the number of inside derivation items is exponential in the length of the input sentence, and even with a very accurate heuristic, running A  X  directly in this space is not feasible.

Fortunately, Pauls and Klein (2009) show that with a perfect heuristic, that is, h ( e ) =  X  ( e )  X  e , A  X  search on inside derivation items will only remove items from the agenda that participate in the true k -best lists (up to ties). In order to compute this perfect heuristic, KA  X  makes use of outside edge items O ( A,i,j ) which rep-resent the many possible derivations of G  X  s ...s i A s j +1 ...s n (see Figure 1(b)).
 Outside items are built using the OUT-L and OUT-R deduction rules shown in Table 1. OUT-L and OUT-R combine, in a top-down fashion, an outside edge over a larger span and inside edge over a smaller span to form a new outside edge over a smaller span. Because these rules make ref-erence to inside edge items I ( A,i,j ) , these items must also be built using the IN deduction rules from 1-best A  X  . Outside edge items must thus wait until the necessary inside edge items have been built. The outside pass is initialized with the item O ( G, 0 ,n ) when the inside edge item I ( G, 0 ,n ) is popped from the agenda.

Once we have started populating outside scores using the outside deductions, we can initiate a search on inside derivation items. 3 These items are built bottom-up using the IN-D deduction rule. The crucial element of this rule is that derivation items for a particular edge wait until the exact out-side score of that edge has been computed. The al-gorithm terminates when k derivation items rooted at ( G, 0 ,n ) have been popped from the agenda. KA  X  efficiently explores the space of inside derivation items because it waits for the exact Viterbi outside cost before building each deriva-tion item. However, these outside costs and asso-ciated deduction items are only auxiliary quanti-ties used to guide the exploration of inside deriva-tions: they allow KA  X  to prioritize currently con-structed inside derivation items (i.e., constructed derivations of the goal) by their optimal comple-tion costs. Outside costs are thus only necessary because we construct partial derivations bottom-up; if we constructed partial derivations in a top-down fashion, all we would need to compute opti-mal completion costs are Viterbi inside scores, and we could forget the outside pass.

TKA  X  does exactly that. Inside edge items are constructed in the same way as KA  X  , but once the inside edge item I ( G, 0 ,n ) has been discovered, TKA  X  begins building partial derivations from the goal outwards. We replace the inside derivation items of KA  X  with outside derivation items , which represent trees rooted at the goal and expanding downwards. These items bottom out in a list of edges called the frontier edges. See Figure 1(d) for a graphical representation. When a frontier edge represents a single word in the input, i.e. is of the form ( s i ,i,i + 1) , we say that edge is com-plete . An outside derivation can be expanded by applying a rule to one of its incomplete frontier edges; see Figure 2. In the same way that inside derivation items wait on exact outside scores be-fore being built, outside derivation items wait on the inside edge items of all frontier edges before they can be constructed.

Although building derivations top-down obvi-ates the need for a 1-best outside pass, it raises a new issue. When building derivations bottom-up, the only way to expand a particular partial inside derivation is to combine it with another partial in-side derivation to build a bigger tree. In contrast, an outside derivation item can be expanded any-where along its frontier. Naively building deriva-tions top-down would lead to a prohibitively large number of expansion choices.

We solve this issue by always expanding the left-most incomplete frontier edge of an outside derivation item. We show the deduction rule OUT-D which performs this deduction in Fig-ure 1(d). We denote an outside derivation item as Q ( T G A ,i,j, F ) , where T G A is a tree rooted at the goal with left-most incomplete edge ( A,i,j ) , and F is the list of incomplete frontier edges exclud-ing ( A,i,j ) , ordered from left to right. Whenever the application of this rule  X  X ompletes X  the left-most edge, the next edge is removed from F and is used as the new point of expansion. Once all frontier edges are complete, the item represents a correctly scored derivation of the goal, explored in a pre-order traversal. 3.1 Correctness It should be clear that expanding the left-most in-complete frontier edge first eventually explores the same set of derivations as expanding all frontier edges simultaneously. The only worry in fixing this canonical order is that we will somehow ex-plore the Q items in an incorrect order, possibly building some complete derivation Q 0 C before a more optimal complete derivation Q C . However, note that all items Q along the left-most construc-tion of Q C have priority equal to or better than any less optimal complete derivation Q 0 C . Therefore, when Q 0 C is enqueued, it will have lower priority than all Q ; Q 0 C will therefore not be dequeued un-til all Q  X  and hence Q C  X  have been built.
Furthermore, it can be shown that the top-down expansion strategy maintains the same efficiency and optimality guarantees as KA  X  for all item types: for consistent heuristics h , the first k en-tirely complete outside derivation items are the true k -best derivations (modulo ties), and that only derivation items which participate in those k -best derivations will be removed from the queue (up to ties). 3.2 Implementation Details Building derivations bottom-up is convenient from an indexing point of view: since larger derivations are built from smaller ones, it is not necessary to construct the larger derivation from scratch. In-stead, one can simply construct a new tree whose children point to the old trees, saving both mem-ory and CPU time.

In order keep the same efficiency when build-ing trees top-down, a slightly different data struc-ture is necessary. We represent top-down deriva-tions as a lazy list of expansions. The top node T
G is an empty list, and whenever we expand an outside derivation item Q ( T G A ,i,j, F ) with a rule r = A  X  B C and split point l , the resulting derivation T G B is a new list item with ( r,l ) as the head data, and T G A as its tail. The tree can be re-constructed later by recursively reconstructing the parent, and adding the edges ( B,i,l ) and ( C,l,j ) as children of ( A,i,j ) . 3.3 Advantages Although our algorithm eliminates the 1-best out-side pass of KA  X  , in practice, even for k = 10 4 , the 1-best inside pass remains the overwhelming bottleneck (Pauls and Klein, 2009), and our modi-fications leave that pass unchanged.

However, we argue that our implementation is simpler to specify and implement. In terms of de-duction rules, our algorithm eliminates the 2 out-side deduction rules and replaces the IN-D rule with the OUT-D rule, bringing the total number of rules from four to two.

The ease of specification translates directly into ease of implementation. In particular, if high-quality heuristics are not available, it is often more efficient to implement the 1-best inside pass as an exhaustive dynamic program, as in Huang and Chiang (2005). In this case, one would only need to implement a single, agenda-based k -best extrac-tion phase, instead of the 2 needed for KA  X  . 3.4 Performance The contribution of this paper is theoretical, not empirical. We have argued that TKA  X  is simpler than TKA  X  , but we do not expect it to do any more or less work than KA  X  , modulo grammar specific optimizations. Therefore, we simply verify, like KA  X  , that the additional work of extracting k -best lists with TKA  X  is negligible compared to the time spent building 1-best inside edges.

We examined the time spent building 100-best lists for the same experimental setup as Pauls and Klein (2009). 4 On 100 sentences, our implemen-tation of TKA  X  constructed 3.46 billion items, of which about 2% were outside derivation items. Our implementation of KA  X  constructed 3.41 bil-lion edges, of which about 0.1% were outside edge items or inside derivation items. In other words, the cost of k -best extraction is dwarfed by the the 1-best inside edge computation in both cases. The reason for the slight performance advantage of KA  X  is that our implementation of KA  X  uses lazy optimizations discussed in Pauls and Klein (2009), and while such optimizations could easily be incorporated in TKA  X  , we have not yet done so in our implementation. We have presented TKA  X  , a simplification to the KA  X  algorithm. Our algorithm collapses the 1-best outside and bottom-up derivation passes of KA  X  into a single, top-down pass without sacri-ficing efficiency or optimality. This reduces the number of non base-case deduction rules, making TKA  X  easier both to specify and implement.
 This project is funded in part by the NSF under grant 0643742 and an NSERC Postgraduate Fel-lowship.

