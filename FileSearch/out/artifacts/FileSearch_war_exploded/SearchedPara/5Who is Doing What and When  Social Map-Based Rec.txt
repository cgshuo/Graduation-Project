 XIATIAN ZHANG and QUAN YUAN, IBM Research -China Content-centric social Web sites, 1 such as blog, forum, and wiki sites, have flourished with an exponential growth of user-generated content. Given the seas of rapidly grow-ing information, it becomes increasingly more difficult for users, especially new users, to grasp what these sites can offer, let alone locating desired information at such sites. Researchers thus have developed recommendation technologies to help users better navigate and find desired information at these sites [Guy et al. 2009; Phelan et al. 2009].

There are however, two prevalent challenges when building such a recommender system. First, it is difficult to make effective recommendations if a system knows lit-tle about its users or the items to be recommended. This is also known as the cold start problem [Schein et al. 2001, 2002]. For example, a new user of a social Web site exhibits few activities and has few co nnections to others. As a result, a recom-mender system would need to guess what the user might be interested in. Second, it is difficult to explain recommendation rationales to end users. A recommender system usually utilizes complex algorithms or inferences to derive recommendation results. It is difficult for average users to interpret and thus comprehend the process and entrust themselves to the recommended results [Guy et al. 2009; Herlocker et al. 2000].
To address these above two challenges, we are building a social map-based recom-mender system, called Pharos. Here, we use the term social map to refer to a dy-namically generated marauder X  X  map 2 of a content-centric social Web site. Such a social map summarizes users X  content-relat ed social behavior (e.g., reading, writing, and commenting) over time as a set of latent communities (Figure 1(a)). Each latent community characterizes the implicit connections among a set of people and the con-tent that they generated or visited. In other words, a latent community summarizes what is being talked about (content summary shown in green keywords in Figure 1(a)) and who is involved (people summary in blue keywords shown in Figure 1(a)). More-over, a social map is time sensitive, capturing the latent communities derived for a specific time interval as well as their updates (e.g., disappearance and emergence of communities). Since not all latent communities are equally important, Pharos uses several criteria to rank the communities, as well as the people and content in each community by their hotness (e.g., people X  X  social status and content popularity). It then recommends the top-K hottest latent communities on a social map. For example, Figure 1(a) is a social map of the IBM internal blog site, depicting the top-7 hottest communities identified and recommended by Pharos. Figures 1(b) and (c) also show Pharos-recommended content and people for a particular latent community (commu-nity 1). As a result, a user especially a new user, can use the social map to get a quick glimpse of a content-centric social Web site and learn about the site X  X  social dynamics (e.g., relationships among content and people).

SincePharosisabletouseasocialmaptosummarizeandrecommendthehottest activities of a social site to new users, it helps alleviate the cold start problem. The social map also provides a natural context for users to comprehend the recommenda-tion results (e.g., hot communities and hot items in each community). A social map explains the existence of latent communities and their characteristics (e.g., highly in-fluential content and individuals). Furthermore, the visual, interactive social map provides users with a new navigation metaphor, with which the users can effectively explore a Web site in a structured manner (e.g., examining the latent communities one by one).
Although Pharos currently focuses on recommending a nonpersonalized social map of Web sites to all users, it offers several unique contributions. (1) Social map as a novel metaphor for discovering and summarizing meaningful ac-(2) Social map-based recommendation as a novel way to address the cold start prob-(3) Real-world validation. Since our goal is to test the value of Pharos in the real
The rest of the article is organized as follows. We first provide a brief review of related work. We then describe a typical us age scenario of Pharos before explaining how Pharos is built, followed by its applications. Finally, we present a preliminary user evaluation of Pharos. Our work is closely related to numerous research efforts in addressing the cold start problem of recommender systems. Several generative probabilistic models have been developed to address the cold start problem by mixing content data with collaboration data [Schein et al. 2001, 2002]. The idea of filterbots is introduced to rate items based on user or item attributes and improve both user-based and item-based collaborative filtering in a cold start state [Park et al. 2006]. Researchers also exploit different types of user data (e.g., age, occupation, and location) to build a better profile for new users, improving recommendation results for new users [Nguyen et al. 2007]. To bet-ter recommend new items that were not seen during the training, the tied Boltzmann machine is used to combine collaborative and content information [Gunawardana and Meek 2008]. More recently, researchers employ predictive feature-based regression models to tackle three types of cold start problems [Park and Chu 2009]: (1) recom-mendations of existing items for new users; (2) recommendations regarding new items for existing users; and (3) recommendations of new items for new users. These exist-ing works mainly focus on developing new or improved algorithms by exploiting the characteristics of content data or static user data (e.g., age and occupation). Similar to these approaches, Pharos also exploits the characteristics of content and user behav-ior to provide better recommendation results especially for new users. However, unlike these approaches, Pharos models the intertwined content and user social behavior X  social dynamics X  X f a social Web site over t ime and uses such information to create a social map. As a result, the derived social map helps new users obtain a quick and meaningful overview of a social Web site, which in turn jump starts their knowledge of the site and helps guide their online activities.

Our work is also related to the research topic on ensuring recommendation trust-worthiness [Herlocker et al. 2004]. An early work on recommendation explanation ex-plores the utility of explanations in automated collaborative filtering (CF) systems by exposing neighbors and their ratings to end users [Herlocker et al. 2000]. In addition, PeerChooser provides users with a visual explanation of the CF process [O X  X onovan et al. 2008]. Researchers have also studied the effect of using social network infor-mation to explain recommended items, and found that the degree of user interest in recommended items increases when explanations are provided [Guy et al. 2009]. More recently, tags have been used to explain why users might like items, by linking items and users via tag relevance and tag preference [Vig et al. 2009]. Another system, MovieExplain, provides justifiable movie recommendations [Symeonidis et al. 2009]. Compared to the existing work, which mainly focuses on explaining how a recommen-dation algorithm functions, Pharos externalizes its recommendation context (social map) and presents the recommended items (e.g., people and content) in a context to help improve recommendation trustworthiness.

Furthermore, the interactive nature of Pharos is related to the effort of developing different interaction strategies for recommender systems. Traditional recommender systems normally present a single shot of recommendation based on stored user preferences or activities (e.g., Amazon X  X  book recommendation). More advanced recommender systems have incorporated explicit user feedback in the recommenda-tion process to produce more effective recommendations [Chen and Pu 2007]. More recently, researchers have developed conversational recommender systems that can adaptively learn interaction strategies to better assist users in achieving their goals [Rafter and Smyth 2005; Mahmood and Ricci 2007; Viappiani et al. 2007]. Compared to the existing work, Pharos employs a hybrid interaction strategy. At a high level, Pharos lets users use direct manipulation to interactively navigate its recommended social map including the recommended latent communities. At a low level, Pharos can engage a user in a turn-based conversation, where the user can interactively request hot content or people of a specific community and Pharos would then respond to such requests interactively.
 To detect and track the evolution of latent communities for content-centric social Web sites, our work is also related to many efforts in text analytics (e.g., Liu et al. [2009] and Yang et al. [2009]) and temporal data mining (e.g., Blei and Lafferty [2006]; AlSumait et al. [2008]; Ahmed and Xing [2010]). While these works focus on devel-oping advanced analytic algorithms and models, our focus is to leverage existing text analytics [Blei et al. 2003] and customize these algorithms to derive social maps and use practical algorithms Kuhn [1956] to track community evolution.

Since Pharos needs to visually present users with a recommended social map, our work is also related to the efforts in visualizing online conversations. Conversation Map is a Usenet newsgroup browser that visually presents the analyzed message content, as well as the relevant participants [Sack 2000]. There is also work on the design of graphical interfaces that reveal the social structure of the conversation by visualizing patterns such as bursts of activity, the arrival of new members, and the evolution of conversational topics [Donath et al. 1999]. While these works focus on the visual presentation of user online behavior, Pharos focuses on automatically generating a social map to summarize users X  content-related social behavior and recommending such a map to users to guide their online activities.
 Pharos is designed to help users find out who X  X  doing what and when, and guide their activities at content-centric social Web sites. Here, we use the IBM BlogCentral Web site (our internal blog site) as an example to show the use of Pharos.
 Alice, a new employee of IBM Lotus wants to use BlogCentral to learn more about IBM in general. After logging on to the IBM blog site, Alice is first presented with the most up-to-date social map of BlogCentral (Figure 1(a)). In this case, Pharos chooses to display the seven most popular communities discovered based on the user behav-ior captured during the past two weeks. 4 On the social map, Alice notices that one community (labeled as 1) seems to be about Lotus and social software.

As Alice continues, she zeros in on the Lotus community by clicking on the key-word Lotus (highlighted in brown in Figure 1(a)). She gets two recommended lists, one showing the most popular blog entries in this community (Figure 1(b)), and the other displaying the most active bloggers on this topic (Figure 1(c)). Pharos also explic-itly shows the relationships between the content and the people. Each recommended blog entry is associated with the key people involved (e.g., authors and commenters) (Figure 1(b)); and each recommended blogger is associated with the top blog entries that s/he authored or commented on (Figure 1(c)).

Alice now starts to find out more about the content and people in the two lists. Alice notices that Sara is a very active blogger. She clicks on Sara to find out more. The social map is updated to show Sara X  X  footprints (activities depicted by keywords in orange in Figure 2) in four different communities. The size of the footprint indicates how active Sara is in each of these communities. As shown in Figure 2, for example, Sara is most active in the iPhone community (labeled as 2).
Seeing Sara X  X  active involvement in the iPhone community, Alice clicks on that com-munity and gets a list of recommended blog entries and a list of recommended bloggers. Again, Alice is able to quickly learn more about the content and people involved in the iPhone community.

Alice also notices that the popularity rank of the iPhone community has decreased, as indicated by the associated black down-arrow and a negative number. She is curious to find out how this community has evolved over time. To do so, she clicks on the time axis located at the top of the social map (Figure 1(a)) to examine the previous status of the community. As shown in Figure 3, Alice discovers that the iPhone community emerged during the time interval Jul/1 X  X ul/14. While it became hotter during the time period of Jul/15 X  X ul/28, its popularity has dropped recently.

In summary, Alice is able to use the social map created by Pharos to quickly under-stand the key activities on BlogCentral over time and easily learn about the hot topics and people, as well as the evolution of communities that she is interested in. In this section, we will first give an overview of Pharos before explaining how Pharos automatically generates a social map of a co ntent-centric social Web site. We also de-scribe how Pharos recommends hot content and people to users, based on the generated social map, as well as how it visually explains its recommendations. Pharos is designed to run on top of existing content-centric social Web sites. We assume that the target Web site can provide Pharos its site content (e.g., a site content database) and user interaction behavior (e.g., server logs), all with time stamps. As shown in Figure 4, Pharos has three key components: (1) social map generator, (2) recommender, and (3) visual explainer. Based on users X  content-related social behavior (e.g., reading, writing, and commenting), Pharos dynamically generates a social map. Based on the generated social map, the recommender uses several algorithms to recommend communities, content, and people to end users. The recommendation is explained visually by means of communities, portraying the social map of the Web site. Since Pharos uses a social map to establish the context of making content and people recommendations, social map generation is a critical step in building Pharos. Since the social dynamics of a Web site is constantly evolving, Pharos first splits the time into fixed-length intervals. It then takes three steps to build a snapshot of the social map for each time interval: (1) community extraction; (2) community/item/people ranking; (3) community labeling.

After creating all the snapshots, Pharos then analyzes the changes in these snap-shots to track the social map evolution: (4) community evolution tracking.

Before describing how Pharos generates a social map and uses it to make recom-mendations, we first give the formal definition of a social map and its components. 4.2.1. Social Map Definition. A social map is a dynamically generated marauder X  X  map that depicts who X  X  doing what and when within a content-centric social Web site by summarizing users X  content-related social behavior over time. Since the social dynam-ics of a Web site is constantly evolving (evolving content and user behavior), Pharos needs to build an up-to-date model incrementally. Furthermore, the social map needs to provide users with means to track the evolution of the Web site over time. To do so, Pharos divides the time into fixed-length time intervals. For each time interval, it then creates a social map snapshot or frame, to summarize users X  content-related social be-havior that occurred in that interval. Therefore, a social map consists of a sequence of snapshots ordered by time. Each snapshot consists of a set of identified latent com-munities, depicting who X  X  doing what within a given time interval. Each community consists of two parts: the content being discussed and the people involved. Just like communities in a real world, a piece of content or a person may belong to multiple communities at the same time. After deriving a sequence of snapshots, Pharos then compares the consecutive snapshots to detect the changes among them and track the community evolution of the Web site.

More formally, given a stream of data { S 1 ,  X  X  X  , S T } collected from a content-centric set of people (e.g., bloggers at a blog site) involved during t , I t is the set of content items related to P t during t (e.g., blog entries posted/commented by the people at a blog site at epoch t ), and R t  X  P t  X  I t is the interactions between people and con-tent items that occurred during t , describing the time-sensitive relationships between people and content items (e.g., readership and writership between people and blog en-tries). We generate a snapshot f t of the social map for t to summarize the data S t as a set of latent communities C t = { c tj } . Here each latent community c tj consists of a subset of people, content items, and the relationships between the two. Formally, c ber of derived communities. After building each snapshot, Pharos stitches together all the snapshots { f t } by time. To help users track the evolution of the latent communities over time, Pharos aligns and compares the communities between two consecutive time intervals to identify the community changes (e.g., emergence of new communities and disappearance of old ones). 4.2.2. Community Extraction for a Time Interval. Before describing how Pharos extracts communities for each time interval, we first discuss how Pharos determines the length of a time interval, known as the window size. This task is nontrivial. If the window size is too small (e.g., hourly), there may not be sufficient data to compute the changes. On the other hand, if the window size is too large (e.g., monthly), there may be too many changes, which makes it hard for both machines and users to process. In addition, the window size may need to be varied depending on the dynamics of the Web site, including its traffic flow as well as content flow. Currently, we use a Web site X  X  traffic to estimate the time-window size. We analyze the server logs periodically to approximate the window size. If we detect traffic surges or reductions in the server log, we would adjust the window size accordingly (e.g., shortening or lengthening it). For simplicity, currently we consider only fixed-length window size until adjustments are needed. By no means, that our current approach is the only or the best approach. From our experience, we realize that determining the time-window size could be a research topic on its own and is out of the scope of this article.

Given the data S t collected from a social Web site during the time interval t , poten-tially we can use three approaches to extract meaningful latent communities that can form the snapshot f t of the social map for interval t . (1) Directly model people-content relationships R t by using coclustering methods. (2) Starting with people P t , we can group them by their behavioral patterns or de-(3) Starting from content I t , we can cluster the content by their semantics, and
We have experimented with all three approaches, and currently adopt the third approach for several reasons. First, due to the extremely sparse (less than 1% in most sites) people-content relationship data, coclustering methods (approach 1) normally don X  X  work well due to a lack of information. Second, a large portion of user behavioral data (e.g., reading a blog) is contributed by anonymous users, leading to the difficulty of distinguishing different users and modeling users X  behavioral patterns (approach 2). Third, in a content-centric Web site, a user is more likely to be interested in content, rather than people [Liao et al. 2010]. In other words, the third approach, of treating the content as the first class citizen and summarizing user social behavior around content, may make more sense to end users.

There are many approaches for content clustering. Because of its effectiveness in summarizing text content [Dredze et al. 2008], we decided to leverage Latent Dirichlet Allocation (LDA) [Blei et al. 2003] to model the latent topics of all content for content clustering.

Community Extraction by LDA. LDA has been widely used to model latent topics in cor-pora [Blei et al. 2003; Griffiths and Steyvers 2004; Yao et al. 2009] based upon the idea that each document d is a mixture of topics, where a topic z is a probability distribution over words. For example, the articles in a technology-focused blog site might contain latent topics corresponding to concepts like Java, programming language, iPhone, and Apple. Different bloggers might be interested in different latent topics. For example, a person interested in Java programming may interact with (post/comment/read) ar-ticles which have a mixed probability distribution over topics Java and programming language. While another Apple fan might be interested in articles related to topics iPhone and Apple.

LDA is a probabilistic generative model. To generate a document d , one first chooses a document-specific distribution over topics, i.e., P ( z | d ). Then, for each word w in that document, one chooses a topic at random according to this distribution, and draws a word from that topic following the topic-word distribution, i.e., P ( w | z ). Furthermore, P ( z | d )and P ( w | z ) are drawn from conjugate Dirichlet priors.
 where  X  and  X  are the hyperparameters for the Dirichlet priors. Therefore, the proba-bility of w can be formalized as where Z is the number of latent topics. Given a corpus of documents, standard sta-tistical techniques can be used to invert the generative process, inferring the set of topics that were responsible for generating the corpus. Instead of directly estimat-ing P ( z | d )and P ( w | z ) of the model, Gibbs sampling [Griffiths and Steyvers 2004; Yao et al. 2009] learns posterior distribution over the assignments of words to top-ics P ( z | w ) by iterating over each word w i for each document d i , sampling z i from P ( z i | z  X  i , w ).
 where z  X  i represents all word-topic assignments except the current assignment z i for word w i , W is the size of the vocabulary, n w assigned to topic j and n . | j = w in document d has been assigned to topic j and n . | d is the length of the document, d . Given enough iterations for converging, we then obtain estimates of P ( z | d )and P ( w | z ) by examining the posterior distribution as follows.

Then we can learn latent topics of the corpus and the probability value that each topic contributes to a document. Naturally, topics form content clusters. In this way, each content cluster has a single prominent theme to help users easily understand each content cluster. Based on the probabilistic distribution of each document over topics, we assign the membership of the content items to the most relevant topic (the probability score being the highest). Last, we assign associated people to the content clusters based on their content-related social behaviors. 4.2.3. Community/Item/People Ranking. Since the derived communities are not ranked themselves, our second step is to rank the communities based on their importance. The goal of this step is to identify hot communities to be presented on a social map. There are a number of metrics that can be used to measure the hotness of a com-munity. The simplest approach is to count the number of documents/people for each community, then rank communities accordin gly. Alternatively, we can measure the hotness by the authority of both content and people. The key idea is that content items with more attentions (e.g., hits and replies) are considered more popular. Similarly, people who create more popular content are considered as having more influence or authority. Accordingly, content items cre ated by people with more authority are more likelytobepopular.

To calculate the hotness of a derived community, we first compute the authority of the content and people belonging to the community. Specifically, we build an in-teraction graph G ( P , I , E ,w ), a directed bipartite graph, to model the relationships between the content and the people. Here, P denotes the set of people nodes, I is the set of content nodes, E is the set of edges corresponding to the people-content inter-actions contained in R ,and w : E  X  R denotes a nonnegative weight function for edges. Each interaction between a person and a content item currently generates two directed edges, indicating the bidirectional relationships between the person and the content that s/he has created. We assign different weights to different types of inter-actions. For example, authorship is considered a stronger type of relationship than comments. So the edges indicating authorship weigh more than those of comments. We also consider the attenuation factor of time for each user behavior (represented by the edges) as follow. Here the parameter  X &gt; 0 is used to attenuate the weight of user behavior based on time decay t . Specifically, more recent behavior is considered more important than that in the past.

Currently, we adopt the topic-sensitive PageRank algorithm [Haveliwala 2002] to compute the authority scores for all the content nodes and people nodes modeled by an interaction graph.

Here PR is the PageRank vector holding the computed authority scores of all nodes (content and people nodes), d is the damping factor, M is the stochastic matrix corre-sponding to the directed graph G ,and p is the topic vector.

One key reason for using topic-sensitive PageRank is that we can easily use its topic vector to incorporate additional information that is not modeled by the interac-tion graph. For example, we want to promote content items with many anonymous visits, which are not modeled by the intera ction graph. In this case, we can use the number of hits to bias the topic vector when computing the authority scores of content items. Likewise, we can leverage the available social information to bias the topic vec-tor for people. For example, we can leverage a company X  X  organizational information (e.g., positions of people in an organization) available on the intranet to promote the authority of a person and his/her postings or comments.

After calculating the authority scores for each content item and person belonging to a community (Formula 8), we can then compute the hotness of the community using the weighted summation of authorities of all relevant content and people. We can flexibly adjust the weights of content or people if we care more about one aspect (e.g., content) over the other (e.g., people). We sort the communities in the descending order by their hotness. Within each community, we also sort the content items and people separately by their authority scores.

We realize that a number of information sources could be used to compute the hotness of a community or the authority of a content item or a person. For example, in a personalized setting, we may rank communities based on individual users X  interests in these communities. Our goal here is not to come up with an exhaustive list of information sources. Instead, we explain how our approach can easily accommodate various information sources if needed to facilitate the ranking process. 4.2.4. Community Labeling. The final step is community labeling, where each com-munity is to be described informatively so that users can easily understand what a particular community is about. Since each community on a social map describes the relationships between a set of people and a set of content items, the community de-scription must include both types of information (people and content).
 To generate a people summary, we extract te xt content from the user profile data. Then we use the TF/IDF measure [Sparck Jones 1988] to extract representative keywords for a people summary. We also multiply the term TF with people X  X  authority scores as computed earlier (Formula 8) to promote keywords coming from profiles of people with higher authority. For example, if Pharos identifies two people in a community, one engineer and one sales person. If the computed engineer X  X  author-ity score is higher than that of the sales person, more keywords may be selected from the engineer X  X  profile to describe the community (e.g., keywords in blue in Figure 1)).

To provide the content summary of a community, we could directly use the LDA-derived topic keywords. However, presenting the LDA-derived topic keywords as is, may not be ideal for users to understand the semantics of a topic [Song et al. 2009]. We thus use the approach proposed by Song et al. [2009] to rerank the keywords based on several factors (e.g., the uniqueness of the keywords in a content item or the time of their appearance).
 We then select the top-N topic keywords as the content summary for the community. 4.2.5. Community Evolution Tracking. Since content is the soul of a content-centric social Web site and a key ingredient of a derived latent community, we model the content evolution to track the evolution of the latent communities themselves. Moreover, Pharos summarizes the content by topics. We can thus use the topic evolution to approximate the community evolution.
 There is much work on topic detection and tracking for text streams (e.g., Blei and Lafferty [2006], AlSumait et al. [2008], and Ahmed and Xing [2010]). However, most of them either focus on off-line processes or development of advanced temporal models. For practical purposes, we currently mode l topic tracking as an assignment problem. The assignment problem belongs to a general class of matching problems, which is to find matched items between two sets so that an objective function can be maximized or minimized. An objective function typically computes the sum of utilities and costs associated with matching all items in one set to the items in the other set. In the classical case, the two sets have the same number of instances, and one instance can be matched only once.

For our purposes, we use the same number of topics for all the snapshots. However, we cannot guarantee that a topic in a snapshot can always find its match in another snapshot, since an existing topic may disappear or a new one may emerge. To keep the solution simple, we first assume that one topic in a snapshot can always be matched with one in another snapshot. We then process the matching results to handle disap-peared or emerging topics.

Specifically, we adopt the Hungarian algorithm [Kuhn 1956], a popular solution to an assignment problem, to find the topic matches between two snapshots. Before using the algorithm to align topics, we first compute the pair-wise distances (or similarities) of all topic pairs between two consecutive snapshots.

In LDA, a topic is represented as a vector of probabilities over words. The distance between two topic distributions, p and q , can be computed by using the Kullback-Leibler (KL) divergence, This nonnegative function is equal to zero when for all i , p i = q i . The KL divergence is asymmetric, and we adopt a symmetric measure based on KL divergence.
 As the result, to align topics across two consecutive time frames, e.g. ,attimes t  X  1and using Eqn 11 . We then use the Hungarian algorithm to assign topics at time t to topics at time t  X  1. After the matching, we identify topics that have faded out or emerged.

Assuming the number of topics used in LDA is Z , and the number of displayed communities is K ,where K  X  Z , we select K topics with the highest popularity rank topic set, but z t , j is not in the top-K topic set, the corresponding community of z t  X  1 , i is then labeled as a faded-out community. On the other hand, if z t  X  1 , i is not in the top-K topic set, but z t , j is in the top-K topic set, the corresponding community of z t , j is labeled as an emerging community. In some cases, although both z t  X  1 , i , z t , j are in the top-K sets, but their distance is too great (e.g., greater than a threshold), we then label z t  X  1 , i as the fading one, and z t , j as the emerging one. Besides labeling fading and emerging communities, we also label the rank changes of each pair ( z t  X  1 , i , z t , j ). As a result, users can see the evolution of a community in terms of its popularity over time. By using the social map, Pharos provides users with multifaceted recommendations, including communities, content items, and people. First, Pharos recommends top-ranked, hot communities to users with a summary to explain who X  X  doing what within each community. By providing both a content summary (what) and a people summary (who), users could quickly assess if a community is interesting or relevant. When users select and drill down into a community on the social map, Pharos then recom-mends the most relevant content and people based on their computed authority scores. Moreover, Pharos interrelates the content and people; each content item is associated with multiple people, and vice versa. By default, Pharos shows the list of top-ranked content items first. Users can also choose to see the recommended people first.
The direct linkages among the recommended communities, content, and people provide two benefits. First, the linkage acts as a context for users to comprehend the recommendation results as a whole. For example, it is easier for a user to comprehend why a person is recommended by examining his/her posts and popularity of such posts in a community. Second, it allows users to explore the information space to locate their interests by following these links (e.g., from a community to a person or vice versa). As a result, this interaction mechanism helps compensate for the imperfections in the recommendation algorithms. For example, a user could click on a specific keyword appearing in the community summary to go into a community (e.g., Lotus in community 1 in Figure 1). She can then get a list of recommended content and people. In this case, the recommended content and people are ranked based on both their authority scores and their relevance to the selected keyword. Since no recommendation algorithms would be able to accurately predict what a user X  X  interests might be in advance (e.g., the user X  X  interests in Lotus related blogs), Pharos allows users to express their needs interactively and then responds to such needs. In this section, we first introduce how to visually display a frame of the social map, and then discuss how to communicate the community evolution to users. 4.4.1. Layout Design. Based on the rank of the derived latent communities, Pharos displays the top-K communities along with their descriptions. Our key challenge is to tightly pack multiple communities in one display with a sufficient amount of infor-mation describing the communities (content and people labels). Currently, we adopt a bubble chart layout used by ManyEyes 5 to pack top-K communities tightly on a social map. Here each latent community is represented as a bubble, and its size is deter-mined by the computed importance. We ten d to display more important communities toward the center of the screen. We also use the Wordle 6 layout to tightly pack the related labels in each community. 4.4.2. Social Map Update. Since the social dynamics of a Web site is constantly evolving (e.g., the emergence of new topics or people), Pharos must update its generated social map accordingly to reflect such changes at the site. So far we have identified four types of changes and developed corresponding approaches to conveying such changes to users. (1) Emergence/birth of a community. In this case, Pharos explicitly labels the new com-(2) Boom of a community. A community becomes hotter and hotter over time. In this (3) Fade of a community. In this case, we use a black down-arrow with a negative (4) Steadiness of a community. If an existing hot community remains hot, Pharos uses
From our experience, we realize that detecting the changes in the social dynamics of a Web site is much more complex than what we have described. For example, a latent community may be morphed into one or more communities or multiple latent communities may be merged into one. As our ongoing work is addressing these issues, an in-depth description of such work is beyond the scope of this article. We have deployed Pharos internally to help IBM BlogCentral users navigate the blog site and locate their interests (Figure 1). The back-end system of Pharos is implemented in Java, and the front-end user interface is implemented in HTML/ JavaScript and Flex.

In BlogCentral, we have around 500 posts and 10,000 visits daily, and the time window size is set for two weeks accordingly. Before applying LDA to derive blog top-ics, we preprocess each blog entry by extracting its title, tags, and text content. We then use the approach described in Sections 4.2 and 4.3 to derive a social map and recommend hot blog communities and bloggers. To generate the blogger summary in each community, we crawl the bloggers X  p rofile from our internal Web site to in-clude their job description, name of business unit, and geographic information. Typ-ically, Pharos displays the top-10 derived latent communities from its 50 generated candidates.

Since ground-truth information is not readily available, we evaluated and vali-dated the Pharos-derived social map of BlogCentral empirically. Through empirical observation of the site, we manually assessed the quality of the Pharos-extracted communities and their evolution patterns. Periodically (monthly), we asked frequent users of IBM BlogCentral to manually examine all postings and server logs of a given time period to summarize latent communities that they perceived. We then asked them to compare their perceived communities with Pharos-derived ones for the same time period. Overall, we found that about 90% of Pharos-derived communities matched the perception of the frequent users or made sense to them. 7
In addition to these general assessments, we also designed and conducted a finer-grained experiment to assess the use of Pharos (Section 6). We have also applied Pharos to a publicly available Twitter data set 8 to detect and study latent twitter communities. The data set contains about 10.5 million tweets from 200,000 users between 2008 and 2009, along with followers and followings counts. Since the text content of tweets is very noisy, we have preprocessed the data to clean it up (e.g., removing frequent words like twitter and ambiguous words like today). Based on the characteristics of the data set, we set the time window size to be one week. Figures 5, 6, and 7 show X  X haros-generated X  X hree consecutive snapshots of the Twitter social map, summarizing 71 , 387, 77 , 575, and 80 , 093 tweets, and 12 , 127, 13 , 306, and 14 , 353 tweeters respectively.

Unlike the IBM BlogCentral, the user summary in a Twitter community only in-cludes the tweeters X  IDs, since the data set does not provide tweeters X  profiles. Com-pared to IBM BlogCentral, Pharos displays the top-20 communities ( K = 20) from the 100 generated candidates ( Z = 100), since this data set contains a much broader range of topics than the IBM site does.
 In this application, Pharos is also able to track the evolution of Twitter communities. Figures 5, 6, and 7 show three consecutive snapshots generated by Pharos using three weeks of Twitter data. Here are some interesting observations after examining these three snapshots. (1) A community (labeled 3 in Figure 6) talking about Turn off lights for Earth Hour (2) A community (labeled 4 in Figure 5, Figure 6, and Figure 7) related to movie/video (3) A community (labeled 5 in Figure 5, Figure 6, and Figure 7) talking about (4) A community (labeled 6 in Figure 5) talking about iPhone disappeared in the sec-
Since people often use hashtags to group relevant tweets together with additional topic or categorical information, we used these hashtags as ground-truth to evaluate the quality of Pharos-derived latent communities and their evolution patterns. Given a Pharos-derived social map snapshot, we extracted hashtags from all the tweets that were used to derive the snapshot. We then ranked the hashtags based on the fre-quency of their occurrence in the tweets. For each latent community, we then tried to extract the corresponding hashtag(s) of the community. Specifically, the corresponding hashtag(s) of a latent community is(are) the hashtag(s) attached to the tweets most relevant to the community (their probability belonging to the community is greater than a threshold).

Overall, we found that about 65% of Pharos-derived latent communities had corre-sponding hashtags. In the other 35% of communities, the relevant tweets (e.g., tweets about weather) simply did not have hashtags attached. We also examined the over-all rankings of the hashtags associated with each latent community. For the top-K Pharos-derived communities shown on a social map, all the associated hashtags were ranked within the top-100 list. This objectively verified that many of the Pharos-recommended latent communities (at least 65% of them) were indeed popular or active.
We also examined the ranking changes of hashtags associated with a latent commu-nity. We found that in about 70% of the cases, the changes of the hashtag ranking are consistent with the community evolution patterns. For example, the hashtag earth-hour was extracted for the community labeled 3 in Figure 6. This hashtag did not appear in the top-100 list in the first snapshot, and then ranked third in the second snapshot, but disappeared in the third snapshot. The ranking change of the hashtag was consistent with the evolution of the community. Similarly, for the community la-beled 6 in Figure 5, the ranks of its associated hashtag iPhone, were 23, 79, and 68 in the three snapshots, respectively. This ranking change was also consistent with the community evolution pattern. Our third Pharos application is to derive a social map of a popular Chinese online forum as well as track the changes of its social map. As in the other two applications, we have preprocessed the site content (forum posts and their replies) to clean up the text (e.g., identifying and removing stop wo rds) and extract meta information (e.g., time stamps and comments). We also did what was needed to process Chinese text (e.g., word segmentation).

Figure 8 shows a snapshot of the social map for the Chinese forum. The snapshot is based on one day (time window size) of data, due to the sheer volume of content generated by the site. In this case, the snapshot summarizes 3 , 158 posts with 81 , 782 corresponding replies. He re Pharos recommended the top 20 communities out of its 100 generated candidates. As in our Twitter application, the user summary here only includes the users X  IDs.

We also conducted similar evaluations for this site as for BlogCentral, and we found that about 90% of Pharos-derived communities were meaningful.
 Since we have fully deployed Pharos online for IBM BlogCentral, we decided to use this application to evaluate the usefulness and usability of Pharos more rigorously. The BlogCentral site already has several features that help users navigate the Web site. For example, it has a search box for searching blog entries by category (e.g., comments, tags, titles, and authors). On the home page, all blog entries are displayed in a list and the entries can be sorted by date, title, and the number of comments/ratings. A tag cloud is also used on the home page to summarize author-contributed tags associated with the entries.

To formally evaluate the usefulness and usability of Pharos in helping users locate relevant content and people, we designed two similar but not identical exploratory search tasks, asking users to find out the key content (top-3 most relevant blog entries) and people (top-3 most relevant authors) on a specific topic (e.g., mobile computing or lotus products). One was to be performed using Pharos, and the other using the origi-nal BlogCentral site. To test whether Pharos helps users track the changes of a social Web site, we originally planned to ask users to perform such a task. However, our pilot study showed that it was very difficult to use the original BlogCentral site to per-form such a task. We thus asked a user to describe a particular community X  X  evolution during the post-task interview, if s/he used Pharos to complete his/her current task. We recruited ten users (five females and five males) from IBM. We asked each user to perform both tasks, one using Pharos and the other using the original BlogCentral Web site. To eliminate potential biases such as learning effects, we permuted the task order and system usage.

At the beginning of each user session, the user was asked to complete a pretask questionnaire that assessed their knowledge about the given task (e.g., how much they know about mobile computing already), and their familiarity with BlogCentral and Pharos. We then gave a brief tutorial on Pharos and BlogCentral. We allotted 15 minutes for each task. We logged the results of each task and recorded the time used to complete the task. After completing the task, the user was asked to fill in a posttask evaluation questionnaire, soliciting their subjective input on the usability and usefulness of Pharos, their most/least liked features, and suggestions for future improvements. During the posttask interview, if the user happened to use Pharos to complete his/her task, we also asked the user to answer a set of questions regarding Pharos X  X  community tracking function. In particular, we asked the user to describe the evolution of a particular community displayed on the social map, the usability (ease-of-use) and usefulness of the tracking feature, and his/her suggestions for improving community tracking. Using the logged data, we computed two objective measures: taskTime and taskQuality . As shown in Figure 9, Pharos helped our users complete their tasks faster and better. Specifically, on average, it took the users 3 minutes, 38 seconds to complete a task when using Pharos, while it took them 8 minutes, 59 seconds when using the original BlogCentral (Figure 9(a)). Although our study involved only ten users, a re-peated measures ANOVA test showed that the difference in taskTime was statistically significant ( p =0 . 000). In addition to measuring taskTime , we also judged the quality of results ( taskQuality ) by two factors: relevance (how relevant the answers were to the topic) and importance (how popular the blog entries or the bloggers were based on the number of visits). For the purpose of analysis, both relevance and importance were measured on a 5-point Likert scale, with 1 being the most negative score and 5 being the most positive score. By the quality measure, Pharos also helped the users pro-duce better results ( Figure 9(b), the average taskQuality =4 . 7 when using Pharos and 4 . 0 when using the original BlogCentral site). The repeated measures ANOVA test also showed that this difference was statistically significant ( p &lt; 0 . 01). We further examined the factors (e.g., user knowledge and task) that might affect the differences in both taskTime and taskQuality . The ANOVA tests showed that the system usage (the use of Pharos versus the original BlogCentral site) was the only factor that had significant impact ( p &lt; 0 . 001).

Table I shows the user subjective feedback from the posttask questionnaire. The first four questions received positive responses (numbers in parentheses are averages on an 1 X 5 Likert scale with 5 being the most positive).

When users were asked which features they liked the most (Q5). Nine out of ten selected community map, stating that it really helped them quickly obtain an overview of the Web site. For example, one user commented:  X  X  can quickly judge if something is interesting by just reading the topics (summary) and the people involved. X  Eight of ten thought that the interaction design of Pharos was useful. For example, one user mentioned:  X ...interacting with the map and its content helps me find interesting content and people quickly.... X  Another user commented:  X  X  like the footprints (of a blogger X  X  involvement in relevant communities). They helped me understand and trust the results. X  Other interesting comments included:  X  X t is fun to play with the social map; The interlinkages among map/content/people help me to find cross-community connections. X 
The users also had a number of suggestions for improving Pharos. The top sugges-tion was to support a personalized social map of Pharos, which would display commu-nities that a user is most interested in. Since we currently focus on recommending the popular communities to all users including new users, all users see the same so-cial map. In our ongoing work, we are exploring how to generate personalized social maps that can be tailored to each individual user X  X  needs based on their interaction patterns. For example, as a user becomes more and more involved in a particular community, this community should automatically become the center of the focus in his/her personalized social map. Related to personalization, several users suggested giving them options to sort the order of the recommended content or people. For ex-ample, one user commented:  X  X  don X  X  completely agree with the (current) ranking of content/people. I X  X  like to see multiple rank ing criteria, then I can select the criteria myself to sort the content/people, e.g., the number of comments, the number of hits, etc. X  It is interesting that users had conflicted opinions about the community sum-mary. Some found the current keyword-based summary too terse, while others found it too crowded. For example, one user mentioned that sometimes he had to guess the meaning of the keywords used in a community summary. He would like to see more meaningful summaries. On the other hand, a couple of users complained that the so-cial map was too crowded and suggested that each community should only display two or three keywords summarizing people and content.
 We also collected encouraging and intere sting results from the users regarding Pharo X  X  community tracking feature. Specifically, all users were able to correctly de-scribe the evolution of a community over time in Pharos. The users thought the feature was easy to use (4 . 2 out 5 on average) and somewhat useful (3 . 9 out 5 on average). Sev-enty percent of users thought tracking the overall popularity change of a community was the most useful feature instead of tracking content or people changes. Moreover, several users mentioned that they would also like to see the dead communities shown on the social map instead of having them simply removed. Most of users did not like the fact that Pharos displayed recommended communities at different locations on the screen in different snapshots. This displacement of the same communities appearing in consecutive time frames disrupted the visual continuity between adjacent snap-shots. Currently, for a new snapshot, Pharos always attempts to place more important communities near the center of the screen without necessarily preserving the layout of the previous snapshots. As preserving a visual layout across multiple frames is nontrivial [Wen et al. 2005], we are experimenting with different layout methods to balance multiple constraints simultaneously. In this article, we present Pharos, a social map-based recommendation technique, to address two challenges in recommender systems. First, it provides an overview of a social Web site, highlighting clustered hot content and people for specific time inter-vals. This helps users, especially new users, quickly understand the dynamics of a site over time and locate their interests, in part addressing the cold start problem. Second, it uses the social map to explain recommendation results by means of relating content with user social activities, thereby increas ing a recommendation X  s trustworthiness. In addition, the visual interactive social map allows users to explore the Web site by following links among different types of entities (e.g., communities, content, and people), compensating for the inaccuracy of recommendation algorithms. Pharos has been deployed internally at IBM, helping bloggers navigate the IBM BlogCentral Web site. The results of our preliminary evaluation has shown that a social map is useful in helping users understand and navigate a content-based social Web site. Feedback from our pilot users also points to future di rections for improving Pharos, such as the generation of a personalized social map for experienced users.

