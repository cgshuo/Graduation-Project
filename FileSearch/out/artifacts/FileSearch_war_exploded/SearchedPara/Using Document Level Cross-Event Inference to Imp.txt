 The goal of event extraction is to identify instances of a class of events in text. The ACE 2005 event extraction task involved a set of 33 generic event types and subtypes appearing frequently in the news . In additio n to identifying the event itself, it also identifies all of the participants and attributes of each e vent; these are the e ntities that are involved in that event . 
Identif ying an event and its participants and attributes is quite difficult because a large r field of view is often needed to understand how facts tie together. Sometimes it is difficult even for people to classify events from isolated sentences. From the sentence: it is hard to tell whether it is a Transport event in ACE, which means that he l eft the place; or an End -Position event, which means that he retire d from the company.

However, if we read the whole document, a clue like  X  he pla n ned to go shopping before he went home  X  would give us confidence to tag i t as a Transport event, while a clue like  X  They held a party for his retirement  X  would lead us to tag it as an End -Position event.

Such clues are evidence from the same event type. However, sometimes another event type is also a good predictor. For example, if we find a Start -Position event like  X  he was named president three years ago  X , we are also confident to tag (1) as End -Position even t.
Event argument identification also shares th is benefit. Consider the following two sentences: people died while 11 were injured . suspect got caught when he t ried to escape. If we only consider the local context of the trigger  X  exploded  X , it is hard to determine that  X  seven people  X  is a likely T arget of the A ttack event in (2), or that the  X  suspect  X  is the A ttacker of the A ttack event, because the structures of (2) and (3) are quite similar. The only clue is from the semantic inference that a person who died may well have been a T arget of the A ttack event, and the person arrested is probably the A ttacker of the A ttack event. Thes e may be seen as examples of a broader textual inference problem, and in general s uch knowledge is quite difficult to acquire and apply. However, in the present case we can take advantage of event extraction to learn these rules in a simpler fashion, whic h we present below.

Most current event extraction systems are based on phrase or sentence level extraction . Several recent studies use high -level information to aid local event extraction systems . For example, Finkel et al. (2005) , Maslennikov and Chua (2007), Ji and Grishman (2008), and Patwardhan and Riloff ( 2007, 2009) tried to use discourse, document, or cross -document information to improve information extraction . 
However, most of this research focuses on single event extractio n, or focuses on high -level information within a single event type, and does not consider information acquired from other event types. We extend these approaches by introducing cross -event information to enhance the performance of multi -event -type extracti on systems. Cross -event information is quite useful: first, some events co -occur frequently, while other events do not. For example, A ttack , D ie , and I njure events very frequently occur together, while A ttack and M arry are less likely to co -occur. Also, ty pical relations among the arguments of different types of events can be helpful in predicting information to be extracted. For example, the V ictim of a D ie event is probably the T arget of the A ttack event. As a result, we extend the observation that  X  X  doc ument containing a certain event is likely to contain more events of the same type X , and base our approach on the idea that  X  X  document containing a certain type of event is likely to contain instances of related events X . In this paper, automatically extra cted within -event and cross -event information is used to aid traditional sentence level event extraction. Automatic Content Extraction (ACE) defines an event as a specific occurrence involving participants 1 , and it annotates 8 types and 33 subtypes of events. We first present some ACE terminolog y to understand this task more easily :  X  Entity : an object or a set of objects in one  X  Entity mention : a reference to an entity  X  Timex: a time expression including date,  X  Event mention : a phrase or sentence within  X  Event trigger : the main word that most  X  Event mention arguments (roles) 2 : the 
Consider the sentence: today , including the senseless slaying of Bob Cole and the assassination of Joe
Westbrook . Bob was on his way home when he was attacked ... 
Event extraction depends on previous phases like name identification, entity mention classification and coreference. Table 1 shows the results of this preprocessing. Note that entity mentions that share the same EntityID are coreferential and treated as the same object.
E ntit y (Time x) mention
There are three D ie events, which share the same Place and Time roles, with different Victim roles. And there is one A ttack event sharing the same Place and Time roles with the D ie events.
I n this paper, we treat the 33 event subtypes as separate event types and do not consider the hierarchical structure among them. Almost all the current ACE event extraction systems focus on processing one sentence at a time (Grishman et al., 2005; Ahn, 2006; Hardy et al. 2006). However, there have been several studies using high -level information from a wid er scope:
Maslennikov and Chua (2007) use discourse trees and local syntactic dependencies in a pattern -based framework to incorporate wider context to refine the performance of relation extraction. They claimed that discourse information could filter nois y dependency paths as well as increasing the reliability of dependency path extraction.

Finkel et al. (2005) used Gibbs sampling, a simple Monte Carlo method used to perform approximate inference in factored probabilistic models. By using simulated anneali ng in place of Viterbi decoding in sequence models such as HMMs, CMMs, and CRFs, it is possible to incorporate non -local structure while preserving tractable inference. They use d this technique to augment an information extraction system with long -distance dependency models, enforcing label consistency and extraction template consistency constraints.

Ji and Grishman (2008) were inspired from the hypothesis of  X  X ne Sense Per Discourse X  (Yarowsky, 1995); they extended the scope from a single document to a clu ster of topic -related documents and employed a rule -based approach to propagate consistent trigger classification and event arguments across sentences and documents. Combining global evidence from related documents with local decisions, they obtained an ap preciable improvement in both event and event argument identification .

Patwardhan and Riloff (2009) proposed a n event extraction model which consists of two components: a model for sentential event recognition , which offers a probabilistic assessment of wh ether a sentence is discussing a domain -relevant event ; and a model for recognizing plausible role fillers, which identifies phrases as role fillers based upon the assumption that the surrounding context is discussing a relevant event. This unified probabi listic model allows the two components to jointly make decisions based upon both the local evidence surrounding each phrase and the  X  X eripheral vision X .

Gupta and Ji (2009) used cross -event information within ACE extraction, but only for recovering implici t time information for events. We analyzed the sentence -level baseline event extraction, and found that many events are missing or spuriously tagged because the local information is not sufficient to make a confident decision. In some local cont exts, it is easy to identify an event; in others, it is hard to do so. Thus, if we first tag the easier cases, and use such knowledge to help tag the harder cases, we might get better overall performance. In addition, global information can make the event tagging more consistent at the document level.
Here are some examples. For trigger classification: biggest -selling daily newspaper and official organ of Tehran's municipality has stepped down following the appointment of a conservative ... it was founded a decade ago ... but a conservative city council was elected in the February 28 municipal polls ... Mahmud Ahmadi -Nejad, reported to be a hardliner among conservatives, was appointed mayor on Saturday ... Founded by former mayor Gholamhossein 
Karbaschi, Hamshahri ...
The sentence level baseline system finds event triggers like  X  founded  X  (trigger of Start -Org ) ,  X  elected  X  (trigger of Elect ), and  X  appointment  X  (trigger of Start -Position ) , which are easier to identify because these triggers have more specific meanings. However, it does not recognize the trigger  X  stepped  X  (trigger of End -Position ) because in the training corpus  X  stepped  X  does not always appear as an End -Position event, and local contex t does not provide enough information for the MaxEnt model to tag it as a trigger . However, in the document that contains related events like Start -Position ,  X  stepped  X  is more likely to be tagged as an End -Position event.

For argument classification, the c ross -event evidence from the document level is also useful: was a blindfolded woman seen being shot in the head by a hooded militant on a video obtained but not aired by the Arab television station Al -Jazeera. She would be the first foreign woman to die in the wave of kidnappings in Iraq... she 's been killed by (men in pajamas), turn Iraq upside down and find them.

From this document , the local information is not enough for our system to tag  X  Hassan  X  as the target of a n Attack event, because it is quite far from the trigger  X  shot  X  and the syntax is somewhat complex. However, it is easy to tag  X  she  X  as the Victim of a D ie event, because it is the object of the trigger  X  killed  X . As  X  she  X  and  X  Hassan  X  are co -referred, we can use this easily tagged argument to help identify the harder one. 4.1 Trigger Consistency and Distribution Within a document, there is a strong trigger consistency: if one instance of a word triggers an event, other instances of the same word will trigge r events of the same t y p e 3 . 
There are also strong correlations among event types in a document . To see this we calculated the conditional probability (in the ACE corpus) of a certain event type appearing in a document when another event type appears in t he same document.
As there are 33 subtypes, there are potentially 33  X  32/2=528 event pairs. However, only a few of these appear with substantial frequency. For example, there are only 10 other event types that occur in more than 10 % of the documents in which a die event appears. From T able 3, we can see that A ttack , T ransport and I njure events appear frequently with D ie . We call these the related event types for D ie ( see Figure 1 and Table 3 ).

The same thing happens for Start -Org events, although its distribution is quite different from Die events. For Start -Org , there are more related events like End -Org , Start -Position , and End -Position (Figure 2). But there are 12 other event types which neve r appear in documents containing Start -Org events. 
From the above, we can see that the distributions of different event types are quite different, and these distributions might be good predictors for event extraction. 4.2 Role Consistency and Distribution Normally o ne entity, if it appears as an argument of multiple events of the same type in a single document, is assigned the same role each t i m e . 4
There is also a strong relationship between the roles when an entity participates in different types of events in a single document. For example, we checked all the entities in the ACE corpus that appear as the Target role for an Attack event, and recorded the roles they were assigned for other event types. Only 31 other event -role combinations appeared in total ( out of 237 possible with ACE annotation), and 3 clearly dominated. In Figure 3, we can see that the most likely roles for the Target role of the Attack event are the Victim role of the Die or Injure event and the Artifact role of the Transport event . The l ast of these corresponds to troop movements prior to or in response to attacks . In this section we present our approach to using document -level event and role information t o improve sentence -level ACE event extraction . 
Our event extraction system is a two -pass system where the sentence -level system is first applied to make decisions based on local information. Then the confident local information is collected and gives an approximate view of the content of the document. The docume nt level system is finally applied to deal with the cases which the local system can X  X  handle, and achieve document consistency. 5.1 Sentence -level Baseline System We use a state -of -the -art English IE system as our baseline (Grishman et al. 2005) . This system extracts events independently for each sentence, because the definition of event mention argument con strains them to appear in the same sentence. The system combines pattern matching with statistical models. In the training process, for every event mention in the ACE training corpus, patterns are constructed based on the sequences of constituent heads separating the trigger and arguments. A set of Maximum Entropy based classifiers are also trained:  X  Argument Classifier: to distinguish  X  Role Classifier: to classify arguments by  X  Reportable -Event Classifier (Trigger 
In the test procedure, each document is scanned for instances of triggers from the training corpus. When an instance is found, the system tries to match the environment of the trigger against the set of patterns associated with that trigger. This pat tern -matching process, if successful, will assign some of the mentions in the sentence as arguments of a potential event mention. The argument classifier is applied to the remaining mentions in the sentence; for any argument passing that classifier, the ro le classifier is used to assign a role to it. Finally, once all arguments have been assigned, the reportable -event classifier is applied to the potential event mention; if the result is successful, this event mention is r e p o r t e d . 5 5.2 Document -level Confident I nformation To use document -level information, we need to collect information based on the sentence -level baseline system. As it is a statistically -based model, it can provide a value that indicates how likely it is that this word is a trigger, o r that the mention is an argument and has a particular role. We want to see if this value can be trusted as a confidence score. To this end, we set different thresholds from 0.1 to 1.0 in the baseline system output, and only evaluate triggers, arguments or roles whose confidence score is above the threshold. Results show that as the threshold is raised, the precision generally increases and the recall falls. This indicates that the value is consistent and a useful indicator of event/argument confidence (see Figure 4 ) . 6
To acquire confident document -level information, we only collect triggers and roles tagged with high confidence. Thus, a trigger threshold t_threshold and role threshold r_threshold are set to remove low confidence triggers and arguments. Finally, a table with confident event information is built. For every event, we collect its trigger and event type; for every argument, we use co -reference information and record every entity and its role(s) in events of a certain type. 
To achieve document consistency, in cases where the baseline system assigns a word to triggers for more than one event type , if the margin between the probability of the highest and the second highest scores is above a threshold m_threshol d , we only keep the event type with highest score an d record this in the confident -event table. Otherwise (if the margin is smaller) the event type assignments will be recorded in a separate conflict table. The same strategy is applied to argument/role conflicts. We will not use information in the conflict table to infer the event type or argument/ roles for other event mentions, because we cannot confidently resolve the conflict. However, the event type and argument/role assignments in the conflict table will be in cluded in the final output because the local confidence for the individual assignments is high .

As a result, we finally build two document -level confident -event tables: the event type table and the argument (role) table. A conflict table is also built but not used for further predictions (see Table 4).
 Trigger Event Type
Entity ID Event type Role
Entity ID Event type Role s 5.3 Statistical Cross -event Classifiers To take advantage of cross -event relationships, we train two additional MaxEnt classifiers  X  a document -level trigger and argument classifier  X  and then use these classifiers to infer additional events and event arguments. In analyzing new text, the trigger classifier is first applied to tag an event, and then the argument (role) classifier is applied to tag possi ble arguments and roles of this event. 5.3.1 Document Level Trigger Classifier From the document -level confident -event table, we have a rough view of what kinds of events are reported in this document. The trigger classifier predicts whether a word is the trigger of an event, and if so of what type, given the information (from the confident -event table) about other types of events in the document. Each feature of this classifier is the conjunction of:  X  T he base form of the word  X  A n event type  X  A binary indicator of whether this event (There are 33 event types and so 33 features for each word). 5.3.2 Document Level Argument (Role) Classifier The role classifier predicts whether a given mention is an argumen t of a given event and, if so, what role it takes on, again using information from the confident -event table about other events.

As noted above, we assume that the role of an entity is unique for a specific event type, although an entity can take on differ ent roles for different event types. Thus, if there is a conflict in the document level table, the collector will only keep the one with highest confidence, or discard them all. As a result, every entity is assigned a unique role with respect to a particul ar event type, or null if it is not an argument of a certain event type.

Each feature is the conjunction of:  X  The event type we are trying to assign an  X  One of the 32 other event types  X  The r ole of this entity with respect to the 5.4 Document Level Event Tagging At this point, the low -confidence triggers and arguments (roles) have been removed and the document -level confident -event table ha s been built ; the new classifiers are now used to augment the confident tags that were previously assigned based on local information.

For trigger tagging, we only apply the classifier to the words that do not have a confident local labeling; if the trigge r is already in the document level confident -event table, we will not re -tag it. Human annotation1 59.2 59.4 59.3 60.0 69.4 64.4 51.6 59.5 55.3 Human annotation2 69.2 75.0 72.0 62.7 85.4 72.3 54.1 73.7 62.4
The argument/role tagger is then applied to all events  X  those in the confident -event table and those newly tagged. For argument tagging, we only consider the entity mentions in the same sentence as the trigger word, because by the ACE event guidelines, the arguments of an event should appear within the same sentence as the trigger. For a given event, w e re -tag the entity mentions that have not already been assigned as arguments of that event by the co nfident -event or conflict table. We followed Ji and Grishman (2008)  X  X  evaluation and randomly select 10 newswire texts from the ACE 2005 training corpora as our development set, which is used for parameter tuning, and then conduct a blind test on a separate set of 40 ACE 2005 newswire texts. We use the rest of the ACE training corpus (549 documents) as training data for both the sentence -level baseline event tagger and document -level event tagger. 
To compare with previous work on within -event propagation, w e reproduced Ji and Grishman (2008) X  s approach for cross -sentence, within -event -type inference (see  X  within -event -type rules  X  in Table 5). We applied their within -document inference rules using the cross -sentence confident -event information . These rules basically serve to a djust trigger and argument classification to achieve document -wide consistency. This process treats each event type separately: information about events of a given type is used to infer information about other events of the same type.
We report the overall Precision (P), R ecall (R), and F -Measure (F) on blind test data. In addition, we also report the performance of two human annotators on 28 ACE newswire texts (a subset of the blind test s e t ) . 7
From the results presented in Table 5, we can see that using the document level cross -event information, we can improve the F score for trigger classification by 9.0%, argument classification by 9 .0 %, and role classification by 8.1 %. Recall improved sharply, demonstrating that cross -event information could recover information that is difficult for the sentence -level baseline to extract; precision also improved over the baseline, although not as markedly.

Compared to the within -event -type rules, the cross -event model yields much more improvement for trigger classification: rule -based propagation gains 1.7% improvement while the cross -event model achieves a further 7.3 % improvement. For argument and role classification, the cross -event model also gains 3 % and 2.3 % above that obtained by the rule -based propagation process. We propose a document -level statistical model for event trigger and argument (role) classification to achieve document level within -event and cross -event consistency. Experiments show that document -level information can improve the performance of a sentence -level baseline event extraction system.
The model presented here is a simple two -stage recognition process; nonetheless, it has proven sufficient to yield substantial improvements in event recognition and event argument recognition. Richer models, such as those based on joint inference, may produce even greater gains. In addition, extending the approach to cr oss -document information, following (Ji and Grishman 2008), may be able to further improve performance.

