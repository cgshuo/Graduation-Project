 A prominent use case for Language Models (LMs) in NLP applications such as Automatic Speech Recognition (ASR) and Machine Translation (MT) is selection of the most fluent word sequence among multiple hypotheses. Statistical LMs formulate the problem as the computation of the model X  X  proba-bility to generate the word sequence w 1 w 2 ...w m  X  w 1 , assuming that higher probability corresponds to more fluent hypotheses. LMs are often represented in the following generative form: In the following discussion, we will refer to the func-tion p ( w i | w i  X  1 1 ) as a language model.
Note the context space for this function, w i  X  1 1 is arbitrarily long, necessitating some independence assumption, which usually consists of reducing the relevant context to n  X  1 immediately preceding to-kens: These distributions are typically estimated from ob-served counts of n-grams w i i  X  n +1 in the training data. The context space is still far too large; there-fore, the models are recursively smoothed using lower order distributions. For instance, in a widely used n-gram LM, the probabilities are estimated as follows: where  X  is a discounted probability 1 .

In addition to n-gram models, there are many other ways to estimate probability distributions terested in models involving decision trees (DTs). As in n-gram models, DT models also often uti-lize interpolation with lower order models; however, there are issues concerning the interpolation which arise from the fact that decision trees permit arbi-trary clustering of context, and these issues are the main subject of this paper. The vast context space in a language model man-dates the use of context clustering in some form. In n-gram models, the clustering can be represented as a k -ary decision tree of depth n  X  1 , where k is the size of the vocabulary. Note that this is a very con-strained form of a decision tree, and is probably sub-optimal. Indeed, it is likely that some of the clusters predict very similar distributions of words, and the model would benefit from merging them. Therefore, it is reasonable to believe that arbitrary (i.e., uncon-strained) context clustering such as a decision tree should be able to outperform the n-gram model.
A decision tree provides us with a clustering func-tion  X ( w i  X  1 i  X  n +1 )  X  {  X  1 ,...,  X  N } , where N is the number of clusters (leaves in the DT), and clusters  X  k are disjoint subsets of the context space; the probability estimation is approximated as follows: Methods of DT construction and probability estima-tion used in this work are based on (Filimonov and Harper, 2009); therefore, we refer the reader to that paper for details.

Another advantage of using decision trees is the ease of adding parameters such as syntactic tags: In this case, the decision tree would cluster the con-oretic metrics, without utilizing heuristics for which order the context attributes are to be backed off (cf. Eq. 1). In subsequent discussion, we will write equations for word models (Eq. 2), but they are equally applicable to joint models (Eq. 3) with trivial transformations. Let us rewrite the interpolation Eq. 1 in a more generic way: where,  X  n is a discounted distribution,  X  n is a clus-tering function of order n , and  X  ( X  n ( w i  X  1 1 )) is the backoff weight chosen to normalize the distribution. BO n  X  1 is the backoff clustering function of order n  X  1 , representing a reduction of context size. In the case of an n-gram model,  X  n ( w i  X  1 1 ) is the set of word sequences where the last n  X  1 words are w quences ending with w i  X  1 i  X  n +2 . In the case of a de-cision tree model, the same backoff function is typ-ically used, but the clustering function can be arbi-trary.

The intuition behind Eq. 4 is that the backoff con-text BO n  X  1 ( w i  X  1 1 ) allows for more robust (but less informed) probability estimation than the context cluster  X  n ( w i  X  1 1 ) . More precisely:  X  that is, every word sequence W that belongs to a context cluster  X  n ( w i  X  1 1 ) , belongs to the same back-off cluster BO n  X  1 ( w i  X  1 1 ) (hence has the same back-off distribution). For n-gram models, Property 5 trivially holds since BO n  X  1 ( w i  X  1 1 ) and  X  n ( w are defined as sets of sequences ending with w i  X  1 i  X  n +2 and w i  X  1 i  X  n +1 with the former clearly being a superset of the latter. However, when  X  can be arbitrary, e.g., a decision tree, that is not necessarily so.

Let us consider what happens when we have two context sequences W and W 0 that belong to the same cluster  X  n ( W ) =  X  n ( W 0 ) but differ-ent backoff clusters BO n  X  1 ( W ) 6 = BO n  X  1 ( W 0 ) . For example: suppose we have  X ( w i  X  2 w i  X  1 ) = ( { on } , { may,june } ) and two corresponding backoff clusters: BO 0 = ( { may } ) and BO 00 = ( { june } ) . Following on , the word may is likely to be a month rather than a modal verb, although the latter is more frequent and will dominate in BO 0 . There-fore we have much less faith in  X  p ( w i | BO 0 ) than in  X  p ( w i | BO 00 ) and would like a much smaller weight  X  assigned to BO 0 , but it is not possible in the back-off scheme in Eq. 4, thus we will have to settle on a compromise value of  X  , resulting in suboptimal per-formance.

We would expect this effect to be more pro-nounced in higher order models, because viola-tions of Property 5 are less frequent in lower or-der models. Indeed, in a 2-gram model, the property is never violated since its backoff, un-igram, contains the entire context in one clus-ter. The 3-gram example above,  X ( w i  X  2 w i  X  1 ) = likely to occur because may in w i  X  1 position will likely be split from june very early on, since it is very informative about the following word. How-ever, in a 4-gram model,  X ( w i  X  3 w i  X  2 w i  X  1 ) = ( { on } , { may,june } , { &lt;unk&gt; } ) is quite plausible.
Thus, arbitrary clustering (an advantage of DTs) leads to violation of Property 5, which, we argue, may lead to a degradation of performance if back-off interpolation Eq. 4 is used. In the next section, we generalize the interpolation scheme which, as we show in Section 6, allows us to find a better solution in the face of the violation of Property 5. We use linear interpolation as the baseline, rep-resented recursively, which is similar to Jelinek-Mercer smoothing for n-gram models (Jelinek and Mercer, 1980): assigned to each cluster and are optimized on a held-out set using EM. p n ( w i |  X  n ) is the probability dis-tribution at the cluster  X  n in the tree of order n . This interpolation method is particularly useful as, un-like count-based discounting methods (e.g., Kneser-Ney), it can be applied to already smooth distribu-tions p n 2 . We can unwind the recursion in Eq. 6 and make sub-stitutions: Note that in this parameterization, the weight as-signed to p n  X  1 ( w i |  X  n  X  1 ) is limited by (1  X   X  n i.e., the weight assigned to the higher order model.
Ideally we should be able to assign a different set of interpolation weights for every eligible combina-tion of clusters  X  n , X  n  X  1 ,..., X  1 . However, not only is the number of such combinations extremely large, but many of them will not be observed in the train-ing data, making parameter estimation cumbersome. Therefore, we propose the following parameteriza-tion for the interpolation of decision tree models: Note that this parameterization has the same num-ber of parameters as in Eq. 7 (one per cluster in ev-ery tree), but the number of degrees of freedom is larger because the the parameters are not constrained to sum to 1, hence the denominator.

In Eq. 8, there is no explicit distinction between higher order and backoff models. Indeed, it ac-knowledges that lower order models are not backoff models when Property 5 is not satisfied. However, it can be shown that Eq. 8 reduces to Eq. 6 if Prop-erty 5 holds. Therefore, the new parameterization can be thought of as a generalization of linear inter-polation. Indeed, suppose we have the parameteri-zation in Eq. 8 and Property 5. Let us transform this parameterization into Eq. 7 by induction. We define: where, due to space limitation, we redefine  X  m  X   X  m (  X  m ) and  X  m  X   X  m (  X  m ) ;  X  m  X   X  m ( w i.e., the cluster of model order m , to which the se-quence w i  X  1 1 belongs. The lowest order distribution p 1 is not interpolated with anything, hence: Now the induction step. From Property 5, it follows that  X  m  X   X  m  X  1 , thus, for all sequences in  X  w n  X  m , we have the same distribution: Note that the last transformation is because  X  m  X   X  m  X  1 ; had it not been the case,  X  p m would depend on the combination of  X  m and  X  m  X  1 and require multi-ple parameters to be represented on its entire domain w 1  X   X  m . After n iterations, we have: Thus, we have constructed  X  p n ( w i |  X  n ) using the same recursive representation as in Eq. 6, which proves that the standard linear interpolation is a spe-cial case of the new interpolation scheme, which oc-curs when the backoff Property 5 holds. Models are trained on 35M words of WSJ 94-96 from LDC2008T13. The text was converted into speech-like form, namely numbers and abbrevia-tions were verbalized, text was downcased, punc-tuation was removed, and contractions and posses-sives were joined with the previous word (i.e., they  X  X l becomes they X  X l ). For syntactic modeling, we used tags comprised of POS tags of the word and its head, as in (Filimonov and Harper, 2009). Parsing of the text for tag extraction occurred after verbal-ization of numbers and abbreviations but before any further processing; we used an appropriately trained latent variable PCFG parser (Huang and Harper, 2009). For reference, we include n-gram models with Jelinek-Mercer and modified interpolated KN discounting. All models use the same vocabulary of approximately 50k words.

We implemented four decision tree models 3 : two using the interpolation method of (Eq. 6) and two based on the generalized interpolation (Eq. 8). Pa-rameters  X  were estimated using the L-BFGS to minimize the entropy on a heldout set. In order to eliminate the influence of all factors other than the interpolation, we used the same decision trees. The perplexity results on WSJ section 23 are presented in Table 1. As we have predicted, the effect of the new interpolation becomes apparent at the 4-gram order, when Property 5 is most frequently violated. Note that we observe similar patterns for both word-tree and syntactic models, with syntactic models outper-forming their word-tree counterparts.

We believe that (Xu and Jelinek, 2004) also suf-fers from violation of Property 5, however, since they use a heuristic method 4 to set backoff weights, it is difficult to ascertain the extent. The main contribution of this paper is the insight that in the standard recursive backoff there is an im-plied relation between the backoff and the higher or-der models, which is essential for adequate perfor-mance. When this relation is not satisfied other in-terpolation methods should be employed; hence, we propose a generalization of linear interpolation that significantly outperforms the standard form in such a scenario.
