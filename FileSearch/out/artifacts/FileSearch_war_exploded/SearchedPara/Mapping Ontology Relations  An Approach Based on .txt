 describes the common knowledge in a domain through formally defining concepts, relations, axioms and individuals in order to solve knowledge sharing problems [2]. Usually the ontologies are distributed, and produced by different communities. That causes the heterogeneous problem, which is the major obstacle to share information between different systems. Ontology mapping is a main approach to solve such prob-lems through capturing the communication rules between ontologies [3]. 
Concept mapping and relation mapping are the two kinds of most important map-pings. Finding these mappings is a key issue. Current methods usually employ the technologies such as string or structure similarity matching [4], machine learning [5], or integration of several technologies [6], to compute the similarity between the corre-sponding entities in different ontologies. However, most works just focus on the map-mapping is important in applications. Several methods are proposed for discovering the relation mappings. Noy and Musen determine the relation mappings based on lexical similarity [4]. QOM method compares some features of relations, such as label, URI, domain and range, super-properties and sub-properties [6]. These methods are all based on some basic heuristic rules, and cannot achieve high quality relation mappings. Doan and his colleagues declare that their machine learning method for the concept mappings may be suitable for discovering relation mappings [5], but it is an ongoing research until now. Vargas-Vera and Motta propose a similarity algorithm to access relation similarity through comparing two graphs [7], one comes from the query, and the other obtained from the ontology. This method uses ontological structures and instances and the WordNet thesaurus. However, this method may omit some valid relation mappings. 
Some reasons cause the fact that finding relation mappings is more difficult than is binary relationship on instances. Second, relations can not be organized effectively relations are not suitable for dealing with relation mappings. 
This paper proposes a novel approach based on best approximations, which is inspired by our previous work for complex concept mappings based on sharing instances [8]. The actly the relation mappings. To get the best mappings, we extend the least upper(/greatest lower) bounds as multielement least upper(/greatest lower) bounds, that not only contain-related concepts. To avoid redundancy, the simplified multielement bounds are also de-fined. We provide an effective algorithm for finding the relation mappings. 
This paper is organized as follows: Section 2 provides some basic definitions. Sec-tion 3 discusses the methods for finding the best upper approximations and lower approximations respectively. Finally, conclusions are given in section 4. Since some relations also can be organized as hierarchy by  X  X ubPropertyOf X  property, the method for dealing with concept hierarch y can also be used here. Meanwhile, we tions. Our aim is to find the relation mappings of each relation R in O 1 with respect to O . We first present the definition of the best approximations of R , and regard them as the relation mappings. Let T C and T R be the set of concepts and set of relations in O 2 respectively. Here, we just focus on the relations between instances of two concepts, namely the object properties in OWL. Another type of relations between instances of concepts and RDF literals and XML Schema datatypes, namely datatype properties in OWL, is not considered in this paper. 
To find the similarity of relations, we assume that the two ontologies considered sharing same instances. There are some ways for providing sharing instances such as manual annotation. Therefore, equal concepts must have same set of instances. We think a relation also have its instances, and call them relation instances. R ={&lt; x , y &gt;|  X  x , y , x  X  C d , y  X  C r , and R ( x , y )}. If two relations R and S are equal, it must have R I = S I . Based on definition 1, some relations also have subsumption relationship. iff II SR  X  . R properly subsumes S ( SR  X  ) if SR  X  but not R S  X  . 
We also define a universal relation F to subsume any other relations. Obviously, the relation subsumption is transitive and reflexive. Most current ontology languages support the relation subsumption such as rdfs:subPropertyOf in RDF(S) and OWL. 
Current ontology languages do not support the disjunction/conjunction operators on relations, but we can express them in relation mappings, because the mappings are independent of the ontology. Compound is another important operator on relations, but compounding two relations would generate infinite numbers of new relations. So we do not consider compound operator here. Definition 3 ( Relation conjunction ) . The conjunction of two relations R and S can be denoted as {, |, , } II R SxyxyRandxyS  X =&lt;&gt;&lt;&gt; X  &lt;&gt; X  . denoted as { , | , , } II R SxyxyRorxyS  X =&lt;&gt;&lt;&gt; X  &lt;&gt; X  . stances. We use similar methods for concept mappings to deal with relation mappings. 
To assure the precision of results, we deduce more instance pairs from the existing ontologies. We consider inverse relations first. If R is inverse to S and there is a rela-consider the symmetric relation. If R is symmetric and R ( a , b ), we have a new relation process, we enrich the number of the relation instances in existing ontologies. 
Here, we define approximations of relations using least upper bounds and greatest lower bounds of relations. These approximations are the relation mappings. (1). lub( , ) R SRTRS  X  X   X   X  ; (2). , lub( , ), RR MTR M N RT N M  X  X   X  X  X  X   X  X 
Then the upper approximations of a relation can be defined using the conjunction of the relations in lub( R , T R ): ua( R , T R )= sumes R . Therefore, ua( R , T R ) is an upper approximation of R with respect to T R . hold: (1). glb( , ) R SRTSR  X  X   X   X  ; (2). , glb( , ), RR MTM R N RTM N  X  X   X  X  X  X   X  X 
Then the lower approximations of a relation can be defined: Unfortunately, the quality of ua( R , T R ) and la( R , T R ) is not acceptable in some cases. In Relation set T R , the super-relation of R may be much larger and the sub-relations of R may be much smaller. In the worst cases, if R has no sub-relation or super-relation example, let M , N are relations in T R , if there is no relation subsumes R , then it must have ua( R , T R )= F , and R MN  X   X  is impossible. However, it may have RMN  X   X  X  F , so MN  X  is closer to R than ua( R , T R ). 
We expand disjunctions(/conjunctions) in least upper(/greatest lower) bounds, and call them multielement least upper(/greatest lower) bounds. Using the multielement bounds can get best approximations of the relations.  X  = X  X  X  X  X  X  X  X  X  be the disjunction of all relations in E , and call  X  an i -relation-= X  X  X  X  X  X  X  X  X  is called i -relation-conjunction in T ing relation-disjunctions. We first define the multielement least upper bounds. upper bounds of R with respect to T R is a set of relation-disjunctions in T R , notated as mlub( R , T R ), if the following assertions hold: 
The first assertion ensures that each member of mlub( R , T R ) should subsume R. The second ensures that for any relation-disjunctions that subsume R, it should also sub-sume at least one member of mlub( R , T R ). Notice that mlub( R , T R ) may not be unique for certain R and T . 
We define the upper approximation based on multielements: Theorem 1. mua( R , T R ) is the least upper approximation of R with respect to T R . Proof : We only need to prove that for any upper approximation Q of R with respect to T , i.e. R  X  Q , it has mua( R , T R )  X  Q .  X  , hold that , R  X 
Theorem 1 shows that the multielement least upper bounds can derive the least up-per approximation of relation R . 
There may be many multielement least upper bounds of R with respect to T R . Most of them contain redundant members. We define the simplified multielement least upper bounds of relation. multielement least upper bounds of R, and for any  X   X  slub( R , T R ) the following asser-tions hold: 
The three assertions can remove redundancy. The first one ensures that the mem-bers of the bounds are least in subsumption; the second one ensures that only one of that the selected one is minimal in length. 
Similarly, we can define multielement greatest lower bounds and simplied mul-tielement greatest lower bounds. For the limitation of space, we omit them. 
At last, we consider some concepts to obtain better relation mappings. There are some relationships between relations and concepts, and the 1 -1 relations have four kinds:  X  X  . We use these concepts in relation mappings for getting best results. When finding upper approximations, we add the concept mappings of C 1 and C into the upper bounds. When finding lower approximations, we add the concept mappings of D 1 and D 2 into the lower bounds. finding best upper approximations is similar to the one for the best lower approxima-is to find all members of ps , then extends ps as pse to contain related concepts. 
It needs checking the subsumption between disjunctions of relations in T R , or be-tween relation R and any disjunction of relations in T R . The total number of relation-reduce the time complexity, it needs to test relation-sets as few as possible. The basic intuition is that some relation-sets have the feature that any superset of them is not in ps . Let ns be the set of such relation-sets, i.e. ns ={ E | FE Fps  X  X   X   X  }. So if E is in ns , then all proper supersets of E need not to be considered. 
Fig. 1 shows the framework of the algorithm. We choose stepwise and iterative need not to be tested in after steps, it has no use for generate c i +1 . So for any member r , which is used to generated c i +1 for the next step. v i may have some redundancy, so come more precise. The algorithm of finding simplified multielement greatest lower bounds of relation R with respect to T R is similar to the algorithm above. The difference is that it needs checking the subsumption relations between conjunctions of relations in T R . We still ps , and use the relation hierarchy to reduce th e search space. According the definition again. This paper proposes a novel approach based on best approximations for discovering the relation mappings between heterogeneous ontologies. The core idea of the method them to get upper and lower approximations of the relation. Especially, this paper provides the framework of the algorithm for finding the relation mappings. 
