 XML Web Service is a platform-independent Web application that accepts re-quests from different systems on the Internet and can involve a range of web technologies such as XML [7], SOAP [6], WSDL[8] and HTTP[14]. XML is used to store and exchange data in the Internet that may include private message of customers. For example, the following XML document displays customer X  X  information.
 and relationships between data. In Table 1, the element customerInfo includes cid, name and creditCardInfo sub-elements. The sub-element cid is a simple type while sub-elements name and creditCardInfo are combined with their own sub-elements. An XML document may be generated from various resources with varying security requirements due to its ability to express complex relationship between data. Alternatively, a user may like to limit access to particular parts of an XML document. In the example above, Tony objects that everyone can read all information on his Mastercard. Another example may happen in an Uni-versity, when an XML document can consist of information from applications among several faculties and multiple databases. When an internal or external user accesses this document, his/her access permission has to be monitored ac-cording to security policies in all these faculties and databases. These examples show that secure XML document is an significant topic.
 22]. But all those approaches have some limitations. Encryption and decryption skills [12] are used in protection of communications between servers and clients rather than dissemination from clients, since these skills focus on the protection of file level but not on a systematic level. Additionally they only manage ac-cess requirements from a server side. Both Secure Sockets Layer (SSL) [13] and firewall [22], the recent techniques used on Intranet assume that the comput-ers know XML web services, and firewall can accept only connections coming from those computers which IP addresses are known already. However, IP ad-dresses of users are unknown to services before they connect on the Internet. SSL is applied to encrypt and decrypt messages exchanged between clients and servers. It can protect messages from unauthorized reading while messages are in transition, and also verifies incoming messages whether actually come from the correct sender. However, SSL is not satisfactory in Web service environment, specially in association with XML message used in SOAP -based communi-cations [6]. This is because the SOAP is a specification for performing meth-ods request and was conceived as a message format not bound to any single protocol [10].
 of XML documents. In particular, the following two problems are critical to developing a secure and flexible access control architecture. adopt usage control to manage access to XML documents and secure architec-tures to protect against malicious dissemination. Traditional access control has analyzed authorization decisions on a subject X  X  access to target resources.  X  X bli-gations X  are requirements that have to be followed by the subject for allowing access resources.  X  X onditions X  are subject and object independent requirements that have to be passed. In today highly dynamic, distributed environment, obli-gations and conditions of new hosts are decision factors for the management of XML documents.
 background of XML and usage control. Three decision factors Authorization, Obligation, Conditions and Continuity properties pre and ongoing are introduced in this section. Section 3 shows our proposed authorization models for usage control. It includes pre-Authorizations, ongoing-Authorizations, pre-Obligations, ongoing-Obligations , pre-Conditions and ongoing-Conditions. Section 4 discusses how to build secure architectures for XML documents by using reference mon-itors in details. Section 5 compares our work with the previous work on XML document security. The difference between this work from others is presented. Section 6 concludes the paper and outlines our future work. 2.1 XML XML [7] is a markup language for describing semi-structured information. The XML document is composed of nested elements, each delimited by a pair of start and end tags (e.g. &lt; name &gt; and &lt; /name &gt; ) or by an empty tag. XML document can be classified into two categories: well-formed and valid. Well-formalization requires XML document to follow some syntax, such as, there is exactly one element that completely contains all other elements, elements may nest but not overlap, etc. Validation requires XML instance to contain specified elements and attributes, following specified datatypes and relationships. 2.2 Usage Control There are eight components: subjects, subject attributes, objects, object at-tributes, rights, authorizations, obligations,and conditions in usage control model [20] (see Figure 1). Subjects and objects are familiar concepts from the past thirty years of access control, and are used in their familiar sense in this paper. A right represents access of a subject to an object, such as read or write. The existence of the right is determined when the access is attempted by the subject. The us-age decision functions indicated in Figure 1 makes this determination based on subject attributes, object attributes, authorizations, obligations and conditions at the time of usage requests.
 Examples of subject attributes are identities, group names, roles, memberships, credits, etc. Examples of object attributes are security labels, ownerships, classes, access control lists, etc. In an on-line shop a price could be an object attribute, for instance, the book Harry Potter is priced at $20 for a read right and priced at $1000 price for a resell right.
 cision functions to determine whether a subject should be allowed to access an object. Authorizations are based on subject and object attributes and the spe-cific right. Authorization is usually required prior to the access, but in addition it is possible to require ongoing authorization during the access, e.g., a certifi-cate revocation list (CRL) may be periodically checked while the access is in progress. An access is immediately revoked if the relevant certificate appears on the CRL. Authorizations may require updates on subjects and object attributes. These updates can be either  X  X re X ,  X  X ngoing X , or  X  X ost X  that are called continuity properties shown in Figure 2.
 oriented requirements. For example, IEEE member can access full papers in the IEEE digital library. They can also include the security status of the system, such as low level, normal, high alert, etc. In traditional access control, authorization is assumed to be done before access is allowed (pre). However, it is quite reasonable to extend this for continuous enforcement by evaluating usage requirements throughout usages (ongoing). We now discuss authorization models for XML documents adopting usage control in this section. Based on three decision factors: authorizations, obligations, and conditions, we develope a family of core models for usage control. By core models, we mean that they focus on the enforcement process and do not include adminis-trative issues. We assume there exists a usage request on an XML target object. Decision-making can be done either before (pre) or during (ongoing) exercise of the requested right. Decision-making after the usage has no influence on the decision of current usage. Based on these criteria, we have 6 possible cases spaces as a core model for usage control: pre-Authorizations, ongoing-Authorizations, pre-Obligations, ongoing-Obligations, pre-Conditions and ongoing-Conditions. Depending on the access requirements on XML documents in real world, it is possible to utilize more than one case.
 Obligations or Conditions alone with pre or ongoing decisions only. We focus on developing comprehensive usage control models for XML documents. Next we present usage control models (UCM) with different pure cases.
 A. UCM preA :pre-Authorizations Model In an UCM preA model, the decision process is performed before access is allowed. The UCM preA model has the following components: 1. S,XD,XDL,R,R 1 ,ATT ( S ) ,ATT ( XD ) ,ATT ( XDL ) and usage decision 2. allowed ( s, xd, r )  X  preA ( AT T ( s ) ,ATT ( xd ) ,r ), 3. allowed ( s, xdl, r 1 )  X  preA 1 ( AT T ( s ) ,ATT ( xdl ) ,r 1 ). can access XML document or not. The allowed ( s, xdl, r 1 ) predicate shows that subject s can access some part of information in XML document. At this stage, private information in XML document is restricted.
 B. UCM onA :ongoing-Authorizations Model processes. The UCM onA model has the following components: 1. S,XD,XDL,R,R 1 ,ATT ( S ) ,ATT ( XD ) ,ATT ( XDL ) as before, and ongo-2. allowed ( s, xd, r )  X  true , 3. allowed ( s, xdl, r 1 )  X  true , 4. stopped ( s, xd, r )  X  X  onA ( AT T ( s ) ,ATT ( xd ) ,r ), 5. stopped ( s, xdl, r 1 )  X  X  onA 1 ( AT T ( s ) ,ATT ( xdl ) ,r 1 ). allowed (s, xd, r) and allowed ( s, xdl, r 1 ) are required to be true , otherwise on-going authorization should not be initiated. Ongoing authorization is active throughout the usage of the requested right, and the onA and onA 1 predi-cates are repeatedly checked for continuation access. These checks are performed periodically based on time or event. The model does not specify exactly how this should be done. When attributes are changed and requirements are no longer satisfied, stopped procedures are performed. We use stopped ( s, xd, r ) and stopped ( s, xdl, r 1 ) to indicate that rights r and r 1 of subject s on object XML and XML document elements are revoked and the ongoing access terminated. For example, suppose only one user can access customer Mastercard information in an object XML simultaneously. If another user requests access and passed the pre-authorization, the user with the earlier time access is terminated. While this is a case of ongoing authorizations, it is important that the certificate should be evaluated in a pre decision.
 The following algorithm is based on these models and introduces how to manage an XML document access control when a user (subject) applies for accesses to an XML document (target.xml) with right r .
 by checking users X  (subjects X ) authorizations, obligations and conditions with continuity properties. The algorithm provides a solution of the problem 1. We analyse security architectures in next section for the problem 2 in which both client and server sides are required to be monitored. In this section, we discuss architecture solutions for XML control based on ref-erence monitors. Reference monitors have been discussed extensively in access control community. Subjects can access XML objects only through the reference monitor since it provides control mechanisms on access XML document and its elements. 4.1 Structure of Reference Monitor ISO has published a standard for access control framework by using reference monitors [16]. Based on the standard, XML reference monitor consists of Usage Decision Facility (UDF) and Usage Enforcement Facility (UEF) as shown in Figure 3. Each facility includes several functional modules.
 authorization, conditions and obligations decision modules . When a subject sends an access request through Customization module to Authorization module , Au-thorization module verifies authorization process and checks whether the request is allowed or not. It may return yes or no or metadata information of the au-thorization result. This metadata information can be used for approved access on XML objects by Customization module in UEF. Condition module is used to make a decision for whether the conditional requirements are satisfied or not. Obligation module is applied to verify whether obligations have been performed or not before or during the requested usage. When any obligation is changed, it must be monitored by monitor module and the result has to be resolved by Update module in UEF. Applications of these modules rely on object systems requirements. 4.2 Architectures There are two kinds of reference monitors: Server-side Reference Monitor (SRM), and Client-side Reference Monitor (CRM). Servers provide XML document and clients require access to the XML object. Like a traditional reference monitor, an SRM works in server system environment and manages access to XML objects in the server. On the other hand, a CRM works in the client environment and controls access to XML objects when it works as a server for other clients. For example, the client acts as a server when the XML document is disseminated to other users. SRM and CRM can coexist within a system. For real imple-mentations, both CRM and SRM should be used for better security. We analyse architectures according to reference monitors on server side only (SRM-only), on client side only (CRM-only) and on both server and client sides (SRM &amp; CRM). SRM-Only Architecture. A system with SRM-only facilitates works on server side only to control subjects access XML objects. In this case an XML object may or may not be stored in client-side. If the XML object is allowed to reside in client-side, it means the saved client copy of the XML object is no longer valid and doesn X  X  have to be controlled. It can be used and changed freely at client-side. For example, an XML on-line bank statement can be saved at a client X  X  local machine for his records and the server (bank) doesn X  X  care how the copy will be used by the client since the bank keeps original account information safe. However if the XML document or some parts of the document has to be protected and controlled centrally, the XML must remain at server-side storage and is not allowed to be stored in client-side. This is the main topics of traditional access control and trust management system.
 CRM-Only Architecture. No reference monitor exists on the server-side in a system with CRM-only environment. Rather, a reference monitor exists at the client system for controlling usage of disseminated XML documents. In this environment XML objects can be stored either centrally or locally. The usage of XML saved at the client-side on behalf of a server is still under the control of CRM. Distributed XML documents are associated with certain usage rules and users may need to prove their sufficient credentials to access the document. SRM and CRM Architecture. With both SRM to CRM, this architecture can provide a comprehensive access control. SRM may be used for distribution related control while CRM can be used for XML document dissemination. For instance, in SRM, XML objects can be pre-customized for distribution. The pre-customized XML objects can be further controlled and customized by CRM. As a result, server can restrict or eliminate unnecessary exposure of XML objects that do not have to be distributed. If a user requests certain XML documents that include some secret information, SRM can pre-customize the requested ob-jects before distribution such that the distributed version of the objects doesn X  X  include any secret information. If the document cannot be disseminated, the CRM at client side can do this work.
 XML documents and protecting XML documents from malicious dissemination. Related work has been done on secure and selective dissemination of XML doc-uments [2] and securing XML Web services [9].
 distribution of XML document among possible large user communities by using a range of key distribution methods. They demonstrated a formal model of ac-cess control policies for XML documents. Policies defined in the model take into account both user profiles, and document contents and structures. An approach based on cryptograph is designed to allow sending the same document to all users, and to enforce the stated access control policies. The approach consists of encrypting different portions of the same document according to different en-cryption keys, and selectively distributing these keys to the various users. This proposal is different from ours in two aspects. Firstly, it focuses on key distribu-tion methods to protect XML documents. Therefore, it only discussed the man-agement in server side and without any management about how to control the XML document when users get keys. By contrast, our work provides a rich vari-ety of options that can deal with XML documents in both server and user sides. Secondly, users can access XML documents with their keys at any time, even as their properties are updated. There is no ongoing authorization for users in Elisa and Elena X  X  approach. In our scheme, users have to satisfy pre-Authorizations, pre-Obligations and pre-Conditions as well as ongoing-Authorizations, ongoing-Obligations, and ongoing-Conditions.
 in 2002 [9]. Two experiments are discussed. One is to restrict access to an XML Web service to authorized users. Another one is to protect the integrity and confidentiality of XML messages exchanged in a Web service environment. The authors introduced SOAP highlights, how to use SOAP headers for credential transfer and access control. The main difference between our scheme and the work in [9] is that we focus on a systematic level for XML documents by using usage control model and provide a solution for different kinds of authorizations, whereas the work of [9] is a discussion of providing a secure infrastructure to XML Web services. This paper has discussed access models and architectures for XML documents by using usage control. We have analysed not only decision factors in usage con-trol such as authorizations, obligations and conditions, but also the continuity. Different kinds of models are built for XML documents. To protect XML doc-uments from malicious dissemination, we have analysed reference monitors on both server and client sides and obtained several secure architecture solutions. The work in this paper has significantly extended previous work in several as-pects, for example, the ongoing continuity for authorizations, obligations and conditions. These methods can be used to control XML documents in a dynamic environment since they provide a robust access control for XML documents and can protect sensitive messages from dissemination. It also begins a new applica-tion with usage control.
 chitectures proposed in this paper and application of the algorithms in real implementation.

