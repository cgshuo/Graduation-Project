 The goal of information retrieval systems (IRS) is to satisfy the information needs of a user. This need is expressed by a query to be matched to all the documents in the corpus to select those that cou ld answer to the user need. Because of the ambiguity, and the incompleteness o f his query, the user is, in most cases, not satisfied with the returned results. To overcome this problem, there can be alternatives to the initial query so as to improve the results. Among the most popular patterns in information retrieval (IR), we cite the relevance feedback (RF) which is based on the judgments of relevance of the documents found by the IRS and is intended to re-express the information need from the initial query in an effort to find more relevant documents. But with the standardization of the Web to XML schemas 2 presents new problems and hence new needs for customized information access. However, the traditional IRS do not exploit this structure of documents, including the RF function. Indeed, the user can express his need by a set of keywords, as in the traditional IRS, and can add structural constraints to better target the sought semantics. Thus, taking into account the structure of the documents and that of the query by the information retrieval systems handling structured documents is necessary in the feedback process. Many initiatives of relevance feedback have been proposed to rewrite the user query. The majority of these approaches are content-based, which means that only the query terms are updated, and relatively reweighted to improve the result. Only a few approaches modifies the query structure. In this paper, we propose an approach of structure-based relevance feedback. We assume that the query structure could be reformulated based on the structure of the document elements judged as relevant. This paper is organized as follows: in the second section, we give a survey on the relate d works to XML relevance feedback. We present in the third section our approach of query reformulation, based on the structure relevance feedback. In the four th section, we present the experiments and the obtained results. The fifth section concludes. Many initiatives of XML query reformu lation has been proposed. In the most cases, RF approaches has been adapted i n order to take into account the struc-tural dimension. Villatoro-Tello et al. describes in [12] a system developed by the Language and Reasoning Group of UAM for the Relevance Feedback track of INEX 2012. The system focuses on the problem of ranking documents in ac-cordance to their relevance. It is mainly based on different hypotheses such as that current IR machines are able to ret rieve relevant documents for most of general queries, but they cannot generate a pertinent ranking and focused rele-vance feedback could provide more and better elements for the ranking process than isolated query terms. The authors aim to demonstrate that using some query-related relevance feedback it is possible to improve the final ranking of the retrieved documents. Balog et al. propose a general probabilistic framework for entity search to evaluate and provide insight in the many ways of using these types of input for query modelling [1]. They focus on the use of category in-formation and demonstrates the effectiveness of category-based expansion using example entities. Schenkel and Theobald [11] describe two approaches which focus on the incorporation of structura l aspects in the feedback process. Their first approach re-ranks results returned by an initial keyword-based query us-ing structural features derived from re sults with known relevance. Their sec-ond approach involves expanding traditional keyword queries into content-and-structure queries. Official results, evaluated using the INEX 2005 [5] assessment method based on rank-freezing, show tha t reranking outperforms the query ex-pansion method on this data.

Among these approaches, only a few consider that RF in the query structure is necessary. It is common to rewrite th e query based on its structure, and the content of the relevant elements as in [3], [9] and [15] , but modification of the query structure itself is not addressed. In our approach, we consider that the structural RF is necessary, p articularly if the XML retrieval system takes into account the structural dimension in the matching process. Since we use an XML retrieval system that matches the structure in addition to the content [2], we assume that the structure reformulation could improve the retrieval performance. In our approach we focus essentially on the structure of the original query and that of document fragments deemed to be relevant to the user structure hints. Indeed, this study allows us to reinforce the importance of these structures in the reformulated query to better identify the most relevant fragments to the user X  X  needs. The analysis of structures allows us to identify the most relevant nodes and the involved relationships. The content of these fragments and those of the initial query are also taken into account. Their analysis allows us to select the most relevant terms that will be injected in new query. Our approach is based on two major phases. The first aims at representing the query and the judged relevant fragments in a single representative structure. The second is focused on query rewriting. 3.1 Query and Relevant Fragments Representation According to most approaches of relevan ce feedback, the query construction is done by building a representative pattern for relevant objects and another pattern for irrelevant ones, and then build a representation close to the first and far from the second.

For example, the Rocchio X  X  method [4] co nsiders a represen tative pattern of a document set by their centrod. A linear combination of the original query and the centrods of the relevant documents and irrelevant ones can be assumed as a potentially suitable user need.

Although simplistic, the Rocchio X  X  method is the most widespread. This sim-plicity is due to the nature of the manipulated objects. Indeed, Rocchio X  X  method is adapted to the case where documents are full text, in such case, each docu-ment is expressed by a vector (generally a vector of weighted terms). Where the documents embody structural relations, t he vector representation becomes sim-plistic, this results in a significant loss of structural contrast and therefore the reconstruction of a unified structure becomes impossible. As for us, we believe that the structure is an additional dimension.

A unique dimension is not enough to encode the structural information (one dimension vector), thus we need to encode all documents into two dimensions, by using matrices ra ther than vectors.

That reasoning has led us to traduce the documents and the query in a ma-trix format instead of a weighted term v ector. Those matri ces are enriched by values calculated from transitive relationship function. Then, the representative structure of query and judged re levant fragments (that we call S ) is constructed under a matrix form.
 Line of Descent Matrix. We build for each document a matrix called line of descent matrix (LDM), which must show all existing ties of relation between different nodes. This representation should also reflect the positions of the various nodes in the fragments as they are also important in the structural relevance feedback. For an XML tree (or sub-tree) A , we associate the matrix defined by M
Where P is a constant value which represents the weight of the descent rela-tionship, n and n are two nodes of the tree A.

As for us, we represent each of the relevant fragments and the initial query in the LDM form 3 . The value of the constant P for the query LDM construction is greater than that used for the construct ion of other LDMs (which represent the relevant fragments) to strengthen the weight of the initial query edges following the principle used in the Rocchio X  X  method which uses reformulation parameters having different effects (1 for the initial query,  X  for the relevant documents centrod and  X  for the non relevant documents centrod where 0  X   X   X  1and  X  1  X   X   X  0).
 Content Integration in LDM. The content of each element represented in LDM must be taken into account. In RF in XML retrieval we aim to rewrite query X  X  structure and the set of terms of this query. So, we propose to integrate terms of each element in LDM.

Each element node n in LDM is characterized by a tag name and a set of term t k in element n i based on the its frequency in n i and the total number of elements that contain it [2], m :numberofelements.

Let us consider that the element node A appears in three positions in a XML tree as follows:
A [1] and A [2] have relatively the same content which is different from A [3]. In the LDM matrix, A will appear twice, with two different contents ( t 1 ,t 2 ,t 3 ,t 4 ) and ( t 4 ,t 5 ,t 6 ). The content similarity is done by the inner product like in vector model[8],weassurethat A [1] and A [2] are similar since they have the same tag name ( A )and A [1]  X  A [2] = 0 . 926  X  Th which is not the case for A [1]  X  A [3] = 0 . 051 &lt;Th or A [2]  X  A [3] = 0 . 0( Th is an experimental threshold. In this example, we take Th =0 . 5). A [1] and A [2] will be aggregated and represented in LDM as follow by a single A and the centrod of A [1] and A [2] as follows: A =( A, { ( t 1 , 0 . 5) , ( t 2 , 0 . 75) , ( t 3 , 0 . 3) , ( t 4 , 0 . 2) } ) Setting Relationships between a Node and Its Descendants. XML re-trieval is usually done in a vague way [14]. The XML retrieval system has to query with tolerated differences (a few mi ssing elements or more additional ones) between the query structure and the document. Consequently, we believe that the most effective way to bring this tolerance is to assure that one element is not only connected to its childs nodes, but to all its descendants. A relationship between nodes in the same line of descent is weighted by their distance in the XML tree. So, we use the Transitive Relationship function TR which is defined as follows:  X  ( n,n ,n )  X  N 3 ,M where N is the set of all different nodes in the tree A and M A is its LDM, and TR ( x,y )= x  X  y  X  Matrix S Construction. The new query structure is built starting from the obtained LDMs. Let us consider F = { F 1 ,F 2 ...F n } with F i are the relevant judged fragments and Q old the initial query, the query structure is built starting from the cumulated LDM S : and for each n : w ( t,n,S )=  X w ( t,n,Q old )+  X  | F | f  X  F w ( t,n,f )
The constants  X  and  X  are the same used in line of des cent matrix con struction to strengthen the weight of old query X  X  terms. If a column in S contains several low values, then the node will tend to appear as a leaf node in the reformulated query. If on the contrary one row contains several low values, then the node will tend to be seen as a root node in the reformulated query if, in addition, the corresponding column contains several high values, otherwise, the node will tend to appear as an internal node. Thus, in order to build the new query structure, we can determine the new root. 3.2 Query Rewriting Root Identification. The structure query construction starts by identifying its root. The root is characterized by a high number of child nodes and a weak number of parents. For example, to find the root we simply return the element R , which has the greatest weight in the rows of the matrix S and the lowest weight in its columns. The root R is then such that:
The argument to maximize reflects that the candidate nodes to represent the root should have as maximal low values as possible in the relative row ( relatively to the total sum of the matrix values ( spired from the tf  X  idf factor ( term frequency, inverse of document frequency ) commonly used in traditional information retrieval [7] which affects importance to a term t for a document proportionally to its frequency in the document d (term frequency) and inversely proportionally to the number of documents in the collection where it appears at least once.
 Building the New Query Structure. Once the root has been established from the matrix S , we proceed to the recursive development phase of the tree representing the structure of the new query. The development of the tree starts by the root R , and then by determining all the child nodes of R , the same operation is performed recursively for the child nodes of R until reaching the leaf nodes. Each element n is developed by attributing to it its potentially child nodes n ( n = n )whose S [ n,n ] &gt; Threshold n , calculated from the mean average  X  n and the standard deviation  X  n of its relative child nodes. Indeed, the mean average and the standard deviation will illustrate the probability that a node is an actual child-node of the current node n . This threshold is defined as: Threshold n =  X  n +  X 
If the value of  X  is relatively high, the tree outcome will tend to be shallow and ramified and vice versa. The value of  X  allows the estimation for each element of the number of child nodes. The objective of this interval is to reconstruct a tree as wide and deep as the XML fragments from which the query should be inferred. This value is then defined experimentally. To carry out our experiments we use INEX X 05 dataset and we only considered the VVCAS [5] (topics whose relevance vaguely depends on the structural con-straints) queries type. Indeed the need fo r reformulation of the query structure is appropriate to the task. We use also the metrics proposed by INEX which are based on on the extended cumulated gain ( XCG ) [6].For a given rank i , the value of nxCG [ i ] reflects the relative gain the user accumulated up to that rank. We only present the results of the generalized quantization function which is most suitable for VVCAS queries (10 queries proposed by INEX).

The table 1 shows the results obtained from XIVIR a research system based on tree matching [2]. This table presents a comparison between the values obtained before (BRF) and after RF (ARF). AA is the absolute improvement of the relevance feedback run over the original base run proposed by INEX.

In our experiments we assume that the top k fragments are relevant, the table 2 shows the results obtained from different numbers of relevent fragments.
We can see through our experiments that our RF approach significantly im-proves the results. We note that during these experiments we reformulate only the queries structures without changing their original content, and therefore we believe that this reformulation has brou ght an evolution that could be accentu-ated by the reformulation of the content. We have proposed in this paper an approach to structural relevance feedback in XML retrieval. We proposed a representa tion of the original query and relevant fragments under a matrix form. After some processing and calculations on the obtained matrix and after some analysis we have been able to identify the most relevant nodes and their relationships that connect them.

The obtained results show that structural relevance feedback contributes to the improvement of XML retrieval. The strategy of the reformulation is based on a matrix representation of the XML trees deemed to be relevant to the fragments and the original query. This representation preserves the original links of descent and the transformations achieved are suitable for the retrieval flexibility.
