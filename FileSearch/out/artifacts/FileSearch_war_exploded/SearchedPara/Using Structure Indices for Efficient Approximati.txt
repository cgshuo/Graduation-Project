
University of Massachusetts Amherst Statistics on networks have become vital to the study of relational data drawn from areas such as bib liometrics, fraud detection, bio-informatics, and the Internet. Calculating many of the most impor-tant measures X  X uch as betweenness centrality, closeness central-ity, and graph diameter X  X equires identifying short paths in these networks. However, finding these short paths can be intractable for even moderate-size networks. We introduce the concept of a network structure index (NSI), a composition of (1) a set of anno-tations on every node in the network and (2) a function that uses the annotations to estim ate graph distance between pairs of nodes. We present several varieties of NSIs, examine their time and space complexity, and analyze their performance on synthetic and real data sets. We show that cr eating an NSI for a given network enables extremely efficient and accurate estimation of a wide variety of network statistics on that network. H.2.8 [Database Appl ications]: Data mining H.3.1 [Content Analysis and Indexing]: Indexing methods Algorithms, Measurement Network structure index, soci al network analysis, knowledge discovery in graphs, centrality  X  X ix Degrees of Kevin Bacon X  is a popular trivia game that chal-lenges players to find a path of co -star relationships that connect a given actor with Kevin Bacon, a popular American performer who has appeared in over 50 movies [27]. Given the actor Raul Julia, for example, players might produce the path Raul Julia  X  Christina Ricci ( X  X he Addams Family X )  X  Winona Rider ( X  X ermaids X )  X  Christian Slater ( X  X eathers X )  X  Kevin Bacon ( X  X urder in the First X ). The game is an application of a classic problem in com-puter science: finding short pa ths between nodes in a graph. Finding short paths is not just an amusing diversion. Over the past several decades, social scientists and mathematicians have devised several useful measures that can be calculated on the nodes of a network, each of which is derived from the nodes X  participation in short paths. Two of the best-k nown measures are betweenness centrality X  X he proportion of all shortest paths in the network that run through a given node X  X nd closeness centrality X  X he average distance from the given node to every other node in the network [9]. For example, centrality measures can help evaluate whether Mr. Bacon lies near the center of the Hollywood universe or whether he is near the periphery. Several researchers have used such measures to construct st atistical models of networks [10][17]. Recent work in knowledge discovery has begun to study very large networks, often comprising millions of nodes. Given net-works of this size, even the most efficient algorithms for calculat-ing network statistics can become intractable. For example, the most efficient known algorithms for calculating betweenness cen-are the number of nodes and edges in the graph [3]. Ad hoc calcu-lations that use basic path finding can have even higher complex-ity, as they require bidirectional breadth-first search. Figure 1: The average number of nodes explored by bidirec-tional breadth-first search increases dramatically as path length increases. The inset graph shows the distribution of shortest path length. Both graphs are based on the Rexa cita-tion graph (see Appendix A for details). For instance, consider the Rexa citation graph of papers in com-puter science and related fields (see Appendix A for details). The largest connected component c ontains 165,000 nodes (papers) connected by 321,000 edges (cita tions). Figure 1 depicts the dis-tribution of shortest (optimal) pa th lengths between pairs of nodes (inset), along with the averag e number of nodes explored by a bidirectional breadth-first search that discovers these paths. On average, identifying a path of median length with breadth-first search requires the exploration of hundreds of nodes, while find-ing a path of length 15 requires the exploration of 65,000 nodes. Calculations that require finding many of these paths become cumbersome, if not impossible. Below, we introduce the concept of a network structure index (NSI), a tool that enables effici ent path finding in large relational datasets. We present several varieties of NSIs, examine their time and space complexity, and analyze their performance on synthetic and real data. Finally, we show that creating an NSI for a network enables extremely efficient and accurate estimation of a wide variety of graph statis tics on that network. A network structure index is similar to the type of index com-monly used to speed queries in m odern database systems. An NSI can be constructed once for a given graph and then used to speed the calculation of dozens or hundr eds of subsequent measures on the graph. The intuition behind NSIs is provided by previous work that has shown that path finding can be surprisingly efficient in a network that exhibits homophily, the tendency of neighboring nodes to have similar attribute va lues [1]. Unfortunately, many networks do not  X  X aturally X  have attributes that exhibit homo-phily. However, we can syntheti cally generate and annotate any arbitrary graph with such an attribute and use it for pathfinding in the same way that destination an d mileage signs improve naviga-tion in a 2D Euclidean space of roadways. An NSI consists of two component s. The first is a set of node annotations that provides informa tion about relative or absolute location. Formally, for a graph G consisting of vertices V and edges E , the annotations define a function A : V  X  S , where S is an arbitrarily complex  X  X nnotation space. X  The second element of the structure index is a distance measure D : S  X  S  X   X  that maps pairs of node annotations to a positive real number. We do not require our distance measure D to be unbiased (or even a metric). As a result, we forfeit any optimality guarantees associ-ated with admissible search, and the paths we find are not neces-sarily optimal. However, in practi ce, search using our best NSIs returns paths that are both short and sufficient for a wide variety of applications. Our annotation space S can be quite simple (e.g., a single value for each node) or complex (e.g., multidimensional vectors of values). As with databa se indices, the key is to balance the complexity of the annotation process with its utility. In the following sections, we present se veral examples of NSIs. For each, we consider the time and space required to build and store the annotations, the time complexity of using the index, and the performance characteristics of the index. An NSI can be used directly to approximate graph distance (hop count), or it can be combined with a search algorithm to discover short paths between any two nodes in a graph. We explore both approaches in this paper. In ou r experiments that use the latter method, we use best-first search , queuing nodes according to their annotation distance D from the target in a manner similar to Goldberg [11]. In the case where multiple nodes have the same D value, we select the node with the largest degree. When using an NSI for pathfinding, we use the fi rst path discovered between the origin and destination nodes, rather than continuing to explore alternative routes. Among the most basic NSIs is the ALL PAIRS SHORTEST PATH (
APSP ) index, consisting of an n  X  n matrix ( n = | V |) containing the optimal path distances between all pairs of nodes. The accompa-nying distance function is a simple lookup into this table. While this strategy yields optimal resu lts when searching for paths, in many cases it may be infeasible in terms of annotation complex-ity X  X he Floyd-Warshall algorithm runs in O( n 3 ) [8], while more complex approaches using fast matrix multiplication can reduce the exponent to 2.376 [5]. Furthermore, APSP requires O( n store the distances themselves. Although APSP may seem trivial, the use of structure indices is a general approach, not specific to a single implementation or annotation scheme. Any NSI trades off complexity and performance, and APSP represents an extreme on both scales. The DEGREE NSI represents the opposite ends of the complexity and performance spectra from APSP . In this scheme, we simply annotate each node with its undi rected degree within the graph. To calculate the annotation distance between a source nodes s and target t , we define the following function: Thus when navigating the graph with a best-first search we will always judge the unexplored node with the highest degree to be closest to the target node [1]. While simple to construct and store (O( n ) for both time and space complexity), the not perform well in practice, as we show in Section 3. Previous work in network path finding has utilized a system of network landmarks to efficiently navigate graph structure [4][11][18]. With this technique , we randomly de signate a small number of nodes in the network to serve as navigational beacons. Then, we annotate nodes in the graph by flooding out from each landmark and recording the graph distance to each node in the network. The resulting annotation for each node is a vector of graph distances, with each landmark defining an independent annotation  X  X imension. X  An illustration of this type of annotation is shown in Figure 2. The distance measure D is defined as fol-lows: Where L is the set of landmark nodes, and d() is the exact short-est-path distance between nodes. Un fortunately, this strategy per-forms rather poorly in practice. Many of today X  X   X  X mall-world X  data sets are characterized by small diameters due to the existence of  X  X hort cut X  links in the graph [13][26]. As a result, a found path that passes through a landmark often forms two sides of a triangle, resulting in artificially long paths. Global Network Positioning ( GNP ) is a related strategy developed by Ng and Zhang [18]. This annotation techni que utilizes a nonlinear optimization algorithm to create a multidimensional coordinate system that encodes the location of each node within the network. The associated distance measure is simply the Man-hattan distance (L1 nor m) between node pairs: Where d is the number of dimensions (| L |-1) in the computed the computational cost of GNP appears to be prohibitive for large networks (a separate optimization over d parameters must be per-formed for each node, in addition to an optimization over d rameters for each landmark), we include it here to enable com-parison with current work in the networking literature. Figure 2: A LANDMARK NSI annotates nodes with distances to landmark nodes (here, node B). Each additional landmark provides a separate  X  X imen sion X  of annotations. The ZONE NSI utilizes multiple dimensions, where each dimen-sion divides the graph into regions that are connected, mutually exclusive, and collectively exhaustive (see Figure 3 for an exam-ple). Each dimension is analogous to the way that a state in the U.S. is divided into counties or voting precincts. As the number of dimensions grows, each node becomes distinguishable from other nodes based on its z one memberships. Figure 3: A ZONE NSI divides the set of nodes into disjoint regions (annotated here with a 1, 2, or 3). Z ONE NSIs typically use multiple, independently derived zone designations; this example depicts only one dimension. We explored several methods fo r creating each dimension of a ZONE NSI. Two key criteria for selecting a method are (1) its abil-ity to generate dimensions independently, and (2) its ability to create zones of roughly equal size . To a first approximation, inde-pendent dimensions are more usef ul for indexing than correlated dimensions, and equal-si ze zones in a dimension contain the most information. However, generating dimensions that meet both cri-teria can be challenging in grap hs with a highly variant degree distribution. The most effective method we di scovered for creating dimensions is a competitive flooding algorithm that is both incremental and randomized. The algorithm works as follows: 1. Randomly select k seed nodes , assign them zone labels 1 2. Place all other nodes in the unlabeled set U . 3. While U is not empty This entire process is repeated d times, providing us with d sets of zones. Thus each node is annotated with a d -dimensional vector of zone labels. The annot ation distance between two zone vectors is defined as the number of pair-wise matches. A key characteristic of this algorithm is that it labels only a single unlabeled neighbor of each labele d node at each st ep. Labeling all neighbors creates zones of unequal size resulting in dimensions that tend to be highly correlate d. Labeling only a single neighbor creates zones of nearly equal size and reduces correlation among dimensions. The time complexity of the annotation process is O( ed ), where e is the number of edges | E | in the graph and d is the number of inde-pendent graph labelings or dimensions in a nnotation space. Stor-ing the zone for each node and dimension takes O( nd ) space. The savings over the APSP example above are significant in both re-gards. The DISTANCE TO ZONE ( DTZ ) annotation scheme is a hybrid ap-proach that combines the LANDMARK and ZONE strategies. The annotation procedure (1) divides the graph into zones using the flooding algorithm described above; and (2) for each node u and zone Z , calculates dtz( u , Z ): the distance from u to the closest (in terms of hop count) node in Z . Figure 4: A DTZ NSI uses both zones and distance to zones as annotations. Here we see an example for a single dimension with three zones. In Figure 4, node A has zone distance s of 1, 0, and 2 for the white, light gray, and dark gray zones respectively, while node D has corresponding distances of 1, 1, and 0. As with the we repeat the entire process d times to produce several dimensions of annotation space, and sum over all dimensions to calculate annotation distance. networks of 10,000 nodes. In a ll cases, lower values are better. The annotation distance between nodes s and t is defined as: differ, as the random flooding process does not produce symmet-ric distances between nodes and zones. For the one-dimensional case in Figure 4, the total distance-to-zone value for the pair (E, F) is dtz(E, dark gray ) + dtz(F, light gray ) = 1 + 2 = 3. The resulting set of node annotations takes up O( nkd ) space. Cal-culating the distance of each node from a single zone requires an O( e ) flood, resulting in a total time complexity of O( ekd ). Note can exceed the O( n 2 ) space and O( n 3 ) time needed for the index. In practice, however, we can find near-optimal paths in very large graphs with relatively small numbers of zones and di-mensions. We measure the optimality of the lengths of the paths found by a particular NSI by the path ratio P : Where p f and p o are the lengths of the found and optimal paths for r randomly selected pairs of nodes in the graph. An NSI that finds optimal paths (such as APSP ) will have P = 1.0, while a poorly weights the contribution of long paths more than short ones, but short-to-medium-length paths are much more frequent in all the graphs we evaluate. If traversal time is proportional to path length, and paths between all pairs of nodes are equally likely to be re-quested, then P is an unbiased estimator of overall performance. The most important benefit of usi ng an NSI for path finding is the decrease in search complexity for applications that rely on finding paths. Unless we can dramatically improve search performance, it is difficult to justify the computational and storage costs of build-ing the index. To measure this performance gain, we define the exploration ratio E : Where e f is the number of nodes explored by best-first search explored using a bidirectional breadth-first search for r pairs of nodes. Here, values close to zero reflect parsimonious search per-formance, and values greater than 1.0 indicate pathologically poor search performance. We evaluate the NSIs from Sect ion 2 on synthetic graphs of 10,000 nodes generated using three m odels: random networks as defined by Erd  X  s and R X nyi [6], rewired lattices defined by Watts and Strogatz [26], and the Forest Fire graph model recently intro-duced by Leskovec et al. [16]. (See Appendix A for more detail on the network generation procedures.) In Figure 5, we compare the performance of DEGREE , LANDMARK , GNP , ZONE , and implemented with increasing numbe rs of dimensions. Since the APSP index will always behave optimally, we omit the results from the figures. Several features of the plots ar e immediately apparent. Because degree-based annotations only cons ist of a single static value, adding additional dimensions is redundant and performance does not change across dimensions in the plots shown here. D also performs poorly on lattice networks, where degree provides no useful navigation information. Some methods ( DEGREE , LANDMARK , GNP ) have unacceptably high exploration ratios X  X xploring many times more nodes than simple breadth-first search X  X ven when they exhibit acceptable path ratio performance. This effect is due to the use of best-first search where the search algorithm expands nodes ordered by annotation distance rather than by the path distance from the source node. Interestingly, the performance of the GNP scheme degrades as the number of dimensions increases be yond a certain threshold. We conjecture that this is due to the fact that the optimization algo-rithm (in this case, the Nelder-Mead simplex downhill method) used to derive the coordinate system is unable to converge on a satisfactory solution given a large number (O( d 2 )) of parameters. The DTZ index performs consistently be st across all network types. This is not surprising, given that DTZ combines all the local infor-mation available to ZONE , as well as global gr adient information akin to LANDMARK . With 10 dimensions and 50 zones, this amounts to 500 landmarks with which to navigate. It has been noted in the literature that the performance of MARK and GNP can be improved through intelligent selection of landmark nodes [11][18], and we suspect that the same may be true regarding the placement of seed nodes for ZONE and exploration of different strategies is reserved for future study. Table 1: Time and space complexity of different network structure indices, where n denotes the number of nodes, e edges, d dimensions, k zones, and M( x ) is the cost of running the Nelder-Mead simplex downhill method with x parameters. However, the ZONE and DTZ annotation schemes have two pa-rameters: the number of zones to use k , and the number of dimen-sions d. As with landmark placement, de tailed analysis of a prin-cipled approach to choosing these parameters is beyond the scope of this paper. Increasing each ne ver hurts in terms of performance; however, more zones and higher di mensions take longer to build and more space to store. The space and time complexity of each annotation scheme is summarized in Table 1. Recall that the scheme requires only O( nd ) space, compared to O( nkd ) for Given the additional information being stored by DTZ for it to outperform a ZONE index with an equivalent dimensional-ity and number of regions. Figure 6: Path ratios for ZONE and DTZ on random and Forest Fire networks for equivalently size d sets of annotations. In the ZONE plots, number of dimensions is labeled on a geometric scale (as a multiple of the number of zones) in order to make a fair comparison with DTZ . Figure 7: Path and exploration ratios for DTZ used on the Rexa and IMDb data sets. In order to directly compare the two NSIs, we can increase the number of dimensions of ZONE so that its total space requirements equal that of DTZ . The results are shown in Figure 6. Z DTZ offer roughly equivalent performance once their annotations are allowed to fill equal amounts of memory. Further, the results seem to vary slightly across graph types, with ZONE performing a bit better on random graphs and a b it worse on Forest Fire graphs. As mentioned previously, the key to using an NSI effectively is to determine the size and type of the index to build, balancing com-plexity and performance. Figure 7 depicts the performance characteristics of the on two real datasets: the Rexa citation graph and the IMDb actor graph (165k nodes / 321k edges and 10k nodes / 628k edges, re-spectively; see Appendix A). The results demonstrate the robust-sparsely connected graph, with each node having an average de-gree of 1.95. The IMDb data set is roughly twenty times smaller in terms of nodes, but has an average degree of 62.8. Considered together, these two data sets re present a wide range of network structures. In both cases, the DTZ NSI approaches optimal path lengths with very few annotati on dimensions. Furthermore, the best-first searches performed with the indices are two orders of magnitude more efficient than simple breadth-first search. As we show in section 4, this allows us to efficiently calculate a number of statistics on real networks. While having the ability to effici ently find a path to Kevin Bacon in an actor graph is certainly useful in its own right, the real utility of an NSI becomes apparent when it is integrated into an algo-rithm that requires efficient disc overy of short paths between sev-eral pairs of nodes in the graph. Depending on the distance meas ure being employed, we can sometimes use an NSI to directly estimate the graph distance be-tween any two nodes. Whether this is feasible depends on the ability of our annotation distance measure to provide global rather than local information. Figure 8 shows scatterplots of calculated annotation distance versus actual graph distance for the DTZ annotation schemes. In the case of ZONE , even at short path lengths, the annotation distances are highly variable. Though in practice these values are often good enough to provide effective local information for search na vigation, they are not good estima-tors of actual graph distance. The plot for DTZ , however, exhibits a clear linear relationship between annotation distance and graph distance. As a result, we can accurately gauge the relative distance between different pairs of nodes using the annotation distance. If necessary, we can use DTZ annotation distance to estimate ac-tual graph distances with the foll owing procedure: (1) annotate the graph as described for DTZ in Section 2.4, (2) randomly sample p pairs of nodes in the graph and perform breadth-first search to obtain their exact graph distance, and (3) use linear regression to obtain an equation for estimated distance: Depending on the structure of the gr aph, step 2 may be intractable for some pairs of nodes. However, since we are identifying a strictly linear relationship, we can terminate our breadth-first search after examining paths of le ngths greater than four or five and still produce reliable regression results. Simple distances can be used to produce a wide variety of attrib-mining algorithms that analyze graphs [10][17]. For instance, a simple distance function can be used to label nodes with their distance to a particular node in a graph (e.g., how close is each actor to Kevin Bacon?). Additiona lly, a distance function can be used to label nodes with the minimum or maximum distance to an Academy Award winner?). While such calculations can be made with any method for finding short paths, including breadth-first search, only an efficient distance function, such as the one provided by an NSI, makes such calculations feasible for large graphs. Figure 8: Scatterplots of the re lationship betw een annotation distance and actual graph distance for ZONE (top) and (bottom) on the Rexa citation network. Centrality measures such as betweenness centrality and closeness centrality [9] are crucial to the study of social network dynamics. Unfortunately, even their approx imate calculation involves find-ing the shortest path between many pairs of nodes. As a result, accurate estimates of these measures are often intractable to calcu-late efficiently for large data se ts. However, by using an NSI for path finding, we can estimate these measures efficiently. For the purposes of the following discussion, we utilize a only, as it consistently outperformed the other NSIs in our syn-thetic experiments. Closeness centrality, or C , measures the proximity of a given node in a network to every other node. To estimate C , we can calculate the average of the graph distance to a sample of nodes in our data se t. Rather than using (possibly intractable) breadth-first search, we use NSI-based navigation to determine the distance between these sampled pairs. Since the path lengths found with the structure index are always greater than or equal to the optimal shortest path lengths, our estimate of C will be consistently upwardly bias ed. However, in most applica-tions, the actual value of C for a particular node is meaningless in and of itself; rather, it is the value of C relative to the correspond-ing values for other nodes in the network that is of importance. Figure 9: Closeness approximation ranking comparisons for estimations made with 5000 samp led pairs on a synthetic For-est Fire graph of 10000 nodes. Figure 9 depicts a scatterplot of actual versus approximated close-ness rankings obtained with a DTZ NSI (note that even the  X  X xact X  C values used here are actually estimates, as they are obtained through sampling). As can be seen from the figure, using path lengths discovered through NSI na vigation provides highly accu-rate estimates. Traditionally, the quality of a rank ordering is evaluated using a permutation test on Spearman X  X   X  statistic or Kendall X  X   X  . However, since our sample size is relatively large (in this example, ten thousand nodes ), any reasonably correct order-ing is going to appear significant when compared to the random rankings of a permutation test X  our values of 0.9995 and 0.9818 for these statistics have associated p-values of less than one in a million. A slightly more informative measure is the precision of the top-n nodes in the ranking; our ranking produces precision values of 0.9600 and 0.9760 for the top 100 and 1000 nodes. To evaluate the utility of the distance estimates obtained using the approximated distance from Section 4.1, we repeat the experi-ments for estimating closeness cen trality, using path lengths cal-culated from the linear equation rather than ones found through searching. The results produced for this  X  X earchless X  closeness estimation can be seen in the scatterplot in Figure 10. The associ-0.9860, 0.9052, 0.6900, and 0.8270, respectively. While the re-sults are not as accurate, the distance function can be calculated in constant time, which in practice allows for many more pairs to be sampled when making estimates. Table 2. IMDb actors ranked by approximated closeness cen-trality. The list in Table 2 shows actors drawn from the data and ranked by closeness centrality. As outli ned in Appendix A, the data are drawn from movies made between 1970 and 1999 listed in the Internet Movie Database. Kevin Bacon does not top the list, though he still ranks 554 th out of over ten thousand actors. The most highly ranked actor by our estimate of closeness centrality is Martin Sheen, a popular actor with over three decades of experi-ence. During the period covered by our data, Sheen appeared in over 150 films and television shows in a remarkably wide variety of genres, including drama ( Badlands , Apocalypse Now , The West Wing ), comedy ( The Simpsons ), science fiction ( Babylon 5) , thriller ( Voyage of Terror ), and horror ( Tales from the Crypt ). The other top-ranked actors have si milar long careers with diverse roles that have paired them with a wide variety of actors. Figure 10:  X  X earchless X  closeness estimate ranking compari-son for approximations derived from 5000 sampled pairs on a synthetic Forest Fire graph with 10000 nodes. As with simple distance, a measure of centrality can be used to produce attributes on nodes that ma y be useful to knowledge dis-covery algorithms. In particular, measures of closeness centrality can be used to determine the closeness of every node to a collec-tion of key nodes (e.g., closen ess to all winners of Academy Awards for best actor in the past 10 years). Closeness can also be calculated for more restricted communities. For example, cluster-ing can be used to reveal communities within the graph, which in turn can be used to constrain closeness calculations for their members. This can produce attributes that measure a form of lo-calized closeness centrality (e.g., closeness rank of an actor within his or her  X  X ome X  movie industry). Finally, there is no reason to adhere strictly to the conventio nal definition of closeness. For example, we can weight closeness based on the attributes of the outlying nodes (e.g., closeness to winners of Academy Awards weighted by recency of award). As with simple distance, these attributes have always been available, but an NSI makes them tractable for large graphs. Betweenness centrality, or B , is a second measure of network  X  X mportance. X  The betweenness of a node measures the number of short paths on which a given node lies [9]: Where g( i,j ) is the number of shortest geodesic paths connecting through node a . Since its calculation requires k nowledge of actual paths rather than simple path lengths, in practi ce it is often intractable to calcu-late exactly X  X he best know n algorithm runs in O( en + n 2 [3]. However, we can estimate betweenness using the paths identi-fied through NSI-based navigation. Similar to our procedure for estimating closeness, we rando mly sample pairs of nodes and discover the shortest path betwee n them. We then count the num-ber of times each node in the graph appears on one of these paths to obtain a betweenness ranking. Figure 11: Betweenness ranks calculated with 50000 sampled pairs of nodes on a syntheti c Forest Fire network of 10000 nodes. The results are depicted in Figure 11. Here we compare rankings of nodes using our betweenness estimate (obtained with a NSI) with the exact measure (not using samples as with the close-ness example above). Because the sampling procedure fails to include all the short paths in its calculation of betweenness, many nodes have identical betweenness scores, forming the horizontal lines in the scatterplot. Even so, the plot exhibits a clear relation-ship between the actual and appr oximated values of betweenness. As with our closeness estimation, the associated values of Spear-man X  X   X  and Kendall X  X   X  (0.9424 and 0.8596, respectively) have p-nodes is 0.6900 and 0.7260, which is quite accurate given that less than 1/10 th of one percent of paths were considered in the calcula-tion. In the actor graph, a high betwee nness score can indicate an ac-tor X  X  role as a  X  X ridge X  between two communities. In Table 3 we have the top 20 actors as ranked by betweenness centrality. Ron star who has recently crossed over into mainstream cinema. Simi-larly, G X rard Depardieu and Stel lan Skarsg X rd link foreign film communities (French and Swedish, respectively) to Hollywood. Table 3. Top twenty IMDb actors as ranked by estimated be-tweenness centrality. As with simple distance and closeness centrality, betweenness centrality can also be used to create features on nodes that are useful for data mining. For exam ple, we could calculate between-between winners of Academy Awards for best picture and the IMDb X  X   X  X ottom 100, X  the worst 100 movies as voted by users of the Internet Movie Database). The random graph flooding algorithm described in Section 2.4 is similar to randomized partitioni ng algorithms found in the graph theory literature such as the algorithm described by Bartal [2]. However, such schemes are often inapplicable to a domain in which exact node distances (and therefore graph diameters) are difficult to compute efficiently. Kleinberg [12][13] explores the notion of similarity-based naviga-tion in small-world networks. He demonstrates how the presence of network homophily can provide a gradient that guides search using local information. Watts investigated a similar approach by constructing a hierarchical mode l from which to derive homophily [25]. In this paper, we present methods for creating such homo-phily in domains that may lack local information. We detail a number of ways in which this information can be obtained for both synthetic and real datasets. As described above, the LANDMARK NSI designates select nodes as landmarks to provide directi onal information for navigation. This approach has been studied by Chow [4] as well as Goldberg and Harrelson [11] in conjunction with A* search, since an admis-sible heuristic can be derived fr om distances to landmarks. While this strategy can guarantee opti mal paths by employing A*, a large number of nodes must be expl ored to discover these paths. This is not ideal if fast discovery of short paths is needed, as in the case of approximating network st atistics. We show that the LANDMARK approach is not effective when combined with a non-optimal best-first search strategy. The landmark and GNP approaches have been adopted by the networks/Internet community as a basis for determining network latency between hosts on the Intern et, and several Internet coordi-nate approaches attempt to mi nimize network latency through extensions of GNP [20][21][24]. Goldberg and Harrelson describe several methods for effectively positioning landmarks within net-works [11], as do Ng and Zhang [18]. Kleinberg et al. provide a theoretical analysis and framework of all beacon-based strategies, such as GNP and others [14]. Other strategies in the Internet domain have attempted to create network overlay structures, such as a rings-based approach that does not rely on selection of la ndmark nodes [28]. This concept has recently been explored theoretically as a technique for dis-tance estimation and nearest neighbor searches by Slivkins [22] and Krauthgamer and Lee [15]. Ho wever, it is unclear how accu-rately any of these strategies perform on domains other than the Internet or for the purposes of approximating network statistics. Additionally, our current work focuses on undirected, unweighted graphs with the goal of minimiz ing hop count, not network la-tency. We have identified several meth ods for creating a network struc-ture index. Two of these methods, ZONE and DTZ and accurate estimation of path lengths between arbitrary nodes in a network. Using these indices, we can estimate path length be-tween a pair of nodes in constant time, and we can estimate the closeness centrality of a given node in time that is linear in the number of outlying nodes. In addition, we have shown empirically that we can estimate the betwee nness centrality of a given node by accessing less than 5% of the nodes explored by breadth-first search. Such efficient calculations of network statistics open up a new range of potential approaches to knowledge discovery. First, iden-tification of short paths and centr al nodes are important types of knowledge discovery for networks. Closeness centrality can direct attention to the core of a netw ork, and betweenness centrality can help identify key connectors of otherwise separate communities. Second, estimates of th ese measures can suppor t the application of other methods (e.g., joint statisti cal models such as probabilistic relational models [10] or relatio nal dependency networks [17]). Centrality and other path-based measures summarize local struc-ture in ways that can be easily considered by learning algorithms for these models. Third, path le ngth and centrality measures can be adapted to produce a wide variety of more local features, such as distance to particular nodes, cl oseness to particular classes of nodes, and betweenness for two or more subsets of nodes. Despite our success at creating reasonably efficient and accurate NSIs, we have not exhausted the space of potential solutions in this general class of indices. As we outlined in Section 5, a num-ber of promising results in computer networking and theory point toward additional techniques for constructing NSI annotations, and we are actively investigating these alternatives. In addition, we are considering how to effi ciently update NSIs when nodes and links are added to the network so that dynamic graphs can be successfully indexed. Finally, we are investigating how to apply our own recent developments in network searching [23] to more effectively use NSI annotati ons to find short paths. We are actively exploring additi onal applications of network structure indices. Two of the most promising directions are find-ing connection subgraphs and approximating neighborhood func-tions. Faloutsos and coauthors have pioneered work in this area by identifying efficient methods for finding connection subgraphs X  sets of short paths between node s X  X nd for approximating the size of the neighborhood of a node [7][19]. NSIs may provide an alter-native way of representing much of the information needed for both of these tasks. This research is supported by Lawrence Livermore National Laboratory and the Department of Energy under contract number W7405-ENG-48. The U.S. Government is authorized to reproduce and distribute reprints for govern mental purposes notwithstanding any copyright notation hereon. The views and conclusions con-tained herein are those of the authors and should not be inter-preted as necessarily representing the official policies or endorse-ments either expressed or imp lied, of LLNL/DOE or the U.S. Government. The authors wish to thank T. S. Eugene Ng for the use of the GNP source code, as well as Andrew McCallum and the students and staff of the Information Extraction and Synthesis Lab at the Uni-versity of Massachusetts for use of the Rexa data. Finally, we would like to thank Cindy Loiselle for her helpful comments and M&amp;Ms. [1] L. A. Adamic, R. M. Lukose, A. R. Puniyani, and B. A. [2] Y. Bartal. Probabilistic approximation of metric spaces and [3] U. Brandes. A faster algor ithm for betweenness centrality. [4] E. Chow. A graph search heuristi c for shortest distance paths. [5] D. Coppersmith and S. Winograd. Matrix muliplication via [6] P. Erd X s and A. R X nyi. On the evolution of random graphs. [7] C. Faloutsos, K. S. McCurley , and A. Tomkins. Fast discov-[8] R. W. Floyd. Algorithm 97 (shortest path). Communications [9] L. C. Freeman. Centrality in social networks: Conceptual [10] N. Friedman, L. Getoor, D. Koll er, and A. Pfeffer. Learning [11] A.V. Goldberg and C. Harrels on. Computing the shortest [12] J. Kleinberg. Navigation in a small world. Nature , 406:845, [13] J. Kleinberg. The small-worl d phenomenon: An algorithmic [14] J. Kleinberg, A. Slivkins, a nd T. Wexler. Triangulation and [15] R. Krauthgamer and J. R. Lee. Navigating nets: Simple algo-[16] J. Leskovec, J. Kleinberg, a nd C. Faloutsos. Graphs over [17] J. Neville and D. Je nsen. Dependency networks for relational [18] T. S. E. Ng and H. Zhang. Predicting Internet network dis-[19] C. R. Palmer, P. B. Gibbons, an d C. Faloutsos. ANF: A fast [20] M. Pias, J. Crowcroft, S. Wil bur, T. Harris, and S. Bhatti. [21] Y. Shavitt and T. Tankel. Big-Bang simulation for embed-[22] A. Slivkins. Distance estimati on and object location via rings [23]  X .  X  im  X  ek and D. Jensen. Decentralized search in networks [24] L. Tang and M. Crovella. Virt ual landmarks for the Internet. [25] D. J. Watts, P. S. Dodds, and M. E. J. Newman. Identity and [26] D. J. Watts and S. H. Strogatz. Collective dynamics of small-[27] Wikipedia contributors (2006). Si x Degrees of Kevin Bacon. [28] B. Wong, A. Slivkins, and E. G. Sirer. Meridian: A light-We evaluated the performance of our indices on three types of synthetic networks. Small (100 node ) examples of each are de-picted in Figure 12. The first type is based on an Erd X s-R X nyi style random graph model [6], in which we randomly connect a given number of nodes with edges and then select the largest con-nected component (typ ically encompassing &gt; 95% of the nodes) for annotation. The second type of graph used is a  X  X ightly X  rewired lattice, as first proposed by Watts and Strogatz [26]. For this model, we construct a lattice (specifying th e number of nodes in the graph and their degree), and then rando mly rewire a portion of the edges according to some probability (in this paper, 0.01). Finally, we tested our algorithms on small world graphs generated with the Forest Fire model descri bed by Leskovec et al. [16], us-ing burn probabilities ranging from 0.32 to 0.48, and a backward burning probability of 0.2. In addition two real-world datasets were used for experiments in this paper. The Rexa database is a citation graph of scientific pa-pers in computer science. It contains 165k nodes, representing papers, connected by 321k undire cted edges, representing the citations among papers. The low aver age degree is due to corefer-ence errors in the particular version of the Rexa dataset used and the fact that many papers in the dataset cite papers that do not appear elsewhere in the data and thus have a degree of one. The IMDb dataset is a network of actors drawn from www.imdb.com. Actors are linked when they have costarred in a movie together between 1970 and 2000. Furthermore, actors who have appeared in fewer than 20 m ovies in that period have been filtered out. The resulting netw ork contains 10k nodes and 628k edges. 
