 important part of network security especially over untrustworthy networks. 
The Kerberos authentication system is based on the well-known Needham-Schroeder exposure of session keys and so on [3, 4]. So some proposed authentication protocols authentication workload form the centralized KDC to the individual principals, but the implementation cost is still high. authentication and key distribution protocols different from Kerberos. Those protocols Syverson provided an enhancement on KSL protocol and NS protocol in 1993 [9]. And AUTHMAC_DH protocol used the message authentication codes to exchange the Diffie-Hellman components to overcome some Kerberos X  X  drawbacks [1 0 ]. Although most of discussed protocol provided the authentication and key distribution services, they did not establish the true session key between user and server [7, 8, 9, 1 0 ]. 
Chien proposed a protocol based on public key, challenge-response and hash protocol and the communication cost is lower than it [1 1 , 1 3 ]. 
In this paper, an authentication and key distribution protocol given forward secrecy is proposed. It updates session key every time by token-update operation. In addition, from KDC. The proposed protocol has two parts: initial phase and subsequent phase (Fig. 1).The their identities, f(  X  ) is a kind of hash function. 2.1 Initial Phase establish the session key with the server as following steps. (I.1) U-&gt;S { U, a x mod p, h(a x mod p, K uc ) } 1 U randomly selects a secret number x to compute a x mod p . 1 KDC authenticates user and sever by checking the hash value 2 S authenticates KDC by checking the value of a y mod p . 5 S keeps U, K n , n, r. 1 U decrypts message E Kuc (a x mod p, a y mod p,n, r) using K uc . 2 U authenticates KDC by checking the a x mod p. 3 U computes the a xy mod p to get K n . 4 U decrypts (a x mod p || a y mod p) using K n . 5 U authenticates server by checking the value of a x mod p and a y mod p. 6 U keeps K n ,n, r. 2.2 Subsequent Phase i th service now. 1 S decrypts the message E Kn-i+1 (r n-i+1 ) using K n-i+1 . 5 S encrypts (r n-i+1 || r n-i ) using K n-i . 6 S stores K n-i and r n-i , updates i . 3.1 Replaying Attack After checking the freshness of those nonce numbers, KDC encrypts a x mod p and a y decrypt the number and check the validity of their own number. If an attacker wants to cheat others by replaying old messages, it can be prevented easily. data. 3.2 Know Key Attack and Forward Secrecy every login by the random number generated by server. In addition, the random number is updated on every login and only shared by user and server, because the attacker can not get the updated random number to calculate the new session key, so the known key attack fails. 
To prove the forward secrecy in the proposed protocol, we also give three assumptions. 
We assume that an attacker knows the shared key K uc . Because the attacker does not cheat the server and the KDC in initial phase, but the session key is still secure. 
We assume that an attacker knows the shared key K sc . Because the attacker does not the shared key K uc . session key is still secure. 3.3 Man-in-the-Middle Attacks attack. authentication and key distribution using BAN logic [14]. The BAN logic can analyze the required initial assumptions of the participants and their final beliefs. combined with the formula Y. | YX  X  represents a principal Y has jurisdiction over fresh [14]. 
According to BAN logic, we give some initial assumptions [14]: 
Assumptions 1-5 are about the shared keys among U, S and C. Assumptions 6 and 7 indicate that U and S trust in C, they believed that C provide good protection on the exchanged messages and forward the messages to the other side honestly. Assumptions 8 and 9 show that two nonces have been generated by various principals who consider them to be fresh. 
According to the BAN logic [14], the goals of authentication and key distribution are defined as follows: generated by C, and U and S trust in the random number. 
The idealized protocol is as follows: Step 1 U S &lt; a mod p &gt;k Step 2 S C &lt; a mod p &gt;k ,&lt; a mod p &gt;k Step 3 C S { a mod p, S U,r, {a mod p,a mod p,S U,r}k }k
Step 4 S U {a mod p,a mod p,S U,r}k ,{a mod The proof may be briefly outlined as follows: 
Since step 3 and assumption 2, message-meaning rule applies and yields:  X  X  |  X  C | X 
Since Inference (1), belief conjuncatenation rule applies and yields: 
Since Inference (2), belief conjuncatenation rule applies and yields: 
Since Inference (3) and assumption 4, yields: 
Since assumption 9, freshness conjuncatenation rule applies and yields: 
Since Inference (2) and (5), nonce-verification rule applies and yields: 
Since Inference (6), belief conjuncatenation rule applies and yields: 
Since Inference (7) and assumption 6, jurisdiction rule applies and yields: 
Since step 4 and assumption 1, message-meaning rule applies and yields: 
Since Inference (9), belief conjuncatenation rule applies and yields: 
Since Inference (10) and assumption 3, yields: nonce-verification rules apply and yield: 
Since assumption 7 and Inference (12), jurisdiction rule applies and yields: 
Since step 4 and Inference (13), message-meaning rule applies and yields: nonce-verification rules apply and yield: 
Since Inference (15), belief conjuncatenation applies and yields: 
If U uses the session key K n to encrypt and send the message to S, then we yields: protocol achieves the goals of authentication and key distribution. comparison is summarized in table1. distribution [1, 12]. But Chie X  X  protocol, Huang X  X  protocol and our proposed protocol do not, that means an improvement at security aspect [11, 13]. In proposed protocol, even if the attacker knows all the parameters from KDC, he can not calculate the session key. It also improves in secure aspect. Message run of Initial and Subsequent phase: Initial/Subsequent; KDC can calculate the session key: KDC calculate; SK: Symmetric Key; Ce: certificate; PK: Public Key; DH: Diffie-Hellman; 
The comparisons of the computation cost of initial phase among these protocols are shown in table 2 [11, 12, 13]. 
Assume the length of the prime number p is 1024 bits in Diffie-Hellman, and public length is 320 bits (for DSA). 
Because RSA X  X  computation cost can be summarized as a modular exponentiation operation, and the computation cost of a modular exponentiation is about O(|n|) times hashing operations, symmetric encryptions or decryptions can be neglected [15]. And symmetric cryptosystem is faster 1000 times than asymmetric cryptosystem and hash function is faster 10 times than symmetric cryptosystem [16, 17]. 
Shieh X  X  protocol needs five message runs in initial phase, it is more inefficient than shorten the communication time. PKE: Public Key Encryption; PKD: Public Key Decryption; SKE: Symmetric Key Encryption; SKD: Symmetric key decryption; HF: Hash Function; Si: signature; Ce: certificate; ME: Modular Exponentiation 
The comparisons of the computation cost of subsequent phase among these protocols are shown in table 3 [11, 12, 13]. Shieh X  X  protocol needs three message runs obviously more efficient than Chie X  X  protocol [11, 13]. The proposed protocol is more efficient than Huang X  X  protocol in subsequent phase [13]. SKEnnnn nnnn SKD n n n n n n n n HF 0 0 n(n+2)/2 3n n(n+2)/2 3n 2n 2n Others 0 0 n PKE n PKD, n Si 0 0 0 0 PKE: Public Key Encryption; PKD: Public Key Decryption; SKE: Symmetric Key Encryption; SKD: Symmetric key decryption; HF: Hash Function; Si: signature; improved security and provides good efficiency. 
