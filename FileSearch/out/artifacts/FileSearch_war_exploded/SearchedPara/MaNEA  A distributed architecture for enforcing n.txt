 1. Introduction
The main applications of Multi-Agent Systems (MAS) support large scale open distributed systems . These systems are characterized by the heterogeneity of their participants; their limited trust; a high uncertainty; and the existence of individual goals that might be in conflict ( Artikis and Pitt, 2001 ). In these scenarios, norms are conceived as an effective mechanism for achieving coordination and ensuring social order; i.e., norms represent an effective tool for regulating the actions of software agents and the interactions among them ( Lo  X  pez et al., 2006 ). Most of the proposals on methodologies and guidelines aimed at developing open MAS ( Argente et al., 2011b ; Dignum et al., 2005 ) are based on organizational concepts, such as norms. These concepts facilitate the analysis and design of coordina-tion and collaboration mechanisms for MAS. Therefore, norms should 2011b ). As pointed out in Castelfranchi (2003) ,theuseofnormsin MAS allows better results to be achieved in dynamic and complex environments. Specifically, the fact that agents can violate norms autonomously allows a better adaptation to the environmental changes. Finally, the occurrence of norm violations can evidence the need to adapt the MAS ( Bernon et al., 2003 ). Agent platforms are the software that supports the development and execution of MAS. Thus, norms must be also considered in the design and implementation of agent platforms ( Criado et al., 2011b ). As a consequence, agent platforms must implement norms i n an optimized way, given that in open MAS the internal states of agents are not accessible ( Criado et al., 2011a ). Therefore, norms cannot be imposed as agent X  X  beliefs or goals, but they must be implemented in the platforms by means of control mechanisms ( Grossi et al., 2007 ).

This paper shows an overview of the most relevant works on norm implementation. This paper considers the main challenges of open MAS and points out the main deficiencies and drawbacks of agent platforms and infrastructures when supporting norms. With the aim of overcoming some of these problems, in this paper a Norm-Enforcing Architecture, known as M aNEA, is proposed. Specifically, MaNEA has been integrated into the Magentix2 platform. 1 The
Magentix2 platform allows the management of open MAS in a secure and optimized way. Its main objective is to bring agent technology to real domains: business, industry , e-commerce, among others. This goal entails the development of more robust and efficient mechan-isms for enforcing norms that control these complex applications.
This paper is organized as follows: Section 2 contains the analysis of the main proposals on norm enforcement; Section 3 describes briefly the Magentix2 platform; Section 4 describes the main components of MaNEA; Section 5 illustrates the perfor-mance of MaNEA through a case study; Section 6 contains an evaluation of this architecture; and, finally, Section 7 contains conclusions and future works. 2. Related work
Most of the proposals on norms for controlling MAS tackle this issue from a theoretical perspective ( Boella, 2004 ; Sergot, 1998 ).
However, there are also works on norms from a computational point of view. These works propose control mechanisms for norms to have control mechanisms are classified into two categories ( Grossi et al., 2007 ): regimentation mechanisms, which consist of making the violation of norms impossible; and enforcement mechanisms, which are applied after the detection of norm violations, reacting upon them. 2.1. Norm regimentation (defined by agents X  behaviour) to coincide ( Jones and Sergot, 1993 ). Thus, regimentation mechanisms prevent agents from performing forbidden actions by mediating the resources and the communication channel, such as Electronic Institutions (EIs) ( Esteva et al., 2004 ). However, the regimentation of all actions can be not only difficult or impossible, but also it is sometimes preferable to allow agents to violate norms ( Castelfranchi, 2003 ). In fact, Open MAS that operate in complex and changing environments may benefit from the occurrence and detection of norm violations. The reasons behind desirability of norm viola-tions are that it is impossible to take a thorough control of all agents X  actions; or agents could obtain higher personal benefits when norms are violated; or norms may be violated by functional or cooperative motivations. For example, changes in the environ-ment may cause norms to lose their validity. In this situation, autonomous agents may deviate from norms in order to achieve their own goal, which may imply a better performance of the whole MAS. All these situations require norms to be controlled but allowing norm violations to occur. In response to this need, the enforcement mechanisms have been developed, which are explained in the following subsection. 2.2. Norm enforcement according to the entity that observes whether norms are fulfilled or not. Specifically, norm compliance must be observed by agents or the infrastructure may provide mechanisms for monitoring agent activities according to norms. Each one of these approaches to norm enforcement is explained below. 2.2.1. Agent observability may be observed by agents that are involved in an interaction in which the norm has been violated ( second-party observability), or other agents that observe an interaction in which they are not directly involved ( third-party observability).
 Second-party observability
Daskalopulu et al., 2002 ) in which the agents involved in an interaction are responsible for monitoring norms. In these approaches, agents evaluate their interaction partners subjec-tively. In accordance with this evaluation, agents may punish or reward their partners ( Boella, 2003 ) or they may start a grievance procedure ( Criado et al., 2010b ). For example, Venkatraman and
Singh (1999) propose an approach for testing the compliance of agents with respect to a commitment. Commitments are specified in temporal logic and their compliance is evaluated with respect to locally constructed models for the given observer. The work contained in Daskalopulu et al. (2002) proposes a framework for contract performance arbitrating. In particular, it uses subjective logic ( J X sang, 2001 ) as the formal basis for evidence-based reasoning. Subjective logic addresses the problem of forming a measurable belief about a proposition on the basis of insufficient evidence, or in the presence of uncertainty and ignorance. Third-party observability
If there are agents that are not directly involved in an interaction but that are capable of observing it, they would be also capable of forming an own image about the interacting participants. Moreover, these evaluations or reputations may be exchanged. Thus, agents are persuaded to obey norms because their non-normative behaviour can be observed by others. In this case, the society as a whole acts as norm enforcer ( Sen and Airiau, 2007 ). These non-compliant agents might even be excluded from the society ( de Pinninck et al., 2007 ). The role of emotions in social enforcement ( Elster, 1996 ) is also interesting.
For example, the work described in Fix (2006) models the emotion-based enforcement of norms in agent societies. In this approach, the whole society observes compliance of norms and generates social emotions such as contempt or disgust, in case of norm violation; and admiration or gratefulness, in case of norm fulfilment. In the same way, agents observe the expression of these emotions and are also able to generate emotions such as shame or satisfaction in response.
The main drawback of proposals on second-party and third-party observability is the fact that the underlying infrastructure does not offer support for enforcing norms. Thus, the norm monitoring and the reaction to violations must be implemented by agent programmers. In this sense, agent programmers are responsible for watching over norm compliance. Even if the infrastructure provides authority entities that act as arbiters or judges in grievance processes, agents must be endowed with capabilities for both detecting norm violations and participating in these dispute resolution processes. 2.2.2. Infrastructural observability
Normative agent platforms provide entities that are in charge of both observing and enforcing norms. Cardoso and Oliveira (2007) propose a norm-enforcing architecture in which the monitoring and enforcement of norms is made by a single institutional entity, named as normative environment . This entity receives all messages that have been exchanged among agents and determines if an agent has violated (vs. fulfilled) a norm.
In this case, the normative environment sends a sanctioning (vs. rewarding) notification to this agent. As argued by Cardoso and Oliveira the implementation of the normative environment as a centralized component represents a performance limitation when dealing with a considerable number of agents.

To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforce-ment of norms are proposed in Minsky and Ungureanu (2000) and
Gaertner et al. (2007) . These works propose languages for expres-sing norms and software architectures for the distributed enfor-cement of these norms. Minsky and Ungureanu (2000) present an enforcement mechanism that is implemented by the Moses toolkit ( Minsky and Ungureanu, 1998 ). Its performance is as general (i.e., it can implement all norms that are controllable by a centralized enforcement) and more scalable and efficient than centralized approaches. However, one of the main drawbacks of this proposal is the fact that norms can only be expressed in terms of the messages sent or received by an agent; i.e., this framework does not support the definition of norms that affect an agent as a consequence of an action carried out independently by another agent. This problem is overcome by Gaertner et al. (2007) . In their approach, Gaertner et al. propose a distributed architecture for enforcing norms in EI. Specifically, this architecture only controls dialogical actions. Thus, the dialogical actions performed by agents cause the propagation of normative propositions (i.e., obligations, permissions, and prohibitions). These normative propositions are taken into account by the normative level; i.e., a higher level in which norm reasoning and management processes are performed in a distributed manner.

In a more recent work, Modgil et al. (2009) propose a general architecture for monitoring norm-governed systems. Specifically, it is a two layer architecture in which observers (i.e., the lowest layer) are capable of reporting to monitors (i.e., the highest layer) on states of interest relevant to the activation, fulfilment, viola-tion and expiration of norms. Monitors determine if a violation or fulfilment has occurred and they take remedial actions accord-ingly. The proposal of Modgil et al. does not give any detail of how the monitoring and observation levels can be dynamically dis-tributed into a set of coordinated entities in response to a changing environment. Thus, this architecture is not capable of dynamically adapting to situations in which the number of norms and agents to be controlled may change drastically. 2.3. Mixed approaches
Finally, there are works that use a mixed approach for controlling norms. They propose the usage of regimentation mechanisms to ensure compliance with norms that preserve the integrity of the application; However, infrastruc tural enforcement is also used to control norms that cannot be regimented due to the fact that they are not verifiable or their violation may be desirable. An example of this mixed approa ch is proposed by Criado et al. (2011b) .Thiswork shows how those norms that define permissions and prohibitions related to the management of the organizational infrastructure are regimented through mediation, whereas obligation norms are enforced by the infrastructure that perform sanctions and rewards. However, these remedial actions can only be expressed in terms of actions that are under the control of the organizational infrastruc-ture. Therefore, Criado et al. proposal performs a partial control of norms since only those norms that regulate the access to the organizational infrastructu re are controlled. The ORA4MAS ( Hubner et al., 2010 ) is another well-known proposal that makes use of a mixed approach for implementing norms.

The ORA4MAS proposal defines artifacts as first-class entities to instrument the organization to support agent activities within it. Artifacts are resources and tools that agents can create and use to perform their individual and social activities ( Omicini et al., 2008 ). Regarding the implementation of norms in the ORA4MAS framework, regimentation mechanisms are implemented in artifacts that agents use to access the organizational infrastructure (i.e., mediation). The enforcement of norms is implemented by artifacts, which detect norm violations, and agents, which are informed about norm viola-tions and carry out the evaluation and judgement of these situations. In these two proposals only the norms that regulate the access to the platform are controlled whereas other domain dependent norms are not automatically controlled (i.e., evaluated and judged). 2.4. Requirements for norm enforcing architectures
As being illustrated by the previous section, proposals that provide support to norm-enforcing present some drawbacks that make them unsuitable for controlling norms in open MAS. In summary, the most important requirements for norm -enforcing architectures are:
Automatic enforcement. It must provide support for the detection of norm violations and the application of remedial mechanisms. It implies that agents can trust the enforcement system that will sanction their partners if they behave dishonestly. Moreover, the enforcement architecture must provide normative information in order to allow agents to realize that they or other agents have violated a norm. Thus, agents are persuaded to obey norms not only by a material system of sanctions but also since their non-normative behaviour can be observed by others, who may reject to interact with them in the future.

Control of general norms. It must control complex and general norms. Thus, it must allow the definition and management of norms that control not only the messages exchanged among agents but also other actions carried out by agents. In addition, it must support the enforcement of norms that control states of affairs. Finally, it must control norms that are defined in terms of actions and states of affairs that occur independently (e.g., actions that are performed by different agents).
Dynamic enforceable content. Dynamic situations may cause norms to lose their validity or to need to be adapted. Thus, norm-enforcing mechanisms should provide solutions to open MAS in which the set of norms evolves along time. Moreover, it must provide support for the enforcement of unforeseen norms that control activities and actions that are defined on-line.
Efficient, distributed and robust. Finally, enforcement mechanisms must provide the possibility of performing this task in a distributed way. This distributed architecture must be capable of operating quickly, effectively and orderly in changing environments in which the number of agent, norms, etc. may change drastically.
Table 1 summarizes the performance of the proposals on infrastructural enforcement with respect to these requirements.
In particular, the automatic enforcement feature consists of three different activities: (i) the detection of norm violations ( Violation
Detection column of Table 1 ), the application of sanctions and rewards ( Remedial Application column) and the provision of normative information ( Normative Information column). With regard to the type of norms that these proposals control, they have been evaluated according to four criteria: the possibility of controlling the messages exchanged by agents ( Message Exchange column), the possibility of controlling actions performed by agents ( Action Performance column), the possibility of controlling states of affairs ( States of Affairs column) and the possibility of controlling norms that affect an agent due to a certain action or message sent by other agent ( Independent Situations column).
The suitability of these infrastructures for controlling dynamic environments has been evaluated according to two criteria: the consideration of norms that are only active under specific circum-stances ( Norm Evolution column) and the explicit consideration of norm change (i.e., creating and deleting norms on-line) ( Norm
Modification column). Finally these proposals have been evaluated according to the possibility of distributing the norm enforcing architecture ( Distributed Architecture column). As illustrated in this table, issues such as the provision of normative information and the explicit consideration of the norm modification problem have not been properly addressed by the existing proposals. With the aim of meeting these pending requirements and improving the efficiency of existing approaches in terms of the messages that are required to control norms, we propose in Section 4 a
Norm-Enforcing Architecture for controlling norms in the Magen-tix2 platform. Specifically, the Norm-Enforcing Architecture bases on the organization and interaction support offered by Magen-tix2. Next, the Magentix2 platform is briefly described. 3. The Magentix2 platform geneous agents interact and organize themselves into Virtual Organi-grouping and collaboration among heterogeneous entities. In VOs there is a separation between form and function that requires defining how behaviour will take place ( Ferber et al., 2005 ). VOs are social entities formed by agents that try to achieve the organizational goals. These agents are organized in groups that are controlled by norms. support for VOs at two levels: and the Organization Management System (OMS) ( Criado et al., 2010c ),whichisinchargeofthe management of VOs, taking control of their underlying structure, the roles played by agents, and the register of the norms that govern the VO.

Interaction level . Magentix2 provides support to: agent com-munication , supporting asynchronous reliable message exchanges and facilitating the interoperability between heterogeneous entities; agent conversations ( Fogue  X  s et al., 2010 ), which are automated Interaction Protocols; tracing service support ( Burdalo et al., 2011 ), which allows agents in a MAS to share information in an indirect way by means of trace events; and, finally, Magentix2 incorporates a security module ( Such et al., 2011 ) that provides features regarding security, privacy, openness and interoperability.

Norms define what is considered as permitted, forbidden or obligatory in an abstract way. However, norm compliance must be controlled considering the actions and messages exchanged among agents at the interaction level. The Norm-Enforcing
Architecture proposed in this paper tries to fill the gap between the organizational level, at which norms are registered by the
OMS; and the interaction level, at which actions and communica-tions between agents can be traced. Next, the Tracing Service
Support and the storage of norms, provided by the OMS, are described. 3.1. Tracing service support
In order to facilitate indirect communication (i.e., indirect ways of interaction and coordination), Magentix2 provides
Tracing Service Support ( Burdalo et al., 2011 )(see Fig. 1 ). This service is based on the publish/subscribe software pattern, which allows subscribers to filter events satisfying the values of some attributes (content-based filtering), so that agents only receive the information in which they are interested and only requested information is transmitted. In addition, security policies define which entities are authorized to receive which specific events. These tracing facilities are provided by a set of components named Trace Manager (TM). There can be three types of tracing entities (i.e., those elements of the system capable of generating and/or receiving events): agents, artifacts or groups of agents.

A trace event or event is a piece of data representing an action, message exchange or situation that has taken place during the execution of an agent or any other component of the MAS. Generic events, which represent application independent information, are instrumented within the code of the platform. Application events are domain dependent information.
 Definition 1 ( Event ). An event e is defined as a tuple e  X  Time , Origin , Data S , where:
Type is a constant that represents the nature of the information represented by the event;
Time is a numeric value that indicates the global time at which the event is generated;
Origin is a constant that identifies the tracing entity that generates the event;
Data  X  c 1 4 4 c n is a conjunction of possibly negated first-order grounded atomic formulae that contains extra attached data required for interpreting the event.

Trace events can be processed or even combined to generate compound trace events, which can be used to represent more complex information.

Any tracing entity is provided with mail boxes for receiving or delivering events ( E In and E Out ). Entities that want to receive certain trace events request the subscription to these events by sending to the TM a subscription event that contains the template of those events they are interested in.
 Definition 2 ( Template ). A template t is a tuple t  X  / Type , Origin , Data S that contains the filtering specified criteria for events, where:
Type is a constant that represents the nature of the information represented by the event;
Origin is a constant that identifies the entity that generates the event;
Data  X  c 1 4 4 c n is a conjunction of possibly negated first-order atomic formulae that may contain free variables.
Let us consider the standard notion of substitution as a finite and possibly empty set of pairs X / y where X is a variable and y is a term. Let us also define the application of a substitution s as: 1. s  X  c  X  X  c if c is a constant. 2. s  X  X  X  X  y if X = y A s ; otherwise s  X  X  X  X  X . 3. s  X  c 1 4 4 c n  X  X  s  X  c 1  X  4 4 s  X  c n  X  . 4. s  X  / r 0 , ... , r n S  X  X  / s  X  r 0  X  , ... , s  X  r n
Therefore, the application of a substitution on a template is defined as follows:  X  / Type , Origin , Data S  X  X  / Type , Origin , s  X  Data  X  S since Type and Origin take constant values.

According to the definitions of events and templates the matching relationship between events and templates is defined as follows: Definition 3 ( Matching Function ). Given an event e  X  / Type , Time , Origin , Data S and a template t  X  / Type 0 , Origin 0 , Data 0 matching is a boolean function defined as follows: matching  X  e , t  X  X 
Definition 4 ( Unification Function ). Given an event e and a template t , their unification is a boolean function defined as follows: unification  X  e , t  X  X  3.2. Organization Management System (OMS)
The Organization Management System (OMS) ( Criado et al., 2010c ) is responsible for the management of VOs and their constituent entities. The OMS provides a set of services: structural services , which comprise services for adding/deleting norms ( registerNorm and deregisterNorm services allow entities to modify the norms that are in force or applicable within a VO), and for adding/deleting roles and groups; informative services , which provide information of the current state of the organization; and dynamic services , which allow agents to enact/leave roles inside VOs ( acquireRole and leaveRole services). Moreover, agents can be forced to leave a specific role ( expulse service). When the
OMS provides any of these services successfully, then it generates an event for informing about the changes produced in the VO. 3.2.1. Virtual Organization model VOs have been employed as an abstraction for modelling open
MAS. VOs include the integration of organizational and individual perspectives and also the dynamic adaptation of models to organi-zational and environmental changes ( Dignum and Dignum, 2002 ). In
Criado et al. (2011b) the model of VO considered by the OMS is described in detail. It is based on the Human Organization Theory ( Daft, 2003 ) and classifies the main aspects of a VO into four dimensions as follows:
The Structural dimension, which describes components of the system and their relationships. Thus, it describes the roles and groups that form a VO. Roles allow dividing the VO function-alities in an abstract way. Groups represent the context in which these activities take place.

The Functional dimension, which describes the system function-ality in terms of the services provided by agents and groups.
The Normative dimension, which describes the norms defined to control the society members. Norms are a coordination mechan-ism that attempt to: (i) promote behaviours that are satisfactory to the organization (i.e., actions that contribute to achievement of global goals); and (ii) avoid harmful actions (i.e., actions that prompt the system to be unsatisfactory or unstable).

The Environmental dimension, which describes the environ-ment in terms of its resources and how agents can perceive and act on them. 3.2.2. Norm definition
According to the normative definitions provided in Oren et al. (2009) , in Magentix2 a distinction among norms and instances is made. Norms define patterns of behaviours by means of deontic modalities : obligations ,whichdefinewhichactionsorstatesofaffairs should be performed or satisfied by agents; and prohibitions ,which definewhichactionsorstatesofaffairsshouldnotbeperformedor achieved. Magentix2 takes a closed world assumption where every-thing is considered as permitted by default. Therefore, permissions are not considered in this paper, since they can be defined as normative operators that invalidate the activation of an obligation or prohibition. Therefore, norms define a pattern of behaviour (or norm condition in our terminology) as obligatory or prohibited. This norm condition can be represented as actions to be performed or states of affairs to be achieved. In fact,wemakenosharpdistinction between actions and states of affai rs, since what in one situation is best described as an action may be be st described in another situation as a state of affairs ( Lo  X  pez et al., 2006 ). Also inspired by the representation of Oren et al. (2009) , we define norms as conditional rules that are relevant to a set of agents under specific circumstances.
Thus, the set of agents that is affec tedbyaspecificnormaretheones that are playing the target role of this norm. Thus, norms represent the responsibilities, rights and duties of roles. In general, norms are not applied at all times, but include the notions of activation and expiration conditions. Specifically, the activation condition defines when obligations and prohibitions must be instantiated and must be fulfilled by all agents playing the target role. These instances remain active, even if the activation condition ceases to hold.
Specifically, the expiration condition defines the validity period or also include information about the enforcement mechanisms: sanctions , to punish agents that do not obey the norm and rewards , for rewarding norm fulfilment.

Definition 5 ( Norm ). A norm n is defined as a tuple n  X 
T , A , E , C , S , R S , where:
Since MaNEA builds on the event tracing approach to monitoring, the conditions A , E and C are expressed in terms of event templates.
 services for creating and deleting norms on-line. Once norms have been registered they are in force or applicable. Similarly, norms become deleted when they are unregistered. Fig. 2 shows an overview of the norm life-cycle.
 gories: organizational and functional norms. Examples of norms belonging to each category are provided below.
 Organizational norms services offered by the OMS to members of the organization.
They establish organizational dynamics, e.g. role management (role cardinalities, incompatibility between roles) and the proto-col by which agents are enabled to acquire roles. For example, an organizational norm that forbids any agent to register new norms when there is a critical situation is defined as follows: / restrictedNormativeChange , , S , / freeNormativeChange , , S , / registerNorm , , norm  X  N  X  S , , S
According to norm n 1 once the restrictedNormativeChange event is sent, any agent that enacts the member role (it is a special role that is implicitly played by all agents in Magentix2) is forbidden to request the register of any norm (i.e., any event the matches the template / registerNorm , , norm  X  N  X  S will be consid-ered as forbidden). This norm will remain active until the freeNormativeChange event is received.

Similarly, an incompatibility constraint between two roles ( r 1 and r 2 ), which define that agents cannot play simultaneously roles r 1 and r 2 , is modelled by the two following norms: / incompatibilityActivation , , S , / incompatibilityExpiration , , S , / aquireRole , , role  X  r 2  X  S , , S / incompatibilityActivation , , S , / incompatibilityExpiration , , S , / aquireRole , , role  X  r 1  X  S , , S For example, norm n 3 defines that once the incompatibility
Activation event has been sent, then any agent that enacts role r is forbidden to request the acquisition of role r 2 . This norm will remain active since the incompatibilityExpiration event is sent. Functional norms
Functional norms ( Criado et al., 2010c ) are domain dependent norms that define the functionality of roles. For example, let us suppose the case of an assembly line that has been implemented as a hierarchy of agents. Thus, there is a set of robots that perform the different assembly tasks; i.e., the subordinated . These robots are controlled by a set of agents that monitor and evaluate their performance; i.e., the supervisors . Supervisors are responsible for dynamically reorganizing robots in the assembly line to improve the productivity. To this aim, robot agents are asked for reporting information about their performance to auditor agents that will analyze the performance of the assembly line. This situation can be modelled as a functional norm defined as follows: / auditStart , , task  X  T  X  S , / auditEnd , , task  X  T  X  S / taskPerformance , , performance  X  P  X  4 task  X  T  X  S ,
When an audit stage of a given task ( T ) starts (i.e., the auditStart event is sent), subordinated agents are obliged to inform about their performance on this task before the audit stage ends (i.e., the auditEnd event is sent).
 registerNorm deregisterNorm 3.2.3. Instance definition
When the activation condition of a norm holds; i.e., the activation event is detected, then it becomes active and several norm instances (or instances for short) are created, according to the possible groundings of the activation condition.
 a perceived event e , an instance i of n is the tuple i  X  / id 0 , D 0 , T 0 , E 0 , C 0 , S 0 , R 0 S , where: unification ( e , A ) is true, i.e., there is a substitution s such that matching  X  e , s  X  A  X  X  is true (the norm is active);
C 0  X  s  X  C  X  , E 0  X  s  X  E  X  , S 0  X  s  X  S  X  , and R 0  X  s  X  R  X  ; id 0  X  id , D 0  X  D and T 0  X  T .

Fig. 3 shows an overview of the instance life-cycle. Instances are active when their activation conditions hold. When the expiration condition of an instance is true or the norm that gives rise to the instance is deleted, then the instance expires.
For example, let us suppose that the event / auditStart , t , s 1 , task  X  assembling  X  S is sent by an agent ( s 1 ). Thus, norm n 4 will be instantiated as follows: performance  X  P  X  4 task  X  assembling  X  S , , S Definition 7 ( Instantiation Function ).Givenanevent e  X  / Time , Origin , Data S and a norm n  X  / id , D , T , A , E , C , S , R is a function that instantiates norm n as follows: instantiation  X  e , n  X  X  / id 0 , D 0 , T 0 , E 0 , C 0 , S 0 , R 0 where there is a substitution s such that matching  X  e , s  X  A  X  X  is true;
C 0  X  s  X  C  X  , E 0  X  s  X  E  X  , S 0  X  s  X  S  X  , and R 0  X  s  X  R  X  ; id 0  X  id , D 0  X  D and T 0  X  T . 3.2.4. Power definition
Once the norm activation event has been detected and a new instance is created, all agents playing the target role are under the influence of the new instance. Thus, a normative power (or power for short) represents the control over a concrete agent that is playing the target role.
 instance; C 00  X  / C 0 Type , AgentID , C 0 Data S such that C 0  X  /
AgentID is a constant that identifies the agent affected by the power;
W 00 is a boolean constant that expresses if the event C 00 has been received.

The dynamics of powers depends on their deontic modality. Fig. 4 shows an overview of the obligation power life-cycle. Specifically, an obligation power is created when an agent enacts the target role of this power. From that moment on, the obligation is pending. When the agent affected by the power achieves the norm condition, then the obligation is fulfilled, the agent is rewarded, and the power is its pending obligations or the instance that gives rise to the power expires, then the obligation is violated, the agent is sanctioned, and expulsed), then the obligation is expired, the power is deleted, and the agent is neither rewarded nor sanctioned. The dynamics of prohibition powers is depicted by Fig. 5 . Prohibition powers are also created when any agent enacts the target role. From that moment on, every time this agent achieves the norm condition, the prohibition is the power expires and the prohibition has not been violated, then the prohibition is fulfilled, the power is deleted, and the agent is rewarded. On the contrary, if the instance that gives rise to the power expires and the prohibition has been violated, then the power is deleted, and the agent is not rewarded. Finally, if the agent leaves the target role, then the power is deleted, and the agent is not rewarded.

For example, let us suppose that there is a robot agent r playing the subordinated role. Thus, a new power for controlling the behaviour of r 1 according to n 4 will be created as follows: p performance  X  P  X  4 task  X  assembling  X  S ,
The next section describes the Norm-Enforcing Architecture proposed in this paper. It is a two layer architecture formed by: a higher level in charge of detecting the instantiation of norms; and a lower level in charge of enforcing powers on agents. The operational semantics of norms, instances and powers (i.e., how they are created, deleted, fulfilled and violated) is explained below.
 activation condition expiration condition acquireRole acquireRole 4. Norm-enforcing architecture: MaNEA
Architecture ) is to endow the Magentix2 platform with an infra-structure capable of controlling norms in open MAS where unforeseen scenarios may occur. Therefore, the number of agents and the situations that must be controlled through norms may change at runtime. For this reason, MaNEA has been designed as a distributed architecture. Specifically, MaNEA has been distributed over two layers (see Fig. 6 ): agents and detect the fulfilment and violation of powers. Thus,
NEs perform three different proce sses related to: the maintenance oftheinstancelist(named Instance Management process), the maintenance of the role enactment list (named Role Enactment
Management process), and the observation of agent behaviours to detect the fulfilment and violation of powers (named Observation of Behaviours process).

The communication among the NMS, the NEs, the OMS and the agents is carried out in an indirect way by means of trace service support provided by Magentix2 (see Section 3.1 ). 2 Next, both the
NM and the NE entities are described in detail. 4.1. Norm Manager
The Norm Manager (NM) is responsible for determining which norms are active (i.e., have to be instantiated) at a given moment.
Algorithm 1 is the pseudocode of the control loop performed by the NM. When the NM receives an event ( e ), then it handles the event according to the event type. Mainly, the NM carries out a process that can be divided into two differentiated tasks: norm management and instance management. Thus, the NM maintains a list ( N ) that contains all norms that have been registered in
Magentix2 and a list ( I ) that contains all instances that remain active at a given moment. 4.1.1. Norm Management
In order to maintain the norm list, the NM subscribes to those events sent by the OMS related to the creation and deletion of norms (i.e., registerNorm and deregisterNorm events). Thus, when the NM receives an event informing about the creation of a new norm, then it adds this norm into its norm list and subscribes to the event that activates the norm (i.e., it sends the subscription event to the TM with the event template A ). 3
When a norm is deregistered, then the NM removes it from its norm list. Moreover, it removes all instances that have been created out of this norm. For each deleted instance, the
NM unsubscribes from its expiration event (i.e., it sends the unsubscription event to the TM with the event template E 0 ) and generates an event for informing about the deletion of this instance (i.e., a normDeletion event is sent through the event sending box). 4.1.2. Instance Management
Once the activation event of a norm is received (i.e., unification ( e , n )) and adds it to the instance list. At this moment, the NM subscribes to the expiration event and informs about the activation of the norm (i.e., the instanceActivation event is sent by the NM). Algorithm 1. Norm Manager Control Loop.
 Require : Event reception box E In Require : Event sending box E Out Require : Norm list N
Require : Instance list I 1: Add / subscription , NM , / registerNorm , OMS , SS to E 2: Add / subscription , NM , / deregisterNorm , OMS , SS to E 3: while E In is not empty do 4: Retrieve e from 5: if Type  X  registerNorm then 6: Add Data to N 7: Add / subscription , NM , A S to E Out 8: end if 9: if Type  X  deregisterNorm and Data in N then 10: Remove Data from N 11: Add / unsubscription , NM , A S to E Out 12: for all i in I do 13: if id 0  X  id then 14: Remove i from I 15: Add / unsubscription , NM , E 0 S to E Out 16: Add / normDeletion , NM , i S to E Out 17: end if 18: end for 19: end if 20: for all n in N do 21: if unification ( e , A )  X  true then 22: i  X  instantiation ( e , n ) 23: if i not in I then 24: Add i to I 25: Add / instanceActivation , NM , i S to E Out 26: Add / subscription , NM , E 0 S to E Out 27: end if 28: end if 29: end for 30: for all i in I do 31: if unification  X  e , E 0  X  X  true then 32: Remove i from I 33: Add / unsubscription , NM , E 0 S to E Out 34: Add / instanceExpiration , NM , i S to E Out 35: end if 36: end for 37: end while
Similarly, when the NM receives the expiration event of any from the instance list, unsubscribes from the expiration event and informs about the expiration of this instance (i.e., the instance Expiration is sent by the NM).

Initially, there is a single NM registered in the Magentix2 platform. However, the NM is capable of simple adaptation behaviours (i.e., replication and death) in response to changing situations. For example, before the NM collapses (i.e., its event reception box is full), it might replicate itself and unsubscribe from the registerNorm event. Thus, the new NM is responsible for controlling the activation of the new norms. Similarly, if the NM reaches a state in which it has no norm to control and it is not the last NM subscribed to the registerNorm event, then it removes itself. These replication and death mechanisms are a simple example that illustrates how the highest layer of MaNEA can be dynamically distributed into several NMs. However, the definition of more elaborated procedures for adapting dynamically to changing environments ( Nakano and Suda, 2005 ) is a complex issue that is out the scope of this paper. 4.2. Norm Enforcer
The Norm Enforcer (NE) is responsible for controlling agent behaviour. Thus, it detects violations and fulfilments of norms, and reacts upon it by sanctioning or rewarding agents. Algorithm 2 is the control loop executed by the NE. As illustrated by this algorithm, the NE maintains a list ( I ) with the instances that hold at a given moment. Thus, it subscribes to the events sent by the
NM that inform about the activation and expiration of instances, and the deletion of norms. Besides that, the NE is also in charge of controlling agents affected by the instances. Thus, it maintains a list P that contains all powers that have been created out of instances. To determine which agents are controlled by these instances, it also maintains a list ( RE ) containing information about role enactment (i.e., the set of roles that each agent is playing at a given moment). Thus, the NE subscribes to the events sent by the OMS that inform about the fact that an agent has acquired or left a role ( acquireRole and leaveRole events). In addition, the NE also subscribes to the expel event, which informs about the fact that a particular agent has been forced to leave a role as a disciplinary measure.
 Algorithm 2. Norm Enforcer Control Loop.
 Require : Event reception box E In Require : Event sending box E Out Require : Instance list I Require : Power list P
Require : Role enactment list RE 1: Add / subscription , NE , / instanceActivation , NM , SS 2: Add / subscription , NE , / instanceExpiration , NM , SS 3: Add / subscription , NE , / normDeletion , NM , SS to E 4: Add / subscription , NE , / acquireRole , OMS , SS to E 5: Add / subscription , NE , / leaveRole , OMS , SS to E Out 6: Add / subscription , NE , / expel , OMS , SS to E Out 7: while E In is not empty do 8: Retrieve e from E In // e  X  / Type , Time , Origin , Data 75: end while
As in case of the NM, the NE starts retrieving an event from its event reception box. Then, different operations are performed according to the type of the event received. Specifically, the NE carries out a process that can be divided into three different activities: role enactment management, instance management and observation of behaviours. 4.2.1. Role Enactment Management
Algorithm 3 is the pseudocode corresponding to the role enactment management process. Specifically, when the OMS informs that an agent (identified by AgentID ) has acquired a new role (identified by RoleID ), then the NE updates the role enactment list. Moreover, the list of instances is also checked for determining which instances affect the role RoleID . For each one of these instances, the NE creates a new power addressed to the agent identified by AgentID . In addition, the NE subscribes to the event expressed in the norm condition in order to be aware of the fulfilment or violation of this norm; i.e., it requests its subscription to the events that match the template C 00  X  , agent (identified by AgentID ) is not longer playing a role (identi-fied by RoleID ) (i.e., leaveRole or expel events are received by the
NE), then the role enactment list is updated. Similarly, all powers that affect the agent AgentID as a consequence of being playing the role RoleID are removed. Therefore, the NE does not have to observe the norm condition anymore and unsubscribes from this event. Finally, if any agent leaves a role voluntarily (i.e., the leaveRole event is received) before fulfilling its pending obliga-tions, then it is sanctioned (i.e., the NE performs the sanctioning action S 00 ). The definition of actions that are applied as sanctions and rewards are domain dependent. For example, these sanctions might consist on a degradation of the public evaluation of a seller (as occurs in eBay), 4 or malicious agents may be expelled from the organization by the infrastructure itself, or there may be other domain agents in charge of performing sanctions. Besides that, the NE informs about the fact that an agent has been sanctioned for violating an obligation (i.e., the sanction event is sent through the E Out box).

Algorithm 3. Role Enactment Management. 4.2.2. Instance Management informed by the NM about the creation of a new instance (i.e., the NE receives the instanceActivation event), then the NE updates its instance list and creates new powers for controlling all the agents that are playing the target role at that moment. The watch of the new powers the NE starts to observe indirectly norm compliance by subscribing to the event C 00 .

Algorithm 4. Instance Management. 32: if Type  X  instanceActivation then 33: Add Data to I 34: for all ( AgentID , RoleID ) in RE do 35: if RoleID  X  T 0 then 37: Add / id , D 0 , T 0 , C 00 , S 0 , R 0 , false S to P 38: Add / subscription , NE , C 00 S to E Out 39: end if 40: end for 41: end if 42: if ( Type  X  instanceExpiration or Type  X  normDeletion ) and 43: Delete Data from I 44: for all p in P do 45: if id 0  X  id 00 then 46: Remove p from P 47: Add / unsubscription , NE , C 00 S to E Out 48: if Type  X  instanceExpiration then 49: if W 00  X  false and D 00  X  O then 50: Perform S 00 // against AgentID 51: Add / sanction , NE , violated  X  id 00 , AgentID  X  S to E 52: end if 53: if W 00  X  false and D 00  X  F then 54: Perform R 00 // in favour of AgentID 55: Add / reward , NE , fulfilled  X  id 00 , AgentID  X  S to E 56: end if 57: end if 58: end if 59: end for 60: end if
When an instance has no longer effect (i.e., the NE receives the instanceExpiration or normDeletion event), then the NE updates the instance list and removes all powers created out of this instance.
An instance becomes ineffective whenever its expiration condi-tion holds or the norm that has given rise to it is abolished. In the first case (i.e., the NM receives the instanceExpiration event), the agents controlled by this instance are responsible for fulfilling the norm. Thus, if the instance obliges agents to reach some state of affairs (e.g., agents are obliged to perform an action) and this state has not been observed yet (i.e., the watch condition W 00 of powers is false), then the offender agents are sanctioned. On the contrary, if agents are prohibited to reach some situation and the forbidden state has not been observed (i.e., W 00 of powers is false), then agents are rewarded. Finally, if an instance becomes ineffec-tive due to the deletion of a norm, then agents are not responsible for the fulfilment of the norm and enforcement actions are not Algorithm 5. Observation of Behaviours. 61: for all p in P do 62: if unification  X  e , C 00  X  X  true then 63: Remove p from P 64: if D 00  X  F then 65: Add / id 00 , D 00 , T 00 , C 00 , S 00 , R 00 , true S to P 66: Perform S 00 // against AgentID 67: Add / sanction , NE , violated  X  id 00 , AgentID  X  S to E 68: else 69: Perform R 00 // in favour of AgentID 70: Add / reward , NE , fulfilled  X  id 00 , AgentID  X  S to E 71: Add / unsubscription , NE , C 00 S to E Out 72: end if 73: end if 74: end for 4.2.3. Observation of Behaviours
This functionality is implemented by Algorithm 5 .TheNEchecks for each one of the powers whether the C 00 event has been detected updated. The watch condition is registered as true indicating that the norm condition has been perceived. Then, enforcement actions are performed according to the deontic modality of the power. For example, if the power is an obligation, then the obligation is considered as fulfilled (i.e., the power is deleted from P )andthe agent is rewarded. Similarly, if it is a prohibition, then the agent is sanctioned. However, in case of a prohibition the power is not removed until the norm expires, since sanctions must be applied if the forbidden event is detected again.

As in case of the NM, the lowest level of MaNEA has been described assuming that there is a single NE. However, this layer may be formed by a set of specializ ed NEs. For example, the set of instances can be distributed among NEs according to the target role. Thus, each NE is responsible for controlling actions in which a specific set of roles is involved. It is also possible to specialize NEs for controlling a specific group of agents independently of the roles that they play. Finally, it is also possible to dynamically adapt the amount of NEs by performing cloning and self-deletion operations. 5. Case study The first step that any engineer must perform to implement a MAS in Magentix2 is to model the MAS based on the VO approach. To facilitate this task, engineers are encouraged to use the GORMAS guidelines ( Argente et al., 2011b ). Specifically, GORMAS (Guidelines for ORganizational Multi-Agent Systems) proposes a set of activities for the analysis and the design of VOs. These guidelines cover the requirement analysis, the structure design and the design of the organization-dynamics. Software designers specify the services must be provided by the system, the internal structure of this system and the norms that control its behaviour, taking into account the specific features of open MAS. For a complete description of GORMAS see Argente (2008) . For example, in the assembly line VO, which has been introduced in Section 3.2.2 , the engineer starts with the analysis of the system requirements. Specifically, the engineer must identify the use cases (e.g., the assembly line VO may be used by an expert that wants to reconfigure the assembly line) and the global goals of the assembly line (e.g., improve the productivity). Then GORMAS helps the engineer to select the most suitable topology according to the system requirements. In the assembly line, agents can be grouped on the basis of the processes that they carry out. More-over, most of agents perform specialized tasks that are controlled and evaluated by a subset of agents. Thus, the engineer is suggested to model the assembly line as a hierarchy in which agents enact three main roles (i.e., supervisor, auditor and sub-ordinated). The next step consists of defining the VO function-ality; i.e., the services provided and offered by the different roles.
Finally, GORMAS provides the engineer with recommendations to define the most suitable norms that control the VO according to the organizational goals, topology, etc. In this phase the engineer defines the norms that control the assembly line. For example,
GORMAS suggests the engineer to create norms to define the precedence relationships between tasks, to control the access to resources, and so on. Thus, the norm n 4 is identified and defined in this step. Engineers are encouraged to use EMFGormas ( Garcia et al., 2009 ) as a tool for modelling MAS. EMFGormas is an engineering tool for open MAS based on GORMAS. It is a CASE tool that simplifies the modelling task and checks the interde-pendencies between the GORMAS models and their coherence.
The norms must be registered in the OMS and then they will be automatically monitored and enforced by Magentix2 (i.e., by
MaNEA X  X  entities). Thus, the engineer will only need to pro-gramme the concrete behaviour of the domain agents. These domain agents must take into account norms if they want to avoid sanctions. Thus, the engineer can follow either the approach described in Kollingbaum and Norman (2003) so that he hard-wires norms on agents, or the approach of endowing these agents with capabilities for accepting norms while maintaining their autonomy as described in Criado et al. (2010a) .

To illustrate the performance of MaNEA at execution time, a concrete execution of the assembly line is explained below. Let us assume the existence of four domain agents: the supervisor ( s the auditor ( a 1 ) and two robot agents ( r 1 and r 2 ) that play the subordinated role. Moreover, there are infrastructural agents: the norm manager (NM), the norm enforcer (NE), the trace manager (TM) and the organization management system (OMS).
 Fig. 7 shows the exchange of events among the agents TM,
OMS, NM, NE and s 1 corresponding to the activation of norm n which has been defined in Section 3.2.2 as follows: / auditStart , , task  X  T  X  S , / auditEnd , , task  X  T  X  S / taskPerformance , , performance  X  P  X  4 task  X  T  X  S ,
Specifically, agent OMS sends an event for informing the NM about the register of norm n 4 . According to Algorithm 1 (described in Section 4.1 ), the NM sends an event to the TM for subscribing to the norm activation event ( / auditStart , , task  X  T  X 
The supervisor agent ( s 1 ) is responsible for initiating an audit stage. Specifically, agent s 1 sends an event for starting the audit of the assembling task. Then the NM receives this event and informs the NE about the creation of an instance named i assembling i assembling  X  / n 4 , O , subordinated , / auditEnd , , task  X  assembling  X  S , performance  X  P  X  4 task  X  assembling  X  S , , S two agents ( r 1 and r 2 ) that are playing the subordinated role, two powers are created. Thus, the NE executes Algorithm 4 (described in Section 4.2.2 ) and sends two subscription requests to the TM for controlling these two powers.
 the norm n 4 is active. When the audit stage of the assembling task starts, agents r 1 and r 2 send events for informing about this task.
Since the auditor agent ( a 1 ) is subscribed to this information, it receives these events. On the one hand, agent r 1 informs about the cost of this task. This event does not match the norm condition template and, as a consequence, agent NE does not receive this event. On the other hand, agent r 2 informs about the performance of this task. In this case, agent NE receives this event and it considers that agent r 2 has fulfilled the norm n 4 . Agent NE executes Algorithm 5 (described in Section 4.2.3 ), rewards agent r 2 and unsubscribes from the event that controls the power corresponding to r 2 .
 instance i assembling expires. This process starts when the agent s sends the expiration event ( / auditEnd , , task  X  assembling  X  the NM unsubscribes from this event, deletes the instance and informs the about the expiration of the instance i assembling the NE is subscribed to the instanceExpiration event, then the event sent by the NM is directly delivered to the NE. The NE executes Algorithm 4 (described in Section 4.2.2 ) and checks all powers related to the instance that remain unfulfilled.
Specifically, the NE removes the power that controls agent r 1 and unsubscribes itself from the norm condition event ( / taskPerformance , r 1 , performance  X  P  X  4 task  X  assembling  X  obligation.

As illustrated by this example, the supervisor agent is respon-sible for starting and ending the audit stages. Similarly, the auditor agent gathers the information provided by subordinated agents to analyze the assembly line. Thus, neither the supervisor nor the auditor must control norms. The engineer of this case study does not have to program any agent that is responsible for controlling norms since the infrastructure itself provides this functionality. This is simple case study in which a small number of agents participate. However, in a real example of an assembly line there may be a large and changeable number of agents depending on the number of products, sub-assemblies, compo-nents and raw materials ( Caridi and Sianesi, 2000 ). This type of dynamic and complex applications requires efficient platforms capable of adapting dynamically to different scale MAS. As a response to this need, MaNEA has been proposed for controlling norms in an effective way allowing open MAS to be executed in
Magentix2. 6. Evaluation
Bringing agent technology to real domains such as industry or business entails the development of efficient platforms and infrastructures capable of engin eering open distributed systems.
Efficiency is one of the main requirements that have motivated the design of MaNEA. To this goal, MaNEA is based on a tracing service, which has been implemented following a publish/subscribe  X  metaphor. Traditionally, Norm-Enforcing Architectures have been built using overhearing approaches. Overhearing is defined as an indirect interaction whereby an agent receives information for which it is not addressee ( Kaminka et al., 2002 ; Legras and Tessier, 2003 ). In this section the MaNEA proposal is evaluated theoretically and experimentally in order to illustrate its perfor-mance 6 with respect to these overhearing approaches. Specifically, MaNEA is compared with two other proposals on norm enforcement that provide similar functionaliti es: Cardoso and Oliveira X  approach, and Modgil et al. framework ( Modgil et al., 2009 ). Other proposals, such as ORA4MAS, 7 have been not selected since they do not provide many of the functionalities provided by MaNEA.
Cardoso and Oliveira X  approach is a centralized overhearing approach (or centralized approach for short) to control norms in VOs. In Cardoso and Oliveira X  approach there is a centralized entity (known as norm environment ) that receives information about all the messages exchanged by agents. This entity considers these messages together with the norms to determine if any agent has violated or fulfilled a norm. The norm environment has been implemented as a rule system in Jess. 8 Thus, the enforcement of norms is carried out by a single rule engine, which implies a limitation on the scalability of this approach (i.e., if the number of agents or norms to be controlled increases drastically, the enforc ement of norms may become a bottle neck). The normative language used by Cardoso and Oliveira X  approach allows the definition of obligation norms (prohibitions can be defined as an obligation to achieve the negation of the forbidden condition) that are addr essed to a specific role (i.e., these norms also include a target). These obligations become active under certain circumstances (i.e., they allow the definition of an activation condition that can be expressed in terms of actions, messages and states of affairs). Moreover, obligation norms have a deadline that defines the validity period of the norm (i.e., the expiration condition can only be expressed in terms of time constraints). The main difference between the normative languages used Cardoso and Oliveira X  approach and MaNEA is that Cardoso and Oliveira X  language does not allow the explicit definition of sanctions and rewards in the norms. In Cardoso and Oliveira X  appr oach the sanctions (vs. rewards) are expressed as rules that are applied after the violation (vs. fulfilment) of norms by the norm environment. This proposal has been selected to evaluate the performance of MaNEA for several reasons: the normative languages used by Cardoso and Oliveira X  approach and MaNEA have a similar expressiveness; Cardoso and Oliveira X  approach also performs the automatic enforcement of norms; and it is a centralized approach, centralized approaches are supposed to require the optimum number of messages.

Modgil et al. proposal is a mixed approach that takes over-hearing and subscription approaches. In particular, the monitor subscribes to observers that report states that are relevant to norm reasoning (i.e. states that are included in the norms). All messages and actions performed by agents are reported to a set of trusted observers. A prototype of Modgil et al. proposal has been implemented in AgentSpeak ( Bordini et al., 2008 ) using Jason. The normative language used by Modgil et al. proposal allows the definition of obligation and prohibition norms that are addressed to a specific role (i.e., these norms also include a target). These norms become active under certain circumstances (i.e., they allow the definition of an activation condition that can be expressed in terms of actions, messages and states of affairs). Similarly, norms have an expiration condition. The main difference between the normative languages used Modgil et al. proposal and MaNEA is that the former does not allow the explicit definition of sanctions and rewards in the norms. Sanctions and rewards are specified as obligations that become active when norm are violated or fulfilled. As Table 1 (in Section 2.4 ) shows, the functionality provided by Modgil et al. framework is the most similar to
MaNEA; i.e., it also enforces general norms that control actions, messages and states of affairs that may occur independently.
Moreover, it also proposes a two-layer architecture for enforcing norms. Therefore, this proposal has been selected among the distributed norm-enforcing architectures to evaluate the perfor-mance of MaNEA with respect to the number of messages exchanged due to norm enforcement.

The norm languages used by Cardoso and Oliveira X  approach and Modgil et al. proposal do not include sanctions and rewards in the norm definition. Specifically, sanctions and rewards are defined in terms of enforcement rules or norms that are applied when norms are violated and fulfilled, respectively. To avoid that differences on the expressiveness of the norm languages influence the comparison between MaNEA and these two proposals, we assume that in Cardoso and Oliveira X  approach and Modgil et al. proposal any norm has enforcement rules or norms for defining both sanctions and rewards. We also assume that these enforce-ment rules or norms are automatically applied by the norm environment, in case of Cardoso and Oliveira X  approach; or the norm monitors, in case of Modgil et al. proposal. Finally, we assume that Cardoso and Oliveira X  language allows the definition of the expiration condition not only in terms of time constraints but also in terms of states of affairs. 6.1. Theoretical results
Neither Cardoso and Oliveira X  approach nor Modgil et al. proposal provide detailed information about the interaction pro-tocols followed by agents and the enforcing entities (i.e., norm environment, monitors and observers). However, the two propo-sals provide information about the algorithms executed by each one of the enforcing entities. Our comparison is based on the number of messages that are exchanged in each of the proposal, and this number is obtained from an analysis of these algorithms.
Let us consider a general scenario in which we have a set of agents ( A ) that interact over the course of I iterations. In each iteration, each agent performs one action. Each agent plays one or more roles. For simplicity we make the following assumptions: (i) we do not take into account the fact that agents may play different roles during their execution; (ii) each agent is randomly assigned to a set of roles in each execution; (iii) this scenario is controlled by a set of norms; and (iv) norms are not changed at runtime; i.e., we assume that there is a set of norms ( N  X f n 1 , ... , n j g ) that remains static. 6.1.1. Cardoso and Oliveira
In Cardoso and Oliveira X  approach ( Cardoso and Oliveira, 2007 ) agents report all messages that they sent to a single entity, which will be named agent C , which is responsible for norm enforce-ment. For simplicity, we assume that agents also report all actions that they perform to C . This entity processes the reporting messages together with the norms to infer norm violations and fulfilments.

To determine the sequence and number of messages that are exchanged in this approach, let us start with a simple example depicted in Fig. 10 . This figure illustrates the message exchange
Agents A 1, A 2, A 3and A 4 are domain agents. We consider the case in which C is only responsible for monitoring an obligation norm activates the norm ( Fig. 10 message action ( A )) then the norm is agents A 3and A 4 are playing that role so that they are under the influence of this norm and two powers are created for controlling these agents ( / id 00 , O , T 00 , E 00 , C 00 , , , W 00 the obliged action, it sends a reposting message to agent C ( Fig. 10 agent A 3. Finally, when agent A 1 performs the expiration action sanction ), since this agent has not complied with the norm. At any step agent C receives messages that are not related to norms. These other messages report all the actions that have been performed by agents (e.g., the message reporting action X 1 in Fig. 10 ). are exchanged for controlling norms in Cardoso and Oliveira X  proposal is:
Thus, the number of messages required for controlling a single norm n when a set of agents ( A ) interact along I iterations is: where y n V and y n F are the number of times that a norm has been violated or fulfilled, respectively . The total number of messages that are required for controlling a set of norms N  X  N  X f n 1 , ... , n  X  9 A 9 I  X  X  6.1.2. Modgil et al.

In the case of the proposal of Modgil et al., agents report to observers all the actions that they perform, as in case of the centralized approach. However, observers only report information to monitors when the information is relevant to the activation, expiration, violation or fulfilment of norms. Therefore, the num-ber of messages that is required for controlling norms depends on the number of times that observers report information to monitors. To illustrate the messages that are necessary for controlling norms, we start with a simple example that is shown in Fig. 11 . This figure illustrates the message exchange among a norm monitoring. M and O are the monitor and observer agents, respectively. Agents A 1, A 2, A 3 and A 4 are domain agents. Again, we will consider the case in which M is responsible for monitor-ing the same obligation norm ( / id , O , T , A , E , C , , to the observer entrusted with reporting on the states of interest identified by the norm ( A , E , C ). When agent A 2 reports to the observer that it has performed the action that activates the norm, it sends the event that indicates that the norm is active ( Fig. 11 message action ( A )). Then O sends this information to M and the norm is instantiated ( / id 0 , O , T 0 , E 0 , C 0 , , S M controls all agents that are under the influence of the norm.
Again, agents A 3 and A 4 are affected by the norm; i.e., two powers are created ( / id 00 , O , T 00 , E 00 , C 00 , , , W 00  X  E  X  X  E 000 ) and O informs agent M about it. However, E 000 does not match the expiration condition of the instance (i.e., E 000 the instance does not expire. When agent A 3 performs the obliged action, then it sends a reporting message to O ( Fig. 11 message
As previously mentioned, in case of norm violations and fulfil-ment the monitor takes remedial actions accordingly. In this experiment we have assumed that these remedial actions consist in sending sanctioning and rewarding actions. Thus, M rewards agent A 3. Finally, when agent A 1 performs the expiration action tion to M. M is aware of the expiration of the obligation instance and sanctions A 4( Fig. 11 message sanction ).

As illustrated by this example, the number of messages that are exchanged in Modgil et al. framework is:
Initialization. Agent M must subscribe to the observers that inform about the states of interest specified by the norm. Therefore, 3 messages are sent in the initialization step.
Activation. When a norm is activated 1 message is sent by an observer to the monitor.

Expiration. Every time that an observer detects that the expiration condition ( E ) of a norm has been instantiated it sends 1 message to the monitor. If the instantiation is equal to the expiration condition of an instance ( E 0 ) then this instance expires. If the instantiation is not equal to the expiration condition of any instance then all instances remain active.
Fulfilment. Every time that an observer detects that an agent has performed an action that is an instantiation, or the norm condition ( C ), then it sends one message to the monitor. If the instantiation is equal to the norm condition of an instance ( C 0 ) and the agent that has performed the action is under the influence of the instance (i.e., it plays the target role) then the instance has been fulfilled. In this case, agent M sends 1 rewarding message. On the contrary, if the instantiation is different from C 00 or the agent is not under the influence of the instance then the instance remains unfulfilled.

Violation. When an agent violates a norm, then 1 message is sent for sanctioning the offender agent.

Reporting. All actions that are performed by agents are reported to observers. Therefore, the observer agent receives 1 reporting message for each action that has been performed. Thus, the number of messages required for controlling a single norm n when a set of agents ( A ) interact along I iterations is: |{z} where y n A , y n E and y n C are the number of times that an observer detects that an instantiation of the activation, the expiration of the norm condition of a given norm holds, respectively. y are the number of times that a norm has been violated or fulfilled, respectively. The total number of messages that are required for controlling a set of norms  X  N  X f n 1 , ... , n j g X  is:  X  9
A 9 I  X  X  X j 6.1.3. MaNEA
In MaNEA, the number of messages exchanged depends on the number of actions that are relevant to the activation, expiration and fulfilment of norms. To illustrate the exchange of messages that occurs in MaNEA we also use a simple example that is shown in Fig. 12 . This figure illustrates the message exchange among a set of agents {NM, NE, TM, A 1, A 2, A 3, A 4} along the different stages of norm monitoring. NM, NE and TM are the Norm
Manager, Norm Enforcer and Trace Manager. Agents A 1, A 2, A 3 and A 4 are domain agents. Again, we consider the case in which
MaNEA is only responsible for monitoring the same obligation norm ( / id , O , T , A , E , C , , S ). Thus, the NM subscribes to the activation event of this norm ( Fig. 12 message subscription ( A )).
When agent A 2 sends the event that indicates that the norm is active ( Fig. 12 message event ( A )) then the norm is instantiated event ( Fig. 12 message subscription  X  E 0  X  ). Moreover, the NM sends a message to the NE for informing about the creation of a new instance ( Fig. 12 message instanceActivation ). Again, agents A 3 and A 4 are under the influence of the norm and two powers are sages to the TM for subscribing to the events sent by A 3 and A 4 that inform about the fulfilment of the norm ( Fig. 12 messages forms the obliged action, then it sends a message to the NE ( Fig. 12 message event  X  C 00  X  ). Then the norm has been fulfilled and the NE rewards agent A 3 and unsubscribes from event C 00 .

Aspreviously mentioned, the NE sends an event for informing all subscribed agents about the fulfilment of a norm. Here, we will assume that only one event is sent for rewarding the agent that has complied with the norm, as occurs in the other two proposals.
Finally, when agent A 2 sends the expiration event ( Fig. 12 messages event  X  E 0  X  ), then the NM unsubscribes from this event and sends an instanceExpiration event to the NE. The NE unsub-scribes from those events that are pending ( Fig. 12 message since this agent has not complied with the norm.
 for controlling norms in MaNEA is:
The total number of messages required in MaNEA for controlling a single norm n : where y n E 0 is the number of times that instances of a given norm n have expired. y n A , y n F and y n V are the number of times that an observer detects that an instantiation of the activation holds, the number of times that a norm has been fulfilled, and the number of times that a norm has been violated, respectively.
 by a set of norms  X  N  X f n 1 , ... , n j g X  the number of messages exchanged is: several factors such as: the number of times that norms are activated, expired violated and fulfilled. As far as we know, there is not any work that analyses the occurrence of norm activations, expirations, fulfilments, violations and the number of agents that are affected by norms in average. In order to compare empirically the three proposals, we have developed a set of experiments that are described below. 6.2. Experimental results
As explained before, neither Cardoso and Oliveira X  approach nor Modgil et al. proposal provide detailed information about the interaction protocols followed by agents and the enforcing enti-ties. Moreover, implementations of these two proposals are not available and we cannot evaluate the performance of the imple-mentations of these other proposals. However, to compare the number of messages exchanged by each proposal we have implemented a simulator that computes the number of messages that are required to control norms. This simulator implements the enforcing algorithms specified by Cardoso and Oliveira X  approach and Modgil et al. proposal. Thus, the results presented in this section are not affected by the interaction protocols used in each proposal (regardless of the interaction protocol being used this will finally imply a specific number of messages exchanged).
In this section we describe the set of simulations that we carried out to experimentally evaluate the performance of MaNEA with respect to Cardoso and Oliveira X  approach and Modgil et al. framework. We compute the number of messages that is required for controlling norms in each approach. Therefore, we compare the number of messages that are sent on average in each one of the three proposals. 6.2.1. Simulation description We considered a scenario with the parameters that we sum up in
Table 2 . Each simulation is populated by 100 agents. Agents enact one or more roles randomly in each simulation. Specifically, 10 different roles have been considered. In order to specify the desired behaviour of these roles, 20 norms are created in each simulation.
Each norm is also randomly assigned to a single role, which is the target of the norm. As previously mentioned, norms are defined in terms of three conditions, which correspond to the activation, expiration and normative condition (i.e., A , E and C ). We assume that these conditions are expressed in terms of actions that agents perform or events that inform about the performance of actions (in case of MaNEA). Specifically, we consider that agents are able to carry out 100 different actions. Thus, in each simulation the activation, expiration and normative condition of each norm are defined as actions that are randomly selected from this set of 100 actions. Therefore, there are 60 ( i.e. ,20 n 3) actions (or normative actions ) that are selected randomly from a set of 100 actions (60% of the actions have normative consequences).

Each simulation is executed during 100 iterations. Each agent performs one action in each iteration. All agents have the same acting capabilities. Thus, they are able to perform any of the 100 actions. Each action can be performed (i.e., instantiated) in 10 different ways. Since MaNEA is aimed to control open MAS, which are populated by heterogeneous agents; we do not want to make any assumption about the agents X  capabilities to reason about norms and goals. Thus, in each iteration each agent executes an action that is randomly selected from the 1000 concrete actions (these concrete actions correspond to the 10 ways in which each one of the 100 actions can be instantiated). 10 These actions may be or not relevant to the activation, expiration, violation or fulfilment of norms. Thus, the performance of actions may be reported or not, which may entail the exchange of more mes-sages, depending on the specific features of each norm-enforcing approach. In each iteration, we simulate the exchange of mes-sages that occurs in the three proposals (i.e., MaNEA, Cardoso and Oliveira X  approach and Modgil et al. framework) due to norm enforcement. With this information, we compute the number of messages that is required for controlling norms by each approach in the whole simulation.

We have performed six different experiments to illustrate the number of messages with respect to: the number of iterations; the number of actions; the number of norms; the number of instantiations; the number of agents; and the number of roles. In the experiments the values of the parameters range as indicated by the Experimentation Interval column in Table 2 . The results of these experiments are described below. 6.2.2. Number of iterations
Fig. 13 illustrates the number of messages that are sent to control norms with respect to the number of iterations that the scenario is executed. As the results show, in the three proposals the number of messages increases linearly with the number of iterations. When the number of iterations increases, more actions are executed and more actions must be reported. As one could expect, in the proposals in which all actions are reported (i.e., Cardoso and Oliveira X  and Modgil et al. frameworks) the line has a higher slope. The number of messages in Modgil et al. framework is slightly higher than Cardoso and Oliveira X  approach. 11 over, as the number of iterations increase more actions are performed and there are more probabilities of agents performing any of the 60 normative actions. As mentioned before, these normative actions may cause the activation, expiration, fulfilment and violation of norms. 12 As the theoretical results illustrate, these situations determine the number of messages that are sent in the three proposals. As a consequence, in MaNEA the number of messages also increases as the interactions increase. We can conclude that MaNEA performs better tha n the other two proposals in the conditions of this experiment. In the rest of the experiments we only show the results that are obtained with 100 iterations. However, there are not significant differences among the results obtained when the number of iterations changes. 6.2.3. Number of actions
Fig. 14 illustrates the performance of the three proposals with respect to the number of actions that can be executed by agents.
As the number of actions increases the performance of MaNEA gets better than the other two proposals. This is explained by the fact that if there are more actions that can be performed by agents, the probability of agents performing normative actions is lower. 13 For a number of actions higher than 60, the performance of MaNEA is better than Cardoso and Oliveira X  approach and
Modgil et al. framework. This can be considered as a good result since there are 20 norms and, as a consequence, there are 60 normative actions. When the number of actions is less than 60 all of them are normative. Thus, all of the actions that can be performed by agents are controlled by norms and it is better to use an overhearing approach or, even better, a regimentation framework such as an EI. This also means that MaNEA performs worse when MAS are over-regulated. 6.2.4. Number of norms
Fig. 15 illustrates the performance of the three proposals with respect to the number of norms. In this experiment, the number of actions increases linearly with the number of norms to maintain the ratio between the number of norms and actions.
In the three proposals, the number of messages that are sent remains quite stable regardless of the number of norms. In light of these results, we can conclude that MaNEA performs better than
Modgil et al. framework and Cardoso and Oliveira X  approach regardless of the number of norms that are controlled. 6.2.5. Number of instantiations respect to the number of ways in which each action can be instantiated. As the number of instantiations increases the per-formance of MaNEA gets better than the other two proposals.
Thus it is more scalable for an increasing number of instantia-tions. If actions can be instantiated in more ways, the probability of an agent performing the concrete instance that causes the fulfilment, violation or expiration of an instance is lower. number of instantiations higher than 7 the performance of
MaNEA is better than Cardoso and Oliveira X  approach and Modgil et al. frameworks. This can be considered as a good result since there are 100 agents and it seems reasonable that these 100 agents are able to execute each action in seven different ways. 6.2.6. Number of agents respect to the number of agents. In this experiment, the number of instantiations also increases linearly with the number of agents to maintain the ratio between the number of agents and instantiations. It makes sense to assume that if there are more agents, there will be more different kinds of agents that will be able to execute actions in more different ways. In the three proposals the number of messages increases linearly with the number of agents; which is consistent with the theoretical results. If there are more agents, there are more actions to be reported. 16 Moreover, as the number of agents increases more actions are performed and there are more possibilities of agents performing any of the normative actions. 17 In light of these results we can conclude that the MaNEA performs better than
Cardoso and Oliveira X  approach and Modgil et al. frameworks regardless of the number of agents. 6.2.7. Number of roles
Fig. 18 illustrates the performance of the three proposals with respect to the number of roles. In the three proposals, as the number of roles increases, fewer messages are sent. Reasons behind this decrement are related to the fact that if there is a higher number of roles, each role will be affected by fewer norms.
The target of any norm is defined as a role that is randomly selected from the set of roles. Thus, the more roles, the less probability of roles being selected as targets. Similarly, the more roles, the less probability of agents enacting a specific role. consequence, fewer agents will enact the target roles and fewer agents will be under the influence of norms. Therefore, there is a lower probability of norm fulfilment and violation. 19 For a number of roles higher than 3, which seems reasonable consider-ing the number of agents and norms, MaNEA performs better than Modgil et al. framework.

In general, the performance of MaNEA, which has been measured in terms of the number of messages, is better than centralized and distributed proposals with the same capabilities. MaNEA uses trace event system based on a publish/subscription procedure. In light of the results described above, we have demonstrated that under certain circumstances the use of a tracing service implies an outstanding reduction of the number of messages exchanged for controlling norms. 7. Conclusions and future works
In this paper, we have described a Norm-Enforcing Architec-ture (MaNEA) that has been developed considering the facilities provided by the Magentix2 platform. The main aim of MaNEA is to overcome problems of existing proposals on norm enforce-ment. MaNEA enforces norms providing support to those agents that are not endowed with normative reasoning capabilities. In addition, the generation of events for informing about sanctions and rewards allows norm-aware agents to use this information for selecting the most suitable interaction partners. MaNEA provides support to norm evaluation according to dynamic situa-tions; i.e., the norms and instances can be created or deleted on-line. Moreover, MaNEA is endowed with mechanisms to control the dynamic enactment of roles. Finally, MaNEA is built upon a trace event system, which provides support for indirect commu-nication in a more efficient way than overhearing approaches. In general situations, the use of a tracing service reduces the number of messages required to control norms. Besides that, MaNEA can dynamically adapt to changes in the scale MAS (i.e., situations in which the number of agents or norms to be controlled changes dramatically) by performing cloning and self-deletion operations.
As future work, we plan to deal with complex scenarios in which there are norms whose violation cannot be directly observed, since they regulate situations that take place out of the institution boundaries. Or even more, norms can be inter-preted ambiguously. This entails the development of intelligent and proactive norm-enforcer entities (i.e., agents) ( Criado et al., 2011c ) endowed with capabilities for applying techniques such as negotiation or conflict resolution procedures.
 Acknowledgement
We acknowledge ITMAS 2011 as the forum in which the main ideas behind this paper were preliminary discussed. This paper was partially funded by the Spanish government under projects CONSOLIDER-INGENIO 2010 CSD2007-00022, TIN2009-13839-C03-01, TIN2012-36586-C03-01 and by the FPU grant AP-2007-01256 awarded to N.Criado. This research has also been partially funded by the Generalitat de Catalunya under the grant 2009-SGR-1434.
 References
