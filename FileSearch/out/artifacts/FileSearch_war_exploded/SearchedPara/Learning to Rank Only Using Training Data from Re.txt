 Like traditional supervised and semi-supervised algorithms, learn-ing to rank for information retrieval requires document annotations provided by domain experts. It is costly to annotate training data for different search domains and tasks. We propose to exploit train-ing data annotated for a related domain to learn to rank retrieved documents in the target domain, in which no labeled data is avail-able. We present a simple yet effective approach based on instance-weighting scheme. Our method first estimates the importance of each related-domain document relative to the target domain. Then heuristics are studied to transform the importance of individual documents to the pairwise weights of document pairs, which can be directly incorporated into the popular ranking algorithms. Due to importance weighting, ranking model trained on related domain is highly adaptable to the data of target domain. Ranking adaptation experiments on LETOR3.0 dataset [27] demonstrate that with a fair amount of related-domain training data, our method significantly outperforms the baseline without weighting, and most of time is not significantly worse than an  X  X deal X  model directly trained on target domain.
 H.3.3 [ Information Storage and Retrieval ]: Information Storage and Retrieval  X  Retrieval models Algorithms, Experimentation instance weighting, related domain, learning to rank, domain adap-tation, RankSVM, RankNet  X  This work was done when the author was visiting the Chinese University of Hong Kong
Ranking in information retrieval (IR) aims to order retrieved doc-uments according to their relevance to a given query. In recent years, learning-based ranking algorithms, known as learning to rank, were extensively studied in IR related communities [5, 6, 15, 18, 35]. Compared to the traditional approaches, such as vector space model [30], BM25 [29] and language-modeling method [26, 37], learning to rank aims to optimize a ranking function that incorpo-rates a wide variety of relevance features and avoid tuning a large number of parameters empirically.

Like supervised algorithms, learning to rank requires large train-ing sets annotated for the specific domain where search tasks are performed, for which much effort should be made by domain ex-perts. For example, building a medical search engine needs experts and labeling standard different from what a musical search engine does; in TREC X  X  Web track [11], named page finding and topic distillation are different tasks, and separate sets of queries and rele-vance judgements have to be prepared. It is prohibitive to annotate documents for each search domain, especially when fast deploy-ment of a ranking model is demanded.

A promising direction for solving this predicament is to trans-fer ranking knowledge from the training data of a related domain to the target domain, where only a few or no labeled data is avail-able 1 . Since common information may exist between two domains, we can expect to reuse the training data to derive a ranking model for the target domain considering this kind of commonality. How-ever, due to the different joint distributions of feature and relevance, ranking model directly trained on the related domain generally can-not perform well when tested in target domain.

Cross-domain adaptation has been well studied for classification in nature language processing [4, 12, 21] and machine learning [2, 3, 13]. Although the similar intuition can be applied in ranking adaptation, the fundamental distinctions between ranking and clas-sification need to be considered in algorithm design. In ranking, the main concern is the preference order of two documents or the full order of a list of documents. It is difficult to directly apply classifier adaptation for ranking [14, 17].

Recently, ranking adaptation was received more and more atten-tion [7, 8, 10, 16, 17]. Existing approaches assume a small amount of training data in target domain, which plays an important role in transferring ranking knowledge across domains. However, a small set of labeled data of target domain can only convey limited rank-
Throughout this paper, target domain refers to the domain where the search and ranking is performed, and related domain refers to a domain where large training sets are available for learning a rank-ing model. Related domain was also called source domain in the literature. ing knowledge, and other useful information not contained in them can be important but is ignored.

In this paper, we assume a more general scenario where no la-beled data but a large number of unlabeled data are available with target domain. We propose to learn a target ranking model by only using related-domain training data that are weighted appro-priately with the aid of unlabeled data in target domain. A sim-ple yet effective instance-weighting framework is created that con-sists of two steps: (1) we estimate the importance of each related-domain document to the target domain; (2) heuristic schemes are explored to transform the document importance to the weights of document pairs that can be directly incorporated into the popular pairwise ranking algorithms. Due to importance weighting, the ranking function trained on the related-domain data can be highly adaptable to the data in target domain.

The remainder of the paper is organized as follows: Related work are given in Section 2; Section 3 reviews general ranking framework; Section 4 analyzes the problem in ranking across do-mains; Section 5 presents our importance weighting on documents for ranking adaptation; Experiments and results are discussed in Section 6; Finally, we conclude in Section 7.
Learning to rank is to optimize a ranking function given data consisting of queries, the retrieved documents and their relevance judgements. Given a new query, the learned function is used to predict the order of retrieved documents. Based on input spaces, three categories of approaches have been proposed, namely point-wise, pairwise and listwise approach. Probabilistic classification and metric regression are typically used in pointwise approach. Popular ranking models like Ranking SVM [18], RankBoost [15], RankNet [5], etc., aim to optimize pairwise loss based on order preference and classify the relevance order between two documents, thus falling into the pairwise approach. Listwise approach [6, 35] considers the entire group of documents associated with the same query in the input space. A comprehensive survey on learning to rank is given in [23].

Domain adaptation was originally to address the classification problems where training data and test data do not follow the same distribution. Existing approaches can be grouped into two direc-tions, namely instance-based and feature-based approaches. The former assumes the same feature space between two domains and attempts to estimate the weights of individual examples in the re-lated domain, which measures their importance to the target do-main [19, 21, 36]. The latter tries to infer some common feature representation to bridge the gap between data distributions of two domains, which is regarded as feature weighting scheme [2, 4, 12, 24]. Our method falls into instance-weighting approach.
Existing ranking adaption methods assume a large set of train-ing data in related domain and a small amount of labeled data in target domain. A tree-based adaptation algorithm was proposed by [10]. Gradient Boosting Tree (GBT) was first used to train a ranking model on the related domain. The tree structure was then adjusted with the labeled data in target domain. TransRank [8] pro-posed to extract k -best adaptive queries in related domain used for training with the help of labeled data in target domain. Based on the same assumption of available target-domain labels, [7] presented methods for feature-level as well as instance-level adaptation. [17] treated the model parameters learned from related domain as prior knowledge, and the similarity of parameters between two domains is considered when training on target domain. [16] used model interpolation and error-driven approaches for ranking adaptation, where ranking model was trained on target domain and then com-bined with a background model learned on the related domain. [34] studied ranking adaptation in heterogeneous domains. [9, 17] pro-posed ranking adaptability and domain similarity measures. Dif-ferent from these methods, no labeled data is assumed available in the target domain for our study.

Ranking model training with test data can be thought of as a semi-supervised learning that treats separate domains like the same domain [14, 22]. In these methods, training must be done online once new test data come in, and this is inefficient for web search ranking. In contrast, our training is off-line since test data are not seen at training time.
Typical training data for learning a ranking model is a set of input-output pairs ( x, y ) ,where x is a feature vector containing relevance scores of a query-document pair, and y is the rank la-bel for the document (e.g., relevance or irrelevant). The features commonly include query-dependent relevance measures such as term frequency and BM25, and query-independent measures such as PageRank. The objective is to optimize a scoring function f ( x ) that maps x to a real value that indicates the ranking score of the document given the query. If f ( x i ) &gt;f ( x j ) for documents d d ,then d i should be ranked higher than d j , denoted as d Our method is based on pairwise approach, although it can be eas-ily generalized to other approaches.

Pairwise algorithms, such as RankSVM [18] and RankNet [5], aim to minimize a loss based on the preference order of each pair of documents. RankSVM minimizes the number of discordant pairs and maximizes the margin of pair, which is equal to minimize the L 2 norm of the model f  X  X  hyperplane parameter and a Hinge Loss on pairs: where z ij = pending on the ground truth of two documents, ( . ) + is the pairwise hinge loss function,  X  is the coefficient of trade-off between model complexity and loss term, and is the number of documents of the query.

At high level, RankNet differs from RankSVM in that it mini-mizes a loss function based on cross entropy that models the poste-rior probabilities of rank order [5], which has the following form: L ( P ij ,  X  P ij )  X  X  X   X  P ij log P ij  X  (1  X   X  P ij )log(1 entropy loss of a pair ( d i ,d j ) ,where P ij is the posterior P ( d d ) ,and  X  P ij is the desired target values for the posteriors and takes one of three values { 0 , 0 . 5 , 1 } depending on the ground truth which includes the ties (documents with the same labels). P ij is mapped from outputs of f using a logistic function: P ij  X  e o ij o ij = f ( x i )  X  f ( x j ) .

As compared to RankSVM, RankNet usually does not consider kernel and its loss function is pairwise differentiable. Thus, gradient-based optimizer can be used. Also, RankNet is modeled as a two-layer neural network, where input and hidden nodes correspond to features and their combinations. In theory, it can capture any nonlinear correlations among features. RankBoost [15] is another typical pairwise algorithm, for which we do not give the details, as it is similar for our method to apply (see Section 5). Figure 1: Ranking directions of RankSVM on name page (NP) and topic distillation (T D) queries in TREC-2003. Figure 2: Ranking errors are made for TD query #18 when applying NP model to TD task.
Document distributions, i.e., the joint distribution of features and relevance of documents, are commonly different between domains. This is caused by many reasons such as different languages, coun-tries and topics [10]. Therefore, ranking model directly trained on one domain may not perform well on the other. Figure 1 and 2 il-lustrate this predicament of cross-domain ranking using RankSVM on two of TREC X  X  2003 Web track tasks, namely named page find-ing (NP) and topic distillation (TD) [11] (Section 6 gives details of the tasks). To plot the figures, we conducted principle component analysis (PCA) on this TREC collection that was released through LETOR3.0 [27] for learning to rank study 2 . Widely used in multi-variate analysis, PCA computes a linear combination of features to extract patterns and reduce the dimensionality of data. The goal is to find the direction, known as the principal axis, along which the most variance of the patterns in the data set is captured. The pro-jection of a data point on the principal axis is called the principal component.

Let the horizontal axis and vertical axis represent the first and second principle axes, respectively, and let the blue circles (and red stars) denote relevant documents and the gray squares denote irrel-http://research.microsoft.com/en-us/um/ beijing/projects/letor/ evant ones. The arrowed line in each figure is the ranking direction of RankSVM learned for the corresponding task. As shown in Fig-ure 1(a) and 1(b), documents for NP and TD queries follow differ-ent distributions in this two-dimensional PCA space even though they share the same original feat ure space. Their ranking direc-tions are clearly divergent, which means that when a model trained on one domain is blindly applied to the other domain (moving the two arrowed lines into the same space), projecting documents onto the ranking directions may result in very different orders as com-pared to the ground truth. This problem is revealed more clearly by Figure 2, where the four documents of TD query #18 are ranked as d 4 d 2 d 1 d 3 using the TD model (which is correct as the relevant document d 4 should be placed ahead of others), whereas NP model gives the incorrect order d 1 d 2 d 3 d 4 .There-fore, the learned NP model can hardly be applied to TD domain directly, and vice versa.
An intuition of ranking adaptation is to tune the ranking direc-tion of related domain to that of target domain as closely as possi-ble. In practice, however, since the data of target domain are not labeled, the target ranking direction cannot be obtained. Our idea is to make use of unlabeled data of target domain for weighting training instances in the related domain so that the knowledge of relevance judgement can be strengthened on those documents that are similar to the target domain. As a result, the learning can be focused on giving better ranking for these important documents. It can be expected that the model trained in this way will work well on ranking actual target-domain documents. To this end, it is critical to measure the extent to which the instances are similar across two domains. The similarity indicates the importance of an instance that can be related to the target domain.
Suppose the importance of instances is appropriately weighted in the related domain, we can extend the ranking algorithms described in Section 3 by incorporating the weights into their loss functions. The rationale is that the loss on important instances should be pe-nalized more heavily once ranking errors are made on these docu-ments. Weighting can be developed corresponding to the levels of instance. Pairwise models take document pairs as instances. Thus, the weighting should be made compatible with the pairwise loss.
Let IW ( x i ,x j ) be pairwise importance weight for ( d objective function can be extended for adaptation as follows: where L ij ( . ) is the loss function on pairs that takes the forms like Equations 1 and 2. Note that this scheme can be similarly ap-plied to other pairwise models such as RankBoost. Overall, adapta-tion training consists of two key steps: (1) instance weighting; (2) weight-based model training.

However, it is difficult to estimate the importance of pairs in related domain without labeled data in target domain. This is be-cause document pairs are constructed from preference orders based on ground truth. When rank labels are not provided, one has to enumerate all possible pairs. This may produce tremendous noises rendering weight estimation unreliable as most of the pairs are not meaningful for ranking. Weighting individual documents is intu-itively more straightforward. Then we can try to derive pairwise weights from document weights. Figure 3: A classification hyperplane can be built between D and D t to measure the extent, to which query-document in-stance in the related domain is similar to the target domain.
Despite that target-domain data are not labeled, the relevance features of documents for the ranking purpose are readily available to us. These features may not only reflect document X  X  relevancy, but also encode the correlation or similarity of documents in differ-ent domains, which conceals som e important cross-domain com-monalities. For example, many query-independent features that are not focused on query-document relevancy, such as document length, link structure, anchor text, etc., may express some impor-tant intrinsic properties of documents. Their discriminative nature is expected to correlate the similar documents across domains and differentiate those that are not similar.

We model document weighting as a classification problem based on the relevance features and the source of domains the document come from. Figure 3 explains this intuition. Given document sets D r and D t that denote respectively the related and target domain, we build a classification hyperplane H rt to separate D r If a D r example is similar to a large number of D t examples, it should be close to H rt . Hence, we can measure the importance of a related-domain document using its distance to the hyperplane. In practice, the probability that a document in the related domain may be classified into the target domain is adopted.
 Algorithm 1 Weight estimation for training documents in related domain 4: for i =1 ; i  X  m ; i ++ do 8: end for 9: return IW ;
Algorithm 1 estimates the probability that each x i r can be clas-sified into D t , denoted as P ( x i r  X  D t | q r ) , indicating the impor-tance of x i r given a related-domain query q r . In step 1-2, the algo-rithm constructs a training corpus using  X  1 , the source of domain, as class label. Then it solves the hyperplane that separates the two domains. For each related-domain document, its distance to the hy-perplane is calculated in step 6. A sigmoid function is employed to transform the distance into a posterior probability [25], for which free parameters  X  and  X  can be determined by cross-validation or hold-out method. Note that the p robability is conditional as each document is in the search result of the given query.
Document weights obtained above can be easily integrated into pointwise ranking algorithms. But they cannot be used directly in pairwise algorithms that are generally more effective. Here we ad-dress how to transform document weighting to pairwise weighting.
The weight of a pair of documents in related domain can be ap-proximated using the marginal probability of each document in that pair. For a document pair x i r ,x j r of a query q r from related do-main, we can reasonably assume that P ( x i r  X  D t | q r dent of P ( x j r  X  D t | q r ) . Thus, the conditional joint probability P ( x i r ,x j r  X  D t | q r ) can be calculated straightforwardly based on this independence assumption: where w i r ,j r | q r denotes the pairwise weight given q directly applied to substitute the importance weight in Equation 3.
Document weighting and pairwise weighting do not explicitly measure the importance of individual queries. Ranking algorithms constrain the instances to be learned in the range of queries. It is thus reasonable to take into account how likely each query is related to the target domain. If a query is not similar to the type of queries across domains, its retrieved documents should be weighted with lower values accordingly. This aims to generate a model that favors important queries.

We estimate query importance based on the weighting of doc-ument pairs considering the compatibility with the pairwise loss. Assuming that the occurrence of document pairs are independent events given a query, query importance can be estimated as the mean value of the importance probabilities of all available pairs, which is formulated as follows: where M denotes the number of document pairs in query q r can be derived from the ground truth.

When applied to pairwise ranking algorithms, Equation 5 can simply substitute the importance weight in Equation 3.
If we regard ranking across the related and target domains as a two-step procedure, Equations 4 and 5 can be combined in a prin-cipled way so that different weighting schemes naturally become complementary to each other since they reflect the degree of cross-domain similarity from different perspectives. The first step is to select an important query that is similar to the target domain, and with this condition, the second step is to choose a pair of impor-tant documents from the search result of this query. This process is modeled as follows by the probability P ( q r ,x i r ,x j
The advantage of the combined weighting scheme above lies in the scaling effect of query weight that influences pairwise weight Algorithm 2 Weight-based adaptive ranking model training 8: return f ; in two aspects: (1) if many document pairs of query q r have high weight values, then P ( q r  X  D t ) should be also high. The scaling tends to strengthen the importance of x i r ,x j r ; (2) if many pairs are weighted low and only a few pairs high, the scaling can lower down the importance of these a few pairs that may be outliers.
Algorithm 2 summarizes our overall framework, which contains two key components, i.e., instance weighting and weight-based model training.

Instance weighting is done by steps 1-5. Steps 6 and 7 perform weight-based model training and selection. Note that D r is split into two parts in step 4, where D r 1 is used for weight-based train-ing and D r 2 is for weight-based model selection (validation). With no labeled data in target domain, models can be validated only us-ing labeled data in related domain. In step 7, we select the model f that produces minimum weighted loss on D r 2 , where the loss is weighted with IW K r 2 . Including weights makes model selec-tion more meaningful because the best performance on D r 2 out considering the weights may not generalize well to the target domain. Weight-based validation can select the best model biased towards those highly weighted instances, and thus can adapt better to the target domain.

We use the data in target domain, which are unseen during train-ing, to evaluate this framework. Thus, our method falls into induc-tive learning [32]. This is an important difference of our method from transductive and semi-supervised adaptation [1, 14] where test data can can be seen during training. We evaluated the proposed framework on TREC-2003 and 2004 Web track datasets, which were released through LETOR3.0 bench-mark collection for learning to rank research [27]. Three query tasks were defined on the collection, namely topic distillation (TD), home page finding (HP) and named page finding (NP). TD is to find a list of entry points for good websites that can guide user to page collection which cover the topic. HP is to find the home page of entity such as an person or organization. NP focuses on the page which directly contains the short description of query but not en-try point to website [33]. HP and NP tasks are more similar to each other, and TD is distinct from the other two. Ranking adapta-tion takes place when a task is performed (tested) using the models trained on another task.
 There are 64 features for describing a query-document instance Table 1: The number of queries in TREC-2003 and TREC-2004 Web track (see [27]). The number of queries for different tasks are given in Table 1. Each task has three data sets, i.e., for training, validation and testing, each of which was partitioned into five folds. Since no training data in target domain is assumed in our case, we reused the date sets in the following way while maintaining the fold number unchanged: 1. All data (training, validation and test sets) in related domain 2. Related-domain data were grouped into two parts, where one 3. The test sets in target domains were always kept unseen dur-
Ranking model trained on related domain without instance weight-ing acted as baseline, denoted as no-weight . Three weight-based models, namely pair-weight , query-weight and comb-weight ,cor-responded to pairwise weighting, query weighting and their combi-nation, respectively. In addition, we randomized document weights and used Equation 4 to generate a random weighting method, de-noted as rand-weight , to testify the solidity of our probabilistic weighting as compared to the groundless random. Finally, a target-only model was trained and tested directly on target domain to pro-vide the corresponding  X  X deal X  performance for reference.
We implemented RankSVM and RankNet using the fast Stochas-tic Gradient Descent (SGD) optimizer 3 [31]. The ranking results were evaluated by averaging the performance over the five folds with cross validation. We carried out HP to NP and NP to TD ranking adaptation tasks. Typically, HP and NP are considered similar domains whereas NP and TD are largely different. Other adaptations such as NP to HP and HP to TD are duplicates of above two and omitted here. Per-formance was measured by Mean Average Precision (MAP) [28] and Normalized Discounted Cumulative Gain (NDCG) [20] at po-sitions 1,3,5 and 10. Due to space limit, NDCG is only given for RankSVM and similar trend of NDCG was achieved by RankNet.
As shown in Table 2 and Figure 4, all our three weighting meth-ods outperform the baseline ( no-weight ) based on MAP and NDCG, and comb-weight performs best among three weighting methods. T-test on MAP in Table 2 indicates that all improvements over no-weight are statistically significant ( p&lt; 0 . 03 ). This is because the Source codes will be provided upon request. Due to SGD, our RankSVM may be suboptimal and p erform a little worse than SVMLight ( http://svmlight.joachims.org ). Table 2: MAP results of HP to NP adaptation.  X  ,  X  , and boldface indicate significantly better than no-weight , pair-weight and comb-weight and rand-weight , respectively (confi-dence level=95%).
 Table 3: MAP results of NP to TD adaptation.  X  ,  X  , and boldface indicate significantly better than no-weight , pair-weight and comb-weight and rand-weight , respectively (confi-dence level=95%).
 data distributions of two domains are similar, and our method can easily capture cross-domain similarity by weighting the importance of related-domain documents. Furthermore, comb-weight is signif-icantly better than both pair-weight and query-weight on the 2003 data. On the 2004 data, although not significantly, comb-weight still outperforms pair-weight 2.78% by RankSVM and 2.72% by RankNet. Thus, weight combination is generally better than than the separate weighting of queries and document pairs.

No obvious difference can be observed between pair-weight and query-weight . The reason is that only one document is labeled as relevant for each home page query. Thus all the generated pairs contain this document, rendering the values of pairwise weight and query weight close to each other, as the query weight is simply calculated as the mean weight over all document pairs of the query.
All our probabilistic weightin g methods can always outperform random-weight significantly. This is due to the solid probability ground of our method. Interestingly, random-weight sometimes can outperform no-weight . The reason is that no-weight can be considered as the extreme case where weights are equal to 1, which assumes no difference across domains and all the related-domain documents equally important to the target domain. This is however too strong to be true. Although not stable, random-weight could be better by randomly taking into account some extent of uncertainty.
Topic distillation is fairly different from named page finding not only on task definition but also on data distribution shown as Fig-ure 1 (see Section 4). Here we examine whether ranking adaptation can be done for such two domains that are not similar. NDCG re-sults of RankSVM are presented in Figure 5. MAP results are given in Table 3 for both algorithms.

The lower MAP scores in Table 3 implies that NP to TD adap-tation is generally a harder task as compared to HP to NP. There may be less similar features, but because of this the found clas-Table 4: MAP results of 2003 NP to 2004 TD adaptation.  X  , and boldface indicate significantly better than no-weight , pair-weight and comb-weight and rand-weight , respectively (confi-dence level=95%). Table 5: For NP to TD adaptation, the number of NP training documents in different weight ranges. sification hyperplane tends to be more discriminative between the two domains. Therefore, we can still expect effective importance weighting.

On the 2003 data, weighting methods demonstrate consistent ef-fectiveness as achieved in HP to NP adaptation. T-test on MAP indicates that pair-weight and query-weight significantly outper-form no-weight ( p&lt; 0 . 02 ). Also, comb-weight significantly out-performs pair-weight as well as query-weight ( p&lt; 0 . 04 ). This implies that our adaptation method can work well for these two domains that are not similar.

On the 2004 data, however, weighting is not consistently better than no-weight and sometimes performs even worse. T-test does not indicate any statistical significance either. We analyzed the rea-son: Compared to TREC-2003 where 150 named page queries are provided, the number of named page queries in TREC-2004 is only 75 (see Table 1), rendering less amount of training data. It turns out that important documents become even less. Hence the model overfits to this small number of important instances, thus cannot adapt (generalize) well. We believe it can be improved with more named page queries provided, which is proved in the next section.
Here we examine the effectiveness across both different tasks and years. Table 4 shows that weight-based models trained with 2003 NP data significantly outperform no-weight when tested on 2004 TD task. This is because a larger number of important doc-uments can be found in NP 2003 which provides 150 name page queries. Table 5 shows statistics on the number of training doc-uments in different ranges of weights we obtained. For example, there are 33.8% more NP 2003 documents than NP 2004 for the im-portance weight range greater than 0.5 (highly important to target domain). This implies that our weight-based methods favor a fair amount of training data in the related domain for finding enough important documents to avoid overfitting.

We also studied the influence of weight-based model selection (see Algorithm 2) as compared to the selection without weights. As shown in Table 6, for no-weight selection, weight-based model training can still outperform the baseline, but is consistently worse than using the weight-based selection. This proves that weight-based selection is helpful for adaptation.

We note that RankSVM performs better than RankNet on NP to Table 6: Comparison of using and not using weight-based model selection (w. vs n./w.) in 2003 NP to 2004 TD adapta-tion.
 TD within 2004 and 2003 NP to 2004 TD, but relatively worse on other tasks. This seems to be related to the hyperplane generated by margin-based domain classifier. In easier adaptation, the weights may be less accurate since cross-domain data are more similar and may be not linearly separable. Nonlinear RankNet may generalize better in this case. In difficult adaptation where data are more sepa-rable, the weights may be more accurate for RankSVM to take the advantage of maximum margin. We will leave the influences of dif-ferent weight generation methods on different ranking algorithms for future study.
We introduced a simple yet effective instance-weighting frame-work for ranking adaptation in IR by only using training data from related domain. The basic idea is that the related-domain train-ing instances can be weighted appropriately according to their im-portance (or similarity) to the target domain. We first estimated the probability of each related-domain document that can be classi-fied into the target domain. Then three instance-weighting methods were proposed based on the document importance. After that, the ranking model was learned in such a way to minimize the weighted loss of ranking instances, so that the ranking function is biased to-wards those important document and thus can be adaptable to the target domain. Our approach was evaluated on LETOR3.0 dataset for ranking adaptation between different tasks, and we found that it significantly outperformed the baseline without weighting, and most of time was not significantly worse than the model directly trained on the target domain.

Although based on pairwise approach, our method can be gener-alized easily and combined with other learning to rank approaches. In the future, we will improve the framework from two directions: one is to investigate how different importance estimation methods can influence ranking algorithms; the other is to apply our weight-ing schemes to various ranking algorithms for ranking adaptation.
This work is partially supported by the Innovation and Technol-ogy Fund of Hong Kong SAR (No. ITS/182/08) and National 863 program (No. 2009AA 01Z150). In addition, P. Cai and A. Zhou are partially supported by an NSFC grant (No. 60925008) and 973 program (No. 2010CB731402). We would like to thank anony-mous reviewers for their helpful comments. [1] M. R. Amini, T. V. Truong, and C. Goutte. A Boosting [2] A. Argyriou, T. Evgeniou, and M. Pontil. Multi-task feature [3] S. Ben-David, J. Blitzer, K. Crammer, A. Kulesza, F. Pereira, [4] J. Blitzer, R. Mcdonald, and F. Pereira. Domain adaptation [5] C. Burges, T. Shaked, E. Renshaw, A. Lazier, M. Deeds, [6] Z.Cao,T.Qin,T.-Y.Liu,M.-F.Tsai,andH.Li.Learningto [7] D. Chen, Y. Xiong, J. Yan, G.-R. Xue, G. Wang, and [8] D. Chen, J. Yan, G. Wang, Y. Xiong, W. Fan, and Z. Chen. [9] K. Chen, J. Bai, S. Reddy, and B. L. Tseng. On domain [10] K. Chen, R. Lu, C. Wong, G. Sun, L. Heck, and B. Tseng. [11] N. Craswell, D. Hawking, R. Wilkinson, and M. Wu.
 [12] H. Daum X  III. Frustratingly easy domain adaptation. In [13] H. Daum X  III and D. Marcu. Domain adaptation for [14] K. Duh and K. Kirchhoff. Learning to rank with [15] Y. Freund, R. Iyer, R. Schapire, and Y. Singer. An efficient [16] J. Gao, Q. Wu, C. Burges, K. Svore, Y. Su, N. Khan, S. Shah, [17] B. Geng, L. Yang, C. Xu, and X.-S. Hua. Ranking model [18] R. Herbrich, T. Graepel, and K. Obermayer. Large Margin [19] J. Huang, A. J. Smola, A. Gretton, K. M. Borgwardt, and [20] K. J X rvelin and J. Kek X l X inen. IR evaluation methods for [21] J. Jiang and C. Zhai. Instance weighting for domain [22] M. Li, H. Li, and Z.-H. Zhou. Semi-supervised document [23] T.-Y. Liu. Learning to rank for information retrieval. [24] S. J. Pan, I. W. Tsang, J. T. Kwok, and Q. Yang. Domain [25] J. C. Platt. Probabilistic out puts for support vector machines [26] J. Ponte and W. B. Croft. A language modeling approach to [27] T. Qin, T.-Y. Liu, J. Xu, and H. Li. LETOR: A benchmark [28] S. E. Roberson. The probability ranking principle in IR. [29] S. E. Robertson, S. Walker, M. M. Hancock-Beaulieu, and [30] G. Salton and C. Buckley. Term-weighting approaches in [31] S. Shalev-Shwartz, Y. Singer, and N. Srebro. Pegasos: Primal [32] V. N. Vapnik. The nature of statistical learning theory . [33] E. M. Voorhees. Overview of TREC 2004. In Proceedings of [34] B. Wang, J. Tang, W. Fan, S. Chen, Z. Yang, and Y. Liu. [35] Y. Yue, T. Finley, F. Radlinski, and T. Joachims. A support [36] B. Zadrozny. Learning and evaluating classifiers under [37] C. Zhai and J. Lafferty. A study of smoothing methods for
