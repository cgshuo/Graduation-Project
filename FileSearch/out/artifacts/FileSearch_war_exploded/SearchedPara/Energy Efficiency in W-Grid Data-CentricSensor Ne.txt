 Wireless sensor networks consist of large number of distributed nodes that orga-nize themselves into a multi-hop (wireless) network. Sensor nodes are generally powered by batteries with an inherently limited lifetime, hence energy consump-tion issues play a leading role. In more detail, we focus the attention on so-called data-centric sensor networks , where nodes are smart enough either to store some data and to perform basic processing allowing the network itself to supply higher level information closer to the network user expectations.

Energy saving in wireless sensor networks involves both MAC layer and net-work layer. In particular, here we state that the routing protocol must be lightweight, must not require too much computation, such as complex evalu-ations of possible paths, and must not need a wide knowledge of the network organization. In previous work, we showed that W-Grid [16,15] routing scheme satisfies both previously described requirements. In fact, W-Grid routing pro-tocol needs information about only one-hop away devices and the choice of the next hop requires bit-a-bit comparison of simple binary strings. We also proved that W-Grid allows sensors to generate a decentralized wireless network in which devices, thanks to uni-cast multi-hop transmissions (i.e., no broadcast propaga-tions), can communicate each other independently of their location in the net-work. Our solution enhances typical sen sor networks, in such a way that queries can be posed to the network anytime through any sensor by overcoming limita-tions of a dedicated sink node, which collects raw data in a fixed position and under time constraints (e.g., sensor synchr onization). Thus, the resulting sensor network is capable of executing, in principle, any distributed algorithm for pro-cessing raw data they generate, in such a way to supply external users with the high level information needed or something almost close to their expectations. Also, the resulting network, which is W-Grid-aware, is able to efficiently index and query multi-dimensional data without reliance either on Global Positioning System (GPS) or flooding/broadcasting operations [16,15].

As mentioned, energy consumption plays a central role in wireless sensor net-works. Indeed, in ad-hoc and sensor networks, most of the energy consumption is due to radio transmissions and hence protocol design for these networks must be lightweight and directed towards reducing communication cost. Strictly adhering to this paradigm, in this paper, we show that network traffic, and thus the energy consumption, can be balanced among sensors by assigning multiple virtual coor-dinates to nodes trough a fully decentralized workload balancing algorithm ,which extends W-Grid. The energy consumption balancing, besides improving the en-tire network efficiency by lowering collisions and resource contentions among nodes, also prolongs the network life avoiding premature partitions caused by non-uniform battery discharging.

As a non-secondary contribution, we evaluate network routing performances, which have direct influence on energy consumption, as the quantity of network knowledge at nodes (namely routing table size) vary. An extensive number of experiments have been conducted in order to proof the improvement in energy consumption allowed by workload balancing in W-Grid.

The remaining part of the paper is organized as follows. Section 2 describes related work. Section 3 briefly presents W-Grid. Section 4 co ntains the results of our comprehensive experimental campaign. Finally, Section 5 concludes the paper with some considerations and introducing future work. Existing routing protocols have been developed according to different approaches. Basically, routing is necessary whenev er a data is sensed (we also say gener-ated) and stored in the system or whenever a query is submitted to the system. As stated before, we do not consider sensor network systems which store sensor data externally at a remote base station , but rather we focus on advances wire-less sensor networks in which data or events are kept at sensors, by means of representing them in terms of relations in a virtual distributed database and, for efficiency purposes, indexed by suitable attributes. For instance in [12,10,21,20], data generated at a node is assumed to be stored at the same node, and queries are either flooded throughout the network. In [19], a Geographic Hash Tables (GHT) approach is proposed, where data are hashed by name to a location within the network, enabling highly efficient rendezvous. GHTs are built upon the GPSR protocol [11] thus leveraging some interesting properties of that proto-col, such as the ability of routing to sensors nearest to a given location, together with some of well-known limits, such as the risk of dead ends. Dead end prob-lems, especially under low density environments or scenarios with obstacles and holes, are caused by the inherent greedy nature of routing algorithms that can lead to situation in which a packet gets stuck at a local optimal sensors that appears closer to the destination than any of its known neighbors. In order to solve this flaw, correction methods such as perimeter routing ,whichtriestoex-ploit the right hand rule, have been implemented. However, packet losses still remain and, in addition to this, using perimeter routing causes loss of efficiency both in terms of average path length and energy consumption. Besides, another limitation of GHT-based routing is that i t needs sensors to know their physical position, which causes additional localization costs to the whole system. In [9], Greenstein et al. have designed a spatially-distributed index , called DIFS, to fa-cilitate range search over attributes. In [12], Li et al. have built a distributed index , called DIM, for multidimensional range queries over attributes but they require nodes to be aware of their physical location and of network perimeter. Moreover, they exploit GPSR for routing. Our solution extending W-Grid also behaves like a distributed index, but its indexing feature is cross-layered with routing, meaning that no physical position nor any external routing protocol is necessary, routing information is given by index itself.

Another research area that is directly related to our work is represented by the problem of effectively and efficiently managing multidimensional data over sensor networks , as W-Grid may represent a very efficient indexing layer for tech-niques and algorithms supporting this critical task. The problem of performing multidimensional and OLAP analysis of data streams , like the ones originated by sensor networks, has received great attention recently (e.g., [2]). Due to compu-tational overheads introduced by these tim e-consuming tasks, several solutions have been proposed in literature, such as data compression (e.g., [4]), usage of high-performance Computational Grids (e.g., [6,5]), extensions to uncertain and imprecise domains (e.g., [3]) that occur very frequ ently in sensor environments, and so forth. This problem also exposes v ery interesting and c hallenging corre-lations with cross-disciplinary scientific areas, such as mobile computing (e.g., [7]), thus opening the door to novel research perspectives still poorly explored, such as data management issues in mobile sensor networks (e.g., [8,14,13]). W-Grid 1 can be viewed as a binary tree index cross-layering both routing and data management features over a wirel ess sensor network. Two main phases are performed in W-Grid: (1) implicitly generate coordinates and relations among nodes that allow efficient message routing; (2) determine a data indexing space partition by means of so-generated coordinates in order to efficiently support multidimensional data management. Also, each node can have one or more vir-tual coordinates on which an order relation is defined and through which the routing occurs. At the same time, each virtual coordinate represents a portion of the data indexing space for which a device is assigned with the (data) manage-ment tasks. By assigning multiple coordinates at nodes, we aim at reducing query path length and latency. This is obtained via bounding the probability that two nodes physically close have very differen t virtual coordinates, which may happen whenever a multidimensional space is tran slated into a one-dimensional space. In the next Sections, we provide a formal des cription on the W-Grid main features. 3.1 W-Grid Static Network Properties The target sensor network is represented as a graph S : such that D is the set of participating devices and L is the set of physical connectivity between couples of de vices, which is defined as follows: Each device is assigned one or more (virtual) coordinate(s). We define C as the set of existing coordinates. Each coordinate c i is represented as a string of bits starting with .Accordingtothe regular expression formalism, coordinates are defined as follows: For instance, 01001 is a valid W-Grid coordinate. Given a coordinate i and a bit then: c i b = 01000. Given a bit b ,wedenoteits complementary as follows: b . For instance, 1=0.
 Some functions are defined on top of C . We provide their description. Given a coordinate c , length ( c ) returns the number of bits in c .( excluded). For instance, length ( 01001) = 5. length ( c ) is formally defined as follows: Given a coordinate c and a positive integer k  X  length ( c ), bit ( c, k ) returns the formally defined as follows: Given a coordinate c and a positive integer k  X  length ( c ), pref ( c, k ) returns the first k bits of c . For instance, pref ( 01001 , 3) = 010. pref ( c, k ) is formally defined as follows: Given a coordinate c , we define the complementary of c , denoted by c , as follows: For instance, 01001) = 01000.

Given a coordinate c , we define the father of c , denoted by father ( c ), as follows: Given a coordinate c , we define the left child of c , denoted by lChild ( c ), as follows: Given a coordinate c , we define the right child of c , denoted by rChild ( c ), as follows: To give examples, given a coordinate c i = 011, then: father ( 011) = 01, lChild ( 011) = 0110, rChild ( 011) = 0111.

Given a coordinates in the domain C and devices in the domain D ,wein-troduce the mapping function M that maps each coordinate c to the device d holding it, as follows: AW-Grid network W is represented in terms of a graph, as follows: such that P is the set of parent-ships between pair of coordinates, defined as follows: For instance, p i =( 010 , 0101).
Given a parent-ship p =( c i ,c j ), we define the complementary of parent-ship p =( c i ,c j ), denoted by p , as follows: For instance, if p =( 010 , 0101), then: p =( 010 , 0100).

Finally, given a graph W , W is a valid W-Grid network if all the following  X  M ( c j ). 3.2 W-Grid Dynamic Rules W-Grid network is generat ed according to this few simple rules, which we de-scribe next. 1. The first node that joins the networks (hence it initiates a coordinate space) gets the coordinate . We say that a node that holds a W-Grid coordinate is active . Given a device d , the function last returns the last coordinate received by d , and it is defined as follows: If d is not active , last returns { X  X  .Let n 1 denote the first node that joined the network, then last ( n 1 )= . Namely, c corresponds to the non-deterministic choice of one of the children of c . According to a pre-defined coordinate selection strategy , nodes progressively get new coordinates from each of its physical n eighbors, in order to establish parent-ships with them. Coordinate getting is also called  X  X plit X , and it is actually re-lated to data management tasks of W-Grid. Actors of the split procedure are the so-called joining node and giving node , respectively. We say that a coordinate c is split by concatenating a bit to it, and, after, one of the new coordinates is assigned to the joining node, while the other one is kept by the giving node. Ob-viously, an already split coordinate c i cannot be split anymore since this would generate duplicates . Besides, in order to guarantee uniqueness of coordinates even in case of simultaneous requests, each joining node must be acknowledged by the giving node. Thus, if two nodes ask for the same coordinate to split, only one request will succeed, while the other one w ill be temporarily rejected and post-poned. Coordinate discovering is gradually performed by implicitly overhearing of neighbor sensor transmissions. 3.3 W-Grid Routing Algorithm The routing of any message/query is based on the concept of distance among coordinates. Given two coordinates c i and c j , the distance between c i and c j , denoted by d ( c i ,cj ), is measured in terms of logical hops and corresponds to the sum of the number of bits of c i and c j which are not part of their common prefix. To give and For instance: d ( *0 011 , *0 11) = 5.

Given a target binary string c t , each device of the network is able of constantly getting closer to it by choosing the neighbor that exposes the shortest distance to c t . It is important to notice that each device needs neither global nor partial knowledge about network topology to route messages, as its routing table is lim-ited to information about its direct neighbors X  coordinates. This means ensuring scalability with respect to network size, which is a nice amenity supported by W-Grid. 3.4 W-Grid Data Management W-Grid distributes data (i.e., tuples of attributes) gathered by sensors among them in a data-centric manner . Values of tuples are linearized into binary strings (see [18]) and stored at nodes whose W-Grid coordinates have the longest com-mon prefix with so-generat ed strings. Thus, a W-Grid network acts directly as a distributed database and coordinates c are used as items stored in a data reposi-tory. This means that each coordinate represents a portion (region) of the global data space. In order to balance data load at each region, a maximum number of data items is pre-fixed, namely the bucket size b . Whenever a coordinate c turns overloaded with respect to b , c splits into two coordinates c and c . Split operation on coordinates is slightly different from the split operation on nodes described in Section 3.2. The operations supporting the split of c into c and c are described next: ( i ) both newly generated coordinates c and c are (temporar-ily) kept at the node M ( c ); ( ii )dataheldby c are distributed between c and c ;( iii ) parent-ships p =( c, c )and p =( c, c ) are generated; ( iv ) coordinate c is labeled as  X  X ivable X , meaning that, in the case of a node asking M ( c )fora coordinate, c is immediately returned without performing any other split.
If the first split has not solved the overload in one between c or c , the split op-eration is performed again by repeating the previously described steps. In order to further improve the data distribution balancing, the Storage Load Balancing algorithm (SLOB) [16] is executed.

In addition to the data management solutions described above, in W-Grid sensed data are replicated in each of the existing spaces, thus allowing us to improve data availability as to cope with sensor failures and periodically turn-off a partition of them without compromising the network functionalities (the latter for energy efficiency purposes). An extensive number of experiments have been conducted in order to assess the effectiveness and the efficiency of the W-Grid load balancing solutions presented in this paper. Again, we stress the concept that the proposed experimental anal-ysis is focused to intelligent sensor networks in which data collected by sensors are not simply downloaded at a fixed sink or in which a sink node is in charge of periodically performing queries but, contrary to this, networks where each active sensor can be queried at any time .

Effectiveness and efficiency of W-Grid load balancing solutions have been evaluated in terms of the following experimental parameters: query average path length , data and traffic load at sensors ,and energy consumption of the resulting sensor network. The functional parameters chosen are, instead, the following: device density , number of coordinates per node . In the following, we first describe the simulation model of our experimental campaign (Section 4.1). Then, we provide experimental results for the follo wing experimental aspect assessing the W-Grid X  X  performance: query efficiency (Section 4.2), network load (Section 4.3) and energy consumption (Section 4.4). 4.1 Simulation Model We performed our experiments on top of a Java-based in-laboratory simulation environment. We adopted the following simulation model. Simulation area size is 800  X  800 m , where nodes are spread in a uniformly-random manner .Each sensor has its own identifier (ID), a radio range of 100 m , and it adhere to an ideal transmission mode. As a result, the average number of one-hop neighbors varies from 11 to 4. Due to space limitation, here we show the results for the range 11  X  8. For each scenario, we ran five simulations and, for each simulation, we submitted 10 , 000 queries to the system.

We let the simulator perform the following tasks: ( i ) uniformly random place-ment of n sensors in a user-defined area; ( ii ) gradual generation of W-Grid coordinates at sensors that exploit implicit overhearing; ( iii ) random generation of data sensing and query in a user-defined ratio q : i .

At each simulator run, we observed the following experimental parameters: ( i ) average path length of queries (compared with the one due to GPSR [11]); ( ii ) loads at sensors, modeled in terms of the relative difference between network traffic and managed data space at sensors; ( iii ) network energy consumption in each different scenario.
 4.2 Query Efficiency In the first experiment, we tested the r atio of succeeded queries due to W-Grid with respect to the ones accomplished by GPSR. Indeed, for the sake of clarity, here we highlight that the latter comparison is unfair as GPSR assumes to know sensor physical positions over the network. This means that the probability of committing a query is always very high, especially in quite dense application scenarios like the one we tested. However, our main experimental goal was to test our solution against the most efficient one available in literature, even if the comparison one was advantaged. Figure 1 and Figure 2 show the average number of hops needed to succeed queries with respect to the number of virtual coordinates for W-Grid and GPSR in the two distinctive scenarios of not apply-ing (Figure 1) and applying (Figure 2) the load balancing solutions. As Figure 1 and Figure 2 show, it clearly follows that W-Grid behavior is absolutely efficient and not too much distant from the one by GPSR, which reasonably represents the favorite case.
 4.3 Network Load Network load trends of W-Grid has also been observed as well. Network workload variations are the result of the interaction between the following two factors: ( i ) data load balancing among nodes and ( ii ) increase of transmission costs due to path lengthening. As the number of coordinates grows, these two factors expose better trends, as confirmed by Figure 3 and Figure 4, where we depict the average and standard deviation evolutions of network traffic distribution among nodes with respect to the number of coordinates for W-Grid and GPSR in the two distinctive scenarios of not applying (Figure 3) and applying (Figure 4) the load balancing solutions. Similarly, for cross-comparison purposes, we studied the variation of the standard deviation of data space at sensors (Figure 5) (clearly, with load balancing solutions). Retrieved results clearly confirm the benefits deriving from W-Grid. 4.4 Energy Consumption Finally, we focused the attention on energy consumption due to W-Grid for each application scenario considered in the experimental campaign (i.e., 11, 8 and 4 neighbors per node). Energy consumption was measured according to [17]. Figure 6 shows the retrieved observatio ns for the two different cases of applying (left) and not applying (right) load balancing solutions. Even in this study, W-Grid observations expose a very positive trend.
 In this paper, we proposed load balancing extensions of W-Grid and assessed them by means of a comprehensive exper imental campaign that has focused the attention on several interesting exper imental parameters, ranging from query efficiency to energy consumption. Experiments have been conducted on top of a Java-based simulation environment. Retrieved results have clearly confirmed the benefits due to the usage of W-Grid as cross-layer infrastructure for self-organizing data-centric sensor networks.

Future work is mainly oriented towards three directions. First, we are con-sidering the presence of outliers in the data layer of such networks.  X  How their presence impacts on the performance of W-Grid ? X  is a challenging question that demands for solution. Second, we are considering the integration of W-Grid X  X  architecture with modern Cloud computing platforms . Finally we are address-ing in W-Grid the issue of network security with malicious nodes by extending decentralized approach based on dist ributed supervised data mining [1].
