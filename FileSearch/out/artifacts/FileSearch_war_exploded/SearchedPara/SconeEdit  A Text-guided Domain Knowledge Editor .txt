 Institute We will demonstrate SconeEdit, a new tool for exploring and editing knowledge bases that inte-grates domain text. SconeEdit expands on the function of traditional ontology editors by showing the user an interactive text window (Text View) where the user can view and edit concepts from the knowledge base as highlighted terms in their origi-nal context. The Text View augments a traditional KB View, allowing the user to leverage existing knowledge as well as domain-focused text exam-ples to perform a variety of knowledge-based tasks. 
Consider the task of assessing the quality of a knowledge base as a resource for a new AI or natu-ral language system. In SconeEdit, a user can view the knowledge base alongside a text document from the target domain. SconeEdit searches for instances of KB concepts in the text and highlights them in the Text View. Already the user can see a concise visual sample of the coverage of the KB for this domain. Now the user can work with the KB View and Text View together to navigate the ontology. Double-clicking on a highlighted concept like  X  X eyboard X  opens a detailed view of that concept in the KB View. Inside the KB View, the user can click on the superclass of the keyboard concept to see the concept computer input device and all of its children. Next, SconeEdit selectively highlights all instances of computer input device in the text. The system uses type inference from the KB to high-light  X  X ouse X ,  X  X ouchpad X , and  X  X ireless key-board. X  If  X  X canner X  appears in the text but isn X  X  included in the knowledge base, the user can spot the omission quickly. Figure 1. The SconeEdit Interface 
In this way, domain text is used as a measuring tool for coverage of domain knowledge. Our dem-onstration allows the user to try SconeEdit and to explore the interaction of text and knowledge. SconeEdit is a software client to the Scone Knowl-edge Base System, or simply  X  X cone X  (Fahlman, 2005). Scone is an efficient, open-source knowl-edge base (KB) system being developed in the Language Technologies Institute of Carnegie Mel-lon University. Scone is intended to be a practical KB system that can be used as a component in a wide range of AI and natural language software applications. One of the goals in developing Scone is to make it easy to use, especially when adding new knowledge. 
The SconeEdit interface makes Scone more us-able in several ways: the Text View display gives the user a convenient and intuitive starting point for exploring the knowledge base. SconeEdit also provides an easy way of adding knowledge to the KB without learning the formal input language for Scone. This demonstration focuses on the effec-tiveness of SconeEdit and Scone together, but the design principles of SconeEdit are applicable to knowledge bases written in other formalisms. 
Figure 1 shows the SconeEdit window with a document and KB loaded. The left side of the in-terface contains the Text View, and the KB View is on the right. Each of these views is described in detail below. 3.1 Text View In a traditional ontology browser, the user starts looking for concepts of interest by typing words and phrases into a search field. This is the model for several existing tools, including the VisDic viewer for WordNet (Hor X k and Smr X , 2004), the INOH ontology viewer (INOH, 2004), and the Gene Ontology viewer presented by Koike and Takagi (2004), among others. 
SconeEdit improves on this browsing paradigm by giving a user who is unfamiliar with the knowl-edge base an easy way to start exploring. Rather than generating a series of guesses at what may be Figure 2. Excerpt from Text View, with Search and Text Tabs covered by the KB, the user can load natural lan-guage text into SconeEdit from a file or the system clipboard. We take an article from Xinhuanet News Service (Xinhuanet, 2006) as an example. Figure 2 shows an excerpt of this text after it has been loaded. When the text file is loaded, it appears in the Text Tab of the Text View pane. SconeEdit high-lights all strings that it can identify as concepts from the knowledge base. In this example,  X  X ash-ington X  is correctly identified as the city, not the state. In many cases the concept may be ambigu-ous from the string alone. SconeEdit currently uses dynamic programming to highlight the long-est-matching concept names it can find (see Sec-tion 5). More sophisticated disambiguation is a priority for our future work. 
The result of highlighting is a concise visual representation of what is  X  X nown X  about that text. The Text View helps a user find relevant knowl-edge quickly, even in a large general-domain KB. Clicking on any highlighted term in the Text View brings up a hierarchical representation of that con-cept in the KB View. 3.2 KB View The KB View contains two tabs: a Graph Tab and a List Tab. The Graph Tab displays an excerpt from the knowledge base as a network of linked concepts with one focus concept in the center. When the user clicks on a highlighted concept in the Text View, a graph focused on that concept appears in the Graph Tab. Continuing with our Xinhuanet example, Figure 3 shows the Graph Tab after a user has clicked on  X  X ashington X  in the text. The Graph View now displays concepts that are closely related to Washington-Dc in the knowl-edge base. Figure 3. KB View, Graph Tab of Washington-Dc Figure 4. KB View, List Tab of City Clicking on any of these related concepts in the Graph Tab moves the focus of the graph to that concept. 
The List Tab shows an alternative view of the same focus concept. It displays KB information as a set of property lists. As in the Graph Tab, the user can double-click on any concept in the List Tab to bring that concept into focus. When the focus concept is densely connected to other con-cepts in the KB, the List Tab can be easier to inter-pret than the Graph Tab. In general, research has shown that preference for the list style or graph style is personal and varies from user to user (Tribble and Ros X , 2006). Figure 4 shows the List Tab, focused on the concept City . Browsing the knowledge base in this way gives the user a detailed, domain-targeted view of its con-tents. A natural extension of this paradigm is to allow the user to edit the KB while browsing. For example, a user may encounter a concept in the Figure 5. Adding a concept synonym text that is not present in the knowledge base. SconeEdit allows the user to simply click on a word in the text to create a new concept in the KB (see Figure 5). To specify where the new concept belongs, the user navigates to the appropriate loca-tion in the KB View (List Tab or Graph Tab). 
The user can also modify an existing KB con-cept by adding English synonyms. For example, the word  X  X nited States X  may be highlighted in a text example, while  X  X .S. X  is not. To add a syno-nym for the  X  X nited States X  concept, the user navigates to this concept in the KB View, and then clicks on the text  X  X .S. X . A menu offers the choice of adding a synonym to the existing focus concept. Figure 5 illustrates this process. Elements in a Scone knowledge base represent specific concepts, rather than words or word senses. Each concept is linked with a list of Eng-lish names (words or phrases). This association between Scone elements and English names is many-to-many. 
To map a sentence to the set of concepts that appear there, a dynamic-programming alignment is performed using the English names in the KB as a dictionary. SconeEdit searches for an alignment that covers as much of the input text as possible. The result of aligning an input string with concepts is a set of triples, each consisting of a concept, an offset, and a length. These triples are used directly by the Text Tab to highlight substrings and associ-ate them with KB concepts. 
Consider the sentence  X  X ashington, D.C. is a city. X  Table 1 shows some example Scone con-cepts and their English names. Given a knowledge Table 1. Example concepts and their English Name lists base with these concepts, SconeEdit returns the alignment: (concept: Washington-DC, offset: 1, length: 16) (concept: City , offset: 23, length: 4). 
A single node in the KB could have hundreds or thousands of outgoing links. For readability, the browser must select a subset of these links to dis-play to the user. We plan to leverage Scone X  X  rea-soning ability, along with SconeEdit X  X  document-driven design, to select which nodes are likely to be relevant to the user in the context of the loaded document(s). For example, a user who views sub-classes of disease in a medical ontology may be presented with thousands of disease types. If the current document loaded into SconeEdit is a document about food , Scone may be able to prune the subclasses it lists to only food-borne illnesses. 
Another feature we hope to add is better integra-tion with an entire corpus. The current system al-lows the user to work with individual documents. This could be extended to allow a user to navigate to a particular concept in the knowledge base and retrieve all documents in a corpus containing that concept (in its various forms). These documents could then be used to generate more KB concepts of interest. To the best of our knowledge, existing ontology and KB editors and viewers do not specifically focus on editing and viewing an ontology or KB in the context of natural language text. Other ontol-ogy editors such as Prot X g X  (Gennari, 2002) and OntoEdit (Sure, 2002) offer many features for gen-erating complex ontologies, but do not provide the rich interaction with domain text that is the focus of SconeEdit. The CNet Big Picture (CNet News Online, 2000) is one example of a system that does link ontology knowledge to text, but the concepts in the ontology are limited to a small fixed set. This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No. NBCHD030010. The authors would like to thank Vasco Pedro, Eric Nyberg, and Tim Isganitis for their contributions to SconeEdit. 
