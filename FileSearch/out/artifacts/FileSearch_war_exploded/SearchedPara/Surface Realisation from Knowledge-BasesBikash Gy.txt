 In this paper we present a grammar based ap-proach for generating from knowledge bases (KB) which is linguistically principled and conceptually simple. A key feature of this approach is that grammar induction is driven by the extended do-main of locality principle of TAG (Tree Adjoining Grammar) and takes into account both syntactic and semantic information. The resulting extracted TAGs include a unification based semantics and can be used by an existing surface realiser to gen-erate sentences from KB data.

To evaluate our approach, we use the bench-mark provided by the KBGen challenge (Banik et al., 2012; Banik et al., 2013), a challenge designed to evaluate generation from knowledge bases; where the input is a KB subset; and where the expected output is a complex sentence convey-ing the meaning represented by the input. When compared with two other systems having taken part in the KBGen challenge, our system outper-forms a data-driven, generate-and-rank approach based on an automatically induced probabilis-tic grammar; and produces results comparable to those obtained by a symbolic, rule based approach. Most importantly, we obtain these results using a general purpose approach that we believe is sim-pler and more transparent than current state of the art surface realisation systems generating from KB or DB data. Our work is related to work on concept to text gen-eration.

Earlier work on concept to text generation mainly focuses on generation from logical forms using rule-based methods. (Wang, 1980) uses hand-written rules to generate sentences from an extended predicate logic formalism; (Shieber et al., 1990) introduces a head-driven algorithm for generating from logical forms; (Kay, 1996) de-fines a chart based algorithm which enhances effi-ciency by minimising the number of semantically incomplete phrases being built; and (Shemtov, 1996) presents an extension of the chart based gen-eration algorithm presented in (Kay, 1996) which supports the generation of multiple paraphrases from underspecified semantic input. In all these approaches, grammar and lexicon are developed manually and it is assumed that the lexicon as-sociates semantic sub-formulae with natural lan-guage expressions. Our approach is similar to these approaches in that it assumes a grammar en-coding a compositional semantics. It differs from them however in that, in our approach, grammar and lexicon are automatically acquired from the data.

With the development of the semantic web and the proliferation of knowledge bases, generation from knowledge bases has attracted increased in-terest and so called ontology verbalisers have been proposed which support the generation of text from (parts of) knowledge bases. One main strand of work maps each axiom in the knowledge base to a clause. Thus the OWL verbaliser inte-grated in the Prot  X eg  X e tool (Kaljurand and Fuchs, 2007) provides a verbalisation of every axiom present in the ontology under consideration and (Wilcock, 2003) describes an ontology verbaliser using XML-based generation. As discussed in (Power and Third, 2010), one important limita-tion of these approaches is that they assume a simple deterministic mapping between knowledge representation languages and some controlled nat-ural language (CNL). Specifically, the assump-tion is that each atomic term (individual, class, property) maps to a word and each axiom maps to a sentence. As a result, the verbalisation of larger ontology parts can produce very unnatural text such as, Every cat is an animal. Every dog is an animal. Every horse is an animal. Every rabbit is an animal. More generally, the CNL based approaches to ontology verbalisation gen-erate clauses (one per axiom) rather than complex sentences and thus cannot adequately handle the verbalisation of more complex input such as the KBGen data where the KB input often requires the generation of a complex sentence rather than a se-quence of base clauses.

To generate more complex output from KB data, several alternative approaches have been pro-posed.

The MIAKT project (Bontcheva and Wilks., 2004) and the ONTOGENERATION project (Aguado et al., 1998) use symbolic NLG tech-niques to produce textual descriptions from some semantic information contained in a knowledge base. Both systems require some manual in-put (lexicons and domain schemas). More so-phisticated NLG systems such as TAILOR (Paris, 1988), MIGRAINE (Mittal et al., 1994), and STOP (Reiter et al., 2003) offer tailored output based on user/patient models. While offering more flexibility and expressiveness, these systems are difficult to adapt by non-NLG experts because they require the user to understand the architec-ture of the NLG systems (Bontcheva and Wilks., 2004). Similarly, the NaturalOWL system (Gala-nis et al., 2009) has been proposed to generate flu-ent descriptions of museum exhibits from an OWL ontology. This approach however relies on exten-sive manual annotation of the input data.

The SWAT project has focused on producing descriptions of ontologies that are both coherent and efficient (Williams and Power, 2010). For in-stance, instead of the above output, the SWAT sys-tem would generate the sentence: The following are kinds of animals: cats, dogs, horses and rab-bits. . In this approach too however, the verbaliser output is strongly constrained by a simple Definite Clause Grammar covering simple clauses and sen-tences verbalising aggregation patterns such as the above. More generally, the sentences generated by ontology verbalisers cover a limited set of linguis-tics constructions; the grammar used is manually defined; and the mapping between semantics and strings is assumed to be deterministic (e.g., a verb maps to a relation and a noun to a concept). In constrast, we propose an approach which can gen-erate complex sentences from KB data; where the grammar is acquired from the data; and where no assumption is made about the mapping between semantics and NL expressions.

Recent work has focused on data-driven gener-ation from frames, lambda terms and data base en-tries. (DeVault et al., 2008) describes an approach for generating from the frames produced by a dialog system. They induce a probabilistic Tree Adjoin-ing Grammar from a training set aligning frames and sentences using the grammar induction tech-nique of (Chiang, 2000) and use a beam search that uses weighted features learned from the train-ing data to rank alternative expansions at each step. (Lu and Ng, 2011) focuses on generating nat-ural language sentences from logical form (i.e., lambda terms) using a synchronous context-free grammar. They introduce a novel synchronous context free grammar formalism for generating from lambda terms; induce such a synchronous grammar using a generative model; and extract the best output sentence from the generated forest us-ing a log linear model. (Wong and Mooney, 2007; Lu et al., 2009) focuses on generating from variable-free tree-structured representations such as the CLANG for-mal language used in the ROBOCUP competition and the database entries collected by (Liang et al., 2009) for weather forecast generation and for the air travel domain (ATIS dataset) by (Dahl et al., 1994). (Wong and Mooney, 2007) uses syn-chronous grammars to transform a variable free tree structured meaning representation into sen-tences. (Lu et al., 2009) uses a Conditional Ran-dom Field to generate from the same meaning rep-resentations.

Finally, more recent papers propose approaches which perform both surface realisation and con-tent selection. (Angeli et al., 2010) proposes a log linear model which decomposes into a sequence of discriminative local decisions. The first classi-fier determines which records to mention; the sec-ond, which fields of these records to select; and the third, which words to use to verbalise the selected fields. (Kim and Mooney, 2010) uses a genera-tive model for content selection and verbalises the ator. Finally, (Konstas and Lapata, 2012b; Kon-stas and Lapata, 2012a) develop a joint optimi-sation approach for content selection and surface realisation using a generic, domain independent probabilistic grammar which captures the struc-ture of the database and the mapping from fields to strings. They intersect the grammar with a lan-guage model to improve fluency; use a weighted hypergraph to pack the derivations; and find the best derivation tree using Viterbi algorithm.
Our approach differs from the approaches which assume variable free tree structured repre-sentations (Wong and Mooney, 2007; Lu et al., 2009) and data-based entries (Kim and Mooney, 2010; Konstas and Lapata, 2012b; Konstas and Lapata, 2012a) in that it handles graph-based, KB input and assumes a compositional semantics. It is closest to (DeVault et al., 2008) and (Lu and Ng, 2011) who extract a grammar encoding syn-tax and semantics from frames and lambda terms respectively. It differs from the former however in that it enforces a tighter syntax/semantics integra-tion by requiring that the elementary trees of our extracted grammar encode the appropriate linking information. While (DeVault et al., 2008) extracts a TAG grammar associating each elementary tree with a semantics, we additionnally require that these trees encode the appropriate linking between syntactic and semantic arguments thereby restrict-ing the space of possible tree combinations and drastically reducing the search space. Although conceptually related to (Lu and Ng, 2011), our ap-proach extracts a unification based grammar rather than one with lambda terms. The extraction pro-cess and the generation algorithms are also funda-mentally different. We use a simple mainly sym-bolic approach whereas they use a generative ap-proach for grammar induction and a discriminative approach for sentence generation.
The KBG en task was introduced as a new shared task at Generation Challenges 2013 (Banik et al., systems on KB data. Specifically, the task is to verbalise a subset of a knowledge base. For in-stance, the KB input shown in Figure 1 can be ver-balised as: (1) The function of a gated channel is to release
The KB subsets forming the KBG en input data were pre-selected from the AURA biology knowl-edge base (Gunning et al., 2010), a knowledge base about biology which was manually encoded by biology teachers and encodes knowledge about events, entities, properties and relations where relations include event-to-entity, event-to-event, event-to-property and entity-to-property relations. AURA uses a frame-based knowledge representa-tion and reasoning system called Knowledge Ma-chine (Clark and Porter, 1997) which was trans-lated into first-order logic with equality and from there, into multiple different formats including SILK (Grosof, 2012) and OWL2 (Motik et al., 2009). It is available for download in various for-To generate from the KBG en data, we induce a Feature-Based Lexicalised Tree Adjoining Gram-mar (FB-LTAG, (Vijay-Shanker and Joshi, 1988)) augmented with a unification-based semantics (Gardent and Kallmeyer, 2003) from the training data. We then use this grammar and an existing surface realiser to generate from the test data. 4.1 Feature-Based Lexicalised Tree Figure 2 shows an example FB-LTAG augmented with a unification-based semantics.

Briefly, an FB-LTAG consists of a set of ele-mentary trees which can be either initial or auxil-iary. Initial trees are trees whose leaves are labeled with substitution nodes (marked with a down-arrow) or terminal categories. Auxiliary trees are distinguished by a foot node (marked with a star) whose category must be the same as that of the root node. In addition, in an FB-LTAG, each el-ementary tree is anchored by a lexical item (lexi-calisation) and the nodes in the elementary trees are decorated with two feature structures called top and bottom which are unified during deriva-tion. Two tree-composition operations are used to combine trees namely, substitution and adjunc-tion. While substitution inserts a tree in a substi-tution node of another tree, adjunction inserts an auxiliary tree into a tree. In terms of unifications, substitution unifies the top feature structure of the substitution node with the top feature structure of the root of the tree being substituted in. Adjunc-tion unifies the top feature structure of the root of the tree being adjoined with the top feature struc-ture of the node being adjoined to; and the bottom feature structure of the foot node of the auxiliary tree being adjoined with the bottom feature struc-ture of the node being adjoined to.

In an FB-LTAG augmented with a unification-based semantics, each tree is associated with a semantics i.e., a set of literals whose arguments may be constants or unification variables. The semantics of a derived tree is the union of the semantics of the tree contributing to its deriva-tion modulo unification. Importantly, semantic variables are shared with syntactic variables (i.e., variables occurring in the feature structures decorating the tree nodes) so that when trees are combined, the appropriate syntax/semantics link-ing is enforced. For instance given the semantics: the grammar will generate A gated channel re-leases particles from the endoplasmic reticulum but not e.g., Particles releases a gated channel from the endoplasmic reticulum . 4.2 Grammar Extraction We extract our FB-LTAG with unification seman-tics from the KBG en training data in two main steps. First, we align the KB data with the input string. Second, we induce a Tree Adjoining Gram-mar augmented with a unification-based semantics from the aligned data. 4.2.1 Alignment Given a Sentence/Input pair ( S, I ) provided by the KBGen Challenge, the alignment procedure asso-ciates each entity and event variable in I to a sub-string in S . To do this, we use the entity and the event lexicon provided by the KBG en organiser. The event lexicon maps event types to verbs, their inflected forms and nominalizations while the en-tity lexicon maps entity types to a noun and its plural form. For instance, the lexicon entries for the event and entity types shown in Figure 1 are as shown in Figure 3.

For each entity and each event vari-able V in I , we retrieve the corresponding type (e.g., Particle-In-Motion for Particle-In-Motion64582 ); search the KBG en lexicon for the corresponding phrases (e.g., molecule in motion,molecules in motion ); and associate V with the phrase in S which matches one of these phrases. Figure 3 shows an example lexicon and the resulting alignment obtained for the scenario shown in Figure 1. Note that there is not always an exact match between the phrase associated in the KBG en lexicon with a type and the phrase occurring in the training sentence. To account for this, we use some additional similarity based heuristics to identify the phrase in the input string that is most likely to be associated with a variable lacking an exact match in the input string. E.g., for entity variables (e.g., Particle-In-Motion64582 ), we search the input string for nouns (e.g., particles) whose overlap with the variable type (e.g., Particle-In-Motion) is not empty. 4.2.2 Inducing a based FB-LTAG from the To extract a Feature-Based Lexicalised Tree Adjoining Grammar (FB-LTAG) from the KBG en data, we parse the sentences of the training cor-pus; project the entity and event variables to the syntactic projection of the strings they are aligned with; and extract the elementary trees of the result-ing FB-LTAG from the parse tree using semantic information. Figure 4 shows the trees extracted from the scenario given in Figure 1.

To associate each training example sentence with a syntactic parse, we use the Stanford parser. After alignment, the entity and event variables oc-curring in the input semantics are associated with substrings of the yield of the syntactic parse tree. We project these variables up the syntactic tree to reflect headedness. A variable aligned with a noun is projected to the NP level or to the immediately dominating PP if it occurs in the subtree domi-nated by the leftmost daughter of that PP. A vari-able aligned with a verb is projected to the first S node immediately dominating that verb or, in the case of a predicative sentence, to the root of that
Once entity and event variables have been pro-jected up the parse trees, we extract elementary FB-LTAG trees and their semantics from the input scenario as follows.

First, the subtrees whose root node is indexed with an entity variable are extracted. This results in a set of NP and PP trees anchored with entity names and associated with the predication true of the indexing variable.

Second, the subtrees capturing relations be-tween variables are extracted. To perform this ex-traction, each input variable X is associated with a set of dependent variables i.e., the set of variables Y such that X is related to Y ( R ( X, Y ) ). The minimal tree containing all and only the dependent variables D ( X ) of a variable X is then extracted and associated with the set of literals  X  such that  X = { R ( Y, Z ) | ( Y = X  X  Z  X  D ( X ))  X  ( Y, Z  X  D ( X )) } . This procedure extracts the subtrees re-lating the argument variables of a semantic func-tors such as an event or a role e.g., a tree describ-ing a verb and its arguments as shown in the top Particle-In-Motion molecule in motion,molecules in motion Gated-Channel gated Channel,gated Channels Release-Of-Calcium releases,release,released,release mic reticulum, Endoplasmic-Reticulum64603 ) en Lexicon and example alignment part of Figure 4. Note that such a tree may cap-ture a verb occurring in a relative or a subordinate clause (together with its arguments) thus allowing for complex sentences including a relative or re-lating a main and a subordinate clause.

The resulting grammar extracted from the parse trees (cf. e.g., Figure 4) is a Feature-Based Tree Adjoining Grammar with a Unification-based compositional semantics as described in (Gardent and Kallmeyer, 2003). In particular, our gram-mars differs from the traditional probabilistic Tree Adjoining Grammar extracted as described in e.g., (Chiang, 2000) in that they encode both syntax and semantics rather than just syntax. They also differ from the semantic FB-TAG extracted by (DeVault et al., 2008) in that (i) they encode the linking be-tween syntactic and semantic arguments; (ii) they allow for elementary trees spanning discontiguous strings (e.g., The function of X is to release Y ); and (iii) they enforce the semantic principle underly-ing TAG namely that an elementary tree contain-ing a syntactic functor also contains its syntactic arguments. 4.3 Generation To generate with the grammar extracted from the KBG en data, we use the GenI surface realiser (Gar-dent et al., 2007). Briefly, given an input seman-tics and a FB-LTAG with a unification based se-mantics, GenI selects all grammar entries whose semantics subsumes the input semantics; com-bines these entries using the FB-LTAG combina-tion operations (i.e., adjunction and substitution); and outputs the yield of all derived trees which are syntactically complete and whose semantics is the input semantics. To rank the generator output, we corpus of 2000 MEDLINE asbtracts about biol-ogy containing more than 400000 words (Kim et al., 2003) and use this model to rank the generated sentences by decreasing probability.

Thus for instance, given the input semantics shown in Figure 1 and the grammar depicted in Figure 4, the surface realiser will select all of these trees; combine them using FB-LTAG substitution operation; and output as generated sentence the yield of the resulting derived tree namely the sen-tence The function of a gated channel is to release particles from the endoplasmic reticulum .
However, this procedure only works if the en-tries necessary to generate from the given input are present in the grammar. To handle new, un-seen input, we proceed in two ways. First, we try to guess a grammar entry from the shape of the in-put and the existing grammar. Second, we expand the grammar by decomposing the extracted trees into simpler ones. 4.4 Guessing new grammar entries.
 Given the limited size of the training data, it is of-ten the case that input from the test data will have no matching grammar unit. To handle such pre-viously unseen input, we start by partitioning the input semantics into sub-semantics corresponding to events, entities and role.

For each entity variable X of type T ype , we create a default NP tree whose semantics is a lit-
For event variables, we search the lexicon for an entry with a matching or similar semantics i.e., an entry with the same number and same type of literals (literals with same arity and with identical relations). When one is found, a grammar entry is constructed for the unseen event variable by sub-stituting the event type of the matching entry with the type of the event variable. For instance, given will create a grammar entry identical to that shown at the top of Figure 4 except that the event type minal release to the word form associated in the KBG en lexicon with this concept, namely to the verb carry . 4.5 Expanding the Grammar While the extracted grammar nicely captures pred-icate/argument dependencies, it is very specific to the items seen in the training data. To reduce over-fitting, we generalise the extracted grammar by ex-tracting from each event tree, subtrees that cap-ture structures with fewer arguments and optional modifiers.

For each event tree  X  extracted from the train-ing data which contains a subject-verb-object sub-tree  X   X  , we add  X   X  to the grammar and associate it with the semantics of  X  minus the relations associ-ated with the arguments that have been removed. For instance, given the extracted tree for the sen-tence  X  X quaporin facilitates the movement of wa-ter molecules through hydrophilic channels. X  , this procedure will construct a new grammar tree cor-responding to the subphrase  X  X quaporin facili-tates the movement of water molecules X  .

We also construct both simpler event trees and optional modifiers trees by extracting from event trees, PP trees which are associated with a re-lational semantics. For instance, given the tree shown in Figure 4, the PP tree associated with the relation base(RoC,ET) is removed thus creating two new trees as illustrated in Figure 5: an S tree corresponding to the sentence The function of a gated channel is to release particles and an aux-iliary PP tree corresponding to the phrase from the endoplasmic reticulum . Similarly in the above example, a PP tree corresponding to the phrase  X  X hrough hydrophilic channels. X  will be extracted.
As with the base grammar, missing grammar entries are guessed from the expanded grammar. However we do this only in cases where a correct grammar entry cannot be guessed from the base grammar. We evaluate our approach on the KBG en data and compare it with the KBG en reference and two other systems having taken part to the KBG en challenge. 5.1 Training and test data.
 Following a practice introduced by (Angeli et al., 2010), we use the term scenario to denote a KB subset paired with a sentence. The KBG en bench-mark contains 207 scenarii for training and 72 for testing. Each KB subset consists of a set of triples and each scenario contains on average 16 triples and 17 words. 5.2 Systems We evaluate three configurations of our approach on the KBG en test data: one without grammar ex-pansion (B ASE ); a second with a manual grammar expansion M AN E XP ; and a third one with auto-mated grammar expansion A UT E XP . We compare the results obtained with those obtained by two other systems participating in the KBGen chal-lenge, namely the UDEL system, a symbolic rule based system developed by a group of students at the University of Delaware; and the IMS system, a statistical system using a probabilistic grammar induced from the training data. 5.3 Metrics.
 We evaluate system output automatically, using the BLEU-4 modified precision score (Papineni et al., 2002) with the human written sentences as ref-erence. We also report results from a human based evaluation. In this evaluation, participants were asked to rate sentences along three dimensions: fluency (Is the text easy to read?), grammatical-ity and meaning similarity or adequacy (Does the meaning conveyed by the generated sentence cor-respond to the meaning conveyed by the reference sentence?). The evaluation was done on line us-ing the LG-Eval toolkit (Kow and Belz, 2012), subjects used a sliding scale from -50 to +50 and a Latin Square Experimental Design was used to ensure that each evaluator sees the same number of outputs from each system and for each test set item. 12 subjects participated in the evaluation and 3 judgments were collected for each output. Figure 6: BLEU scores and Grammar Size (Num-ber of Elementary TAG trees
Table 6 summarises the results of the automatic evaluation and shows the size (number of elemen-tary TAG trees) of the grammars extracted from the KBG en data.

The average BLEU score is given with respect to all input (All) and to those inputs for which the systems generate at least one sentence (Cov-ered). While both the IMS and the UDEL system have full coverage, our B ASE system strongly un-dergenerates failing to account for 69.5% of the test data. However, because the extracted gram-mar is linguistically principled and relatively com-pact, it is possible to manually edit it. Indeed, the M
AN E XP results show that, by adding 41 trees to the grammar, coverage can be increased by 52.5 points reaching a coverage of 83%. Finally, the A
UT E XP results demonstrate that the automated expansion mechanism permits achieving full cov-erage while keeping a relative small grammar (477 trees). Tukey X  X  Post Hoc Test with p &lt; 0.05
In terms of BLEU score, the best version of our system (A UT E XP ) outperforms the probabilistic approach of IMS by a large margin (+0.17) and produces results similar to the fully handcrafted UDEL system (-0.03).

In sum, our approach permits obtaining BLEU scores and a coverage which are similar to that obtained by a hand crafted system and outper-forms a probabilistic approach. One key feature of our approach is that the grammar extracted from the training data is linguistically principled in that it obeys the extended locality principle of Tree Adjoining Grammars. As a result, the extracted grammar is compact and can be manually modi-fied to fit the need of an application as shown by the good results obtained when using the M AN -E XP configuration.

We now turn to the results of the human eval-uation. Table 7 summarises the results whereby systems are grouped by letters when there is no significant difference between them (significance level: p &lt; 0.05). We used ANOVAs and post-hoc Tukey tests to test for significance. The dif-ferences between systems are statistically signifi-cant throughout except for meaning similarity (ad-equacy) where UDEL and our system are on the same level. Across the metrics, our system consis-tently ranks second behind the symbolic, UDEL system and before the statistical IMS one thus con-firming the ranking based on BLEU. In Tree Adjoining Grammar, the extended domain of locality principle ensures that TAG trees group together in a single structure a syntactic predi-cate and its arguments. Moreover, the semantic principle requires that each elementary tree cap-tures a single semantic unit. Together these two principles ensure that TAG elementary trees cap-ture basic semantic units and their dependencies. In this paper, we presented a grammar extraction approach which ensures that extracted grammars comply with these two basic TAG principles. Us-ing the KBG en benchmark, we then showed that the resulting induced FB-LTAG compares favor-ably with competing symbolic and statistical ap-proaches when used to generate from knowledge base data.

In the current version of the generator, the output is ranked using a simple language model trained on the GENIA corpus. We observed that this often fails to return the best output in terms of BLEU score, fluency, grammaticality and/or meaning. In the future, we plan to remedy this us-ing a ranking approach such as proposed in (Vell-dal and Oepen, 2006; White and Rajkumar, 2009).
