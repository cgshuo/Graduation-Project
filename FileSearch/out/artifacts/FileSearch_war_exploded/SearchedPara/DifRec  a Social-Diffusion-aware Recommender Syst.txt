 Recommender systems used in current online social plat-forms make recommendations by only considering how rel-evant an item is to a specific user but they ignore the fact that, thanks to mechanisms like sharing or re-posting across the underlying social network, an item recommended to a user i propagates through the network and can reach an-other user j without needing to be explicitly recommended to j too. Overlooking this fact may lead to an inefficient use of the limited recommendation slots. These slots can in-stead be exploited more profitably by avoiding unnecessary duplicates and recommending other equally relevant items.
In this work we take a step towards rethinking recom-mender systems by exploiting the anticipated social-network information diffusion and withholding recommendation of items that are expected to reach a user through sharing/re-posting. We devise a novel recommender system, DifRec , by formulating the problem of maximizing the total user engagement as an allocation problem in a properly-defined neighborhoodness graph, i.e., a graph that models the con-flicts of recommending an item to a user who will receive it anyway by social diffusion. We show that the problem is NP-hard and propose efficient heuristics to solve it.
We assess the performance of our DifRec by involving real data from Tumblr platform. We obtain substantial improve-ments in overall user engagement (130 X 190%) over the real recommender system embedded in Tumblr and over various existing recommender systems.
 H.4 [ Information Systems Applications ]: Miscellaneous Algorithms, Optimization, Experimentation Social diffusion aware recommendation, User engagement c Online social platforms like Twitter, Tumblr, Facebook, Google+, Weibo, where users post multimedia content and create (virtual) social relationships have proliferated a lot in the last few years. The amount of posted information keeps increasing to unimaginable levels. Twitter, for in-stance, has 271 million active users who generate more than 6 , 000 tweets per second. Tumblr has a user base of 50 mil-lions and hosts about 200 million blogs and 90 billion posts.
These platforms have even created a new lifestyle and keeping users highly engaged is of utmost importance for their owners. Indeed, increased user engagement is strongly correlated to higher revenue, as the user is more likely to view or click on ads or other items that the platform owner monetizes on. Moreover, when users are engaged with the platform, they contribute in generating content that can be exploited for crucial tasks like profiling or personalization.
Recommender systems constitute a primary component for improving online user experience, and, as such, increase user engagement. Depending on the specific online platform, recommendations concern different types of items. For in-stance, Twitter uses a recommendation service for accounts or tweets, Facebook recommends friends and news, while Tumblr recommends posts. Regardless of the type of rec-ommended item, the primary goal of a recommender sys-tem is to facilitate access to content that is of interest to users, without making them waste time in manually inspect-ing tons of irrelevant information.

A major feature of existing recommender systems is that they make recommendations by focusing only on the spe-cific user to whom the recommendation is directed [22, 15]: an item is recommended to a specific user if it has been recognized as  X  X elevant X  to that user according to a certain measure of relevance. However, in such platforms a user is not an isolated entity, rather she is part of a social network that abstracts relationships among users. The social net-work underlying these online platforms can be represented as a directed graph where the semantics of each edge ( i, j ) is that user j  X  X ollows X  user i , that is, user j has visibility on all content generated or shared/re-posted by user i .
The availability of a social network constitutes a unique opportunity to empower the quality of a recommender sys-tem and get higher overall user engagement. Indeed, when an item (e.g., a news, a post, a URL, a multimedia file) is recommended to user i , it directly contributes to an in-crease in the user i engagement with the platform. However, if this item is spread further by mechanisms like sharing or re-posting, it will also indirectly contribute to the engage-ment of users that are connected to i thr ough the underlying social network. If in turn these users share/re-post the item, other users connected to them will also receive it, and so on.
As a more concrete example, consider an item that has been recognized as relevant to user i of a certain social plat-form, and, as such, it has been recommended to her. As-sume also that the same item is relevant to i  X  X  followers and, as such, has been recommended to them too. If user i re-posts the item, their followers will receive it twice, both via re-posting and from the recommender system. Since the maximum number of items to be recommended to a user is limited to a few at a time (to avoid overloading the user with too much information), the scenario above leads to an undesirable situation where a significant amount of slots available for recommendation is wasted for recommending duplicate items that are expected to reach some users (i.e., i  X  X  followers) via re-posting. Instead, a more sophisticated recommender system could take into account anticipated re-posting and recommend other equally relevant items to the followers of i , thus further increasing their engagement.
In this work we aim at incorporating social-network infor-mation diffusion in the recommendation strategy of recom-mender systems underlying online social platforms. To the best of our knowledge, this aspect is overlooked by all exist-ing recommender systems. Even the so-called social recom-mender systems [14, 25, 7] do not consider it. Indeed, they aim at exploiting the social network only for better assess-ing how relevant an item is to a user, that is, for measuring the relevance of an item to a user by incorporating social contextual information such as the relevance of an item to the social neighborhood of that user. Consider the simple example reported in Figure 1, where N = 5 users are organized in the social network depicted in the figure. Let S = { t 1 , t 2 , t 3 , t 4 , t 5 } be the set of possible items to be recommended to each user, and let the relevance scores of items in S to a user i be de-that each user can be recommended only K = 1 items, and that re-posting always happens, i.e., every item recom-mended to user i is always re-posted and becomes available to all i  X  X  followers. 1
A traditional recommender system would recommend items to a user based only on the relevance scores to that spe-cific user, thus leading to the recommendations illustrated in Figure 1(a), where each user receives the item that is most relevant to her. Hence, users 1,2,3,4,5 are recommended items t 1, t 1, t 5, t 2, t 1, respectively, and the total relevance of the items viewed by users, which include both the recom-mended items and the ones reaching a user via re-posting, is computed as follows. For user 1, the total relevance is 0 . 9, due to t 1 only (she is not follower of anyone). For user 2, the total relevance is 0 . 8: user 2 receives t 1 through both recommendation and re-posting (from user 1), but it clearly counts only once, as duplicates do not contribute to increase relevance. User 3 receives t 5 through recommendation and Figure 1: Example showing how more accurate a soc ial-diffusion-aware recommender system can be with respect to traditional recommender systems. ( a ) Recommendations provided by traditional rec-ommender systems lead to overall relevance of 5 . (b) Social-diffusion-aware recommendations lead to overall relevance equal to 7 . 3 . t 1 through re-posting from user 1, therefore her total rele-vance is 1 . 4. Similarly, the total relevance of users 4 and 5 are equal to 1 . 2 and 0 . 7, respectively. Summing all these individual total relevance scores leads to a relevance of the overall recommendation equal to 5.

Consider now a recommender system that takes into ac-count social-network information diffusion, i.e., it recom-mends items not only based on the relevance scores but also considering the relevance of the item to the users who will receive that item via re-posting (Figure 1(b)). As shown later on, finding the optimal recommendations according to such a rule is an NP-hard problem. However, even solving the problem heuristically may lead to much higher overall relevance than in the case where social-network diffusion is discarded. Indeed, assume that we process the users in se-quence, starting from user 1. Any item recommended to user 1 will reach every other user in the network, thus the item to be recommended to user 1 should correspond to the item that maximizes the sum of the relevance scores among all users; this is item t 1, which leads to a (maximum) total exclude t 1 that will be received anyway via re-posting from user 1, and we pick the item that maximizes the total rele-vance of nodes 2 , 4 , 5, which are the nodes that are reached by re-posting originated in user 2; this corresponds to item t 3, which leads to total relevance of 0 . 4 + 0 . 7 + 0 . 5 = 1 . 6. With similar arguments, one can observe that the items rec-ommended to users 3, 4, and 5 are t 5, t 2, and t 4, respec-tively, and the relevance of the overall recommendation by summing all individual total relevance scores is 7 . 3, which is 46% more than the previous case.
In th is work we aim at rethinking recommender systems underlying online social platforms by incorporating the an-ticipated social-network information diffusion in the rec-ommendation strategy. The main goal is to withhold rec-ommendations of items that will anyway reach a user via sharing/re-posting mechanisms and utilize the limited slots available for recommendations in a more profitable way. To the best of our knowledge, this dimension is hitherto unexplored in the current recommender-systems literature. Specifically, the contributions of our work are as follows.
The rest of the paper is organized as follows. Section 2 discusses related work. In Section 3 we report the main concepts and notations used in the paper. In Section 4 we describe the proposed DifRec recommender system in detail. Section 5 presents an experimental evaluation on a dataset coming from a real online social platform, while Section 6 concludes the paper.
To the best of our knowledge, the proposed DifRec rec-ommender systems has unique features that do not appear in any other existing recommender system defined in the literature. Even the so-called social recommender systems (that we discuss next) do not consider it. Indeed, they aim at exploiting the social network only for better assessing how relevant an item is to a user, that is, for measuring the relevance of an item to a user by incorporating social con-textual information such as the relevance of an item to the social neighborhood of that user.

In the following we however provide an overview of the most prominent works in some neighborhood areas.
 Information propagation. Kempe et al. [16] formulate the problem information propagation (or influence maxi-mization) as follows: given a graph and a weight w ij for edge ( i, j ) denoting influence probability, find a set S of seed users such that the largest number of users in the graph are influenced. Kempe et al. show that the problem is NP-hard and propose a greedy algorithm with constant-factor approximation guarantees.

Subsequent works on the same problem attempt to im-prove performance and reduce complexity of seed selection [18], or study different ways of quantifying influence spread that are reasonably close to that of the greedy algorithm [6, 17]. The same problem is also tackled from different per-spectives, such as a data-driven approach that learns how influence flows in the network [4], a statistical-physics ap-proach [3], and a mechanism-design approach that elicits influence probabilities [20]. The problem of maximizing dif-fusion speed under strategic users that make selfish adoption decisions is studied in [21]. There also exists a body of re-search which focuses on extracting graph and propagation features (e.g., propagation speed) out of observed cascade data through convex maximum-likelihood problem formula-tions [9, 10, 24], or applying diffusion models in the context of Twitter, e.g., to predict diffusion of URLs, given a train-ing set of URL mentions [8].

In [11] the authors consider the problem of campaign design under an opinion-formation model in social net-works. The recent work [19] studies the relation between user (re)posting and social graph evolution in Twitter. The works [12, 13] present models for predicting information dif-fusion. The former model combines social, semantic and temporal node features to make predictions about informa-tion propagation and takes into account local behaviour of users. The latter work presents a survey on information diffusion models and methods for social networks. Recommender systems for social networks. The work [14] uses Bayesian inference on a social network to measure rating similarity between friends and calculates the most probable recommendation through a Bayesian network in-ference framework. Pennacchiotti et al. [25] introduce the problem of tweet recommendation for one user with the ob-jective to maximize overall interestingness of recommended tweets. Two metrics use textual content of tweets to quan-tify interestingness of a tweet to a user. Chen et al. [7] propose an approach for recommending tweets based on a collaborative ranking model. The method relies on latent factors to unveil common user interests over tweet content and user social relations. Also [2] presents an approach for analyzing social media streams to provide personalized topic recommendation to users using matrix factorization to opti-mize the personalized ranking of topics.

Another line of works are implicitly connected to recom-mender systems. In [26], the authors introduce tweet en-tity linking to model user interests. They identify and link named entities that users mention in their tweets and con-struct a graph that shows interdependence between named entities for each user. A user interest propagation algorithm similar to PageRank is proposed to propagate interest scores. In [27], the authors present the use of Co-Factorization Ma-chin es to build predictive models in Twitter.

In [28], an online version of collaborative-filtering-based recommender system is presented, that caters for new rec-ommendation requests and item ratings. The work [29] demonstrates an online tweet recommender system based on matrix factorization to recommend topics (hashtags) accord-ing to real-time user interests. In [30], the authors propose a tweet summarization approach to select tweets that best rep-resent user interests. The time dimension is integrated with an iterative optimization algorithm to select tweets based on novelty, coverage and diversity. All the works above on rec-ommender systems for social networks deal with the tweet or post recommendation problem without consideration of diffusion of information in the network.
 Recommender systems and social-network diffusion. In a recent work Pan et al. [31] integrate collaborative fil-tering and information diffusion to design recommender sys-tems so as to deal with social-update information overload. The diffusion subgraph is used so as to identify similar users to a certain user. However in our work, the diffusion of re-posts is used in a different way that aims at increasing the number of tweets that reach the user through recommenda-tion and re-posts. We model the anticipated diffusion of a recommended item and use it to guide recommendation by recommending posts other than the ones that are likely to reach users via re-posts of others.

Another recommendation approach for increasing diffu-sion of a tweet, that of mentioning users in tweet, is pre-sented in [32]. Users that are recommended (mentioned) in a tweet receive notification about the tweet and may re-tweet it, thus contributing to its diffusion. The problem of select-ing users to mention is formulated as a ranking problem. Contrary to that, we exploit the anticipated social-network diffusion so as to optimize the recommendation of posts to users and thus increase user engagement.

Finally it is worth mentioning that avoiding duplicate (or highly similar) items has been a long-studied problem in information retrieval [1, 5, 23]. Our diffusion-aware recom-mender system can interestingly be viewed as an alternative way to augment the diversity of items seen by users, where the diversity is considered from a new angle, i.e., from a social-network-diffusion perspective.
We consider a set U of N users that are organized in a directed social graph G = ( V, E ), where V = U and E is the set of edges. When a directed edge ( i, j )  X  E exists between users i and j we say that user j  X  X ollows X  i , with the implicit meaning that j has visibility on all the content generated/shared/re-posted by i . We also denote by F i the and by G i the set of users who are followed by i , i.e., G { j  X  V | ( j, i )  X  E } .

In the remainder, we use the generic term  X  X ost X  to refer to any piece of information (e.g., a news, a multimedia file, a URL, a tweet) that circulates through the social network. Thus, the term  X  X ost X  may refer to either content generated by a user or an item provided to a user as a recommendation. We also use the term X  X e-post X  X o denote the action of sharing a piece of information from a user to all her followers. A user i may generate new posts, as well as re-post other posts that she has generated by herself, or have come to her by other user s or through a recommender system.

A user i may therefore receive posts in two different ways: ( i ) via re-posting from users followed by her, ( ii ) through recommendations provided by some recommender system. In this work we focus on the impact of the recommended posts on the overall user engagement, i.e., the engagement of all the users in the network. Particularly, we fix the attention to a specific time point and study a static sce-nario where a set S of posts is available for recommenda-tion, and the system has to recommend to each user i  X  U a set L i  X  S of up to K  X  |S| posts from S . K denotes the maximum number of recommendation slots available for each user ( |L i |  X  K,  X  i  X  U ). In real online platforms, in order to prevent users from information overload, K is typ-ically in the order of a few tens (in some cases, it can even be equal to one). The dynamic scenario can easily be ad-dressed by periodically updating G and S and running the recommendation method on the updated data. At the same time, however, a dynamic scenario clearly comes with addi-tional problems and offers further research directions (e.g., incremental computation of the recommendations, changes in the relevance of a post, and so on), which are beyond the scope of this paper and are deferred to future work.
For each post t  X  S and user i  X  U , we denote by r it the relevance factor (or simply relevance ) of t to i . Factor r quantifies how interesting post t is to user i , and, in general, it is estimated from the history of posts that user i has gen-erated, viewed, or re-posted. Here we assume the relevance factors are computed somehow (many methods exist in the literature [25]); we provide further details on the specific method used in this work in Section 5.

The main symbols and notations used in this paper are summarized in Table 1.
I n this section we describe the proposed social-diffusion-aware DifRec recommender system. A major feature of our DifRec is that its general design principles make it suitable to work on any existing online social platform.

We start by introducing the diffusion model that is used to define the set of users who receive posts re-posted by a user (Section 4.1). Based on this model, we define the concept of neighborhoodness graph and formulate the diffusion-aware recommendation problem as an allocation problem on this neighborhoodness graph (Section 4.2). We show that the problem is NP-hard and propose a heuristic aimed at re-turning suboptimal solutions efficiently (Section 4.3).
We assume each user i is assigned a probability of re-posting w i . This probability depends on how often a user tends to re-post and can be estimated from past interac-tion with the social platform. In Section 5 we describe how we specifically compute these probabilities for the platform considered in our experiments.

As said above, when a post is recommended to user i , it directly contributes to the engagement of that user, but it also indirectly contributes to the engagement of users j  X  X  that follow i . This is because if a post is of interest to user i , she may re-post it, and thus the post will be viewed by her followers as well. In turn, the followers j may re-post that post so that it will reach users that follow them, and so on. It can be seen that the initial direct recommendation of a certain post t to user i results in an information diffusion process in the social graph.

In the following we describe the model of diffusion con-sidered in this work. The ultimate goal of using a diffu-sion model is to define the set of users who are reached by any re-posting initiated by user i . This is exploited later on (Sections 4.2 X 4.3) to prevent the proposed recommender system to recommend a post that will be received anyway via re-posting. We point out that our overall recommenda-tion method is however independent of the specific diffusion model used. Any other model can be easily plugged in. Diffusion model: Reliable node set of source i . The proposed diffusion model exploits re-posting probabilities as-signed to each user to create a probabilistic graph e G that has the same structure as the input graph G and whose edges are assigned an existence probability. More specifically, the probabilistic graph e G is defined as a triple ( V, E, p ), where V and E are the node set and edge set of the input graph G , respectively, and p : E  X  (0 , 1] is a function that assigns a probability of existence to each edge in such a way that p ( i, j ) = w i , for all ( i, j )  X  E .

Given the probabilistic graph e G , the goal is to identify, for each user i  X  V , a set of nodes that are reachable from i with high probability. This corresponds to finding the so-called reliable node set of user i [36]: given a probabilistic graph e G , a source node i , and a probability threshold  X   X  [0 , 1], find the set R i of all nodes that are reachable from i with probability larger that  X  .

Computing the exact reliable node set is a hard prob-lem, as it intrinsically relies on the problem known as two-terminal reliability , which consists in computing the proba-bility that a node is reachable from another in a probabilistic graph and is known to be #P-complete [33, 34]. However, Algorithm 1 Algo rithm ReliableSet : Estimate via Monte Carlo sampling the set R i of all nodes reachable from node i with probability larger than  X  in a probabilistic graph. 1: input: Pr obabilistic graph e G = ( e V , e E, p ), node i  X  2: output: A set of nodes R i  X  e V . 3: c ( j )  X  0,  X  j  X  V 4: for h = 1 , . . . , T do 5: E h  X  X  X  6: for all e  X  e E do 7: rnd  X  a random number  X  [0 , 1] 8: if rnd  X  p ( e ) then 9: E h  X  E h  X  X  e } 10: end if 11: end for 12: R ( h ) i  X  all nodes reachable from i in the graph G 13: c ( j )  X  c ( j ) + 1,  X  j  X  X  ( h ) i 14: end for 15: R i  X  X  j  X  V | c ( j )  X  T / 2 } the reliable set R i of n ode i can be accurately yet efficiently estimated via Monte Carlo sampling. The idea is to sample a set D of deterministic graphs from the probabilistic graph according to edge probabilities and, for each of these deter-ministic graphs, computes the nodes reachable from i . The reliable set R i is eventually computed as the set of all nodes that are reachable from i in the majority of the sampled graphs. A pseudocode of the method is reported as Algo-rithm 1. As the method basically performs a visit of each deterministic graph in D , its time complexity is O ( |D| X | E | ). As a result, computing the reliable node set of all nodes in the input graph takes O ( |D| X | V | X | E | )). Even though this time complexity may seem prohibitive for large graphs, this is not really the case as ( i ) due to the sampling strategy that relies on edge probabilities, deterministic graphs in D have in practice size much smaller than the input probabilis-tic graph e G , and ( ii ) the overall computation can easily be parallelized since reliable node sets are independent from a node to another.

The reliable node set R i of a node i identifies the set of users that will receive (with high probability) any post re-posted by user i . Thus, it can be safely exploited to com-pute the global engagement potential for post t when recom-mended to user i . This is defined as the sum of of relevance factors r jt over all nodes j belonging to R i :
The ultimate goal of the proposed DifRec recommender system is to optimize the targeted recommendation list of posts L i for each user i through exploiting the anticipated diffusion of posts through the social-network graph, where the social diffusion is assumed to take place according to the diffusion model presented in the previous subsection. In the following we devise an optimization problem that captures this aspect and whose solution can give the desired diffusion-awa re recommendations.
 Neighborhoodness graph. Given a social-network graph G = ( V, E ) and the reliable node sets R i for every node i  X  V , we define the (directed) neighborhoodness graph G ( V n , E n ) as follows. The node set of G n corresponds to the node set of G , i.e., V n = V , while a directed edge ( i, j )  X  V exists between users i, j  X  V if and only if node j belongs to the reliable set R i of node i .

The neighborhoodness graph is aimed at modeling the conflicts of assigning a post to a user if she will receive it anyway via re-posting according to the diffusion model at hand. In other words, if an edge ( i, j ) exists in the neigh-borhoodness graph, then all posts generated/re-posted by i will reach j via re-posting, thus meaning that a post t rec-ommended to i should not be recommended to j too as it will get to j anyway. As it will become clear in the sequel, this is exactly the rule that our DifRec follows to make rec-ommendations: the same post is never recommended to two nodes that are adjacent in the neighborhoodness graph. Problem statement. The recommendation of post t to user i is denoted by a variable x it that is defined as follows:
Let x = ( x it : i  X  U , t  X  S ) denote the ( N  X  |S| )-dimensional vector of zeros and ones denoting the assign-ment of posts to users. Under the assumptions above, the problem of maximizing total user engagement is formulated as follows.

Problem 1. Given a social-network graph G = ( V, E ) , a neighborhoodness graph G n = ( V n , E n ) , and a set of posts S , find subject to: X Constraint (3) captures the recommendation space limit of K posts to be assigned to each user. Constraint (4) ensures that the same post is not assigned to any two nodes that are linked with an edge in the neighborhoodness graph. We next prove that the problem is NP-hard.
 Theorem 1. Problem 1 is NP-hard.

Proof. Given a neighborhoodness graph G n , an inde-pendent set I on G n is a subset of vertices so that no two ver-tices in I are adjacent in G n . If nodes are assigned weights (for a given post t , Problem 1 assigns weight E it to each ver-tex i  X  V n ), a Maximum-Weighted Independent Set I t is an independent set exhibiting maximum sum of node weights, and no pair of vertices i, j in I t are adjacent in G n .
Consider Problem 1 for just one post t . The objective is to find the subset I t  X  V n of users i in the neighborhood-ness graph G n to assign the post to (i.e., x it = 1), so that the total weight Algorithm 2 Algo rithm IS ( G n , t ): Heuristic for generating a weighted Independent Set of users from neighborhoodness graph G n = ( V n , E n ) for a post t . 1: input: Neig hborhoodness graph G n , post t , engagement 2: output: An Independent Set I t for post t of weight 3: Initialization: I t  X  X  X  ; W ( I t ) = 0 ; V  X  n  X  V n ; 4: Sort nodes i in decreasing order of E it / (1 + d i ). 5: while V  X  n 6 =  X  do 6: Examine nodes i  X  V  X  n in the order they are sorted 7: if I t  X  X  i } is an independent set for graph G n ( V  X  8: I t  X  X  t  X  X  i } 9: W ( I t )  X  W ( I t ) + E it 10: V  X  n  X  V  X  n \{ i }\F i 11: E  X  n  X  E  X  n \{ ( i, j )  X  E n : j  X  X  i } 12: end if 13: end while nodes in I t are linked with an edge. This exactly corre-sponds to the Maximum-Weighted Independent Set prob-lem (MWIS). The MWIS problem is an extension of the Maximum-Independent-Set (MIS) problem in the sense of relaxing the assumption that all edge weights are equal to one. The MIS problem in a graph G is NP-Hard through its equivalence with the Maximum-Clique problem in the complementary graph of G [35]. As a result, Problem 1 is NP-Hard as well.
Given that Problem 1 is NP-hard, we aim at finding a suboptimum by designing efficient yet accurate heuristics. In particular, we propose a two-step algorithm that works as follows. We consider posts to be recommended one at a time and, for each post t , we first employ a classic greedy algorithm (Algorithm 2) so as to find an independent set of users in the neighborhoodness graph. This set represents the users to whom post t can be recommended without violat-ing constraint 4 in Problem 1. In the second step, a further greedy algorithm (Algorithm 3) takes the output of Algo-rithm 2 and fill the recommendation lists L i of the various users accordingly.
 The algorithm we employ to find an independent set IS ( G n , t ) in the neighborhoodness graph G n for a given post t is a classic greedy algorithm that works as follows. Nodes i are ordered in decreasing order of E it / (1+ d i ), where d out-degree of node i , and they are included in the indepen-dent set in that order. When a node i is included in the in-dependent set, we remove from the graph the outgoing links from node i as well as nodes in F i , i.e., i  X  X  out-neighbors. The rationale is that this way priority is given to: ( i ) nodes exhibiting large weight, that is, users for which recommen-dation of post t would lead to large diffusion effect, i.e., large total relevance for users that receive the post through re-post diffusion, and ( ii ) nodes with small out-degree, which do not incur a large set of conflicting neighbor nodes to which the Algorithm 3 Algo rithm Recommend : Heuristic algorithm for post recommendation to users. 1: input: Set U (= V n ) of users, set S of posts, neigh-2: output: Recommendation of a set L i of K posts to each 3: Initialization: 4: for i  X  V n do 5: L i  X  X  X  6: end for 7: V  X  n  X  V n ; S  X   X  X  8: for t  X  X  do 9: IS ( G n , t ) 10: end for 11: Sort posts t in decreasing order of IS weight W ( I t 12: while V  X  n 6 =  X  and S  X  6 =  X  do 13: Consider posts t in the order they are sorted above 14: for i  X  X  t do 15: L i  X  X  i  X  X  t } 16: if |L i | = K then 17: V  X  n  X  V  X  n \{ i } 18: end if 19: end for 20: S  X   X  X   X  \{ t } 21: end while same post cannot be assigned. Nodes with small out-degree wou ld therefore lead to high post reuse, i.e., recommenda-tion of the same post in the graph. The algorithm above is referred to as Algorithm IS ( G n , t ) and its pseudocode is reported as Algorithm 2.
 In the second stage, we need to find a set of K posts, L , to be recommended to each user i . After running the IS ( G n , t ) algorithm we obtain an independent set I t post t  X  X  . Next, we sort posts in decreasing order of their weight w ( I t ), and we assign posts to users in that order. Whenever for some user j we reach |L j | = K assigned posts, we do not further consider this user for recommending posts. The procedure stops when each user has K recommended posts or when all posts (independent sets) are parsed. The outline of the overall recommendation algorithm is reported as Algorithm 3.
 which is determined by, ( i ) running the IS procedure for each post t  X  S , which takes time linear in the size of the neighborhoodness graph, and ( ii ) sorting the posts in S .
In this section we present the experiments we conducted in order to evaluate the performance of the proposed DifRec recommender system.
We use real data coming from Tumblr, where users can generate content, can get connected to other users, and have the possibility to see the most recent posts of the users con-Table 2: Main characteristics of the dataset used in our evaluation.
 Number of posts per user 26 . 17 Mea n post length 421 . 01 Bytes Med ian post length 84 . 28 Bytes Nu mber of unique users in induced graph 1 . 5 M Mea n indegree neighboorhoodness graph 8 . 70
Mea n outdegree neighboorhoodness graph 10 . 82 Fraction of users 0 10 20 30 40 50 Figure 2: Post and re-post normalized distribution in our dataset. Fraction of users 0 10 20 30 40 50 Figure 3: Normalized in-degree and out-degree dis-tribution of our induced social graph. nected to them. 2 Particularly, the dataset consists of ( i ) a social-network graph that models the follower relationship among users, and ( ii ) posts and re-posts of the various users. Table 2 reports some public statistics.We refer the interested reader to [37] for more in deep statistics about the Tumblr social network, posts, the diffusion behavior and the similar-ity with other similar services such as Twitter or Facebook.
We randomly sample a set of 1 . 5M users among users that have made at least one post/re-post during the time period from October 1st, 2013 until November 8th, 2013. As a social network, we therefore consider the subnetwork induced by this sample of users. For each user in our sample, we also extract all her public posts made during that time period. For each post, we focus on these fields: author, content, and reference to the original post (the latter clearly only if the post has been re-posted). We use the posts from October 2013 to build user profiles, posts from November 1 X  7 2013 to construct the neighborhoodness graph, and posts generated on November 8th for evaluation purpose (i.e., as posts to be recommended).

Figure 2 shows the normalized distribution of posts and re-posts activity in our dataset, while Figure 3 depicts the in-degree and out-degree distribution of the induced social network. Fraction of users 0 10 20 30 40 50 Figure 4: Normalized in-degree and out-degree dis-tribution of our neighboorhoodness graph. Relevance factor. We compute the relevance factor r it of a post t to user i (Section 3) based on the well-established set similarity measure [25], which is define as a convex com-bination between a single-term-based score and a bi-gram-based score derived from the set of all posts that constitute the  X  X rofile X  of a user. As shown in [25], the similarity set measure is strongly correlated to the actual interests of a specific user, thus making it an effective way of assessing how relevant a post is to that user.
 Diffusion model. We experiment with the diffusion model described in Section 4.1. The probability w i of re-posting of user i is computed as the percentage of re-posts of user i among all the posts she has seen in the time-window con-sidered, that is, all the posts that have been posted or re-posted by any of the users followed by i . After analyzing the distribution of values of w i , we set the threshold  X  that defines the reliable set R i of user i to 0 . 02, as a good trade-off between stability of the model and size of the resulting neighborhoodness graph.

With this setting, the neighborhoodness graph that we get has 1 . 5M nodes (users), average in-degree 10 . 8, and average out-degree 8 . 7. Figure 4 depicts the normalized in-degree and out-degree distribution of the resulting neighborhood-ness graph.
 Baselines. We compare the proposed DifRec to the follow-ing baselines: Metrics of performance assessment. We evaluate the performance of our method and the competitors in terms of the average overall user engagement , which is defined based on the relevance factor discussed in Section 3 and the reliable sets R i used in the diffusion model described in Section 4.1. As explained in the previous sections, the overall user en-gagement metric gives direct evidence of the quality of the recommendation.

The idea is to compute, for each user i , the sum of the rel-evance factors r it for all the posts t that are explicitly recom-mended to i by the recommendation method at hand, plus the sum of the relevance factors r it  X  for all the posts t reach user i through diffusion according to the aforemen-tioned diffusion model. As the number of posts ultimately recommended to any user can vary from a user to another and from a recommendation method to another ( K may be only an upper bound to the number of recommended posts), we average these two sums over the number of posts recom-mended. The ultimate metric we consider is the average of such a quantity over all users in the network.

Formally, for a user i , let R i denote the set of users whose corresponding reliable set contains user i (excluding i her-self), i.e., R i = indicator function, which is equal to one if the argument is true, zero otherwise). The (average) user engagement E ( L , i ) of a user i given a recommendation L = {L i } is defined as the sum of two terms: the relevance factor of the posts explicitly recommended to her (i.e., the posts in her recommendation list L i ), and the relevance factor of the posts coming to her through diffusion (i.e., the posts present in the recommendation lists of all the users in R i ); the sum of these two terms is then averaged by the size of the i  X  X  recommendation list, so as to take into account that recom-mendation lists may in general have variable size. Formally:
The (average) overall user engagement of a recommenda-tion L is eventually computed as:
Here we present the results of our evaluation. We provide two different evaluations: the other competing methods.
 We report the details of both the evaluations next.
Table 3 reports the average overall user engagement of our DifRec compared to the real recommender system and the two other baseline recommender system described above. The set of posts considered correspond to the posts recom-mended by the real recommender system.

Our method turns out to outperform all competitors at least by a factor that ranges from 129% to 191% for different values of K . This implies that DifRec recommends K posts that are most relevant and interesting to the user on average. These K recommended posts are most often different from the ones that will anyway reach the user through re-posts dif-fusion. Another observation is that the average overall user engagement for all methods is increasing as K gets larger, but only for small/moderate values of K , i.e., up to K = 5 or K = 10. For larger values of K ( K = 10 , 15 , 20 , 25), the average engagement decreases. This can be explained by the fact that, as K increases, the relevance factors of recommended posts decrease (cf. Equation (5)).

The average overall user engagement of our method in-creases up to K = 5 and slightly decreases by 5  X  10% for larger values of K . However, despite that slight decrease in average engagement, the percentage benefit of DifRec com-pared to other methods increases from 129% or 177% up to 191% as K increases. This implies that our method tends to efficiently exploit the recommendation space better by recommending posts other than the ones that will reach the user through repost diffusion.

Similar performance benefits can be observed when com-paring with two baselines over a more general, randomly drawn dataset in Table 4.

More details about both comparisons are shown in Ta-bles 5 and 6, where we report cumulative distributions about percentage of users having (average) overall user engagement larger than various values. It can be observed that the dis-tribution exhibited by the proposed DifRec is above the ones of the other competitors: for every value of user engagement, the proposed DifRec exhibits percentage values larger than all the competitors, thus further attesting its superiority.
In this work we propose DifRec , a novel recommender sys-tem that aims at increasing the overall user engagement in online social platforms by taking into account the social-network diffusion process. In particular, we take into ac-count the fact that, when a user shares or re-posts a recom-mended item, her followers indirectly receive the post. Con-sidering this aspect, that, to the best of our knowledge, has never been considered by any existing recommender systems, may allow for better selecting the items to be recommended to a user, by avoiding for instance to recommend to her an item that would have reached her anyway via re-posting.
We evaluate the proposed DifRec recommender systems by using real data coming from the Tumblr platform. We show that our DifRec improves upon the overall user engagement of the real recommender system embedded in that platform and various other existing recommender systems up to a factor of 130 X 190%.
 This work was supported by the LEADS project (ICT-318809) funded by the European Community. recommender system ( K = 10 and K = 20 ).
