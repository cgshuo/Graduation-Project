 Yang Yang  X  Ryan N. Lichtenwalter  X  Nitesh V. Chawla Abstract Link prediction is a popular research area with important applications in a variety of disciplines, including biology, social science, security, and medicine. The fundamental requirement of link prediction is the accurate and effective prediction of new links in net-works. While there are many different methods proposed for link prediction, we argue that the practical performance potential of these methods is often unknown because of chal-lenges in the evaluation of link prediction, which impact the reliability and reproducibility of results. We describe these challenges, provide theoretical proofs and empirical examples demonstrating how current methods lead to questionable conclusions, show how the fallacy of these conclusions is illuminated by methods we propose, and develop recommendations for consistent, standard, and applicable evaluation metrics. We also recommend the use of precision-recall threshold curves and associated areas in lieu of receiver operating charac-teristic curves due to complications that arise from extreme imbalance in the link prediction classification problem.
 Keywords Link prediction and Evaluation  X  Sampling  X  Class imbalance  X  Threshold curves  X  Temporal effects on link prediction 1 Introduction 28 , 42 , 50 ]. Typically, it is approached specifically as the task of predicting new links given some set of existing nodes and links.

Existing nodes and links may be present from a prior time period, where general link links may also represent some portion of the topology in a network whose exact topology is difficult to measure. In this case, link prediction can identify or substantially narrow possibilities that are difficult or expensive to determine through direct experimentation [ 32 , 47 , 49 ]. Thus, even in domains where link prediction seems impossibly difficult or offers a high ratio of false positives to true positives, it may be useful [ 7 , 8 ]. Formally, we can state the link prediction problem as below (first implicitly defined in the work of [ 29 ]): Definition 1.1 In a network G = ( V , E ) , V is the set of nodes and E is the set of edges. The link prediction task is to predict whether there is or will be a link e ( u ,v) between a pair of nodes u and v ,where u ,v  X  V and e ( u ,v) /  X  E .
 Generally the link prediction problem falls into two categories:  X  Predict the links that will be added to an observed network in the future. In this scenario,  X  Infer missing links from an observed network. The prediction of missing links is mostly The prediction of future links considers network evolution, while the inference of missing links considers a static network [ 29 ]. In either of the two scenarios, instances in which the link forms or is shown to exist compose the positive class, and instances in which the link does not form or is shown not to exist compose the negative class. The negative class represents the vast majority of the instances, and the positive class is a small minority. 1.1 The evaluation conundrum Link prediction entails all the complexities of evaluating ordinary binary classification for imbalanced class distributions, but it also includes several new parameters and intricacies that make it fundamentally different. Real-world networks are often very large and sparse, involving many millions or billions of nodes and roughly the same number of edges. Due to the resulting computational burden, test set sampling is common in link prediction evalua-tion [ 3 , 28 , 33 ]. Such sampling, when not properly reflective of the original distribution, can greatly increase the likelihood of biased evaluations that do not meaningfully indicate the true performance of link predictors. The selected evaluation metric can have a tremendous bearing on the apparent quality and ranking of predictors even with proper testing distributions [ 41 ]. The directionality of links also introduces issues that do not exist in typical classification tasks. Finally, for tasks involving network evolution, such as predicting the appearance of links in the future, the classification process involves temporal aspects . Training and testing set constructs must appropriately address these nuances.

To better describe the intricacies of evaluation in the link prediction problem, we first depict the framework for evaluation [ 26 , 38 , 39 , 52 ]inFig. 1 . Computations occur within network snapshots based on particular segments of data. Comparisons among predictors require that evaluation encompasses precisely the same set of instances whether the predictor is unsupervised or supervised. We construct four network snapshots:  X  Training features: data from some period in the past, G t  X  x up to G t  X  1 , from which we  X  Training labels: data from G t , the last training-observable period, from which we derive  X  Testing features: data from some period in the past up to G t , from which we derive feature  X  Testing labels: data from G t + 1 , from which we derive class labels for the testing feature
A classifier is constructed from the training data and evaluated on the testing data. There are always strictly divided training and testing sets, because G t + 1 is never observable in training.

Note that for supervised methods, the division of the training data into a feature and label network is not strictly necessary. Edges from the training data may be used to calculate features for instances with a positive class label, and missing edges in the training data might be used to calculate features for instances with negative class labels (Fig. 2 ). Nonetheless, division into a feature and label network may increase both the freshness and power of the data being modeled, because the links that appear are recent and selected according to the underlying evolution process. Testing data must always be divided in feature and label networks where labels are drawn from unobserved data in G t + 1 .

Test set sampling is a common practice in link prediction evaluation [ 3 , 25 , 26 , 28 , 33 , 35 , 44 , 45 , 52 ]. Link prediction should be evaluated with a complete, unsampled test set whenever possible. Randomly removing and subsequently predicting  X  X est edges X  should be a last resort innetworkswheremultiplesnapshotsdonotexist.Eveninnetworksthatdonotevolve,suchas protein X  X rotein interaction networks, it is possible to use high-confidence and low-confidence edges to construct different networks to more effectively evaluate models. Removing and predicting edges can remove information from the original network in unpredictable ways [ 46 ], and the removed information has the potential to affect prediction methods differently. More significantly, in longitudinal networks, randomly sampling edges for testing from a single data set in a supervised approach reflects prediction performance with respect to a random process instead of the true underlying regulatory mechanism.
The reason sampling seems necessary, and a primary reason link prediction is such a challenging domain within which to evaluate and interpret performance, is extreme class imbalance. We extensively analyze issues related to sampling in Sect. 4 and cover the sig-nificance of class imbalance on evaluation in Sect. 3.3 . Fairly and effectively evaluating a link predictor in the face of imbalance requires determining which evaluation metric to use (Sects. 3 , 6 and 7 ), whether to restrict the enormous set of potential predictions, and how best to restrict the set if so.
 Another issue is directionality, for which there is no analog in typical classification tasks. In undirected networks, the same method may predict two different results for a link between v and v b depending on the order in which vertices are presented. There must be one final judgment of whether the link will form, but that judgment differs depending on arbitrary assignment of source and target identities. We expand upon this in Sect. 3.4 .

All of these issues impede the production of fair, comparable results across published methods. Perhaps even more importantly, they interfere with rendering judgments of perfor-mance that indicate what we might really expect of our prediction methods in deployment scenarios. It is difficult to compare from one paper to the next, and many frequently employed evaluation methods produce results that are unfairly favorable to a particular method or other-wise unrepresentative of expected deployment performance. We seek to provide a reference for important issues to consider and a set of recommendations to those performing link prediction research. 1.2 Contributions We explore a range of issues and challenges that are germane to the evaluation of link predictors. Some of them are discussed in our previous work [ 27 ], of which this paper is a substantial expansion. We introduce several formalisms entirely absent from the previous work and provide much more principled coverage of underlying issues and challenges with evaluating link prediction methods. In addition to more complete coverage of previously published topics, the extension includes the following significant advances over existing work:  X  Additional data sets for stronger empirical demonstration.  X  Theoretical proof of several statements surrounding evaluation.  X  Discussion of the advantages and disadvantages of another popular metric of link pre- X  Exploration of evaluation characteristics when considering link prediction according to
The point of this work is not to illustrate the superiority of one method of link prediction over another, which distinguishes it from most previous link prediction publications. Our objective is to identify fair and effective methods to evaluate link prediction performance. Overall, our contributions are summarized as follows:  X  We discuss the challenges in evaluating link prediction algorithms.  X  We empirically demonstrate the effects of test set sampling on link prediction evaluation  X  We demonstrate that commonly used evaluation metrics lead to deceptive conclusions  X  We propose guidelines for a fair and effective framework for link prediction evaluation. 2 Preliminaries 2.1 Data and methods We report all results on four publicly available longitudinal data sets. We will hence refer to these data sets as Condmat [ 37 ], DBLP [ 11 ], Enron [ 24 ], and Facebook [ 51 ]. They are constructed by moving through sequences of collaboration events (Condmat and DBLP) or communication events (Enron and Facebook). In Condmat and DBLP, each collaboration of k individuals forms an undirected k -clique with weights in inverse linear proportion to k . The detailed information about these data sets are presented in Table 1 . These networks are weighted and undirected.

We use three different link prediction methods, and each method represents a different modeling approach. The preferential attachment predictor [ 5 , 6 , 36 ] uses degree product and represents predictors based on node statistics. The Adamic/Adar predictor [ 2 ]represents common neighbors predictors. The PropFlow predictor [ 26 ] represents predictors based on paths and random walks.

We emphasize here that the point of this work is not to illustrate the superiority of one method of link prediction over another. It is instead to demonstrate that the described effects andargumentshaverealimpactsonperformanceevaluation.Ifweshowthattheeffectspertain in at least one network, it follows that they may exist in others and must be considered. 2.2 Definitions and terminology Network: A network is represented as G = ( V , E ) ,where V is the set of nodes and E is the set of edges. For two nodes u ,v  X  V , e ( u ,v)  X  E if there is a link between nodes u and v .
Neighbors: In a network G = ( V , E ) , for a node u , ( u ) ={ v | ( u ,v)  X  E } represents the set of neighbors of node u .

Link prediction: Thelinkpredictiontaskinanetwork G = ( V , E ) is to determine whether there is or will be a link e ( u ,v) between a pair of nodes u and v ,where u ,v  X  V and e ( u ,v) /  X  E .

Common neighbors: For two nodes, u and v with sets of neighbors ( u ) and (v) , respec-tively, the set of their common neighbors is defined as ( u )  X  (v) , and the cardinality of the set is | ( u )  X  (v) | . Often as | ( u )  X  (v) | grows, the likelihood that u and v will be connected also increases [ 36 ].

Adamic/Adar: In the link prediction problem, the Adamic/Adar [ 2 ] metric is defined as below, where n  X  ( u )  X  (v) is the set of common neighbors of u and v :
Preferential attachment: The Preferential Attachment [ 5 ] metric is the multiplication of the degrees of nodes u and v :
PropFlow: The PropFlow [ 26 ] method corresponds to the probability that a restricted, outward-moving random walk starting at u ends at v using link weights as transition proba-bilities. It produces a score PropFlow ( u ,v) that can serve as an estimation of the likelihood of new links.
 Geodesic distance: The shortest path length between two given nodes u and v .

Prediction terminology: TP stands for true positives , TN stands for true negatives , FP stands for false positives ,and FN stands for false negatives . P stands for positive instances , and N stands for negative instances .
 Sensitivity/true positive rate: Specificity/true negative rate: Precision: R ecall:
Fallout/false-positive rate: The false-positive rate (fallout in information retrieval) is defined as below: Accuracy:
Top K Predictive Rate/R-precision: The top K predictive rate is the percentage of correctly classified positive samples among the top K instances in the ranking produced by a link predictor P . We denote the top K predictive rate as TPR K ,where K is a definable threshold. TPR K is equivalent to R-precision in information retrieval.

ROC: The receiver operating characteristic (ROC) represents the performance trade-off between true positives and false positives at different decision boundary thresholds [ 14 , 34 ]. AUROC: Area under the ROC curve.

Precision-recall curve: Precision-recall curves are also threshold curves. Each point cor-responds to a different score threshold with a different precision and recall value [ 10 ].
AUPR: Area under the precision-recall curve. 3 Evaluation metrics and existing challenges Evaluation metrics typically used in link prediction overlap those used in any binary clas-sification task. They can be divided into two broad categories: fixed-threshold metrics and threshold curves. Fixed-threshold metrics suffer from the limitation that some estimate of a reasonable threshold must be available in the score space. In research contexts, where we are curious about performance without necessarily being attached to any particular domain or deployment, such estimates are generally unavailable. Threshold curves, such as the receiver operating characteristic (ROC) curve [ 14 , 34 ] and derived curves like cost curves [ 13 ]and precision-recall curves [ 10 ], provide alternatives in these cases. 3.1 Fixed-threshold metrics Fixed-threshold metrics rely on different types of thresholds: prediction score, percentage of instances, or number of instances. In link prediction specifically, there are additional constraints. Some link prediction methods produce poorly calibrated scores. For instance, it often may not hold that two vertices with a degree product of 10,000 are 10 times as likely to form a new link as two with a degree product of 1,000. This is not critical when the goal of the modelistorank;however,whenthescoresoflinkpredictorsarepoorlycalibrated,itisdifficult to select an appropriate threshold for any fixed-threshold performance evaluation metric. A concrete and detailed example is provided in Sect. 6 , where we find that even a minor change of threshold value can lead to a completely different evaluation of link prediction models.
In Fig. 3 we provide the probability density functions and cumulative density functions for two prediction methods (Adamic/Adar and Preferential Attachment) on DBLP. For ease of interpretation, we use the inverse values of Preferential Attachment and Adamic/Adar, so smaller values of Preferential Attachment and Adamic/Adar indicate higher likelihood of occurrence. In Fig. 3 we observe that preferential Attachment and Adamic/Adar have different types of distributions. This makes it difficult to identify a meaningful threshold based on normalized prediction score. Any attempt to select a value-based threshold will produce an unfair comparison between these two prediction methods.

A cardinality-based threshold is also problematic. We shall presently advocate exploring links by geodesic distance . Within this paradigm, it makes little sense to speak about the TPR K results as a percentage of the total number of potential links in . Resources to explore potential links in model deployment scenarios are unlikely to change because the potential positives happen to span a larger distance. It is appropriate to use percentages with TPR K only when = 2or  X  X  X  and only when there is a reasonable expectation that K is logical within the domain. On the other hand, when using an absolute number of instances, if the data do not admit a trivially simple class boundary, we set classifiers up for unstable evaluation by presenting them with class ratios of millions to one and taking infinitesimal K . In Sect. 6 , we discuss TPR K evaluation in greater detail.
 K equivalents [ 4 , 12 , 38 , 52 , 53 ] are used commonly in link prediction literature, we need to be cautious when results come only in terms of fixed thresholds. 3.2 Threshold curves Due to the rarity of cases when researchers are in possession of reasonable fixed thresh-olds, threshold curves are commonly used in the binary classification community to express results. They are especially popular when the class distribution is highly imbalanced and Threshold curves admit their own scalar measures, which serve as a single summary statistic of performance. The ROC curve shows the true positive rate with respect to the false-positive rate at all classification thresholds, and its area (AUROC) is equivalent to the probability of a randomly selected positive instance appearing above a randomly selected negative instance in score space. The precision-recall (PR) curve shows precision with respect to recall at all classification thresholds. It is connected to ROC curves such that one precision-recall curve dominates another if and only if the corresponding ROC curves show the same domination [ 10 ]. We will use ROC curves and precision-recall curves to illustrate our points and even-tually argue for the use of precision-recall curves and areas. Figure 4 illustrates a depiction of the two curve metrics. 3.3 Class imbalance In typical binary classification tasks, classes are approximately balanced. As a result, we can calculate expectations for baseline classifier performance. For instance, the expected of a random classifier, an all-positive classifier, and an all-negative classifier are 0.5.
Binary classification problems that exhibit class imbalance do not share this property, and the link prediction domain is an extreme example. The expectation for each of the classification metrics diverges for random and trivial classifiers. Accuracy is problematic because its value approaches unity for trivial predictors that always return false. Correct classificationofrarepositiveinstancesissimultaneouslymoreimportantsincethoseinstances represent exceptional cases of high relative interest. Classification is an exercise in optimizing some measure of performance, so we must not select a measure of performance that leads to a useless result. ROC curves offer a baseline random performance of 0.5 and penalize trivial predictors when appropriate. Optimizing ROC optimizes the production of class boundaries that maximize TP while minimizing FP . Precision and precision-recall curves offer baseline performance calibrated to the class balance ratio, and this can present a soberer view of performance. 3.4 Directionality In undirected networks, an additional methodological parameter pertains in the task of eval-uation, which is rarely reported in the literature. In directed networks, an ordered pair of vertices uniquely specifies a prediction, because order implies edge direction. In undirected networks, the lack of directionality renders the order ambiguous since two pairs map to one edge. For any given edge, there are two potentially different prediction outputs. For some prediction methods, such as those based on node properties or common neighbors, the pre-diction output remains the same irrespective of ordering, but this is not true in general. Most notably, many prediction methods based on paths and walks, such as PropFlow [ 26 ]and Hitting Time [ 28 ], implicitly depend on notions of source and target.
 Definition 3.1 In an undirected network G = ( V , E ) , for a link prediction method P ,ifthere exists a pair of nodes u and v such that P ( u ,v) = P (v, u ) ,then P is said to be directional .
Contemplate Fig. 5 with the goal of predicting a link between v a and v b . Consider the percentage of = 2 paths starting from v a that reach v b versus the percentage of = 2paths starting from v b that reach v a . Clearly, all = 2 paths originating at v b reach v a , whereas only a third of the = 2 paths originating at v a reach v b . In a related vein, consider the probability of reaching one vertex from another in random walks. Clearly, all walks starting at v b that travel at least two hops must reach v a , whereas the probability of reaching v b from v in two hops is lower. Topological prediction outputs may diverge whenever v a and v b are in different automorphism orbits within a shared connected component.

This raises the question of how to determine the final output of a method that produces two different outputs depending on the input. Any functional mapping from two values to a single-value suffices. Selection of an optimal method depends on both the predictor and the scenario and is outside the scope of this paper. Nonetheless, it is important for reasons of reproducibility not to neglect this question when describing results for directional predictors.
The approach consistent with the process for directed networks would be to generate a ranked list of scores that includes predictions with each node alternately serving as source and destination. This approach is workable in a deployment scenario, since top-ranked outputs may be selected as predicted links regardless of the underlying source and target. It is not feasible as a research method for presenting results, however, because the meaning of the resulting threshold curves is ambiguous. There is also no theoretical reason to suspect any sort of averaging effect in the construction of threshold curves.

To emphasize this empirically, we computed AUROC in the undirected Condmat data set for two methods using the PropFlow predictor (predicting links within 2-hop dis-tance). The PropFlow predictor is directional, so for two nodes u and v , it is possible that PropFlow ( u ,v ) = PropFlow ( v, u ) . The first method includes a prediction in the output for both underlying orderings, and the resulting area is 0.610. The second method computes the arithmetic mean of the predictions from the two underlying orderings to produce a single final prediction for the rankings, and the resulting area is 0.625 (Fig. 6 ). 4 Test set sampling and class imbalance Test set sampling is popular in link prediction domains, because sparse networks usually include only a tiny fraction of the O ( | V | 2 ) links supported by V . Each application of link prediction must provide outputs for what is essentially the entire set of | V | 2 links. For even moderately sized networks, this is an enormously large number that places unreason-able practical demands on processing and even storage resources. As a result, there are many sampling methods for link prediction testing sets. One common method is selecting a subset of edges at random from the original complete set [ 3 , 45 , 48 , 52 , 53 , 56 ]. Another is to select only the edges that span a particular geodesic distance [ 26 , 31 , 43 , 44 , 55 ]. Yet another is to select edges so that the subdistribution composed by a particular geodesic distance is approximately balanced [ 35 , 52 ]. Finally, any number of potential methods can select edges that present a sufficient amount of information along a particular dimension [ 28 , 33 ], for instance selecting only the edges where each member vertex has a degree of at least 2.

When working with threshold-based measures, any sampling method that removes neg-ative class instances above the decision threshold can unpredictably raise most information retrieval measures. Precision is inflated by the removal of false positives. In top K measures, recall is inflated by the opportunity for additional positives to appear above the threshold after the negatives are removed. This naturally affects the harmonic mean, F -measure. Accuracy is affected by any test set modification since the number of incorrect classifications may change. Clearly, we cannot report meaningful results with these threshold-based measures when performing any type of sampling on the test set. The question is whether it is fair to sample the test set when evaluating with threshold curves.

At first it may seem that subsampling negatives from the test set has no negative effects on ROC curves and areas. There is a solid theoretical basis for this belief, but issues specific to link prediction relating to extreme imbalance cause problems in practice. We will first describe these problems, and why using evaluation methods involving extreme subsampling are problematic. Then, we will show that test set sampling actually creates what we believe is a much more significant problem with the testing distribution. 4.1 Impact of sampling on ROC Theoretically, ROC curves and their associated areas are unaffected by changes in class distribution alone. This is a source of great appeal, since it renders consistent judgments even as imbalance becomes increasingly extreme. Consequently, it is theoretically possible to fairly sample negatives from the test set without affecting ROC results. The proper way to model fair random removals of test instances closest to the actual ROC curve construction step is as random selection without replacement from the unsorted or sorted list of output scores. As long as the distribution remains stable in the face of random removals, the ROC curve and area will remain unchanged.

In practice, we do not want to waste the effort necessary to generate lists of output scores only to actually examine a fractional percentage of them. We must instead find a way to transfer our fair model of random removals in the ranked list of output scores to a network sampling method while theoretically preserving all feature distributions. The solution is to randomly sample potential edges. Given a network in which our original evaluation strategy was to consider a test set with every potential edge based on the previously observed network, we generate an appropriately sized random list of edges that do not exist in the test period.
As suggested by Hoeffding X  X  inequality [ 19 ], in machine learning the test set has finite-sample variance. When the test set is sampled, the performance is as likely to be pleasantly surprising as unpleasantly surprising, though likely not to be surprising at all [ 1 ]. We provide a concrete mathematical proof specifically in the link prediction domain. Theoretically, we can prove that with a random sampling ratio p of negative instances to final testing set size, the variance of measured performance increases as p decreases.
 Theorem 4.1 For any link predictor P , the variance of measured performance increases when the negative class sample percentage p decreases.
 Proof For a specific predictor P , we assume that among all N negative instances there are C instances that can be classified correctly by P while the other N  X  C instances cannot be classified correctly by P .

Based on the fact that we randomly sample Np negative instances for inclusion in the final test set, the number of negative instances that can be detected by predictor P among these Np negative instances is a random variable X that has probability mass function: Trivially, X follows a Hypergeometric distribution and the variance of X is: Since the performance X / Np has variance following: it follows that when p decreases Var X Np increases.
From Eq. 1 , we can observe that the variance of the measured performance increases linearly with 1 p .

WedemonstratetheresultsofthisrandomsamplingstrategyempiricallyinFig. 7 (unsuper-vised learning) and Fig. 8 (supervised learning). We conduct these experiments for AUROC but not for AUPR, because precision-recall curves respond to the modifications of the testing set if the class distribution changes [ 10 ]. The experimental settings follow. We explore the effect of sampling of negative class instances in the testing set. We include in our experi-randomly sample the testing set 100 times and calculate the AUROC for each. Thus for each sampling rate, we have 100 AUROC scores. In Figs. 7 and 8 , we report the mean, minimum, and maximum of these scores.

The AUROC remains stable down to 1% of the negative class in Condmat and only down to 10% of the negative class in Facebook for unsupervised learning. Below this, it destabilizes. While stability to 1% sampling in Condmat may seem quite good, it is critical to note that the imbalance ratios of link prediction in large networks are such that 1% of the complete original test set often still contains an unmanageably large number of instances. Similarly in Fig. 8 , the AUROC remains stable only down to 10% negative class sampling for both DBLP and Enron in supervised learning circumstance.

The dashed vertical line shows the AUROC for sampling that produces a balanced test set. The area deviates by more than 0.007 for PropFlow and more than 0.01 for preferential attachment, which may exceed significant variations in performance across link predictors. Further sampling causes even greater deviations. These deviations are not a weakness of the AUROC itself but are indicative of instability in score rankings within the samples. This instability does not manifest itself uniformly, and it may be greater for some predictors than for others. In Condmat in Fig. 7 , preferential attachment exhibits greater susceptibility to the effect, while in Facebook in Fig. 7 , PropFlow has the greatest susceptibility. The ultimate significance of the effect depends upon many factors, such as sampling percentage of negative class, properties of the predictor, and network size. From the proof of Theorem 4.1 , we can observe that the variance is also influenced by the negative instances number N .Thisis validated empirically by variations in stability across negative class sample ratios in different data sets. Condmat is stable down to 1% sampling of negative class instances while DBLP, Enron, and Facebook are stable only down to 10% sampling of negative class instances. In sparse networks G = ( V , E ) , we can prove that the variance changes according to the order of magnitude of | V | 2 .
 Definition 4.1 Let a network G = ( V , E ) be described as sparse if it maintains the property |
E |= k | V | for some constant k | V | .
 Corollary 4.2 Given constant sampling ratio p, and that at most | V | nodes may join the sparse network, and that the prediction ability of P does not change in different sparse where Var  X  is the performance variance of the link predictor P in the sparse network G  X  , Var  X  is the performance variance of the link predictor P in the sparse network G  X  , and | V  X  | and | V  X  | are node counts in the network G  X  and G  X  .
 Proof As we have proved in Theorem 4.1 , the variance of the performance of P can be written as: Due to the assumption that the prediction ability of P does not change in G  X  and G  X  ,we Now we prove that N  X   X  ( | V  X  | 2 ) , N  X   X  ( | V  X  | 2 ) : The number of all possible links in ( | V | 2 ) .Let V nodes and E edges join the network in the future. Since the evolved network G is still a sparse network and V  X | V | , we know that | V |+| V | X  2 | V | X  ( | V | ) and |
E |+| E | X  ( | V | ) . The negatives are given as | ( E E ) C | X  ( | V | 2 ) .Trivially,wehave
We prove that theoretically the variance changes approximately with the order of magni-regarding the impact of negative class sampling with unsupervised predictors also hold for supervised predictors. In Fig. 7 , the Condmat data set has a larger number of nodes than the Facebook data set, and unsurprisingly, we observe that for the same predictor with the same negative class sample ratio, the variance in Facebook is much larger than in Condmat. For supervised learning, the size of DBLP is smaller than Enron and the variance for Enron is much smaller than for DBLP.

This theoretical demonstration and the empirical results show grave danger in relying on results of sampled test sets in the link prediction domain. One of the most common strategies is to undersample negatives in the test set so that it is balanced. In link prediction, class balance ratios, often easily exceeding thousands to one, are likely to leave resampled test sets that do not admit sufficiently stable evaluation for meaningful results. 4.2 The real testing distribution We must understand what performance we report when we undersample link prediction test sets. Undersampling is presumably part of an attempt at combating unmanageable test set sizes and describing the performance of the predictor on the network as a whole. This type of report is common, and issues of stability aside, it is theoretically valid. We question, however, whether the results that it produces actually convey useful information. Figure 10 compares AUROC overall to the AUROC achievable in the distinct subproblem created by dividing the task by geodesic distance.

We first consider the results for the preferential attachment predictor. The general conclu-sion across all data sets is that the apparent achievable performance is dramatically higher in the complete sets of potential edges than the performance in the sets restricted by distance. The extreme importance of geodesic distance in determining link formation correlates highly with any successful prediction method. The high-distance regions contain very few positives and effectively append a set of trivially recognizable negatives to the end. This increases the probability of a randomly selected positive appearing above a randomly selected negative, the AUROC. This phenomenon is described as the locality of link formation in growing net-works [ 23 , 30 , 40 , 54 ]. In Fig. 9 , we study the distribution of geodesic hops induced by each new links for four data sets. The number of new links decays exponentially with increasing hop distance between nodes.

Beyond the statistics presented in Fig. 10 , we compare the AUROCs of two surrogate scenarios. In the first scenario, we simulate the = 2 subproblem, denoted as P sub .In the second scenario, we simulate the complete link prediction problem  X  X  X  , denoted as P full .Thereare p s positive instances and n s negative instances in P sub ,andthereare p f positive instances and n f negative instances in P full . We designate a parameter  X  to control the performance of the predictor P . In the simulation, the positive instances are randomly allocated among the top  X  slots in the ranking list. Additionally to simplify the simulation, we assume that the prediction method P has the same performance in these two problems. Because P sub is a subproblem of P full , in order to simulate P full more precisely, we require further details as follows:  X  Among p f positive instances, p s of them are randomly allocated within the top  X ( p s +  X  Then, p f  X  p s positive instances are randomly allocated within the top  X ( p f + n f ) slots
The parameter  X  is designed to simulate the performance of the predictor, while the parameter  X  is designed to simulate the impact of appending negatives. Table 2 shows the results of this comparison. In order to comprehensively measure the statistical significance of differences between P f and P s , we compare the AUROCs of P f to those of P s by 100,000 simulations under different settings of  X  and  X  . The numbers of p s , n s , p f ,and n f are taken from the DBLP data set.

In Table 2 , the predictability  X  values correspond to a high AUROC, 0.9, and to a worst-case AUROC, 0.5. When the impact of appending negatives is small (i.e.,  X  = 10), the AUROC of P f is most dramatically greater than the AUROC of P s , with p value less than 0.0001. Even if the impact of appending negatives is large (i.e.,  X  = 50), the AUROC of P f is much larger than that of P s , with p-value at most 0.048. The above observation is not significantly influenced by the performance of the predictor P .

In Fig. 10 , we can observe that different prediction methods have different behaviors for varying subproblems. In the DBLP data set, preferential attachment is unstable across geo-desic distances while PropFlow exhibits monotonic behavior. This is because the preferential attachment method is inherently  X  X on-local X  in its judgment of link formation likelihood. Additionally, as discussed earlier, the difference between AUROC in  X  X  X  and AUROC in distinct subproblems (i.e., = 2) is diminished when the size of the network decreases.
The effect is exaggerated for PropFlow and for other ranking methods that inherently scale according to distance, such as rooted PageRank and Katz. In such cases, the ROC curve for the amalgamated data approximates concatenation of the individual ordered outputs, which inherently places the distances with higher imbalance ratios at the end where they inflate the overall area. Figure 10 shows the effect for the PropFlow prediction method on the right.
For PropFlow, the apparent achievable performance in Condmat is 36.2% higher for the overall score ordering than for the highest of the individual orderings! This result also has important implications from a practical perspective. In the Condmat network, PropFlow appears to have a higher AUROC than preferential attachment (  X  X  X  ), but the only distance at which it outperforms preferential attachment is the 2-hop distance. Preferential attachment is a superior choice for the other distances in cases where the other distances matter. These details are hidden from view by ROC space. They also illustrate that the performance indi-cated by overall ROC is not meaningful with respect to deployment expectations and that it conflates performance across neighborhoods with a bias toward rankings that inherently reflect distance.

Considerthedatadistributionofthelinkpredictionproblemusedinthispaper.InCondmat, there are 148.2 million negatives and 29,898 positives. The ratio of negatives to positives is 4,955 to 1. There are 1,196 positives and 214,616 negatives in = 2. To achieve a 1 to 1 ratio with random edge sampling, statistical expectation is for 43.3 2-hop negatives to remain. The 2-hop neighborhood contains 30% of all positives, so clearly it presents the highest baseline precision. That border is the most important to capture well in classification, because improvements in = 2 discrimination are worth much more than improvements at higher distances. 16% of all positives are in the = 3 subproblem, so the same argument applies with it versus higher distances.

The real data distribution on which we report performance when we perform this sampling is the relatively easy boundary described by the highly disparate = 2 positives and high-distance negatives. Figure 11 further substantiates this point by illustrating the minimal effect of selectively filtering all negatives from low-distance neighborhoods. We know that performance in the = 2 is most significant because of the favorable class ratio and that improvements in defining this critical boundary offer the greatest rewards. Simultaneously, as the figure shows, in Condmat we can entirely remove all = 2 test negatives with only a 0.2% effect on the AUROC for two predictors from entirely different families. We must remove all  X  4 test negatives before the alteration becomes conspicuous, yet these are the significant boundary instances.

Since we also know that data distributions do not affect ROC curves, we can extend this observation even when no sampling is involved: Considering the entire set of potential links in ROC space evaluates prediction performance of low-distance positives versus high-distance negatives. We must instead describe performance within the distribution of = 2 positives and negatives and select predictors that optimize this boundary. 4.3 Case study on Kaggle sampling Of the described sampling methods, only uniform random selection from the complete set of potential edges preserves the testing distribution. Though questionable for meaningful evaluation of deployment potential, it is at least an attempt at unbiased evaluation. One recently employed alternative takes another approach to sampling, aggressively undersam-pling negatives from over-represented distances and preserving a much higher proportion of low-distance instances. The Kaggle link prediction competition [ 35 ] undersampled the testing set by manipulating the amount of sampling from each neighborhood to maintain approximate balance within the neighborhoods. The distribution of distances exhibited by the 8,960 test edges is shown in Fig. 12 .

Consider the results of Fig. 12 against the results of fair random sampling in the Condmat network. Unless Kaggle has an incredibly small effective diameter, it is impossible to obtain this type of distribution. It requires a sampling approach that includes low-distance edges from the testing network with artificially high probability. While this selective sampling approach might seem to better highlight some notion of average boundary performance across neighborhoods, it is instead meaningless because it creates a testing distribution that would never exist in deployment. The Kaggle competition disclosed that the test set was balanced. In a deployment scenario, it is impossible to provide to a prediction method a balance of positives and negatives from each distance, because that would require knowledge of the target of the prediction task itself.

More significantly, the Kaggle approach is unfair and incomparable because the original distribution is not preserved, and there is no reason to argue for one arbitrary manipulation of distance prevalence over another. Simultaneously, the AUROC will vary greatly according to each distributional shift. It is even possible to predictably manipulate the test set to achieve an arbitrary AUROC through such a sampling approach. Any results obtained via such a testing paradigm are inextricably tied to the sampling decisions themselves, and the sampling requires the very results we are predicting in a deployment scenario. As a result, Kaggle AUROCs may not be indicative of real achievable performance or even of a proper ranking of models in a realistic prediction task.
 To empirically explore the differences between a fair random sampling strategy and the Kaggle sampling strategy, we provide the distributions of distances in different data sets using both sampling strategies. Additionally, we also compare the AUROC achievable in two sampling strategies. In Fig. 13 , we compare the differences of distance distributions when using fair random sampling and Kaggle sampling, while in Table 3 we provide ROC performances (AUROC) of prediction methods under these two sampling strategies.
In Table 3 , we can see that the apparent achievable performance using the Kaggle sampling strategy is remarkably higher, up to 25%, than the performance achievable by fair random sampling. The performance discrepancy between fair random sampling and Kaggle sampling depends upon several factors, such as the prediction method, network size, and the geodesic distribution of positive instances. Here, we will explore the observations made in Table 3 .  X  Geodesic distribution . Increasing increases the difficulty of the prediction subproblem  X  Preferential attachment . Preferential attachment ignores the impact of geodesic dis- X  PropFlow . PropFlow considers the influence of geodesic distance on the formation of  X  Adamic Adar . The Adamic/Adar method only has descriptive power within the = 2 5 New nodes There are two fundamentally different ways to generate test sets in link prediction. The first is to create a set of potential links by examining the predictor network and selecting all pairs for which no edge exists. Positives are those among the set that subsequently appear in the testing network, and negatives are all others. The second is to use the testing network to generate the set of potential links. Positives are those that exist in the testing network but not in the training network, and negatives are those that could exist in the testing network but do not. The subtle difference lies in whether or not the prediction method is faced with or penalized for links that involve nodes that do not appear during training time.
The choice we should make depends on how the problem is posed. If we are faced with the problem of returning a most confident set of predictions, then new nodes in the testing network are irrelevant. Although we could predict that an existing node will connect to an unobserved node, we cannot possibly predict what node the unobserved node will be.
If we are faced with the problem of answering queries, then the ability to handle new nodes is an important aspect of performance. On the one hand, we could offer a constant response, either positive or negative, to all queries regarding unfamiliar nodes. The response to offer and its effect on performance depend on the typical factors of cost and expected class distribution. On the other hand, some prediction methods may support natural extensions to provide a lesser amount of information in such cases. For instance, preferential attachment could be adapted to assume a degree of 1 for unknown nodes. Path-based predictors would have no basis to cope with this scenario whatsoever. In supervised classification, any such features become missing values and the algorithm must support such values.

Evaluating with potential links drawn from the testing network is problematic for decom-posing the problem by distance since the distance must be computed from single-source shortest paths based on the pretend removal of the link that appears only in the testing net-work. Since distance is such a crucial player in determining link likelihood in most networks, this would nonetheless be an early step in making a determination about link formation like-lihood in any case, so its computation for creating divided test sets is probably unavoidable. Given the extra complexity introduced by using potential link extraction within the testing network, we opt for determining link pairs for testing based on training data unless there is a compelling reason why this is unsatisfactory. This decision only has the potential to exclude links that are already known to be impossible to anticipate from training data, so it necessarily has the same effect across any set of predictors. 6Top K predictive rate Though we caution trusting results that come only in terms of fixed thresholds metrics, some of these fixed thresholds metrics have significant real-world applications. A robust threshold curve metric exhibits the trade-off between sensitivity and specificity. A desirable property of a good fixed-threshold metric is that higher score implies an increase both in sensitivity and specificity . In this section, we discuss the top K predictive rate [ 29 ], which we shall write as TPR K , and explore its evaluation behavior in the link prediction problem. Top K equivalent evaluation metrics have been discussed previously in the work of [ 21 , 38 , 52 ], and this measure is well known as R-precision from information retrieval. We provide a proof of one property of TPR K that is important in link prediction. Based on this proof, we explore the restrictions of TPR K in evaluating the link prediction performance.

We denote the set of true positives as TP ,thesetof true negatives as TN ,thesetof false positives as FP ,thesetof false negatives as FN , the set of all positive instances as P ,andthe set of all negative instances as N .
 Definition 6.1 TPR K is the percentage of correctly classified positive samples among the top K instances in the ranking by a specified link predictor P .

This metric has the following property: Theorem 6.1 When K =| P | in the link prediction problem, sensitivity and specificity are linearly dependent on TPR K .
 Proof By definition, we know: So the equivalence K =| P | allows us to trivially conclude that TPR K and sensitivity are identical. We can write specificity as: When K =| P | , by definition | FP |= K  X  X  TP | , because we predict that all top K are positive instances, and we can conclude that: From this, we see that specificity increases monotonically with the increase in TPR K and is linearly dependent on TPR K .

In Fig. 14 , we provide the TPR K performance of predictors on Condmat, DBLP, Enron, and Facebook. The vertical line indicates the performance of a naive algorithm that draws samples as edges uniformly at random from all instances. Although the top K predictive rate can provide a good performance estimation of link prediction methods when K is appropri-ately selected, we still cannot recommend it as a primary measurement. If | P | is known, then K may be set to that, but in real applications it is often impossible to know or even approx-imate the number of positive instances in advance, so K is not specifiable. From Fig. 14 , we can see that different values of K lead to different evaluations and even rankings of link prediction methods. Figure 14 c shows that a small difference in K will lead to a ranking reversal of the preferential attachment and PropFlow predictors. TPR K is a good metric for the link prediction task when the value of K is appropriately selected, but evaluation results are too sensitive to use arbitrary K . 7 The case for precision-recall curves ROC curves (and AUROC) are appropriate for typical data imbalance scenarios because they optimize toward a useful result and because the appearance of the curve provides a reasonable visual indicator of expected performance. One may achieve an AUROC of 0.99 in scenarios where data set sizes are relatively small (10 3 to 10 6 ) and imbalance ratios are relatively modest (2 to 20). Corresponding precisions are near 1. For complete link prediction in sparse networks, when every potential new edge is classified, the imbalance ratio is lower bounded by the number of vertices in the network [ 26 ]. ROC curves and areas can be deceptive in this situation. In a network with millions of vertices, even with an exceptional AUROC of 0.99, one could suffer small fractions as a maximal precision. Performance put in these terms is often considered unacceptable to researchers. In most domains, examining several million false positives to find each true positive is the classification problem. Even putting aside more concrete theoretical criticisms of ROC curves and areas [ 18 ]inlinkpredictiontasks,theyfail to honestly convey the difficulty of the problem and reasonable performance expectations for deployment. We argue for the use of precision-recall curves and AUPR in link prediction contexts. 7.1 Geodesic effect on link prediction evaluation Precision-recall (PR) curves provide a more discriminative view of classification performance in extremely imbalanced contexts such as link prediction [ 10 ]. Like ROC curves, PR curves are threshold curves. Each point corresponds to a different score threshold with a different precision and recall value. In PR curves, the x axis is recall and the y axis is precision. We will now revisit a problematic scenario that arose with AUROCs and demonstrate that AUPRs present a less deceptive view of predictor performance data. Notably, and compatible with our recommendations against sampling, PR curve construction procedures will require that negatives are not subsampled from the test set. This is not computationally problematic in the consideration of distance-restricted predictions.
Figure 15 shows that the AUPR is higher for = 2 than it is for  X  X  X  . This also validates our proposition that increasing increases the difficulty of the prediction subproblem due to increasing imbalance, which is made in Sect. 4.3 . In the underlying curves, this is exhibited as much higher precisions throughout but especially for low to moderate values of recall. Performance by distance exhibits expected monotonic decline due to increasing baseline difficulty excluding the instabilities in very high distances. Compare this to Fig. 10 where the AUROC for all potential links was much greater than for any neighborhood individually, and the apparent performance was greatest in the 7-hop distance data set. We can also observe in Fig. 15 that the PR area increases almost monotonically with increasing , which differs from the AUROC in Fig. 10 . 7.2 Temporal effect on link prediction evaluation Time has remote yet non-negligible effects on the link prediction task. In this section, we conduct two kinds of experiments. First, with a fixed training set, we compare AUROC and AUPR overall to AUROC and AUPR achievable in distinct subproblems created by dividing the task by temporal distance when the test set is sliced into 5 subsets of the same duration. Second, with a fixed training set, we compare AUROC and AUPR overall across agglomerated subproblems.
 First, we divide the testing set into 5 subsets of equal temporal duration. For instance, in DBLP there are 5 years of data in the testing set, so each year of data provides one subproblem. Figure 16 -1 gives an example of the experimental setting. As described in Fig. 16 -1,wedenote the time series is not persistent [ 55 ], and the preponderance of a node to form new links decays exponentially [ 23 ]. Based on this hypothesis, the performance of a link predictor P on subproblem S i should decrease with increasing i .

In Figs. 17 and 18 , we provide ROC curves and PR curves. We revisit the deceptive nature of AUROCs and demonstrate that AUPRs present a less deceptive view of performance. Based on time series analysis, the performance of a predictor should decline in the presence of high temporal distance, but AUROCs fluctuate with increasing temporal distance. The AUPRs exhibit expected monotonic decline due to increasing baseline difficulty. This finding coincides with our results in Sects. 4 and 7.1 , where AUROC values fluctuate with geodesic distance and AUPR values decrease monotonically.
 To emphasize these conclusions, we agglomerate the subproblems over time as shown in Fig. 16 -2. The subproblem becomes easier when more years of data are included, because the total number of prediction candidates is fixed while the number of positive instances is increasing. In this way, the performance of a predictor should increase when the subprob-lem includes more data. Figure 19 shows distinct behaviors of AUROCs and AUPRs. The AUROC values decline or are unstable while the AUPR values for all three predictors increase monotonically. 8Conclusion To select the best predictor, we must know how to evaluate predictors. Beyond this, we must be sure that readers do not come away from papers with the question of how new methods actually perform.Itismoredifficulttospecifyandexplainlinkpredictionevaluationstrategies than with standard classification wherein it is sufficient to fully specify a data set, one of a few evaluation methods, and a given performance metric. In link prediction, there are many potential parameters often with many undesirable values. There is no question that the issues raised herein can lead to questionable or misleading results. The theoretical and empirical demonstrations should convince the reader that they do lead to questionable or misleading results.

Much of this paper relies upon the premise that the class balance ratio differs, even differs wildly, across distances. There are certainly rare networks where such an expectation is tenuous, but the premise holds in every network with which the authors have worked including networks from the following families: biology, commerce, communication, collaboration, and citation.

Based on our observations and analysis, we propose the following guidelines: 1. Use precision-recall curves and AUPR as an evaluation measure. In our experiments, 2. Avoid fixed thresholds unless they are supplied by the problem domain. We identify 3. Render prediction performance evaluation by geodesic distance. In Sects. 4.2 , 7 ,and 4. Donotundersamplenegativesfromtestsets,whichwillbeofmoremanageablesizedueto 5. If negative undersampling is undertaken for some reason, it must be based on a purely 6. In undirected networks, state if a method is invariant to designations of source and 7. Always take care to use the same testing set instances regardless of the nature of the 8. In temporal data, the final test set on which evaluation is performed should receive 9. Consider whether the link prediction task set forth is to solve the recommendation prob-References
