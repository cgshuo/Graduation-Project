 In this paper we define a type of cohesive subgroups  X  called communities  X  in hypergraphs, based on the edge connec-tivity of subhypergraphs. We describe a simple algorithm for the construction of these sets and show, based on ex-amples from image segmentation and information retrieval, that these groups may be useful for the analysis and acces-sibility of large graphs and hypergraphs.
 Categories and Subject Descriptors: H.3.3 General Terms: Algorithms, Experimentation, Perfor-mance, Theory.
 Keywords: Graph, Hypergraph, Components, Commu-nity, Cohesive Group, Edge-Connectivity, Document Col-lection, Image Segmentation.
In many applications one is interested in groups of ac-tors or objects which are more closely related to each other than arbitrary groups. More formally, these so called cohe-sive subgroups are sets of vertices in a graph or hypergraph, which models the relations between the objects of interest, which are in some sense denser or more tightly connected than arbitrary subsets. A very general approach is that of clustering or partitioning (for an introduction see eg. [8], for hypergraphs see [16] ). But in many situations a com-plete decomposition is not appropriate. Instead some ob-jects might be classified as something like  X  X ut-liers X  or not as strong connected to specific groups. Problems like these occur in various settings, like electronics (eg. [11]), socio-metrics (eg. [13]), information retrieval (eg. [6, 7, 9]) and segmentation of images (eg. [14]). Every type of cohesive subgroups uses its own, specific definition of cohesiveness. In this paper we want to give examples for cohesive sub-groups or communities , as they are called here, based on the edge connectivity of the sub(hyper)graphs. More spe-cific, we say that the community of a given subhypergraph  X  Corresponding author: mbrinkme@tu-ilmenau.de is the maximal subhypergraph of maximum edge connectiv-ity containing it. Our definition is an extension of the type of communities described in [3] to hypergraphs. The con-structed groups are k -components in the sense of Matula [12], which were subsequently examined by Botafogo et al. [2, 1]. Our emphasis lies on the presentation of a new, faster  X  at least as experiments indicate  X  algorithm for their con-struction, as well as the treatment of large networks. In section 2 we introduce hypergraphs and required no-tions, while section 3 provides the definition of commu-nities and some of their most important properties. The following section describes our main algorithmic tool, Lax-Adjacency-Orderings as introduced in [4, 5], which are used subsequently to formulate a rough description of the imple-mented algorithm, which was used during experiments were conducted. Finally, we shortly present some experimental results regarding image segmentation and the detection of cohesive subgroups in large document sets. The experimen-tal data show, that even though the asymptotic worst-case runtime of our algorithm is quite large, the average runtime of our algorithm is much lower, allowing the structuring of a collection of documents with about 1.5 million word-document relations, in about 900 seconds. Furthermore, hand, the experiments indicate, that the resulting groups may be of value in several fields of applications.
For an arbitrary finite set X let P  X  ( X ) be the set of all subsets with at least two elements. An (undirected) hyper-graph H = ( V, E ) consists of a finite, non-empty set V of ver-tices and a multi-set E of sets in P  X  ( V ) whose elements are called (hyper)edges . 1 The size | e | of an edge is the number of vertices it contains. In general n denotes the number of ver-tices of a hypergraph, m the number of edges and M the sum of the sizes of all edges, ie. M = P e  X  E | e | . A hypergraph H is edge weighted if there exists a map w : E  X  R + assigning a strictly positive real number to each edge. More general, we assume for an arbitrary subset x  X  V that w ( x ) &gt; 0 if and only if x  X  E . A weighted hypergraph will be written as a triple H = ( V, E ; w ). An edge e  X  E is said to touch a subset X  X  V of vertices, if X  X  e 6 =  X  . The degree deg of a vertex v  X  V is the number of edges touching it. The weight w ( v ) incident to v is the sum of all edges touching v . A cut of a hypergraph H = ( V, E ; w ) is a proper subset C  X  V of vertices. The weight w ( C ) of a cut is the sum
Observe, that we allow  X  X arallel X  hyperedges, ie. that the same vertex set may appear multiple times as a hyperedge. of the weights of all edges touching C and its complement C = V \ C . A minimum cut of H = ( V, E, w ) is a cut of minimum weight. The weight of a minimum cut is called edge connectivity of H and denoted by  X  H . A cut and its complement can naturally be identified with each other.
In contrast to graphs, hypergraphs allow two notions of subgraphs. The first, the notion of partial hypergraph pre-serves edges, ie. it is a hypergraph G = ( U, F ) with U  X  V and F  X  E , such that e  X  F implies e  X  U . The second, more flexible notion of subhypergraph allows hypergraphs with  X  X ncomplete X  subedges. A subhypergraph G = ( U, F ) of this type satisfies U  X  V and for every edge e of H there exists at most one subedge e 0  X  e in G . If H is weighted, then the weight of the edges in the subhypergraph (partial hyper-graph) is the weight of the associated original edge. Obvi-ously the notions of subhypergraph define partial orders on hypergraphs. We write G  X  H if G is a subhypergraph of H . Let U  X  V be a proper subset of vertices. The subhypergraph H [ U ] induced by U is the hypergraph H [ U ] = ( U, E [ U ]; w ) with E [ U ] := { e [ U ] := e  X  U | e  X  E and | e  X  U |  X  2 } and w ( e [ U ]) := w ( e ). The partial hypergraph H X  U  X  induced by U is the hypergraph H X  U  X  = ( U, E  X  U  X  ; w ) with E  X  U  X  := { e | e  X  U } .

Let H = ( V, E ) be an undirected hypergraph and U = { U 1 , . . . , U l } a partition of its vertex set V . For v  X  V , the class U i containing v is denoted by [ v ]. The hypergraph H / U denotes the contraction of H along U , ie. its vertices are the classes of U and its edges are given by E ( H / U ) = { [ e ] | e  X  those containing only vertices in one class). A partition U  X  H ( u, v )  X   X  . A hypergraph G is a  X  -proper contraction of H , if G = H / U and U is  X  -proper. It is easy to see, that the relation of being a  X  -proper contraction is associative, ie. if G is a  X  -proper contraction of H and G 0 one of G , then G a  X  -proper contraction of H , too.
We want to identify cohesive groups in a hypergraph, ie. sets of vertices, which are in some sense stronger connected than arbitrary sets. We use the edge connectivity of a sub-hypergraph as its measure of cohesiveness. Hence a cohesive subgroup containing a specific subset of vertices or even a subhypergraph G , is a maximal subhypergraph of maximum edge connectivity containing G .

Definition 1. Let H = ( V, E ; w ) be a weighted, undi-rected hypergraph and G = ( U ; F ) a subhypergraph (par-tial hypergraph) of H . A Community C generated by G is a subhypergraph (partial hypergraph) containing G , such that The strength str H ( G ) of a subhypergraph G is the edge con-nectivity of its community. The family of all communities of H is denoted by Comm( H ).

Similar as in [3] for graphs, it can be proved that there exists a uniquely determined community comm H ( G ) for ev-ery subhypergraph (partial hypergraph) G of a hypergraph H . Furthermore, the set of all communities is laminar , ie.for every pair C 1 , C 2 of communities, either C 1  X  C 2 =  X  or one is contained in the other.

In addition to the global notion of community, we are going to use a parametrized version. For an arbitrary sub-hypergraph G of H = ( V, E ; w ) and for  X  with  X  H  X   X   X  str
H ( G ), the  X  -community comm  X  H ( G ) of G is the largest community C containing G with  X  C  X   X  .

In fact, our communities coincide with the k -components as introduced by Matula [12]. He defines a  X  -component of an undirected graph as a maximal subgraph of edge con-nectivity  X  . In our terminology, the  X  -community with  X 
H  X   X   X  str H ( G ) of a subhypergraph G , is the minimal  X  -component with  X   X   X  containing G . Lax-Adjacency-Orderings are relaxations of Maximum-Adjacency-Orderings as introduced by Stoer and Wagner [15]. They were already used in [4] to decrease the time required by the construction of a minimum cut of an undi-rected graph, and in [5] in the more general setting of sym-metric submodular functions and related concepts (including cuts of hypergraphs).

Definition 2. A Lax-Adjacency-Ordering (LA-ordering) with threshold  X  &gt; 0 of an undirected hypergraph H = for i = 2 , . . . , n and V i := { v 1 , . . . , v i  X  1 } .
In other words, the i -th vertex in an LA-ordering has max-imum adjacency 2 to its predecessors, or at least adjacency  X  . The application of a modified Fibonacci-heap, which identi-fies all keys  X   X  , allows the construction of an LA-ordering in time O ( M + n min {  X , log n } ).

In [5] it was proven, that for j  X  i  X  2 the inequality LA-ordering ( v 1 , . . . , v n ) of H = ( V, E ; w ) with threshold  X  &gt; 0 induces a  X  -proper contraction, in which each class consists of the maximal high-adjacency sequences , ie. the maximal sequences v i , . . . , v j , such that w ( V k , v i  X  k  X  j . We say, G is an LA-contraction of H with threshold  X  , if there exists an LA-ordering with threshold  X  of H , such that G is the contraction of H along the in-duced partition. More general we say G is an iterated LA-contraction with threshold  X  of H , if there exists a sequence H = G 0 , G 1 , . . . , G l = G of hypergraphs, such that G LA-contraction of G i  X  1 with threshold  X  for 1  X  i  X  l . In this situation, for every pair u, v of vertices in H , we have if [ u ] 6 = [ v ] in G . A direct consequence of this observation is the fact, that the trivial hypergraph is an iterated LA-contraction of H with threshold  X  , if and only if  X  H  X   X  .
Assume that G = H / U is a  X  -proper contraction of H and that there exists a community C  X  Comm( H ) with  X  C  X   X  , such that the vertices of C lie in at least two classes of U . For vertices of C . Then the cut [ v i ] separates vertices in C and hence its weight is at least  X  C  X   X  . This implies w ([ v
The Adjacency of v i is the sum of all weights of edges con-necting v i to its predecessors. subhypergraph (partial hypergraph) induced by all vertices in [ v 1 ]  X   X   X   X   X  [ v i ]. Due to the previously made observations, this implies, that [ v i ] has an adjacency  X   X  . Algorithm 1 : Construction of all  X  -communities. Input : An undirected, weighted hypergraph Output : The set of all  X  -communities of H .
 Data : Two sets S , T of sets of vertices of H
S := { V } ; while S 6 =  X  do end return T
This property of LA-orderings can be used to construct all  X  -communities for a given  X  &gt; 0. Assume that G is an iterated LA-contraction of H with threshold  X  and let G 0 be an LA-contraction of G with the same threshold. If the  X  -communities of H aren X  X  contracted into single vertices, we have G 0 6 = G . If G 0 = G , then every  X  -community has to be contracted into a single vertex, and we can restrict our search to the subhypergraphs (partial hypergraphs) induced by the non trivial classes of G 0 . If G 0 is trivial, ie. if it con-sists of exactly one vertex, and hence  X  C  X   X  and H itself is the only  X  -community in H . These observations imply that Algorithm 1 constructs the set of all  X  -communities of a given hypergraph H = ( V, E ; w ). Now assume that the set T of  X  -communities of H is known. Since Comm( H ) is laminar, every  X  -community of H with  X  &gt;  X  is a subhyper-graph of a  X  -community. Hence, the set of all  X  -communities can be constructed by constructing all  X  -communities in the (known)  X  -communities of H . This observation implies a simple algorithm for the construction of all communities, if the edge weights are integers. We start with  X  =  X  H , which may be obtained via the algorithms described in [10, 4, 5] an determine all  X  -communities. Then we increase  X  step by step and construct all  X  -communities in the communities found in the preceding round. The algorithm terminates, if no community was found in the last round.

An alternative is a kind binary search. Observe that the edge connectivity of every community lies between  X  H and the maximum weight incident to a single vertex. Now as-sume, that for a given hypergraph H it is known that all communities have edge connectivities in the interval [  X ,  X  X . Set  X  = d (  X  +  X ) / 2 e and construct all  X  -communities in H . Then all communities with edge-connectivities in [  X ,  X  X  are subhypergraphs of  X  -communities. On the other hand, all communities with edge connectivities in [  X ,  X  ] still are communities in G , which is obtained from H by contract-ing each  X  -community to a single vertex. Hence, every  X  -community of H contains only communities with edge con-nectivities in [  X ,  X  X  and G only those with edge connectivity in [  X ,  X  ]. This leads to Algorithm 2. Following the argu-ments in [4], one can prove that the construction of an LA-ordering requires O ( n log n + M ) time. Since we can only guarantee one contraction per round (except for the last), Algorithm 1 requires at most n rounds, leading to a worst case runtime of O ( n 2 log n + nM ). Since Algorithm 2 uses Algorithm 1 as a subroutine, the total runtime of it is at most O ( W n 2 log n + W nM ), with W the maximal weight incident to a single vertex.
 Algorithm 2 : Communities  X  Finding all Communities Input : An undirected, integer weighted Hypergraph
Output : The set of all communities in H with Determine the set R of all  X  -communities of H using
Algorithm 1; if  X  =  X  then else end
If the edge weights aren X  X  integers, we can use Algorithm 2 to determine  X  -communities, for a finite number of discrete values. Afterwards, the gaps between these values can be  X  X illed X  using the adaption of the algorithm described in [3] to hypergraphs.
In the following we shortly present two applications of communities, image segemntation adn the structuring of col-lections of text documents. Figures 1 and 1 show two ex-amples of images which were partitioned using communities. The shown segments are the dominating communities of the graph whose vertices correspond to the pixels and whose edges connect adjacent pixels, weighted according the simi-larity of their color.

A second set of experiments structured the document-word-hypergraph of several document collections. Each doc-ument was interpreted as a vertex and every word as an hyperedge, containing the documents which in turn con-tained the word. On these graphs, the communities were refined using pre-and postprocessing. Details can be found in [17]. Here only one dataset should be mentioned ex-plicitly. It is an enhanced version of the Reuters newswire dataset ( reu ). The documents of this dataset are assigned to unique categories. For example, it contains classes earn (stock/dividend ticker), acq (company/corporation mes-sages), money-fx (banks and reserves), crude (raw materi-als), grain (agriculture), interest , sugar and coffee ordered by its size. Figure 2 is a tree of refined communities C , Figure 1: The dominating communities of a picture with simple shapes and a  X  X hotograph X  (arranged horizontally). where each community is represented by the set of its most frequent words. The ties are labeled with the number of documents the subtree contains. [1] R. A. Botafogo. Cluster analysis for hypertext [2] R. A. Botafogo and B. Shneiderman. Identifying [3] M. Brinkmeier. Communities in graphs. In T. B  X  ohme, [4] M. Brinkmeier. A simple and fast min-cut algorithm. [5] M. Brinkmeier. Minimizing symmetric set functions [6] G. Flake, S. Lawrence, and C. L. Giles. Efficient [7] G. W. Flake, S. Lawrence, C. L. Giles, and F. Coetzee. Figure 2: The dominating refined communities of the reuters dataset. [8] M. Gaertler. Clustering. In U. Brandes and [9] R. E. T. Gary William Flake and K. Tsioutsiouliklis. [10] R. Klimmek and F. Wagner. A simple hypergraph min [11] F. Luccio and M. Sami. On the decomposition of [12] D. W. Matula. k-components, clusters, and slicings in [13] S. B. Seidman. Internal cohesion of ls sets in graphs. [14] J. Shi and J. Malik. Normalized cuts and image [15] M. Stoer and F. Wagner. A simple min-cut algorithm. [16] S. Wassermann and K. Faust. Social Networks [17] J. Werner. Kohesive gruppen in hypergraphen.
