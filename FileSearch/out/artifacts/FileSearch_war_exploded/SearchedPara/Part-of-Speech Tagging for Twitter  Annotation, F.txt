 The growing popularity of social media and user-created web content is producing enormous quanti-ties of text in electronic form. The popular micro-blogging service Twitter ( twitter.com ) is one particularly fruitful source of user-created content, and a flurry of recent research has aimed to under-stand and exploit these data (Ritter et al., 2010; Shar-ifi et al., 2010; Barbosa and Feng, 2010; Asur and Huberman, 2010; O X  X onnor et al., 2010a; Thelwall et al., 2011). However, the bulk of this work eschews the standard pipeline of tools which might enable a richer linguistic analysis; such tools are typically trained on newstext and have been shown to perform poorly on Twitter (Finin et al., 2010).

One of the most fundamental parts of the linguis-tic pipeline is part-of-speech (POS) tagging, a basic form of syntactic analysis which has countless appli-cations in NLP. Most POS taggers are trained from treebanks in the newswire domain, such as the Wall Street Journal corpus of the Penn Treebank (PTB; Marcus et al., 1993). Tagging performance degrades on out-of-domain data, and Twitter poses additional challenges due to the conversational nature of the text, the lack of conventional orthography, and 140-character limit of each message ( X  X weet X ). Figure 1 shows three tweets which illustrate these challenges. Figure 1: Example tweets with gold annotations. Under-
In this paper, we produce an English POS tagger that is designed especially for Twitter data. Our con-tributions are as follows:  X  we developed a POS tagset for Twitter,  X  we manually tagged 1,827 tweets,  X  we developed features for Twitter POS tagging and conducted experiments to evaluate them, and  X  we provide our annotated corpus and trained POS tagger to the research community.
 Beyond these specific contributions, we see this work as a case study in how to rapidly engi-neer a core NLP system for a new and idiosyn-cratic dataset. This project was accomplished in 200 person-hours spread across 17 people and two months. This was made possible by two things: (1) an annotation scheme that fits the unique char-acteristics of our data and provides an appropriate level of linguistic detail, and (2) a feature set that captures Twitter-specific properties and exploits ex-isting resources such as tag dictionaries and phonetic normalization. The success of this approach demon-strates that with careful design, supervised machine learning can be applied to rapidly produce effective language technology in new domains. Table 1: The set of tags used to annotate tweets. The Annotation proceeded in three stages. For Stage 0 , we developed a set of 20 coarse-grained tags based on several treebanks but with some additional cate-gories specific to Twitter, including URLs and hash-tags. Next, we obtained a random sample of mostly American English 1 tweets from October 27, 2010, automatically tokenized them using a Twitter tok-enizer (O X  X onnor et al., 2010b), 2 and pre-tagged them using the WSJ-trained Stanford POS Tagger (Toutanova et al., 2003) in order to speed up man-ual annotation. Heuristics were used to mark tokens belonging to special Twitter categories, which took precedence over the Stanford tags.

Stage 1 was a round of manual annotation: 17 re-searchers corrected the automatic predictions from Stage 0 via a custom Web interface. A total of 2,217 tweets were distributed to the annotators in this stage; 390 were identified as non-English and removed, leaving 1,827 annotated tweets (26,436 to-kens).

The annotation process uncovered several situa-tions for which our tagset, annotation guidelines, and tokenization rules were deficient or ambiguous. Based on these considerations we revised the tok-enization and tagging guidelines, and for Stage 2 , two annotators reviewed and corrected all of the English tweets tagged in Stage 1. A third anno-tator read the annotation guidelines and annotated 72 tweets from scratch, for purposes of estimating inter-annotator agreement. The 72 tweets comprised 1,021 tagged tokens, of which 80 differed from the Stage 2 annotations, resulting in an agreement rate of 92.2% and Cohen X  X   X  value of 0.914. A final sweep was made by a single annotator to correct er-rors and improve consistency of tagging decisions across the corpus. The released data and tools use the output of this final stage. 2.1 Tagset We set out to develop a POS inventory for Twitter that would be intuitive and informative X  X hile at the same time simple to learn and apply X  X o as to maximize tagging consistency within and across an-notators. Thus, we sought to design a coarse tagset that would capture standard parts of speech 3 (noun, verb, etc.) as well as categories for token varieties seen mainly in social media: URLs and email ad-dresses; emoticons; Twitter hashtags , of the form #tagname , which the author may supply to catego-rize a tweet; and Twitter at-mentions , of the form @user , which link to other Twitter users from within a tweet.

Hashtags and at-mentions can also serve as words or phrases within a tweet; e.g. Is #qadaffi going down? . When used in this way, we tag hashtags with their appropriate part of speech, i.e., as if they did not start with # . Of the 418 hashtags in our data, 148 (35%) were given a tag other than # : 14% are proper nouns, 9% are common nouns, 5% are multi-word express-sions (tagged as G ), 3% are verbs, and 4% are some-thing else. We do not apply this procedure to at-mentions, as they are nearly always proper nouns.
Another tag, ~ , is used for tokens marking spe-cific Twitter discourse functions. The most popular of these is the RT ( X  X etweet X ) construction to publish a message with attribution. For example, indicates that the user @USER1 was originally the source of the message following the colon. We ap-ply ~ to the RT and : (which are standard), and also , which separates the author X  X  comment from the retweeted material. 4 Another common discourse marker is ellipsis dots ( . . . ) at the end of a tweet, indicating a message has been truncated to fit the 140-character limit, and will be continued in a sub-sequent tweet or at a specified URL.

Our first round of annotation revealed that, due to nonstandard spelling conventions, tokenizing under a traditional scheme would be much more difficult than for Standard English text. For example, apos-trophes are often omitted, and there are frequently words like ima (short for I X  X  gonna ) that cut across traditional POS categories. Therefore, we opted not to split contractions or possessives, as is common in English corpus preprocessing; rather, we intro-duced four new tags for combined forms: { nominal, proper noun } X { verb, possessive } . 5
The final tagging scheme (Table 1) encompasses 25 tags. For simplicity, each tag is denoted with a single ASCII character. The miscellaneous category G includes multiword abbreviations that do not fit in any of the other categories, like ily ( I love you ), as well as partial words, artifacts of tokenization errors, miscellaneous symbols, possessive endings, 6 and ar-rows that are not used as discourse markers.
Figure 2 shows where tags in our data tend to oc-cur relative to the middle word of the tweet. We see that Twitter-specific tags have strong positional preferences: at-mentions ( @ ) and Twitter discourse markers ( ~ ) tend to occur towards the beginning of messages, whereas URLs ( U ), emoticons ( E ), and categorizing hashtags ( # ) tend to occur near the end. Our tagger is a conditional random field (CRF; Laf-ferty et al., 2001), enabling the incorporation of ar-bitrary local features in a log-linear model. Our base features include: a feature for each word type, a set of features that check whether the word con-tains digits or hyphens, suffix features up to length 3, and features looking at capitalization patterns in the word. We then added features that leverage domain-specific properties of our data, unlabeled in-domain data, and external linguistic resources.

W O RTH : Twitter orthography. We have features for several regular expression-style rules that detect at-mentions, hashtags, and URLs.

AMES : Frequently-capitalized tokens. Micro-bloggers are inconsistent in their use of capitaliza-tion, so we compiled gazetteers of tokens which are frequently capitalized. The likelihood of capital-ization for a token is computed as N cap +  X C N + C , where N is the token count, N cap is the capitalized to-ken count, and  X  and C are the prior probability and its prior weight. 7 We compute features for membership in the top N items by this metric, for N  X  X  1000 , 2000 , 3000 , 5000 , 10000 , 20000 } .
AG D ICT : Traditional tag dictionary. We add features for all coarse-grained tags that each word occurs with in the PTB 8 (conjoined with their fre-quency rank). Unlike previous work that uses tag dictionaries as hard constraints, we use them as soft constraints since we expect lexical coverage to be poor and the Twitter dialect of English to vary sig-nificantly from the PTB domains. This feature may be seen as a form of type-level domain adaptation.
IST S IM : Distributional similarity. When train-ing data is limited, distributional features from un-labeled text can improve performance (Sch  X  utze and Pedersen, 1993). We used 1.9 million tokens from 134,000 unlabeled tweets to construct distributional features from the successor and predecessor proba-bilities for the 10,000 most common terms. The suc-cessor and predecessor transition matrices are hori-zontally concatenated into a sparse matrix M , which we approximate using a truncated singular value de-composition: M  X  USV T , where U is limited to 50 columns. Each term X  X  feature vector is its row in U ; following Turian et al. (2010), we standardize and scale the standard deviation to 0 . 1 .

ETAPH : Phonetic normalization. Since Twitter includes many alternate spellings of words, we used the Metaphone algorithm (Philips, 1990) 9 to create a coarse phonetic normalization of words to simpler keys. Metaphone consists of 19 rules that rewrite consonants and delete vowels. For example, in our data, { thangs thanks thanksss thanx thinks thnx } are mapped to 0NKS , and { lmao lmaoo lmaooooo } map to LM . But it is often too coarse; e.g. { war we X  X e wear were where worry } map to WR .

We include two types of features. First, we use the Metaphone key for the current token, comple-menting the base model X  X  word features. Second, we use a feature indicating whether a tag is the most frequent tag for PTB words having the same Meta-phone key as the current token. (The second feature was disabled in both  X  T AG D ICT and  X  M ETAPH ab-lation experiments.) Our evaluation was designed to test the efficacy of this feature set for part-of-speech tagging given lim-ited training data. We randomly divided the set of 1,827 annotated tweets into a training set of 1,000 (14,542 tokens), a development set of 327 (4,770 to-kens), and a test set of 500 (7,124 tokens). We com-pare our system against the Stanford tagger. Due to the different tagsets, we could not apply the pre-trained Stanford tagger to our data. Instead, we re-trained it on our labeled data, using a standard set of features: words within a 5-word window, word shapes in a 3-word window, and up to length-3 prefixes, length-3 suffixes, and prefix/suffix pairs. 10 The Stanford system was regularized using a Gaus-sian prior of  X  2 = 0 . 5 and our system with a Gaus-sian prior of  X  2 = 5 . 0 , tuned on development data.
The results are shown in Table 2. Our tagger with the full feature set achieves a relative error reduction of 25% compared to the Stanford tagger. We also show feature ablation experiments, each of which corresponds to removing one category of features from the full set. In Figure 1, we show examples that certain features help solve. Underlined tokens Table 2: Tagging accuracies on development and test Table 3: Accuracy (recall) rates per class, in the test set are incorrect in a specific ablation, but are corrected in the full system (i.e. when the feature is added).
The  X  T AG D ICT ablation gets elects , Governor , and next wrong in tweet (a). These words appear in the PTB tag dictionary with the correct tags, and thus are fixed by that feature. In (b), withhh is ini-tially misclassified an interjection (likely caused by interjections with the same suffix, like ohhh ), but is corrected by M ETAPH , because it is normalized to the same equivalence class as with . Finally, s/o in tweet (c) means  X  X houtout X , which appears only once in the training data; adding D IST S IM causes it to be cor-rectly identified as a verb.

Substantial challenges remain; for example, de-spite the N AMES feature, the system struggles to identify proper nouns with nonstandard capitaliza-tion. This can be observed from Table 3, which shows the recall of each tag type: the recall of proper nouns (  X  ) is only 71%. The system also struggles with the miscellaneous category ( G ), which covers many rare tokens, including obscure symbols and ar-tifacts of tokenization errors. Nonetheless, we are encouraged by the success of our system on the whole, leveraging out-of-domain lexical resources ( T and sublexical analysis ( M ETAPH ).

Finally, we note that, even though 1,000 train-ing examples may seem small, the test set accuracy when training on only 500 tweets drops to 87.66%, a decrease of only 1.7% absolute. We have developed a part-of-speech tagger for Twit-ter and have made our data and tools available to the research community at http://www.ark.cs. cmu.edu/TweetNLP . More generally, we be-lieve that our approach can be applied to address other linguistic analysis needs as they continue to arise in the era of social media and its rapidly chang-ing linguistic conventions. We also believe that the annotated data can be useful for research into do-main adaptation and semi-supervised learning.
