 1.1 Chinese Input Method The daily life of Chinese people heavily depends on Chinese input method engine (IME), no matter whether one is composing an E-mail, writing an article, or sending a text message. However, ev-ery Chinese word inputted into computer or cell-phone cannot be typed through one-to-one map-ping of key-to-letter inputting directly, but has to go through an IME as there are thousands of Chi-nese characters for inputting while only 26 letter keys are available in the keyboard. An IME is an essential software interface that maps Chinese characters into English letter combinations. An ef-ficient IME will largely improve the user experi-ence of Chinese information processing.

Nowadays most of Chinese IMEs are pinyin based. Pinyin is originally designed as the pho-netic symbol of a Chinese character (based on the standard modern Chinese, mandarin) , using Latin letters as its syllable notation. For example, the pinyin of the Chinese character  X   X   X (love) is  X  X  X  X . Most characters usually have unique pinyin rep-resentations, while a few Chinese characters may be pronounced in several different ways, so they may have multiple pinyin representations. The ad-vantage of pinyin IME is that it only adopts the pronunciation perspective of Chinese characters so that it is simple and easy to learn. But there are only less than 500 pinyin syllables in stan-dard modern Chinese, compared with over 6,000 commonly used Chinese characters, which leads to serious ambiguities for pinyin-to-character map-ping. Modern pinyin IMEs mostly use a  X  sentence-based  X  decoding technique (Chen and Lee, 2000) to alleviate the ambiguities.  X  Sentence based  X  means that IME generates a sequence of Chinese characters upon a sequence of pinyin inputs with respect to certain statistical criteria. 1.2 Typos and Chinese Spell Checking Written in Chinese characters but not alphabets, spell checking for Chinese language is quite dif-ferent from the same task for other languages. Since Chinese characters are entered via IME, those user-made typos do not immediately lead to spelling errors. When a user types a wrong letter, IME will be very likely to fail to generate the ex-pected Chinese character sequence. Normally, the user may immediately notice the inputting error and then make corrections, which usually means doing a bunch of extra operations like cursor movement, deletion and re-typing. Thus there are two separated sub-tasks for Chinese spell check-ing: 1. typo checking for user typed pinyin se-quences which should be a built-in module in IME, and 2. spell checking for Chinese texts in its narrow sense, which is typically a module of word processing applications (Yang et al., 2012b). These two terms are often confused especially in IME related works such as (Chen and Lee, 2000) and (Wu et al., 2009).

Pinyin typos have always been a serious prob-lem for Chinese pinyin IMEs. The user may fail to input the completely right pinyin simply be-cause he/she is a dialect speaker and does not know the exact pronunciation for the expected character. This may be a very common situation since there are about seven quite different dialects in Chinese, among which being spoken languages, six are far different from the standard modern Chinese, man-darin. With the boom of smart-phones, pinyin ty-pos worsen due to the limited size of soft key-board, and the lack of physical feedback on the touch screen. However, existing practical IMEs only provide small patches to deal with typos such as Fuzzy Pinyin (Wu and Chen, 2004) and other language specific errors (Zheng et al., 2011b).
Typo checking and correction has an important impact on IME performance. When IME fails to correct a typo and generate the expected sentence, the user will have to take much extra effort to move the cursor back to the mistyped letter and correct it, which leads to very poor user experience (Jia and Zhao, 2013). The very first approach for Chinese input with typo correction was made by (Chen and Lee, 2000), which was also the initial attempt of  X  X entence-based X  IME. The idea of  X  X tatistical in-put method X  was proposed by modeling PTC con-version as a hidden Markov model (HMM), and using Viterbi (Viterbi, 1967) algorithm to decode the sequence. They solved the typo correction problem by decomposing the conditional proba-bility P ( H | P ) of Chinese character sequence H given pinyin sequence P into a language model P ( w i | w i 1 ) and a typing model P ( p i | w i ) . The typing model that was estimated on real user input data was for typo correction. However, real user input data can be very noisy and not very conve-nient to obtain. As we will propose a joint model in this paper, such an individual typing model is not necessarily built in our approach. (Zheng et al., 2011a) developed an IME sys-tem with typo correction called CHIME using noisy channel error model and language-specific features. However their model depended on a very strong assumption that input pinyin sequence should have been segmented into pinyin words by the user. This assumption does not really hold in modern  X  X entence-based X  IMEs. We release this assumption since our model solves segmentation, typo correction and PTC conversion jointly.
Besides the common HMM approach for PTC conversion, there are also various methods such as: support vector machine (Jiang et al., 2007), max-imum entropy (ME) model (Wang et al., 2006), conditional random field (CRF) (Li et al., 2009) and statistical machine translation (SMT) (Yang et al., 2012a; Wang et al., 2013c; Zhang and Zhao, 2013), etc.

Spell checking or typo checking was first pro-posed for English (Peterson, 1980). (Mays et al., 1991) addressed that spell checking should be done within a context, i.e., a sentence or a long phrase with a certain meaning, instead of only in one word. A recent spell correction work is (Li et al., 2006), where a distributional similarity was intro-duced for spell correction of web queries.

Early attempts for Chinese spelling checking could date back to (Chang, 1994) where charac-ter tables for similar shape, pronunciation, mean-ing, and input-method-code characters were pro-posed. More recently, the 7th SIGHAN Workshop on Chinese Language Processing (Yu et al., 2013) held a shared task on Chinese spell checking. Var-ious approaches were made for the task includ-ing language model (LM) based methods (Chen et al., 2013), ME model (Han and Chang, 2013), CRF (Wang et al., 2013d; Wang et al., 2013a), SMT (Chiu et al., 2013; Liu et al., 2013), and graph model (Jia et al., 2013), etc. 3.1 From English Letter to Chinese Sentence It is a rather long journey from the first English letter typed on the keyboard to finally a completed Chinese sentence generated by IME. We will first take an overview of the entire process.

The average length of pinyin syllables is about 3 letters. There are about 410 pinyin syllables used in the current pinyin system. Each pinyin sylla-ble has a bunch of corresponding Chinese char-acters which share the same pronunciation repre-sented by the syllable. The number of those homo-phones ranges from 1 to over 300. Chinese char-acters then form words. But word in Chinese is a rather vague concept. Without word delimiters, linguists have argued on what a Chinese word re-ally is for a long time and that is why there is al-ways a primary word segmentation treatment in most Chinese language processing tasks (Zhao et al., 2006; Huang and Zhao, 2007; Zhao and Kit, 2008; Zhao et al., 2010; Zhao and Kit, 2011; Zhao et al., 2013). A Chinese word may contain from 1 to over 10 characters due to different word seg-mentation conventions. Figure 1 demonstrates the relationship of pinyin and word, from pinyin letters  X  nihao  X  to the word  X   X  X  X  (hello)  X . Typically, an IME takes the pinyin input, segments it into sylla-bles, looks up corresponding words in a dictionary and generates a sentence with the candidate words. 3.2 Pinyin Segmentation and Typo Non-Chinese users may feel confused or even surprised if they know that when typing pinyin through an IME, Chinese IME users will never en-ter delimiters such as  X  X pace X  key to segment ei-ther pinyin syllables or pinyin words, but just in-put the entire un-segmented pinyin sequence. For example, if one wants to input  X   X  X  X  X  X  X  (Hello world)  X , he will just type  X  nihaoshijie  X  instead of segmented pinyin sequence  X  ni hao shi jie  X . Nev-ertheless, pinyin syllable segmentation is a much easier problem compared to Chinese word seg-mentation. Since pinyin syllables have a very lim-ited vocabulary and follow a set of regularities strictly, it is convenient to perform pinyin sylla-ble segmentation by using rules. But as the pinyin input is not segmented, it is nearly impossible to adopt previous spell checking methods for English to pinyin typo checking, although techniques for English spell checking have been well developed. A bit confusing but interesting, pinyin typo cor-rection and segmentation come as two sides of one problem: when a pinyin sequence is mistyped, it is unlikely to be correctly segmented; when it is segmented in an awkward way, it is likely to be mistyped.

Inspired by (Yang et al., 2012b) and (Jia et al., 2013), we adopt the graph model for Chinese spell checking for pinyin segmentation and typo correc-tion, which is based on the shortest path word seg-mentation algorithm (Casey and Lecolinet, 1996). The model has two major steps: segmentation and correction. 3.2.1 Pinyin Segmentation The shortest path segmentation algorithm is based on the idea that a reasonable segmentation should minimize the number of segmented units. For a pinyin sequence p 1 p 2 . . . p L , where p i is a letter, first a directed acyclic graph (DAG) G S = ( V , E ) is built for pinyin segmentation step. The vertex set V consists of the following parts: The vertex weights w S are all set to 0. The edges are from a syllable to all syllables next to it: The edge weight the negative logarithm of con-ditional probability P ( S j +1 ,k | S i,j ) that a syllable S gram language model of pinyin syllables: The shortest path P on the graph is the path P with the least sum of weights: Computing the shortest path from S 0 to S E on G gle source shortest path (SSSP) problem on DAG which has an efficient algorithm by preprocessing the DAG with topology sort, then traversing ver-tices and edges in topological order. It has the time complexity of O ( | V | + | E | ) . For example, one in-tends to input  X   X  X  X  X  X  X  (Hello world)  X  by typ-ing  X  nihaoshijie  X , but mistyped as  X  m ihaoshiji w  X . The graph for this input is shown in Figure 2. The shortest path, i.e., the best segmentation is  X  mi hao shi ji w  X . We will continue to use this example in the rest of this paper.
Figure 2: Graph model for pinyin segmentation 3.2.2 Pinyin Typo Correction Next in the correction step, for the segmented pinyin sequence S 1 , S 2 , . . . , S M , a graph G c is constructed to perform typo correction. The ver-tex set V consists of the following parts: syllables next to it and edge weights are the condi-tional probabilities between them. Computing the shortest path from S  X  0 to S  X  E on G c yields the best typo correction result. In addition, the result has been segmented so far. Considering our running example, the graph G c is shown in Figure 3, and the typo correction result is  X  mi hao shi jie  X . Figure 3: Graph model for pinyin typo correction
Merely using the above model, the typo cor-rection result is not satisfying yet, no matter how much effort is paid. The major reason is that the basic semantic unit of Chinese language is actu-ally word (tough vaguely defined) which is usu-ally composed of several characters. Thus the con-ditional probability between characters does not make much sense. In addition, a pinyin syllable usually maps to dozens or even hundreds of cor-responding homophonic characters, which makes the conditional probability between syllables much more noisy. However, using pinyin words instead of syllables is not a wise choice because pinyin word segmentation is not so easy a task as syllable segmentation. To make typo correction better, we consider to integrate it with PTC conversion using a joint model. 3.3 Hidden Markov Model for PTC conversion has long been viewed as a decod-ing problem using HMM. We continue to follow this formalization. The best Chinese character se-quence W for a given pinyin syllable sequence S is the one with the highest conditional probability P ( W | S ) that W = arg max In the HMM for pinyin IME, observation states are pinyin syllables, hidden states are Chinese words, emission probability is P ( s i | w i ) , and transition probability is P ( w i | w i 1 ) . Note the transition probability is the conditional probability between words instead of characters. PTC conversion is to decode the Chinese word sequence from the pinyin sequence. The Viterbi algorithm (Viterbi, 1967) is used for the decoding.

The shortest path algorithm for typo correction and Viterbi algorithm for PTC conversion are very closely related. It has been strictly proven by (For-ney, 1973) that the sequence decoding problem on HMM is formally identical to finding a shortest path on a certain graph, which can be constructed in the following manner.

Consider a first order HMM with all possi-ble observations O = { o 1 , o 2 , . . . , o M } , hidden s transition probabilities ( T s i ,s j ) = P ( s j | s i ) start probabilities ( S s i ) = P ( s i | s 0 ) . For an observation sequence of T time periods Y = { y coding problem is to find the best corresponding hidden state sequence X with the highest proba-bility, i.e.,
X = arg max
Then we will construct a DAG G = ( V , E ) upon the HMM. The vertex set V includes: The edge set E includes: The shortest path P from v 0 to v E is the one with the least sum of vertex and edge weights, i.e.,
P = arg min
The optimization goal of P in Equation (2) is identical to that of X in Equation (1). 3.4 Joint Graph Model For Pinyin IME Given HMM decoding problem is identical to SSSP problem on DAG, we propose a joint graph model for PTC conversion with typo correction. The joint graph model aims to find the global op-timal for both PTC conversion and typo correction on the entire input pinyin sequence. The graph G = ( V , E ) is constructed based on graph G c for typo correction in Section 3.2. The vertex set V consists of the following parts: If the corresponding pinyin syllables in G c have an edge between them, the vertices in G also have an edge: The edge weights are the negative logarithm of the transition probabilities: Although the model is formulated on first order HMM, i.e., the LM used for transition probabil-ity is a bigram one, it is easy to extend the model to take advantage of higher order n -gram LM, by tracking longer history while traversing the graph.
Computing the shortest path from V 0 to V E on G yields the best pinyin-to-Chinese conversion with typo correction result. Considering our running example, the graph G is shown in Figure 4.
The joint graph is rather huge and density. Ac-cording to our empirical statistics, when setting threshold T = 2 , for a sentence of M characters, the joint graph will have | V | = M  X  1 , 000 , and | E | = M  X  1 , 000 , 000 . 3.5 K -Shortest Paths To reduce the scale of graph G , we filter graph G c by searching its K -shortest paths first to get G  X  c and construct G on top of G  X  c . Figure 5 shows the 3-shortest paths filtered graph G  X  c and Figure 6 shows the corresponding G for our running example. The scale of graph may be thus drastically reduced. Figure 5: K -shortest paths in typo correction An efficient heap data structure is required in K -shortest paths algorithm (Eppstein, 1998) for backtracking the best paths to current vertex while traversing. The heap is implemented as a priority queue of size K sorted according to path length that should support efficient push and pop opera-tions. Fibonacci heap (Fredman and Tarjan, 1987) is adopted for the heap implementation since it has a push complexity of O (1) which is better than the O ( K ) for other heap structures.

Another benefit provided by K -shortest paths is that it can be used for generating N -best can-didates of PTC conversion, which may be helpful for further performance improvement. 4.1 Corpora, Tools and Experiment Settings The corpus for evaluation is the one provided in (Yang et al., 2012a), which is originally ex-tracted from the People X  X  Daily corpus and labeled with pinyin. The corpus has already been split into training T X  X  X  X  X  X  , development D X  X  X  and test T X  X  X  X  sets as shown in Table 1.

SRILM (Stolcke, 2002) is adopted for lan-guage model training and KenLM (Heafield, 2011; Heafield et al., 2013) for language model query. The Chinese part of the corpus is segmented into words before LM training. Maximum match-ing word segmentation is used with a large word vocabulary V extracted from web data provided by (Wang et al., 2013b). The pinyin part is seg-mented according to the Chinese part. This vo-cabulary V also serves as the PTC dictionary. The original vocabulary is not labeled with pinyin, thus we use the PTC dictionary of sunpinyin 1 which is an open source Chinese pinyin IME, to label the vocabulary V with pinyin. The emission proba-bilities are estimated using the lexical translation module of MOSES (Koehn et al., 2007) as  X  X rans-lation probability X  from pinyin to Chinese. 4.2 Evaluation Metrics We will use conventional sequence labeling evalu-ation metrics such as sequence accuracy and char-acter accuracy 2 .

Chinese characters in a sentence may be sepa-rated by digits, punctuation and alphabets which are directly inputted without the IME. We fol-low the so-called term Max Input Unit (MIU), the longest consecutive Chinese character sequence proposed by (Jia and Zhao, 2013). We will mainly consider MIU accuracy (MIU-Acc) which is the ratio of the number of completely corrected gen-erated MIUs over the number of all MIUs, and character accuracy (Ch-Acc), but the sentence ac-curacy (S-Acc) will also be reported in evaluation results.

We will also report the conversion error rate (ConvER) proposed by (Zheng et al., 2011a), which is the ratio of the number of mistyped pinyin word that is not converted to the right Chinese word over the total number of mistyped pinyin words 3 . 4.3 Baseline System without Typo Correction Firstly we build a baseline system without typo correction which is a pipeline of pinyin syllable segmentation and PTC conversion. The baseline system takes a pinyin input sequence, segments it into syllables, and then converts it to Chinese char-acter sequence.

The pinyin syllable segmentation already has very high (over 98%) accuracy with a trigram LM using improved Kneser-Ney smoothing. Accord-ing to our empirical observation, emission prob-abilities are mostly 1 since most Chinese words have unique pronunciation. So in this step we set  X  = 0 . We consider different LM smoothing methods including Kneser-Ney (KN), improved Kneser-Ney (IKN), and Witten-Bell (WB). All of the three smoothing methods for bigram and tri-gram LMs are examined both using back-off mod-els and interpolated models. The number of N -best candidates for PTC conversion is set to 10. The results on D X  X  X  are shown in Figure 7 in which the  X -i X  suffix indicates using interpolated model. According to the results, we then choose the tri-gram LM using Kneser-Ney smoothing with inter-polation. Figure 7: MIU-Acc and Ch-Acc with different LM smoothing
The choice of the number of N -best candidates for PTC conversion also has a strong impact on the results. Figure 8 shows the results on D X  X  X  with dif-ferent N s, of which the N axis is drawn in logarith-mic scale. We can observe that MIU-Acc slightly decreases while N goes up, but Ch-Acc largely in-creases. We therefore choose N = 10 as trade-off. Figure 8: MIU-Acc and Ch-Acc with different N s
The parameter  X  determines emission probabil-ity. Results with different  X  on D X  X  X  is shown in Figure 9, of which the  X  axis is drawn in logarith-mic scale.  X  = 0 . 03 is chosen at last.

We compare our baseline system with several practical pinyin IMEs including sunpinyin and Google Input Tools (Online version) 4 . The results on D X  X  X  are shown in Table 2. Figure 9: MIU-Acc and Ch-Acc with different  X  Table 2: Baseline system compared to other IMEs (%) 4.4 PTC Conversion with Typo Correction Based upon the baseline system, we build the joint system of PTC conversion with typo correction.
We simulate user typos by randomly generating errors automatically on the corpus. The typo rate is set according to previous Human-Computer In-teraction (HCI) studies. Due to few works have been done on modeling Chinese text entry, we have to refer to those corresponding results on English (Wobbrock and Myers, 2006; MacKen-zie and Soukoreff, 2002; Clarkson et al., 2005), which show that the average typo rate is about 2%. (Zheng et al., 2011a) performed an experiment that 2,000 sentences of 11,968 Chinese words were en-tered by 5 native speakers. The collected data con-sists of 775 mistyped pinyin words caused by one edit operation, and 85 caused by two edit opera-tions. As we observe on T X  X  X  X  X  X  that the average pinyin word length is 5.24, then typo rate in the experiment of (Zheng et al., 2011a) can be roughly estimated as: which is similar to the conclusion on English. Thus we generate corpora from D X  X  X  with typo rate of 0% ( 0-P ), 2% ( 2-P ), and 5% ( 5-P ) to evaluate the system.

According to (Zheng et al., 2011a) most mistyped pinyin words are caused by one edit op-eration. Since pinyin syllable is much shorter than pinyin word, this ratio can be higher for pinyin syllables. From our statistics on T X  X  X  X  X  X  , with 2% randomly generated typos, P r ( L ( S  X  , S ) &lt; 2) = 99 . 86 %. Thus we set the threshold T for L to 2.
We first set K -shortest paths filter to K = 10 and tune  X  . Results with different  X  are shown in Figure 10. With  X  = 3 . 5 , we select K . Re-Figure 10: MIU-Acc and Ch-Acc with different  X  sults with different K are shown in Figure 11. We choose K = 20 since there is no significant im-provement when K &gt; 20 .

The selection of K also directly guarantees the running time of the joint model. With K = 20 , on a normal PC with Intel Pentium Dual-Core E6700 CPU, the PTC conversion rate is over 2000 characters-per-minute ( cpm ), which is much faster than the normal typing rate of 200 cpm .

With all parameters optimized, results on T X  X  X  X  Figure 11: MIU-Acc and Ch-Acc with different K using the proposed joint model are shown in Ta-ble 3 and Table 4. Our results are compared to the baseline system without typo correction and Google Input Tool . Since sunpinyin does not have typo correction module and performs much poorer than our baseline system, we do not include it in the comparison. Though no direct proofs can be found to indicate if Google Input Tool has an in-dependent typo correction component, its outputs show that such a component is unlikely available.
Since Google Input Tool has to be accessed through a web interface and the network connec-tion cannot be guaranteed. we only take a subset of 10K sentences of T X  X  X  X  to perform the experi-ments, and the results are shown in Table 3.
The scores reported in (Zheng et al., 2011a) are not listed in Table 4 since the data set is differ-ent. They reported a ConvER of 53.56%, which is given here for reference.

Additionally, to further inspect the robustness of our model, performance with typo rate ranges from 0% to 5% is shown in Figure 12. Although the per-formance decreases while typo rate goes up, it is still quite satisfying around typo rate of 2% which is assumed to be the real world situation.
 Table 3: Test results on 10K sentences from T X  X  X  X  (%) Figure 12: MIU-Acc and Ch-Acc with different typo rate (%) In this paper, we have developed a joint graph model for pinyin-to-Chinese conversion with typo correction. This model finds a joint global opti-mal for typo correction and PTC conversion on the entire input pinyin sequence. The evaluation re-sults show that our model outperforms both pre-vious academic systems and existing commercial products. In addition, the joint model is efficient enough for practical use.
