 Trajectory data does not only show the location of users over a period of time, but also reveals a high level of detail regarding their lifestyle, preferences and habits. Hence, it is highly suscep-tible to privacy concerns. Trajectory privacy has become a key re-search topic when sharing/exchanging trajectory datasets. Most ex-isting studies focus on protecting trajectory data through obfuscat-ing, anonymising or perturbing the data with the aim to maximize user privacy. Although such approaches appear plausible, our work suggests that precise trajectory information can be inferred even from other sources of data. We consider the case in which a location service provider only shares POI query results of users with third parties instead of exchanging users X  raw trajectory data to preserve privacy. We develop an inference algorithm and show that it can effectively approximate original trajectories using solely the POI query results.
 I.5 [ Pattern Recognition ]: Models; H.2.8 [ Database Applications ]: Data Mining Trajectory privacy; inference attacks
As smartphones become ubiquitous tools of our everyday life, the growth of mobile applications has led to the generation and storage of massive amounts of location data. This data may be shared in social networks or exchanged among companies. Many applications, e.g., traffic management, urban management and ge-omarketing, gain substantial benefit through mining such sources of trajectory data. However, sharing this data in a raw format with third parties may incur serious privacy threats. Particularly, if inap-propriately protected, such data may turn into powerful means of privacy invasions [3, 13, 19] such as location-based spams, physi-cal threats, or inference attacks [7]. Findings of a recent study in-dicates that a large number of Location Based Service (LBS) users are concerned about their privacy, which places a great impediment to sharing trajectory data and the growth of LBSs in general.
Various approaches in the literature focus on preserving privacy prior to publishing/sharing trajectory data [4, 6, 9, 17, 18]. The authors in [1, 15] propose publishing a k-anonymous trajectory dataset to make a user indistinguishable from k  X  1 other users [16]. Other studies adopt cloaking/obfuscation techniques to coarsen the spatial and/or temporal features of a trajectory [8] before publish-ing it. The authors in [11] propose an approach that adds dummy trajectories to keep the data private.

To motivate our work we consider the case of an LBS provider who sanitises a dataset by omitting all sensitive attributes from the dataset [5]. In other words, instead of anonymizing or obfus-cating trajectory data, the LBS provider removes all GPS tracks of its users along with their identity, presuming this will provide maximum privacy. This means that only the results of user issued queries, which is generated and owned by the Location Service Provider (LSP), remain in the database when sharing it.

To identify the risks of such a plausibly bullet-proof practice, we consider a scenario where users continuously request the clos-est POIs to their position. For instance, a user issues a query like  X  X here is the nearest gas station to my path?" or  X  X end me the clos-est Italian restaurant?". If detailed GPS tracks are removed from the database, the LBS provider may lead others to believe that it is safe to exchange the POI query results  X  a set of POIs ordered based on querying time.

In order to demonstrate the vulnerability of sharing LSP query results with a third party, we develop an algorithm to perform an indirect inference attack on query results. The algorithm infers in-dividuals X  trajectories using the response of LSP to the requested POIs. The trajectory reconstruction is performed without using GPS tracks captured by the LSP but instead, the requested POIs se-quence. As background knowledge we assume the availability of road types, and either their edge centrality or edge frequency , and maximum velocity bound , and basic transportation information about the area.

To the best of our knowledge, our work is the first to attack tra-jectory privacy without directly using trajectory information (either fine-grained or coarse-grained). The accuracy of our approach sug-gests that indirectly inferred paths are sufficiently precise to raise serious privacy concerns. By demonstrating what indirect trajectory inference attacks can achieve, we show that there is an urgent need to address the privacy implications of LBSs when exchanging tra-jectory datasets even when the provider omits the sensitive location data.
Generally, analysing data in order to gain knowledge about a sub-ject in an adversarial manner is known as an  X  X nference attack" [12]. A key work to highlight the potential of location data in predict-ing users X  movement behavior was given in [2]. Ashbrook et al. have used GPS data of mobile users to determine significant places being visited by them [2]. To underline the risks of leaked loca-tion data [12] used real GPS data of 172 subjects and found each person X  X  home location with a median error of about 60 meters. Finally, [12] identified people based on their pseudonymous loca-tion tracks using simple algorithms and a free Web service. In con-trast, our algorithm can estimate a user X  X  trajectory without using the GPS tracks stored by the LSP.

In another study, [10] succeeded at reconstructing an unknown trajectory using its distance to a few fixed trajectories. In order to achieve this, the authors have introduced speed limit and known trajectories as a background knowledge used by an adversary. Sim-ilarly, assuming it is possible to observe a user X  X  movement be-haviour in public places, or even inferring a couple of her vis-ited spots using social networks, weblogs and etc. [14] used some snapshots of a user X  X  trajectory as adversary X  X  background knowl-edge. [14] proves that this  X  X eneral world knowledge" can breach user X  X  privacy with a high probability regardless of how much at-tempt is being taken to anonymize or cloak her location data. These two works clearly show the potential risks stemming from com-bining the available background knowledge along with the mutual distances released for analytical purposes.
POI queries are a common applications of LBSs. An LBS user sends her current location accompanied with a query asking for her closest points of interest, e.g., the closest gas station, Italian restaurant, etc., and the LSP returns a set of points as query result. The query database records are in the form of ( ID , P T ), where ID determines a user. P T is the result of successive POI queries along the user X  X  trip. In other words, P T = { p 1 , p 2 ,..., p each p i represents a the closest point of interest for the i Note that ID is not necessarily a user X  X  actual identity, but rather a unique identifier such as a pseudonym.
An LSP may remove both user identity and location information as the sensitive attributes from the query database, presuming this would guarantee the user X  X  privacy. This supposedly anonymised database is then shared with third parties. We suppose that an ad-versary is any third party with whom this query database is shared. In addition to the closest POIs database, we assume that the adver-sary has one of the following two types of background knowledge about a transportation network:
Edge Centrality: The adversary may consider each street as an edge in a graph and assume that the more central an edge is, i.e., how frequent an edge occurs in a set of candidate paths, the more likely it is that a user travels along it. Hence, edge centrality can be modelled introducing a weighting function. Generally, main roads are more likely to receive higher weights.

Edge Frequency: The adversary may have access to the trips users have taken in the past. In this model, we assume that the ad-versary assigns a higher weight to more frequently travelled edges. The count for a specific edge is incremented for every trip that it could be part of to account for the GPS error. In addition, we as-sume that an attacker also has the following information:
Maximum Velocity Bound: The adversary may also assume that there is a maximum velocity with which a user can travel between two subsequent time stamps. The velocity of a user at a given time can be estimated based on the maximum speed limit of a road.
GPS points do not uniquely identify the roads a user has taken, so the actual trip is generally not known. Thus, conventional trajec-tory similarity measures such as the Hausdorrf distance and DTW are not suitable to assess the success of our algorithm. Take Fig-ure 1a as an example, where the GPS logs do not overlap with the actual path due to the measurement error. Using linear interpola-tion between GPS points (the dashed line connecting points) does not provide a robust means of inferring the original path, and as can be seen in Figure 1a, this interpolation may barely overlap with the underlying road network. Even map matching cannot resolve such a situation because a GPS point cannot be uniquely mapped to a single edge.
To address this issue, we determine the closeness of an inferred path to the original one through proximity circles. We draw circles with r radius around the location of each GPS point (Figure 1a) and estimate the attack success based on the circles. More specifically, the overlapping percentage of the inferred path within r meters to the original path determines the success of the inference attack. This is measured by the number of proximity circles that are visited by the inferred path segments divided by the total number of circles.
Figure 1b shows the example of an inferred path as well as the proximity circles representing the original GPS logs. The inference accuracy is measured using the above equation and is 0 . 91. This metric is useful in evaluating how well the algorithm works in iden-tifying the band a user is travelling along.
Our proposed inference algorithm utilizes the location of query results to generate a Voronoi diagram, which for a given set of points, p i  X  P , divides the space into a number of cells (regions) such that all the points in any cell, c i , are closer to the corresponding p than to any other p . Voronoi diagrams are widely applied in near-est POIs problems. For the set P T , we generate a Voronoi diagram V , and retrieve a set of candidate paths that travel from one Voronoi region to the next. However, since Voronoi cells can be quite large in many areas, the number of these candidate paths is not restrictive enough to reconstruct a unique trajectory and needs to be further reduced. Therefore, maximum velocity bound and edge centrality have been employed in this work to infer the most likely path that was taken by the users.
To generate our initial paths, we propose an incremental search algorithm that iterates through each pair of points. On the first iter-ation, the Voronoi edge between the first and second point is deter-mined and every path segment that intersects with the Voronoi edge is retrieved. This is illustrated on the left of Figure 2. All streets that intersect the Voronoi edge between p 1 and p 2 are retrieved. The initial retrieved path segments are considered as the starting path segments for the candidate path(s). The initial segments are then passed to a function which retrieves all the connected path segments to the initial one and add them to the respective candidate path (Figure 2). Once a set of paths is generated, the last path seg-ment of each path is checked to ensure that it is in the destination Voronoi cell, otherwise the entire candidate path is discarded.
In addition, assuming a maximum velocity bound, max v , we can compute the maximum distance, d , that a user could have travelled between two consecutive timestamps. Therefore, the length of the path is checked and only if its difference with d is less than a thresh-old,  X  , it is added to the set of candidate paths. Since the beginning of a path segment is not necessarily the start point of the trajectory, we assume the generated path may be slightly longer than d , i.e., longer.
To select a single path from the set of generated candidate paths we derived a weighting function to rank the paths based on edge centrality, and then select the top ranked candidate path as the path representing the user X  X  trajectory.

The weighting function counts the frequency of path segment oc-currence in each candidate path and stores this value in a hashtable. The weight for each candidate path is calculated by the summation of each path segment length divided by the length of the whole can-didate path which is then multiplied by the frequency value of each path segment stored in the hashtable divided by the total number of candidate paths. The weighting function returns the path that contains the great-est overlap with other paths in the candidate path set. Therefore, edges that are more commonly used in a set of candidate paths are favoured over edges that are not. Provided users take fairly direct routes to their destination, this weighting function works well.
In our work we employ the GeoLife trajectory dataset 1 to evalu-ate the performance, i.e., accuracy, of our inference approach. The GeoLife dataset consists of more than 17,000 trajectories that have been collected by 182 individuals over three years. We focused on a smaller part of the city of Beijing and retrieved those trajecto-ries that fully reside inside this part. In total we ran our inference algorithm on 279 routes.
We generate random POIs in the city of Beijing and stored them in a database as our P T . These POIs are generated uniformly inside the boundary of Beijing and they are then mapped to their closest road segment. In order to evaluate the performance of our inference algorithm for different scenarios, we create four POI batches of 400, 800, 1600 and 3200 points to reflect sparse and dense areas. For example, 1600 POIs equate to 4 POIs per square kilometer.
In the road network, there are many path combinations a user can travel along to get to a destination. This leads to a large search space and an inefficient search process. To reduce the search complex-ity, we employ a pruning method that discards any combinations that terminates at the same road while expanding paths between Voronoi cells. Moreover, due to the geometric nature of Voronoi di-agrams, individual Voronoi cells can become quite small and may create a case where some paths overshoot the cell and lead to zero candidate paths. In order to compensate for this case, the algorithm allows paths to continue to expand even if they did not terminate in the current Voronoi cell. However a path is finally removed if it does not end in the next Voronoi cell in the next iteration. In our implementation we use the OpenStreetMap 2 data to generate the road network graph. A web interface is also constructed to visu-ally view the data using PHP, Javascript and the Google Maps API. Javascript is used to implement the trajectory inference algorithm and an OpenStack cloud computing environment is utilised to run the inference algorithm. Moreover, the Bower-Watson algorithm is employed to compute the Voronoi diagrams. An example GeoLife path is also illustrated in Figure 3, where the purple (darker) flags illustrate POIs along the path and their respective Voronoi cells. The green (lighter) flags show the original GPS logs.
We measure the accuracy of our inference algorithm as the num-ber of proximity circles that are visited by the inferred path divided by the total number of circles (Section 3.3). To estimate the infer-ence accuracy of our approach, we consider varying radii, r , in me-ter to generate proximity circles, where r  X  X  10 , 50 , 100 , 250 , 500 } . Table 2 shows the performance of our inference algorithm for vary-ing POI densities. Although the overall accuracy is low for very small radius of 10 meters, our results show that for more realis-tic buffers and higher densities our approach is successful in ac-curately estimating a user trajectory and can achieve an average accuracy level beyond 80%. This shows with an increase in POI density and for urban areas with higher POI densities such as city centers, the inferred paths get closer to the original paths incurring higher privacy risks for a user.

In order to understand if access to the trip patterns of users can increase an attacker X  X  ability to infer a user X  X  original path, we ran experiments using edge frequency instead of edge centrality. The edge frequency (see Section 3.2) is computed on the basis of actu-ally travelled trips. Our experiments show small gains in terms of accuracy but also demonstrate that this additional knowledge does not significantly improve an attacker X  X  ability to infer a user X  X  path. Our findings show that in either case the ability of an attacker to infer a user X  X  path based on POI information is high.
In this paper, we presented an algorithm that only employs a set of POIs to indirectly infer a user X  X  trajectory. Our results sug-gest that even coarse location information allows us to approximate a user X  X  trajectory within dense urban areas with high accuracy. Therefore, exchanging query results of LBS users instead of their tracks does not offer adequate privacy protection.

While our inference attacks are effective in areas with high POI densities, there are still a number of directions that are likely to make the overall inference strategy more effective. We assume in our work that for every request there is only the closest POI avail-able, however, an LSP usually provides users with several POIs for a single request. This information could be encoded as a higher-order Voronoi diagram that leads to smaller cells and thus should enable a more refined attack strategy.

In our work we have used positive information, i.e., information directly shared by a location service provider. However, another location service provider (or adversary) could also have the infor-mation about all the POIs that were not revealed because they were not among the closest POIs. Since the overall number of POIs is much larger than the number of POIs returned as a query result, the underlying Voronoi diagram may result in smaller cells, which in turn should improve the accuracy of an inference attack algorithm. We are currently investigating these strategies. [1] O. Abul, F. Bonchi, and M. Nanni. Never walk alone: [2] D. Ashbrook and T. Starner. Using GPS to learn significant [3] R. Becker, R. C X ceres, K. Hanson, S. Isaacman, J. M. Loh, [4] A. Beresford and F. Stajano. Location privacy in pervasive [5] J. Brickell and V. Shmatikov. The cost of privacy: [6] M. L. Damiani, E. Bertino, and C. Silvestri. Protecting [7] M. Duckham and L. Kulik. A formal model of obfuscation [8] M. Gruteser and D. Grunwald. Anonymous usage of [9] T. Hashem and L. Kulik. Don X  X  trust anyone: Privacy [10] E. Kaplan, T. B. Pedersen, E. Savas, and Y. Saygin. [11] H. Kido, Y. Yanagisawa, and T. Satoh. An anonymous [12] J. Krumm. Inference attacks on location tracks. In PerComp , [13] M. Lin, W.-J. Hsu, and Z. Q. Lee. Predictability of [14] C. Y. Ma, D. K. Yau, N. K. Yip, and N. S. Rao. Privacy [15] M. E. Nergiz, M. Atzori, and Y. Saygin. Towards trajectory [16] L. Sweeney. K-anonymity: A model for protecting privacy. [17] M. Terrovitis and N. Mamoulis. Privacy preservation in the [18] M. Wernke, F. Durr, and K. Rothermel. Pshare: Position [19] H. Zang and J. Bolot. Anonymization of location data does
